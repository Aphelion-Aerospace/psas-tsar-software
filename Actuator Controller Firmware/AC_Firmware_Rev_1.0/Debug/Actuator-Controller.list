
Actuator-Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078a0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  0800795c  0800795c  0001795c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fdc  08007fdc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007fdc  08007fdc  00017fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fe4  08007fe4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fe4  08007fe4  00017fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fe8  08007fe8  00017fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000070  0800805c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  0800805c  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024e90  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000044ec  00000000  00000000  00044f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d28  00000000  00000000  00049418  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  0004a140  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d388  00000000  00000000  0004ac30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015da4  00000000  00000000  00067fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c3f6  00000000  00000000  0007dd5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011a152  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c60  00000000  00000000  0011a1d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007944 	.word	0x08007944

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08007944 	.word	0x08007944

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	1c08      	adds	r0, r1, #0
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	464f      	mov	r7, r9
 8000444:	4646      	mov	r6, r8
 8000446:	46d6      	mov	lr, sl
 8000448:	b5c0      	push	{r6, r7, lr}
 800044a:	0004      	movs	r4, r0
 800044c:	b082      	sub	sp, #8
 800044e:	000d      	movs	r5, r1
 8000450:	4691      	mov	r9, r2
 8000452:	4698      	mov	r8, r3
 8000454:	428b      	cmp	r3, r1
 8000456:	d82f      	bhi.n	80004b8 <__udivmoddi4+0x78>
 8000458:	d02c      	beq.n	80004b4 <__udivmoddi4+0x74>
 800045a:	4641      	mov	r1, r8
 800045c:	4648      	mov	r0, r9
 800045e:	f000 f8b1 	bl	80005c4 <__clzdi2>
 8000462:	0029      	movs	r1, r5
 8000464:	0006      	movs	r6, r0
 8000466:	0020      	movs	r0, r4
 8000468:	f000 f8ac 	bl	80005c4 <__clzdi2>
 800046c:	1a33      	subs	r3, r6, r0
 800046e:	469c      	mov	ip, r3
 8000470:	3b20      	subs	r3, #32
 8000472:	469a      	mov	sl, r3
 8000474:	d500      	bpl.n	8000478 <__udivmoddi4+0x38>
 8000476:	e076      	b.n	8000566 <__udivmoddi4+0x126>
 8000478:	464b      	mov	r3, r9
 800047a:	4652      	mov	r2, sl
 800047c:	4093      	lsls	r3, r2
 800047e:	001f      	movs	r7, r3
 8000480:	464b      	mov	r3, r9
 8000482:	4662      	mov	r2, ip
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d828      	bhi.n	80004de <__udivmoddi4+0x9e>
 800048c:	d025      	beq.n	80004da <__udivmoddi4+0x9a>
 800048e:	4653      	mov	r3, sl
 8000490:	1ba4      	subs	r4, r4, r6
 8000492:	41bd      	sbcs	r5, r7
 8000494:	2b00      	cmp	r3, #0
 8000496:	da00      	bge.n	800049a <__udivmoddi4+0x5a>
 8000498:	e07b      	b.n	8000592 <__udivmoddi4+0x152>
 800049a:	2200      	movs	r2, #0
 800049c:	2300      	movs	r3, #0
 800049e:	9200      	str	r2, [sp, #0]
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4652      	mov	r2, sl
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	4662      	mov	r2, ip
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	e018      	b.n	80004e6 <__udivmoddi4+0xa6>
 80004b4:	4282      	cmp	r2, r0
 80004b6:	d9d0      	bls.n	800045a <__udivmoddi4+0x1a>
 80004b8:	2200      	movs	r2, #0
 80004ba:	2300      	movs	r3, #0
 80004bc:	9200      	str	r2, [sp, #0]
 80004be:	9301      	str	r3, [sp, #4]
 80004c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <__udivmoddi4+0x8a>
 80004c6:	601c      	str	r4, [r3, #0]
 80004c8:	605d      	str	r5, [r3, #4]
 80004ca:	9800      	ldr	r0, [sp, #0]
 80004cc:	9901      	ldr	r1, [sp, #4]
 80004ce:	b002      	add	sp, #8
 80004d0:	bc1c      	pop	{r2, r3, r4}
 80004d2:	4690      	mov	r8, r2
 80004d4:	4699      	mov	r9, r3
 80004d6:	46a2      	mov	sl, r4
 80004d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004da:	42a3      	cmp	r3, r4
 80004dc:	d9d7      	bls.n	800048e <__udivmoddi4+0x4e>
 80004de:	2200      	movs	r2, #0
 80004e0:	2300      	movs	r3, #0
 80004e2:	9200      	str	r2, [sp, #0]
 80004e4:	9301      	str	r3, [sp, #4]
 80004e6:	4663      	mov	r3, ip
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d0e9      	beq.n	80004c0 <__udivmoddi4+0x80>
 80004ec:	07fb      	lsls	r3, r7, #31
 80004ee:	4698      	mov	r8, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0872      	lsrs	r2, r6, #1
 80004f4:	430a      	orrs	r2, r1
 80004f6:	087b      	lsrs	r3, r7, #1
 80004f8:	4666      	mov	r6, ip
 80004fa:	e00e      	b.n	800051a <__udivmoddi4+0xda>
 80004fc:	42ab      	cmp	r3, r5
 80004fe:	d101      	bne.n	8000504 <__udivmoddi4+0xc4>
 8000500:	42a2      	cmp	r2, r4
 8000502:	d80c      	bhi.n	800051e <__udivmoddi4+0xde>
 8000504:	1aa4      	subs	r4, r4, r2
 8000506:	419d      	sbcs	r5, r3
 8000508:	2001      	movs	r0, #1
 800050a:	1924      	adds	r4, r4, r4
 800050c:	416d      	adcs	r5, r5
 800050e:	2100      	movs	r1, #0
 8000510:	3e01      	subs	r6, #1
 8000512:	1824      	adds	r4, r4, r0
 8000514:	414d      	adcs	r5, r1
 8000516:	2e00      	cmp	r6, #0
 8000518:	d006      	beq.n	8000528 <__udivmoddi4+0xe8>
 800051a:	42ab      	cmp	r3, r5
 800051c:	d9ee      	bls.n	80004fc <__udivmoddi4+0xbc>
 800051e:	3e01      	subs	r6, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2e00      	cmp	r6, #0
 8000526:	d1f8      	bne.n	800051a <__udivmoddi4+0xda>
 8000528:	9800      	ldr	r0, [sp, #0]
 800052a:	9901      	ldr	r1, [sp, #4]
 800052c:	4653      	mov	r3, sl
 800052e:	1900      	adds	r0, r0, r4
 8000530:	4169      	adcs	r1, r5
 8000532:	2b00      	cmp	r3, #0
 8000534:	db23      	blt.n	800057e <__udivmoddi4+0x13e>
 8000536:	002b      	movs	r3, r5
 8000538:	4652      	mov	r2, sl
 800053a:	40d3      	lsrs	r3, r2
 800053c:	002a      	movs	r2, r5
 800053e:	4664      	mov	r4, ip
 8000540:	40e2      	lsrs	r2, r4
 8000542:	001c      	movs	r4, r3
 8000544:	4653      	mov	r3, sl
 8000546:	0015      	movs	r5, r2
 8000548:	2b00      	cmp	r3, #0
 800054a:	db2d      	blt.n	80005a8 <__udivmoddi4+0x168>
 800054c:	0026      	movs	r6, r4
 800054e:	4657      	mov	r7, sl
 8000550:	40be      	lsls	r6, r7
 8000552:	0033      	movs	r3, r6
 8000554:	0026      	movs	r6, r4
 8000556:	4667      	mov	r7, ip
 8000558:	40be      	lsls	r6, r7
 800055a:	0032      	movs	r2, r6
 800055c:	1a80      	subs	r0, r0, r2
 800055e:	4199      	sbcs	r1, r3
 8000560:	9000      	str	r0, [sp, #0]
 8000562:	9101      	str	r1, [sp, #4]
 8000564:	e7ac      	b.n	80004c0 <__udivmoddi4+0x80>
 8000566:	4662      	mov	r2, ip
 8000568:	2320      	movs	r3, #32
 800056a:	1a9b      	subs	r3, r3, r2
 800056c:	464a      	mov	r2, r9
 800056e:	40da      	lsrs	r2, r3
 8000570:	4661      	mov	r1, ip
 8000572:	0013      	movs	r3, r2
 8000574:	4642      	mov	r2, r8
 8000576:	408a      	lsls	r2, r1
 8000578:	0017      	movs	r7, r2
 800057a:	431f      	orrs	r7, r3
 800057c:	e780      	b.n	8000480 <__udivmoddi4+0x40>
 800057e:	4662      	mov	r2, ip
 8000580:	2320      	movs	r3, #32
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	002a      	movs	r2, r5
 8000586:	4666      	mov	r6, ip
 8000588:	409a      	lsls	r2, r3
 800058a:	0023      	movs	r3, r4
 800058c:	40f3      	lsrs	r3, r6
 800058e:	4313      	orrs	r3, r2
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0xfc>
 8000592:	4662      	mov	r2, ip
 8000594:	2320      	movs	r3, #32
 8000596:	2100      	movs	r1, #0
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	2200      	movs	r2, #0
 800059c:	9100      	str	r1, [sp, #0]
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	2201      	movs	r2, #1
 80005a2:	40da      	lsrs	r2, r3
 80005a4:	9201      	str	r2, [sp, #4]
 80005a6:	e780      	b.n	80004aa <__udivmoddi4+0x6a>
 80005a8:	2320      	movs	r3, #32
 80005aa:	4662      	mov	r2, ip
 80005ac:	0026      	movs	r6, r4
 80005ae:	1a9b      	subs	r3, r3, r2
 80005b0:	40de      	lsrs	r6, r3
 80005b2:	002f      	movs	r7, r5
 80005b4:	46b0      	mov	r8, r6
 80005b6:	4666      	mov	r6, ip
 80005b8:	40b7      	lsls	r7, r6
 80005ba:	4646      	mov	r6, r8
 80005bc:	003b      	movs	r3, r7
 80005be:	4333      	orrs	r3, r6
 80005c0:	e7c8      	b.n	8000554 <__udivmoddi4+0x114>
 80005c2:	46c0      	nop			; (mov r8, r8)

080005c4 <__clzdi2>:
 80005c4:	b510      	push	{r4, lr}
 80005c6:	2900      	cmp	r1, #0
 80005c8:	d103      	bne.n	80005d2 <__clzdi2+0xe>
 80005ca:	f000 f807 	bl	80005dc <__clzsi2>
 80005ce:	3020      	adds	r0, #32
 80005d0:	e002      	b.n	80005d8 <__clzdi2+0x14>
 80005d2:	1c08      	adds	r0, r1, #0
 80005d4:	f000 f802 	bl	80005dc <__clzsi2>
 80005d8:	bd10      	pop	{r4, pc}
 80005da:	46c0      	nop			; (mov r8, r8)

080005dc <__clzsi2>:
 80005dc:	211c      	movs	r1, #28
 80005de:	2301      	movs	r3, #1
 80005e0:	041b      	lsls	r3, r3, #16
 80005e2:	4298      	cmp	r0, r3
 80005e4:	d301      	bcc.n	80005ea <__clzsi2+0xe>
 80005e6:	0c00      	lsrs	r0, r0, #16
 80005e8:	3910      	subs	r1, #16
 80005ea:	0a1b      	lsrs	r3, r3, #8
 80005ec:	4298      	cmp	r0, r3
 80005ee:	d301      	bcc.n	80005f4 <__clzsi2+0x18>
 80005f0:	0a00      	lsrs	r0, r0, #8
 80005f2:	3908      	subs	r1, #8
 80005f4:	091b      	lsrs	r3, r3, #4
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0x22>
 80005fa:	0900      	lsrs	r0, r0, #4
 80005fc:	3904      	subs	r1, #4
 80005fe:	a202      	add	r2, pc, #8	; (adr r2, 8000608 <__clzsi2+0x2c>)
 8000600:	5c10      	ldrb	r0, [r2, r0]
 8000602:	1840      	adds	r0, r0, r1
 8000604:	4770      	bx	lr
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	02020304 	.word	0x02020304
 800060c:	01010101 	.word	0x01010101
	...

08000618 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <HAL_Init+0x3c>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_Init+0x3c>)
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	0049      	lsls	r1, r1, #1
 800062e:	430a      	orrs	r2, r1
 8000630:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000632:	2000      	movs	r0, #0
 8000634:	f000 f810 	bl	8000658 <HAL_InitTick>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d003      	beq.n	8000644 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	2201      	movs	r2, #1
 8000640:	701a      	strb	r2, [r3, #0]
 8000642:	e001      	b.n	8000648 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000644:	f006 f8ce 	bl	80067e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000648:	1dfb      	adds	r3, r7, #7
 800064a:	781b      	ldrb	r3, [r3, #0]
}
 800064c:	0018      	movs	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	b002      	add	sp, #8
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40022000 	.word	0x40022000

08000658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000660:	230f      	movs	r3, #15
 8000662:	18fb      	adds	r3, r7, r3
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000668:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <HAL_InitTick+0x88>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d02b      	beq.n	80006c8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <HAL_InitTick+0x8c>)
 8000672:	681c      	ldr	r4, [r3, #0]
 8000674:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <HAL_InitTick+0x88>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	0019      	movs	r1, r3
 800067a:	23fa      	movs	r3, #250	; 0xfa
 800067c:	0098      	lsls	r0, r3, #2
 800067e:	f7ff fd49 	bl	8000114 <__udivsi3>
 8000682:	0003      	movs	r3, r0
 8000684:	0019      	movs	r1, r3
 8000686:	0020      	movs	r0, r4
 8000688:	f7ff fd44 	bl	8000114 <__udivsi3>
 800068c:	0003      	movs	r3, r0
 800068e:	0018      	movs	r0, r3
 8000690:	f001 f901 	bl	8001896 <HAL_SYSTICK_Config>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d112      	bne.n	80006be <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b03      	cmp	r3, #3
 800069c:	d80a      	bhi.n	80006b4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	2301      	movs	r3, #1
 80006a2:	425b      	negs	r3, r3
 80006a4:	2200      	movs	r2, #0
 80006a6:	0018      	movs	r0, r3
 80006a8:	f001 f8d0 	bl	800184c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <HAL_InitTick+0x90>)
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	e00d      	b.n	80006d0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006b4:	230f      	movs	r3, #15
 80006b6:	18fb      	adds	r3, r7, r3
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	e008      	b.n	80006d0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006be:	230f      	movs	r3, #15
 80006c0:	18fb      	adds	r3, r7, r3
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	e003      	b.n	80006d0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006c8:	230f      	movs	r3, #15
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006d0:	230f      	movs	r3, #15
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
}
 80006d6:	0018      	movs	r0, r3
 80006d8:	46bd      	mov	sp, r7
 80006da:	b005      	add	sp, #20
 80006dc:	bd90      	pop	{r4, r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	20000004 	.word	0x20000004
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000000 	.word	0x20000000

080006ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <HAL_IncTick+0x18>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <HAL_IncTick+0x1c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	18d2      	adds	r2, r2, r3
 80006fa:	4b02      	ldr	r3, [pc, #8]	; (8000704 <HAL_IncTick+0x18>)
 80006fc:	601a      	str	r2, [r3, #0]
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000098 	.word	0x20000098
 8000708:	20000004 	.word	0x20000004

0800070c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  return uwTick;
 8000710:	4b02      	ldr	r3, [pc, #8]	; (800071c <HAL_GetTick+0x10>)
 8000712:	681b      	ldr	r3, [r3, #0]
}
 8000714:	0018      	movs	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	20000098 	.word	0x20000098

08000720 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a05      	ldr	r2, [pc, #20]	; (8000744 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000730:	401a      	ands	r2, r3
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	431a      	orrs	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	601a      	str	r2, [r3, #0]
}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b002      	add	sp, #8
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	fe3fffff 	.word	0xfe3fffff

08000748 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	23e0      	movs	r3, #224	; 0xe0
 8000756:	045b      	lsls	r3, r3, #17
 8000758:	4013      	ands	r3, r2
}
 800075a:	0018      	movs	r0, r3
 800075c:	46bd      	mov	sp, r7
 800075e:	b002      	add	sp, #8
 8000760:	bd80      	pop	{r7, pc}

08000762 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b084      	sub	sp, #16
 8000766:	af00      	add	r7, sp, #0
 8000768:	60f8      	str	r0, [r7, #12]
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	2104      	movs	r1, #4
 8000776:	400a      	ands	r2, r1
 8000778:	2107      	movs	r1, #7
 800077a:	4091      	lsls	r1, r2
 800077c:	000a      	movs	r2, r1
 800077e:	43d2      	mvns	r2, r2
 8000780:	401a      	ands	r2, r3
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	2104      	movs	r1, #4
 8000786:	400b      	ands	r3, r1
 8000788:	6879      	ldr	r1, [r7, #4]
 800078a:	4099      	lsls	r1, r3
 800078c:	000b      	movs	r3, r1
 800078e:	431a      	orrs	r2, r3
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	b004      	add	sp, #16
 800079a:	bd80      	pop	{r7, pc}

0800079c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ac:	68ba      	ldr	r2, [r7, #8]
 80007ae:	211f      	movs	r1, #31
 80007b0:	400a      	ands	r2, r1
 80007b2:	210f      	movs	r1, #15
 80007b4:	4091      	lsls	r1, r2
 80007b6:	000a      	movs	r2, r1
 80007b8:	43d2      	mvns	r2, r2
 80007ba:	401a      	ands	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	0e9b      	lsrs	r3, r3, #26
 80007c0:	210f      	movs	r1, #15
 80007c2:	4019      	ands	r1, r3
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	201f      	movs	r0, #31
 80007c8:	4003      	ands	r3, r0
 80007ca:	4099      	lsls	r1, r3
 80007cc:	000b      	movs	r3, r1
 80007ce:	431a      	orrs	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b004      	add	sp, #16
 80007da:	bd80      	pop	{r7, pc}

080007dc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	035b      	lsls	r3, r3, #13
 80007ee:	0b5b      	lsrs	r3, r3, #13
 80007f0:	431a      	orrs	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b002      	add	sp, #8
 80007fc:	bd80      	pop	{r7, pc}

080007fe <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	0352      	lsls	r2, r2, #13
 8000810:	0b52      	lsrs	r2, r2, #13
 8000812:	43d2      	mvns	r2, r2
 8000814:	401a      	ands	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	629a      	str	r2, [r3, #40]	; 0x28
}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b002      	add	sp, #8
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	68ba      	ldr	r2, [r7, #8]
 8000836:	0212      	lsls	r2, r2, #8
 8000838:	43d2      	mvns	r2, r2
 800083a:	401a      	ands	r2, r3
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	021b      	lsls	r3, r3, #8
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	400b      	ands	r3, r1
 8000844:	4904      	ldr	r1, [pc, #16]	; (8000858 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000846:	400b      	ands	r3, r1
 8000848:	431a      	orrs	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b004      	add	sp, #16
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	07ffff00 	.word	0x07ffff00

0800085c <LL_ADC_SetAnalogWDMonitChannels>:
  *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG
  *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  register __IO uint32_t *preg;
  
  if(AWDy == LL_ADC_AWD1)
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	4a10      	ldr	r2, [pc, #64]	; (80008ac <LL_ADC_SetAnalogWDMonitChannels+0x50>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d103      	bne.n	8000878 <LL_ADC_SetAnalogWDMonitChannels+0x1c>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	330c      	adds	r3, #12
 8000874:	001c      	movs	r4, r3
 8000876:	e009      	b.n	800088c <LL_ADC_SetAnalogWDMonitChannels+0x30>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL));
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	33a0      	adds	r3, #160	; 0xa0
 800087c:	0019      	movs	r1, r3
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	0d5b      	lsrs	r3, r3, #21
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	2204      	movs	r2, #4
 8000886:	4013      	ands	r3, r2
 8000888:	18cb      	adds	r3, r1, r3
 800088a:	001c      	movs	r4, r3
  }
  
  MODIFY_REG(*preg,
 800088c:	6823      	ldr	r3, [r4, #0]
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	4907      	ldr	r1, [pc, #28]	; (80008b0 <LL_ADC_SetAnalogWDMonitChannels+0x54>)
 8000892:	400a      	ands	r2, r1
 8000894:	43d2      	mvns	r2, r2
 8000896:	401a      	ands	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	68b9      	ldr	r1, [r7, #8]
 800089c:	400b      	ands	r3, r1
 800089e:	4313      	orrs	r3, r2
 80008a0:	6023      	str	r3, [r4, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b005      	add	sp, #20
 80008a8:	bd90      	pop	{r4, r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	7cc00000 	.word	0x7cc00000
 80008b0:	7cc7ffff 	.word	0x7cc7ffff

080008b4 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
 80008c0:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)) >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS)) + ((ADC_AWD_CR3_REGOFFSET & AWDy) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL)));
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	3320      	adds	r3, #32
 80008c6:	0018      	movs	r0, r3
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	0d1b      	lsrs	r3, r3, #20
 80008cc:	2203      	movs	r2, #3
 80008ce:	401a      	ands	r2, r3
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	0d5b      	lsrs	r3, r3, #21
 80008d4:	2101      	movs	r1, #1
 80008d6:	400b      	ands	r3, r1
 80008d8:	18d3      	adds	r3, r2, r3
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	18c3      	adds	r3, r0, r3
 80008de:	001c      	movs	r4, r3
  
  MODIFY_REG(*preg,
 80008e0:	6823      	ldr	r3, [r4, #0]
 80008e2:	4a06      	ldr	r2, [pc, #24]	; (80008fc <LL_ADC_ConfigAnalogWDThresholds+0x48>)
 80008e4:	401a      	ands	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	0419      	lsls	r1, r3, #16
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	430b      	orrs	r3, r1
 80008ee:	4313      	orrs	r3, r2
 80008f0:	6023      	str	r3, [r4, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b005      	add	sp, #20
 80008f8:	bd90      	pop	{r4, r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	f000f000 	.word	0xf000f000

08000900 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	4a05      	ldr	r2, [pc, #20]	; (8000924 <LL_ADC_EnableInternalRegulator+0x24>)
 800090e:	4013      	ands	r3, r2
 8000910:	2280      	movs	r2, #128	; 0x80
 8000912:	0552      	lsls	r2, r2, #21
 8000914:	431a      	orrs	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b002      	add	sp, #8
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	6fffffe8 	.word	0x6fffffe8

08000928 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689a      	ldr	r2, [r3, #8]
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	055b      	lsls	r3, r3, #21
 8000938:	401a      	ands	r2, r3
 800093a:	2380      	movs	r3, #128	; 0x80
 800093c:	055b      	lsls	r3, r3, #21
 800093e:	429a      	cmp	r2, r3
 8000940:	d101      	bne.n	8000946 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000942:	2301      	movs	r3, #1
 8000944:	e000      	b.n	8000948 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000946:	2300      	movs	r3, #0
}
 8000948:	0018      	movs	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	b002      	add	sp, #8
 800094e:	bd80      	pop	{r7, pc}

08000950 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	2201      	movs	r2, #1
 800095e:	4013      	ands	r3, r2
 8000960:	2b01      	cmp	r3, #1
 8000962:	d101      	bne.n	8000968 <LL_ADC_IsEnabled+0x18>
 8000964:	2301      	movs	r3, #1
 8000966:	e000      	b.n	800096a <LL_ADC_IsEnabled+0x1a>
 8000968:	2300      	movs	r3, #0
}
 800096a:	0018      	movs	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	b002      	add	sp, #8
 8000970:	bd80      	pop	{r7, pc}

08000972 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	2204      	movs	r2, #4
 8000980:	4013      	ands	r3, r2
 8000982:	2b04      	cmp	r3, #4
 8000984:	d101      	bne.n	800098a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000986:	2301      	movs	r3, #1
 8000988:	e000      	b.n	800098c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800098a:	2300      	movs	r3, #0
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	b002      	add	sp, #8
 8000992:	bd80      	pop	{r7, pc}

08000994 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	601a      	str	r2, [r3, #0]
}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b002      	add	sp, #8
 80009a8:	bd80      	pop	{r7, pc}

080009aa <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	0052      	lsls	r2, r2, #1
 80009b8:	601a      	str	r2, [r3, #0]
}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b002      	add	sp, #8
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	0092      	lsls	r2, r2, #2
 80009d0:	601a      	str	r2, [r3, #0]
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}

080009da <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	431a      	orrs	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	605a      	str	r2, [r3, #4]
}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b002      	add	sp, #8
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	0052      	lsls	r2, r2, #1
 8000a06:	431a      	orrs	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	605a      	str	r2, [r3, #4]
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b002      	add	sp, #8
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	2280      	movs	r2, #128	; 0x80
 8000a22:	0092      	lsls	r2, r2, #2
 8000a24:	431a      	orrs	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	605a      	str	r2, [r3, #4]
}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b002      	add	sp, #8
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	2280      	movs	r2, #128	; 0x80
 8000a40:	4393      	bics	r3, r2
 8000a42:	001a      	movs	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	605a      	str	r2, [r3, #4]
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	4a03      	ldr	r2, [pc, #12]	; (8000a6c <LL_ADC_DisableIT_AWD2+0x1c>)
 8000a5e:	401a      	ands	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	605a      	str	r2, [r3, #4]
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	fffffeff 	.word	0xfffffeff

08000a70 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	4a03      	ldr	r2, [pc, #12]	; (8000a8c <LL_ADC_DisableIT_AWD3+0x1c>)
 8000a7e:	401a      	ands	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	605a      	str	r2, [r3, #4]
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	fffffdff 	.word	0xfffffdff

08000a90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a98:	231f      	movs	r3, #31
 8000a9a:	18fb      	adds	r3, r7, r3
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d101      	bne.n	8000ab6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e1aa      	b.n	8000e0c <HAL_ADC_Init+0x37c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d10a      	bne.n	8000ad4 <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f005 feb7 	bl	8006834 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2254      	movs	r2, #84	; 0x54
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f7ff ff25 	bl	8000928 <LL_ADC_IsInternalRegulatorEnabled>
 8000ade:	1e03      	subs	r3, r0, #0
 8000ae0:	d114      	bne.n	8000b0c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f7ff ff0a 	bl	8000900 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000aec:	4bc9      	ldr	r3, [pc, #804]	; (8000e14 <HAL_ADC_Init+0x384>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	49c9      	ldr	r1, [pc, #804]	; (8000e18 <HAL_ADC_Init+0x388>)
 8000af2:	0018      	movs	r0, r3
 8000af4:	f7ff fb0e 	bl	8000114 <__udivsi3>
 8000af8:	0003      	movs	r3, r0
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8000afe:	e002      	b.n	8000b06 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1f9      	bne.n	8000b00 <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	0018      	movs	r0, r3
 8000b12:	f7ff ff09 	bl	8000928 <LL_ADC_IsInternalRegulatorEnabled>
 8000b16:	1e03      	subs	r3, r0, #0
 8000b18:	d10f      	bne.n	8000b3a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1e:	2210      	movs	r2, #16
 8000b20:	431a      	orrs	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 8000b32:	231f      	movs	r3, #31
 8000b34:	18fb      	adds	r3, r7, r3
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f7ff ff17 	bl	8000972 <LL_ADC_REG_IsConversionOngoing>
 8000b44:	0003      	movs	r3, r0
 8000b46:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4c:	2210      	movs	r2, #16
 8000b4e:	4013      	ands	r3, r2
 8000b50:	d000      	beq.n	8000b54 <HAL_ADC_Init+0xc4>
 8000b52:	e14e      	b.n	8000df2 <HAL_ADC_Init+0x362>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d000      	beq.n	8000b5c <HAL_ADC_Init+0xcc>
 8000b5a:	e14a      	b.n	8000df2 <HAL_ADC_Init+0x362>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b60:	4aae      	ldr	r2, [pc, #696]	; (8000e1c <HAL_ADC_Init+0x38c>)
 8000b62:	4013      	ands	r3, r2
 8000b64:	2202      	movs	r2, #2
 8000b66:	431a      	orrs	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff feed 	bl	8000950 <LL_ADC_IsEnabled>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d137      	bne.n	8000bea <HAL_ADC_Init+0x15a>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	2218      	movs	r2, #24
 8000b82:	4393      	bics	r3, r2
 8000b84:	0019      	movs	r1, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	0899      	lsrs	r1, r3, #2
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	0f9b      	lsrs	r3, r3, #30
 8000ba2:	079a      	lsls	r2, r3, #30
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685a      	ldr	r2, [r3, #4]
 8000bb0:	23c0      	movs	r3, #192	; 0xc0
 8000bb2:	061b      	lsls	r3, r3, #24
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d018      	beq.n	8000bea <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	05db      	lsls	r3, r3, #23
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d012      	beq.n	8000bea <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	061b      	lsls	r3, r3, #24
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d00c      	beq.n	8000bea <HAL_ADC_Init+0x15a>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8000bd0:	4b93      	ldr	r3, [pc, #588]	; (8000e20 <HAL_ADC_Init+0x390>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a93      	ldr	r2, [pc, #588]	; (8000e24 <HAL_ADC_Init+0x394>)
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	0019      	movs	r1, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	23f0      	movs	r3, #240	; 0xf0
 8000be0:	039b      	lsls	r3, r3, #14
 8000be2:	401a      	ands	r2, r3
 8000be4:	4b8e      	ldr	r3, [pc, #568]	; (8000e20 <HAL_ADC_Init+0x390>)
 8000be6:	430a      	orrs	r2, r1
 8000be8:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	7e1b      	ldrb	r3, [r3, #24]
 8000bee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7e5b      	ldrb	r3, [r3, #25]
 8000bf4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000bf6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	7e9b      	ldrb	r3, [r3, #26]
 8000bfc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000bfe:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d002      	beq.n	8000c0e <HAL_ADC_Init+0x17e>
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	015b      	lsls	r3, r3, #5
 8000c0c:	e000      	b.n	8000c10 <HAL_ADC_Init+0x180>
 8000c0e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c10:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c16:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	691b      	ldr	r3, [r3, #16]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	da04      	bge.n	8000c2a <HAL_ADC_Init+0x19a>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	691b      	ldr	r3, [r3, #16]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	085b      	lsrs	r3, r3, #1
 8000c28:	e001      	b.n	8000c2e <HAL_ADC_Init+0x19e>
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 8000c2e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	212c      	movs	r1, #44	; 0x2c
 8000c34:	5c5b      	ldrb	r3, [r3, r1]
 8000c36:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8000c38:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2220      	movs	r2, #32
 8000c44:	5c9b      	ldrb	r3, [r3, r2]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d115      	bne.n	8000c76 <HAL_ADC_Init+0x1e6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	7e9b      	ldrb	r3, [r3, #26]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d105      	bne.n	8000c5e <HAL_ADC_Init+0x1ce>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	0252      	lsls	r2, r2, #9
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	e00b      	b.n	8000c76 <HAL_ADC_Init+0x1e6>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c62:	2220      	movs	r2, #32
 8000c64:	431a      	orrs	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c6e:	2201      	movs	r2, #1
 8000c70:	431a      	orrs	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d00a      	beq.n	8000c94 <HAL_ADC_Init+0x204>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c82:	23e0      	movs	r3, #224	; 0xe0
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8000c9c:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 8000ca2:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 8000ca8:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	223c      	movs	r2, #60	; 0x3c
 8000cb4:	5c9b      	ldrb	r3, [r3, r2]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d103      	bne.n	8000cc2 <HAL_ADC_Init+0x232>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	4a57      	ldr	r2, [pc, #348]	; (8000e28 <HAL_ADC_Init+0x398>)
 8000cca:	4013      	ands	r3, r2
 8000ccc:	0019      	movs	r1, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	4a53      	ldr	r2, [pc, #332]	; (8000e2c <HAL_ADC_Init+0x39c>)
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	0019      	movs	r1, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	430a      	orrs	r2, r1
 8000cec:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6818      	ldr	r0, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf6:	001a      	movs	r2, r3
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	f7ff fd32 	bl	8000762 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6818      	ldr	r0, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d06:	494a      	ldr	r1, [pc, #296]	; (8000e30 <HAL_ADC_Init+0x3a0>)
 8000d08:	001a      	movs	r2, r3
 8000d0a:	f7ff fd2a 	bl	8000762 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d109      	bne.n	8000d2a <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2110      	movs	r1, #16
 8000d22:	4249      	negs	r1, r1
 8000d24:	430a      	orrs	r2, r1
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
 8000d28:	e03c      	b.n	8000da4 <HAL_ADC_Init+0x314>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	691a      	ldr	r2, [r3, #16]
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	039b      	lsls	r3, r3, #14
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d136      	bne.n	8000da4 <HAL_ADC_Init+0x314>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	e00c      	b.n	8000d56 <HAL_ADC_Init+0x2c6>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	40da      	lsrs	r2, r3
 8000d46:	0013      	movs	r3, r2
 8000d48:	220f      	movs	r2, #15
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d006      	beq.n	8000d5e <HAL_ADC_Init+0x2ce>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	3301      	adds	r3, #1
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	2b07      	cmp	r3, #7
 8000d5a:	d9ef      	bls.n	8000d3c <HAL_ADC_Init+0x2ac>
 8000d5c:	e000      	b.n	8000d60 <HAL_ADC_Init+0x2d0>
        {
          break;
 8000d5e:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d109      	bne.n	8000d7a <HAL_ADC_Init+0x2ea>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2110      	movs	r1, #16
 8000d72:	4249      	negs	r1, r1
 8000d74:	430a      	orrs	r2, r1
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
 8000d78:	e014      	b.n	8000da4 <HAL_ADC_Init+0x314>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69db      	ldr	r3, [r3, #28]
 8000d84:	4a2b      	ldr	r2, [pc, #172]	; (8000e34 <HAL_ADC_Init+0x3a4>)
 8000d86:	4694      	mov	ip, r2
 8000d88:	4463      	add	r3, ip
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	221c      	movs	r2, #28
 8000d8e:	4013      	ands	r3, r2
 8000d90:	2210      	movs	r2, #16
 8000d92:	4252      	negs	r2, r2
 8000d94:	409a      	lsls	r2, r3
 8000d96:	0011      	movs	r1, r2
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	4a23      	ldr	r2, [pc, #140]	; (8000e38 <HAL_ADC_Init+0x3a8>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d10b      	bne.n	8000dcc <HAL_ADC_Init+0x33c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	4393      	bics	r3, r2
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000dca:	e01c      	b.n	8000e06 <HAL_ADC_Init+0x376>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd0:	2212      	movs	r2, #18
 8000dd2:	4393      	bics	r3, r2
 8000dd4:	2210      	movs	r2, #16
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000de0:	2201      	movs	r2, #1
 8000de2:	431a      	orrs	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 8000de8:	231f      	movs	r3, #31
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000df0:	e009      	b.n	8000e06 <HAL_ADC_Init+0x376>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df6:	2210      	movs	r2, #16
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8000dfe:	231f      	movs	r3, #31
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e06:	231f      	movs	r3, #31
 8000e08:	18fb      	adds	r3, r7, r3
 8000e0a:	781b      	ldrb	r3, [r3, #0]
}
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b008      	add	sp, #32
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000008 	.word	0x20000008
 8000e18:	00030d40 	.word	0x00030d40
 8000e1c:	fffffefd 	.word	0xfffffefd
 8000e20:	40012708 	.word	0x40012708
 8000e24:	ffc3ffff 	.word	0xffc3ffff
 8000e28:	fffe0219 	.word	0xfffe0219
 8000e2c:	dffffc02 	.word	0xdffffc02
 8000e30:	07ffff04 	.word	0x07ffff04
 8000e34:	3fffffff 	.word	0x3fffffff
 8000e38:	833fffe7 	.word	0x833fffe7

08000e3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e46:	2317      	movs	r3, #23
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2254      	movs	r2, #84	; 0x54
 8000e56:	5c9b      	ldrb	r3, [r3, r2]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d101      	bne.n	8000e60 <HAL_ADC_ConfigChannel+0x24>
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	e1bc      	b.n	80011da <HAL_ADC_ConfigChannel+0x39e>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2254      	movs	r2, #84	; 0x54
 8000e64:	2101      	movs	r1, #1
 8000e66:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff fd80 	bl	8000972 <LL_ADC_REG_IsConversionOngoing>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d000      	beq.n	8000e78 <HAL_ADC_ConfigChannel+0x3c>
 8000e76:	e19f      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d100      	bne.n	8000e82 <HAL_ADC_ConfigChannel+0x46>
 8000e80:	e13e      	b.n	8001100 <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	691a      	ldr	r2, [r3, #16]
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	061b      	lsls	r3, r3, #24
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d004      	beq.n	8000e98 <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8000e92:	4abf      	ldr	r2, [pc, #764]	; (8001190 <HAL_ADC_ConfigChannel+0x354>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d108      	bne.n	8000eaa <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	0010      	movs	r0, r2
 8000ea4:	f7ff fc9a 	bl	80007dc <LL_ADC_REG_SetSequencerChAdd>
 8000ea8:	e0c9      	b.n	800103e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	211f      	movs	r1, #31
 8000eb4:	400b      	ands	r3, r1
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	4099      	lsls	r1, r3
 8000eba:	000b      	movs	r3, r1
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	0019      	movs	r1, r3
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	035b      	lsls	r3, r3, #13
 8000ec8:	0b5b      	lsrs	r3, r3, #13
 8000eca:	d105      	bne.n	8000ed8 <HAL_ADC_ConfigChannel+0x9c>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	0e9b      	lsrs	r3, r3, #26
 8000ed2:	221f      	movs	r2, #31
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	e098      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2201      	movs	r2, #1
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d000      	beq.n	8000ee4 <HAL_ADC_ConfigChannel+0xa8>
 8000ee2:	e091      	b.n	8001008 <HAL_ADC_ConfigChannel+0x1cc>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2202      	movs	r2, #2
 8000eea:	4013      	ands	r3, r2
 8000eec:	d000      	beq.n	8000ef0 <HAL_ADC_ConfigChannel+0xb4>
 8000eee:	e089      	b.n	8001004 <HAL_ADC_ConfigChannel+0x1c8>
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	d000      	beq.n	8000efc <HAL_ADC_ConfigChannel+0xc0>
 8000efa:	e081      	b.n	8001000 <HAL_ADC_ConfigChannel+0x1c4>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2208      	movs	r2, #8
 8000f02:	4013      	ands	r3, r2
 8000f04:	d000      	beq.n	8000f08 <HAL_ADC_ConfigChannel+0xcc>
 8000f06:	e079      	b.n	8000ffc <HAL_ADC_ConfigChannel+0x1c0>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2210      	movs	r2, #16
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d000      	beq.n	8000f14 <HAL_ADC_ConfigChannel+0xd8>
 8000f12:	e071      	b.n	8000ff8 <HAL_ADC_ConfigChannel+0x1bc>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2220      	movs	r2, #32
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	d000      	beq.n	8000f20 <HAL_ADC_ConfigChannel+0xe4>
 8000f1e:	e069      	b.n	8000ff4 <HAL_ADC_ConfigChannel+0x1b8>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2240      	movs	r2, #64	; 0x40
 8000f26:	4013      	ands	r3, r2
 8000f28:	d000      	beq.n	8000f2c <HAL_ADC_ConfigChannel+0xf0>
 8000f2a:	e061      	b.n	8000ff0 <HAL_ADC_ConfigChannel+0x1b4>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	4013      	ands	r3, r2
 8000f34:	d000      	beq.n	8000f38 <HAL_ADC_ConfigChannel+0xfc>
 8000f36:	e059      	b.n	8000fec <HAL_ADC_ConfigChannel+0x1b0>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4013      	ands	r3, r2
 8000f42:	d151      	bne.n	8000fe8 <HAL_ADC_ConfigChannel+0x1ac>
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d149      	bne.n	8000fe4 <HAL_ADC_ConfigChannel+0x1a8>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d141      	bne.n	8000fe0 <HAL_ADC_ConfigChannel+0x1a4>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	4013      	ands	r3, r2
 8000f66:	d139      	bne.n	8000fdc <HAL_ADC_ConfigChannel+0x1a0>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	015b      	lsls	r3, r3, #5
 8000f70:	4013      	ands	r3, r2
 8000f72:	d131      	bne.n	8000fd8 <HAL_ADC_ConfigChannel+0x19c>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	019b      	lsls	r3, r3, #6
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d129      	bne.n	8000fd4 <HAL_ADC_ConfigChannel+0x198>
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	01db      	lsls	r3, r3, #7
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d121      	bne.n	8000fd0 <HAL_ADC_ConfigChannel+0x194>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	4013      	ands	r3, r2
 8000f96:	d119      	bne.n	8000fcc <HAL_ADC_ConfigChannel+0x190>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	025b      	lsls	r3, r3, #9
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d111      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x18c>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	029b      	lsls	r3, r3, #10
 8000fac:	4013      	ands	r3, r2
 8000fae:	d109      	bne.n	8000fc4 <HAL_ADC_ConfigChannel+0x188>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	02db      	lsls	r3, r3, #11
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d001      	beq.n	8000fc0 <HAL_ADC_ConfigChannel+0x184>
 8000fbc:	2312      	movs	r3, #18
 8000fbe:	e024      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e022      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8000fc4:	2311      	movs	r3, #17
 8000fc6:	e020      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8000fc8:	2310      	movs	r3, #16
 8000fca:	e01e      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8000fcc:	230f      	movs	r3, #15
 8000fce:	e01c      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8000fd0:	230e      	movs	r3, #14
 8000fd2:	e01a      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8000fd4:	230d      	movs	r3, #13
 8000fd6:	e018      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8000fd8:	230c      	movs	r3, #12
 8000fda:	e016      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8000fdc:	230b      	movs	r3, #11
 8000fde:	e014      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8000fe0:	230a      	movs	r3, #10
 8000fe2:	e012      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8000fe4:	2309      	movs	r3, #9
 8000fe6:	e010      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8000fe8:	2308      	movs	r3, #8
 8000fea:	e00e      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8000fec:	2307      	movs	r3, #7
 8000fee:	e00c      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8000ff0:	2306      	movs	r3, #6
 8000ff2:	e00a      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8000ff4:	2305      	movs	r3, #5
 8000ff6:	e008      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	e006      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e004      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8001000:	2302      	movs	r3, #2
 8001002:	e002      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <HAL_ADC_ConfigChannel+0x1ce>
 8001008:	2300      	movs	r3, #0
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	6852      	ldr	r2, [r2, #4]
 800100e:	201f      	movs	r0, #31
 8001010:	4002      	ands	r2, r0
 8001012:	4093      	lsls	r3, r2
 8001014:	000a      	movs	r2, r1
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	429a      	cmp	r2, r3
 800102a:	d808      	bhi.n	800103e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	6859      	ldr	r1, [r3, #4]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	001a      	movs	r2, r3
 800103a:	f7ff fbaf 	bl	800079c <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	6819      	ldr	r1, [r3, #0]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	001a      	movs	r2, r3
 800104c:	f7ff fbea 	bl	8000824 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db00      	blt.n	800105a <HAL_ADC_ConfigChannel+0x21e>
 8001058:	e0b8      	b.n	80011cc <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800105a:	4b4e      	ldr	r3, [pc, #312]	; (8001194 <HAL_ADC_ConfigChannel+0x358>)
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff fb73 	bl	8000748 <LL_ADC_GetCommonPathInternalCh>
 8001062:	0003      	movs	r3, r0
 8001064:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a4b      	ldr	r2, [pc, #300]	; (8001198 <HAL_ADC_ConfigChannel+0x35c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d11d      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x270>
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	041b      	lsls	r3, r3, #16
 8001076:	4013      	ands	r3, r2
 8001078:	d118      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	0412      	lsls	r2, r2, #16
 8001080:	4313      	orrs	r3, r2
 8001082:	4a44      	ldr	r2, [pc, #272]	; (8001194 <HAL_ADC_ConfigChannel+0x358>)
 8001084:	0019      	movs	r1, r3
 8001086:	0010      	movs	r0, r2
 8001088:	f7ff fb4a 	bl	8000720 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800108c:	4b43      	ldr	r3, [pc, #268]	; (800119c <HAL_ADC_ConfigChannel+0x360>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4943      	ldr	r1, [pc, #268]	; (80011a0 <HAL_ADC_ConfigChannel+0x364>)
 8001092:	0018      	movs	r0, r3
 8001094:	f7ff f83e 	bl	8000114 <__udivsi3>
 8001098:	0003      	movs	r3, r0
 800109a:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 800109c:	e002      	b.n	80010a4 <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3b01      	subs	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f9      	bne.n	800109e <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80010aa:	e08f      	b.n	80011cc <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a3c      	ldr	r2, [pc, #240]	; (80011a4 <HAL_ADC_ConfigChannel+0x368>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d10e      	bne.n	80010d4 <HAL_ADC_ConfigChannel+0x298>
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	045b      	lsls	r3, r3, #17
 80010bc:	4013      	ands	r3, r2
 80010be:	d109      	bne.n	80010d4 <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	0452      	lsls	r2, r2, #17
 80010c6:	4313      	orrs	r3, r2
 80010c8:	4a32      	ldr	r2, [pc, #200]	; (8001194 <HAL_ADC_ConfigChannel+0x358>)
 80010ca:	0019      	movs	r1, r3
 80010cc:	0010      	movs	r0, r2
 80010ce:	f7ff fb27 	bl	8000720 <LL_ADC_SetCommonPathInternalCh>
 80010d2:	e07b      	b.n	80011cc <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a33      	ldr	r2, [pc, #204]	; (80011a8 <HAL_ADC_ConfigChannel+0x36c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d000      	beq.n	80010e0 <HAL_ADC_ConfigChannel+0x2a4>
 80010de:	e075      	b.n	80011cc <HAL_ADC_ConfigChannel+0x390>
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	03db      	lsls	r3, r3, #15
 80010e6:	4013      	ands	r3, r2
 80010e8:	d000      	beq.n	80010ec <HAL_ADC_ConfigChannel+0x2b0>
 80010ea:	e06f      	b.n	80011cc <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	2280      	movs	r2, #128	; 0x80
 80010f0:	03d2      	lsls	r2, r2, #15
 80010f2:	4313      	orrs	r3, r2
 80010f4:	4a27      	ldr	r2, [pc, #156]	; (8001194 <HAL_ADC_ConfigChannel+0x358>)
 80010f6:	0019      	movs	r1, r3
 80010f8:	0010      	movs	r0, r2
 80010fa:	f7ff fb11 	bl	8000720 <LL_ADC_SetCommonPathInternalCh>
 80010fe:	e065      	b.n	80011cc <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	061b      	lsls	r3, r3, #24
 8001108:	429a      	cmp	r2, r3
 800110a:	d004      	beq.n	8001116 <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001110:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <HAL_ADC_ConfigChannel+0x354>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d107      	bne.n	8001126 <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	0019      	movs	r1, r3
 8001120:	0010      	movs	r0, r2
 8001122:	f7ff fb6c 	bl	80007fe <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	da4e      	bge.n	80011cc <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_ADC_ConfigChannel+0x358>)
 8001130:	0018      	movs	r0, r3
 8001132:	f7ff fb09 	bl	8000748 <LL_ADC_GetCommonPathInternalCh>
 8001136:	0003      	movs	r3, r0
 8001138:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a16      	ldr	r2, [pc, #88]	; (8001198 <HAL_ADC_ConfigChannel+0x35c>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d108      	bne.n	8001156 <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4a19      	ldr	r2, [pc, #100]	; (80011ac <HAL_ADC_ConfigChannel+0x370>)
 8001148:	4013      	ands	r3, r2
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <HAL_ADC_ConfigChannel+0x358>)
 800114c:	0019      	movs	r1, r3
 800114e:	0010      	movs	r0, r2
 8001150:	f7ff fae6 	bl	8000720 <LL_ADC_SetCommonPathInternalCh>
 8001154:	e03a      	b.n	80011cc <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <HAL_ADC_ConfigChannel+0x368>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d108      	bne.n	8001172 <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <HAL_ADC_ConfigChannel+0x374>)
 8001164:	4013      	ands	r3, r2
 8001166:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <HAL_ADC_ConfigChannel+0x358>)
 8001168:	0019      	movs	r1, r3
 800116a:	0010      	movs	r0, r2
 800116c:	f7ff fad8 	bl	8000720 <LL_ADC_SetCommonPathInternalCh>
 8001170:	e02c      	b.n	80011cc <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <HAL_ADC_ConfigChannel+0x36c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d127      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <HAL_ADC_ConfigChannel+0x378>)
 8001180:	4013      	ands	r3, r2
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_ADC_ConfigChannel+0x358>)
 8001184:	0019      	movs	r1, r3
 8001186:	0010      	movs	r0, r2
 8001188:	f7ff faca 	bl	8000720 <LL_ADC_SetCommonPathInternalCh>
 800118c:	e01e      	b.n	80011cc <HAL_ADC_ConfigChannel+0x390>
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	80000004 	.word	0x80000004
 8001194:	40012708 	.word	0x40012708
 8001198:	b0001000 	.word	0xb0001000
 800119c:	20000008 	.word	0x20000008
 80011a0:	00030d40 	.word	0x00030d40
 80011a4:	b8004000 	.word	0xb8004000
 80011a8:	b4002000 	.word	0xb4002000
 80011ac:	ff7fffff 	.word	0xff7fffff
 80011b0:	feffffff 	.word	0xfeffffff
 80011b4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011bc:	2220      	movs	r2, #32
 80011be:	431a      	orrs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 80011c4:	2317      	movs	r3, #23
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2254      	movs	r2, #84	; 0x54
 80011d0:	2100      	movs	r1, #0
 80011d2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80011d4:	2317      	movs	r3, #23
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	781b      	ldrb	r3, [r3, #0]
}
 80011da:	0018      	movs	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	b006      	add	sp, #24
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)

080011e4 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ee:	230f      	movs	r3, #15
 80011f0:	18fb      	adds	r3, r7, r3
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2254      	movs	r2, #84	; 0x54
 80011fa:	5c9b      	ldrb	r3, [r3, r2]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d101      	bne.n	8001204 <HAL_ADC_AnalogWDGConfig+0x20>
 8001200:	2302      	movs	r3, #2
 8001202:	e269      	b.n	80016d8 <HAL_ADC_AnalogWDGConfig+0x4f4>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2254      	movs	r2, #84	; 0x54
 8001208:	2101      	movs	r1, #1
 800120a:	5499      	strb	r1, [r3, r2]
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC group regular:                                */
  /*  - Analog watchdog channels                                              */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	0018      	movs	r0, r3
 8001212:	f7ff fbae 	bl	8000972 <LL_ADC_REG_IsConversionOngoing>
 8001216:	1e03      	subs	r3, r0, #0
 8001218:	d000      	beq.n	800121c <HAL_ADC_AnalogWDGConfig+0x38>
 800121a:	e22a      	b.n	8001672 <HAL_ADC_AnalogWDGConfig+0x48e>
  {
    /* Analog watchdog configuration */
    if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a93      	ldr	r2, [pc, #588]	; (8001470 <HAL_ADC_AnalogWDGConfig+0x28c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d142      	bne.n	80012ac <HAL_ADC_AnalogWDGConfig+0xc8>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels.                                                         */
      switch(AnalogWDGConfig->WatchdogMode)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	0412      	lsls	r2, r2, #16
 800122e:	4293      	cmp	r3, r2
 8001230:	d011      	beq.n	8001256 <HAL_ADC_AnalogWDGConfig+0x72>
 8001232:	22c0      	movs	r2, #192	; 0xc0
 8001234:	0412      	lsls	r2, r2, #16
 8001236:	4293      	cmp	r3, r2
 8001238:	d115      	bne.n	8001266 <HAL_ADC_AnalogWDGConfig+0x82>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel, LL_ADC_GROUP_REGULAR));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	4a8c      	ldr	r2, [pc, #560]	; (8001474 <HAL_ADC_AnalogWDGConfig+0x290>)
 8001244:	4013      	ands	r3, r2
 8001246:	22c0      	movs	r2, #192	; 0xc0
 8001248:	0412      	lsls	r2, r2, #16
 800124a:	4313      	orrs	r3, r2
 800124c:	4988      	ldr	r1, [pc, #544]	; (8001470 <HAL_ADC_AnalogWDGConfig+0x28c>)
 800124e:	001a      	movs	r2, r3
 8001250:	f7ff fb04 	bl	800085c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8001254:	e00f      	b.n	8001276 <HAL_ADC_AnalogWDGConfig+0x92>
        
        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a87      	ldr	r2, [pc, #540]	; (8001478 <HAL_ADC_AnalogWDGConfig+0x294>)
 800125c:	4984      	ldr	r1, [pc, #528]	; (8001470 <HAL_ADC_AnalogWDGConfig+0x28c>)
 800125e:	0018      	movs	r0, r3
 8001260:	f7ff fafc 	bl	800085c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8001264:	e007      	b.n	8001276 <HAL_ADC_AnalogWDGConfig+0x92>
        
        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4981      	ldr	r1, [pc, #516]	; (8001470 <HAL_ADC_AnalogWDGConfig+0x28c>)
 800126c:	2200      	movs	r2, #0
 800126e:	0018      	movs	r0, r3
 8001270:	f7ff faf4 	bl	800085c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8001274:	46c0      	nop			; (mov r8, r8)
      }
      
      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	4a80      	ldr	r2, [pc, #512]	; (800147c <HAL_ADC_AnalogWDGConfig+0x298>)
 800127c:	401a      	ands	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	0018      	movs	r0, r3
 8001288:	f7ff fb84 	bl	8000994 <LL_ADC_ClearFlag_AWD1>
      
      /* Configure ADC analog watchdog interrupt */
      if(AnalogWDGConfig->ITMode == ENABLE)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	7b1b      	ldrb	r3, [r3, #12]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d105      	bne.n	80012a0 <HAL_ADC_AnalogWDGConfig+0xbc>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	0018      	movs	r0, r3
 800129a:	f7ff fb9e 	bl	80009da <LL_ADC_EnableIT_AWD1>
 800129e:	e1e8      	b.n	8001672 <HAL_ADC_AnalogWDGConfig+0x48e>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff fbc4 	bl	8000a32 <LL_ADC_DisableIT_AWD1>
 80012aa:	e1e2      	b.n	8001672 <HAL_ADC_AnalogWDGConfig+0x48e>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch(AnalogWDGConfig->WatchdogMode)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	0412      	lsls	r2, r2, #16
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d100      	bne.n	80012ba <HAL_ADC_AnalogWDGConfig+0xd6>
 80012b8:	e18f      	b.n	80015da <HAL_ADC_AnalogWDGConfig+0x3f6>
 80012ba:	22c0      	movs	r2, #192	; 0xc0
 80012bc:	0412      	lsls	r2, r2, #16
 80012be:	4293      	cmp	r3, r2
 80012c0:	d000      	beq.n	80012c4 <HAL_ADC_AnalogWDGConfig+0xe0>
 80012c2:	e193      	b.n	80015ec <HAL_ADC_AnalogWDGConfig+0x408>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a6d      	ldr	r2, [pc, #436]	; (8001480 <HAL_ADC_AnalogWDGConfig+0x29c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d000      	beq.n	80012d0 <HAL_ADC_AnalogWDGConfig+0xec>
 80012ce:	e0bc      	b.n	800144a <HAL_ADC_AnalogWDGConfig+0x266>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	22a0      	movs	r2, #160	; 0xa0
 80012d6:	5899      	ldr	r1, [r3, r2]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	035b      	lsls	r3, r3, #13
 80012de:	0b5b      	lsrs	r3, r3, #13
 80012e0:	d108      	bne.n	80012f4 <HAL_ADC_AnalogWDGConfig+0x110>
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	0e9b      	lsrs	r3, r3, #26
 80012e8:	221f      	movs	r2, #31
 80012ea:	4013      	ands	r3, r2
 80012ec:	2201      	movs	r2, #1
 80012ee:	409a      	lsls	r2, r3
 80012f0:	0013      	movs	r3, r2
 80012f2:	e0a4      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2201      	movs	r2, #1
 80012fa:	4013      	ands	r3, r2
 80012fc:	d000      	beq.n	8001300 <HAL_ADC_AnalogWDGConfig+0x11c>
 80012fe:	e09d      	b.n	800143c <HAL_ADC_AnalogWDGConfig+0x258>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2202      	movs	r2, #2
 8001306:	4013      	ands	r3, r2
 8001308:	d000      	beq.n	800130c <HAL_ADC_AnalogWDGConfig+0x128>
 800130a:	e095      	b.n	8001438 <HAL_ADC_AnalogWDGConfig+0x254>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2204      	movs	r2, #4
 8001312:	4013      	ands	r3, r2
 8001314:	d000      	beq.n	8001318 <HAL_ADC_AnalogWDGConfig+0x134>
 8001316:	e08d      	b.n	8001434 <HAL_ADC_AnalogWDGConfig+0x250>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2208      	movs	r2, #8
 800131e:	4013      	ands	r3, r2
 8001320:	d000      	beq.n	8001324 <HAL_ADC_AnalogWDGConfig+0x140>
 8001322:	e085      	b.n	8001430 <HAL_ADC_AnalogWDGConfig+0x24c>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2210      	movs	r2, #16
 800132a:	4013      	ands	r3, r2
 800132c:	d000      	beq.n	8001330 <HAL_ADC_AnalogWDGConfig+0x14c>
 800132e:	e07d      	b.n	800142c <HAL_ADC_AnalogWDGConfig+0x248>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2220      	movs	r2, #32
 8001336:	4013      	ands	r3, r2
 8001338:	d000      	beq.n	800133c <HAL_ADC_AnalogWDGConfig+0x158>
 800133a:	e075      	b.n	8001428 <HAL_ADC_AnalogWDGConfig+0x244>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2240      	movs	r2, #64	; 0x40
 8001342:	4013      	ands	r3, r2
 8001344:	d000      	beq.n	8001348 <HAL_ADC_AnalogWDGConfig+0x164>
 8001346:	e06d      	b.n	8001424 <HAL_ADC_AnalogWDGConfig+0x240>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	4013      	ands	r3, r2
 8001350:	d000      	beq.n	8001354 <HAL_ADC_AnalogWDGConfig+0x170>
 8001352:	e065      	b.n	8001420 <HAL_ADC_AnalogWDGConfig+0x23c>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4013      	ands	r3, r2
 800135e:	d000      	beq.n	8001362 <HAL_ADC_AnalogWDGConfig+0x17e>
 8001360:	e05b      	b.n	800141a <HAL_ADC_AnalogWDGConfig+0x236>
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	2380      	movs	r3, #128	; 0x80
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4013      	ands	r3, r2
 800136c:	d152      	bne.n	8001414 <HAL_ADC_AnalogWDGConfig+0x230>
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	4013      	ands	r3, r2
 8001378:	d149      	bne.n	800140e <HAL_ADC_AnalogWDGConfig+0x22a>
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	4013      	ands	r3, r2
 8001384:	d140      	bne.n	8001408 <HAL_ADC_AnalogWDGConfig+0x224>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	015b      	lsls	r3, r3, #5
 800138e:	4013      	ands	r3, r2
 8001390:	d137      	bne.n	8001402 <HAL_ADC_AnalogWDGConfig+0x21e>
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	019b      	lsls	r3, r3, #6
 800139a:	4013      	ands	r3, r2
 800139c:	d12e      	bne.n	80013fc <HAL_ADC_AnalogWDGConfig+0x218>
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	01db      	lsls	r3, r3, #7
 80013a6:	4013      	ands	r3, r2
 80013a8:	d125      	bne.n	80013f6 <HAL_ADC_AnalogWDGConfig+0x212>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	4013      	ands	r3, r2
 80013b4:	d11c      	bne.n	80013f0 <HAL_ADC_AnalogWDGConfig+0x20c>
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	025b      	lsls	r3, r3, #9
 80013be:	4013      	ands	r3, r2
 80013c0:	d113      	bne.n	80013ea <HAL_ADC_AnalogWDGConfig+0x206>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	029b      	lsls	r3, r3, #10
 80013ca:	4013      	ands	r3, r2
 80013cc:	d10a      	bne.n	80013e4 <HAL_ADC_AnalogWDGConfig+0x200>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	02db      	lsls	r3, r3, #11
 80013d6:	4013      	ands	r3, r2
 80013d8:	d002      	beq.n	80013e0 <HAL_ADC_AnalogWDGConfig+0x1fc>
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	02db      	lsls	r3, r3, #11
 80013de:	e02e      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e02c      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	029b      	lsls	r3, r3, #10
 80013e8:	e029      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	025b      	lsls	r3, r3, #9
 80013ee:	e026      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	e023      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	01db      	lsls	r3, r3, #7
 80013fa:	e020      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	019b      	lsls	r3, r3, #6
 8001400:	e01d      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	015b      	lsls	r3, r3, #5
 8001406:	e01a      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	e017      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	e014      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	e011      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	e00e      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	e00c      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 8001424:	2340      	movs	r3, #64	; 0x40
 8001426:	e00a      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 8001428:	2320      	movs	r3, #32
 800142a:	e008      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 800142c:	2310      	movs	r3, #16
 800142e:	e006      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 8001430:	2308      	movs	r3, #8
 8001432:	e004      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 8001434:	2304      	movs	r3, #4
 8001436:	e002      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 8001438:	2302      	movs	r3, #2
 800143a:	e000      	b.n	800143e <HAL_ADC_AnalogWDGConfig+0x25a>
 800143c:	2301      	movs	r3, #1
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	430b      	orrs	r3, r1
 8001444:	21a0      	movs	r1, #160	; 0xa0
 8001446:	5053      	str	r3, [r2, r1]
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
          }
          break;
 8001448:	e0d9      	b.n	80015fe <HAL_ADC_AnalogWDGConfig+0x41a>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	22a4      	movs	r2, #164	; 0xa4
 8001450:	5899      	ldr	r1, [r3, r2]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	035b      	lsls	r3, r3, #13
 8001458:	0b5b      	lsrs	r3, r3, #13
 800145a:	d113      	bne.n	8001484 <HAL_ADC_AnalogWDGConfig+0x2a0>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	0e9b      	lsrs	r3, r3, #26
 8001462:	221f      	movs	r2, #31
 8001464:	4013      	ands	r3, r2
 8001466:	2201      	movs	r2, #1
 8001468:	409a      	lsls	r2, r3
 800146a:	0013      	movs	r3, r2
 800146c:	e0af      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	7cc00000 	.word	0x7cc00000
 8001474:	fc07ffff 	.word	0xfc07ffff
 8001478:	0087ffff 	.word	0x0087ffff
 800147c:	fffeffff 	.word	0xfffeffff
 8001480:	0017ffff 	.word	0x0017ffff
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2201      	movs	r2, #1
 800148a:	4013      	ands	r3, r2
 800148c:	d000      	beq.n	8001490 <HAL_ADC_AnalogWDGConfig+0x2ac>
 800148e:	e09d      	b.n	80015cc <HAL_ADC_AnalogWDGConfig+0x3e8>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2202      	movs	r2, #2
 8001496:	4013      	ands	r3, r2
 8001498:	d000      	beq.n	800149c <HAL_ADC_AnalogWDGConfig+0x2b8>
 800149a:	e095      	b.n	80015c8 <HAL_ADC_AnalogWDGConfig+0x3e4>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2204      	movs	r2, #4
 80014a2:	4013      	ands	r3, r2
 80014a4:	d000      	beq.n	80014a8 <HAL_ADC_AnalogWDGConfig+0x2c4>
 80014a6:	e08d      	b.n	80015c4 <HAL_ADC_AnalogWDGConfig+0x3e0>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2208      	movs	r2, #8
 80014ae:	4013      	ands	r3, r2
 80014b0:	d000      	beq.n	80014b4 <HAL_ADC_AnalogWDGConfig+0x2d0>
 80014b2:	e085      	b.n	80015c0 <HAL_ADC_AnalogWDGConfig+0x3dc>
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2210      	movs	r2, #16
 80014ba:	4013      	ands	r3, r2
 80014bc:	d000      	beq.n	80014c0 <HAL_ADC_AnalogWDGConfig+0x2dc>
 80014be:	e07d      	b.n	80015bc <HAL_ADC_AnalogWDGConfig+0x3d8>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2220      	movs	r2, #32
 80014c6:	4013      	ands	r3, r2
 80014c8:	d000      	beq.n	80014cc <HAL_ADC_AnalogWDGConfig+0x2e8>
 80014ca:	e075      	b.n	80015b8 <HAL_ADC_AnalogWDGConfig+0x3d4>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2240      	movs	r2, #64	; 0x40
 80014d2:	4013      	ands	r3, r2
 80014d4:	d000      	beq.n	80014d8 <HAL_ADC_AnalogWDGConfig+0x2f4>
 80014d6:	e06d      	b.n	80015b4 <HAL_ADC_AnalogWDGConfig+0x3d0>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2280      	movs	r2, #128	; 0x80
 80014de:	4013      	ands	r3, r2
 80014e0:	d000      	beq.n	80014e4 <HAL_ADC_AnalogWDGConfig+0x300>
 80014e2:	e065      	b.n	80015b0 <HAL_ADC_AnalogWDGConfig+0x3cc>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4013      	ands	r3, r2
 80014ee:	d000      	beq.n	80014f2 <HAL_ADC_AnalogWDGConfig+0x30e>
 80014f0:	e05b      	b.n	80015aa <HAL_ADC_AnalogWDGConfig+0x3c6>
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4013      	ands	r3, r2
 80014fc:	d152      	bne.n	80015a4 <HAL_ADC_AnalogWDGConfig+0x3c0>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4013      	ands	r3, r2
 8001508:	d149      	bne.n	800159e <HAL_ADC_AnalogWDGConfig+0x3ba>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	4013      	ands	r3, r2
 8001514:	d140      	bne.n	8001598 <HAL_ADC_AnalogWDGConfig+0x3b4>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	015b      	lsls	r3, r3, #5
 800151e:	4013      	ands	r3, r2
 8001520:	d137      	bne.n	8001592 <HAL_ADC_AnalogWDGConfig+0x3ae>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	019b      	lsls	r3, r3, #6
 800152a:	4013      	ands	r3, r2
 800152c:	d12e      	bne.n	800158c <HAL_ADC_AnalogWDGConfig+0x3a8>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	2380      	movs	r3, #128	; 0x80
 8001534:	01db      	lsls	r3, r3, #7
 8001536:	4013      	ands	r3, r2
 8001538:	d125      	bne.n	8001586 <HAL_ADC_AnalogWDGConfig+0x3a2>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	4013      	ands	r3, r2
 8001544:	d11c      	bne.n	8001580 <HAL_ADC_AnalogWDGConfig+0x39c>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	025b      	lsls	r3, r3, #9
 800154e:	4013      	ands	r3, r2
 8001550:	d113      	bne.n	800157a <HAL_ADC_AnalogWDGConfig+0x396>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	029b      	lsls	r3, r3, #10
 800155a:	4013      	ands	r3, r2
 800155c:	d10a      	bne.n	8001574 <HAL_ADC_AnalogWDGConfig+0x390>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	02db      	lsls	r3, r3, #11
 8001566:	4013      	ands	r3, r2
 8001568:	d002      	beq.n	8001570 <HAL_ADC_AnalogWDGConfig+0x38c>
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	02db      	lsls	r3, r3, #11
 800156e:	e02e      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001570:	2301      	movs	r3, #1
 8001572:	e02c      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	029b      	lsls	r3, r3, #10
 8001578:	e029      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	025b      	lsls	r3, r3, #9
 800157e:	e026      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	e023      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	01db      	lsls	r3, r3, #7
 800158a:	e020      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	019b      	lsls	r3, r3, #6
 8001590:	e01d      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	015b      	lsls	r3, r3, #5
 8001596:	e01a      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	e017      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	e014      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	e011      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	e00e      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	e00c      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 80015b4:	2340      	movs	r3, #64	; 0x40
 80015b6:	e00a      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 80015b8:	2320      	movs	r3, #32
 80015ba:	e008      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 80015bc:	2310      	movs	r3, #16
 80015be:	e006      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 80015c0:	2308      	movs	r3, #8
 80015c2:	e004      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 80015c4:	2304      	movs	r3, #4
 80015c6:	e002      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e000      	b.n	80015ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 80015cc:	2301      	movs	r3, #1
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	430b      	orrs	r3, r1
 80015d4:	21a4      	movs	r1, #164	; 0xa4
 80015d6:	5053      	str	r3, [r2, r1]
          break;
 80015d8:	e011      	b.n	80015fe <HAL_ADC_AnalogWDGConfig+0x41a>
          
        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a3f      	ldr	r2, [pc, #252]	; (80016e0 <HAL_ADC_AnalogWDGConfig+0x4fc>)
 80015e4:	0019      	movs	r1, r3
 80015e6:	f7ff f939 	bl	800085c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80015ea:	e008      	b.n	80015fe <HAL_ADC_AnalogWDGConfig+0x41a>
          
        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2200      	movs	r2, #0
 80015f6:	0019      	movs	r1, r3
 80015f8:	f7ff f930 	bl	800085c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80015fc:	46c0      	nop			; (mov r8, r8)
      }
      
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a38      	ldr	r2, [pc, #224]	; (80016e4 <HAL_ADC_AnalogWDGConfig+0x500>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d11a      	bne.n	800163e <HAL_ADC_AnalogWDGConfig+0x45a>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160c:	4a36      	ldr	r2, [pc, #216]	; (80016e8 <HAL_ADC_AnalogWDGConfig+0x504>)
 800160e:	401a      	ands	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	0018      	movs	r0, r3
 800161a:	f7ff f9c6 	bl	80009aa <LL_ADC_ClearFlag_AWD2>
        
        /* Configure ADC analog watchdog interrupt */
        if(AnalogWDGConfig->ITMode == ENABLE)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	7b1b      	ldrb	r3, [r3, #12]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d105      	bne.n	8001632 <HAL_ADC_AnalogWDGConfig+0x44e>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	0018      	movs	r0, r3
 800162c:	f7ff f9e3 	bl	80009f6 <LL_ADC_EnableIT_AWD2>
 8001630:	e01f      	b.n	8001672 <HAL_ADC_AnalogWDGConfig+0x48e>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	0018      	movs	r0, r3
 8001638:	f7ff fa0a 	bl	8000a50 <LL_ADC_DisableIT_AWD2>
 800163c:	e019      	b.n	8001672 <HAL_ADC_AnalogWDGConfig+0x48e>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001642:	4a2a      	ldr	r2, [pc, #168]	; (80016ec <HAL_ADC_AnalogWDGConfig+0x508>)
 8001644:	401a      	ands	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	0018      	movs	r0, r3
 8001650:	f7ff f9b7 	bl	80009c2 <LL_ADC_ClearFlag_AWD3>
        
        /* Configure ADC analog watchdog interrupt */
        if(AnalogWDGConfig->ITMode == ENABLE)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	7b1b      	ldrb	r3, [r3, #12]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d105      	bne.n	8001668 <HAL_ADC_AnalogWDGConfig+0x484>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	0018      	movs	r0, r3
 8001662:	f7ff f9d7 	bl	8000a14 <LL_ADC_EnableIT_AWD3>
 8001666:	e004      	b.n	8001672 <HAL_ADC_AnalogWDGConfig+0x48e>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff f9ff 	bl	8000a70 <LL_ADC_DisableIT_AWD3>
    }
    
  }
    
  /* Analog watchdog thresholds configuration */
  if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a1e      	ldr	r2, [pc, #120]	; (80016f0 <HAL_ADC_AnalogWDGConfig+0x50c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d118      	bne.n	80016ae <HAL_ADC_AnalogWDGConfig+0x4ca>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */ 
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	691a      	ldr	r2, [r3, #16]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	08db      	lsrs	r3, r3, #3
 8001688:	2103      	movs	r1, #3
 800168a:	400b      	ands	r3, r1
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	409a      	lsls	r2, r3
 8001690:	0013      	movs	r3, r2
 8001692:	617b      	str	r3, [r7, #20]
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	08db      	lsrs	r3, r3, #3
 80016a0:	2103      	movs	r1, #3
 80016a2:	400b      	ands	r3, r1
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	409a      	lsls	r2, r3
 80016a8:	0013      	movs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	e005      	b.n	80016ba <HAL_ADC_AnalogWDGConfig+0x4d6>
  else
  {
    /* No need to shift the offset with respect to the selected ADC resolution: */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = AnalogWDGConfig->HighThreshold;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	617b      	str	r3, [r7, #20]
    tmpAWDLowThresholdShifted  = AnalogWDGConfig->LowThreshold;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	613b      	str	r3, [r7, #16]
  }
  
  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	6819      	ldr	r1, [r3, #0]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	f7ff f8f5 	bl	80008b4 <LL_ADC_ConfigAnalogWDThresholds>
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2254      	movs	r2, #84	; 0x54
 80016ce:	2100      	movs	r1, #0
 80016d0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80016d2:	230f      	movs	r3, #15
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	781b      	ldrb	r3, [r3, #0]
}
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	b006      	add	sp, #24
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	0087ffff 	.word	0x0087ffff
 80016e4:	0017ffff 	.word	0x0017ffff
 80016e8:	fffdffff 	.word	0xfffdffff
 80016ec:	fffbffff 	.word	0xfffbffff
 80016f0:	7cc00000 	.word	0x7cc00000

080016f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	0002      	movs	r2, r0
 80016fc:	1dfb      	adds	r3, r7, #7
 80016fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001700:	1dfb      	adds	r3, r7, #7
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b7f      	cmp	r3, #127	; 0x7f
 8001706:	d809      	bhi.n	800171c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001708:	1dfb      	adds	r3, r7, #7
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	001a      	movs	r2, r3
 800170e:	231f      	movs	r3, #31
 8001710:	401a      	ands	r2, r3
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <__NVIC_EnableIRQ+0x30>)
 8001714:	2101      	movs	r1, #1
 8001716:	4091      	lsls	r1, r2
 8001718:	000a      	movs	r2, r1
 800171a:	601a      	str	r2, [r3, #0]
  }
}
 800171c:	46c0      	nop			; (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b002      	add	sp, #8
 8001722:	bd80      	pop	{r7, pc}
 8001724:	e000e100 	.word	0xe000e100

08001728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	0002      	movs	r2, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	1dfb      	adds	r3, r7, #7
 8001734:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001736:	1dfb      	adds	r3, r7, #7
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b7f      	cmp	r3, #127	; 0x7f
 800173c:	d828      	bhi.n	8001790 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800173e:	4a2f      	ldr	r2, [pc, #188]	; (80017fc <__NVIC_SetPriority+0xd4>)
 8001740:	1dfb      	adds	r3, r7, #7
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b25b      	sxtb	r3, r3
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	33c0      	adds	r3, #192	; 0xc0
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	589b      	ldr	r3, [r3, r2]
 800174e:	1dfa      	adds	r2, r7, #7
 8001750:	7812      	ldrb	r2, [r2, #0]
 8001752:	0011      	movs	r1, r2
 8001754:	2203      	movs	r2, #3
 8001756:	400a      	ands	r2, r1
 8001758:	00d2      	lsls	r2, r2, #3
 800175a:	21ff      	movs	r1, #255	; 0xff
 800175c:	4091      	lsls	r1, r2
 800175e:	000a      	movs	r2, r1
 8001760:	43d2      	mvns	r2, r2
 8001762:	401a      	ands	r2, r3
 8001764:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	019b      	lsls	r3, r3, #6
 800176a:	22ff      	movs	r2, #255	; 0xff
 800176c:	401a      	ands	r2, r3
 800176e:	1dfb      	adds	r3, r7, #7
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	0018      	movs	r0, r3
 8001774:	2303      	movs	r3, #3
 8001776:	4003      	ands	r3, r0
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800177c:	481f      	ldr	r0, [pc, #124]	; (80017fc <__NVIC_SetPriority+0xd4>)
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b25b      	sxtb	r3, r3
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	430a      	orrs	r2, r1
 8001788:	33c0      	adds	r3, #192	; 0xc0
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800178e:	e031      	b.n	80017f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001790:	4a1b      	ldr	r2, [pc, #108]	; (8001800 <__NVIC_SetPriority+0xd8>)
 8001792:	1dfb      	adds	r3, r7, #7
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	0019      	movs	r1, r3
 8001798:	230f      	movs	r3, #15
 800179a:	400b      	ands	r3, r1
 800179c:	3b08      	subs	r3, #8
 800179e:	089b      	lsrs	r3, r3, #2
 80017a0:	3306      	adds	r3, #6
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	18d3      	adds	r3, r2, r3
 80017a6:	3304      	adds	r3, #4
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	1dfa      	adds	r2, r7, #7
 80017ac:	7812      	ldrb	r2, [r2, #0]
 80017ae:	0011      	movs	r1, r2
 80017b0:	2203      	movs	r2, #3
 80017b2:	400a      	ands	r2, r1
 80017b4:	00d2      	lsls	r2, r2, #3
 80017b6:	21ff      	movs	r1, #255	; 0xff
 80017b8:	4091      	lsls	r1, r2
 80017ba:	000a      	movs	r2, r1
 80017bc:	43d2      	mvns	r2, r2
 80017be:	401a      	ands	r2, r3
 80017c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	019b      	lsls	r3, r3, #6
 80017c6:	22ff      	movs	r2, #255	; 0xff
 80017c8:	401a      	ands	r2, r3
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	0018      	movs	r0, r3
 80017d0:	2303      	movs	r3, #3
 80017d2:	4003      	ands	r3, r0
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017d8:	4809      	ldr	r0, [pc, #36]	; (8001800 <__NVIC_SetPriority+0xd8>)
 80017da:	1dfb      	adds	r3, r7, #7
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	001c      	movs	r4, r3
 80017e0:	230f      	movs	r3, #15
 80017e2:	4023      	ands	r3, r4
 80017e4:	3b08      	subs	r3, #8
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	430a      	orrs	r2, r1
 80017ea:	3306      	adds	r3, #6
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	18c3      	adds	r3, r0, r3
 80017f0:	3304      	adds	r3, #4
 80017f2:	601a      	str	r2, [r3, #0]
}
 80017f4:	46c0      	nop			; (mov r8, r8)
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b003      	add	sp, #12
 80017fa:	bd90      	pop	{r4, r7, pc}
 80017fc:	e000e100 	.word	0xe000e100
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	4a0c      	ldr	r2, [pc, #48]	; (8001844 <SysTick_Config+0x40>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001816:	2301      	movs	r3, #1
 8001818:	e010      	b.n	800183c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <SysTick_Config+0x44>)
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	3a01      	subs	r2, #1
 8001820:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001822:	2301      	movs	r3, #1
 8001824:	425b      	negs	r3, r3
 8001826:	2103      	movs	r1, #3
 8001828:	0018      	movs	r0, r3
 800182a:	f7ff ff7d 	bl	8001728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <SysTick_Config+0x44>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <SysTick_Config+0x44>)
 8001836:	2207      	movs	r2, #7
 8001838:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800183a:	2300      	movs	r3, #0
}
 800183c:	0018      	movs	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	b002      	add	sp, #8
 8001842:	bd80      	pop	{r7, pc}
 8001844:	00ffffff 	.word	0x00ffffff
 8001848:	e000e010 	.word	0xe000e010

0800184c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	210f      	movs	r1, #15
 8001858:	187b      	adds	r3, r7, r1
 800185a:	1c02      	adds	r2, r0, #0
 800185c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	187b      	adds	r3, r7, r1
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b25b      	sxtb	r3, r3
 8001866:	0011      	movs	r1, r2
 8001868:	0018      	movs	r0, r3
 800186a:	f7ff ff5d 	bl	8001728 <__NVIC_SetPriority>
}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	b004      	add	sp, #16
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	0002      	movs	r2, r0
 800187e:	1dfb      	adds	r3, r7, #7
 8001880:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001882:	1dfb      	adds	r3, r7, #7
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b25b      	sxtb	r3, r3
 8001888:	0018      	movs	r0, r3
 800188a:	f7ff ff33 	bl	80016f4 <__NVIC_EnableIRQ>
}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	b002      	add	sp, #8
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	0018      	movs	r0, r3
 80018a2:	f7ff ffaf 	bl	8001804 <SysTick_Config>
 80018a6:	0003      	movs	r3, r0
}
 80018a8:	0018      	movs	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b002      	add	sp, #8
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018b8:	230f      	movs	r3, #15
 80018ba:	18fb      	adds	r3, r7, r3
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2224      	movs	r2, #36	; 0x24
 80018c4:	2100      	movs	r1, #0
 80018c6:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2224      	movs	r2, #36	; 0x24
 80018cc:	5c9b      	ldrb	r3, [r3, r2]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_DMA_Abort_IT+0x26>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e05e      	b.n	8001994 <HAL_DMA_Abort_IT+0xe4>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2224      	movs	r2, #36	; 0x24
 80018da:	2101      	movs	r1, #1
 80018dc:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2225      	movs	r2, #37	; 0x25
 80018e2:	5c9b      	ldrb	r3, [r3, r2]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d007      	beq.n	80018fa <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2204      	movs	r2, #4
 80018ee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80018f0:	230f      	movs	r3, #15
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	e049      	b.n	800198e <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	210e      	movs	r1, #14
 8001906:	438a      	bics	r2, r1
 8001908:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2101      	movs	r1, #1
 8001916:	438a      	bics	r2, r1
 8001918:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001924:	491d      	ldr	r1, [pc, #116]	; (800199c <HAL_DMA_Abort_IT+0xec>)
 8001926:	400a      	ands	r2, r1
 8001928:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_DMA_Abort_IT+0xf0>)
 800192c:	6859      	ldr	r1, [r3, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	221c      	movs	r2, #28
 8001934:	4013      	ands	r3, r2
 8001936:	2201      	movs	r2, #1
 8001938:	409a      	lsls	r2, r3
 800193a:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_DMA_Abort_IT+0xf0>)
 800193c:	430a      	orrs	r2, r1
 800193e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001948:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00c      	beq.n	800196c <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800195c:	490f      	ldr	r1, [pc, #60]	; (800199c <HAL_DMA_Abort_IT+0xec>)
 800195e:	400a      	ands	r2, r1
 8001960:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800196a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2225      	movs	r2, #37	; 0x25
 8001970:	2101      	movs	r1, #1
 8001972:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2224      	movs	r2, #36	; 0x24
 8001978:	2100      	movs	r1, #0
 800197a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001980:	2b00      	cmp	r3, #0
 8001982:	d004      	beq.n	800198e <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	0010      	movs	r0, r2
 800198c:	4798      	blx	r3
    }
  }
  return status;
 800198e:	230f      	movs	r3, #15
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	781b      	ldrb	r3, [r3, #0]
}
 8001994:	0018      	movs	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	b004      	add	sp, #16
 800199a:	bd80      	pop	{r7, pc}
 800199c:	fffffeff 	.word	0xfffffeff
 80019a0:	40020000 	.word	0x40020000

080019a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b2:	e147      	b.n	8001c44 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2101      	movs	r1, #1
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4091      	lsls	r1, r2
 80019be:	000a      	movs	r2, r1
 80019c0:	4013      	ands	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d100      	bne.n	80019cc <HAL_GPIO_Init+0x28>
 80019ca:	e138      	b.n	8001c3e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x38>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b12      	cmp	r3, #18
 80019da:	d123      	bne.n	8001a24 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	08da      	lsrs	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3208      	adds	r2, #8
 80019e4:	0092      	lsls	r2, r2, #2
 80019e6:	58d3      	ldr	r3, [r2, r3]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	2207      	movs	r2, #7
 80019ee:	4013      	ands	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	220f      	movs	r2, #15
 80019f4:	409a      	lsls	r2, r3
 80019f6:	0013      	movs	r3, r2
 80019f8:	43da      	mvns	r2, r3
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	2107      	movs	r1, #7
 8001a08:	400b      	ands	r3, r1
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	0013      	movs	r3, r2
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	08da      	lsrs	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3208      	adds	r2, #8
 8001a1e:	0092      	lsls	r2, r2, #2
 8001a20:	6939      	ldr	r1, [r7, #16]
 8001a22:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	409a      	lsls	r2, r3
 8001a32:	0013      	movs	r3, r2
 8001a34:	43da      	mvns	r2, r3
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2203      	movs	r2, #3
 8001a42:	401a      	ands	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	0013      	movs	r3, r2
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d00b      	beq.n	8001a78 <HAL_GPIO_Init+0xd4>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d007      	beq.n	8001a78 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a6c:	2b11      	cmp	r3, #17
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b12      	cmp	r3, #18
 8001a76:	d130      	bne.n	8001ada <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	409a      	lsls	r2, r3
 8001a86:	0013      	movs	r3, r2
 8001a88:	43da      	mvns	r2, r3
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	0013      	movs	r3, r2
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aae:	2201      	movs	r2, #1
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	0013      	movs	r3, r2
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
 8001acc:	0013      	movs	r3, r2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	0013      	movs	r3, r2
 8001aea:	43da      	mvns	r2, r3
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	409a      	lsls	r2, r3
 8001afc:	0013      	movs	r3, r2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	055b      	lsls	r3, r3, #21
 8001b12:	4013      	ands	r3, r2
 8001b14:	d100      	bne.n	8001b18 <HAL_GPIO_Init+0x174>
 8001b16:	e092      	b.n	8001c3e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001b18:	4a50      	ldr	r2, [pc, #320]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	3318      	adds	r3, #24
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	589b      	ldr	r3, [r3, r2]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	220f      	movs	r2, #15
 8001b30:	409a      	lsls	r2, r3
 8001b32:	0013      	movs	r3, r2
 8001b34:	43da      	mvns	r2, r3
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	23a0      	movs	r3, #160	; 0xa0
 8001b40:	05db      	lsls	r3, r3, #23
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d013      	beq.n	8001b6e <HAL_GPIO_Init+0x1ca>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a45      	ldr	r2, [pc, #276]	; (8001c60 <HAL_GPIO_Init+0x2bc>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00d      	beq.n	8001b6a <HAL_GPIO_Init+0x1c6>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a44      	ldr	r2, [pc, #272]	; (8001c64 <HAL_GPIO_Init+0x2c0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d007      	beq.n	8001b66 <HAL_GPIO_Init+0x1c2>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a43      	ldr	r2, [pc, #268]	; (8001c68 <HAL_GPIO_Init+0x2c4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d101      	bne.n	8001b62 <HAL_GPIO_Init+0x1be>
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e006      	b.n	8001b70 <HAL_GPIO_Init+0x1cc>
 8001b62:	2305      	movs	r3, #5
 8001b64:	e004      	b.n	8001b70 <HAL_GPIO_Init+0x1cc>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e002      	b.n	8001b70 <HAL_GPIO_Init+0x1cc>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_GPIO_Init+0x1cc>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	2103      	movs	r1, #3
 8001b74:	400a      	ands	r2, r1
 8001b76:	00d2      	lsls	r2, r2, #3
 8001b78:	4093      	lsls	r3, r2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001b80:	4936      	ldr	r1, [pc, #216]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	089b      	lsrs	r3, r3, #2
 8001b86:	3318      	adds	r3, #24
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b8e:	4a33      	ldr	r2, [pc, #204]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	58d3      	ldr	r3, [r2, r3]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	025b      	lsls	r3, r3, #9
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bb4:	4929      	ldr	r1, [pc, #164]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001bbc:	4a27      	ldr	r2, [pc, #156]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001bbe:	2384      	movs	r3, #132	; 0x84
 8001bc0:	58d3      	ldr	r3, [r2, r3]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	029b      	lsls	r3, r3, #10
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001be2:	491e      	ldr	r1, [pc, #120]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001be4:	2284      	movs	r2, #132	; 0x84
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	035b      	lsls	r3, r3, #13
 8001c02:	4013      	ands	r3, r2
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	43da      	mvns	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	039b      	lsls	r3, r3, #14
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3301      	adds	r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	40da      	lsrs	r2, r3
 8001c4c:	1e13      	subs	r3, r2, #0
 8001c4e:	d000      	beq.n	8001c52 <HAL_GPIO_Init+0x2ae>
 8001c50:	e6b0      	b.n	80019b4 <HAL_GPIO_Init+0x10>
  }
}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b006      	add	sp, #24
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	40021800 	.word	0x40021800
 8001c60:	50000400 	.word	0x50000400
 8001c64:	50000800 	.word	0x50000800
 8001c68:	50000c00 	.word	0x50000c00

08001c6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	000a      	movs	r2, r1
 8001c76:	1cbb      	adds	r3, r7, #2
 8001c78:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	1cba      	adds	r2, r7, #2
 8001c80:	8812      	ldrh	r2, [r2, #0]
 8001c82:	4013      	ands	r3, r2
 8001c84:	d004      	beq.n	8001c90 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001c86:	230f      	movs	r3, #15
 8001c88:	18fb      	adds	r3, r7, r3
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	701a      	strb	r2, [r3, #0]
 8001c8e:	e003      	b.n	8001c98 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c90:	230f      	movs	r3, #15
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001c98:	230f      	movs	r3, #15
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	781b      	ldrb	r3, [r3, #0]
}
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b004      	add	sp, #16
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	0008      	movs	r0, r1
 8001cb0:	0011      	movs	r1, r2
 8001cb2:	1cbb      	adds	r3, r7, #2
 8001cb4:	1c02      	adds	r2, r0, #0
 8001cb6:	801a      	strh	r2, [r3, #0]
 8001cb8:	1c7b      	adds	r3, r7, #1
 8001cba:	1c0a      	adds	r2, r1, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cbe:	1c7b      	adds	r3, r7, #1
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d004      	beq.n	8001cd0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cc6:	1cbb      	adds	r3, r7, #2
 8001cc8:	881a      	ldrh	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cce:	e003      	b.n	8001cd8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cd0:	1cbb      	adds	r3, r7, #2
 8001cd2:	881a      	ldrh	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b002      	add	sp, #8
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d11f      	bne.n	8001d44 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	0013      	movs	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	189b      	adds	r3, r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4912      	ldr	r1, [pc, #72]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001d12:	0018      	movs	r0, r3
 8001d14:	f7fe f9fe 	bl	8000114 <__udivsi3>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d1e:	e008      	b.n	8001d32 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	e001      	b.n	8001d32 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e009      	b.n	8001d46 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d0ed      	beq.n	8001d20 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b004      	add	sp, #16
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	40007000 	.word	0x40007000
 8001d54:	fffff9ff 	.word	0xfffff9ff
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	000f4240 	.word	0x000f4240

08001d60 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	23e0      	movs	r3, #224	; 0xe0
 8001d6a:	01db      	lsls	r3, r3, #7
 8001d6c:	4013      	ands	r3, r2
}
 8001d6e:	0018      	movs	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000

08001d78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e304      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4013      	ands	r3, r2
 8001d92:	d100      	bne.n	8001d96 <HAL_RCC_OscConfig+0x1e>
 8001d94:	e07c      	b.n	8001e90 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d96:	4bc3      	ldr	r3, [pc, #780]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2238      	movs	r2, #56	; 0x38
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da0:	4bc0      	ldr	r3, [pc, #768]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2203      	movs	r2, #3
 8001da6:	4013      	ands	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	2b10      	cmp	r3, #16
 8001dae:	d102      	bne.n	8001db6 <HAL_RCC_OscConfig+0x3e>
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d002      	beq.n	8001dbc <HAL_RCC_OscConfig+0x44>
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d10b      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbc:	4bb9      	ldr	r3, [pc, #740]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	029b      	lsls	r3, r3, #10
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d062      	beq.n	8001e8e <HAL_RCC_OscConfig+0x116>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d15e      	bne.n	8001e8e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e2df      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	025b      	lsls	r3, r3, #9
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d107      	bne.n	8001df0 <HAL_RCC_OscConfig+0x78>
 8001de0:	4bb0      	ldr	r3, [pc, #704]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4baf      	ldr	r3, [pc, #700]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001de6:	2180      	movs	r1, #128	; 0x80
 8001de8:	0249      	lsls	r1, r1, #9
 8001dea:	430a      	orrs	r2, r1
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	e020      	b.n	8001e32 <HAL_RCC_OscConfig+0xba>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	23a0      	movs	r3, #160	; 0xa0
 8001df6:	02db      	lsls	r3, r3, #11
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d10e      	bne.n	8001e1a <HAL_RCC_OscConfig+0xa2>
 8001dfc:	4ba9      	ldr	r3, [pc, #676]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4ba8      	ldr	r3, [pc, #672]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e02:	2180      	movs	r1, #128	; 0x80
 8001e04:	02c9      	lsls	r1, r1, #11
 8001e06:	430a      	orrs	r2, r1
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	4ba6      	ldr	r3, [pc, #664]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4ba5      	ldr	r3, [pc, #660]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	0249      	lsls	r1, r1, #9
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	e00b      	b.n	8001e32 <HAL_RCC_OscConfig+0xba>
 8001e1a:	4ba2      	ldr	r3, [pc, #648]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4ba1      	ldr	r3, [pc, #644]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e20:	49a1      	ldr	r1, [pc, #644]	; (80020a8 <HAL_RCC_OscConfig+0x330>)
 8001e22:	400a      	ands	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	4b9f      	ldr	r3, [pc, #636]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4b9e      	ldr	r3, [pc, #632]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e2c:	499f      	ldr	r1, [pc, #636]	; (80020ac <HAL_RCC_OscConfig+0x334>)
 8001e2e:	400a      	ands	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d014      	beq.n	8001e64 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3a:	f7fe fc67 	bl	800070c <HAL_GetTick>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e44:	f7fe fc62 	bl	800070c <HAL_GetTick>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e29e      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e56:	4b93      	ldr	r3, [pc, #588]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	029b      	lsls	r3, r3, #10
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0xcc>
 8001e62:	e015      	b.n	8001e90 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7fe fc52 	bl	800070c <HAL_GetTick>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e6e:	f7fe fc4d 	bl	800070c <HAL_GetTick>
 8001e72:	0002      	movs	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b64      	cmp	r3, #100	; 0x64
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e289      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e80:	4b88      	ldr	r3, [pc, #544]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	029b      	lsls	r3, r3, #10
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0xf6>
 8001e8c:	e000      	b.n	8001e90 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2202      	movs	r2, #2
 8001e96:	4013      	ands	r3, r2
 8001e98:	d100      	bne.n	8001e9c <HAL_RCC_OscConfig+0x124>
 8001e9a:	e099      	b.n	8001fd0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e9c:	4b81      	ldr	r3, [pc, #516]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2238      	movs	r2, #56	; 0x38
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ea6:	4b7f      	ldr	r3, [pc, #508]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2203      	movs	r2, #3
 8001eac:	4013      	ands	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d102      	bne.n	8001ebc <HAL_RCC_OscConfig+0x144>
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d002      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x14a>
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d135      	bne.n	8001f2e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ec2:	4b78      	ldr	r3, [pc, #480]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d005      	beq.n	8001eda <HAL_RCC_OscConfig+0x162>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e25c      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eda:	4b72      	ldr	r3, [pc, #456]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	4a74      	ldr	r2, [pc, #464]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	021a      	lsls	r2, r3, #8
 8001eea:	4b6e      	ldr	r3, [pc, #440]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001eec:	430a      	orrs	r2, r1
 8001eee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d112      	bne.n	8001f1c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ef6:	4b6b      	ldr	r3, [pc, #428]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a6e      	ldr	r2, [pc, #440]	; (80020b4 <HAL_RCC_OscConfig+0x33c>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	0019      	movs	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	4b67      	ldr	r3, [pc, #412]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f06:	430a      	orrs	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001f0a:	4b66      	ldr	r3, [pc, #408]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	0adb      	lsrs	r3, r3, #11
 8001f10:	2207      	movs	r2, #7
 8001f12:	4013      	ands	r3, r2
 8001f14:	4a68      	ldr	r2, [pc, #416]	; (80020b8 <HAL_RCC_OscConfig+0x340>)
 8001f16:	40da      	lsrs	r2, r3
 8001f18:	4b68      	ldr	r3, [pc, #416]	; (80020bc <HAL_RCC_OscConfig+0x344>)
 8001f1a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f1c:	4b68      	ldr	r3, [pc, #416]	; (80020c0 <HAL_RCC_OscConfig+0x348>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7fe fb99 	bl	8000658 <HAL_InitTick>
 8001f26:	1e03      	subs	r3, r0, #0
 8001f28:	d051      	beq.n	8001fce <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e232      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d030      	beq.n	8001f98 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f36:	4b5b      	ldr	r3, [pc, #364]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a5e      	ldr	r2, [pc, #376]	; (80020b4 <HAL_RCC_OscConfig+0x33c>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	0019      	movs	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	4b57      	ldr	r3, [pc, #348]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001f4a:	4b56      	ldr	r3, [pc, #344]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4b55      	ldr	r3, [pc, #340]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	0049      	lsls	r1, r1, #1
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7fe fbd8 	bl	800070c <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f62:	f7fe fbd3 	bl	800070c <HAL_GetTick>
 8001f66:	0002      	movs	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e20f      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f74:	4b4b      	ldr	r3, [pc, #300]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f80:	4b48      	ldr	r3, [pc, #288]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a4a      	ldr	r2, [pc, #296]	; (80020b0 <HAL_RCC_OscConfig+0x338>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	021a      	lsls	r2, r3, #8
 8001f90:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	e01b      	b.n	8001fd0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001f98:	4b42      	ldr	r3, [pc, #264]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001f9e:	4949      	ldr	r1, [pc, #292]	; (80020c4 <HAL_RCC_OscConfig+0x34c>)
 8001fa0:	400a      	ands	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fbb2 	bl	800070c <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fae:	f7fe fbad 	bl	800070c <HAL_GetTick>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e1e9      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fc0:	4b38      	ldr	r3, [pc, #224]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d1f0      	bne.n	8001fae <HAL_RCC_OscConfig+0x236>
 8001fcc:	e000      	b.n	8001fd0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d047      	beq.n	800206a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001fda:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2238      	movs	r2, #56	; 0x38
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b18      	cmp	r3, #24
 8001fe4:	d10a      	bne.n	8001ffc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001fe6:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8001fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fea:	2202      	movs	r2, #2
 8001fec:	4013      	ands	r3, r2
 8001fee:	d03c      	beq.n	800206a <HAL_RCC_OscConfig+0x2f2>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d138      	bne.n	800206a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e1cb      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d019      	beq.n	8002038 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002004:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8002006:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002008:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 800200a:	2101      	movs	r1, #1
 800200c:	430a      	orrs	r2, r1
 800200e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7fe fb7c 	bl	800070c <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201a:	f7fe fb77 	bl	800070c <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e1b3      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 800202e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002030:	2202      	movs	r2, #2
 8002032:	4013      	ands	r3, r2
 8002034:	d0f1      	beq.n	800201a <HAL_RCC_OscConfig+0x2a2>
 8002036:	e018      	b.n	800206a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 800203a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 800203e:	2101      	movs	r1, #1
 8002040:	438a      	bics	r2, r1
 8002042:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe fb62 	bl	800070c <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204e:	f7fe fb5d 	bl	800070c <HAL_GetTick>
 8002052:	0002      	movs	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e199      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002060:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8002062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002064:	2202      	movs	r2, #2
 8002066:	4013      	ands	r3, r2
 8002068:	d1f1      	bne.n	800204e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2204      	movs	r2, #4
 8002070:	4013      	ands	r3, r2
 8002072:	d100      	bne.n	8002076 <HAL_RCC_OscConfig+0x2fe>
 8002074:	e0c6      	b.n	8002204 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002076:	231f      	movs	r3, #31
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2238      	movs	r2, #56	; 0x38
 8002084:	4013      	ands	r3, r2
 8002086:	2b20      	cmp	r3, #32
 8002088:	d11e      	bne.n	80020c8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_RCC_OscConfig+0x32c>)
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	2202      	movs	r2, #2
 8002090:	4013      	ands	r3, r2
 8002092:	d100      	bne.n	8002096 <HAL_RCC_OscConfig+0x31e>
 8002094:	e0b6      	b.n	8002204 <HAL_RCC_OscConfig+0x48c>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d000      	beq.n	80020a0 <HAL_RCC_OscConfig+0x328>
 800209e:	e0b1      	b.n	8002204 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e177      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>
 80020a4:	40021000 	.word	0x40021000
 80020a8:	fffeffff 	.word	0xfffeffff
 80020ac:	fffbffff 	.word	0xfffbffff
 80020b0:	ffff80ff 	.word	0xffff80ff
 80020b4:	ffffc7ff 	.word	0xffffc7ff
 80020b8:	00f42400 	.word	0x00f42400
 80020bc:	20000008 	.word	0x20000008
 80020c0:	20000000 	.word	0x20000000
 80020c4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020c8:	4bb4      	ldr	r3, [pc, #720]	; (800239c <HAL_RCC_OscConfig+0x624>)
 80020ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	055b      	lsls	r3, r3, #21
 80020d0:	4013      	ands	r3, r2
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_OscConfig+0x360>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <HAL_RCC_OscConfig+0x362>
 80020d8:	2300      	movs	r3, #0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d011      	beq.n	8002102 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	4baf      	ldr	r3, [pc, #700]	; (800239c <HAL_RCC_OscConfig+0x624>)
 80020e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020e2:	4bae      	ldr	r3, [pc, #696]	; (800239c <HAL_RCC_OscConfig+0x624>)
 80020e4:	2180      	movs	r1, #128	; 0x80
 80020e6:	0549      	lsls	r1, r1, #21
 80020e8:	430a      	orrs	r2, r1
 80020ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80020ec:	4bab      	ldr	r3, [pc, #684]	; (800239c <HAL_RCC_OscConfig+0x624>)
 80020ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	055b      	lsls	r3, r3, #21
 80020f4:	4013      	ands	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80020fa:	231f      	movs	r3, #31
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002102:	4ba7      	ldr	r3, [pc, #668]	; (80023a0 <HAL_RCC_OscConfig+0x628>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4013      	ands	r3, r2
 800210c:	d11a      	bne.n	8002144 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800210e:	4ba4      	ldr	r3, [pc, #656]	; (80023a0 <HAL_RCC_OscConfig+0x628>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4ba3      	ldr	r3, [pc, #652]	; (80023a0 <HAL_RCC_OscConfig+0x628>)
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	0049      	lsls	r1, r1, #1
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800211c:	f7fe faf6 	bl	800070c <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002126:	f7fe faf1 	bl	800070c <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e12d      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002138:	4b99      	ldr	r3, [pc, #612]	; (80023a0 <HAL_RCC_OscConfig+0x628>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4013      	ands	r3, r2
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x3e2>
 800214c:	4b93      	ldr	r3, [pc, #588]	; (800239c <HAL_RCC_OscConfig+0x624>)
 800214e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002150:	4b92      	ldr	r3, [pc, #584]	; (800239c <HAL_RCC_OscConfig+0x624>)
 8002152:	2101      	movs	r1, #1
 8002154:	430a      	orrs	r2, r1
 8002156:	65da      	str	r2, [r3, #92]	; 0x5c
 8002158:	e01c      	b.n	8002194 <HAL_RCC_OscConfig+0x41c>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b05      	cmp	r3, #5
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0x404>
 8002162:	4b8e      	ldr	r3, [pc, #568]	; (800239c <HAL_RCC_OscConfig+0x624>)
 8002164:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002166:	4b8d      	ldr	r3, [pc, #564]	; (800239c <HAL_RCC_OscConfig+0x624>)
 8002168:	2104      	movs	r1, #4
 800216a:	430a      	orrs	r2, r1
 800216c:	65da      	str	r2, [r3, #92]	; 0x5c
 800216e:	4b8b      	ldr	r3, [pc, #556]	; (800239c <HAL_RCC_OscConfig+0x624>)
 8002170:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002172:	4b8a      	ldr	r3, [pc, #552]	; (800239c <HAL_RCC_OscConfig+0x624>)
 8002174:	2101      	movs	r1, #1
 8002176:	430a      	orrs	r2, r1
 8002178:	65da      	str	r2, [r3, #92]	; 0x5c
 800217a:	e00b      	b.n	8002194 <HAL_RCC_OscConfig+0x41c>
 800217c:	4b87      	ldr	r3, [pc, #540]	; (800239c <HAL_RCC_OscConfig+0x624>)
 800217e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002180:	4b86      	ldr	r3, [pc, #536]	; (800239c <HAL_RCC_OscConfig+0x624>)
 8002182:	2101      	movs	r1, #1
 8002184:	438a      	bics	r2, r1
 8002186:	65da      	str	r2, [r3, #92]	; 0x5c
 8002188:	4b84      	ldr	r3, [pc, #528]	; (800239c <HAL_RCC_OscConfig+0x624>)
 800218a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800218c:	4b83      	ldr	r3, [pc, #524]	; (800239c <HAL_RCC_OscConfig+0x624>)
 800218e:	2104      	movs	r1, #4
 8002190:	438a      	bics	r2, r1
 8002192:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d014      	beq.n	80021c6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7fe fab6 	bl	800070c <HAL_GetTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a4:	e009      	b.n	80021ba <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7fe fab1 	bl	800070c <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	4a7c      	ldr	r2, [pc, #496]	; (80023a4 <HAL_RCC_OscConfig+0x62c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e0ec      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ba:	4b78      	ldr	r3, [pc, #480]	; (800239c <HAL_RCC_OscConfig+0x624>)
 80021bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021be:	2202      	movs	r2, #2
 80021c0:	4013      	ands	r3, r2
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x42e>
 80021c4:	e013      	b.n	80021ee <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7fe faa1 	bl	800070c <HAL_GetTick>
 80021ca:	0003      	movs	r3, r0
 80021cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021ce:	e009      	b.n	80021e4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7fe fa9c 	bl	800070c <HAL_GetTick>
 80021d4:	0002      	movs	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	4a72      	ldr	r2, [pc, #456]	; (80023a4 <HAL_RCC_OscConfig+0x62c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e0d7      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021e4:	4b6d      	ldr	r3, [pc, #436]	; (800239c <HAL_RCC_OscConfig+0x624>)
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	2202      	movs	r2, #2
 80021ea:	4013      	ands	r3, r2
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80021ee:	231f      	movs	r3, #31
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80021f8:	4b68      	ldr	r3, [pc, #416]	; (800239c <HAL_RCC_OscConfig+0x624>)
 80021fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021fc:	4b67      	ldr	r3, [pc, #412]	; (800239c <HAL_RCC_OscConfig+0x624>)
 80021fe:	496a      	ldr	r1, [pc, #424]	; (80023a8 <HAL_RCC_OscConfig+0x630>)
 8002200:	400a      	ands	r2, r1
 8002202:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d100      	bne.n	800220e <HAL_RCC_OscConfig+0x496>
 800220c:	e0c1      	b.n	8002392 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800220e:	4b63      	ldr	r3, [pc, #396]	; (800239c <HAL_RCC_OscConfig+0x624>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2238      	movs	r2, #56	; 0x38
 8002214:	4013      	ands	r3, r2
 8002216:	2b10      	cmp	r3, #16
 8002218:	d100      	bne.n	800221c <HAL_RCC_OscConfig+0x4a4>
 800221a:	e081      	b.n	8002320 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d156      	bne.n	80022d2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002224:	4b5d      	ldr	r3, [pc, #372]	; (800239c <HAL_RCC_OscConfig+0x624>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b5c      	ldr	r3, [pc, #368]	; (800239c <HAL_RCC_OscConfig+0x624>)
 800222a:	4960      	ldr	r1, [pc, #384]	; (80023ac <HAL_RCC_OscConfig+0x634>)
 800222c:	400a      	ands	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe fa6c 	bl	800070c <HAL_GetTick>
 8002234:	0003      	movs	r3, r0
 8002236:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223a:	f7fe fa67 	bl	800070c <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0a3      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224c:	4b53      	ldr	r3, [pc, #332]	; (800239c <HAL_RCC_OscConfig+0x624>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	049b      	lsls	r3, r3, #18
 8002254:	4013      	ands	r3, r2
 8002256:	d1f0      	bne.n	800223a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002258:	4b50      	ldr	r3, [pc, #320]	; (800239c <HAL_RCC_OscConfig+0x624>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a54      	ldr	r2, [pc, #336]	; (80023b0 <HAL_RCC_OscConfig+0x638>)
 800225e:	4013      	ands	r3, r2
 8002260:	0019      	movs	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1a      	ldr	r2, [r3, #32]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	021b      	lsls	r3, r3, #8
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002284:	431a      	orrs	r2, r3
 8002286:	4b45      	ldr	r3, [pc, #276]	; (800239c <HAL_RCC_OscConfig+0x624>)
 8002288:	430a      	orrs	r2, r1
 800228a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800228c:	4b43      	ldr	r3, [pc, #268]	; (800239c <HAL_RCC_OscConfig+0x624>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b42      	ldr	r3, [pc, #264]	; (800239c <HAL_RCC_OscConfig+0x624>)
 8002292:	2180      	movs	r1, #128	; 0x80
 8002294:	0449      	lsls	r1, r1, #17
 8002296:	430a      	orrs	r2, r1
 8002298:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800229a:	4b40      	ldr	r3, [pc, #256]	; (800239c <HAL_RCC_OscConfig+0x624>)
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	4b3f      	ldr	r3, [pc, #252]	; (800239c <HAL_RCC_OscConfig+0x624>)
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	0549      	lsls	r1, r1, #21
 80022a4:	430a      	orrs	r2, r1
 80022a6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe fa30 	bl	800070c <HAL_GetTick>
 80022ac:	0003      	movs	r3, r0
 80022ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b2:	f7fe fa2b 	bl	800070c <HAL_GetTick>
 80022b6:	0002      	movs	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e067      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c4:	4b35      	ldr	r3, [pc, #212]	; (800239c <HAL_RCC_OscConfig+0x624>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	049b      	lsls	r3, r3, #18
 80022cc:	4013      	ands	r3, r2
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x53a>
 80022d0:	e05f      	b.n	8002392 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d2:	4b32      	ldr	r3, [pc, #200]	; (800239c <HAL_RCC_OscConfig+0x624>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	4b31      	ldr	r3, [pc, #196]	; (800239c <HAL_RCC_OscConfig+0x624>)
 80022d8:	4934      	ldr	r1, [pc, #208]	; (80023ac <HAL_RCC_OscConfig+0x634>)
 80022da:	400a      	ands	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80022de:	4b2f      	ldr	r3, [pc, #188]	; (800239c <HAL_RCC_OscConfig+0x624>)
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	4b2e      	ldr	r3, [pc, #184]	; (800239c <HAL_RCC_OscConfig+0x624>)
 80022e4:	2103      	movs	r1, #3
 80022e6:	438a      	bics	r2, r1
 80022e8:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80022ea:	4b2c      	ldr	r3, [pc, #176]	; (800239c <HAL_RCC_OscConfig+0x624>)
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	4b2b      	ldr	r3, [pc, #172]	; (800239c <HAL_RCC_OscConfig+0x624>)
 80022f0:	4930      	ldr	r1, [pc, #192]	; (80023b4 <HAL_RCC_OscConfig+0x63c>)
 80022f2:	400a      	ands	r2, r1
 80022f4:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7fe fa09 	bl	800070c <HAL_GetTick>
 80022fa:	0003      	movs	r3, r0
 80022fc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002300:	f7fe fa04 	bl	800070c <HAL_GetTick>
 8002304:	0002      	movs	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e040      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002312:	4b22      	ldr	r3, [pc, #136]	; (800239c <HAL_RCC_OscConfig+0x624>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	049b      	lsls	r3, r3, #18
 800231a:	4013      	ands	r3, r2
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x588>
 800231e:	e038      	b.n	8002392 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e033      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800232c:	4b1b      	ldr	r3, [pc, #108]	; (800239c <HAL_RCC_OscConfig+0x624>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2203      	movs	r2, #3
 8002336:	401a      	ands	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	429a      	cmp	r2, r3
 800233e:	d126      	bne.n	800238e <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2270      	movs	r2, #112	; 0x70
 8002344:	401a      	ands	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d11f      	bne.n	800238e <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	23fe      	movs	r3, #254	; 0xfe
 8002352:	01db      	lsls	r3, r3, #7
 8002354:	401a      	ands	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d116      	bne.n	800238e <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	23f8      	movs	r3, #248	; 0xf8
 8002364:	039b      	lsls	r3, r3, #14
 8002366:	401a      	ands	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d10e      	bne.n	800238e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	23e0      	movs	r3, #224	; 0xe0
 8002374:	051b      	lsls	r3, r3, #20
 8002376:	401a      	ands	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	0f5b      	lsrs	r3, r3, #29
 8002384:	075a      	lsls	r2, r3, #29
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d001      	beq.n	8002392 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	0018      	movs	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	b008      	add	sp, #32
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	40007000 	.word	0x40007000
 80023a4:	00001388 	.word	0x00001388
 80023a8:	efffffff 	.word	0xefffffff
 80023ac:	feffffff 	.word	0xfeffffff
 80023b0:	11c1808c 	.word	0x11c1808c
 80023b4:	eefeffff 	.word	0xeefeffff

080023b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0e9      	b.n	80025a0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023cc:	4b76      	ldr	r3, [pc, #472]	; (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2207      	movs	r2, #7
 80023d2:	4013      	ands	r3, r2
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d91e      	bls.n	8002418 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b73      	ldr	r3, [pc, #460]	; (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2207      	movs	r2, #7
 80023e0:	4393      	bics	r3, r2
 80023e2:	0019      	movs	r1, r3
 80023e4:	4b70      	ldr	r3, [pc, #448]	; (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023ec:	f7fe f98e 	bl	800070c <HAL_GetTick>
 80023f0:	0003      	movs	r3, r0
 80023f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023f4:	e009      	b.n	800240a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f6:	f7fe f989 	bl	800070c <HAL_GetTick>
 80023fa:	0002      	movs	r2, r0
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	4a6a      	ldr	r2, [pc, #424]	; (80025ac <HAL_RCC_ClockConfig+0x1f4>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e0ca      	b.n	80025a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800240a:	4b67      	ldr	r3, [pc, #412]	; (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2207      	movs	r2, #7
 8002410:	4013      	ands	r3, r2
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d1ee      	bne.n	80023f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2202      	movs	r2, #2
 800241e:	4013      	ands	r3, r2
 8002420:	d015      	beq.n	800244e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2204      	movs	r2, #4
 8002428:	4013      	ands	r3, r2
 800242a:	d006      	beq.n	800243a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800242c:	4b60      	ldr	r3, [pc, #384]	; (80025b0 <HAL_RCC_ClockConfig+0x1f8>)
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	4b5f      	ldr	r3, [pc, #380]	; (80025b0 <HAL_RCC_ClockConfig+0x1f8>)
 8002432:	21e0      	movs	r1, #224	; 0xe0
 8002434:	01c9      	lsls	r1, r1, #7
 8002436:	430a      	orrs	r2, r1
 8002438:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800243a:	4b5d      	ldr	r3, [pc, #372]	; (80025b0 <HAL_RCC_ClockConfig+0x1f8>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	4a5d      	ldr	r2, [pc, #372]	; (80025b4 <HAL_RCC_ClockConfig+0x1fc>)
 8002440:	4013      	ands	r3, r2
 8002442:	0019      	movs	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	4b59      	ldr	r3, [pc, #356]	; (80025b0 <HAL_RCC_ClockConfig+0x1f8>)
 800244a:	430a      	orrs	r2, r1
 800244c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2201      	movs	r2, #1
 8002454:	4013      	ands	r3, r2
 8002456:	d057      	beq.n	8002508 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d107      	bne.n	8002470 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002460:	4b53      	ldr	r3, [pc, #332]	; (80025b0 <HAL_RCC_ClockConfig+0x1f8>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	029b      	lsls	r3, r3, #10
 8002468:	4013      	ands	r3, r2
 800246a:	d12b      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e097      	b.n	80025a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d107      	bne.n	8002488 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002478:	4b4d      	ldr	r3, [pc, #308]	; (80025b0 <HAL_RCC_ClockConfig+0x1f8>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	049b      	lsls	r3, r3, #18
 8002480:	4013      	ands	r3, r2
 8002482:	d11f      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e08b      	b.n	80025a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d107      	bne.n	80024a0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002490:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <HAL_RCC_ClockConfig+0x1f8>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4013      	ands	r3, r2
 800249a:	d113      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e07f      	b.n	80025a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024a8:	4b41      	ldr	r3, [pc, #260]	; (80025b0 <HAL_RCC_ClockConfig+0x1f8>)
 80024aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ac:	2202      	movs	r2, #2
 80024ae:	4013      	ands	r3, r2
 80024b0:	d108      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e074      	b.n	80025a0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b6:	4b3e      	ldr	r3, [pc, #248]	; (80025b0 <HAL_RCC_ClockConfig+0x1f8>)
 80024b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ba:	2202      	movs	r2, #2
 80024bc:	4013      	ands	r3, r2
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e06d      	b.n	80025a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024c4:	4b3a      	ldr	r3, [pc, #232]	; (80025b0 <HAL_RCC_ClockConfig+0x1f8>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2207      	movs	r2, #7
 80024ca:	4393      	bics	r3, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	4b37      	ldr	r3, [pc, #220]	; (80025b0 <HAL_RCC_ClockConfig+0x1f8>)
 80024d4:	430a      	orrs	r2, r1
 80024d6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d8:	f7fe f918 	bl	800070c <HAL_GetTick>
 80024dc:	0003      	movs	r3, r0
 80024de:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e0:	e009      	b.n	80024f6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e2:	f7fe f913 	bl	800070c <HAL_GetTick>
 80024e6:	0002      	movs	r2, r0
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	4a2f      	ldr	r2, [pc, #188]	; (80025ac <HAL_RCC_ClockConfig+0x1f4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e054      	b.n	80025a0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <HAL_RCC_ClockConfig+0x1f8>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2238      	movs	r2, #56	; 0x38
 80024fc:	401a      	ands	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	429a      	cmp	r2, r3
 8002506:	d1ec      	bne.n	80024e2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002508:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2207      	movs	r2, #7
 800250e:	4013      	ands	r3, r2
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d21e      	bcs.n	8002554 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2207      	movs	r2, #7
 800251c:	4393      	bics	r3, r2
 800251e:	0019      	movs	r1, r3
 8002520:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002528:	f7fe f8f0 	bl	800070c <HAL_GetTick>
 800252c:	0003      	movs	r3, r0
 800252e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002530:	e009      	b.n	8002546 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002532:	f7fe f8eb 	bl	800070c <HAL_GetTick>
 8002536:	0002      	movs	r2, r0
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	4a1b      	ldr	r2, [pc, #108]	; (80025ac <HAL_RCC_ClockConfig+0x1f4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e02c      	b.n	80025a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002546:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2207      	movs	r2, #7
 800254c:	4013      	ands	r3, r2
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d1ee      	bne.n	8002532 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2204      	movs	r2, #4
 800255a:	4013      	ands	r3, r2
 800255c:	d009      	beq.n	8002572 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800255e:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <HAL_RCC_ClockConfig+0x1f8>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	4a15      	ldr	r2, [pc, #84]	; (80025b8 <HAL_RCC_ClockConfig+0x200>)
 8002564:	4013      	ands	r3, r2
 8002566:	0019      	movs	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68da      	ldr	r2, [r3, #12]
 800256c:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <HAL_RCC_ClockConfig+0x1f8>)
 800256e:	430a      	orrs	r2, r1
 8002570:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002572:	f000 f829 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 8002576:	0001      	movs	r1, r0
 8002578:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <HAL_RCC_ClockConfig+0x1f8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	220f      	movs	r2, #15
 8002580:	401a      	ands	r2, r3
 8002582:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <HAL_RCC_ClockConfig+0x204>)
 8002584:	0092      	lsls	r2, r2, #2
 8002586:	58d3      	ldr	r3, [r2, r3]
 8002588:	221f      	movs	r2, #31
 800258a:	4013      	ands	r3, r2
 800258c:	000a      	movs	r2, r1
 800258e:	40da      	lsrs	r2, r3
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_ClockConfig+0x208>)
 8002592:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCC_ClockConfig+0x20c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0018      	movs	r0, r3
 800259a:	f7fe f85d 	bl	8000658 <HAL_InitTick>
 800259e:	0003      	movs	r3, r0
}
 80025a0:	0018      	movs	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b004      	add	sp, #16
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40022000 	.word	0x40022000
 80025ac:	00001388 	.word	0x00001388
 80025b0:	40021000 	.word	0x40021000
 80025b4:	fffff0ff 	.word	0xfffff0ff
 80025b8:	ffff8fff 	.word	0xffff8fff
 80025bc:	08007f08 	.word	0x08007f08
 80025c0:	20000008 	.word	0x20000008
 80025c4:	20000000 	.word	0x20000000

080025c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025ce:	4b3c      	ldr	r3, [pc, #240]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2238      	movs	r2, #56	; 0x38
 80025d4:	4013      	ands	r3, r2
 80025d6:	d10f      	bne.n	80025f8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80025d8:	4b39      	ldr	r3, [pc, #228]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0adb      	lsrs	r3, r3, #11
 80025de:	2207      	movs	r2, #7
 80025e0:	4013      	ands	r3, r2
 80025e2:	2201      	movs	r2, #1
 80025e4:	409a      	lsls	r2, r3
 80025e6:	0013      	movs	r3, r2
 80025e8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80025ea:	6839      	ldr	r1, [r7, #0]
 80025ec:	4835      	ldr	r0, [pc, #212]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025ee:	f7fd fd91 	bl	8000114 <__udivsi3>
 80025f2:	0003      	movs	r3, r0
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	e05d      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025f8:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2238      	movs	r2, #56	; 0x38
 80025fe:	4013      	ands	r3, r2
 8002600:	2b08      	cmp	r3, #8
 8002602:	d102      	bne.n	800260a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002604:	4b2f      	ldr	r3, [pc, #188]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	e054      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800260a:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2238      	movs	r2, #56	; 0x38
 8002610:	4013      	ands	r3, r2
 8002612:	2b10      	cmp	r3, #16
 8002614:	d138      	bne.n	8002688 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002616:	4b2a      	ldr	r3, [pc, #168]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2203      	movs	r2, #3
 800261c:	4013      	ands	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002620:	4b27      	ldr	r3, [pc, #156]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	2207      	movs	r2, #7
 8002628:	4013      	ands	r3, r2
 800262a:	3301      	adds	r3, #1
 800262c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d10d      	bne.n	8002650 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	4823      	ldr	r0, [pc, #140]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002638:	f7fd fd6c 	bl	8000114 <__udivsi3>
 800263c:	0003      	movs	r3, r0
 800263e:	0019      	movs	r1, r3
 8002640:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	227f      	movs	r2, #127	; 0x7f
 8002648:	4013      	ands	r3, r2
 800264a:	434b      	muls	r3, r1
 800264c:	617b      	str	r3, [r7, #20]
        break;
 800264e:	e00d      	b.n	800266c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	481c      	ldr	r0, [pc, #112]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002654:	f7fd fd5e 	bl	8000114 <__udivsi3>
 8002658:	0003      	movs	r3, r0
 800265a:	0019      	movs	r1, r3
 800265c:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	0a1b      	lsrs	r3, r3, #8
 8002662:	227f      	movs	r2, #127	; 0x7f
 8002664:	4013      	ands	r3, r2
 8002666:	434b      	muls	r3, r1
 8002668:	617b      	str	r3, [r7, #20]
        break;
 800266a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	0f5b      	lsrs	r3, r3, #29
 8002672:	2207      	movs	r2, #7
 8002674:	4013      	ands	r3, r2
 8002676:	3301      	adds	r3, #1
 8002678:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	6978      	ldr	r0, [r7, #20]
 800267e:	f7fd fd49 	bl	8000114 <__udivsi3>
 8002682:	0003      	movs	r3, r0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	e015      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2238      	movs	r2, #56	; 0x38
 800268e:	4013      	ands	r3, r2
 8002690:	2b20      	cmp	r3, #32
 8002692:	d103      	bne.n	800269c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	e00b      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800269c:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2238      	movs	r2, #56	; 0x38
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b18      	cmp	r3, #24
 80026a6:	d103      	bne.n	80026b0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80026a8:	23fa      	movs	r3, #250	; 0xfa
 80026aa:	01db      	lsls	r3, r3, #7
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	e001      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026b4:	693b      	ldr	r3, [r7, #16]
}
 80026b6:	0018      	movs	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b006      	add	sp, #24
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	40021000 	.word	0x40021000
 80026c4:	00f42400 	.word	0x00f42400

080026c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026cc:	4b02      	ldr	r3, [pc, #8]	; (80026d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	20000008 	.word	0x20000008

080026dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026dc:	b5b0      	push	{r4, r5, r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80026e0:	f7ff fff2 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 80026e4:	0004      	movs	r4, r0
 80026e6:	f7ff fb3b 	bl	8001d60 <LL_RCC_GetAPB1Prescaler>
 80026ea:	0003      	movs	r3, r0
 80026ec:	0b1a      	lsrs	r2, r3, #12
 80026ee:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026f0:	0092      	lsls	r2, r2, #2
 80026f2:	58d3      	ldr	r3, [r2, r3]
 80026f4:	221f      	movs	r2, #31
 80026f6:	4013      	ands	r3, r2
 80026f8:	40dc      	lsrs	r4, r3
 80026fa:	0023      	movs	r3, r4
}
 80026fc:	0018      	movs	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	bdb0      	pop	{r4, r5, r7, pc}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	08007f48 	.word	0x08007f48

08002708 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002710:	2313      	movs	r3, #19
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002718:	2312      	movs	r3, #18
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	029b      	lsls	r3, r3, #10
 8002728:	4013      	ands	r3, r2
 800272a:	d100      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800272c:	e0a4      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272e:	2311      	movs	r3, #17
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002736:	4bc3      	ldr	r3, [pc, #780]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	055b      	lsls	r3, r3, #21
 800273e:	4013      	ands	r3, r2
 8002740:	d111      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002742:	4bc0      	ldr	r3, [pc, #768]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002746:	4bbf      	ldr	r3, [pc, #764]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002748:	2180      	movs	r1, #128	; 0x80
 800274a:	0549      	lsls	r1, r1, #21
 800274c:	430a      	orrs	r2, r1
 800274e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002750:	4bbc      	ldr	r3, [pc, #752]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	055b      	lsls	r3, r3, #21
 8002758:	4013      	ands	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275e:	2311      	movs	r3, #17
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002766:	4bb8      	ldr	r3, [pc, #736]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	4bb7      	ldr	r3, [pc, #732]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	0049      	lsls	r1, r1, #1
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002774:	f7fd ffca 	bl	800070c <HAL_GetTick>
 8002778:	0003      	movs	r3, r0
 800277a:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277c:	e00b      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7fd ffc5 	bl	800070c <HAL_GetTick>
 8002782:	0002      	movs	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d904      	bls.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 800278c:	2313      	movs	r3, #19
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	2203      	movs	r2, #3
 8002792:	701a      	strb	r2, [r3, #0]
        break;
 8002794:	e005      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002796:	4bac      	ldr	r3, [pc, #688]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4013      	ands	r3, r2
 80027a0:	d0ed      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80027a2:	2313      	movs	r3, #19
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d154      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027ac:	4ba5      	ldr	r3, [pc, #660]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027b0:	23c0      	movs	r3, #192	; 0xc0
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4013      	ands	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d019      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d014      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027c8:	4b9e      	ldr	r3, [pc, #632]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	4a9f      	ldr	r2, [pc, #636]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027d2:	4b9c      	ldr	r3, [pc, #624]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027d6:	4b9b      	ldr	r3, [pc, #620]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027d8:	2180      	movs	r1, #128	; 0x80
 80027da:	0249      	lsls	r1, r1, #9
 80027dc:	430a      	orrs	r2, r1
 80027de:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027e0:	4b98      	ldr	r3, [pc, #608]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027e4:	4b97      	ldr	r3, [pc, #604]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027e6:	499a      	ldr	r1, [pc, #616]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80027e8:	400a      	ands	r2, r1
 80027ea:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027ec:	4b95      	ldr	r3, [pc, #596]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2201      	movs	r2, #1
 80027f6:	4013      	ands	r3, r2
 80027f8:	d016      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7fd ff87 	bl	800070c <HAL_GetTick>
 80027fe:	0003      	movs	r3, r0
 8002800:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002802:	e00c      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002804:	f7fd ff82 	bl	800070c <HAL_GetTick>
 8002808:	0002      	movs	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	4a91      	ldr	r2, [pc, #580]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d904      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8002814:	2313      	movs	r3, #19
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2203      	movs	r2, #3
 800281a:	701a      	strb	r2, [r3, #0]
            break;
 800281c:	e004      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281e:	4b89      	ldr	r3, [pc, #548]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	2202      	movs	r2, #2
 8002824:	4013      	ands	r3, r2
 8002826:	d0ed      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8002828:	2313      	movs	r3, #19
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10a      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002832:	4b84      	ldr	r3, [pc, #528]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002836:	4a85      	ldr	r2, [pc, #532]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002838:	4013      	ands	r3, r2
 800283a:	0019      	movs	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002840:	4b80      	ldr	r3, [pc, #512]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002842:	430a      	orrs	r2, r1
 8002844:	65da      	str	r2, [r3, #92]	; 0x5c
 8002846:	e00c      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002848:	2312      	movs	r3, #18
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	2213      	movs	r2, #19
 800284e:	18ba      	adds	r2, r7, r2
 8002850:	7812      	ldrb	r2, [r2, #0]
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	e005      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002856:	2312      	movs	r3, #18
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	2213      	movs	r2, #19
 800285c:	18ba      	adds	r2, r7, r2
 800285e:	7812      	ldrb	r2, [r2, #0]
 8002860:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002862:	2311      	movs	r3, #17
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d105      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286c:	4b75      	ldr	r3, [pc, #468]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800286e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002870:	4b74      	ldr	r3, [pc, #464]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002872:	4979      	ldr	r1, [pc, #484]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002874:	400a      	ands	r2, r1
 8002876:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2201      	movs	r2, #1
 800287e:	4013      	ands	r3, r2
 8002880:	d009      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002882:	4b70      	ldr	r3, [pc, #448]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002886:	2203      	movs	r2, #3
 8002888:	4393      	bics	r3, r2
 800288a:	0019      	movs	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4b6c      	ldr	r3, [pc, #432]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002892:	430a      	orrs	r2, r1
 8002894:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2202      	movs	r2, #2
 800289c:	4013      	ands	r3, r2
 800289e:	d009      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028a0:	4b68      	ldr	r3, [pc, #416]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a4:	220c      	movs	r2, #12
 80028a6:	4393      	bics	r3, r2
 80028a8:	0019      	movs	r1, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	4b65      	ldr	r3, [pc, #404]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028b0:	430a      	orrs	r2, r1
 80028b2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2220      	movs	r2, #32
 80028ba:	4013      	ands	r3, r2
 80028bc:	d009      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028be:	4b61      	ldr	r3, [pc, #388]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c2:	4a66      	ldr	r2, [pc, #408]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	0019      	movs	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	4b5d      	ldr	r3, [pc, #372]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028ce:	430a      	orrs	r2, r1
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4013      	ands	r3, r2
 80028dc:	d009      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028de:	4b59      	ldr	r3, [pc, #356]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	4a5f      	ldr	r2, [pc, #380]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699a      	ldr	r2, [r3, #24]
 80028ec:	4b55      	ldr	r3, [pc, #340]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028ee:	430a      	orrs	r2, r1
 80028f0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4013      	ands	r3, r2
 80028fc:	d009      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028fe:	4b51      	ldr	r3, [pc, #324]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002902:	4a58      	ldr	r2, [pc, #352]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002904:	4013      	ands	r3, r2
 8002906:	0019      	movs	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69da      	ldr	r2, [r3, #28]
 800290c:	4b4d      	ldr	r3, [pc, #308]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800290e:	430a      	orrs	r2, r1
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2240      	movs	r2, #64	; 0x40
 8002918:	4013      	ands	r3, r2
 800291a:	d009      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800291c:	4b49      	ldr	r3, [pc, #292]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800291e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002920:	4a51      	ldr	r2, [pc, #324]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002922:	4013      	ands	r3, r2
 8002924:	0019      	movs	r1, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	4b46      	ldr	r3, [pc, #280]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800292c:	430a      	orrs	r2, r1
 800292e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	01db      	lsls	r3, r3, #7
 8002938:	4013      	ands	r3, r2
 800293a:	d015      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800293c:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800293e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	0899      	lsrs	r1, r3, #2
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1a      	ldr	r2, [r3, #32]
 8002948:	4b3e      	ldr	r3, [pc, #248]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800294a:	430a      	orrs	r2, r1
 800294c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1a      	ldr	r2, [r3, #32]
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	05db      	lsls	r3, r3, #23
 8002956:	429a      	cmp	r2, r3
 8002958:	d106      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800295a:	4b3a      	ldr	r3, [pc, #232]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	4b39      	ldr	r3, [pc, #228]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	0249      	lsls	r1, r1, #9
 8002964:	430a      	orrs	r2, r1
 8002966:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	031b      	lsls	r3, r3, #12
 8002970:	4013      	ands	r3, r2
 8002972:	d009      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002974:	4b33      	ldr	r3, [pc, #204]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	2240      	movs	r2, #64	; 0x40
 800297a:	4393      	bics	r3, r2
 800297c:	0019      	movs	r1, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002982:	4b30      	ldr	r3, [pc, #192]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002984:	430a      	orrs	r2, r1
 8002986:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	039b      	lsls	r3, r3, #14
 8002990:	4013      	ands	r3, r2
 8002992:	d016      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002994:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002998:	4a34      	ldr	r2, [pc, #208]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800299a:	4013      	ands	r3, r2
 800299c:	0019      	movs	r1, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029a2:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029a4:	430a      	orrs	r2, r1
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	03db      	lsls	r3, r3, #15
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d106      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80029b4:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	4b22      	ldr	r3, [pc, #136]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ba:	2180      	movs	r1, #128	; 0x80
 80029bc:	0449      	lsls	r1, r1, #17
 80029be:	430a      	orrs	r2, r1
 80029c0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	03db      	lsls	r3, r3, #15
 80029ca:	4013      	ands	r3, r2
 80029cc:	d016      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d2:	4a27      	ldr	r2, [pc, #156]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	0019      	movs	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029de:	430a      	orrs	r2, r1
 80029e0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	045b      	lsls	r3, r3, #17
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d106      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029f4:	2180      	movs	r1, #128	; 0x80
 80029f6:	0449      	lsls	r1, r1, #17
 80029f8:	430a      	orrs	r2, r1
 80029fa:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	4013      	ands	r3, r2
 8002a06:	d016      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002a08:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0c:	4a19      	ldr	r2, [pc, #100]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	0019      	movs	r1, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	01db      	lsls	r3, r3, #7
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d106      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a2e:	2180      	movs	r1, #128	; 0x80
 8002a30:	0249      	lsls	r1, r1, #9
 8002a32:	430a      	orrs	r2, r1
 8002a34:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8002a36:	2312      	movs	r3, #18
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	781b      	ldrb	r3, [r3, #0]
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b006      	add	sp, #24
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40007000 	.word	0x40007000
 8002a4c:	fffffcff 	.word	0xfffffcff
 8002a50:	fffeffff 	.word	0xfffeffff
 8002a54:	00001388 	.word	0x00001388
 8002a58:	efffffff 	.word	0xefffffff
 8002a5c:	fffff3ff 	.word	0xfffff3ff
 8002a60:	fff3ffff 	.word	0xfff3ffff
 8002a64:	ffcfffff 	.word	0xffcfffff
 8002a68:	ffffcfff 	.word	0xffffcfff
 8002a6c:	ffbfffff 	.word	0xffbfffff
 8002a70:	feffffff 	.word	0xfeffffff
 8002a74:	ffff3fff 	.word	0xffff3fff

08002a78 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	1dbb      	adds	r3, r7, #6
 8002a84:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2280      	movs	r2, #128	; 0x80
 8002a8a:	589b      	ldr	r3, [r3, r2]
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d000      	beq.n	8002a92 <HAL_UART_Transmit_IT+0x1a>
 8002a90:	e07f      	b.n	8002b92 <HAL_UART_Transmit_IT+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_UART_Transmit_IT+0x28>
 8002a98:	1dbb      	adds	r3, r7, #6
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e077      	b.n	8002b94 <HAL_UART_Transmit_IT+0x11c>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	015b      	lsls	r3, r3, #5
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d109      	bne.n	8002ac4 <HAL_UART_Transmit_IT+0x4c>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d105      	bne.n	8002ac4 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2201      	movs	r2, #1
 8002abc:	4013      	ands	r3, r2
 8002abe:	d001      	beq.n	8002ac4 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e067      	b.n	8002b94 <HAL_UART_Transmit_IT+0x11c>
      }
    }

    __HAL_LOCK(huart);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	227c      	movs	r2, #124	; 0x7c
 8002ac8:	5c9b      	ldrb	r3, [r3, r2]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_UART_Transmit_IT+0x5a>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e060      	b.n	8002b94 <HAL_UART_Transmit_IT+0x11c>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	227c      	movs	r2, #124	; 0x7c
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1dba      	adds	r2, r7, #6
 8002ae4:	2154      	movs	r1, #84	; 0x54
 8002ae6:	8812      	ldrh	r2, [r2, #0]
 8002ae8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1dba      	adds	r2, r7, #6
 8002aee:	2156      	movs	r1, #86	; 0x56
 8002af0:	8812      	ldrh	r2, [r2, #0]
 8002af2:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2288      	movs	r2, #136	; 0x88
 8002afe:	2100      	movs	r1, #0
 8002b00:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2280      	movs	r2, #128	; 0x80
 8002b06:	2121      	movs	r1, #33	; 0x21
 8002b08:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	059b      	lsls	r3, r3, #22
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d11e      	bne.n	8002b54 <HAL_UART_Transmit_IT+0xdc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	2380      	movs	r3, #128	; 0x80
 8002b1c:	015b      	lsls	r3, r3, #5
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d107      	bne.n	8002b32 <HAL_UART_Transmit_IT+0xba>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d103      	bne.n	8002b32 <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4a1b      	ldr	r2, [pc, #108]	; (8002b9c <HAL_UART_Transmit_IT+0x124>)
 8002b2e:	671a      	str	r2, [r3, #112]	; 0x70
 8002b30:	e002      	b.n	8002b38 <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4a1a      	ldr	r2, [pc, #104]	; (8002ba0 <HAL_UART_Transmit_IT+0x128>)
 8002b36:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	227c      	movs	r2, #124	; 0x7c
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	5499      	strb	r1, [r3, r2]

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2180      	movs	r1, #128	; 0x80
 8002b4c:	0409      	lsls	r1, r1, #16
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	609a      	str	r2, [r3, #8]
 8002b52:	e01c      	b.n	8002b8e <HAL_UART_Transmit_IT+0x116>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	015b      	lsls	r3, r3, #5
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d107      	bne.n	8002b70 <HAL_UART_Transmit_IT+0xf8>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d103      	bne.n	8002b70 <HAL_UART_Transmit_IT+0xf8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ba4 <HAL_UART_Transmit_IT+0x12c>)
 8002b6c:	671a      	str	r2, [r3, #112]	; 0x70
 8002b6e:	e002      	b.n	8002b76 <HAL_UART_Transmit_IT+0xfe>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4a0d      	ldr	r2, [pc, #52]	; (8002ba8 <HAL_UART_Transmit_IT+0x130>)
 8002b74:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	227c      	movs	r2, #124	; 0x7c
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	5499      	strb	r1, [r3, r2]

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2180      	movs	r1, #128	; 0x80
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e000      	b.n	8002b94 <HAL_UART_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
  }
}
 8002b94:	0018      	movs	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b004      	add	sp, #16
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	0800450d 	.word	0x0800450d
 8002ba0:	08004465 	.word	0x08004465
 8002ba4:	080043eb 	.word	0x080043eb
 8002ba8:	0800437b 	.word	0x0800437b

08002bac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	220f      	movs	r2, #15
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d117      	bne.n	8002c0a <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	4013      	ands	r3, r2
 8002be0:	d013      	beq.n	8002c0a <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	2220      	movs	r2, #32
 8002be6:	4013      	ands	r3, r2
 8002be8:	d104      	bne.n	8002bf4 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	2380      	movs	r3, #128	; 0x80
 8002bee:	055b      	lsls	r3, r3, #21
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d00a      	beq.n	8002c0a <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d100      	bne.n	8002bfe <HAL_UART_IRQHandler+0x52>
 8002bfc:	e127      	b.n	8002e4e <HAL_UART_IRQHandler+0x2a2>
      {
        huart->RxISR(huart);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	0010      	movs	r0, r2
 8002c06:	4798      	blx	r3
      }
      return;
 8002c08:	e121      	b.n	8002e4e <HAL_UART_IRQHandler+0x2a2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d100      	bne.n	8002c12 <HAL_UART_IRQHandler+0x66>
 8002c10:	e0c8      	b.n	8002da4 <HAL_UART_IRQHandler+0x1f8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	4a92      	ldr	r2, [pc, #584]	; (8002e60 <HAL_UART_IRQHandler+0x2b4>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	d105      	bne.n	8002c26 <HAL_UART_IRQHandler+0x7a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	2390      	movs	r3, #144	; 0x90
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4013      	ands	r3, r2
 8002c22:	d100      	bne.n	8002c26 <HAL_UART_IRQHandler+0x7a>
 8002c24:	e0be      	b.n	8002da4 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d010      	beq.n	8002c50 <HAL_UART_IRQHandler+0xa4>
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4013      	ands	r3, r2
 8002c36:	d00b      	beq.n	8002c50 <HAL_UART_IRQHandler+0xa4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2288      	movs	r2, #136	; 0x88
 8002c44:	589b      	ldr	r3, [r3, r2]
 8002c46:	2201      	movs	r2, #1
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2188      	movs	r1, #136	; 0x88
 8002c4e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2202      	movs	r2, #2
 8002c54:	4013      	ands	r3, r2
 8002c56:	d00f      	beq.n	8002c78 <HAL_UART_IRQHandler+0xcc>
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d00b      	beq.n	8002c78 <HAL_UART_IRQHandler+0xcc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2202      	movs	r2, #2
 8002c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2288      	movs	r2, #136	; 0x88
 8002c6c:	589b      	ldr	r3, [r3, r2]
 8002c6e:	2204      	movs	r2, #4
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2188      	movs	r1, #136	; 0x88
 8002c76:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d00f      	beq.n	8002ca0 <HAL_UART_IRQHandler+0xf4>
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2201      	movs	r2, #1
 8002c84:	4013      	ands	r3, r2
 8002c86:	d00b      	beq.n	8002ca0 <HAL_UART_IRQHandler+0xf4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2288      	movs	r2, #136	; 0x88
 8002c94:	589b      	ldr	r3, [r3, r2]
 8002c96:	2202      	movs	r2, #2
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2188      	movs	r1, #136	; 0x88
 8002c9e:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	2208      	movs	r2, #8
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x124>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2220      	movs	r2, #32
 8002cac:	4013      	ands	r3, r2
 8002cae:	d103      	bne.n	8002cb8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	4a6b      	ldr	r2, [pc, #428]	; (8002e60 <HAL_UART_IRQHandler+0x2b4>)
 8002cb4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002cb6:	d00b      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x124>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2288      	movs	r2, #136	; 0x88
 8002cc4:	589b      	ldr	r3, [r3, r2]
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2188      	movs	r1, #136	; 0x88
 8002cce:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2288      	movs	r2, #136	; 0x88
 8002cd4:	589b      	ldr	r3, [r3, r2]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d100      	bne.n	8002cdc <HAL_UART_IRQHandler+0x130>
 8002cda:	e0ba      	b.n	8002e52 <HAL_UART_IRQHandler+0x2a6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d011      	beq.n	8002d08 <HAL_UART_IRQHandler+0x15c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d104      	bne.n	8002cf6 <HAL_UART_IRQHandler+0x14a>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	055b      	lsls	r3, r3, #21
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d008      	beq.n	8002d08 <HAL_UART_IRQHandler+0x15c>
      {
        if (huart->RxISR != NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d004      	beq.n	8002d08 <HAL_UART_IRQHandler+0x15c>
        {
          huart->RxISR(huart);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	0010      	movs	r0, r2
 8002d06:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2288      	movs	r2, #136	; 0x88
 8002d0c:	589b      	ldr	r3, [r3, r2]
 8002d0e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2240      	movs	r2, #64	; 0x40
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b40      	cmp	r3, #64	; 0x40
 8002d1c:	d003      	beq.n	8002d26 <HAL_UART_IRQHandler+0x17a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2208      	movs	r2, #8
 8002d22:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d24:	d033      	beq.n	8002d8e <HAL_UART_IRQHandler+0x1e2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f001 faeb 	bl	8004304 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2240      	movs	r2, #64	; 0x40
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b40      	cmp	r3, #64	; 0x40
 8002d3a:	d123      	bne.n	8002d84 <HAL_UART_IRQHandler+0x1d8>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2140      	movs	r1, #64	; 0x40
 8002d48:	438a      	bics	r2, r1
 8002d4a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d012      	beq.n	8002d7a <HAL_UART_IRQHandler+0x1ce>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d58:	4a42      	ldr	r2, [pc, #264]	; (8002e64 <HAL_UART_IRQHandler+0x2b8>)
 8002d5a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d60:	0018      	movs	r0, r3
 8002d62:	f7fe fda5 	bl	80018b0 <HAL_DMA_Abort_IT>
 8002d66:	1e03      	subs	r3, r0, #0
 8002d68:	d01a      	beq.n	8002da0 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d74:	0018      	movs	r0, r3
 8002d76:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d78:	e012      	b.n	8002da0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f000 f87b 	bl	8002e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d82:	e00d      	b.n	8002da0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	0018      	movs	r0, r3
 8002d88:	f000 f876 	bl	8002e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d8c:	e008      	b.n	8002da0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	0018      	movs	r0, r3
 8002d92:	f000 f871 	bl	8002e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2288      	movs	r2, #136	; 0x88
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002d9e:	e058      	b.n	8002e52 <HAL_UART_IRQHandler+0x2a6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da0:	46c0      	nop			; (mov r8, r8)
    return;
 8002da2:	e056      	b.n	8002e52 <HAL_UART_IRQHandler+0x2a6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002da4:	69fa      	ldr	r2, [r7, #28]
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	035b      	lsls	r3, r3, #13
 8002daa:	4013      	ands	r3, r2
 8002dac:	d00e      	beq.n	8002dcc <HAL_UART_IRQHandler+0x220>
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	03db      	lsls	r3, r3, #15
 8002db4:	4013      	ands	r3, r2
 8002db6:	d009      	beq.n	8002dcc <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2280      	movs	r2, #128	; 0x80
 8002dbe:	0352      	lsls	r2, r2, #13
 8002dc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f001 fc87 	bl	80046d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002dca:	e045      	b.n	8002e58 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d012      	beq.n	8002dfa <HAL_UART_IRQHandler+0x24e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d104      	bne.n	8002de6 <HAL_UART_IRQHandler+0x23a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	041b      	lsls	r3, r3, #16
 8002de2:	4013      	ands	r3, r2
 8002de4:	d009      	beq.n	8002dfa <HAL_UART_IRQHandler+0x24e>
  {
    if (huart->TxISR != NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d033      	beq.n	8002e56 <HAL_UART_IRQHandler+0x2aa>
    {
      huart->TxISR(huart);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	0010      	movs	r0, r2
 8002df6:	4798      	blx	r3
    }
    return;
 8002df8:	e02d      	b.n	8002e56 <HAL_UART_IRQHandler+0x2aa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	2240      	movs	r2, #64	; 0x40
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d008      	beq.n	8002e14 <HAL_UART_IRQHandler+0x268>
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	2240      	movs	r2, #64	; 0x40
 8002e06:	4013      	ands	r3, r2
 8002e08:	d004      	beq.n	8002e14 <HAL_UART_IRQHandler+0x268>
  {
    UART_EndTransmit_IT(huart);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f001 fbd5 	bl	80045bc <UART_EndTransmit_IT>
    return;
 8002e12:	e021      	b.n	8002e58 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	041b      	lsls	r3, r3, #16
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d009      	beq.n	8002e32 <HAL_UART_IRQHandler+0x286>
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	05db      	lsls	r3, r3, #23
 8002e24:	4013      	ands	r3, r2
 8002e26:	d004      	beq.n	8002e32 <HAL_UART_IRQHandler+0x286>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f001 fc64 	bl	80046f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e30:	e012      	b.n	8002e58 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002e32:	69fa      	ldr	r2, [r7, #28]
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	045b      	lsls	r3, r3, #17
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d00d      	beq.n	8002e58 <HAL_UART_IRQHandler+0x2ac>
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	da0a      	bge.n	8002e58 <HAL_UART_IRQHandler+0x2ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	0018      	movs	r0, r3
 8002e46:	f001 fc4f 	bl	80046e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	e004      	b.n	8002e58 <HAL_UART_IRQHandler+0x2ac>
      return;
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	e002      	b.n	8002e58 <HAL_UART_IRQHandler+0x2ac>
    return;
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	e000      	b.n	8002e58 <HAL_UART_IRQHandler+0x2ac>
    return;
 8002e56:	46c0      	nop			; (mov r8, r8)
  }
}
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b008      	add	sp, #32
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	10000001 	.word	0x10000001
 8002e64:	0800434d 	.word	0x0800434d

08002e68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e70:	46c0      	nop			; (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b002      	add	sp, #8
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b002      	add	sp, #8
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e8a:	b0a1      	sub	sp, #132	; 0x84
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e94:	231b      	movs	r3, #27
 8002e96:	2258      	movs	r2, #88	; 0x58
 8002e98:	18ba      	adds	r2, r7, r2
 8002e9a:	18d2      	adds	r2, r2, r3
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	431a      	orrs	r2, r3
 8002eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpreg |= (uint32_t)huart->FifoMode;
 8002ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ebe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ec0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	67fb      	str	r3, [r7, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4bba      	ldr	r3, [pc, #744]	; (80031b8 <UART_SetConfig+0x330>)
 8002ece:	401a      	ands	r2, r3
 8002ed0:	0011      	movs	r1, r2
 8002ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	4bb6      	ldr	r3, [pc, #728]	; (80031bc <UART_SetConfig+0x334>)
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	0010      	movs	r0, r2
 8002ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eea:	68d9      	ldr	r1, [r3, #12]
 8002eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	430b      	orrs	r3, r1
 8002ef4:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4baf      	ldr	r3, [pc, #700]	; (80031c0 <UART_SetConfig+0x338>)
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d004      	beq.n	8002f10 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f08:	6a1a      	ldr	r2, [r3, #32]
 8002f0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	4bab      	ldr	r3, [pc, #684]	; (80031c4 <UART_SetConfig+0x33c>)
 8002f18:	401a      	ands	r2, r3
 8002f1a:	0011      	movs	r1, r2
 8002f1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f22:	430b      	orrs	r3, r1
 8002f24:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2c:	230f      	movs	r3, #15
 8002f2e:	439a      	bics	r2, r3
 8002f30:	0010      	movs	r0, r2
 8002f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4ba0      	ldr	r3, [pc, #640]	; (80031c8 <UART_SetConfig+0x340>)
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d12f      	bne.n	8002faa <UART_SetConfig+0x122>
 8002f4a:	4ba0      	ldr	r3, [pc, #640]	; (80031cc <UART_SetConfig+0x344>)
 8002f4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f4e:	2303      	movs	r3, #3
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d013      	beq.n	8002f7e <UART_SetConfig+0xf6>
 8002f56:	d304      	bcc.n	8002f62 <UART_SetConfig+0xda>
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d009      	beq.n	8002f70 <UART_SetConfig+0xe8>
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d015      	beq.n	8002f8c <UART_SetConfig+0x104>
 8002f60:	e01b      	b.n	8002f9a <UART_SetConfig+0x112>
 8002f62:	2323      	movs	r3, #35	; 0x23
 8002f64:	2258      	movs	r2, #88	; 0x58
 8002f66:	18ba      	adds	r2, r7, r2
 8002f68:	18d2      	adds	r2, r2, r3
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	7013      	strb	r3, [r2, #0]
 8002f6e:	e0b4      	b.n	80030da <UART_SetConfig+0x252>
 8002f70:	2323      	movs	r3, #35	; 0x23
 8002f72:	2258      	movs	r2, #88	; 0x58
 8002f74:	18ba      	adds	r2, r7, r2
 8002f76:	18d2      	adds	r2, r2, r3
 8002f78:	2302      	movs	r3, #2
 8002f7a:	7013      	strb	r3, [r2, #0]
 8002f7c:	e0ad      	b.n	80030da <UART_SetConfig+0x252>
 8002f7e:	2323      	movs	r3, #35	; 0x23
 8002f80:	2258      	movs	r2, #88	; 0x58
 8002f82:	18ba      	adds	r2, r7, r2
 8002f84:	18d2      	adds	r2, r2, r3
 8002f86:	2304      	movs	r3, #4
 8002f88:	7013      	strb	r3, [r2, #0]
 8002f8a:	e0a6      	b.n	80030da <UART_SetConfig+0x252>
 8002f8c:	2323      	movs	r3, #35	; 0x23
 8002f8e:	2258      	movs	r2, #88	; 0x58
 8002f90:	18ba      	adds	r2, r7, r2
 8002f92:	18d2      	adds	r2, r2, r3
 8002f94:	2308      	movs	r3, #8
 8002f96:	7013      	strb	r3, [r2, #0]
 8002f98:	e09f      	b.n	80030da <UART_SetConfig+0x252>
 8002f9a:	2323      	movs	r3, #35	; 0x23
 8002f9c:	2258      	movs	r2, #88	; 0x58
 8002f9e:	18ba      	adds	r2, r7, r2
 8002fa0:	18d2      	adds	r2, r2, r3
 8002fa2:	2310      	movs	r3, #16
 8002fa4:	7013      	strb	r3, [r2, #0]
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	e097      	b.n	80030da <UART_SetConfig+0x252>
 8002faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	4b88      	ldr	r3, [pc, #544]	; (80031d0 <UART_SetConfig+0x348>)
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d132      	bne.n	800301a <UART_SetConfig+0x192>
 8002fb4:	4b85      	ldr	r3, [pc, #532]	; (80031cc <UART_SetConfig+0x344>)
 8002fb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fb8:	230c      	movs	r3, #12
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d016      	beq.n	8002fee <UART_SetConfig+0x166>
 8002fc0:	d802      	bhi.n	8002fc8 <UART_SetConfig+0x140>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <UART_SetConfig+0x14a>
 8002fc6:	e020      	b.n	800300a <UART_SetConfig+0x182>
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d009      	beq.n	8002fe0 <UART_SetConfig+0x158>
 8002fcc:	2b0c      	cmp	r3, #12
 8002fce:	d015      	beq.n	8002ffc <UART_SetConfig+0x174>
 8002fd0:	e01b      	b.n	800300a <UART_SetConfig+0x182>
 8002fd2:	2323      	movs	r3, #35	; 0x23
 8002fd4:	2258      	movs	r2, #88	; 0x58
 8002fd6:	18ba      	adds	r2, r7, r2
 8002fd8:	18d2      	adds	r2, r2, r3
 8002fda:	2300      	movs	r3, #0
 8002fdc:	7013      	strb	r3, [r2, #0]
 8002fde:	e07c      	b.n	80030da <UART_SetConfig+0x252>
 8002fe0:	2323      	movs	r3, #35	; 0x23
 8002fe2:	2258      	movs	r2, #88	; 0x58
 8002fe4:	18ba      	adds	r2, r7, r2
 8002fe6:	18d2      	adds	r2, r2, r3
 8002fe8:	2302      	movs	r3, #2
 8002fea:	7013      	strb	r3, [r2, #0]
 8002fec:	e075      	b.n	80030da <UART_SetConfig+0x252>
 8002fee:	2323      	movs	r3, #35	; 0x23
 8002ff0:	2258      	movs	r2, #88	; 0x58
 8002ff2:	18ba      	adds	r2, r7, r2
 8002ff4:	18d2      	adds	r2, r2, r3
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	7013      	strb	r3, [r2, #0]
 8002ffa:	e06e      	b.n	80030da <UART_SetConfig+0x252>
 8002ffc:	2323      	movs	r3, #35	; 0x23
 8002ffe:	2258      	movs	r2, #88	; 0x58
 8003000:	18ba      	adds	r2, r7, r2
 8003002:	18d2      	adds	r2, r2, r3
 8003004:	2308      	movs	r3, #8
 8003006:	7013      	strb	r3, [r2, #0]
 8003008:	e067      	b.n	80030da <UART_SetConfig+0x252>
 800300a:	2323      	movs	r3, #35	; 0x23
 800300c:	2258      	movs	r2, #88	; 0x58
 800300e:	18ba      	adds	r2, r7, r2
 8003010:	18d2      	adds	r2, r2, r3
 8003012:	2310      	movs	r3, #16
 8003014:	7013      	strb	r3, [r2, #0]
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	e05f      	b.n	80030da <UART_SetConfig+0x252>
 800301a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	4b6d      	ldr	r3, [pc, #436]	; (80031d4 <UART_SetConfig+0x34c>)
 8003020:	429a      	cmp	r2, r3
 8003022:	d106      	bne.n	8003032 <UART_SetConfig+0x1aa>
 8003024:	2323      	movs	r3, #35	; 0x23
 8003026:	2258      	movs	r2, #88	; 0x58
 8003028:	18ba      	adds	r2, r7, r2
 800302a:	18d2      	adds	r2, r2, r3
 800302c:	2300      	movs	r3, #0
 800302e:	7013      	strb	r3, [r2, #0]
 8003030:	e053      	b.n	80030da <UART_SetConfig+0x252>
 8003032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4b68      	ldr	r3, [pc, #416]	; (80031d8 <UART_SetConfig+0x350>)
 8003038:	429a      	cmp	r2, r3
 800303a:	d106      	bne.n	800304a <UART_SetConfig+0x1c2>
 800303c:	2323      	movs	r3, #35	; 0x23
 800303e:	2258      	movs	r2, #88	; 0x58
 8003040:	18ba      	adds	r2, r7, r2
 8003042:	18d2      	adds	r2, r2, r3
 8003044:	2300      	movs	r3, #0
 8003046:	7013      	strb	r3, [r2, #0]
 8003048:	e047      	b.n	80030da <UART_SetConfig+0x252>
 800304a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	4b5c      	ldr	r3, [pc, #368]	; (80031c0 <UART_SetConfig+0x338>)
 8003050:	429a      	cmp	r2, r3
 8003052:	d13c      	bne.n	80030ce <UART_SetConfig+0x246>
 8003054:	4b5d      	ldr	r3, [pc, #372]	; (80031cc <UART_SetConfig+0x344>)
 8003056:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003058:	23c0      	movs	r3, #192	; 0xc0
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	401a      	ands	r2, r3
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	429a      	cmp	r2, r3
 8003064:	d01d      	beq.n	80030a2 <UART_SetConfig+0x21a>
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	429a      	cmp	r2, r3
 800306c:	d802      	bhi.n	8003074 <UART_SetConfig+0x1ec>
 800306e:	2a00      	cmp	r2, #0
 8003070:	d009      	beq.n	8003086 <UART_SetConfig+0x1fe>
 8003072:	e024      	b.n	80030be <UART_SetConfig+0x236>
 8003074:	2380      	movs	r3, #128	; 0x80
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	429a      	cmp	r2, r3
 800307a:	d00b      	beq.n	8003094 <UART_SetConfig+0x20c>
 800307c:	23c0      	movs	r3, #192	; 0xc0
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	429a      	cmp	r2, r3
 8003082:	d015      	beq.n	80030b0 <UART_SetConfig+0x228>
 8003084:	e01b      	b.n	80030be <UART_SetConfig+0x236>
 8003086:	2323      	movs	r3, #35	; 0x23
 8003088:	2258      	movs	r2, #88	; 0x58
 800308a:	18ba      	adds	r2, r7, r2
 800308c:	18d2      	adds	r2, r2, r3
 800308e:	2300      	movs	r3, #0
 8003090:	7013      	strb	r3, [r2, #0]
 8003092:	e022      	b.n	80030da <UART_SetConfig+0x252>
 8003094:	2323      	movs	r3, #35	; 0x23
 8003096:	2258      	movs	r2, #88	; 0x58
 8003098:	18ba      	adds	r2, r7, r2
 800309a:	18d2      	adds	r2, r2, r3
 800309c:	2302      	movs	r3, #2
 800309e:	7013      	strb	r3, [r2, #0]
 80030a0:	e01b      	b.n	80030da <UART_SetConfig+0x252>
 80030a2:	2323      	movs	r3, #35	; 0x23
 80030a4:	2258      	movs	r2, #88	; 0x58
 80030a6:	18ba      	adds	r2, r7, r2
 80030a8:	18d2      	adds	r2, r2, r3
 80030aa:	2304      	movs	r3, #4
 80030ac:	7013      	strb	r3, [r2, #0]
 80030ae:	e014      	b.n	80030da <UART_SetConfig+0x252>
 80030b0:	2323      	movs	r3, #35	; 0x23
 80030b2:	2258      	movs	r2, #88	; 0x58
 80030b4:	18ba      	adds	r2, r7, r2
 80030b6:	18d2      	adds	r2, r2, r3
 80030b8:	2308      	movs	r3, #8
 80030ba:	7013      	strb	r3, [r2, #0]
 80030bc:	e00d      	b.n	80030da <UART_SetConfig+0x252>
 80030be:	2323      	movs	r3, #35	; 0x23
 80030c0:	2258      	movs	r2, #88	; 0x58
 80030c2:	18ba      	adds	r2, r7, r2
 80030c4:	18d2      	adds	r2, r2, r3
 80030c6:	2310      	movs	r3, #16
 80030c8:	7013      	strb	r3, [r2, #0]
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	e005      	b.n	80030da <UART_SetConfig+0x252>
 80030ce:	2323      	movs	r3, #35	; 0x23
 80030d0:	2258      	movs	r2, #88	; 0x58
 80030d2:	18ba      	adds	r2, r7, r2
 80030d4:	18d2      	adds	r2, r2, r3
 80030d6:	2310      	movs	r3, #16
 80030d8:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4b38      	ldr	r3, [pc, #224]	; (80031c0 <UART_SetConfig+0x338>)
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <UART_SetConfig+0x260>
 80030e4:	f000 fbd0 	bl	8003888 <UART_SetConfig+0xa00>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030e8:	2323      	movs	r3, #35	; 0x23
 80030ea:	2258      	movs	r2, #88	; 0x58
 80030ec:	4694      	mov	ip, r2
 80030ee:	44bc      	add	ip, r7
 80030f0:	4463      	add	r3, ip
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d100      	bne.n	80030fa <UART_SetConfig+0x272>
 80030f8:	e070      	b.n	80031dc <UART_SetConfig+0x354>
 80030fa:	dc02      	bgt.n	8003102 <UART_SetConfig+0x27a>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d007      	beq.n	8003110 <UART_SetConfig+0x288>
 8003100:	e15f      	b.n	80033c2 <UART_SetConfig+0x53a>
 8003102:	2b04      	cmp	r3, #4
 8003104:	d100      	bne.n	8003108 <UART_SetConfig+0x280>
 8003106:	e0b4      	b.n	8003272 <UART_SetConfig+0x3ea>
 8003108:	2b08      	cmp	r3, #8
 800310a:	d100      	bne.n	800310e <UART_SetConfig+0x286>
 800310c:	e105      	b.n	800331a <UART_SetConfig+0x492>
 800310e:	e158      	b.n	80033c2 <UART_SetConfig+0x53a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003110:	f7ff fae4 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8003114:	0002      	movs	r2, r0
 8003116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	2b00      	cmp	r3, #0
 800311c:	d044      	beq.n	80031a8 <UART_SetConfig+0x320>
 800311e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	2b01      	cmp	r3, #1
 8003124:	d03e      	beq.n	80031a4 <UART_SetConfig+0x31c>
 8003126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	2b02      	cmp	r3, #2
 800312c:	d038      	beq.n	80031a0 <UART_SetConfig+0x318>
 800312e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	2b03      	cmp	r3, #3
 8003134:	d032      	beq.n	800319c <UART_SetConfig+0x314>
 8003136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	2b04      	cmp	r3, #4
 800313c:	d02c      	beq.n	8003198 <UART_SetConfig+0x310>
 800313e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	2b05      	cmp	r3, #5
 8003144:	d026      	beq.n	8003194 <UART_SetConfig+0x30c>
 8003146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	2b06      	cmp	r3, #6
 800314c:	d020      	beq.n	8003190 <UART_SetConfig+0x308>
 800314e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	2b07      	cmp	r3, #7
 8003154:	d01a      	beq.n	800318c <UART_SetConfig+0x304>
 8003156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	2b08      	cmp	r3, #8
 800315c:	d014      	beq.n	8003188 <UART_SetConfig+0x300>
 800315e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	2b09      	cmp	r3, #9
 8003164:	d00e      	beq.n	8003184 <UART_SetConfig+0x2fc>
 8003166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	2b0a      	cmp	r3, #10
 800316c:	d008      	beq.n	8003180 <UART_SetConfig+0x2f8>
 800316e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	2b0b      	cmp	r3, #11
 8003174:	d102      	bne.n	800317c <UART_SetConfig+0x2f4>
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	e016      	b.n	80031aa <UART_SetConfig+0x322>
 800317c:	2301      	movs	r3, #1
 800317e:	e014      	b.n	80031aa <UART_SetConfig+0x322>
 8003180:	2380      	movs	r3, #128	; 0x80
 8003182:	e012      	b.n	80031aa <UART_SetConfig+0x322>
 8003184:	2340      	movs	r3, #64	; 0x40
 8003186:	e010      	b.n	80031aa <UART_SetConfig+0x322>
 8003188:	2320      	movs	r3, #32
 800318a:	e00e      	b.n	80031aa <UART_SetConfig+0x322>
 800318c:	2310      	movs	r3, #16
 800318e:	e00c      	b.n	80031aa <UART_SetConfig+0x322>
 8003190:	230c      	movs	r3, #12
 8003192:	e00a      	b.n	80031aa <UART_SetConfig+0x322>
 8003194:	230a      	movs	r3, #10
 8003196:	e008      	b.n	80031aa <UART_SetConfig+0x322>
 8003198:	2308      	movs	r3, #8
 800319a:	e006      	b.n	80031aa <UART_SetConfig+0x322>
 800319c:	2306      	movs	r3, #6
 800319e:	e004      	b.n	80031aa <UART_SetConfig+0x322>
 80031a0:	2304      	movs	r3, #4
 80031a2:	e002      	b.n	80031aa <UART_SetConfig+0x322>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e000      	b.n	80031aa <UART_SetConfig+0x322>
 80031a8:	2301      	movs	r3, #1
 80031aa:	0019      	movs	r1, r3
 80031ac:	0010      	movs	r0, r2
 80031ae:	f7fc ffb1 	bl	8000114 <__udivsi3>
 80031b2:	0003      	movs	r3, r0
 80031b4:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80031b6:	e10b      	b.n	80033d0 <UART_SetConfig+0x548>
 80031b8:	cfff69f3 	.word	0xcfff69f3
 80031bc:	ffffcfff 	.word	0xffffcfff
 80031c0:	40008000 	.word	0x40008000
 80031c4:	11fff4ff 	.word	0x11fff4ff
 80031c8:	40013800 	.word	0x40013800
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40004400 	.word	0x40004400
 80031d4:	40004800 	.word	0x40004800
 80031d8:	40004c00 	.word	0x40004c00
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80031dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d043      	beq.n	800326c <UART_SetConfig+0x3e4>
 80031e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d03d      	beq.n	8003268 <UART_SetConfig+0x3e0>
 80031ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d037      	beq.n	8003264 <UART_SetConfig+0x3dc>
 80031f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d031      	beq.n	8003260 <UART_SetConfig+0x3d8>
 80031fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	2b04      	cmp	r3, #4
 8003202:	d02b      	beq.n	800325c <UART_SetConfig+0x3d4>
 8003204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	2b05      	cmp	r3, #5
 800320a:	d025      	beq.n	8003258 <UART_SetConfig+0x3d0>
 800320c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	2b06      	cmp	r3, #6
 8003212:	d01f      	beq.n	8003254 <UART_SetConfig+0x3cc>
 8003214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	2b07      	cmp	r3, #7
 800321a:	d019      	beq.n	8003250 <UART_SetConfig+0x3c8>
 800321c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	2b08      	cmp	r3, #8
 8003222:	d013      	beq.n	800324c <UART_SetConfig+0x3c4>
 8003224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	2b09      	cmp	r3, #9
 800322a:	d00d      	beq.n	8003248 <UART_SetConfig+0x3c0>
 800322c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	2b0a      	cmp	r3, #10
 8003232:	d007      	beq.n	8003244 <UART_SetConfig+0x3bc>
 8003234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	2b0b      	cmp	r3, #11
 800323a:	d101      	bne.n	8003240 <UART_SetConfig+0x3b8>
 800323c:	4bab      	ldr	r3, [pc, #684]	; (80034ec <UART_SetConfig+0x664>)
 800323e:	e016      	b.n	800326e <UART_SetConfig+0x3e6>
 8003240:	4bab      	ldr	r3, [pc, #684]	; (80034f0 <UART_SetConfig+0x668>)
 8003242:	e014      	b.n	800326e <UART_SetConfig+0x3e6>
 8003244:	4bab      	ldr	r3, [pc, #684]	; (80034f4 <UART_SetConfig+0x66c>)
 8003246:	e012      	b.n	800326e <UART_SetConfig+0x3e6>
 8003248:	4bab      	ldr	r3, [pc, #684]	; (80034f8 <UART_SetConfig+0x670>)
 800324a:	e010      	b.n	800326e <UART_SetConfig+0x3e6>
 800324c:	4bab      	ldr	r3, [pc, #684]	; (80034fc <UART_SetConfig+0x674>)
 800324e:	e00e      	b.n	800326e <UART_SetConfig+0x3e6>
 8003250:	4bab      	ldr	r3, [pc, #684]	; (8003500 <UART_SetConfig+0x678>)
 8003252:	e00c      	b.n	800326e <UART_SetConfig+0x3e6>
 8003254:	4bab      	ldr	r3, [pc, #684]	; (8003504 <UART_SetConfig+0x67c>)
 8003256:	e00a      	b.n	800326e <UART_SetConfig+0x3e6>
 8003258:	4bab      	ldr	r3, [pc, #684]	; (8003508 <UART_SetConfig+0x680>)
 800325a:	e008      	b.n	800326e <UART_SetConfig+0x3e6>
 800325c:	4bab      	ldr	r3, [pc, #684]	; (800350c <UART_SetConfig+0x684>)
 800325e:	e006      	b.n	800326e <UART_SetConfig+0x3e6>
 8003260:	4bab      	ldr	r3, [pc, #684]	; (8003510 <UART_SetConfig+0x688>)
 8003262:	e004      	b.n	800326e <UART_SetConfig+0x3e6>
 8003264:	4bab      	ldr	r3, [pc, #684]	; (8003514 <UART_SetConfig+0x68c>)
 8003266:	e002      	b.n	800326e <UART_SetConfig+0x3e6>
 8003268:	4bab      	ldr	r3, [pc, #684]	; (8003518 <UART_SetConfig+0x690>)
 800326a:	e000      	b.n	800326e <UART_SetConfig+0x3e6>
 800326c:	4ba0      	ldr	r3, [pc, #640]	; (80034f0 <UART_SetConfig+0x668>)
 800326e:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003270:	e0ae      	b.n	80033d0 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003272:	f7ff f9a9 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 8003276:	0002      	movs	r2, r0
 8003278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	2b00      	cmp	r3, #0
 800327e:	d044      	beq.n	800330a <UART_SetConfig+0x482>
 8003280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	2b01      	cmp	r3, #1
 8003286:	d03e      	beq.n	8003306 <UART_SetConfig+0x47e>
 8003288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	2b02      	cmp	r3, #2
 800328e:	d038      	beq.n	8003302 <UART_SetConfig+0x47a>
 8003290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	2b03      	cmp	r3, #3
 8003296:	d032      	beq.n	80032fe <UART_SetConfig+0x476>
 8003298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	2b04      	cmp	r3, #4
 800329e:	d02c      	beq.n	80032fa <UART_SetConfig+0x472>
 80032a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	2b05      	cmp	r3, #5
 80032a6:	d026      	beq.n	80032f6 <UART_SetConfig+0x46e>
 80032a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	2b06      	cmp	r3, #6
 80032ae:	d020      	beq.n	80032f2 <UART_SetConfig+0x46a>
 80032b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	2b07      	cmp	r3, #7
 80032b6:	d01a      	beq.n	80032ee <UART_SetConfig+0x466>
 80032b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d014      	beq.n	80032ea <UART_SetConfig+0x462>
 80032c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	2b09      	cmp	r3, #9
 80032c6:	d00e      	beq.n	80032e6 <UART_SetConfig+0x45e>
 80032c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	2b0a      	cmp	r3, #10
 80032ce:	d008      	beq.n	80032e2 <UART_SetConfig+0x45a>
 80032d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	2b0b      	cmp	r3, #11
 80032d6:	d102      	bne.n	80032de <UART_SetConfig+0x456>
 80032d8:	2380      	movs	r3, #128	; 0x80
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	e016      	b.n	800330c <UART_SetConfig+0x484>
 80032de:	2301      	movs	r3, #1
 80032e0:	e014      	b.n	800330c <UART_SetConfig+0x484>
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	e012      	b.n	800330c <UART_SetConfig+0x484>
 80032e6:	2340      	movs	r3, #64	; 0x40
 80032e8:	e010      	b.n	800330c <UART_SetConfig+0x484>
 80032ea:	2320      	movs	r3, #32
 80032ec:	e00e      	b.n	800330c <UART_SetConfig+0x484>
 80032ee:	2310      	movs	r3, #16
 80032f0:	e00c      	b.n	800330c <UART_SetConfig+0x484>
 80032f2:	230c      	movs	r3, #12
 80032f4:	e00a      	b.n	800330c <UART_SetConfig+0x484>
 80032f6:	230a      	movs	r3, #10
 80032f8:	e008      	b.n	800330c <UART_SetConfig+0x484>
 80032fa:	2308      	movs	r3, #8
 80032fc:	e006      	b.n	800330c <UART_SetConfig+0x484>
 80032fe:	2306      	movs	r3, #6
 8003300:	e004      	b.n	800330c <UART_SetConfig+0x484>
 8003302:	2304      	movs	r3, #4
 8003304:	e002      	b.n	800330c <UART_SetConfig+0x484>
 8003306:	2302      	movs	r3, #2
 8003308:	e000      	b.n	800330c <UART_SetConfig+0x484>
 800330a:	2301      	movs	r3, #1
 800330c:	0019      	movs	r1, r3
 800330e:	0010      	movs	r0, r2
 8003310:	f7fc ff00 	bl	8000114 <__udivsi3>
 8003314:	0003      	movs	r3, r0
 8003316:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003318:	e05a      	b.n	80033d0 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800331a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	2b00      	cmp	r3, #0
 8003320:	d04b      	beq.n	80033ba <UART_SetConfig+0x532>
 8003322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2b01      	cmp	r3, #1
 8003328:	d044      	beq.n	80033b4 <UART_SetConfig+0x52c>
 800332a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	2b02      	cmp	r3, #2
 8003330:	d03d      	beq.n	80033ae <UART_SetConfig+0x526>
 8003332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	2b03      	cmp	r3, #3
 8003338:	d037      	beq.n	80033aa <UART_SetConfig+0x522>
 800333a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	2b04      	cmp	r3, #4
 8003340:	d030      	beq.n	80033a4 <UART_SetConfig+0x51c>
 8003342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	2b05      	cmp	r3, #5
 8003348:	d02a      	beq.n	80033a0 <UART_SetConfig+0x518>
 800334a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	2b06      	cmp	r3, #6
 8003350:	d024      	beq.n	800339c <UART_SetConfig+0x514>
 8003352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	2b07      	cmp	r3, #7
 8003358:	d01d      	beq.n	8003396 <UART_SetConfig+0x50e>
 800335a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	2b08      	cmp	r3, #8
 8003360:	d016      	beq.n	8003390 <UART_SetConfig+0x508>
 8003362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	2b09      	cmp	r3, #9
 8003368:	d00f      	beq.n	800338a <UART_SetConfig+0x502>
 800336a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	2b0a      	cmp	r3, #10
 8003370:	d008      	beq.n	8003384 <UART_SetConfig+0x4fc>
 8003372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	2b0b      	cmp	r3, #11
 8003378:	d101      	bne.n	800337e <UART_SetConfig+0x4f6>
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	e01f      	b.n	80033be <UART_SetConfig+0x536>
 800337e:	2380      	movs	r3, #128	; 0x80
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	e01c      	b.n	80033be <UART_SetConfig+0x536>
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	e019      	b.n	80033be <UART_SetConfig+0x536>
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	e016      	b.n	80033be <UART_SetConfig+0x536>
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	e013      	b.n	80033be <UART_SetConfig+0x536>
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	e010      	b.n	80033be <UART_SetConfig+0x536>
 800339c:	4b5f      	ldr	r3, [pc, #380]	; (800351c <UART_SetConfig+0x694>)
 800339e:	e00e      	b.n	80033be <UART_SetConfig+0x536>
 80033a0:	4b5f      	ldr	r3, [pc, #380]	; (8003520 <UART_SetConfig+0x698>)
 80033a2:	e00c      	b.n	80033be <UART_SetConfig+0x536>
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	015b      	lsls	r3, r3, #5
 80033a8:	e009      	b.n	80033be <UART_SetConfig+0x536>
 80033aa:	4b5e      	ldr	r3, [pc, #376]	; (8003524 <UART_SetConfig+0x69c>)
 80033ac:	e007      	b.n	80033be <UART_SetConfig+0x536>
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	019b      	lsls	r3, r3, #6
 80033b2:	e004      	b.n	80033be <UART_SetConfig+0x536>
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	01db      	lsls	r3, r3, #7
 80033b8:	e001      	b.n	80033be <UART_SetConfig+0x536>
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80033c0:	e006      	b.n	80033d0 <UART_SetConfig+0x548>
      default:
        ret = HAL_ERROR;
 80033c2:	231b      	movs	r3, #27
 80033c4:	2258      	movs	r2, #88	; 0x58
 80033c6:	18ba      	adds	r2, r7, r2
 80033c8:	18d2      	adds	r2, r2, r3
 80033ca:	2301      	movs	r3, #1
 80033cc:	7013      	strb	r3, [r2, #0]
        break;
 80033ce:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80033d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <UART_SetConfig+0x552>
 80033d6:	f000 fe12 	bl	8003ffe <UART_SetConfig+0x1176>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	0013      	movs	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	189a      	adds	r2, r3, r2
 80033e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d305      	bcc.n	80033f6 <UART_SetConfig+0x56e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80033ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d908      	bls.n	8003408 <UART_SetConfig+0x580>
      {
        ret = HAL_ERROR;
 80033f6:	231b      	movs	r3, #27
 80033f8:	2258      	movs	r2, #88	; 0x58
 80033fa:	4694      	mov	ip, r2
 80033fc:	44bc      	add	ip, r7
 80033fe:	4463      	add	r3, ip
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	f000 fdfb 	bl	8003ffe <UART_SetConfig+0x1176>
      }
      else
      {
        switch (clocksource)
 8003408:	2323      	movs	r3, #35	; 0x23
 800340a:	2258      	movs	r2, #88	; 0x58
 800340c:	4694      	mov	ip, r2
 800340e:	44bc      	add	ip, r7
 8003410:	4463      	add	r3, ip
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d100      	bne.n	800341a <UART_SetConfig+0x592>
 8003418:	e0ab      	b.n	8003572 <UART_SetConfig+0x6ea>
 800341a:	dc02      	bgt.n	8003422 <UART_SetConfig+0x59a>
 800341c:	2b00      	cmp	r3, #0
 800341e:	d007      	beq.n	8003430 <UART_SetConfig+0x5a8>
 8003420:	e213      	b.n	800384a <UART_SetConfig+0x9c2>
 8003422:	2b04      	cmp	r3, #4
 8003424:	d100      	bne.n	8003428 <UART_SetConfig+0x5a0>
 8003426:	e111      	b.n	800364c <UART_SetConfig+0x7c4>
 8003428:	2b08      	cmp	r3, #8
 800342a:	d100      	bne.n	800342e <UART_SetConfig+0x5a6>
 800342c:	e196      	b.n	800375c <UART_SetConfig+0x8d4>
 800342e:	e20c      	b.n	800384a <UART_SetConfig+0x9c2>
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003430:	f7ff f954 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8003434:	0003      	movs	r3, r0
 8003436:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003438:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800343a:	64bb      	str	r3, [r7, #72]	; 0x48
 800343c:	2300      	movs	r3, #0
 800343e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	2b00      	cmp	r3, #0
 8003446:	d100      	bne.n	800344a <UART_SetConfig+0x5c2>
 8003448:	e06e      	b.n	8003528 <UART_SetConfig+0x6a0>
 800344a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	2b01      	cmp	r3, #1
 8003450:	d049      	beq.n	80034e6 <UART_SetConfig+0x65e>
 8003452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	2b02      	cmp	r3, #2
 8003458:	d042      	beq.n	80034e0 <UART_SetConfig+0x658>
 800345a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	2b03      	cmp	r3, #3
 8003460:	d03b      	beq.n	80034da <UART_SetConfig+0x652>
 8003462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	2b04      	cmp	r3, #4
 8003468:	d034      	beq.n	80034d4 <UART_SetConfig+0x64c>
 800346a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	2b05      	cmp	r3, #5
 8003470:	d02d      	beq.n	80034ce <UART_SetConfig+0x646>
 8003472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2b06      	cmp	r3, #6
 8003478:	d026      	beq.n	80034c8 <UART_SetConfig+0x640>
 800347a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	2b07      	cmp	r3, #7
 8003480:	d01f      	beq.n	80034c2 <UART_SetConfig+0x63a>
 8003482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	2b08      	cmp	r3, #8
 8003488:	d018      	beq.n	80034bc <UART_SetConfig+0x634>
 800348a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	2b09      	cmp	r3, #9
 8003490:	d011      	beq.n	80034b6 <UART_SetConfig+0x62e>
 8003492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	2b0a      	cmp	r3, #10
 8003498:	d00a      	beq.n	80034b0 <UART_SetConfig+0x628>
 800349a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	2b0b      	cmp	r3, #11
 80034a0:	d103      	bne.n	80034aa <UART_SetConfig+0x622>
 80034a2:	2380      	movs	r3, #128	; 0x80
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	2400      	movs	r4, #0
 80034a8:	e040      	b.n	800352c <UART_SetConfig+0x6a4>
 80034aa:	2301      	movs	r3, #1
 80034ac:	2400      	movs	r4, #0
 80034ae:	e03d      	b.n	800352c <UART_SetConfig+0x6a4>
 80034b0:	2380      	movs	r3, #128	; 0x80
 80034b2:	2400      	movs	r4, #0
 80034b4:	e03a      	b.n	800352c <UART_SetConfig+0x6a4>
 80034b6:	2340      	movs	r3, #64	; 0x40
 80034b8:	2400      	movs	r4, #0
 80034ba:	e037      	b.n	800352c <UART_SetConfig+0x6a4>
 80034bc:	2320      	movs	r3, #32
 80034be:	2400      	movs	r4, #0
 80034c0:	e034      	b.n	800352c <UART_SetConfig+0x6a4>
 80034c2:	2310      	movs	r3, #16
 80034c4:	2400      	movs	r4, #0
 80034c6:	e031      	b.n	800352c <UART_SetConfig+0x6a4>
 80034c8:	230c      	movs	r3, #12
 80034ca:	2400      	movs	r4, #0
 80034cc:	e02e      	b.n	800352c <UART_SetConfig+0x6a4>
 80034ce:	230a      	movs	r3, #10
 80034d0:	2400      	movs	r4, #0
 80034d2:	e02b      	b.n	800352c <UART_SetConfig+0x6a4>
 80034d4:	2308      	movs	r3, #8
 80034d6:	2400      	movs	r4, #0
 80034d8:	e028      	b.n	800352c <UART_SetConfig+0x6a4>
 80034da:	2306      	movs	r3, #6
 80034dc:	2400      	movs	r4, #0
 80034de:	e025      	b.n	800352c <UART_SetConfig+0x6a4>
 80034e0:	2304      	movs	r3, #4
 80034e2:	2400      	movs	r4, #0
 80034e4:	e022      	b.n	800352c <UART_SetConfig+0x6a4>
 80034e6:	2302      	movs	r3, #2
 80034e8:	2400      	movs	r4, #0
 80034ea:	e01f      	b.n	800352c <UART_SetConfig+0x6a4>
 80034ec:	0000f424 	.word	0x0000f424
 80034f0:	00f42400 	.word	0x00f42400
 80034f4:	0001e848 	.word	0x0001e848
 80034f8:	0003d090 	.word	0x0003d090
 80034fc:	0007a120 	.word	0x0007a120
 8003500:	000f4240 	.word	0x000f4240
 8003504:	00145855 	.word	0x00145855
 8003508:	00186a00 	.word	0x00186a00
 800350c:	001e8480 	.word	0x001e8480
 8003510:	0028b0aa 	.word	0x0028b0aa
 8003514:	003d0900 	.word	0x003d0900
 8003518:	007a1200 	.word	0x007a1200
 800351c:	00000aaa 	.word	0x00000aaa
 8003520:	00000ccc 	.word	0x00000ccc
 8003524:	00001555 	.word	0x00001555
 8003528:	2301      	movs	r3, #1
 800352a:	2400      	movs	r4, #0
 800352c:	001a      	movs	r2, r3
 800352e:	0023      	movs	r3, r4
 8003530:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003532:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003534:	f7fc ff64 	bl	8000400 <__aeabi_uldivmod>
 8003538:	0003      	movs	r3, r0
 800353a:	000c      	movs	r4, r1
 800353c:	0e1a      	lsrs	r2, r3, #24
 800353e:	0226      	lsls	r6, r4, #8
 8003540:	4316      	orrs	r6, r2
 8003542:	021d      	lsls	r5, r3, #8
 8003544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	085b      	lsrs	r3, r3, #1
 800354a:	643b      	str	r3, [r7, #64]	; 0x40
 800354c:	2300      	movs	r3, #0
 800354e:	647b      	str	r3, [r7, #68]	; 0x44
 8003550:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003552:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003554:	1940      	adds	r0, r0, r5
 8003556:	4171      	adcs	r1, r6
 8003558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	63bb      	str	r3, [r7, #56]	; 0x38
 800355e:	2300      	movs	r3, #0
 8003560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003566:	f7fc ff4b 	bl	8000400 <__aeabi_uldivmod>
 800356a:	0003      	movs	r3, r0
 800356c:	000c      	movs	r4, r1
 800356e:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8003570:	e173      	b.n	800385a <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	2b00      	cmp	r3, #0
 8003578:	d04f      	beq.n	800361a <UART_SetConfig+0x792>
 800357a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	2b01      	cmp	r3, #1
 8003580:	d048      	beq.n	8003614 <UART_SetConfig+0x78c>
 8003582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	2b02      	cmp	r3, #2
 8003588:	d041      	beq.n	800360e <UART_SetConfig+0x786>
 800358a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	2b03      	cmp	r3, #3
 8003590:	d03a      	beq.n	8003608 <UART_SetConfig+0x780>
 8003592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	2b04      	cmp	r3, #4
 8003598:	d033      	beq.n	8003602 <UART_SetConfig+0x77a>
 800359a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	2b05      	cmp	r3, #5
 80035a0:	d02c      	beq.n	80035fc <UART_SetConfig+0x774>
 80035a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d025      	beq.n	80035f6 <UART_SetConfig+0x76e>
 80035aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	2b07      	cmp	r3, #7
 80035b0:	d01e      	beq.n	80035f0 <UART_SetConfig+0x768>
 80035b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d017      	beq.n	80035ea <UART_SetConfig+0x762>
 80035ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	2b09      	cmp	r3, #9
 80035c0:	d010      	beq.n	80035e4 <UART_SetConfig+0x75c>
 80035c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	2b0a      	cmp	r3, #10
 80035c8:	d009      	beq.n	80035de <UART_SetConfig+0x756>
 80035ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	2b0b      	cmp	r3, #11
 80035d0:	d102      	bne.n	80035d8 <UART_SetConfig+0x750>
 80035d2:	4bbb      	ldr	r3, [pc, #748]	; (80038c0 <UART_SetConfig+0xa38>)
 80035d4:	2400      	movs	r4, #0
 80035d6:	e022      	b.n	800361e <UART_SetConfig+0x796>
 80035d8:	4bba      	ldr	r3, [pc, #744]	; (80038c4 <UART_SetConfig+0xa3c>)
 80035da:	2400      	movs	r4, #0
 80035dc:	e01f      	b.n	800361e <UART_SetConfig+0x796>
 80035de:	4bba      	ldr	r3, [pc, #744]	; (80038c8 <UART_SetConfig+0xa40>)
 80035e0:	2400      	movs	r4, #0
 80035e2:	e01c      	b.n	800361e <UART_SetConfig+0x796>
 80035e4:	4bb9      	ldr	r3, [pc, #740]	; (80038cc <UART_SetConfig+0xa44>)
 80035e6:	2400      	movs	r4, #0
 80035e8:	e019      	b.n	800361e <UART_SetConfig+0x796>
 80035ea:	4bb9      	ldr	r3, [pc, #740]	; (80038d0 <UART_SetConfig+0xa48>)
 80035ec:	2400      	movs	r4, #0
 80035ee:	e016      	b.n	800361e <UART_SetConfig+0x796>
 80035f0:	4bb8      	ldr	r3, [pc, #736]	; (80038d4 <UART_SetConfig+0xa4c>)
 80035f2:	2400      	movs	r4, #0
 80035f4:	e013      	b.n	800361e <UART_SetConfig+0x796>
 80035f6:	4bb8      	ldr	r3, [pc, #736]	; (80038d8 <UART_SetConfig+0xa50>)
 80035f8:	2400      	movs	r4, #0
 80035fa:	e010      	b.n	800361e <UART_SetConfig+0x796>
 80035fc:	4bb7      	ldr	r3, [pc, #732]	; (80038dc <UART_SetConfig+0xa54>)
 80035fe:	2400      	movs	r4, #0
 8003600:	e00d      	b.n	800361e <UART_SetConfig+0x796>
 8003602:	4bb7      	ldr	r3, [pc, #732]	; (80038e0 <UART_SetConfig+0xa58>)
 8003604:	2400      	movs	r4, #0
 8003606:	e00a      	b.n	800361e <UART_SetConfig+0x796>
 8003608:	4bb6      	ldr	r3, [pc, #728]	; (80038e4 <UART_SetConfig+0xa5c>)
 800360a:	2400      	movs	r4, #0
 800360c:	e007      	b.n	800361e <UART_SetConfig+0x796>
 800360e:	4bb6      	ldr	r3, [pc, #728]	; (80038e8 <UART_SetConfig+0xa60>)
 8003610:	2400      	movs	r4, #0
 8003612:	e004      	b.n	800361e <UART_SetConfig+0x796>
 8003614:	4bb5      	ldr	r3, [pc, #724]	; (80038ec <UART_SetConfig+0xa64>)
 8003616:	2400      	movs	r4, #0
 8003618:	e001      	b.n	800361e <UART_SetConfig+0x796>
 800361a:	4baa      	ldr	r3, [pc, #680]	; (80038c4 <UART_SetConfig+0xa3c>)
 800361c:	2400      	movs	r4, #0
 800361e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003620:	6852      	ldr	r2, [r2, #4]
 8003622:	0852      	lsrs	r2, r2, #1
 8003624:	633a      	str	r2, [r7, #48]	; 0x30
 8003626:	2200      	movs	r2, #0
 8003628:	637a      	str	r2, [r7, #52]	; 0x34
 800362a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800362c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800362e:	18c0      	adds	r0, r0, r3
 8003630:	4161      	adcs	r1, r4
 8003632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
 8003638:	2300      	movs	r3, #0
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800363c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	f7fc fede 	bl	8000400 <__aeabi_uldivmod>
 8003644:	0003      	movs	r3, r0
 8003646:	000c      	movs	r4, r1
 8003648:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 800364a:	e106      	b.n	800385a <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800364c:	f7fe ffbc 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 8003650:	0003      	movs	r3, r0
 8003652:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003656:	623b      	str	r3, [r7, #32]
 8003658:	2300      	movs	r3, #0
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
 800365c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	2b00      	cmp	r3, #0
 8003662:	d050      	beq.n	8003706 <UART_SetConfig+0x87e>
 8003664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	2b01      	cmp	r3, #1
 800366a:	d049      	beq.n	8003700 <UART_SetConfig+0x878>
 800366c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	2b02      	cmp	r3, #2
 8003672:	d042      	beq.n	80036fa <UART_SetConfig+0x872>
 8003674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	2b03      	cmp	r3, #3
 800367a:	d03b      	beq.n	80036f4 <UART_SetConfig+0x86c>
 800367c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	2b04      	cmp	r3, #4
 8003682:	d034      	beq.n	80036ee <UART_SetConfig+0x866>
 8003684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	2b05      	cmp	r3, #5
 800368a:	d02d      	beq.n	80036e8 <UART_SetConfig+0x860>
 800368c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	2b06      	cmp	r3, #6
 8003692:	d026      	beq.n	80036e2 <UART_SetConfig+0x85a>
 8003694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	2b07      	cmp	r3, #7
 800369a:	d01f      	beq.n	80036dc <UART_SetConfig+0x854>
 800369c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d018      	beq.n	80036d6 <UART_SetConfig+0x84e>
 80036a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	2b09      	cmp	r3, #9
 80036aa:	d011      	beq.n	80036d0 <UART_SetConfig+0x848>
 80036ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	2b0a      	cmp	r3, #10
 80036b2:	d00a      	beq.n	80036ca <UART_SetConfig+0x842>
 80036b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	2b0b      	cmp	r3, #11
 80036ba:	d103      	bne.n	80036c4 <UART_SetConfig+0x83c>
 80036bc:	2380      	movs	r3, #128	; 0x80
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	2400      	movs	r4, #0
 80036c2:	e022      	b.n	800370a <UART_SetConfig+0x882>
 80036c4:	2301      	movs	r3, #1
 80036c6:	2400      	movs	r4, #0
 80036c8:	e01f      	b.n	800370a <UART_SetConfig+0x882>
 80036ca:	2380      	movs	r3, #128	; 0x80
 80036cc:	2400      	movs	r4, #0
 80036ce:	e01c      	b.n	800370a <UART_SetConfig+0x882>
 80036d0:	2340      	movs	r3, #64	; 0x40
 80036d2:	2400      	movs	r4, #0
 80036d4:	e019      	b.n	800370a <UART_SetConfig+0x882>
 80036d6:	2320      	movs	r3, #32
 80036d8:	2400      	movs	r4, #0
 80036da:	e016      	b.n	800370a <UART_SetConfig+0x882>
 80036dc:	2310      	movs	r3, #16
 80036de:	2400      	movs	r4, #0
 80036e0:	e013      	b.n	800370a <UART_SetConfig+0x882>
 80036e2:	230c      	movs	r3, #12
 80036e4:	2400      	movs	r4, #0
 80036e6:	e010      	b.n	800370a <UART_SetConfig+0x882>
 80036e8:	230a      	movs	r3, #10
 80036ea:	2400      	movs	r4, #0
 80036ec:	e00d      	b.n	800370a <UART_SetConfig+0x882>
 80036ee:	2308      	movs	r3, #8
 80036f0:	2400      	movs	r4, #0
 80036f2:	e00a      	b.n	800370a <UART_SetConfig+0x882>
 80036f4:	2306      	movs	r3, #6
 80036f6:	2400      	movs	r4, #0
 80036f8:	e007      	b.n	800370a <UART_SetConfig+0x882>
 80036fa:	2304      	movs	r3, #4
 80036fc:	2400      	movs	r4, #0
 80036fe:	e004      	b.n	800370a <UART_SetConfig+0x882>
 8003700:	2302      	movs	r3, #2
 8003702:	2400      	movs	r4, #0
 8003704:	e001      	b.n	800370a <UART_SetConfig+0x882>
 8003706:	2301      	movs	r3, #1
 8003708:	2400      	movs	r4, #0
 800370a:	001a      	movs	r2, r3
 800370c:	0023      	movs	r3, r4
 800370e:	6a38      	ldr	r0, [r7, #32]
 8003710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003712:	f7fc fe75 	bl	8000400 <__aeabi_uldivmod>
 8003716:	0003      	movs	r3, r0
 8003718:	000c      	movs	r4, r1
 800371a:	0e1a      	lsrs	r2, r3, #24
 800371c:	0221      	lsls	r1, r4, #8
 800371e:	6579      	str	r1, [r7, #84]	; 0x54
 8003720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003722:	4311      	orrs	r1, r2
 8003724:	6579      	str	r1, [r7, #84]	; 0x54
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	653b      	str	r3, [r7, #80]	; 0x50
 800372a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	085b      	lsrs	r3, r3, #1
 8003730:	61bb      	str	r3, [r7, #24]
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003738:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	69fc      	ldr	r4, [r7, #28]
 800373e:	18c0      	adds	r0, r0, r3
 8003740:	4161      	adcs	r1, r4
 8003742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f7fc fe56 	bl	8000400 <__aeabi_uldivmod>
 8003754:	0003      	movs	r3, r0
 8003756:	000c      	movs	r4, r1
 8003758:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 800375a:	e07e      	b.n	800385a <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800375c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	2b00      	cmp	r3, #0
 8003762:	d058      	beq.n	8003816 <UART_SetConfig+0x98e>
 8003764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	2b01      	cmp	r3, #1
 800376a:	d050      	beq.n	800380e <UART_SetConfig+0x986>
 800376c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	2b02      	cmp	r3, #2
 8003772:	d048      	beq.n	8003806 <UART_SetConfig+0x97e>
 8003774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	2b03      	cmp	r3, #3
 800377a:	d041      	beq.n	8003800 <UART_SetConfig+0x978>
 800377c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	2b04      	cmp	r3, #4
 8003782:	d039      	beq.n	80037f8 <UART_SetConfig+0x970>
 8003784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	2b05      	cmp	r3, #5
 800378a:	d032      	beq.n	80037f2 <UART_SetConfig+0x96a>
 800378c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	2b06      	cmp	r3, #6
 8003792:	d02b      	beq.n	80037ec <UART_SetConfig+0x964>
 8003794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	2b07      	cmp	r3, #7
 800379a:	d023      	beq.n	80037e4 <UART_SetConfig+0x95c>
 800379c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d01b      	beq.n	80037dc <UART_SetConfig+0x954>
 80037a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	2b09      	cmp	r3, #9
 80037aa:	d013      	beq.n	80037d4 <UART_SetConfig+0x94c>
 80037ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	2b0a      	cmp	r3, #10
 80037b2:	d00b      	beq.n	80037cc <UART_SetConfig+0x944>
 80037b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	2b0b      	cmp	r3, #11
 80037ba:	d103      	bne.n	80037c4 <UART_SetConfig+0x93c>
 80037bc:	2380      	movs	r3, #128	; 0x80
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	2400      	movs	r4, #0
 80037c2:	e02b      	b.n	800381c <UART_SetConfig+0x994>
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	041b      	lsls	r3, r3, #16
 80037c8:	2400      	movs	r4, #0
 80037ca:	e027      	b.n	800381c <UART_SetConfig+0x994>
 80037cc:	2380      	movs	r3, #128	; 0x80
 80037ce:	025b      	lsls	r3, r3, #9
 80037d0:	2400      	movs	r4, #0
 80037d2:	e023      	b.n	800381c <UART_SetConfig+0x994>
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	029b      	lsls	r3, r3, #10
 80037d8:	2400      	movs	r4, #0
 80037da:	e01f      	b.n	800381c <UART_SetConfig+0x994>
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	02db      	lsls	r3, r3, #11
 80037e0:	2400      	movs	r4, #0
 80037e2:	e01b      	b.n	800381c <UART_SetConfig+0x994>
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	031b      	lsls	r3, r3, #12
 80037e8:	2400      	movs	r4, #0
 80037ea:	e017      	b.n	800381c <UART_SetConfig+0x994>
 80037ec:	4b40      	ldr	r3, [pc, #256]	; (80038f0 <UART_SetConfig+0xa68>)
 80037ee:	2400      	movs	r4, #0
 80037f0:	e014      	b.n	800381c <UART_SetConfig+0x994>
 80037f2:	4b40      	ldr	r3, [pc, #256]	; (80038f4 <UART_SetConfig+0xa6c>)
 80037f4:	2400      	movs	r4, #0
 80037f6:	e011      	b.n	800381c <UART_SetConfig+0x994>
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	035b      	lsls	r3, r3, #13
 80037fc:	2400      	movs	r4, #0
 80037fe:	e00d      	b.n	800381c <UART_SetConfig+0x994>
 8003800:	4b3d      	ldr	r3, [pc, #244]	; (80038f8 <UART_SetConfig+0xa70>)
 8003802:	2400      	movs	r4, #0
 8003804:	e00a      	b.n	800381c <UART_SetConfig+0x994>
 8003806:	2380      	movs	r3, #128	; 0x80
 8003808:	039b      	lsls	r3, r3, #14
 800380a:	2400      	movs	r4, #0
 800380c:	e006      	b.n	800381c <UART_SetConfig+0x994>
 800380e:	2380      	movs	r3, #128	; 0x80
 8003810:	03db      	lsls	r3, r3, #15
 8003812:	2400      	movs	r4, #0
 8003814:	e002      	b.n	800381c <UART_SetConfig+0x994>
 8003816:	2380      	movs	r3, #128	; 0x80
 8003818:	041b      	lsls	r3, r3, #16
 800381a:	2400      	movs	r4, #0
 800381c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800381e:	6852      	ldr	r2, [r2, #4]
 8003820:	0852      	lsrs	r2, r2, #1
 8003822:	60ba      	str	r2, [r7, #8]
 8003824:	2200      	movs	r2, #0
 8003826:	60fa      	str	r2, [r7, #12]
 8003828:	68b8      	ldr	r0, [r7, #8]
 800382a:	68f9      	ldr	r1, [r7, #12]
 800382c:	18c0      	adds	r0, r0, r3
 800382e:	4161      	adcs	r1, r4
 8003830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	603b      	str	r3, [r7, #0]
 8003836:	2300      	movs	r3, #0
 8003838:	607b      	str	r3, [r7, #4]
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f7fc fddf 	bl	8000400 <__aeabi_uldivmod>
 8003842:	0003      	movs	r3, r0
 8003844:	000c      	movs	r4, r1
 8003846:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8003848:	e007      	b.n	800385a <UART_SetConfig+0x9d2>
          default:
            ret = HAL_ERROR;
 800384a:	231b      	movs	r3, #27
 800384c:	2258      	movs	r2, #88	; 0x58
 800384e:	4694      	mov	ip, r2
 8003850:	44bc      	add	ip, r7
 8003852:	4463      	add	r3, ip
 8003854:	2201      	movs	r2, #1
 8003856:	701a      	strb	r2, [r3, #0]
            break;
 8003858:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800385a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800385c:	4a27      	ldr	r2, [pc, #156]	; (80038fc <UART_SetConfig+0xa74>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d909      	bls.n	8003876 <UART_SetConfig+0x9ee>
 8003862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003864:	4a26      	ldr	r2, [pc, #152]	; (8003900 <UART_SetConfig+0xa78>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d805      	bhi.n	8003876 <UART_SetConfig+0x9ee>
        {
          huart->Instance->BRR = usartdiv;
 800386a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	f000 fbc4 	bl	8003ffe <UART_SetConfig+0x1176>
        }
        else
        {
          ret = HAL_ERROR;
 8003876:	231b      	movs	r3, #27
 8003878:	2258      	movs	r2, #88	; 0x58
 800387a:	4694      	mov	ip, r2
 800387c:	44bc      	add	ip, r7
 800387e:	4463      	add	r3, ip
 8003880:	2201      	movs	r2, #1
 8003882:	701a      	strb	r2, [r3, #0]
 8003884:	f000 fbbb 	bl	8003ffe <UART_SetConfig+0x1176>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800388a:	69da      	ldr	r2, [r3, #28]
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	429a      	cmp	r2, r3
 8003892:	d000      	beq.n	8003896 <UART_SetConfig+0xa0e>
 8003894:	e1e6      	b.n	8003c64 <UART_SetConfig+0xddc>
  {
    switch (clocksource)
 8003896:	2323      	movs	r3, #35	; 0x23
 8003898:	2258      	movs	r2, #88	; 0x58
 800389a:	4694      	mov	ip, r2
 800389c:	44bc      	add	ip, r7
 800389e:	4463      	add	r3, ip
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d100      	bne.n	80038a8 <UART_SetConfig+0xa20>
 80038a6:	e08f      	b.n	80039c8 <UART_SetConfig+0xb40>
 80038a8:	dc02      	bgt.n	80038b0 <UART_SetConfig+0xa28>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d02a      	beq.n	8003904 <UART_SetConfig+0xa7c>
 80038ae:	e1a5      	b.n	8003bfc <UART_SetConfig+0xd74>
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d100      	bne.n	80038b6 <UART_SetConfig+0xa2e>
 80038b4:	e0df      	b.n	8003a76 <UART_SetConfig+0xbee>
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d100      	bne.n	80038bc <UART_SetConfig+0xa34>
 80038ba:	e13e      	b.n	8003b3a <UART_SetConfig+0xcb2>
 80038bc:	e19e      	b.n	8003bfc <UART_SetConfig+0xd74>
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	00f42400 	.word	0x00f42400
 80038c4:	f4240000 	.word	0xf4240000
 80038c8:	01e84800 	.word	0x01e84800
 80038cc:	03d09000 	.word	0x03d09000
 80038d0:	07a12000 	.word	0x07a12000
 80038d4:	0f424000 	.word	0x0f424000
 80038d8:	14585500 	.word	0x14585500
 80038dc:	186a0000 	.word	0x186a0000
 80038e0:	1e848000 	.word	0x1e848000
 80038e4:	28b0aa00 	.word	0x28b0aa00
 80038e8:	3d090000 	.word	0x3d090000
 80038ec:	7a120000 	.word	0x7a120000
 80038f0:	000aaa00 	.word	0x000aaa00
 80038f4:	000ccc00 	.word	0x000ccc00
 80038f8:	00155500 	.word	0x00155500
 80038fc:	000002ff 	.word	0x000002ff
 8003900:	000fffff 	.word	0x000fffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003904:	f7fe feea 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8003908:	0003      	movs	r3, r0
 800390a:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800390c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	2b00      	cmp	r3, #0
 8003912:	d044      	beq.n	800399e <UART_SetConfig+0xb16>
 8003914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	2b01      	cmp	r3, #1
 800391a:	d03e      	beq.n	800399a <UART_SetConfig+0xb12>
 800391c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	2b02      	cmp	r3, #2
 8003922:	d038      	beq.n	8003996 <UART_SetConfig+0xb0e>
 8003924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	2b03      	cmp	r3, #3
 800392a:	d032      	beq.n	8003992 <UART_SetConfig+0xb0a>
 800392c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	2b04      	cmp	r3, #4
 8003932:	d02c      	beq.n	800398e <UART_SetConfig+0xb06>
 8003934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	2b05      	cmp	r3, #5
 800393a:	d026      	beq.n	800398a <UART_SetConfig+0xb02>
 800393c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	2b06      	cmp	r3, #6
 8003942:	d020      	beq.n	8003986 <UART_SetConfig+0xafe>
 8003944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	2b07      	cmp	r3, #7
 800394a:	d01a      	beq.n	8003982 <UART_SetConfig+0xafa>
 800394c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	2b08      	cmp	r3, #8
 8003952:	d014      	beq.n	800397e <UART_SetConfig+0xaf6>
 8003954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	2b09      	cmp	r3, #9
 800395a:	d00e      	beq.n	800397a <UART_SetConfig+0xaf2>
 800395c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	2b0a      	cmp	r3, #10
 8003962:	d008      	beq.n	8003976 <UART_SetConfig+0xaee>
 8003964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	2b0b      	cmp	r3, #11
 800396a:	d102      	bne.n	8003972 <UART_SetConfig+0xaea>
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	e016      	b.n	80039a0 <UART_SetConfig+0xb18>
 8003972:	2301      	movs	r3, #1
 8003974:	e014      	b.n	80039a0 <UART_SetConfig+0xb18>
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	e012      	b.n	80039a0 <UART_SetConfig+0xb18>
 800397a:	2340      	movs	r3, #64	; 0x40
 800397c:	e010      	b.n	80039a0 <UART_SetConfig+0xb18>
 800397e:	2320      	movs	r3, #32
 8003980:	e00e      	b.n	80039a0 <UART_SetConfig+0xb18>
 8003982:	2310      	movs	r3, #16
 8003984:	e00c      	b.n	80039a0 <UART_SetConfig+0xb18>
 8003986:	230c      	movs	r3, #12
 8003988:	e00a      	b.n	80039a0 <UART_SetConfig+0xb18>
 800398a:	230a      	movs	r3, #10
 800398c:	e008      	b.n	80039a0 <UART_SetConfig+0xb18>
 800398e:	2308      	movs	r3, #8
 8003990:	e006      	b.n	80039a0 <UART_SetConfig+0xb18>
 8003992:	2306      	movs	r3, #6
 8003994:	e004      	b.n	80039a0 <UART_SetConfig+0xb18>
 8003996:	2304      	movs	r3, #4
 8003998:	e002      	b.n	80039a0 <UART_SetConfig+0xb18>
 800399a:	2302      	movs	r3, #2
 800399c:	e000      	b.n	80039a0 <UART_SetConfig+0xb18>
 800399e:	2301      	movs	r3, #1
 80039a0:	0019      	movs	r1, r3
 80039a2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80039a4:	f7fc fbb6 	bl	8000114 <__udivsi3>
 80039a8:	0003      	movs	r3, r0
 80039aa:	005a      	lsls	r2, r3, #1
 80039ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	18d2      	adds	r2, r2, r3
 80039b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	0019      	movs	r1, r3
 80039ba:	0010      	movs	r0, r2
 80039bc:	f7fc fbaa 	bl	8000114 <__udivsi3>
 80039c0:	0003      	movs	r3, r0
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80039c6:	e121      	b.n	8003c0c <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d043      	beq.n	8003a58 <UART_SetConfig+0xbd0>
 80039d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d03d      	beq.n	8003a54 <UART_SetConfig+0xbcc>
 80039d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d037      	beq.n	8003a50 <UART_SetConfig+0xbc8>
 80039e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d031      	beq.n	8003a4c <UART_SetConfig+0xbc4>
 80039e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d02b      	beq.n	8003a48 <UART_SetConfig+0xbc0>
 80039f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	2b05      	cmp	r3, #5
 80039f6:	d025      	beq.n	8003a44 <UART_SetConfig+0xbbc>
 80039f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	2b06      	cmp	r3, #6
 80039fe:	d01f      	beq.n	8003a40 <UART_SetConfig+0xbb8>
 8003a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	2b07      	cmp	r3, #7
 8003a06:	d019      	beq.n	8003a3c <UART_SetConfig+0xbb4>
 8003a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d013      	beq.n	8003a38 <UART_SetConfig+0xbb0>
 8003a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	2b09      	cmp	r3, #9
 8003a16:	d00d      	beq.n	8003a34 <UART_SetConfig+0xbac>
 8003a18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	2b0a      	cmp	r3, #10
 8003a1e:	d007      	beq.n	8003a30 <UART_SetConfig+0xba8>
 8003a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	2b0b      	cmp	r3, #11
 8003a26:	d101      	bne.n	8003a2c <UART_SetConfig+0xba4>
 8003a28:	4bba      	ldr	r3, [pc, #744]	; (8003d14 <UART_SetConfig+0xe8c>)
 8003a2a:	e016      	b.n	8003a5a <UART_SetConfig+0xbd2>
 8003a2c:	4bba      	ldr	r3, [pc, #744]	; (8003d18 <UART_SetConfig+0xe90>)
 8003a2e:	e014      	b.n	8003a5a <UART_SetConfig+0xbd2>
 8003a30:	4bba      	ldr	r3, [pc, #744]	; (8003d1c <UART_SetConfig+0xe94>)
 8003a32:	e012      	b.n	8003a5a <UART_SetConfig+0xbd2>
 8003a34:	4bba      	ldr	r3, [pc, #744]	; (8003d20 <UART_SetConfig+0xe98>)
 8003a36:	e010      	b.n	8003a5a <UART_SetConfig+0xbd2>
 8003a38:	4bba      	ldr	r3, [pc, #744]	; (8003d24 <UART_SetConfig+0xe9c>)
 8003a3a:	e00e      	b.n	8003a5a <UART_SetConfig+0xbd2>
 8003a3c:	4bba      	ldr	r3, [pc, #744]	; (8003d28 <UART_SetConfig+0xea0>)
 8003a3e:	e00c      	b.n	8003a5a <UART_SetConfig+0xbd2>
 8003a40:	4bba      	ldr	r3, [pc, #744]	; (8003d2c <UART_SetConfig+0xea4>)
 8003a42:	e00a      	b.n	8003a5a <UART_SetConfig+0xbd2>
 8003a44:	4bba      	ldr	r3, [pc, #744]	; (8003d30 <UART_SetConfig+0xea8>)
 8003a46:	e008      	b.n	8003a5a <UART_SetConfig+0xbd2>
 8003a48:	4bba      	ldr	r3, [pc, #744]	; (8003d34 <UART_SetConfig+0xeac>)
 8003a4a:	e006      	b.n	8003a5a <UART_SetConfig+0xbd2>
 8003a4c:	4bba      	ldr	r3, [pc, #744]	; (8003d38 <UART_SetConfig+0xeb0>)
 8003a4e:	e004      	b.n	8003a5a <UART_SetConfig+0xbd2>
 8003a50:	4bba      	ldr	r3, [pc, #744]	; (8003d3c <UART_SetConfig+0xeb4>)
 8003a52:	e002      	b.n	8003a5a <UART_SetConfig+0xbd2>
 8003a54:	4bba      	ldr	r3, [pc, #744]	; (8003d40 <UART_SetConfig+0xeb8>)
 8003a56:	e000      	b.n	8003a5a <UART_SetConfig+0xbd2>
 8003a58:	4baf      	ldr	r3, [pc, #700]	; (8003d18 <UART_SetConfig+0xe90>)
 8003a5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a5c:	6852      	ldr	r2, [r2, #4]
 8003a5e:	0852      	lsrs	r2, r2, #1
 8003a60:	189a      	adds	r2, r3, r2
 8003a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	0019      	movs	r1, r3
 8003a68:	0010      	movs	r0, r2
 8003a6a:	f7fc fb53 	bl	8000114 <__udivsi3>
 8003a6e:	0003      	movs	r3, r0
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8003a74:	e0ca      	b.n	8003c0c <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a76:	f7fe fda7 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 8003a7a:	0003      	movs	r3, r0
 8003a7c:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d044      	beq.n	8003b10 <UART_SetConfig+0xc88>
 8003a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d03e      	beq.n	8003b0c <UART_SetConfig+0xc84>
 8003a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d038      	beq.n	8003b08 <UART_SetConfig+0xc80>
 8003a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d032      	beq.n	8003b04 <UART_SetConfig+0xc7c>
 8003a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d02c      	beq.n	8003b00 <UART_SetConfig+0xc78>
 8003aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	2b05      	cmp	r3, #5
 8003aac:	d026      	beq.n	8003afc <UART_SetConfig+0xc74>
 8003aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	2b06      	cmp	r3, #6
 8003ab4:	d020      	beq.n	8003af8 <UART_SetConfig+0xc70>
 8003ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	2b07      	cmp	r3, #7
 8003abc:	d01a      	beq.n	8003af4 <UART_SetConfig+0xc6c>
 8003abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d014      	beq.n	8003af0 <UART_SetConfig+0xc68>
 8003ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	2b09      	cmp	r3, #9
 8003acc:	d00e      	beq.n	8003aec <UART_SetConfig+0xc64>
 8003ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	2b0a      	cmp	r3, #10
 8003ad4:	d008      	beq.n	8003ae8 <UART_SetConfig+0xc60>
 8003ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	2b0b      	cmp	r3, #11
 8003adc:	d102      	bne.n	8003ae4 <UART_SetConfig+0xc5c>
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	e016      	b.n	8003b12 <UART_SetConfig+0xc8a>
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e014      	b.n	8003b12 <UART_SetConfig+0xc8a>
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	e012      	b.n	8003b12 <UART_SetConfig+0xc8a>
 8003aec:	2340      	movs	r3, #64	; 0x40
 8003aee:	e010      	b.n	8003b12 <UART_SetConfig+0xc8a>
 8003af0:	2320      	movs	r3, #32
 8003af2:	e00e      	b.n	8003b12 <UART_SetConfig+0xc8a>
 8003af4:	2310      	movs	r3, #16
 8003af6:	e00c      	b.n	8003b12 <UART_SetConfig+0xc8a>
 8003af8:	230c      	movs	r3, #12
 8003afa:	e00a      	b.n	8003b12 <UART_SetConfig+0xc8a>
 8003afc:	230a      	movs	r3, #10
 8003afe:	e008      	b.n	8003b12 <UART_SetConfig+0xc8a>
 8003b00:	2308      	movs	r3, #8
 8003b02:	e006      	b.n	8003b12 <UART_SetConfig+0xc8a>
 8003b04:	2306      	movs	r3, #6
 8003b06:	e004      	b.n	8003b12 <UART_SetConfig+0xc8a>
 8003b08:	2304      	movs	r3, #4
 8003b0a:	e002      	b.n	8003b12 <UART_SetConfig+0xc8a>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e000      	b.n	8003b12 <UART_SetConfig+0xc8a>
 8003b10:	2301      	movs	r3, #1
 8003b12:	0019      	movs	r1, r3
 8003b14:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003b16:	f7fc fafd 	bl	8000114 <__udivsi3>
 8003b1a:	0003      	movs	r3, r0
 8003b1c:	005a      	lsls	r2, r3, #1
 8003b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	085b      	lsrs	r3, r3, #1
 8003b24:	18d2      	adds	r2, r2, r3
 8003b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	0010      	movs	r0, r2
 8003b2e:	f7fc faf1 	bl	8000114 <__udivsi3>
 8003b32:	0003      	movs	r3, r0
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8003b38:	e068      	b.n	8003c0c <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d04c      	beq.n	8003bdc <UART_SetConfig+0xd54>
 8003b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d045      	beq.n	8003bd6 <UART_SetConfig+0xd4e>
 8003b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d03e      	beq.n	8003bd0 <UART_SetConfig+0xd48>
 8003b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d038      	beq.n	8003bcc <UART_SetConfig+0xd44>
 8003b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d031      	beq.n	8003bc6 <UART_SetConfig+0xd3e>
 8003b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	2b05      	cmp	r3, #5
 8003b68:	d02b      	beq.n	8003bc2 <UART_SetConfig+0xd3a>
 8003b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	2b06      	cmp	r3, #6
 8003b70:	d025      	beq.n	8003bbe <UART_SetConfig+0xd36>
 8003b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	2b07      	cmp	r3, #7
 8003b78:	d01e      	beq.n	8003bb8 <UART_SetConfig+0xd30>
 8003b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d017      	beq.n	8003bb2 <UART_SetConfig+0xd2a>
 8003b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	2b09      	cmp	r3, #9
 8003b88:	d010      	beq.n	8003bac <UART_SetConfig+0xd24>
 8003b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	2b0a      	cmp	r3, #10
 8003b90:	d009      	beq.n	8003ba6 <UART_SetConfig+0xd1e>
 8003b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	2b0b      	cmp	r3, #11
 8003b98:	d102      	bne.n	8003ba0 <UART_SetConfig+0xd18>
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	e01f      	b.n	8003be0 <UART_SetConfig+0xd58>
 8003ba0:	2380      	movs	r3, #128	; 0x80
 8003ba2:	025b      	lsls	r3, r3, #9
 8003ba4:	e01c      	b.n	8003be0 <UART_SetConfig+0xd58>
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	e019      	b.n	8003be0 <UART_SetConfig+0xd58>
 8003bac:	2380      	movs	r3, #128	; 0x80
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	e016      	b.n	8003be0 <UART_SetConfig+0xd58>
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	e013      	b.n	8003be0 <UART_SetConfig+0xd58>
 8003bb8:	2380      	movs	r3, #128	; 0x80
 8003bba:	015b      	lsls	r3, r3, #5
 8003bbc:	e010      	b.n	8003be0 <UART_SetConfig+0xd58>
 8003bbe:	4b61      	ldr	r3, [pc, #388]	; (8003d44 <UART_SetConfig+0xebc>)
 8003bc0:	e00e      	b.n	8003be0 <UART_SetConfig+0xd58>
 8003bc2:	4b61      	ldr	r3, [pc, #388]	; (8003d48 <UART_SetConfig+0xec0>)
 8003bc4:	e00c      	b.n	8003be0 <UART_SetConfig+0xd58>
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	019b      	lsls	r3, r3, #6
 8003bca:	e009      	b.n	8003be0 <UART_SetConfig+0xd58>
 8003bcc:	4b5f      	ldr	r3, [pc, #380]	; (8003d4c <UART_SetConfig+0xec4>)
 8003bce:	e007      	b.n	8003be0 <UART_SetConfig+0xd58>
 8003bd0:	2380      	movs	r3, #128	; 0x80
 8003bd2:	01db      	lsls	r3, r3, #7
 8003bd4:	e004      	b.n	8003be0 <UART_SetConfig+0xd58>
 8003bd6:	2380      	movs	r3, #128	; 0x80
 8003bd8:	021b      	lsls	r3, r3, #8
 8003bda:	e001      	b.n	8003be0 <UART_SetConfig+0xd58>
 8003bdc:	2380      	movs	r3, #128	; 0x80
 8003bde:	025b      	lsls	r3, r3, #9
 8003be0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003be2:	6852      	ldr	r2, [r2, #4]
 8003be4:	0852      	lsrs	r2, r2, #1
 8003be6:	189a      	adds	r2, r3, r2
 8003be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	0019      	movs	r1, r3
 8003bee:	0010      	movs	r0, r2
 8003bf0:	f7fc fa90 	bl	8000114 <__udivsi3>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8003bfa:	e007      	b.n	8003c0c <UART_SetConfig+0xd84>
      default:
        ret = HAL_ERROR;
 8003bfc:	231b      	movs	r3, #27
 8003bfe:	2258      	movs	r2, #88	; 0x58
 8003c00:	4694      	mov	ip, r2
 8003c02:	44bc      	add	ip, r7
 8003c04:	4463      	add	r3, ip
 8003c06:	2201      	movs	r2, #1
 8003c08:	701a      	strb	r2, [r3, #0]
        break;
 8003c0a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c0e:	2b0f      	cmp	r3, #15
 8003c10:	d920      	bls.n	8003c54 <UART_SetConfig+0xdcc>
 8003c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c14:	4a4e      	ldr	r2, [pc, #312]	; (8003d50 <UART_SetConfig+0xec8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d81c      	bhi.n	8003c54 <UART_SetConfig+0xdcc>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	200e      	movs	r0, #14
 8003c20:	2458      	movs	r4, #88	; 0x58
 8003c22:	193b      	adds	r3, r7, r4
 8003c24:	181b      	adds	r3, r3, r0
 8003c26:	210f      	movs	r1, #15
 8003c28:	438a      	bics	r2, r1
 8003c2a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c2e:	085b      	lsrs	r3, r3, #1
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2207      	movs	r2, #7
 8003c34:	4013      	ands	r3, r2
 8003c36:	b299      	uxth	r1, r3
 8003c38:	193b      	adds	r3, r7, r4
 8003c3a:	181b      	adds	r3, r3, r0
 8003c3c:	193a      	adds	r2, r7, r4
 8003c3e:	1812      	adds	r2, r2, r0
 8003c40:	8812      	ldrh	r2, [r2, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	193a      	adds	r2, r7, r4
 8003c4c:	1812      	adds	r2, r2, r0
 8003c4e:	8812      	ldrh	r2, [r2, #0]
 8003c50:	60da      	str	r2, [r3, #12]
 8003c52:	e1d4      	b.n	8003ffe <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 8003c54:	231b      	movs	r3, #27
 8003c56:	2258      	movs	r2, #88	; 0x58
 8003c58:	4694      	mov	ip, r2
 8003c5a:	44bc      	add	ip, r7
 8003c5c:	4463      	add	r3, ip
 8003c5e:	2201      	movs	r2, #1
 8003c60:	701a      	strb	r2, [r3, #0]
 8003c62:	e1cc      	b.n	8003ffe <UART_SetConfig+0x1176>
    }
  }
  else
  {
    switch (clocksource)
 8003c64:	2323      	movs	r3, #35	; 0x23
 8003c66:	2258      	movs	r2, #88	; 0x58
 8003c68:	4694      	mov	ip, r2
 8003c6a:	44bc      	add	ip, r7
 8003c6c:	4463      	add	r3, ip
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d100      	bne.n	8003c76 <UART_SetConfig+0xdee>
 8003c74:	e08f      	b.n	8003d96 <UART_SetConfig+0xf0e>
 8003c76:	dc02      	bgt.n	8003c7e <UART_SetConfig+0xdf6>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <UART_SetConfig+0xe04>
 8003c7c:	e1a4      	b.n	8003fc8 <UART_SetConfig+0x1140>
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d100      	bne.n	8003c84 <UART_SetConfig+0xdfc>
 8003c82:	e0df      	b.n	8003e44 <UART_SetConfig+0xfbc>
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d100      	bne.n	8003c8a <UART_SetConfig+0xe02>
 8003c88:	e13e      	b.n	8003f08 <UART_SetConfig+0x1080>
 8003c8a:	e19d      	b.n	8003fc8 <UART_SetConfig+0x1140>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c8c:	f7fe fd26 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8003c90:	0003      	movs	r3, r0
 8003c92:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d100      	bne.n	8003c9e <UART_SetConfig+0xe16>
 8003c9c:	e066      	b.n	8003d6c <UART_SetConfig+0xee4>
 8003c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d100      	bne.n	8003ca8 <UART_SetConfig+0xe20>
 8003ca6:	e05f      	b.n	8003d68 <UART_SetConfig+0xee0>
 8003ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d059      	beq.n	8003d64 <UART_SetConfig+0xedc>
 8003cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d053      	beq.n	8003d60 <UART_SetConfig+0xed8>
 8003cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d04d      	beq.n	8003d5c <UART_SetConfig+0xed4>
 8003cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	2b05      	cmp	r3, #5
 8003cc6:	d047      	beq.n	8003d58 <UART_SetConfig+0xed0>
 8003cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	2b06      	cmp	r3, #6
 8003cce:	d041      	beq.n	8003d54 <UART_SetConfig+0xecc>
 8003cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	2b07      	cmp	r3, #7
 8003cd6:	d01a      	beq.n	8003d0e <UART_SetConfig+0xe86>
 8003cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d014      	beq.n	8003d0a <UART_SetConfig+0xe82>
 8003ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	2b09      	cmp	r3, #9
 8003ce6:	d00e      	beq.n	8003d06 <UART_SetConfig+0xe7e>
 8003ce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	2b0a      	cmp	r3, #10
 8003cee:	d008      	beq.n	8003d02 <UART_SetConfig+0xe7a>
 8003cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	2b0b      	cmp	r3, #11
 8003cf6:	d102      	bne.n	8003cfe <UART_SetConfig+0xe76>
 8003cf8:	2380      	movs	r3, #128	; 0x80
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	e037      	b.n	8003d6e <UART_SetConfig+0xee6>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e035      	b.n	8003d6e <UART_SetConfig+0xee6>
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	e033      	b.n	8003d6e <UART_SetConfig+0xee6>
 8003d06:	2340      	movs	r3, #64	; 0x40
 8003d08:	e031      	b.n	8003d6e <UART_SetConfig+0xee6>
 8003d0a:	2320      	movs	r3, #32
 8003d0c:	e02f      	b.n	8003d6e <UART_SetConfig+0xee6>
 8003d0e:	2310      	movs	r3, #16
 8003d10:	e02d      	b.n	8003d6e <UART_SetConfig+0xee6>
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	0001e848 	.word	0x0001e848
 8003d18:	01e84800 	.word	0x01e84800
 8003d1c:	0003d090 	.word	0x0003d090
 8003d20:	0007a120 	.word	0x0007a120
 8003d24:	000f4240 	.word	0x000f4240
 8003d28:	001e8480 	.word	0x001e8480
 8003d2c:	0028b0aa 	.word	0x0028b0aa
 8003d30:	0030d400 	.word	0x0030d400
 8003d34:	003d0900 	.word	0x003d0900
 8003d38:	00516154 	.word	0x00516154
 8003d3c:	007a1200 	.word	0x007a1200
 8003d40:	00f42400 	.word	0x00f42400
 8003d44:	00001554 	.word	0x00001554
 8003d48:	00001998 	.word	0x00001998
 8003d4c:	00002aaa 	.word	0x00002aaa
 8003d50:	0000ffff 	.word	0x0000ffff
 8003d54:	230c      	movs	r3, #12
 8003d56:	e00a      	b.n	8003d6e <UART_SetConfig+0xee6>
 8003d58:	230a      	movs	r3, #10
 8003d5a:	e008      	b.n	8003d6e <UART_SetConfig+0xee6>
 8003d5c:	2308      	movs	r3, #8
 8003d5e:	e006      	b.n	8003d6e <UART_SetConfig+0xee6>
 8003d60:	2306      	movs	r3, #6
 8003d62:	e004      	b.n	8003d6e <UART_SetConfig+0xee6>
 8003d64:	2304      	movs	r3, #4
 8003d66:	e002      	b.n	8003d6e <UART_SetConfig+0xee6>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e000      	b.n	8003d6e <UART_SetConfig+0xee6>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	0019      	movs	r1, r3
 8003d70:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003d72:	f7fc f9cf 	bl	8000114 <__udivsi3>
 8003d76:	0003      	movs	r3, r0
 8003d78:	001a      	movs	r2, r3
 8003d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	085b      	lsrs	r3, r3, #1
 8003d80:	18d2      	adds	r2, r2, r3
 8003d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	0019      	movs	r1, r3
 8003d88:	0010      	movs	r0, r2
 8003d8a:	f7fc f9c3 	bl	8000114 <__udivsi3>
 8003d8e:	0003      	movs	r3, r0
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8003d94:	e120      	b.n	8003fd8 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d043      	beq.n	8003e26 <UART_SetConfig+0xf9e>
 8003d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d03d      	beq.n	8003e22 <UART_SetConfig+0xf9a>
 8003da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d037      	beq.n	8003e1e <UART_SetConfig+0xf96>
 8003dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d031      	beq.n	8003e1a <UART_SetConfig+0xf92>
 8003db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d02b      	beq.n	8003e16 <UART_SetConfig+0xf8e>
 8003dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	2b05      	cmp	r3, #5
 8003dc4:	d025      	beq.n	8003e12 <UART_SetConfig+0xf8a>
 8003dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	2b06      	cmp	r3, #6
 8003dcc:	d01f      	beq.n	8003e0e <UART_SetConfig+0xf86>
 8003dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	2b07      	cmp	r3, #7
 8003dd4:	d019      	beq.n	8003e0a <UART_SetConfig+0xf82>
 8003dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d013      	beq.n	8003e06 <UART_SetConfig+0xf7e>
 8003dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	2b09      	cmp	r3, #9
 8003de4:	d00d      	beq.n	8003e02 <UART_SetConfig+0xf7a>
 8003de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	2b0a      	cmp	r3, #10
 8003dec:	d007      	beq.n	8003dfe <UART_SetConfig+0xf76>
 8003dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	2b0b      	cmp	r3, #11
 8003df4:	d101      	bne.n	8003dfa <UART_SetConfig+0xf72>
 8003df6:	4b8e      	ldr	r3, [pc, #568]	; (8004030 <UART_SetConfig+0x11a8>)
 8003df8:	e016      	b.n	8003e28 <UART_SetConfig+0xfa0>
 8003dfa:	4b8e      	ldr	r3, [pc, #568]	; (8004034 <UART_SetConfig+0x11ac>)
 8003dfc:	e014      	b.n	8003e28 <UART_SetConfig+0xfa0>
 8003dfe:	4b8e      	ldr	r3, [pc, #568]	; (8004038 <UART_SetConfig+0x11b0>)
 8003e00:	e012      	b.n	8003e28 <UART_SetConfig+0xfa0>
 8003e02:	4b8e      	ldr	r3, [pc, #568]	; (800403c <UART_SetConfig+0x11b4>)
 8003e04:	e010      	b.n	8003e28 <UART_SetConfig+0xfa0>
 8003e06:	4b8e      	ldr	r3, [pc, #568]	; (8004040 <UART_SetConfig+0x11b8>)
 8003e08:	e00e      	b.n	8003e28 <UART_SetConfig+0xfa0>
 8003e0a:	4b8e      	ldr	r3, [pc, #568]	; (8004044 <UART_SetConfig+0x11bc>)
 8003e0c:	e00c      	b.n	8003e28 <UART_SetConfig+0xfa0>
 8003e0e:	4b8e      	ldr	r3, [pc, #568]	; (8004048 <UART_SetConfig+0x11c0>)
 8003e10:	e00a      	b.n	8003e28 <UART_SetConfig+0xfa0>
 8003e12:	4b8e      	ldr	r3, [pc, #568]	; (800404c <UART_SetConfig+0x11c4>)
 8003e14:	e008      	b.n	8003e28 <UART_SetConfig+0xfa0>
 8003e16:	4b8e      	ldr	r3, [pc, #568]	; (8004050 <UART_SetConfig+0x11c8>)
 8003e18:	e006      	b.n	8003e28 <UART_SetConfig+0xfa0>
 8003e1a:	4b8e      	ldr	r3, [pc, #568]	; (8004054 <UART_SetConfig+0x11cc>)
 8003e1c:	e004      	b.n	8003e28 <UART_SetConfig+0xfa0>
 8003e1e:	4b8e      	ldr	r3, [pc, #568]	; (8004058 <UART_SetConfig+0x11d0>)
 8003e20:	e002      	b.n	8003e28 <UART_SetConfig+0xfa0>
 8003e22:	4b8e      	ldr	r3, [pc, #568]	; (800405c <UART_SetConfig+0x11d4>)
 8003e24:	e000      	b.n	8003e28 <UART_SetConfig+0xfa0>
 8003e26:	4b83      	ldr	r3, [pc, #524]	; (8004034 <UART_SetConfig+0x11ac>)
 8003e28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e2a:	6852      	ldr	r2, [r2, #4]
 8003e2c:	0852      	lsrs	r2, r2, #1
 8003e2e:	189a      	adds	r2, r3, r2
 8003e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	0019      	movs	r1, r3
 8003e36:	0010      	movs	r0, r2
 8003e38:	f7fc f96c 	bl	8000114 <__udivsi3>
 8003e3c:	0003      	movs	r3, r0
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8003e42:	e0c9      	b.n	8003fd8 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e44:	f7fe fbc0 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d044      	beq.n	8003ede <UART_SetConfig+0x1056>
 8003e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d03e      	beq.n	8003eda <UART_SetConfig+0x1052>
 8003e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d038      	beq.n	8003ed6 <UART_SetConfig+0x104e>
 8003e64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d032      	beq.n	8003ed2 <UART_SetConfig+0x104a>
 8003e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d02c      	beq.n	8003ece <UART_SetConfig+0x1046>
 8003e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	d026      	beq.n	8003eca <UART_SetConfig+0x1042>
 8003e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	2b06      	cmp	r3, #6
 8003e82:	d020      	beq.n	8003ec6 <UART_SetConfig+0x103e>
 8003e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	2b07      	cmp	r3, #7
 8003e8a:	d01a      	beq.n	8003ec2 <UART_SetConfig+0x103a>
 8003e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d014      	beq.n	8003ebe <UART_SetConfig+0x1036>
 8003e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	2b09      	cmp	r3, #9
 8003e9a:	d00e      	beq.n	8003eba <UART_SetConfig+0x1032>
 8003e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	2b0a      	cmp	r3, #10
 8003ea2:	d008      	beq.n	8003eb6 <UART_SetConfig+0x102e>
 8003ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	2b0b      	cmp	r3, #11
 8003eaa:	d102      	bne.n	8003eb2 <UART_SetConfig+0x102a>
 8003eac:	2380      	movs	r3, #128	; 0x80
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	e016      	b.n	8003ee0 <UART_SetConfig+0x1058>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e014      	b.n	8003ee0 <UART_SetConfig+0x1058>
 8003eb6:	2380      	movs	r3, #128	; 0x80
 8003eb8:	e012      	b.n	8003ee0 <UART_SetConfig+0x1058>
 8003eba:	2340      	movs	r3, #64	; 0x40
 8003ebc:	e010      	b.n	8003ee0 <UART_SetConfig+0x1058>
 8003ebe:	2320      	movs	r3, #32
 8003ec0:	e00e      	b.n	8003ee0 <UART_SetConfig+0x1058>
 8003ec2:	2310      	movs	r3, #16
 8003ec4:	e00c      	b.n	8003ee0 <UART_SetConfig+0x1058>
 8003ec6:	230c      	movs	r3, #12
 8003ec8:	e00a      	b.n	8003ee0 <UART_SetConfig+0x1058>
 8003eca:	230a      	movs	r3, #10
 8003ecc:	e008      	b.n	8003ee0 <UART_SetConfig+0x1058>
 8003ece:	2308      	movs	r3, #8
 8003ed0:	e006      	b.n	8003ee0 <UART_SetConfig+0x1058>
 8003ed2:	2306      	movs	r3, #6
 8003ed4:	e004      	b.n	8003ee0 <UART_SetConfig+0x1058>
 8003ed6:	2304      	movs	r3, #4
 8003ed8:	e002      	b.n	8003ee0 <UART_SetConfig+0x1058>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e000      	b.n	8003ee0 <UART_SetConfig+0x1058>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	0019      	movs	r1, r3
 8003ee2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003ee4:	f7fc f916 	bl	8000114 <__udivsi3>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	001a      	movs	r2, r3
 8003eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	18d2      	adds	r2, r2, r3
 8003ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	0019      	movs	r1, r3
 8003efa:	0010      	movs	r0, r2
 8003efc:	f7fc f90a 	bl	8000114 <__udivsi3>
 8003f00:	0003      	movs	r3, r0
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8003f06:	e067      	b.n	8003fd8 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d04b      	beq.n	8003fa8 <UART_SetConfig+0x1120>
 8003f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d044      	beq.n	8003fa2 <UART_SetConfig+0x111a>
 8003f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d03d      	beq.n	8003f9c <UART_SetConfig+0x1114>
 8003f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d037      	beq.n	8003f98 <UART_SetConfig+0x1110>
 8003f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d030      	beq.n	8003f92 <UART_SetConfig+0x110a>
 8003f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	2b05      	cmp	r3, #5
 8003f36:	d02a      	beq.n	8003f8e <UART_SetConfig+0x1106>
 8003f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	2b06      	cmp	r3, #6
 8003f3e:	d024      	beq.n	8003f8a <UART_SetConfig+0x1102>
 8003f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	2b07      	cmp	r3, #7
 8003f46:	d01d      	beq.n	8003f84 <UART_SetConfig+0x10fc>
 8003f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d016      	beq.n	8003f7e <UART_SetConfig+0x10f6>
 8003f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	2b09      	cmp	r3, #9
 8003f56:	d00f      	beq.n	8003f78 <UART_SetConfig+0x10f0>
 8003f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	2b0a      	cmp	r3, #10
 8003f5e:	d008      	beq.n	8003f72 <UART_SetConfig+0x10ea>
 8003f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	2b0b      	cmp	r3, #11
 8003f66:	d101      	bne.n	8003f6c <UART_SetConfig+0x10e4>
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	e01f      	b.n	8003fac <UART_SetConfig+0x1124>
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	e01c      	b.n	8003fac <UART_SetConfig+0x1124>
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	e019      	b.n	8003fac <UART_SetConfig+0x1124>
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	e016      	b.n	8003fac <UART_SetConfig+0x1124>
 8003f7e:	2380      	movs	r3, #128	; 0x80
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	e013      	b.n	8003fac <UART_SetConfig+0x1124>
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	e010      	b.n	8003fac <UART_SetConfig+0x1124>
 8003f8a:	4b35      	ldr	r3, [pc, #212]	; (8004060 <UART_SetConfig+0x11d8>)
 8003f8c:	e00e      	b.n	8003fac <UART_SetConfig+0x1124>
 8003f8e:	4b35      	ldr	r3, [pc, #212]	; (8004064 <UART_SetConfig+0x11dc>)
 8003f90:	e00c      	b.n	8003fac <UART_SetConfig+0x1124>
 8003f92:	2380      	movs	r3, #128	; 0x80
 8003f94:	015b      	lsls	r3, r3, #5
 8003f96:	e009      	b.n	8003fac <UART_SetConfig+0x1124>
 8003f98:	4b33      	ldr	r3, [pc, #204]	; (8004068 <UART_SetConfig+0x11e0>)
 8003f9a:	e007      	b.n	8003fac <UART_SetConfig+0x1124>
 8003f9c:	2380      	movs	r3, #128	; 0x80
 8003f9e:	019b      	lsls	r3, r3, #6
 8003fa0:	e004      	b.n	8003fac <UART_SetConfig+0x1124>
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	01db      	lsls	r3, r3, #7
 8003fa6:	e001      	b.n	8003fac <UART_SetConfig+0x1124>
 8003fa8:	2380      	movs	r3, #128	; 0x80
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fae:	6852      	ldr	r2, [r2, #4]
 8003fb0:	0852      	lsrs	r2, r2, #1
 8003fb2:	189a      	adds	r2, r3, r2
 8003fb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	0019      	movs	r1, r3
 8003fba:	0010      	movs	r0, r2
 8003fbc:	f7fc f8aa 	bl	8000114 <__udivsi3>
 8003fc0:	0003      	movs	r3, r0
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8003fc6:	e007      	b.n	8003fd8 <UART_SetConfig+0x1150>
      default:
        ret = HAL_ERROR;
 8003fc8:	231b      	movs	r3, #27
 8003fca:	2258      	movs	r2, #88	; 0x58
 8003fcc:	4694      	mov	ip, r2
 8003fce:	44bc      	add	ip, r7
 8003fd0:	4463      	add	r3, ip
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	701a      	strb	r2, [r3, #0]
        break;
 8003fd6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fda:	2b0f      	cmp	r3, #15
 8003fdc:	d908      	bls.n	8003ff0 <UART_SetConfig+0x1168>
 8003fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fe0:	4a22      	ldr	r2, [pc, #136]	; (800406c <UART_SetConfig+0x11e4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d804      	bhi.n	8003ff0 <UART_SetConfig+0x1168>
    {
      huart->Instance->BRR = usartdiv;
 8003fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003fec:	60da      	str	r2, [r3, #12]
 8003fee:	e006      	b.n	8003ffe <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 8003ff0:	231b      	movs	r3, #27
 8003ff2:	2258      	movs	r2, #88	; 0x58
 8003ff4:	4694      	mov	ip, r2
 8003ff6:	44bc      	add	ip, r7
 8003ff8:	4463      	add	r3, ip
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004000:	226a      	movs	r2, #106	; 0x6a
 8004002:	2101      	movs	r1, #1
 8004004:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004008:	2268      	movs	r2, #104	; 0x68
 800400a:	2101      	movs	r1, #1
 800400c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800400e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004010:	2200      	movs	r2, #0
 8004012:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004016:	2200      	movs	r2, #0
 8004018:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800401a:	231b      	movs	r3, #27
 800401c:	2258      	movs	r2, #88	; 0x58
 800401e:	4694      	mov	ip, r2
 8004020:	44bc      	add	ip, r7
 8004022:	4463      	add	r3, ip
 8004024:	781b      	ldrb	r3, [r3, #0]
}
 8004026:	0018      	movs	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	b021      	add	sp, #132	; 0x84
 800402c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	0000f424 	.word	0x0000f424
 8004034:	00f42400 	.word	0x00f42400
 8004038:	0001e848 	.word	0x0001e848
 800403c:	0003d090 	.word	0x0003d090
 8004040:	0007a120 	.word	0x0007a120
 8004044:	000f4240 	.word	0x000f4240
 8004048:	00145855 	.word	0x00145855
 800404c:	00186a00 	.word	0x00186a00
 8004050:	001e8480 	.word	0x001e8480
 8004054:	0028b0aa 	.word	0x0028b0aa
 8004058:	003d0900 	.word	0x003d0900
 800405c:	007a1200 	.word	0x007a1200
 8004060:	00000aaa 	.word	0x00000aaa
 8004064:	00000ccc 	.word	0x00000ccc
 8004068:	00001555 	.word	0x00001555
 800406c:	0000ffff 	.word	0x0000ffff

08004070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	2201      	movs	r2, #1
 800407e:	4013      	ands	r3, r2
 8004080:	d00b      	beq.n	800409a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4a4a      	ldr	r2, [pc, #296]	; (80041b4 <UART_AdvFeatureConfig+0x144>)
 800408a:	4013      	ands	r3, r2
 800408c:	0019      	movs	r1, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	2202      	movs	r2, #2
 80040a0:	4013      	ands	r3, r2
 80040a2:	d00b      	beq.n	80040bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4a43      	ldr	r2, [pc, #268]	; (80041b8 <UART_AdvFeatureConfig+0x148>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	0019      	movs	r1, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c0:	2204      	movs	r2, #4
 80040c2:	4013      	ands	r3, r2
 80040c4:	d00b      	beq.n	80040de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4a3b      	ldr	r2, [pc, #236]	; (80041bc <UART_AdvFeatureConfig+0x14c>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	0019      	movs	r1, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	2208      	movs	r2, #8
 80040e4:	4013      	ands	r3, r2
 80040e6:	d00b      	beq.n	8004100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	4a34      	ldr	r2, [pc, #208]	; (80041c0 <UART_AdvFeatureConfig+0x150>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	0019      	movs	r1, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004104:	2210      	movs	r2, #16
 8004106:	4013      	ands	r3, r2
 8004108:	d00b      	beq.n	8004122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	4a2c      	ldr	r2, [pc, #176]	; (80041c4 <UART_AdvFeatureConfig+0x154>)
 8004112:	4013      	ands	r3, r2
 8004114:	0019      	movs	r1, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004126:	2220      	movs	r2, #32
 8004128:	4013      	ands	r3, r2
 800412a:	d00b      	beq.n	8004144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	4a25      	ldr	r2, [pc, #148]	; (80041c8 <UART_AdvFeatureConfig+0x158>)
 8004134:	4013      	ands	r3, r2
 8004136:	0019      	movs	r1, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	2240      	movs	r2, #64	; 0x40
 800414a:	4013      	ands	r3, r2
 800414c:	d01d      	beq.n	800418a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	4a1d      	ldr	r2, [pc, #116]	; (80041cc <UART_AdvFeatureConfig+0x15c>)
 8004156:	4013      	ands	r3, r2
 8004158:	0019      	movs	r1, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800416a:	2380      	movs	r3, #128	; 0x80
 800416c:	035b      	lsls	r3, r3, #13
 800416e:	429a      	cmp	r2, r3
 8004170:	d10b      	bne.n	800418a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4a15      	ldr	r2, [pc, #84]	; (80041d0 <UART_AdvFeatureConfig+0x160>)
 800417a:	4013      	ands	r3, r2
 800417c:	0019      	movs	r1, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	2280      	movs	r2, #128	; 0x80
 8004190:	4013      	ands	r3, r2
 8004192:	d00b      	beq.n	80041ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4a0e      	ldr	r2, [pc, #56]	; (80041d4 <UART_AdvFeatureConfig+0x164>)
 800419c:	4013      	ands	r3, r2
 800419e:	0019      	movs	r1, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
  }
}
 80041ac:	46c0      	nop			; (mov r8, r8)
 80041ae:	46bd      	mov	sp, r7
 80041b0:	b002      	add	sp, #8
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	fffdffff 	.word	0xfffdffff
 80041b8:	fffeffff 	.word	0xfffeffff
 80041bc:	fffbffff 	.word	0xfffbffff
 80041c0:	ffff7fff 	.word	0xffff7fff
 80041c4:	ffffefff 	.word	0xffffefff
 80041c8:	ffffdfff 	.word	0xffffdfff
 80041cc:	ffefffff 	.word	0xffefffff
 80041d0:	ff9fffff 	.word	0xff9fffff
 80041d4:	fff7ffff 	.word	0xfff7ffff

080041d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af02      	add	r7, sp, #8
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2288      	movs	r2, #136	; 0x88
 80041e4:	2100      	movs	r1, #0
 80041e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80041e8:	f7fc fa90 	bl	800070c <HAL_GetTick>
 80041ec:	0003      	movs	r3, r0
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2208      	movs	r2, #8
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d10d      	bne.n	800421a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	2380      	movs	r3, #128	; 0x80
 8004202:	0399      	lsls	r1, r3, #14
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	4b18      	ldr	r3, [pc, #96]	; (8004268 <UART_CheckIdleState+0x90>)
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	0013      	movs	r3, r2
 800420c:	2200      	movs	r2, #0
 800420e:	f000 f82d 	bl	800426c <UART_WaitOnFlagUntilTimeout>
 8004212:	1e03      	subs	r3, r0, #0
 8004214:	d001      	beq.n	800421a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e021      	b.n	800425e <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2204      	movs	r2, #4
 8004222:	4013      	ands	r3, r2
 8004224:	2b04      	cmp	r3, #4
 8004226:	d10d      	bne.n	8004244 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	2380      	movs	r3, #128	; 0x80
 800422c:	03d9      	lsls	r1, r3, #15
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <UART_CheckIdleState+0x90>)
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	0013      	movs	r3, r2
 8004236:	2200      	movs	r2, #0
 8004238:	f000 f818 	bl	800426c <UART_WaitOnFlagUntilTimeout>
 800423c:	1e03      	subs	r3, r0, #0
 800423e:	d001      	beq.n	8004244 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e00c      	b.n	800425e <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2280      	movs	r2, #128	; 0x80
 8004248:	2120      	movs	r1, #32
 800424a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2284      	movs	r2, #132	; 0x84
 8004250:	2120      	movs	r1, #32
 8004252:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	227c      	movs	r2, #124	; 0x7c
 8004258:	2100      	movs	r1, #0
 800425a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	0018      	movs	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	b004      	add	sp, #16
 8004264:	bd80      	pop	{r7, pc}
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	01ffffff 	.word	0x01ffffff

0800426c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	1dfb      	adds	r3, r7, #7
 800427a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800427c:	e02b      	b.n	80042d6 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	3301      	adds	r3, #1
 8004282:	d028      	beq.n	80042d6 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004284:	f7fc fa42 	bl	800070c <HAL_GetTick>
 8004288:	0002      	movs	r2, r0
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	429a      	cmp	r2, r3
 8004292:	d302      	bcc.n	800429a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d11d      	bne.n	80042d6 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4916      	ldr	r1, [pc, #88]	; (8004300 <UART_WaitOnFlagUntilTimeout+0x94>)
 80042a6:	400a      	ands	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2101      	movs	r1, #1
 80042b6:	438a      	bics	r2, r1
 80042b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2280      	movs	r2, #128	; 0x80
 80042be:	2120      	movs	r1, #32
 80042c0:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2284      	movs	r2, #132	; 0x84
 80042c6:	2120      	movs	r1, #32
 80042c8:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	227c      	movs	r2, #124	; 0x7c
 80042ce:	2100      	movs	r1, #0
 80042d0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e00f      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	4013      	ands	r3, r2
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	425a      	negs	r2, r3
 80042e6:	4153      	adcs	r3, r2
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	001a      	movs	r2, r3
 80042ec:	1dfb      	adds	r3, r7, #7
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d0c4      	beq.n	800427e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	0018      	movs	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b004      	add	sp, #16
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	fffffe5f 	.word	0xfffffe5f

08004304 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	490b      	ldr	r1, [pc, #44]	; (8004344 <UART_EndRxTransfer+0x40>)
 8004318:	400a      	ands	r2, r1
 800431a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4908      	ldr	r1, [pc, #32]	; (8004348 <UART_EndRxTransfer+0x44>)
 8004328:	400a      	ands	r2, r1
 800432a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2284      	movs	r2, #132	; 0x84
 8004330:	2120      	movs	r1, #32
 8004332:	5099      	str	r1, [r3, r2]

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	46bd      	mov	sp, r7
 800433e:	b002      	add	sp, #8
 8004340:	bd80      	pop	{r7, pc}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	fffffedf 	.word	0xfffffedf
 8004348:	effffffe 	.word	0xeffffffe

0800434c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	225e      	movs	r2, #94	; 0x5e
 800435e:	2100      	movs	r1, #0
 8004360:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2256      	movs	r2, #86	; 0x56
 8004366:	2100      	movs	r1, #0
 8004368:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	0018      	movs	r0, r3
 800436e:	f7fe fd83 	bl	8002e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	46bd      	mov	sp, r7
 8004376:	b004      	add	sp, #16
 8004378:	bd80      	pop	{r7, pc}

0800437a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2280      	movs	r2, #128	; 0x80
 8004386:	589b      	ldr	r3, [r3, r2]
 8004388:	2b21      	cmp	r3, #33	; 0x21
 800438a:	d12a      	bne.n	80043e2 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2256      	movs	r2, #86	; 0x56
 8004390:	5a9b      	ldrh	r3, [r3, r2]
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d110      	bne.n	80043ba <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2180      	movs	r1, #128	; 0x80
 80043a4:	438a      	bics	r2, r1
 80043a6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2140      	movs	r1, #64	; 0x40
 80043b4:	430a      	orrs	r2, r1
 80043b6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80043b8:	e013      	b.n	80043e2 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043be:	781a      	ldrb	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2256      	movs	r2, #86	; 0x56
 80043d4:	5a9b      	ldrh	r3, [r3, r2]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b299      	uxth	r1, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2256      	movs	r2, #86	; 0x56
 80043e0:	5299      	strh	r1, [r3, r2]
}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b002      	add	sp, #8
 80043e8:	bd80      	pop	{r7, pc}

080043ea <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2280      	movs	r2, #128	; 0x80
 80043f6:	589b      	ldr	r3, [r3, r2]
 80043f8:	2b21      	cmp	r3, #33	; 0x21
 80043fa:	d12f      	bne.n	800445c <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2256      	movs	r2, #86	; 0x56
 8004400:	5a9b      	ldrh	r3, [r3, r2]
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d110      	bne.n	800442a <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2180      	movs	r1, #128	; 0x80
 8004414:	438a      	bics	r2, r1
 8004416:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2140      	movs	r1, #64	; 0x40
 8004424:	430a      	orrs	r2, r1
 8004426:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004428:	e018      	b.n	800445c <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800442e:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	001a      	movs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	05d2      	lsls	r2, r2, #23
 800443c:	0dd2      	lsrs	r2, r2, #23
 800443e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004444:	1c9a      	adds	r2, r3, #2
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2256      	movs	r2, #86	; 0x56
 800444e:	5a9b      	ldrh	r3, [r3, r2]
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b299      	uxth	r1, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2256      	movs	r2, #86	; 0x56
 800445a:	5299      	strh	r1, [r3, r2]
}
 800445c:	46c0      	nop			; (mov r8, r8)
 800445e:	46bd      	mov	sp, r7
 8004460:	b004      	add	sp, #16
 8004462:	bd80      	pop	{r7, pc}

08004464 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2280      	movs	r2, #128	; 0x80
 8004470:	589b      	ldr	r3, [r3, r2]
 8004472:	2b21      	cmp	r3, #33	; 0x21
 8004474:	d143      	bne.n	80044fe <UART_TxISR_8BIT_FIFOEN+0x9a>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004476:	230e      	movs	r3, #14
 8004478:	18fb      	adds	r3, r7, r3
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	216a      	movs	r1, #106	; 0x6a
 800447e:	5a52      	ldrh	r2, [r2, r1]
 8004480:	801a      	strh	r2, [r3, #0]
 8004482:	e037      	b.n	80044f4 <UART_TxISR_8BIT_FIFOEN+0x90>
    {
      if (huart->TxXferCount == 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2256      	movs	r2, #86	; 0x56
 8004488:	5a9b      	ldrh	r3, [r3, r2]
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d111      	bne.n	80044b4 <UART_TxISR_8BIT_FIFOEN+0x50>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	491b      	ldr	r1, [pc, #108]	; (8004508 <UART_TxISR_8BIT_FIFOEN+0xa4>)
 800449c:	400a      	ands	r2, r1
 800449e:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2140      	movs	r1, #64	; 0x40
 80044ac:	430a      	orrs	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80044b0:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80044b2:	e024      	b.n	80044fe <UART_TxISR_8BIT_FIFOEN+0x9a>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	2280      	movs	r2, #128	; 0x80
 80044bc:	4013      	ands	r3, r2
 80044be:	d013      	beq.n	80044e8 <UART_TxISR_8BIT_FIFOEN+0x84>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c4:	781a      	ldrb	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2256      	movs	r2, #86	; 0x56
 80044da:	5a9b      	ldrh	r3, [r3, r2]
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b299      	uxth	r1, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2256      	movs	r2, #86	; 0x56
 80044e6:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80044e8:	210e      	movs	r1, #14
 80044ea:	187b      	adds	r3, r7, r1
 80044ec:	881a      	ldrh	r2, [r3, #0]
 80044ee:	187b      	adds	r3, r7, r1
 80044f0:	3a01      	subs	r2, #1
 80044f2:	801a      	strh	r2, [r3, #0]
 80044f4:	230e      	movs	r3, #14
 80044f6:	18fb      	adds	r3, r7, r3
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1c2      	bne.n	8004484 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	b004      	add	sp, #16
 8004504:	bd80      	pop	{r7, pc}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	ff7fffff 	.word	0xff7fffff

0800450c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2280      	movs	r2, #128	; 0x80
 8004518:	589b      	ldr	r3, [r3, r2]
 800451a:	2b21      	cmp	r3, #33	; 0x21
 800451c:	d148      	bne.n	80045b0 <UART_TxISR_16BIT_FIFOEN+0xa4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800451e:	230e      	movs	r3, #14
 8004520:	18fb      	adds	r3, r7, r3
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	216a      	movs	r1, #106	; 0x6a
 8004526:	5a52      	ldrh	r2, [r2, r1]
 8004528:	801a      	strh	r2, [r3, #0]
 800452a:	e03c      	b.n	80045a6 <UART_TxISR_16BIT_FIFOEN+0x9a>
    {
      if (huart->TxXferCount == 0U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2256      	movs	r2, #86	; 0x56
 8004530:	5a9b      	ldrh	r3, [r3, r2]
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d111      	bne.n	800455c <UART_TxISR_16BIT_FIFOEN+0x50>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	491d      	ldr	r1, [pc, #116]	; (80045b8 <UART_TxISR_16BIT_FIFOEN+0xac>)
 8004544:	400a      	ands	r2, r1
 8004546:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2140      	movs	r1, #64	; 0x40
 8004554:	430a      	orrs	r2, r1
 8004556:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8004558:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800455a:	e029      	b.n	80045b0 <UART_TxISR_16BIT_FIFOEN+0xa4>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	2280      	movs	r2, #128	; 0x80
 8004564:	4013      	ands	r3, r2
 8004566:	d018      	beq.n	800459a <UART_TxISR_16BIT_FIFOEN+0x8e>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456c:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	001a      	movs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	05d2      	lsls	r2, r2, #23
 800457a:	0dd2      	lsrs	r2, r2, #23
 800457c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004582:	1c9a      	adds	r2, r3, #2
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2256      	movs	r2, #86	; 0x56
 800458c:	5a9b      	ldrh	r3, [r3, r2]
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b299      	uxth	r1, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2256      	movs	r2, #86	; 0x56
 8004598:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800459a:	210e      	movs	r1, #14
 800459c:	187b      	adds	r3, r7, r1
 800459e:	881a      	ldrh	r2, [r3, #0]
 80045a0:	187b      	adds	r3, r7, r1
 80045a2:	3a01      	subs	r2, #1
 80045a4:	801a      	strh	r2, [r3, #0]
 80045a6:	230e      	movs	r3, #14
 80045a8:	18fb      	adds	r3, r7, r3
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1bd      	bne.n	800452c <UART_TxISR_16BIT_FIFOEN+0x20>
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b004      	add	sp, #16
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	ff7fffff 	.word	0xff7fffff

080045bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2140      	movs	r1, #64	; 0x40
 80045d0:	438a      	bics	r2, r1
 80045d2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2280      	movs	r2, #128	; 0x80
 80045d8:	2120      	movs	r1, #32
 80045da:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	0018      	movs	r0, r3
 80045e6:	f7fe fc3f 	bl	8002e68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b002      	add	sp, #8
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e05d      	b.n	80046c8 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2280      	movs	r2, #128	; 0x80
 8004610:	589b      	ldr	r3, [r3, r2]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d107      	bne.n	8004626 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	227c      	movs	r2, #124	; 0x7c
 800461a:	2100      	movs	r1, #0
 800461c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	0018      	movs	r0, r3
 8004622:	f002 f969 	bl	80068f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2280      	movs	r2, #128	; 0x80
 800462a:	2124      	movs	r1, #36	; 0x24
 800462c:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2101      	movs	r1, #1
 800463a:	438a      	bics	r2, r1
 800463c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	0018      	movs	r0, r3
 8004642:	f7fe fc21 	bl	8002e88 <UART_SetConfig>
 8004646:	0003      	movs	r3, r0
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_RS485Ex_Init+0x5c>
  {
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e03b      	b.n	80046c8 <HAL_RS485Ex_Init+0xd4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_RS485Ex_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	0018      	movs	r0, r3
 800465c:	f7ff fd08 	bl	8004070 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2180      	movs	r1, #128	; 0x80
 800466c:	01c9      	lsls	r1, r1, #7
 800466e:	430a      	orrs	r2, r1
 8004670:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	4a15      	ldr	r2, [pc, #84]	; (80046d0 <HAL_RS485Ex_Init+0xdc>)
 800467a:	4013      	ands	r3, r2
 800467c:	0019      	movs	r1, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	430a      	orrs	r2, r1
 8004686:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	055b      	lsls	r3, r3, #21
 800468c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	041b      	lsls	r3, r3, #16
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a0d      	ldr	r2, [pc, #52]	; (80046d4 <HAL_RS485Ex_Init+0xe0>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	0019      	movs	r1, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2101      	movs	r1, #1
 80046ba:	430a      	orrs	r2, r1
 80046bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	0018      	movs	r0, r3
 80046c2:	f7ff fd89 	bl	80041d8 <UART_CheckIdleState>
 80046c6:	0003      	movs	r3, r0
}
 80046c8:	0018      	movs	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b006      	add	sp, #24
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	ffff7fff 	.word	0xffff7fff
 80046d4:	fc00ffff 	.word	0xfc00ffff

080046d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b002      	add	sp, #8
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80046f0:	46c0      	nop			; (mov r8, r8)
 80046f2:	46bd      	mov	sp, r7
 80046f4:	b002      	add	sp, #8
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004700:	46c0      	nop			; (mov r8, r8)
 8004702:	46bd      	mov	sp, r7
 8004704:	b002      	add	sp, #8
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	227c      	movs	r2, #124	; 0x7c
 8004714:	5c9b      	ldrb	r3, [r3, r2]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_UARTEx_DisableFifoMode+0x16>
 800471a:	2302      	movs	r3, #2
 800471c:	e027      	b.n	800476e <HAL_UARTEx_DisableFifoMode+0x66>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	227c      	movs	r2, #124	; 0x7c
 8004722:	2101      	movs	r1, #1
 8004724:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2280      	movs	r2, #128	; 0x80
 800472a:	2124      	movs	r1, #36	; 0x24
 800472c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2101      	movs	r1, #1
 8004742:	438a      	bics	r2, r1
 8004744:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4a0b      	ldr	r2, [pc, #44]	; (8004778 <HAL_UARTEx_DisableFifoMode+0x70>)
 800474a:	4013      	ands	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2280      	movs	r2, #128	; 0x80
 8004760:	2120      	movs	r1, #32
 8004762:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	227c      	movs	r2, #124	; 0x7c
 8004768:	2100      	movs	r1, #0
 800476a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	0018      	movs	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	b004      	add	sp, #16
 8004774:	bd80      	pop	{r7, pc}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	dfffffff 	.word	0xdfffffff

0800477c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	227c      	movs	r2, #124	; 0x7c
 800478a:	5c9b      	ldrb	r3, [r3, r2]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004790:	2302      	movs	r3, #2
 8004792:	e02e      	b.n	80047f2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	227c      	movs	r2, #124	; 0x7c
 8004798:	2101      	movs	r1, #1
 800479a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2280      	movs	r2, #128	; 0x80
 80047a0:	2124      	movs	r1, #36	; 0x24
 80047a2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2101      	movs	r1, #1
 80047b8:	438a      	bics	r2, r1
 80047ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	08d9      	lsrs	r1, r3, #3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	0018      	movs	r0, r3
 80047d4:	f000 f854 	bl	8004880 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2280      	movs	r2, #128	; 0x80
 80047e4:	2120      	movs	r1, #32
 80047e6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	227c      	movs	r2, #124	; 0x7c
 80047ec:	2100      	movs	r1, #0
 80047ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	0018      	movs	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b004      	add	sp, #16
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	227c      	movs	r2, #124	; 0x7c
 800480a:	5c9b      	ldrb	r3, [r3, r2]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004810:	2302      	movs	r3, #2
 8004812:	e02f      	b.n	8004874 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	227c      	movs	r2, #124	; 0x7c
 8004818:	2101      	movs	r1, #1
 800481a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2280      	movs	r2, #128	; 0x80
 8004820:	2124      	movs	r1, #36	; 0x24
 8004822:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2101      	movs	r1, #1
 8004838:	438a      	bics	r2, r1
 800483a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	4a0e      	ldr	r2, [pc, #56]	; (800487c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004844:	4013      	ands	r3, r2
 8004846:	0019      	movs	r1, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	0018      	movs	r0, r3
 8004856:	f000 f813 	bl	8004880 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2280      	movs	r2, #128	; 0x80
 8004866:	2120      	movs	r1, #32
 8004868:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	227c      	movs	r2, #124	; 0x7c
 800486e:	2100      	movs	r1, #0
 8004870:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	0018      	movs	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	b004      	add	sp, #16
 800487a:	bd80      	pop	{r7, pc}
 800487c:	f1ffffff 	.word	0xf1ffffff

08004880 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004882:	b089      	sub	sp, #36	; 0x24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004888:	2314      	movs	r3, #20
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	4a2f      	ldr	r2, [pc, #188]	; (800494c <UARTEx_SetNbDataToProcess+0xcc>)
 800488e:	ca03      	ldmia	r2!, {r0, r1}
 8004890:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004892:	230c      	movs	r3, #12
 8004894:	18fb      	adds	r3, r7, r3
 8004896:	4a2e      	ldr	r2, [pc, #184]	; (8004950 <UARTEx_SetNbDataToProcess+0xd0>)
 8004898:	ca03      	ldmia	r2!, {r0, r1}
 800489a:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d108      	bne.n	80048b6 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	226a      	movs	r2, #106	; 0x6a
 80048a8:	2101      	movs	r1, #1
 80048aa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2268      	movs	r2, #104	; 0x68
 80048b0:	2101      	movs	r1, #1
 80048b2:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048b4:	e046      	b.n	8004944 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048b6:	261f      	movs	r6, #31
 80048b8:	19bb      	adds	r3, r7, r6
 80048ba:	2208      	movs	r2, #8
 80048bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048be:	201e      	movs	r0, #30
 80048c0:	183b      	adds	r3, r7, r0
 80048c2:	2208      	movs	r2, #8
 80048c4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	0e5b      	lsrs	r3, r3, #25
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	241d      	movs	r4, #29
 80048d2:	193b      	adds	r3, r7, r4
 80048d4:	2107      	movs	r1, #7
 80048d6:	400a      	ands	r2, r1
 80048d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	0f5b      	lsrs	r3, r3, #29
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	251c      	movs	r5, #28
 80048e6:	197b      	adds	r3, r7, r5
 80048e8:	2107      	movs	r1, #7
 80048ea:	400a      	ands	r2, r1
 80048ec:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80048ee:	183b      	adds	r3, r7, r0
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	197a      	adds	r2, r7, r5
 80048f4:	7812      	ldrb	r2, [r2, #0]
 80048f6:	2114      	movs	r1, #20
 80048f8:	1879      	adds	r1, r7, r1
 80048fa:	5c8a      	ldrb	r2, [r1, r2]
 80048fc:	435a      	muls	r2, r3
 80048fe:	0010      	movs	r0, r2
 8004900:	197b      	adds	r3, r7, r5
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	250c      	movs	r5, #12
 8004906:	197a      	adds	r2, r7, r5
 8004908:	5cd3      	ldrb	r3, [r2, r3]
 800490a:	0019      	movs	r1, r3
 800490c:	f7fb fc8c 	bl	8000228 <__divsi3>
 8004910:	0003      	movs	r3, r0
 8004912:	b299      	uxth	r1, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	226a      	movs	r2, #106	; 0x6a
 8004918:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800491a:	19bb      	adds	r3, r7, r6
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	193a      	adds	r2, r7, r4
 8004920:	7812      	ldrb	r2, [r2, #0]
 8004922:	2114      	movs	r1, #20
 8004924:	1879      	adds	r1, r7, r1
 8004926:	5c8a      	ldrb	r2, [r1, r2]
 8004928:	435a      	muls	r2, r3
 800492a:	0010      	movs	r0, r2
 800492c:	193b      	adds	r3, r7, r4
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	197a      	adds	r2, r7, r5
 8004932:	5cd3      	ldrb	r3, [r2, r3]
 8004934:	0019      	movs	r1, r3
 8004936:	f7fb fc77 	bl	8000228 <__divsi3>
 800493a:	0003      	movs	r3, r0
 800493c:	b299      	uxth	r1, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2268      	movs	r2, #104	; 0x68
 8004942:	5299      	strh	r1, [r3, r2]
}
 8004944:	46c0      	nop			; (mov r8, r8)
 8004946:	46bd      	mov	sp, r7
 8004948:	b009      	add	sp, #36	; 0x24
 800494a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800494c:	0800795c 	.word	0x0800795c
 8004950:	08007964 	.word	0x08007964

08004954 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	2380      	movs	r3, #128	; 0x80
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	401a      	ands	r2, r3
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	429a      	cmp	r2, r3
 800496e:	d10f      	bne.n	8004990 <HAL_WWDG_IRQHandler+0x3c>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	2201      	movs	r2, #1
 8004978:	4013      	ands	r3, r2
 800497a:	2b01      	cmp	r3, #1
 800497c:	d108      	bne.n	8004990 <HAL_WWDG_IRQHandler+0x3c>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2202      	movs	r2, #2
 8004984:	4252      	negs	r2, r2
 8004986:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	0018      	movs	r0, r3
 800498c:	f000 f804 	bl	8004998 <HAL_WWDG_EarlyWakeupCallback>
#endif
    }
  }
}
 8004990:	46c0      	nop			; (mov r8, r8)
 8004992:	46bd      	mov	sp, r7
 8004994:	b002      	add	sp, #8
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 80049a0:	46c0      	nop			; (mov r8, r8)
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b002      	add	sp, #8
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <BurnFeedback>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "burn_feedback.h"

uint32_t BurnFeedback(struct StateVars *ctrl)
{
 80049a8:	b590      	push	{r4, r7, lr}
 80049aa:	b0c9      	sub	sp, #292	; 0x124
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 80049b0:	2300      	movs	r3, #0
 80049b2:	228e      	movs	r2, #142	; 0x8e
 80049b4:	0052      	lsls	r2, r2, #1
 80049b6:	18ba      	adds	r2, r7, r2
 80049b8:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 80049ba:	2300      	movs	r3, #0
 80049bc:	228c      	movs	r2, #140	; 0x8c
 80049be:	0052      	lsls	r2, r2, #1
 80049c0:	18ba      	adds	r2, r7, r2
 80049c2:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	228a      	movs	r2, #138	; 0x8a
 80049c8:	0052      	lsls	r2, r2, #1
 80049ca:	18ba      	adds	r2, r7, r2
 80049cc:	6013      	str	r3, [r2, #0]
	uint32_t now = HAL_GetTick();
 80049ce:	f7fb fe9d 	bl	800070c <HAL_GetTick>
 80049d2:	0003      	movs	r3, r0
 80049d4:	2288      	movs	r2, #136	; 0x88
 80049d6:	0052      	lsls	r2, r2, #1
 80049d8:	18ba      	adds	r2, r7, r2
 80049da:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 80049dc:	2308      	movs	r3, #8
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	2286      	movs	r2, #134	; 0x86
 80049e2:	0052      	lsls	r2, r2, #1
 80049e4:	18ba      	adds	r2, r7, r2
 80049e6:	6013      	str	r3, [r2, #0]
	//TODO Specify a real timeout
	uint32_t TIMEOUT = 2000;
 80049e8:	23fa      	movs	r3, #250	; 0xfa
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	2284      	movs	r2, #132	; 0x84
 80049ee:	0052      	lsls	r2, r2, #1
 80049f0:	18ba      	adds	r2, r7, r2
 80049f2:	6013      	str	r3, [r2, #0]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	7c5b      	ldrb	r3, [r3, #17]
 80049f8:	0018      	movs	r0, r3
 80049fa:	f002 f8f1 	bl	8006be0 <VerifyState>
 80049fe:	1e03      	subs	r3, r0, #0
 8004a00:	d073      	beq.n	8004aea <BurnFeedback+0x142>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	7c1b      	ldrb	r3, [r3, #16]
 8004a06:	0018      	movs	r0, r3
 8004a08:	f002 f8ea 	bl	8006be0 <VerifyState>
 8004a0c:	1e03      	subs	r3, r0, #0
 8004a0e:	d06c      	beq.n	8004aea <BurnFeedback+0x142>
    {
    	if((ctrl->currentState & BURN_FEEDBACK) == BURN_FEEDBACK){
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	7c5b      	ldrb	r3, [r3, #17]
 8004a14:	001a      	movs	r2, r3
 8004a16:	2308      	movs	r3, #8
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d054      	beq.n	8004ac6 <BurnFeedback+0x11e>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 1 | 1 | 0 | 0 | 0 | 0 | 1 | 1

    	    // If this is the first time, mark time
    		if(ctrl->currentState != ctrl->lastState)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	7c5a      	ldrb	r2, [r3, #17]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	7c1b      	ldrb	r3, [r3, #16]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d004      	beq.n	8004a32 <BurnFeedback+0x8a>
    	    {
    	    	ctrl->timeStarted = HAL_GetTick();
 8004a28:	f7fb fe70 	bl	800070c <HAL_GetTick>
 8004a2c:	0002      	movs	r2, r0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	601a      	str	r2, [r3, #0]
    	    }

    		// Set Valve States
    		valve_target |= ((uint16_t)PV2 	\
 8004a32:	248a      	movs	r4, #138	; 0x8a
 8004a34:	0064      	lsls	r4, r4, #1
 8004a36:	193b      	adds	r3, r7, r4
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	22c3      	movs	r2, #195	; 0xc3
 8004a3c:	0052      	lsls	r2, r2, #1
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	193a      	adds	r2, r7, r4
 8004a42:	6013      	str	r3, [r2, #0]
    					 |(uint16_t)PV3 	\
    					 |(uint16_t)MV1 	\
						 |(uint16_t)MV2);
    		valve_configuration = StateConfiguration();
 8004a44:	f002 f8f0 	bl	8006c28 <StateConfiguration>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	218c      	movs	r1, #140	; 0x8c
 8004a4c:	0049      	lsls	r1, r1, #1
 8004a4e:	187a      	adds	r2, r7, r1
 8004a50:	6013      	str	r3, [r2, #0]
    		// Change State conditions
    		ctrl->lastState = ctrl->currentState;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	7c5a      	ldrb	r2, [r3, #17]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	741a      	strb	r2, [r3, #16]
    		ctrl->currentState = BURN_FEEDBACK;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2208      	movs	r2, #8
 8004a5e:	745a      	strb	r2, [r3, #17]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8004a60:	187b      	adds	r3, r7, r1
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	193b      	adds	r3, r7, r4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	425a      	negs	r2, r3
 8004a6c:	4153      	adcs	r3, r2
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	228e      	movs	r2, #142	; 0x8e
 8004a72:	0052      	lsls	r2, r2, #1
 8004a74:	18ba      	adds	r2, r7, r2
 8004a76:	6013      	str	r3, [r2, #0]

    		//TODO Specify time frame
    		if(now - ctrl->timeStarted > TIMEOUT)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2288      	movs	r2, #136	; 0x88
 8004a7e:	0052      	lsls	r2, r2, #1
 8004a80:	18ba      	adds	r2, r7, r2
 8004a82:	6812      	ldr	r2, [r2, #0]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2284      	movs	r2, #132	; 0x84
 8004a88:	0052      	lsls	r2, r2, #1
 8004a8a:	18ba      	adds	r2, r7, r2
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d202      	bcs.n	8004a98 <BurnFeedback+0xf0>
    		{
        		ctrl->currentState = BURN_TERMINATION_1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2209      	movs	r2, #9
 8004a96:	745a      	strb	r2, [r3, #17]
    		}

    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8004a98:	238e      	movs	r3, #142	; 0x8e
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	18fb      	adds	r3, r7, r3
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	238c      	movs	r3, #140	; 0x8c
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	18fb      	adds	r3, r7, r3
 8004aa6:	6819      	ldr	r1, [r3, #0]
 8004aa8:	2486      	movs	r4, #134	; 0x86
 8004aaa:	0064      	lsls	r4, r4, #1
 8004aac:	193b      	adds	r3, r7, r4
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f001 f925 	bl	8005d00 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8004ab6:	193b      	adds	r3, r7, r4
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4b19      	ldr	r3, [pc, #100]	; (8004b20 <BurnFeedback+0x178>)
 8004abc:	0011      	movs	r1, r2
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f002 f9fe 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & BURN_FEEDBACK) == BURN_FEEDBACK){
 8004ac4:	e023      	b.n	8004b0e <BurnFeedback+0x166>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, BURN_FEEDBACK, ctrl->currentState);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	7c5a      	ldrb	r2, [r3, #17]
 8004aca:	2486      	movs	r4, #134	; 0x86
 8004acc:	0064      	lsls	r4, r4, #1
 8004ace:	193b      	adds	r3, r7, r4
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2108      	movs	r1, #8
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f001 f805 	bl	8005ae4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8004ada:	193b      	adds	r3, r7, r4
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <BurnFeedback+0x178>)
 8004ae0:	0011      	movs	r1, r2
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	f002 f9ec 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & BURN_FEEDBACK) == BURN_FEEDBACK){
 8004ae8:	e011      	b.n	8004b0e <BurnFeedback+0x166>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, ctrl->currentState, ctrl->lastState);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	7c59      	ldrb	r1, [r3, #17]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	7c1a      	ldrb	r2, [r3, #16]
 8004af2:	2486      	movs	r4, #134	; 0x86
 8004af4:	0064      	lsls	r4, r4, #1
 8004af6:	193b      	adds	r3, r7, r4
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	0018      	movs	r0, r3
 8004afc:	f001 f886 	bl	8005c0c <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8004b00:	193b      	adds	r3, r7, r4
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <BurnFeedback+0x178>)
 8004b06:	0011      	movs	r1, r2
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f002 f9d9 	bl	8006ec0 <UART_SendMessage>
    }
	return success;
 8004b0e:	238e      	movs	r3, #142	; 0x8e
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	18fb      	adds	r3, r7, r3
 8004b14:	681b      	ldr	r3, [r3, #0]
}
 8004b16:	0018      	movs	r0, r3
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	b049      	add	sp, #292	; 0x124
 8004b1c:	bd90      	pop	{r4, r7, pc}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	2000009c 	.word	0x2000009c

08004b24 <BurnInitiated>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "burn_initiated.h"

uint32_t BurnInitiated(struct StateVars *ctrl)
{
 8004b24:	b590      	push	{r4, r7, lr}
 8004b26:	b0c9      	sub	sp, #292	; 0x124
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	228e      	movs	r2, #142	; 0x8e
 8004b30:	0052      	lsls	r2, r2, #1
 8004b32:	18ba      	adds	r2, r7, r2
 8004b34:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8004b36:	2300      	movs	r3, #0
 8004b38:	228c      	movs	r2, #140	; 0x8c
 8004b3a:	0052      	lsls	r2, r2, #1
 8004b3c:	18ba      	adds	r2, r7, r2
 8004b3e:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	228a      	movs	r2, #138	; 0x8a
 8004b44:	0052      	lsls	r2, r2, #1
 8004b46:	18ba      	adds	r2, r7, r2
 8004b48:	6013      	str	r3, [r2, #0]
	char message[PRINT_BUFFER_SIZE];
	char *msgPtr = message;
 8004b4a:	2308      	movs	r3, #8
 8004b4c:	18fb      	adds	r3, r7, r3
 8004b4e:	2288      	movs	r2, #136	; 0x88
 8004b50:	0052      	lsls	r2, r2, #1
 8004b52:	18ba      	adds	r2, r7, r2
 8004b54:	6013      	str	r3, [r2, #0]

	uint32_t now = HAL_GetTick();
 8004b56:	f7fb fdd9 	bl	800070c <HAL_GetTick>
 8004b5a:	0003      	movs	r3, r0
 8004b5c:	2286      	movs	r2, #134	; 0x86
 8004b5e:	0052      	lsls	r2, r2, #1
 8004b60:	18ba      	adds	r2, r7, r2
 8004b62:	6013      	str	r3, [r2, #0]
	uint32_t TIMEOUT = 2000;
 8004b64:	23fa      	movs	r3, #250	; 0xfa
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	2284      	movs	r2, #132	; 0x84
 8004b6a:	0052      	lsls	r2, r2, #1
 8004b6c:	18ba      	adds	r2, r7, r2
 8004b6e:	6013      	str	r3, [r2, #0]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	7c5b      	ldrb	r3, [r3, #17]
 8004b74:	0018      	movs	r0, r3
 8004b76:	f002 f833 	bl	8006be0 <VerifyState>
 8004b7a:	1e03      	subs	r3, r0, #0
 8004b7c:	d100      	bne.n	8004b80 <BurnInitiated+0x5c>
 8004b7e:	e079      	b.n	8004c74 <BurnInitiated+0x150>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	7c1b      	ldrb	r3, [r3, #16]
 8004b84:	0018      	movs	r0, r3
 8004b86:	f002 f82b 	bl	8006be0 <VerifyState>
 8004b8a:	1e03      	subs	r3, r0, #0
 8004b8c:	d072      	beq.n	8004c74 <BurnInitiated+0x150>
    {
    	if((ctrl->currentState & BURN_INITIATED) == BURN_INITIATED){
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	7c5b      	ldrb	r3, [r3, #17]
 8004b92:	001a      	movs	r2, r3
 8004b94:	2307      	movs	r3, #7
 8004b96:	4013      	ands	r3, r2
 8004b98:	2b07      	cmp	r3, #7
 8004b9a:	d159      	bne.n	8004c50 <BurnInitiated+0x12c>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 1|  1|  0|  0|  1| 1 | 1 | 1

    	    // If this is the first time, mark time
    		if(ctrl->currentState != ctrl->lastState)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	7c5a      	ldrb	r2, [r3, #17]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	7c1b      	ldrb	r3, [r3, #16]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d004      	beq.n	8004bb2 <BurnInitiated+0x8e>
    	    {
    	    	ctrl->timeStarted = HAL_GetTick();
 8004ba8:	f7fb fdb0 	bl	800070c <HAL_GetTick>
 8004bac:	0002      	movs	r2, r0
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	601a      	str	r2, [r3, #0]
    	    }

    		// Set Valve States
    		valve_target |= ((uint16_t)PV2 	\
 8004bb2:	248a      	movs	r4, #138	; 0x8a
 8004bb4:	0064      	lsls	r4, r4, #1
 8004bb6:	193b      	adds	r3, r7, r4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	22f3      	movs	r2, #243	; 0xf3
 8004bbc:	0052      	lsls	r2, r2, #1
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	193a      	adds	r2, r7, r4
 8004bc2:	6013      	str	r3, [r2, #0]
						 |(uint16_t)IV1 	\
						 |(uint16_t)IV2 	\
    					 |(uint16_t)MV1 	\
						 |(uint16_t)MV2);
    		// Change State conditions
    		ValveStateSetter(valve_target);
 8004bc4:	193b      	adds	r3, r7, r4
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f002 f8b1 	bl	8006d30 <ValveStateSetter>
    		valve_configuration = StateConfiguration();
 8004bce:	f002 f82b 	bl	8006c28 <StateConfiguration>
 8004bd2:	0003      	movs	r3, r0
 8004bd4:	218c      	movs	r1, #140	; 0x8c
 8004bd6:	0049      	lsls	r1, r1, #1
 8004bd8:	187a      	adds	r2, r7, r1
 8004bda:	6013      	str	r3, [r2, #0]

    		ctrl->lastState = ctrl->currentState;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	7c5a      	ldrb	r2, [r3, #17]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	741a      	strb	r2, [r3, #16]
    		ctrl->currentState =BURN_INITIATED;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2207      	movs	r2, #7
 8004be8:	745a      	strb	r2, [r3, #17]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8004bea:	187b      	adds	r3, r7, r1
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	193b      	adds	r3, r7, r4
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	425a      	negs	r2, r3
 8004bf6:	4153      	adcs	r3, r2
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	228e      	movs	r2, #142	; 0x8e
 8004bfc:	0052      	lsls	r2, r2, #1
 8004bfe:	18ba      	adds	r2, r7, r2
 8004c00:	6013      	str	r3, [r2, #0]

    		//TODO Specify time frame
    		if(now - ctrl->timeStarted > TIMEOUT)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2286      	movs	r2, #134	; 0x86
 8004c08:	0052      	lsls	r2, r2, #1
 8004c0a:	18ba      	adds	r2, r7, r2
 8004c0c:	6812      	ldr	r2, [r2, #0]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2284      	movs	r2, #132	; 0x84
 8004c12:	0052      	lsls	r2, r2, #1
 8004c14:	18ba      	adds	r2, r7, r2
 8004c16:	6812      	ldr	r2, [r2, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d202      	bcs.n	8004c22 <BurnInitiated+0xfe>
    		{
        		ctrl->currentState= BURN_FEEDBACK;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2208      	movs	r2, #8
 8004c20:	745a      	strb	r2, [r3, #17]
    		}

    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8004c22:	238e      	movs	r3, #142	; 0x8e
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	18fb      	adds	r3, r7, r3
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	238c      	movs	r3, #140	; 0x8c
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	18fb      	adds	r3, r7, r3
 8004c30:	6819      	ldr	r1, [r3, #0]
 8004c32:	2488      	movs	r4, #136	; 0x88
 8004c34:	0064      	lsls	r4, r4, #1
 8004c36:	193b      	adds	r3, r7, r4
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	f001 f860 	bl	8005d00 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8004c40:	193b      	adds	r3, r7, r4
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	4b18      	ldr	r3, [pc, #96]	; (8004ca8 <BurnInitiated+0x184>)
 8004c46:	0011      	movs	r1, r2
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f002 f939 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & BURN_INITIATED) == BURN_INITIATED){
 8004c4e:	e023      	b.n	8004c98 <BurnInitiated+0x174>

    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, BURN_INITIATED, ctrl->currentState);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	7c5a      	ldrb	r2, [r3, #17]
 8004c54:	2488      	movs	r4, #136	; 0x88
 8004c56:	0064      	lsls	r4, r4, #1
 8004c58:	193b      	adds	r3, r7, r4
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2107      	movs	r1, #7
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f000 ff40 	bl	8005ae4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8004c64:	193b      	adds	r3, r7, r4
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <BurnInitiated+0x184>)
 8004c6a:	0011      	movs	r1, r2
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f002 f927 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & BURN_INITIATED) == BURN_INITIATED){
 8004c72:	e011      	b.n	8004c98 <BurnInitiated+0x174>
    	}

    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, ctrl->currentState, ctrl->lastState);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	7c59      	ldrb	r1, [r3, #17]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	7c1a      	ldrb	r2, [r3, #16]
 8004c7c:	2488      	movs	r4, #136	; 0x88
 8004c7e:	0064      	lsls	r4, r4, #1
 8004c80:	193b      	adds	r3, r7, r4
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	0018      	movs	r0, r3
 8004c86:	f000 ffc1 	bl	8005c0c <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8004c8a:	193b      	adds	r3, r7, r4
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <BurnInitiated+0x184>)
 8004c90:	0011      	movs	r1, r2
 8004c92:	0018      	movs	r0, r3
 8004c94:	f002 f914 	bl	8006ec0 <UART_SendMessage>
    }
	return success;
 8004c98:	238e      	movs	r3, #142	; 0x8e
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	681b      	ldr	r3, [r3, #0]
}
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	b049      	add	sp, #292	; 0x124
 8004ca6:	bd90      	pop	{r4, r7, pc}
 8004ca8:	2000009c 	.word	0x2000009c

08004cac <BurnTermination1>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "burn_termination_1.h"

uint32_t BurnTermination1(struct StateVars *ctrl)
{
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b0c9      	sub	sp, #292	; 0x124
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	228e      	movs	r2, #142	; 0x8e
 8004cb8:	0052      	lsls	r2, r2, #1
 8004cba:	18ba      	adds	r2, r7, r2
 8004cbc:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	228c      	movs	r2, #140	; 0x8c
 8004cc2:	0052      	lsls	r2, r2, #1
 8004cc4:	18ba      	adds	r2, r7, r2
 8004cc6:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	228a      	movs	r2, #138	; 0x8a
 8004ccc:	0052      	lsls	r2, r2, #1
 8004cce:	18ba      	adds	r2, r7, r2
 8004cd0:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	2288      	movs	r2, #136	; 0x88
 8004cd8:	0052      	lsls	r2, r2, #1
 8004cda:	18ba      	adds	r2, r7, r2
 8004cdc:	6013      	str	r3, [r2, #0]

	uint32_t now = HAL_GetTick();
 8004cde:	f7fb fd15 	bl	800070c <HAL_GetTick>
 8004ce2:	0003      	movs	r3, r0
 8004ce4:	2286      	movs	r2, #134	; 0x86
 8004ce6:	0052      	lsls	r2, r2, #1
 8004ce8:	18ba      	adds	r2, r7, r2
 8004cea:	6013      	str	r3, [r2, #0]
	uint32_t TIMEOUT = 2000;
 8004cec:	23fa      	movs	r3, #250	; 0xfa
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	2284      	movs	r2, #132	; 0x84
 8004cf2:	0052      	lsls	r2, r2, #1
 8004cf4:	18ba      	adds	r2, r7, r2
 8004cf6:	6013      	str	r3, [r2, #0]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	7c5b      	ldrb	r3, [r3, #17]
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f001 ff6f 	bl	8006be0 <VerifyState>
 8004d02:	1e03      	subs	r3, r0, #0
 8004d04:	d100      	bne.n	8004d08 <BurnTermination1+0x5c>
 8004d06:	e079      	b.n	8004dfc <BurnTermination1+0x150>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	7c1b      	ldrb	r3, [r3, #16]
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f001 ff67 	bl	8006be0 <VerifyState>
 8004d12:	1e03      	subs	r3, r0, #0
 8004d14:	d072      	beq.n	8004dfc <BurnTermination1+0x150>
    {
    	if((ctrl->currentState & BURN_TERMINATION_1) == BURN_TERMINATION_1){
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	7c5b      	ldrb	r3, [r3, #17]
 8004d1a:	001a      	movs	r2, r3
 8004d1c:	2309      	movs	r3, #9
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b09      	cmp	r3, #9
 8004d22:	d159      	bne.n	8004dd8 <BurnTermination1+0x12c>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 1|  1|  0|  0|  0|  0|  1| 10

    	    // If this is the first time, mark time
    		if(ctrl->currentState != ctrl->lastState)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	7c5a      	ldrb	r2, [r3, #17]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	7c1b      	ldrb	r3, [r3, #16]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d004      	beq.n	8004d3a <BurnTermination1+0x8e>
    	    {
    	    	ctrl->timeStarted = HAL_GetTick();
 8004d30:	f7fb fcec 	bl	800070c <HAL_GetTick>
 8004d34:	0002      	movs	r2, r0
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	601a      	str	r2, [r3, #0]
    	    }

    		// Set Valve States
    		valve_target |= ((uint16_t)PV2 	\
 8004d3a:	248a      	movs	r4, #138	; 0x8a
 8004d3c:	0064      	lsls	r4, r4, #1
 8004d3e:	193b      	adds	r3, r7, r4
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	22c3      	movs	r2, #195	; 0xc3
 8004d44:	0052      	lsls	r2, r2, #1
 8004d46:	4313      	orrs	r3, r2
 8004d48:	193a      	adds	r2, r7, r4
 8004d4a:	6013      	str	r3, [r2, #0]
    					 |(uint16_t)PV3 	\
    					 |(uint16_t)MV1 	\
						 |(uint16_t)MV2);

    		ValveStateSetter(valve_target);
 8004d4c:	193b      	adds	r3, r7, r4
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	0018      	movs	r0, r3
 8004d52:	f001 ffed 	bl	8006d30 <ValveStateSetter>
    		valve_configuration = StateConfiguration();
 8004d56:	f001 ff67 	bl	8006c28 <StateConfiguration>
 8004d5a:	0003      	movs	r3, r0
 8004d5c:	218c      	movs	r1, #140	; 0x8c
 8004d5e:	0049      	lsls	r1, r1, #1
 8004d60:	187a      	adds	r2, r7, r1
 8004d62:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		ctrl->lastState = ctrl->currentState;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	7c5a      	ldrb	r2, [r3, #17]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	741a      	strb	r2, [r3, #16]
    		ctrl->currentState =BURN_TERMINATION_1;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2209      	movs	r2, #9
 8004d70:	745a      	strb	r2, [r3, #17]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8004d72:	187b      	adds	r3, r7, r1
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	193b      	adds	r3, r7, r4
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	425a      	negs	r2, r3
 8004d7e:	4153      	adcs	r3, r2
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	228e      	movs	r2, #142	; 0x8e
 8004d84:	0052      	lsls	r2, r2, #1
 8004d86:	18ba      	adds	r2, r7, r2
 8004d88:	6013      	str	r3, [r2, #0]

    		//TODO Specify time frame
    		if(now - ctrl->timeStarted > TIMEOUT)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2286      	movs	r2, #134	; 0x86
 8004d90:	0052      	lsls	r2, r2, #1
 8004d92:	18ba      	adds	r2, r7, r2
 8004d94:	6812      	ldr	r2, [r2, #0]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2284      	movs	r2, #132	; 0x84
 8004d9a:	0052      	lsls	r2, r2, #1
 8004d9c:	18ba      	adds	r2, r7, r2
 8004d9e:	6812      	ldr	r2, [r2, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d202      	bcs.n	8004daa <BurnTermination1+0xfe>
    		{
        		ctrl->currentState= BURN_TERMINATION_2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	220a      	movs	r2, #10
 8004da8:	745a      	strb	r2, [r3, #17]
    		}

    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8004daa:	238e      	movs	r3, #142	; 0x8e
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	18fb      	adds	r3, r7, r3
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	238c      	movs	r3, #140	; 0x8c
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	18fb      	adds	r3, r7, r3
 8004db8:	6819      	ldr	r1, [r3, #0]
 8004dba:	2488      	movs	r4, #136	; 0x88
 8004dbc:	0064      	lsls	r4, r4, #1
 8004dbe:	193b      	adds	r3, r7, r4
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f000 ff9c 	bl	8005d00 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8004dc8:	193b      	adds	r3, r7, r4
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4b18      	ldr	r3, [pc, #96]	; (8004e30 <BurnTermination1+0x184>)
 8004dce:	0011      	movs	r1, r2
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f002 f875 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & BURN_TERMINATION_1) == BURN_TERMINATION_1){
 8004dd6:	e023      	b.n	8004e20 <BurnTermination1+0x174>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, BURN_TERMINATION_1, ctrl->currentState);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	7c5a      	ldrb	r2, [r3, #17]
 8004ddc:	2488      	movs	r4, #136	; 0x88
 8004dde:	0064      	lsls	r4, r4, #1
 8004de0:	193b      	adds	r3, r7, r4
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2109      	movs	r1, #9
 8004de6:	0018      	movs	r0, r3
 8004de8:	f000 fe7c 	bl	8005ae4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8004dec:	193b      	adds	r3, r7, r4
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <BurnTermination1+0x184>)
 8004df2:	0011      	movs	r1, r2
 8004df4:	0018      	movs	r0, r3
 8004df6:	f002 f863 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & BURN_TERMINATION_1) == BURN_TERMINATION_1){
 8004dfa:	e011      	b.n	8004e20 <BurnTermination1+0x174>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, ctrl->currentState, ctrl->lastState);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	7c59      	ldrb	r1, [r3, #17]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	7c1a      	ldrb	r2, [r3, #16]
 8004e04:	2488      	movs	r4, #136	; 0x88
 8004e06:	0064      	lsls	r4, r4, #1
 8004e08:	193b      	adds	r3, r7, r4
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f000 fefd 	bl	8005c0c <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8004e12:	193b      	adds	r3, r7, r4
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <BurnTermination1+0x184>)
 8004e18:	0011      	movs	r1, r2
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f002 f850 	bl	8006ec0 <UART_SendMessage>
    }
	return success;
 8004e20:	238e      	movs	r3, #142	; 0x8e
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	18fb      	adds	r3, r7, r3
 8004e26:	681b      	ldr	r3, [r3, #0]
}
 8004e28:	0018      	movs	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b049      	add	sp, #292	; 0x124
 8004e2e:	bd90      	pop	{r4, r7, pc}
 8004e30:	2000009c 	.word	0x2000009c

08004e34 <BurnTermination2>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "burn_termination_2.h"

uint32_t BurnTermination2(struct StateVars *ctrl)
{
 8004e34:	b590      	push	{r4, r7, lr}
 8004e36:	b0c9      	sub	sp, #292	; 0x124
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	228e      	movs	r2, #142	; 0x8e
 8004e40:	0052      	lsls	r2, r2, #1
 8004e42:	18ba      	adds	r2, r7, r2
 8004e44:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	228c      	movs	r2, #140	; 0x8c
 8004e4a:	0052      	lsls	r2, r2, #1
 8004e4c:	18ba      	adds	r2, r7, r2
 8004e4e:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	228a      	movs	r2, #138	; 0x8a
 8004e54:	0052      	lsls	r2, r2, #1
 8004e56:	18ba      	adds	r2, r7, r2
 8004e58:	6013      	str	r3, [r2, #0]
	uint32_t now = HAL_GetTick();
 8004e5a:	f7fb fc57 	bl	800070c <HAL_GetTick>
 8004e5e:	0003      	movs	r3, r0
 8004e60:	2288      	movs	r2, #136	; 0x88
 8004e62:	0052      	lsls	r2, r2, #1
 8004e64:	18ba      	adds	r2, r7, r2
 8004e66:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8004e68:	2308      	movs	r3, #8
 8004e6a:	18fb      	adds	r3, r7, r3
 8004e6c:	2286      	movs	r2, #134	; 0x86
 8004e6e:	0052      	lsls	r2, r2, #1
 8004e70:	18ba      	adds	r2, r7, r2
 8004e72:	6013      	str	r3, [r2, #0]

	uint32_t TIMEOUT = 2000;
 8004e74:	23fa      	movs	r3, #250	; 0xfa
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	2284      	movs	r2, #132	; 0x84
 8004e7a:	0052      	lsls	r2, r2, #1
 8004e7c:	18ba      	adds	r2, r7, r2
 8004e7e:	6013      	str	r3, [r2, #0]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	7c5b      	ldrb	r3, [r3, #17]
 8004e84:	0018      	movs	r0, r3
 8004e86:	f001 feab 	bl	8006be0 <VerifyState>
 8004e8a:	1e03      	subs	r3, r0, #0
 8004e8c:	d100      	bne.n	8004e90 <BurnTermination2+0x5c>
 8004e8e:	e07e      	b.n	8004f8e <BurnTermination2+0x15a>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	7c1b      	ldrb	r3, [r3, #16]
 8004e94:	0018      	movs	r0, r3
 8004e96:	f001 fea3 	bl	8006be0 <VerifyState>
 8004e9a:	1e03      	subs	r3, r0, #0
 8004e9c:	d077      	beq.n	8004f8e <BurnTermination2+0x15a>
    {
    	if((ctrl->currentState & BURN_TERMINATION_2) == BURN_TERMINATION_2){
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	7c5b      	ldrb	r3, [r3, #17]
 8004ea2:	001a      	movs	r2, r3
 8004ea4:	230a      	movs	r3, #10
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	2b0a      	cmp	r3, #10
 8004eaa:	d15e      	bne.n	8004f6a <BurnTermination2+0x136>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 1| 1|  1|  1|  1|  0|  0| 10| 0

    	    // If this is the first time, mark time
    		if(ctrl->currentState != ctrl->lastState)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	7c5a      	ldrb	r2, [r3, #17]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	7c1b      	ldrb	r3, [r3, #16]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d004      	beq.n	8004ec2 <BurnTermination2+0x8e>
    	    {
    	    	ctrl->timeStarted = HAL_GetTick();
 8004eb8:	f7fb fc28 	bl	800070c <HAL_GetTick>
 8004ebc:	0002      	movs	r2, r0
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	601a      	str	r2, [r3, #0]
    	    }

    		valve_target |= ((uint16_t)PV1 	\
 8004ec2:	248a      	movs	r4, #138	; 0x8a
 8004ec4:	0064      	lsls	r4, r4, #1
 8004ec6:	193b      	adds	r3, r7, r4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	229f      	movs	r2, #159	; 0x9f
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	193a      	adds	r2, r7, r4
 8004ed0:	6013      	str	r3, [r2, #0]
						 |(uint16_t)PV3 	\
						 |(uint16_t)VV1 	\
    					 |(uint16_t)VV2 	\
						 |(uint16_t)MV1);
    		// Set Valve States
    		valve_target |= (uint16_t)VV1|(uint16_t)VV2;
 8004ed2:	193b      	adds	r3, r7, r4
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2218      	movs	r2, #24
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	193a      	adds	r2, r7, r4
 8004edc:	6013      	str	r3, [r2, #0]

    		// Check valves
    		ValveStateSetter(valve_target);
 8004ede:	193b      	adds	r3, r7, r4
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f001 ff24 	bl	8006d30 <ValveStateSetter>
    		valve_configuration = StateConfiguration();
 8004ee8:	f001 fe9e 	bl	8006c28 <StateConfiguration>
 8004eec:	0003      	movs	r3, r0
 8004eee:	218c      	movs	r1, #140	; 0x8c
 8004ef0:	0049      	lsls	r1, r1, #1
 8004ef2:	187a      	adds	r2, r7, r1
 8004ef4:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		ctrl->lastState = ctrl->currentState;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	7c5a      	ldrb	r2, [r3, #17]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	741a      	strb	r2, [r3, #16]
    		ctrl->currentState =BURN_TERMINATION_2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	220a      	movs	r2, #10
 8004f02:	745a      	strb	r2, [r3, #17]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8004f04:	187b      	adds	r3, r7, r1
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	193b      	adds	r3, r7, r4
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	425a      	negs	r2, r3
 8004f10:	4153      	adcs	r3, r2
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	228e      	movs	r2, #142	; 0x8e
 8004f16:	0052      	lsls	r2, r2, #1
 8004f18:	18ba      	adds	r2, r7, r2
 8004f1a:	6013      	str	r3, [r2, #0]

    		//TODO Specify time frame
    		if(now - ctrl->timeStarted > TIMEOUT)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2288      	movs	r2, #136	; 0x88
 8004f22:	0052      	lsls	r2, r2, #1
 8004f24:	18ba      	adds	r2, r7, r2
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2284      	movs	r2, #132	; 0x84
 8004f2c:	0052      	lsls	r2, r2, #1
 8004f2e:	18ba      	adds	r2, r7, r2
 8004f30:	6812      	ldr	r2, [r2, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d202      	bcs.n	8004f3c <BurnTermination2+0x108>
    		{
        		ctrl->currentState= BURN_TERMINATION_3;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	220b      	movs	r2, #11
 8004f3a:	745a      	strb	r2, [r3, #17]
    		}

    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8004f3c:	238e      	movs	r3, #142	; 0x8e
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	18fb      	adds	r3, r7, r3
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	238c      	movs	r3, #140	; 0x8c
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	18fb      	adds	r3, r7, r3
 8004f4a:	6819      	ldr	r1, [r3, #0]
 8004f4c:	2486      	movs	r4, #134	; 0x86
 8004f4e:	0064      	lsls	r4, r4, #1
 8004f50:	193b      	adds	r3, r7, r4
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	0018      	movs	r0, r3
 8004f56:	f000 fed3 	bl	8005d00 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8004f5a:	193b      	adds	r3, r7, r4
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	4b19      	ldr	r3, [pc, #100]	; (8004fc4 <BurnTermination2+0x190>)
 8004f60:	0011      	movs	r1, r2
 8004f62:	0018      	movs	r0, r3
 8004f64:	f001 ffac 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & BURN_TERMINATION_2) == BURN_TERMINATION_2){
 8004f68:	e023      	b.n	8004fb2 <BurnTermination2+0x17e>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, BURN_TERMINATION_2, ctrl->currentState);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	7c5a      	ldrb	r2, [r3, #17]
 8004f6e:	2486      	movs	r4, #134	; 0x86
 8004f70:	0064      	lsls	r4, r4, #1
 8004f72:	193b      	adds	r3, r7, r4
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	210a      	movs	r1, #10
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f000 fdb3 	bl	8005ae4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8004f7e:	193b      	adds	r3, r7, r4
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4b10      	ldr	r3, [pc, #64]	; (8004fc4 <BurnTermination2+0x190>)
 8004f84:	0011      	movs	r1, r2
 8004f86:	0018      	movs	r0, r3
 8004f88:	f001 ff9a 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & BURN_TERMINATION_2) == BURN_TERMINATION_2){
 8004f8c:	e011      	b.n	8004fb2 <BurnTermination2+0x17e>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, ctrl->currentState, ctrl->lastState);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	7c59      	ldrb	r1, [r3, #17]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	7c1a      	ldrb	r2, [r3, #16]
 8004f96:	2486      	movs	r4, #134	; 0x86
 8004f98:	0064      	lsls	r4, r4, #1
 8004f9a:	193b      	adds	r3, r7, r4
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f000 fe34 	bl	8005c0c <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8004fa4:	193b      	adds	r3, r7, r4
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <BurnTermination2+0x190>)
 8004faa:	0011      	movs	r1, r2
 8004fac:	0018      	movs	r0, r3
 8004fae:	f001 ff87 	bl	8006ec0 <UART_SendMessage>
    }
	return success;
 8004fb2:	238e      	movs	r3, #142	; 0x8e
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	18fb      	adds	r3, r7, r3
 8004fb8:	681b      	ldr	r3, [r3, #0]
}
 8004fba:	0018      	movs	r0, r3
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b049      	add	sp, #292	; 0x124
 8004fc0:	bd90      	pop	{r4, r7, pc}
 8004fc2:	46c0      	nop			; (mov r8, r8)
 8004fc4:	2000009c 	.word	0x2000009c

08004fc8 <BurnTermination3>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "burn_termination_3.h"

uint32_t BurnTermination3(struct StateVars *ctrl)
{
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b0c9      	sub	sp, #292	; 0x124
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	228e      	movs	r2, #142	; 0x8e
 8004fd4:	0052      	lsls	r2, r2, #1
 8004fd6:	18ba      	adds	r2, r7, r2
 8004fd8:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	228c      	movs	r2, #140	; 0x8c
 8004fde:	0052      	lsls	r2, r2, #1
 8004fe0:	18ba      	adds	r2, r7, r2
 8004fe2:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	228a      	movs	r2, #138	; 0x8a
 8004fe8:	0052      	lsls	r2, r2, #1
 8004fea:	18ba      	adds	r2, r7, r2
 8004fec:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8004fee:	2308      	movs	r3, #8
 8004ff0:	18fb      	adds	r3, r7, r3
 8004ff2:	2288      	movs	r2, #136	; 0x88
 8004ff4:	0052      	lsls	r2, r2, #1
 8004ff6:	18ba      	adds	r2, r7, r2
 8004ff8:	6013      	str	r3, [r2, #0]

	uint32_t now = HAL_GetTick();
 8004ffa:	f7fb fb87 	bl	800070c <HAL_GetTick>
 8004ffe:	0003      	movs	r3, r0
 8005000:	2286      	movs	r2, #134	; 0x86
 8005002:	0052      	lsls	r2, r2, #1
 8005004:	18ba      	adds	r2, r7, r2
 8005006:	6013      	str	r3, [r2, #0]
	uint32_t TIMEOUT = 2000;
 8005008:	23fa      	movs	r3, #250	; 0xfa
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	2284      	movs	r2, #132	; 0x84
 800500e:	0052      	lsls	r2, r2, #1
 8005010:	18ba      	adds	r2, r7, r2
 8005012:	6013      	str	r3, [r2, #0]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	7c5b      	ldrb	r3, [r3, #17]
 8005018:	0018      	movs	r0, r3
 800501a:	f001 fde1 	bl	8006be0 <VerifyState>
 800501e:	1e03      	subs	r3, r0, #0
 8005020:	d100      	bne.n	8005024 <BurnTermination3+0x5c>
 8005022:	e078      	b.n	8005116 <BurnTermination3+0x14e>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	7c1b      	ldrb	r3, [r3, #16]
 8005028:	0018      	movs	r0, r3
 800502a:	f001 fdd9 	bl	8006be0 <VerifyState>
 800502e:	1e03      	subs	r3, r0, #0
 8005030:	d071      	beq.n	8005116 <BurnTermination3+0x14e>
    {
    	if((ctrl->currentState & BURN_TERMINATION_3) == BURN_TERMINATION_3){
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	7c5b      	ldrb	r3, [r3, #17]
 8005036:	001a      	movs	r2, r3
 8005038:	230b      	movs	r3, #11
 800503a:	4013      	ands	r3, r2
 800503c:	2b0b      	cmp	r3, #11
 800503e:	d158      	bne.n	80050f2 <BurnTermination3+0x12a>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 1| 0|  0|  1|  1|  0|  0|  0|  0

    	    // If this is the first time, mark time
    		if(ctrl->currentState != ctrl->lastState)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	7c5a      	ldrb	r2, [r3, #17]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	7c1b      	ldrb	r3, [r3, #16]
 8005048:	429a      	cmp	r2, r3
 800504a:	d004      	beq.n	8005056 <BurnTermination3+0x8e>
    	    {
    	    	ctrl->timeStarted = HAL_GetTick();
 800504c:	f7fb fb5e 	bl	800070c <HAL_GetTick>
 8005050:	0002      	movs	r2, r0
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	601a      	str	r2, [r3, #0]
    	    }

    		// Set Valve States
    		valve_target |= ((uint16_t)PV1 	\
 8005056:	248a      	movs	r4, #138	; 0x8a
 8005058:	0064      	lsls	r4, r4, #1
 800505a:	193b      	adds	r3, r7, r4
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2219      	movs	r2, #25
 8005060:	4313      	orrs	r3, r2
 8005062:	193a      	adds	r2, r7, r4
 8005064:	6013      	str	r3, [r2, #0]
    					 |(uint16_t)VV1 	\
						 |(uint16_t)VV2);
    		// Timestamp and Log
    		ValveStateSetter(valve_target);
 8005066:	193b      	adds	r3, r7, r4
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	0018      	movs	r0, r3
 800506c:	f001 fe60 	bl	8006d30 <ValveStateSetter>
    		valve_configuration = StateConfiguration();
 8005070:	f001 fdda 	bl	8006c28 <StateConfiguration>
 8005074:	0003      	movs	r3, r0
 8005076:	218c      	movs	r1, #140	; 0x8c
 8005078:	0049      	lsls	r1, r1, #1
 800507a:	187a      	adds	r2, r7, r1
 800507c:	6013      	str	r3, [r2, #0]
    		// Change State conditions
    		ctrl->lastState = ctrl->currentState;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	7c5a      	ldrb	r2, [r3, #17]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	741a      	strb	r2, [r3, #16]
    		ctrl->currentState =BURN_TERMINATION_3;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	220b      	movs	r2, #11
 800508a:	745a      	strb	r2, [r3, #17]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 800508c:	187b      	adds	r3, r7, r1
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	193b      	adds	r3, r7, r4
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	425a      	negs	r2, r3
 8005098:	4153      	adcs	r3, r2
 800509a:	b2db      	uxtb	r3, r3
 800509c:	228e      	movs	r2, #142	; 0x8e
 800509e:	0052      	lsls	r2, r2, #1
 80050a0:	18ba      	adds	r2, r7, r2
 80050a2:	6013      	str	r3, [r2, #0]

    		//TODO Specify time frame
    		if(now - ctrl->timeStarted > TIMEOUT)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2286      	movs	r2, #134	; 0x86
 80050aa:	0052      	lsls	r2, r2, #1
 80050ac:	18ba      	adds	r2, r7, r2
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2284      	movs	r2, #132	; 0x84
 80050b4:	0052      	lsls	r2, r2, #1
 80050b6:	18ba      	adds	r2, r7, r2
 80050b8:	6812      	ldr	r2, [r2, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d202      	bcs.n	80050c4 <BurnTermination3+0xfc>
    		{
        		ctrl->currentState= PURGE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	220c      	movs	r2, #12
 80050c2:	745a      	strb	r2, [r3, #17]
    		}

    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 80050c4:	238e      	movs	r3, #142	; 0x8e
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	18fb      	adds	r3, r7, r3
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	238c      	movs	r3, #140	; 0x8c
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	18fb      	adds	r3, r7, r3
 80050d2:	6819      	ldr	r1, [r3, #0]
 80050d4:	2488      	movs	r4, #136	; 0x88
 80050d6:	0064      	lsls	r4, r4, #1
 80050d8:	193b      	adds	r3, r7, r4
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	0018      	movs	r0, r3
 80050de:	f000 fe0f 	bl	8005d00 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 80050e2:	193b      	adds	r3, r7, r4
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4b19      	ldr	r3, [pc, #100]	; (800514c <BurnTermination3+0x184>)
 80050e8:	0011      	movs	r1, r2
 80050ea:	0018      	movs	r0, r3
 80050ec:	f001 fee8 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & BURN_TERMINATION_3) == BURN_TERMINATION_3){
 80050f0:	e023      	b.n	800513a <BurnTermination3+0x172>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, BURN_TERMINATION_3, ctrl->currentState);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	7c5a      	ldrb	r2, [r3, #17]
 80050f6:	2488      	movs	r4, #136	; 0x88
 80050f8:	0064      	lsls	r4, r4, #1
 80050fa:	193b      	adds	r3, r7, r4
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	210b      	movs	r1, #11
 8005100:	0018      	movs	r0, r3
 8005102:	f000 fcef 	bl	8005ae4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8005106:	193b      	adds	r3, r7, r4
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	4b10      	ldr	r3, [pc, #64]	; (800514c <BurnTermination3+0x184>)
 800510c:	0011      	movs	r1, r2
 800510e:	0018      	movs	r0, r3
 8005110:	f001 fed6 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & BURN_TERMINATION_3) == BURN_TERMINATION_3){
 8005114:	e011      	b.n	800513a <BurnTermination3+0x172>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, ctrl->currentState, ctrl->lastState);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	7c59      	ldrb	r1, [r3, #17]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	7c1a      	ldrb	r2, [r3, #16]
 800511e:	2488      	movs	r4, #136	; 0x88
 8005120:	0064      	lsls	r4, r4, #1
 8005122:	193b      	adds	r3, r7, r4
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	0018      	movs	r0, r3
 8005128:	f000 fd70 	bl	8005c0c <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 800512c:	193b      	adds	r3, r7, r4
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	4b06      	ldr	r3, [pc, #24]	; (800514c <BurnTermination3+0x184>)
 8005132:	0011      	movs	r1, r2
 8005134:	0018      	movs	r0, r3
 8005136:	f001 fec3 	bl	8006ec0 <UART_SendMessage>
    }
	return success;
 800513a:	238e      	movs	r3, #142	; 0x8e
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	18fb      	adds	r3, r7, r3
 8005140:	681b      	ldr	r3, [r3, #0]
}
 8005142:	0018      	movs	r0, r3
 8005144:	46bd      	mov	sp, r7
 8005146:	b049      	add	sp, #292	; 0x124
 8005148:	bd90      	pop	{r4, r7, pc}
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	2000009c 	.word	0x2000009c

08005150 <Failure>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "failure.h"

uint32_t Failure(struct StateVars *ctrl)
{
 8005150:	b590      	push	{r4, r7, lr}
 8005152:	b0c7      	sub	sp, #284	; 0x11c
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8005158:	2300      	movs	r3, #0
 800515a:	228a      	movs	r2, #138	; 0x8a
 800515c:	0052      	lsls	r2, r2, #1
 800515e:	18ba      	adds	r2, r7, r2
 8005160:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	2288      	movs	r2, #136	; 0x88
 8005166:	0052      	lsls	r2, r2, #1
 8005168:	18ba      	adds	r2, r7, r2
 800516a:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 800516c:	2300      	movs	r3, #0
 800516e:	2286      	movs	r2, #134	; 0x86
 8005170:	0052      	lsls	r2, r2, #1
 8005172:	18ba      	adds	r2, r7, r2
 8005174:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8005176:	2308      	movs	r3, #8
 8005178:	18fb      	adds	r3, r7, r3
 800517a:	2284      	movs	r2, #132	; 0x84
 800517c:	0052      	lsls	r2, r2, #1
 800517e:	18ba      	adds	r2, r7, r2
 8005180:	6013      	str	r3, [r2, #0]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	7c5b      	ldrb	r3, [r3, #17]
 8005186:	0018      	movs	r0, r3
 8005188:	f001 fd2a 	bl	8006be0 <VerifyState>
 800518c:	1e03      	subs	r3, r0, #0
 800518e:	d054      	beq.n	800523a <Failure+0xea>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	7c1b      	ldrb	r3, [r3, #16]
 8005194:	0018      	movs	r0, r3
 8005196:	f001 fd23 	bl	8006be0 <VerifyState>
 800519a:	1e03      	subs	r3, r0, #0
 800519c:	d04d      	beq.n	800523a <Failure+0xea>
    {
    	if((ctrl->currentState & FAILURE) == FAILURE){
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	7c5b      	ldrb	r3, [r3, #17]
 80051a2:	001a      	movs	r2, r3
 80051a4:	230e      	movs	r3, #14
 80051a6:	4013      	ands	r3, r2
 80051a8:	2b0e      	cmp	r3, #14
 80051aa:	d134      	bne.n	8005216 <Failure+0xc6>
    		// TODO DEFINE BEHAVIOR ENTRY/EXIT
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 0|  0|  1|  1|  0|  0|  0|  0
    		// Set Valve States
    		valve_target |= ((uint16_t)VV1 	\
 80051ac:	2486      	movs	r4, #134	; 0x86
 80051ae:	0064      	lsls	r4, r4, #1
 80051b0:	193b      	adds	r3, r7, r4
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2218      	movs	r2, #24
 80051b6:	4313      	orrs	r3, r2
 80051b8:	193a      	adds	r2, r7, r4
 80051ba:	6013      	str	r3, [r2, #0]
						 |(uint16_t)VV2);

    		// Timestamp and Log
    		valve_configuration = StateConfiguration();
 80051bc:	f001 fd34 	bl	8006c28 <StateConfiguration>
 80051c0:	0003      	movs	r3, r0
 80051c2:	2188      	movs	r1, #136	; 0x88
 80051c4:	0049      	lsls	r1, r1, #1
 80051c6:	187a      	adds	r2, r7, r1
 80051c8:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		ctrl->lastState = ctrl->currentState;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	7c5a      	ldrb	r2, [r3, #17]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	741a      	strb	r2, [r3, #16]
    		ctrl->currentState =FAILURE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	220e      	movs	r2, #14
 80051d6:	745a      	strb	r2, [r3, #17]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	193b      	adds	r3, r7, r4
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	425a      	negs	r2, r3
 80051e4:	4153      	adcs	r3, r2
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	228a      	movs	r2, #138	; 0x8a
 80051ea:	0052      	lsls	r2, r2, #1
 80051ec:	18b8      	adds	r0, r7, r2
 80051ee:	6003      	str	r3, [r0, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 80051f0:	18bb      	adds	r3, r7, r2
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	187b      	adds	r3, r7, r1
 80051f6:	6819      	ldr	r1, [r3, #0]
 80051f8:	2484      	movs	r4, #132	; 0x84
 80051fa:	0064      	lsls	r4, r4, #1
 80051fc:	193b      	adds	r3, r7, r4
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	0018      	movs	r0, r3
 8005202:	f000 fd7d 	bl	8005d00 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8005206:	193b      	adds	r3, r7, r4
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	4b19      	ldr	r3, [pc, #100]	; (8005270 <Failure+0x120>)
 800520c:	0011      	movs	r1, r2
 800520e:	0018      	movs	r0, r3
 8005210:	f001 fe56 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & FAILURE) == FAILURE){
 8005214:	e023      	b.n	800525e <Failure+0x10e>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, FAILURE, ctrl->currentState);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	7c5a      	ldrb	r2, [r3, #17]
 800521a:	2484      	movs	r4, #132	; 0x84
 800521c:	0064      	lsls	r4, r4, #1
 800521e:	193b      	adds	r3, r7, r4
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	210e      	movs	r1, #14
 8005224:	0018      	movs	r0, r3
 8005226:	f000 fc5d 	bl	8005ae4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 800522a:	193b      	adds	r3, r7, r4
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	4b10      	ldr	r3, [pc, #64]	; (8005270 <Failure+0x120>)
 8005230:	0011      	movs	r1, r2
 8005232:	0018      	movs	r0, r3
 8005234:	f001 fe44 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & FAILURE) == FAILURE){
 8005238:	e011      	b.n	800525e <Failure+0x10e>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, ctrl->currentState, ctrl->lastState);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	7c59      	ldrb	r1, [r3, #17]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	7c1a      	ldrb	r2, [r3, #16]
 8005242:	2484      	movs	r4, #132	; 0x84
 8005244:	0064      	lsls	r4, r4, #1
 8005246:	193b      	adds	r3, r7, r4
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	0018      	movs	r0, r3
 800524c:	f000 fcde 	bl	8005c0c <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8005250:	193b      	adds	r3, r7, r4
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	4b06      	ldr	r3, [pc, #24]	; (8005270 <Failure+0x120>)
 8005256:	0011      	movs	r1, r2
 8005258:	0018      	movs	r0, r3
 800525a:	f001 fe31 	bl	8006ec0 <UART_SendMessage>
    }
	return success;
 800525e:	238a      	movs	r3, #138	; 0x8a
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	18fb      	adds	r3, r7, r3
 8005264:	681b      	ldr	r3, [r3, #0]
}
 8005266:	0018      	movs	r0, r3
 8005268:	46bd      	mov	sp, r7
 800526a:	b047      	add	sp, #284	; 0x11c
 800526c:	bd90      	pop	{r4, r7, pc}
 800526e:	46c0      	nop			; (mov r8, r8)
 8005270:	2000009c 	.word	0x2000009c

08005274 <Ignition>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "ignition.h"

uint32_t Ignition(struct StateVars *ctrl)
{
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b0c9      	sub	sp, #292	; 0x124
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 800527c:	2300      	movs	r3, #0
 800527e:	228e      	movs	r2, #142	; 0x8e
 8005280:	0052      	lsls	r2, r2, #1
 8005282:	18ba      	adds	r2, r7, r2
 8005284:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8005286:	2300      	movs	r3, #0
 8005288:	228c      	movs	r2, #140	; 0x8c
 800528a:	0052      	lsls	r2, r2, #1
 800528c:	18ba      	adds	r2, r7, r2
 800528e:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8005290:	2300      	movs	r3, #0
 8005292:	228a      	movs	r2, #138	; 0x8a
 8005294:	0052      	lsls	r2, r2, #1
 8005296:	18ba      	adds	r2, r7, r2
 8005298:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 800529a:	2308      	movs	r3, #8
 800529c:	18fb      	adds	r3, r7, r3
 800529e:	2288      	movs	r2, #136	; 0x88
 80052a0:	0052      	lsls	r2, r2, #1
 80052a2:	18ba      	adds	r2, r7, r2
 80052a4:	6013      	str	r3, [r2, #0]

	uint32_t now = HAL_GetTick();
 80052a6:	f7fb fa31 	bl	800070c <HAL_GetTick>
 80052aa:	0003      	movs	r3, r0
 80052ac:	2286      	movs	r2, #134	; 0x86
 80052ae:	0052      	lsls	r2, r2, #1
 80052b0:	18ba      	adds	r2, r7, r2
 80052b2:	6013      	str	r3, [r2, #0]
	uint32_t TIMEOUT = 2000;
 80052b4:	23fa      	movs	r3, #250	; 0xfa
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	2284      	movs	r2, #132	; 0x84
 80052ba:	0052      	lsls	r2, r2, #1
 80052bc:	18ba      	adds	r2, r7, r2
 80052be:	6013      	str	r3, [r2, #0]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	7c5b      	ldrb	r3, [r3, #17]
 80052c4:	0018      	movs	r0, r3
 80052c6:	f001 fc8b 	bl	8006be0 <VerifyState>
 80052ca:	1e03      	subs	r3, r0, #0
 80052cc:	d100      	bne.n	80052d0 <Ignition+0x5c>
 80052ce:	e077      	b.n	80053c0 <Ignition+0x14c>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	7c1b      	ldrb	r3, [r3, #16]
 80052d4:	0018      	movs	r0, r3
 80052d6:	f001 fc83 	bl	8006be0 <VerifyState>
 80052da:	1e03      	subs	r3, r0, #0
 80052dc:	d070      	beq.n	80053c0 <Ignition+0x14c>
    {
    	if((ctrl->currentState & IGNITION) == IGNITION){
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	7c5b      	ldrb	r3, [r3, #17]
 80052e2:	001a      	movs	r2, r3
 80052e4:	2304      	movs	r3, #4
 80052e6:	4013      	ands	r3, r2
 80052e8:	d058      	beq.n	800539c <Ignition+0x128>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 1|  1|  0|  0|  1|  1| 10| 0

    	    // If this is the first time, mark time
    		if(ctrl->currentState != ctrl->lastState)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	7c5a      	ldrb	r2, [r3, #17]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	7c1b      	ldrb	r3, [r3, #16]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d004      	beq.n	8005300 <Ignition+0x8c>
    	    {
    	    	ctrl->timeStarted = HAL_GetTick();
 80052f6:	f7fb fa09 	bl	800070c <HAL_GetTick>
 80052fa:	0002      	movs	r2, r0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	601a      	str	r2, [r3, #0]
    	    }

    		// Set Valve States
    		valve_target |= ((uint16_t)PV2 	\
 8005300:	248a      	movs	r4, #138	; 0x8a
 8005302:	0064      	lsls	r4, r4, #1
 8005304:	193b      	adds	r3, r7, r4
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	22e6      	movs	r2, #230	; 0xe6
 800530a:	4313      	orrs	r3, r2
 800530c:	193a      	adds	r2, r7, r4
 800530e:	6013      	str	r3, [r2, #0]
    					 |(uint16_t)PV3 	\
						 |(uint16_t)IV1 	\
						 |(uint16_t)IV2 	\
						 |(uint16_t)MV1);
    		// Timestamp and Log
    		ValveStateSetter(valve_target);
 8005310:	193b      	adds	r3, r7, r4
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	0018      	movs	r0, r3
 8005316:	f001 fd0b 	bl	8006d30 <ValveStateSetter>
    		valve_configuration = StateConfiguration();
 800531a:	f001 fc85 	bl	8006c28 <StateConfiguration>
 800531e:	0003      	movs	r3, r0
 8005320:	218c      	movs	r1, #140	; 0x8c
 8005322:	0049      	lsls	r1, r1, #1
 8005324:	187a      	adds	r2, r7, r1
 8005326:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		ctrl->lastState = ctrl->currentState;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	7c5a      	ldrb	r2, [r3, #17]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	741a      	strb	r2, [r3, #16]
    		ctrl->currentState =IGNITION;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2204      	movs	r2, #4
 8005334:	745a      	strb	r2, [r3, #17]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8005336:	187b      	adds	r3, r7, r1
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	193b      	adds	r3, r7, r4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	425a      	negs	r2, r3
 8005342:	4153      	adcs	r3, r2
 8005344:	b2db      	uxtb	r3, r3
 8005346:	228e      	movs	r2, #142	; 0x8e
 8005348:	0052      	lsls	r2, r2, #1
 800534a:	18ba      	adds	r2, r7, r2
 800534c:	6013      	str	r3, [r2, #0]

    		//TODO Specify time frame
    		if(now - ctrl->timeStarted > TIMEOUT)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2286      	movs	r2, #134	; 0x86
 8005354:	0052      	lsls	r2, r2, #1
 8005356:	18ba      	adds	r2, r7, r2
 8005358:	6812      	ldr	r2, [r2, #0]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2284      	movs	r2, #132	; 0x84
 800535e:	0052      	lsls	r2, r2, #1
 8005360:	18ba      	adds	r2, r7, r2
 8005362:	6812      	ldr	r2, [r2, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d202      	bcs.n	800536e <Ignition+0xfa>
    		{
        		ctrl->currentState = LOX_INTRO;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2205      	movs	r2, #5
 800536c:	745a      	strb	r2, [r3, #17]
    		}

    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 800536e:	238e      	movs	r3, #142	; 0x8e
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	238c      	movs	r3, #140	; 0x8c
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	18fb      	adds	r3, r7, r3
 800537c:	6819      	ldr	r1, [r3, #0]
 800537e:	2488      	movs	r4, #136	; 0x88
 8005380:	0064      	lsls	r4, r4, #1
 8005382:	193b      	adds	r3, r7, r4
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	0018      	movs	r0, r3
 8005388:	f000 fcba 	bl	8005d00 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 800538c:	193b      	adds	r3, r7, r4
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4b18      	ldr	r3, [pc, #96]	; (80053f4 <Ignition+0x180>)
 8005392:	0011      	movs	r1, r2
 8005394:	0018      	movs	r0, r3
 8005396:	f001 fd93 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & IGNITION) == IGNITION){
 800539a:	e023      	b.n	80053e4 <Ignition+0x170>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, IGNITION, ctrl->currentState);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	7c5a      	ldrb	r2, [r3, #17]
 80053a0:	2488      	movs	r4, #136	; 0x88
 80053a2:	0064      	lsls	r4, r4, #1
 80053a4:	193b      	adds	r3, r7, r4
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2104      	movs	r1, #4
 80053aa:	0018      	movs	r0, r3
 80053ac:	f000 fb9a 	bl	8005ae4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1,msgPtr);
 80053b0:	193b      	adds	r3, r7, r4
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	4b0f      	ldr	r3, [pc, #60]	; (80053f4 <Ignition+0x180>)
 80053b6:	0011      	movs	r1, r2
 80053b8:	0018      	movs	r0, r3
 80053ba:	f001 fd81 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & IGNITION) == IGNITION){
 80053be:	e011      	b.n	80053e4 <Ignition+0x170>

    	}
    }else{
    	    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, ctrl->currentState, ctrl->lastState);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	7c59      	ldrb	r1, [r3, #17]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	7c1a      	ldrb	r2, [r3, #16]
 80053c8:	2488      	movs	r4, #136	; 0x88
 80053ca:	0064      	lsls	r4, r4, #1
 80053cc:	193b      	adds	r3, r7, r4
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	0018      	movs	r0, r3
 80053d2:	f000 fc1b 	bl	8005c0c <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 80053d6:	193b      	adds	r3, r7, r4
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <Ignition+0x180>)
 80053dc:	0011      	movs	r1, r2
 80053de:	0018      	movs	r0, r3
 80053e0:	f001 fd6e 	bl	8006ec0 <UART_SendMessage>
    }
	return success;
 80053e4:	238e      	movs	r3, #142	; 0x8e
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	18fb      	adds	r3, r7, r3
 80053ea:	681b      	ldr	r3, [r3, #0]
}
 80053ec:	0018      	movs	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b049      	add	sp, #292	; 0x124
 80053f2:	bd90      	pop	{r4, r7, pc}
 80053f4:	2000009c 	.word	0x2000009c

080053f8 <SystemClock_Config>:
  *
  ******************************************************************************
  */
#include "init.h"
void SystemClock_Config(void)
{
 80053f8:	b590      	push	{r4, r7, lr}
 80053fa:	b0a1      	sub	sp, #132	; 0x84
 80053fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80053fe:	2448      	movs	r4, #72	; 0x48
 8005400:	193b      	adds	r3, r7, r4
 8005402:	0018      	movs	r0, r3
 8005404:	2338      	movs	r3, #56	; 0x38
 8005406:	001a      	movs	r2, r3
 8005408:	2100      	movs	r1, #0
 800540a:	f001 fe7e 	bl	800710a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800540e:	2338      	movs	r3, #56	; 0x38
 8005410:	18fb      	adds	r3, r7, r3
 8005412:	0018      	movs	r0, r3
 8005414:	2310      	movs	r3, #16
 8005416:	001a      	movs	r2, r3
 8005418:	2100      	movs	r1, #0
 800541a:	f001 fe76 	bl	800710a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800541e:	1d3b      	adds	r3, r7, #4
 8005420:	0018      	movs	r0, r3
 8005422:	2334      	movs	r3, #52	; 0x34
 8005424:	001a      	movs	r2, r3
 8005426:	2100      	movs	r1, #0
 8005428:	f001 fe6f 	bl	800710a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	0018      	movs	r0, r3
 8005432:	f7fc fc55 	bl	8001ce0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005436:	193b      	adds	r3, r7, r4
 8005438:	2201      	movs	r2, #1
 800543a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800543c:	193b      	adds	r3, r7, r4
 800543e:	2280      	movs	r2, #128	; 0x80
 8005440:	0252      	lsls	r2, r2, #9
 8005442:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005444:	0021      	movs	r1, r4
 8005446:	187b      	adds	r3, r7, r1
 8005448:	2202      	movs	r2, #2
 800544a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800544c:	187b      	adds	r3, r7, r1
 800544e:	2203      	movs	r2, #3
 8005450:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8005452:	187b      	adds	r3, r7, r1
 8005454:	2200      	movs	r2, #0
 8005456:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005458:	187b      	adds	r3, r7, r1
 800545a:	2208      	movs	r2, #8
 800545c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800545e:	187b      	adds	r3, r7, r1
 8005460:	2280      	movs	r2, #128	; 0x80
 8005462:	0292      	lsls	r2, r2, #10
 8005464:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005466:	187b      	adds	r3, r7, r1
 8005468:	2280      	movs	r2, #128	; 0x80
 800546a:	0492      	lsls	r2, r2, #18
 800546c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800546e:	187b      	adds	r3, r7, r1
 8005470:	2280      	movs	r2, #128	; 0x80
 8005472:	0592      	lsls	r2, r2, #22
 8005474:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005476:	187b      	adds	r3, r7, r1
 8005478:	0018      	movs	r0, r3
 800547a:	f7fc fc7d 	bl	8001d78 <HAL_RCC_OscConfig>
 800547e:	1e03      	subs	r3, r0, #0
 8005480:	d001      	beq.n	8005486 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8005482:	f000 fa3b 	bl	80058fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005486:	2138      	movs	r1, #56	; 0x38
 8005488:	187b      	adds	r3, r7, r1
 800548a:	2207      	movs	r2, #7
 800548c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800548e:	187b      	adds	r3, r7, r1
 8005490:	2202      	movs	r2, #2
 8005492:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005494:	187b      	adds	r3, r7, r1
 8005496:	2200      	movs	r2, #0
 8005498:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800549a:	187b      	adds	r3, r7, r1
 800549c:	2200      	movs	r2, #0
 800549e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80054a0:	187b      	adds	r3, r7, r1
 80054a2:	2102      	movs	r1, #2
 80054a4:	0018      	movs	r0, r3
 80054a6:	f7fc ff87 	bl	80023b8 <HAL_RCC_ClockConfig>
 80054aa:	1e03      	subs	r3, r0, #0
 80054ac:	d001      	beq.n	80054b2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80054ae:	f000 fa25 	bl	80058fc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_ADC;
 80054b2:	1d3b      	adds	r3, r7, #4
 80054b4:	4a09      	ldr	r2, [pc, #36]	; (80054dc <SystemClock_Config+0xe4>)
 80054b6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80054b8:	1d3b      	adds	r3, r7, #4
 80054ba:	2200      	movs	r2, #0
 80054bc:	60da      	str	r2, [r3, #12]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80054be:	1d3b      	adds	r3, r7, #4
 80054c0:	2200      	movs	r2, #0
 80054c2:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054c4:	1d3b      	adds	r3, r7, #4
 80054c6:	0018      	movs	r0, r3
 80054c8:	f7fd f91e 	bl	8002708 <HAL_RCCEx_PeriphCLKConfig>
 80054cc:	1e03      	subs	r3, r0, #0
 80054ce:	d001      	beq.n	80054d4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80054d0:	f000 fa14 	bl	80058fc <Error_Handler>
  }
}
 80054d4:	46c0      	nop			; (mov r8, r8)
 80054d6:	46bd      	mov	sp, r7
 80054d8:	b021      	add	sp, #132	; 0x84
 80054da:	bd90      	pop	{r4, r7, pc}
 80054dc:	00004020 	.word	0x00004020

080054e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08a      	sub	sp, #40	; 0x28
 80054e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80054e6:	2310      	movs	r3, #16
 80054e8:	18fb      	adds	r3, r7, r3
 80054ea:	0018      	movs	r0, r3
 80054ec:	2318      	movs	r3, #24
 80054ee:	001a      	movs	r2, r3
 80054f0:	2100      	movs	r1, #0
 80054f2:	f001 fe0a 	bl	800710a <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80054f6:	1d3b      	adds	r3, r7, #4
 80054f8:	0018      	movs	r0, r3
 80054fa:	230c      	movs	r3, #12
 80054fc:	001a      	movs	r2, r3
 80054fe:	2100      	movs	r1, #0
 8005500:	f001 fe03 	bl	800710a <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005504:	4b3c      	ldr	r3, [pc, #240]	; (80055f8 <MX_ADC1_Init+0x118>)
 8005506:	4a3d      	ldr	r2, [pc, #244]	; (80055fc <MX_ADC1_Init+0x11c>)
 8005508:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800550a:	4b3b      	ldr	r3, [pc, #236]	; (80055f8 <MX_ADC1_Init+0x118>)
 800550c:	2280      	movs	r2, #128	; 0x80
 800550e:	05d2      	lsls	r2, r2, #23
 8005510:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005512:	4b39      	ldr	r3, [pc, #228]	; (80055f8 <MX_ADC1_Init+0x118>)
 8005514:	2200      	movs	r2, #0
 8005516:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005518:	4b37      	ldr	r3, [pc, #220]	; (80055f8 <MX_ADC1_Init+0x118>)
 800551a:	2200      	movs	r2, #0
 800551c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800551e:	4b36      	ldr	r3, [pc, #216]	; (80055f8 <MX_ADC1_Init+0x118>)
 8005520:	2200      	movs	r2, #0
 8005522:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005524:	4b34      	ldr	r3, [pc, #208]	; (80055f8 <MX_ADC1_Init+0x118>)
 8005526:	2204      	movs	r2, #4
 8005528:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800552a:	4b33      	ldr	r3, [pc, #204]	; (80055f8 <MX_ADC1_Init+0x118>)
 800552c:	2200      	movs	r2, #0
 800552e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8005530:	4b31      	ldr	r3, [pc, #196]	; (80055f8 <MX_ADC1_Init+0x118>)
 8005532:	2200      	movs	r2, #0
 8005534:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005536:	4b30      	ldr	r3, [pc, #192]	; (80055f8 <MX_ADC1_Init+0x118>)
 8005538:	2200      	movs	r2, #0
 800553a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800553c:	4b2e      	ldr	r3, [pc, #184]	; (80055f8 <MX_ADC1_Init+0x118>)
 800553e:	2201      	movs	r2, #1
 8005540:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005542:	4b2d      	ldr	r3, [pc, #180]	; (80055f8 <MX_ADC1_Init+0x118>)
 8005544:	2220      	movs	r2, #32
 8005546:	2100      	movs	r1, #0
 8005548:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800554a:	4b2b      	ldr	r3, [pc, #172]	; (80055f8 <MX_ADC1_Init+0x118>)
 800554c:	2200      	movs	r2, #0
 800554e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005550:	4b29      	ldr	r3, [pc, #164]	; (80055f8 <MX_ADC1_Init+0x118>)
 8005552:	2200      	movs	r2, #0
 8005554:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005556:	4b28      	ldr	r3, [pc, #160]	; (80055f8 <MX_ADC1_Init+0x118>)
 8005558:	222c      	movs	r2, #44	; 0x2c
 800555a:	2100      	movs	r1, #0
 800555c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800555e:	4b26      	ldr	r3, [pc, #152]	; (80055f8 <MX_ADC1_Init+0x118>)
 8005560:	2200      	movs	r2, #0
 8005562:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8005564:	4b24      	ldr	r3, [pc, #144]	; (80055f8 <MX_ADC1_Init+0x118>)
 8005566:	2200      	movs	r2, #0
 8005568:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800556a:	4b23      	ldr	r3, [pc, #140]	; (80055f8 <MX_ADC1_Init+0x118>)
 800556c:	2200      	movs	r2, #0
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8005570:	4b21      	ldr	r3, [pc, #132]	; (80055f8 <MX_ADC1_Init+0x118>)
 8005572:	223c      	movs	r2, #60	; 0x3c
 8005574:	2100      	movs	r1, #0
 8005576:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8005578:	4b1f      	ldr	r3, [pc, #124]	; (80055f8 <MX_ADC1_Init+0x118>)
 800557a:	2200      	movs	r2, #0
 800557c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800557e:	4b1e      	ldr	r3, [pc, #120]	; (80055f8 <MX_ADC1_Init+0x118>)
 8005580:	0018      	movs	r0, r3
 8005582:	f7fb fa85 	bl	8000a90 <HAL_ADC_Init>
 8005586:	1e03      	subs	r3, r0, #0
 8005588:	d001      	beq.n	800558e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800558a:	f000 f9b7 	bl	80058fc <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 800558e:	2110      	movs	r1, #16
 8005590:	187b      	adds	r3, r7, r1
 8005592:	4a1b      	ldr	r2, [pc, #108]	; (8005600 <MX_ADC1_Init+0x120>)
 8005594:	601a      	str	r2, [r3, #0]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8005596:	187b      	adds	r3, r7, r1
 8005598:	22c0      	movs	r2, #192	; 0xc0
 800559a:	0412      	lsls	r2, r2, #16
 800559c:	605a      	str	r2, [r3, #4]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 800559e:	187b      	adds	r3, r7, r1
 80055a0:	2201      	movs	r2, #1
 80055a2:	609a      	str	r2, [r3, #8]
  AnalogWDGConfig.ITMode = DISABLE;
 80055a4:	187b      	adds	r3, r7, r1
 80055a6:	2200      	movs	r2, #0
 80055a8:	731a      	strb	r2, [r3, #12]
  AnalogWDGConfig.HighThreshold = 0;
 80055aa:	187b      	adds	r3, r7, r1
 80055ac:	2200      	movs	r2, #0
 80055ae:	611a      	str	r2, [r3, #16]
  AnalogWDGConfig.LowThreshold = 0;
 80055b0:	187b      	adds	r3, r7, r1
 80055b2:	2200      	movs	r2, #0
 80055b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80055b6:	187a      	adds	r2, r7, r1
 80055b8:	4b0f      	ldr	r3, [pc, #60]	; (80055f8 <MX_ADC1_Init+0x118>)
 80055ba:	0011      	movs	r1, r2
 80055bc:	0018      	movs	r0, r3
 80055be:	f7fb fe11 	bl	80011e4 <HAL_ADC_AnalogWDGConfig>
 80055c2:	1e03      	subs	r3, r0, #0
 80055c4:	d001      	beq.n	80055ca <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80055c6:	f000 f999 	bl	80058fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80055ca:	1d3b      	adds	r3, r7, #4
 80055cc:	2201      	movs	r2, #1
 80055ce:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80055d0:	1d3b      	adds	r3, r7, #4
 80055d2:	2200      	movs	r2, #0
 80055d4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80055d6:	1d3b      	adds	r3, r7, #4
 80055d8:	2200      	movs	r2, #0
 80055da:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80055dc:	1d3a      	adds	r2, r7, #4
 80055de:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <MX_ADC1_Init+0x118>)
 80055e0:	0011      	movs	r1, r2
 80055e2:	0018      	movs	r0, r3
 80055e4:	f7fb fc2a 	bl	8000e3c <HAL_ADC_ConfigChannel>
 80055e8:	1e03      	subs	r3, r0, #0
 80055ea:	d001      	beq.n	80055f0 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80055ec:	f000 f986 	bl	80058fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80055f0:	46c0      	nop			; (mov r8, r8)
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b00a      	add	sp, #40	; 0x28
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000128 	.word	0x20000128
 80055fc:	40012400 	.word	0x40012400
 8005600:	7cc00000 	.word	0x7cc00000

08005604 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005608:	4b24      	ldr	r3, [pc, #144]	; (800569c <MX_LPUART1_UART_Init+0x98>)
 800560a:	4a25      	ldr	r2, [pc, #148]	; (80056a0 <MX_LPUART1_UART_Init+0x9c>)
 800560c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800560e:	4b23      	ldr	r3, [pc, #140]	; (800569c <MX_LPUART1_UART_Init+0x98>)
 8005610:	22e1      	movs	r2, #225	; 0xe1
 8005612:	0252      	lsls	r2, r2, #9
 8005614:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8005616:	4b21      	ldr	r3, [pc, #132]	; (800569c <MX_LPUART1_UART_Init+0x98>)
 8005618:	2280      	movs	r2, #128	; 0x80
 800561a:	0552      	lsls	r2, r2, #21
 800561c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800561e:	4b1f      	ldr	r3, [pc, #124]	; (800569c <MX_LPUART1_UART_Init+0x98>)
 8005620:	2200      	movs	r2, #0
 8005622:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005624:	4b1d      	ldr	r3, [pc, #116]	; (800569c <MX_LPUART1_UART_Init+0x98>)
 8005626:	2200      	movs	r2, #0
 8005628:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800562a:	4b1c      	ldr	r3, [pc, #112]	; (800569c <MX_LPUART1_UART_Init+0x98>)
 800562c:	220c      	movs	r2, #12
 800562e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005630:	4b1a      	ldr	r3, [pc, #104]	; (800569c <MX_LPUART1_UART_Init+0x98>)
 8005632:	2200      	movs	r2, #0
 8005634:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005636:	4b19      	ldr	r3, [pc, #100]	; (800569c <MX_LPUART1_UART_Init+0x98>)
 8005638:	2200      	movs	r2, #0
 800563a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800563c:	4b17      	ldr	r3, [pc, #92]	; (800569c <MX_LPUART1_UART_Init+0x98>)
 800563e:	2200      	movs	r2, #0
 8005640:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005642:	4b16      	ldr	r3, [pc, #88]	; (800569c <MX_LPUART1_UART_Init+0x98>)
 8005644:	2200      	movs	r2, #0
 8005646:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8005648:	4b14      	ldr	r3, [pc, #80]	; (800569c <MX_LPUART1_UART_Init+0x98>)
 800564a:	2200      	movs	r2, #0
 800564c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800564e:	4813      	ldr	r0, [pc, #76]	; (800569c <MX_LPUART1_UART_Init+0x98>)
 8005650:	2300      	movs	r3, #0
 8005652:	2200      	movs	r2, #0
 8005654:	2100      	movs	r1, #0
 8005656:	f7fe ffcd 	bl	80045f4 <HAL_RS485Ex_Init>
 800565a:	1e03      	subs	r3, r0, #0
 800565c:	d001      	beq.n	8005662 <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 800565e:	f000 f94d 	bl	80058fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005662:	4b0e      	ldr	r3, [pc, #56]	; (800569c <MX_LPUART1_UART_Init+0x98>)
 8005664:	2100      	movs	r1, #0
 8005666:	0018      	movs	r0, r3
 8005668:	f7ff f888 	bl	800477c <HAL_UARTEx_SetTxFifoThreshold>
 800566c:	1e03      	subs	r3, r0, #0
 800566e:	d001      	beq.n	8005674 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 8005670:	f000 f944 	bl	80058fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005674:	4b09      	ldr	r3, [pc, #36]	; (800569c <MX_LPUART1_UART_Init+0x98>)
 8005676:	2100      	movs	r1, #0
 8005678:	0018      	movs	r0, r3
 800567a:	f7ff f8bf 	bl	80047fc <HAL_UARTEx_SetRxFifoThreshold>
 800567e:	1e03      	subs	r3, r0, #0
 8005680:	d001      	beq.n	8005686 <MX_LPUART1_UART_Init+0x82>
  {
    Error_Handler();
 8005682:	f000 f93b 	bl	80058fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005686:	4b05      	ldr	r3, [pc, #20]	; (800569c <MX_LPUART1_UART_Init+0x98>)
 8005688:	0018      	movs	r0, r3
 800568a:	f7ff f83d 	bl	8004708 <HAL_UARTEx_DisableFifoMode>
 800568e:	1e03      	subs	r3, r0, #0
 8005690:	d001      	beq.n	8005696 <MX_LPUART1_UART_Init+0x92>
  {
    Error_Handler();
 8005692:	f000 f933 	bl	80058fc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	2000009c 	.word	0x2000009c
 80056a0:	40008000 	.word	0x40008000

080056a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80056a4:	b590      	push	{r4, r7, lr}
 80056a6:	b08b      	sub	sp, #44	; 0x2c
 80056a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056aa:	2414      	movs	r4, #20
 80056ac:	193b      	adds	r3, r7, r4
 80056ae:	0018      	movs	r0, r3
 80056b0:	2314      	movs	r3, #20
 80056b2:	001a      	movs	r2, r3
 80056b4:	2100      	movs	r1, #0
 80056b6:	f001 fd28 	bl	800710a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80056ba:	4b88      	ldr	r3, [pc, #544]	; (80058dc <MX_GPIO_Init+0x238>)
 80056bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056be:	4b87      	ldr	r3, [pc, #540]	; (80058dc <MX_GPIO_Init+0x238>)
 80056c0:	2104      	movs	r1, #4
 80056c2:	430a      	orrs	r2, r1
 80056c4:	635a      	str	r2, [r3, #52]	; 0x34
 80056c6:	4b85      	ldr	r3, [pc, #532]	; (80058dc <MX_GPIO_Init+0x238>)
 80056c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ca:	2204      	movs	r2, #4
 80056cc:	4013      	ands	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80056d2:	4b82      	ldr	r3, [pc, #520]	; (80058dc <MX_GPIO_Init+0x238>)
 80056d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056d6:	4b81      	ldr	r3, [pc, #516]	; (80058dc <MX_GPIO_Init+0x238>)
 80056d8:	2120      	movs	r1, #32
 80056da:	430a      	orrs	r2, r1
 80056dc:	635a      	str	r2, [r3, #52]	; 0x34
 80056de:	4b7f      	ldr	r3, [pc, #508]	; (80058dc <MX_GPIO_Init+0x238>)
 80056e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e2:	2220      	movs	r2, #32
 80056e4:	4013      	ands	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80056ea:	4b7c      	ldr	r3, [pc, #496]	; (80058dc <MX_GPIO_Init+0x238>)
 80056ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056ee:	4b7b      	ldr	r3, [pc, #492]	; (80058dc <MX_GPIO_Init+0x238>)
 80056f0:	2101      	movs	r1, #1
 80056f2:	430a      	orrs	r2, r1
 80056f4:	635a      	str	r2, [r3, #52]	; 0x34
 80056f6:	4b79      	ldr	r3, [pc, #484]	; (80058dc <MX_GPIO_Init+0x238>)
 80056f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fa:	2201      	movs	r2, #1
 80056fc:	4013      	ands	r3, r2
 80056fe:	60bb      	str	r3, [r7, #8]
 8005700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005702:	4b76      	ldr	r3, [pc, #472]	; (80058dc <MX_GPIO_Init+0x238>)
 8005704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005706:	4b75      	ldr	r3, [pc, #468]	; (80058dc <MX_GPIO_Init+0x238>)
 8005708:	2102      	movs	r1, #2
 800570a:	430a      	orrs	r2, r1
 800570c:	635a      	str	r2, [r3, #52]	; 0x34
 800570e:	4b73      	ldr	r3, [pc, #460]	; (80058dc <MX_GPIO_Init+0x238>)
 8005710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005712:	2202      	movs	r2, #2
 8005714:	4013      	ands	r3, r2
 8005716:	607b      	str	r3, [r7, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800571a:	4b70      	ldr	r3, [pc, #448]	; (80058dc <MX_GPIO_Init+0x238>)
 800571c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800571e:	4b6f      	ldr	r3, [pc, #444]	; (80058dc <MX_GPIO_Init+0x238>)
 8005720:	2108      	movs	r1, #8
 8005722:	430a      	orrs	r2, r1
 8005724:	635a      	str	r2, [r3, #52]	; 0x34
 8005726:	4b6d      	ldr	r3, [pc, #436]	; (80058dc <MX_GPIO_Init+0x238>)
 8005728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572a:	2208      	movs	r2, #8
 800572c:	4013      	ands	r3, r2
 800572e:	603b      	str	r3, [r7, #0]
 8005730:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO13_Pin|GPIO14_Pin|GPIO15_Pin, GPIO_PIN_RESET);
 8005732:	23e0      	movs	r3, #224	; 0xe0
 8005734:	021b      	lsls	r3, r3, #8
 8005736:	486a      	ldr	r0, [pc, #424]	; (80058e0 <MX_GPIO_Init+0x23c>)
 8005738:	2200      	movs	r2, #0
 800573a:	0019      	movs	r1, r3
 800573c:	f7fc fab3 	bl	8001ca6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO8_Pin|GPIO9_FAST_Pin|GPIO10_FAST_Pin, GPIO_PIN_RESET);
 8005740:	23e0      	movs	r3, #224	; 0xe0
 8005742:	00d9      	lsls	r1, r3, #3
 8005744:	23a0      	movs	r3, #160	; 0xa0
 8005746:	05db      	lsls	r3, r3, #23
 8005748:	2200      	movs	r2, #0
 800574a:	0018      	movs	r0, r3
 800574c:	f7fc faab 	bl	8001ca6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO6_Pin|GPIO7_Pin, GPIO_PIN_RESET);
 8005750:	4b64      	ldr	r3, [pc, #400]	; (80058e4 <MX_GPIO_Init+0x240>)
 8005752:	2200      	movs	r2, #0
 8005754:	21c0      	movs	r1, #192	; 0xc0
 8005756:	0018      	movs	r0, r3
 8005758:	f7fc faa5 	bl	8001ca6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO8D8_Pin|GPIO9_Pin|GPIO2_Pin, GPIO_PIN_RESET);
 800575c:	23c1      	movs	r3, #193	; 0xc1
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4861      	ldr	r0, [pc, #388]	; (80058e8 <MX_GPIO_Init+0x244>)
 8005762:	2200      	movs	r2, #0
 8005764:	0019      	movs	r1, r3
 8005766:	f7fc fa9e 	bl	8001ca6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC11 PC12 PC13 PC2
                           PC3 PC4 PC5 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_2
 800576a:	0021      	movs	r1, r4
 800576c:	187b      	adds	r3, r7, r1
 800576e:	4a5f      	ldr	r2, [pc, #380]	; (80058ec <MX_GPIO_Init+0x248>)
 8005770:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005772:	187b      	adds	r3, r7, r1
 8005774:	2203      	movs	r2, #3
 8005776:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005778:	187b      	adds	r3, r7, r1
 800577a:	2200      	movs	r2, #0
 800577c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800577e:	000c      	movs	r4, r1
 8005780:	187b      	adds	r3, r7, r1
 8005782:	4a58      	ldr	r2, [pc, #352]	; (80058e4 <MX_GPIO_Init+0x240>)
 8005784:	0019      	movs	r1, r3
 8005786:	0010      	movs	r0, r2
 8005788:	f7fc f90c 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800578c:	0021      	movs	r1, r4
 800578e:	187b      	adds	r3, r7, r1
 8005790:	2204      	movs	r2, #4
 8005792:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005794:	187b      	adds	r3, r7, r1
 8005796:	2203      	movs	r2, #3
 8005798:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800579a:	187b      	adds	r3, r7, r1
 800579c:	2200      	movs	r2, #0
 800579e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80057a0:	000c      	movs	r4, r1
 80057a2:	187b      	adds	r3, r7, r1
 80057a4:	4a52      	ldr	r2, [pc, #328]	; (80058f0 <MX_GPIO_Init+0x24c>)
 80057a6:	0019      	movs	r1, r3
 80057a8:	0010      	movs	r0, r2
 80057aa:	f7fc f8fb 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB3
                           PB4 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3
 80057ae:	0021      	movs	r1, r4
 80057b0:	187b      	adds	r3, r7, r1
 80057b2:	4a50      	ldr	r2, [pc, #320]	; (80058f4 <MX_GPIO_Init+0x250>)
 80057b4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057b6:	187b      	adds	r3, r7, r1
 80057b8:	2203      	movs	r2, #3
 80057ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057bc:	187b      	adds	r3, r7, r1
 80057be:	2200      	movs	r2, #0
 80057c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057c2:	000c      	movs	r4, r1
 80057c4:	187b      	adds	r3, r7, r1
 80057c6:	4a46      	ldr	r2, [pc, #280]	; (80058e0 <MX_GPIO_Init+0x23c>)
 80057c8:	0019      	movs	r1, r3
 80057ca:	0010      	movs	r0, r2
 80057cc:	f7fc f8ea 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO13_Pin GPIO14_Pin GPIO15_Pin */
  GPIO_InitStruct.Pin = GPIO13_Pin|GPIO14_Pin|GPIO15_Pin;
 80057d0:	0021      	movs	r1, r4
 80057d2:	187b      	adds	r3, r7, r1
 80057d4:	22e0      	movs	r2, #224	; 0xe0
 80057d6:	0212      	lsls	r2, r2, #8
 80057d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057da:	187b      	adds	r3, r7, r1
 80057dc:	2201      	movs	r2, #1
 80057de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e0:	187b      	adds	r3, r7, r1
 80057e2:	2200      	movs	r2, #0
 80057e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057e6:	187b      	adds	r3, r7, r1
 80057e8:	2203      	movs	r2, #3
 80057ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057ec:	000c      	movs	r4, r1
 80057ee:	187b      	adds	r3, r7, r1
 80057f0:	4a3b      	ldr	r2, [pc, #236]	; (80058e0 <MX_GPIO_Init+0x23c>)
 80057f2:	0019      	movs	r1, r3
 80057f4:	0010      	movs	r0, r2
 80057f6:	f7fc f8d5 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO8_Pin GPIO9_FAST_Pin GPIO10_FAST_Pin */
  GPIO_InitStruct.Pin = GPIO8_Pin|GPIO9_FAST_Pin|GPIO10_FAST_Pin;
 80057fa:	0021      	movs	r1, r4
 80057fc:	187b      	adds	r3, r7, r1
 80057fe:	22e0      	movs	r2, #224	; 0xe0
 8005800:	00d2      	lsls	r2, r2, #3
 8005802:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005804:	187b      	adds	r3, r7, r1
 8005806:	2201      	movs	r2, #1
 8005808:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800580a:	187b      	adds	r3, r7, r1
 800580c:	2200      	movs	r2, #0
 800580e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005810:	187b      	adds	r3, r7, r1
 8005812:	2203      	movs	r2, #3
 8005814:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005816:	000c      	movs	r4, r1
 8005818:	187a      	adds	r2, r7, r1
 800581a:	23a0      	movs	r3, #160	; 0xa0
 800581c:	05db      	lsls	r3, r3, #23
 800581e:	0011      	movs	r1, r2
 8005820:	0018      	movs	r0, r3
 8005822:	f7fc f8bf 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO6_Pin GPIO7_Pin */
  GPIO_InitStruct.Pin = GPIO6_Pin|GPIO7_Pin;
 8005826:	0021      	movs	r1, r4
 8005828:	187b      	adds	r3, r7, r1
 800582a:	22c0      	movs	r2, #192	; 0xc0
 800582c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800582e:	187b      	adds	r3, r7, r1
 8005830:	2201      	movs	r2, #1
 8005832:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005834:	187b      	adds	r3, r7, r1
 8005836:	2200      	movs	r2, #0
 8005838:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800583a:	187b      	adds	r3, r7, r1
 800583c:	2203      	movs	r2, #3
 800583e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005840:	000c      	movs	r4, r1
 8005842:	187b      	adds	r3, r7, r1
 8005844:	4a27      	ldr	r2, [pc, #156]	; (80058e4 <MX_GPIO_Init+0x240>)
 8005846:	0019      	movs	r1, r3
 8005848:	0010      	movs	r0, r2
 800584a:	f7fc f8ab 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO8D8_Pin GPIO9_Pin GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO8D8_Pin|GPIO9_Pin|GPIO2_Pin;
 800584e:	0021      	movs	r1, r4
 8005850:	187b      	adds	r3, r7, r1
 8005852:	22c1      	movs	r2, #193	; 0xc1
 8005854:	0092      	lsls	r2, r2, #2
 8005856:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005858:	000c      	movs	r4, r1
 800585a:	193b      	adds	r3, r7, r4
 800585c:	2201      	movs	r2, #1
 800585e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005860:	193b      	adds	r3, r7, r4
 8005862:	2200      	movs	r2, #0
 8005864:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005866:	193b      	adds	r3, r7, r4
 8005868:	2203      	movs	r2, #3
 800586a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800586c:	193b      	adds	r3, r7, r4
 800586e:	4a1e      	ldr	r2, [pc, #120]	; (80058e8 <MX_GPIO_Init+0x244>)
 8005870:	0019      	movs	r1, r3
 8005872:	0010      	movs	r0, r2
 8005874:	f7fc f896 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8005878:	193b      	adds	r3, r7, r4
 800587a:	2298      	movs	r2, #152	; 0x98
 800587c:	0212      	lsls	r2, r2, #8
 800587e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005880:	193b      	adds	r3, r7, r4
 8005882:	2203      	movs	r2, #3
 8005884:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005886:	193b      	adds	r3, r7, r4
 8005888:	2200      	movs	r2, #0
 800588a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800588c:	193a      	adds	r2, r7, r4
 800588e:	23a0      	movs	r3, #160	; 0xa0
 8005890:	05db      	lsls	r3, r3, #23
 8005892:	0011      	movs	r1, r2
 8005894:	0018      	movs	r0, r3
 8005896:	f7fc f885 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800589a:	193b      	adds	r3, r7, r4
 800589c:	227b      	movs	r2, #123	; 0x7b
 800589e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058a0:	193b      	adds	r3, r7, r4
 80058a2:	2203      	movs	r2, #3
 80058a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058a6:	193b      	adds	r3, r7, r4
 80058a8:	2200      	movs	r2, #0
 80058aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80058ac:	193b      	adds	r3, r7, r4
 80058ae:	4a0e      	ldr	r2, [pc, #56]	; (80058e8 <MX_GPIO_Init+0x244>)
 80058b0:	0019      	movs	r1, r3
 80058b2:	0010      	movs	r0, r2
 80058b4:	f7fc f876 	bl	80019a4 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA9);
 80058b8:	4b0f      	ldr	r3, [pc, #60]	; (80058f8 <MX_GPIO_Init+0x254>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <MX_GPIO_Init+0x254>)
 80058be:	2180      	movs	r1, #128	; 0x80
 80058c0:	03c9      	lsls	r1, r1, #15
 80058c2:	430a      	orrs	r2, r1
 80058c4:	601a      	str	r2, [r3, #0]

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA10);
 80058c6:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <MX_GPIO_Init+0x254>)
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <MX_GPIO_Init+0x254>)
 80058cc:	2180      	movs	r1, #128	; 0x80
 80058ce:	0409      	lsls	r1, r1, #16
 80058d0:	430a      	orrs	r2, r1
 80058d2:	601a      	str	r2, [r3, #0]

}
 80058d4:	46c0      	nop			; (mov r8, r8)
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b00b      	add	sp, #44	; 0x2c
 80058da:	bd90      	pop	{r4, r7, pc}
 80058dc:	40021000 	.word	0x40021000
 80058e0:	50000400 	.word	0x50000400
 80058e4:	50000800 	.word	0x50000800
 80058e8:	50000c00 	.word	0x50000c00
 80058ec:	00003f3c 	.word	0x00003f3c
 80058f0:	50001400 	.word	0x50001400
 80058f4:	00000fdc 	.word	0x00000fdc
 80058f8:	40010000 	.word	0x40010000

080058fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005900:	46c0      	nop			; (mov r8, r8)
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
	...

08005908 <LoxIntro>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "lox_intro.h"

uint32_t LoxIntro(struct StateVars *ctrl)
{
 8005908:	b590      	push	{r4, r7, lr}
 800590a:	b0c9      	sub	sp, #292	; 0x124
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8005910:	2300      	movs	r3, #0
 8005912:	228e      	movs	r2, #142	; 0x8e
 8005914:	0052      	lsls	r2, r2, #1
 8005916:	18ba      	adds	r2, r7, r2
 8005918:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 800591a:	2300      	movs	r3, #0
 800591c:	228c      	movs	r2, #140	; 0x8c
 800591e:	0052      	lsls	r2, r2, #1
 8005920:	18ba      	adds	r2, r7, r2
 8005922:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	228a      	movs	r2, #138	; 0x8a
 8005928:	0052      	lsls	r2, r2, #1
 800592a:	18ba      	adds	r2, r7, r2
 800592c:	6013      	str	r3, [r2, #0]
	uint32_t now = HAL_GetTick();
 800592e:	f7fa feed 	bl	800070c <HAL_GetTick>
 8005932:	0003      	movs	r3, r0
 8005934:	2288      	movs	r2, #136	; 0x88
 8005936:	0052      	lsls	r2, r2, #1
 8005938:	18ba      	adds	r2, r7, r2
 800593a:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 800593c:	2308      	movs	r3, #8
 800593e:	18fb      	adds	r3, r7, r3
 8005940:	2286      	movs	r2, #134	; 0x86
 8005942:	0052      	lsls	r2, r2, #1
 8005944:	18ba      	adds	r2, r7, r2
 8005946:	6013      	str	r3, [r2, #0]

	//TODO Specify a real timeout
	uint32_t TIMEOUT = 2000;
 8005948:	23fa      	movs	r3, #250	; 0xfa
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	2284      	movs	r2, #132	; 0x84
 800594e:	0052      	lsls	r2, r2, #1
 8005950:	18ba      	adds	r2, r7, r2
 8005952:	6013      	str	r3, [r2, #0]


    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	7c5b      	ldrb	r3, [r3, #17]
 8005958:	0018      	movs	r0, r3
 800595a:	f001 f941 	bl	8006be0 <VerifyState>
 800595e:	1e03      	subs	r3, r0, #0
 8005960:	d074      	beq.n	8005a4c <LoxIntro+0x144>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	7c1b      	ldrb	r3, [r3, #16]
 8005966:	0018      	movs	r0, r3
 8005968:	f001 f93a 	bl	8006be0 <VerifyState>
 800596c:	1e03      	subs	r3, r0, #0
 800596e:	d06d      	beq.n	8005a4c <LoxIntro+0x144>
    {
    	if((ctrl->currentState & LOX_INTRO) == LOX_INTRO){
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	7c5b      	ldrb	r3, [r3, #17]
 8005974:	001a      	movs	r2, r3
 8005976:	2305      	movs	r3, #5
 8005978:	4013      	ands	r3, r2
 800597a:	2b05      	cmp	r3, #5
 800597c:	d154      	bne.n	8005a28 <LoxIntro+0x120>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 1|  1|  0|  0|  1|  1|  1| 10

    	    // If this is the first time, mark time
    		if(ctrl->currentState != ctrl->lastState)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	7c5a      	ldrb	r2, [r3, #17]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	7c1b      	ldrb	r3, [r3, #16]
 8005986:	429a      	cmp	r2, r3
 8005988:	d004      	beq.n	8005994 <LoxIntro+0x8c>
    	    {
    	    	ctrl->timeStarted = HAL_GetTick();
 800598a:	f7fa febf 	bl	800070c <HAL_GetTick>
 800598e:	0002      	movs	r2, r0
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	601a      	str	r2, [r3, #0]
    	    }

    		// Set Valve States
    		valve_target |= ((uint16_t)PV2 	\
 8005994:	248a      	movs	r4, #138	; 0x8a
 8005996:	0064      	lsls	r4, r4, #1
 8005998:	193b      	adds	r3, r7, r4
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	22f3      	movs	r2, #243	; 0xf3
 800599e:	0052      	lsls	r2, r2, #1
 80059a0:	4313      	orrs	r3, r2
 80059a2:	193a      	adds	r2, r7, r4
 80059a4:	6013      	str	r3, [r2, #0]
						 |(uint16_t)IV1 	\
						 |(uint16_t)IV2 	\
    					 |(uint16_t)MV1 	\
						 |(uint16_t)MV2);
    		// Timestamp and Log
    		valve_configuration = StateConfiguration();
 80059a6:	f001 f93f 	bl	8006c28 <StateConfiguration>
 80059aa:	0003      	movs	r3, r0
 80059ac:	218c      	movs	r1, #140	; 0x8c
 80059ae:	0049      	lsls	r1, r1, #1
 80059b0:	187a      	adds	r2, r7, r1
 80059b2:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		ctrl->lastState = ctrl->currentState;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	7c5a      	ldrb	r2, [r3, #17]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	741a      	strb	r2, [r3, #16]
    		ctrl->currentState =LOX_INTRO;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2205      	movs	r2, #5
 80059c0:	745a      	strb	r2, [r3, #17]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 80059c2:	187b      	adds	r3, r7, r1
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	193b      	adds	r3, r7, r4
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	425a      	negs	r2, r3
 80059ce:	4153      	adcs	r3, r2
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	228e      	movs	r2, #142	; 0x8e
 80059d4:	0052      	lsls	r2, r2, #1
 80059d6:	18ba      	adds	r2, r7, r2
 80059d8:	6013      	str	r3, [r2, #0]

    		//TODO Specify time frame
    		if(now - ctrl->timeStarted > TIMEOUT)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2288      	movs	r2, #136	; 0x88
 80059e0:	0052      	lsls	r2, r2, #1
 80059e2:	18ba      	adds	r2, r7, r2
 80059e4:	6812      	ldr	r2, [r2, #0]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2284      	movs	r2, #132	; 0x84
 80059ea:	0052      	lsls	r2, r2, #1
 80059ec:	18ba      	adds	r2, r7, r2
 80059ee:	6812      	ldr	r2, [r2, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d202      	bcs.n	80059fa <LoxIntro+0xf2>
    		{
        		ctrl->currentState= BURN_INITIATED;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2207      	movs	r2, #7
 80059f8:	745a      	strb	r2, [r3, #17]
    		}

    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 80059fa:	238e      	movs	r3, #142	; 0x8e
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	18fb      	adds	r3, r7, r3
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	238c      	movs	r3, #140	; 0x8c
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	18fb      	adds	r3, r7, r3
 8005a08:	6819      	ldr	r1, [r3, #0]
 8005a0a:	2486      	movs	r4, #134	; 0x86
 8005a0c:	0064      	lsls	r4, r4, #1
 8005a0e:	193b      	adds	r3, r7, r4
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	0018      	movs	r0, r3
 8005a14:	f000 f974 	bl	8005d00 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8005a18:	193b      	adds	r3, r7, r4
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	4b18      	ldr	r3, [pc, #96]	; (8005a80 <LoxIntro+0x178>)
 8005a1e:	0011      	movs	r1, r2
 8005a20:	0018      	movs	r0, r3
 8005a22:	f001 fa4d 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & LOX_INTRO) == LOX_INTRO){
 8005a26:	e023      	b.n	8005a70 <LoxIntro+0x168>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, LOX_INTRO, ctrl->currentState);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	7c5a      	ldrb	r2, [r3, #17]
 8005a2c:	2486      	movs	r4, #134	; 0x86
 8005a2e:	0064      	lsls	r4, r4, #1
 8005a30:	193b      	adds	r3, r7, r4
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2105      	movs	r1, #5
 8005a36:	0018      	movs	r0, r3
 8005a38:	f000 f854 	bl	8005ae4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1,msgPtr);
 8005a3c:	193b      	adds	r3, r7, r4
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <LoxIntro+0x178>)
 8005a42:	0011      	movs	r1, r2
 8005a44:	0018      	movs	r0, r3
 8005a46:	f001 fa3b 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & LOX_INTRO) == LOX_INTRO){
 8005a4a:	e011      	b.n	8005a70 <LoxIntro+0x168>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, ctrl->currentState, ctrl->lastState);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	7c59      	ldrb	r1, [r3, #17]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	7c1a      	ldrb	r2, [r3, #16]
 8005a54:	2486      	movs	r4, #134	; 0x86
 8005a56:	0064      	lsls	r4, r4, #1
 8005a58:	193b      	adds	r3, r7, r4
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f000 f8d5 	bl	8005c0c <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8005a62:	193b      	adds	r3, r7, r4
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <LoxIntro+0x178>)
 8005a68:	0011      	movs	r1, r2
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f001 fa28 	bl	8006ec0 <UART_SendMessage>
    }
	return success;
 8005a70:	238e      	movs	r3, #142	; 0x8e
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	18fb      	adds	r3, r7, r3
 8005a76:	681b      	ldr	r3, [r3, #0]
}
 8005a78:	0018      	movs	r0, r3
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	b049      	add	sp, #292	; 0x124
 8005a7e:	bd90      	pop	{r4, r7, pc}
 8005a80:	2000009c 	.word	0x2000009c

08005a84 <main>:
#include "states_def.h"
#include "init.h"


int main(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af00      	add	r7, sp, #0
  struct StateVars controls = {0,0,0,0, SAFETY, SAFETY, &controls};
 8005a8a:	1d3b      	adds	r3, r7, #4
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	1d3b      	adds	r3, r7, #4
 8005a92:	2200      	movs	r2, #0
 8005a94:	605a      	str	r2, [r3, #4]
 8005a96:	1d3b      	adds	r3, r7, #4
 8005a98:	2200      	movs	r2, #0
 8005a9a:	609a      	str	r2, [r3, #8]
 8005a9c:	1d3b      	adds	r3, r7, #4
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	60da      	str	r2, [r3, #12]
 8005aa2:	1d3b      	adds	r3, r7, #4
 8005aa4:	220f      	movs	r2, #15
 8005aa6:	741a      	strb	r2, [r3, #16]
 8005aa8:	1d3b      	adds	r3, r7, #4
 8005aaa:	220f      	movs	r2, #15
 8005aac:	745a      	strb	r2, [r3, #17]
 8005aae:	1d3b      	adds	r3, r7, #4
 8005ab0:	1d3a      	adds	r2, r7, #4
 8005ab2:	615a      	str	r2, [r3, #20]
  //TODO HACK initialize isArm false
  controls.isArmed = TRUE;
 8005ab4:	1d3b      	adds	r3, r7, #4
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	609a      	str	r2, [r3, #8]
  uint32_t isProgramRunning = TRUE;
 8005aba:	2301      	movs	r3, #1
 8005abc:	61fb      	str	r3, [r7, #28]
  HAL_Init();
 8005abe:	f7fa fdab 	bl	8000618 <HAL_Init>

  SystemClock_Config();
 8005ac2:	f7ff fc99 	bl	80053f8 <SystemClock_Config>
  //MX_WWDG_Init();
  MX_GPIO_Init();
 8005ac6:	f7ff fded 	bl	80056a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8005aca:	f7ff fd09 	bl	80054e0 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8005ace:	f7ff fd99 	bl	8005604 <MX_LPUART1_UART_Init>
  //HAL_UART_Receive_IT(&hlpuart1,(uint8_t *)serialRxBuffer, 9);
  //HAL_UART_Transmit_IT(&hlpuart1,(uint8_t *)serialRxBuffer,9);

  while(1)
  {
	  StateMachine(isProgramRunning,controls.adr);
 8005ad2:	1d3b      	adds	r3, r7, #4
 8005ad4:	695a      	ldr	r2, [r3, #20]
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	0011      	movs	r1, r2
 8005ada:	0018      	movs	r0, r3
 8005adc:	f000 fdb8 	bl	8006650 <StateMachine>
 8005ae0:	e7f7      	b.n	8005ad2 <main+0x4e>
	...

08005ae4 <Get_State_Disagree_Error_Msg>:
// Encode these messages in hex strings
// Add Parity/Checksum

void Get_State_Disagree_Error_Msg(char *errorMessage, enum StateName expectedState, \
			enum StateName passedState)
{
 8005ae4:	b5b0      	push	{r4, r5, r7, lr}
 8005ae6:	b0ca      	sub	sp, #296	; 0x128
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	0008      	movs	r0, r1
 8005aee:	0011      	movs	r1, r2
 8005af0:	4b3f      	ldr	r3, [pc, #252]	; (8005bf0 <Get_State_Disagree_Error_Msg+0x10c>)
 8005af2:	2294      	movs	r2, #148	; 0x94
 8005af4:	0052      	lsls	r2, r2, #1
 8005af6:	4694      	mov	ip, r2
 8005af8:	44bc      	add	ip, r7
 8005afa:	4463      	add	r3, ip
 8005afc:	1c02      	adds	r2, r0, #0
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	4b3c      	ldr	r3, [pc, #240]	; (8005bf4 <Get_State_Disagree_Error_Msg+0x110>)
 8005b02:	2294      	movs	r2, #148	; 0x94
 8005b04:	0052      	lsls	r2, r2, #1
 8005b06:	4694      	mov	ip, r2
 8005b08:	44bc      	add	ip, r7
 8005b0a:	4463      	add	r3, ip
 8005b0c:	1c0a      	adds	r2, r1, #0
 8005b0e:	701a      	strb	r2, [r3, #0]
	char state_disagree[PRINT_BUFFER_SIZE] = "ERROR: Expected State, Passed State Disagree. ";
 8005b10:	4b39      	ldr	r3, [pc, #228]	; (8005bf8 <Get_State_Disagree_Error_Msg+0x114>)
 8005b12:	2294      	movs	r2, #148	; 0x94
 8005b14:	0052      	lsls	r2, r2, #1
 8005b16:	18ba      	adds	r2, r7, r2
 8005b18:	18d1      	adds	r1, r2, r3
 8005b1a:	4a38      	ldr	r2, [pc, #224]	; (8005bfc <Get_State_Disagree_Error_Msg+0x118>)
 8005b1c:	000b      	movs	r3, r1
 8005b1e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8005b20:	c331      	stmia	r3!, {r0, r4, r5}
 8005b22:	ca31      	ldmia	r2!, {r0, r4, r5}
 8005b24:	c331      	stmia	r3!, {r0, r4, r5}
 8005b26:	ca31      	ldmia	r2!, {r0, r4, r5}
 8005b28:	c331      	stmia	r3!, {r0, r4, r5}
 8005b2a:	ca11      	ldmia	r2!, {r0, r4}
 8005b2c:	c311      	stmia	r3!, {r0, r4}
 8005b2e:	8810      	ldrh	r0, [r2, #0]
 8005b30:	8018      	strh	r0, [r3, #0]
 8005b32:	7892      	ldrb	r2, [r2, #2]
 8005b34:	709a      	strb	r2, [r3, #2]
 8005b36:	232f      	movs	r3, #47	; 0x2f
 8005b38:	18cb      	adds	r3, r1, r3
 8005b3a:	22d1      	movs	r2, #209	; 0xd1
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f001 fae3 	bl	800710a <memset>
	char temp[32];
	strcat(state_disagree, "Expected: ");
 8005b44:	2428      	movs	r4, #40	; 0x28
 8005b46:	193b      	adds	r3, r7, r4
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f7fa fadb 	bl	8000104 <strlen>
 8005b4e:	0003      	movs	r3, r0
 8005b50:	001a      	movs	r2, r3
 8005b52:	193b      	adds	r3, r7, r4
 8005b54:	189a      	adds	r2, r3, r2
 8005b56:	4b2a      	ldr	r3, [pc, #168]	; (8005c00 <Get_State_Disagree_Error_Msg+0x11c>)
 8005b58:	0010      	movs	r0, r2
 8005b5a:	0019      	movs	r1, r3
 8005b5c:	230b      	movs	r3, #11
 8005b5e:	001a      	movs	r2, r3
 8005b60:	f001 faca 	bl	80070f8 <memcpy>
	sprintf(temp, "%d", expectedState);
 8005b64:	4b22      	ldr	r3, [pc, #136]	; (8005bf0 <Get_State_Disagree_Error_Msg+0x10c>)
 8005b66:	2294      	movs	r2, #148	; 0x94
 8005b68:	0052      	lsls	r2, r2, #1
 8005b6a:	4694      	mov	ip, r2
 8005b6c:	44bc      	add	ip, r7
 8005b6e:	4463      	add	r3, ip
 8005b70:	781a      	ldrb	r2, [r3, #0]
 8005b72:	4924      	ldr	r1, [pc, #144]	; (8005c04 <Get_State_Disagree_Error_Msg+0x120>)
 8005b74:	2508      	movs	r5, #8
 8005b76:	197b      	adds	r3, r7, r5
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f001 facf 	bl	800711c <siprintf>
	strcat(state_disagree, temp);
 8005b7e:	197a      	adds	r2, r7, r5
 8005b80:	193b      	adds	r3, r7, r4
 8005b82:	0011      	movs	r1, r2
 8005b84:	0018      	movs	r0, r3
 8005b86:	f001 fae9 	bl	800715c <strcat>
	strcat(state_disagree,"Passed: ");
 8005b8a:	193b      	adds	r3, r7, r4
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f7fa fab9 	bl	8000104 <strlen>
 8005b92:	0003      	movs	r3, r0
 8005b94:	001a      	movs	r2, r3
 8005b96:	193b      	adds	r3, r7, r4
 8005b98:	189a      	adds	r2, r3, r2
 8005b9a:	4b1b      	ldr	r3, [pc, #108]	; (8005c08 <Get_State_Disagree_Error_Msg+0x124>)
 8005b9c:	0010      	movs	r0, r2
 8005b9e:	0019      	movs	r1, r3
 8005ba0:	2309      	movs	r3, #9
 8005ba2:	001a      	movs	r2, r3
 8005ba4:	f001 faa8 	bl	80070f8 <memcpy>
	sprintf(temp, "%d", passedState);
 8005ba8:	4b12      	ldr	r3, [pc, #72]	; (8005bf4 <Get_State_Disagree_Error_Msg+0x110>)
 8005baa:	2294      	movs	r2, #148	; 0x94
 8005bac:	0052      	lsls	r2, r2, #1
 8005bae:	4694      	mov	ip, r2
 8005bb0:	44bc      	add	ip, r7
 8005bb2:	4463      	add	r3, ip
 8005bb4:	781a      	ldrb	r2, [r3, #0]
 8005bb6:	4913      	ldr	r1, [pc, #76]	; (8005c04 <Get_State_Disagree_Error_Msg+0x120>)
 8005bb8:	197b      	adds	r3, r7, r5
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f001 faae 	bl	800711c <siprintf>
	strcat(state_disagree, temp);
 8005bc0:	197a      	adds	r2, r7, r5
 8005bc2:	193b      	adds	r3, r7, r4
 8005bc4:	0011      	movs	r1, r2
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f001 fac8 	bl	800715c <strcat>
	memset(errorMessage, '\0', PRINT_BUFFER_SIZE);
 8005bcc:	2380      	movs	r3, #128	; 0x80
 8005bce:	005a      	lsls	r2, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f001 fa98 	bl	800710a <memset>
	strcpy(errorMessage, state_disagree);
 8005bda:	193a      	adds	r2, r7, r4
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	0011      	movs	r1, r2
 8005be0:	0018      	movs	r0, r3
 8005be2:	f001 fac9 	bl	8007178 <strcpy>
}
 8005be6:	46c0      	nop			; (mov r8, r8)
 8005be8:	46bd      	mov	sp, r7
 8005bea:	b04a      	add	sp, #296	; 0x128
 8005bec:	bdb0      	pop	{r4, r5, r7, pc}
 8005bee:	46c0      	nop			; (mov r8, r8)
 8005bf0:	fffffedb 	.word	0xfffffedb
 8005bf4:	fffffeda 	.word	0xfffffeda
 8005bf8:	ffffff00 	.word	0xffffff00
 8005bfc:	08007988 	.word	0x08007988
 8005c00:	0800796c 	.word	0x0800796c
 8005c04:	08007978 	.word	0x08007978
 8005c08:	0800797c 	.word	0x0800797c

08005c0c <Get_Invalid_State_Error_Msg>:

void Get_Invalid_State_Error_Msg(char *errorMessage, enum StateName state, enum StateName lastState)
{
 8005c0c:	b5b0      	push	{r4, r5, r7, lr}
 8005c0e:	b0ca      	sub	sp, #296	; 0x128
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	0008      	movs	r0, r1
 8005c16:	0011      	movs	r1, r2
 8005c18:	4b33      	ldr	r3, [pc, #204]	; (8005ce8 <Get_Invalid_State_Error_Msg+0xdc>)
 8005c1a:	2294      	movs	r2, #148	; 0x94
 8005c1c:	0052      	lsls	r2, r2, #1
 8005c1e:	4694      	mov	ip, r2
 8005c20:	44bc      	add	ip, r7
 8005c22:	4463      	add	r3, ip
 8005c24:	1c02      	adds	r2, r0, #0
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	4b30      	ldr	r3, [pc, #192]	; (8005cec <Get_Invalid_State_Error_Msg+0xe0>)
 8005c2a:	2294      	movs	r2, #148	; 0x94
 8005c2c:	0052      	lsls	r2, r2, #1
 8005c2e:	4694      	mov	ip, r2
 8005c30:	44bc      	add	ip, r7
 8005c32:	4463      	add	r3, ip
 8005c34:	1c0a      	adds	r2, r1, #0
 8005c36:	701a      	strb	r2, [r3, #0]
	char state_invalid[PRINT_BUFFER_SIZE] = "Invalid State: ";
 8005c38:	4b2d      	ldr	r3, [pc, #180]	; (8005cf0 <Get_Invalid_State_Error_Msg+0xe4>)
 8005c3a:	2294      	movs	r2, #148	; 0x94
 8005c3c:	0052      	lsls	r2, r2, #1
 8005c3e:	18ba      	adds	r2, r7, r2
 8005c40:	18d1      	adds	r1, r2, r3
 8005c42:	4a2c      	ldr	r2, [pc, #176]	; (8005cf4 <Get_Invalid_State_Error_Msg+0xe8>)
 8005c44:	000b      	movs	r3, r1
 8005c46:	ca31      	ldmia	r2!, {r0, r4, r5}
 8005c48:	c331      	stmia	r3!, {r0, r4, r5}
 8005c4a:	6812      	ldr	r2, [r2, #0]
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	000b      	movs	r3, r1
 8005c50:	3310      	adds	r3, #16
 8005c52:	22f0      	movs	r2, #240	; 0xf0
 8005c54:	2100      	movs	r1, #0
 8005c56:	0018      	movs	r0, r3
 8005c58:	f001 fa57 	bl	800710a <memset>
	char temp[32];
	sprintf(temp, "%d",state);
 8005c5c:	4b22      	ldr	r3, [pc, #136]	; (8005ce8 <Get_Invalid_State_Error_Msg+0xdc>)
 8005c5e:	2294      	movs	r2, #148	; 0x94
 8005c60:	0052      	lsls	r2, r2, #1
 8005c62:	4694      	mov	ip, r2
 8005c64:	44bc      	add	ip, r7
 8005c66:	4463      	add	r3, ip
 8005c68:	781a      	ldrb	r2, [r3, #0]
 8005c6a:	4923      	ldr	r1, [pc, #140]	; (8005cf8 <Get_Invalid_State_Error_Msg+0xec>)
 8005c6c:	2508      	movs	r5, #8
 8005c6e:	197b      	adds	r3, r7, r5
 8005c70:	0018      	movs	r0, r3
 8005c72:	f001 fa53 	bl	800711c <siprintf>
	strcat(state_invalid, temp);
 8005c76:	197a      	adds	r2, r7, r5
 8005c78:	2428      	movs	r4, #40	; 0x28
 8005c7a:	193b      	adds	r3, r7, r4
 8005c7c:	0011      	movs	r1, r2
 8005c7e:	0018      	movs	r0, r3
 8005c80:	f001 fa6c 	bl	800715c <strcat>
	strcat(state_invalid, ", lastState: ");
 8005c84:	193b      	adds	r3, r7, r4
 8005c86:	0018      	movs	r0, r3
 8005c88:	f7fa fa3c 	bl	8000104 <strlen>
 8005c8c:	0003      	movs	r3, r0
 8005c8e:	001a      	movs	r2, r3
 8005c90:	193b      	adds	r3, r7, r4
 8005c92:	189a      	adds	r2, r3, r2
 8005c94:	4b19      	ldr	r3, [pc, #100]	; (8005cfc <Get_Invalid_State_Error_Msg+0xf0>)
 8005c96:	0010      	movs	r0, r2
 8005c98:	0019      	movs	r1, r3
 8005c9a:	230e      	movs	r3, #14
 8005c9c:	001a      	movs	r2, r3
 8005c9e:	f001 fa2b 	bl	80070f8 <memcpy>
	sprintf(temp, "%d", lastState);
 8005ca2:	4b12      	ldr	r3, [pc, #72]	; (8005cec <Get_Invalid_State_Error_Msg+0xe0>)
 8005ca4:	2294      	movs	r2, #148	; 0x94
 8005ca6:	0052      	lsls	r2, r2, #1
 8005ca8:	4694      	mov	ip, r2
 8005caa:	44bc      	add	ip, r7
 8005cac:	4463      	add	r3, ip
 8005cae:	781a      	ldrb	r2, [r3, #0]
 8005cb0:	4911      	ldr	r1, [pc, #68]	; (8005cf8 <Get_Invalid_State_Error_Msg+0xec>)
 8005cb2:	197b      	adds	r3, r7, r5
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f001 fa31 	bl	800711c <siprintf>
	strcat(state_invalid, temp);
 8005cba:	197a      	adds	r2, r7, r5
 8005cbc:	193b      	adds	r3, r7, r4
 8005cbe:	0011      	movs	r1, r2
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	f001 fa4b 	bl	800715c <strcat>
	memset(errorMessage, '\0', PRINT_BUFFER_SIZE);
 8005cc6:	2380      	movs	r3, #128	; 0x80
 8005cc8:	005a      	lsls	r2, r3, #1
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2100      	movs	r1, #0
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f001 fa1b 	bl	800710a <memset>
	strcpy(errorMessage, state_invalid);
 8005cd4:	193a      	adds	r2, r7, r4
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	0011      	movs	r1, r2
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f001 fa4c 	bl	8007178 <strcpy>
}
 8005ce0:	46c0      	nop			; (mov r8, r8)
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	b04a      	add	sp, #296	; 0x128
 8005ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ce8:	fffffedb 	.word	0xfffffedb
 8005cec:	fffffeda 	.word	0xfffffeda
 8005cf0:	ffffff00 	.word	0xffffff00
 8005cf4:	08007a98 	.word	0x08007a98
 8005cf8:	08007978 	.word	0x08007978
 8005cfc:	08007a88 	.word	0x08007a88

08005d00 <Get_Valve_State_Status_Msg>:

void Get_Valve_State_Status_Msg(char *statusMessage, uint32_t valveConfiguration, uint32_t success)
{
 8005d00:	b5b0      	push	{r4, r5, r7, lr}
 8005d02:	b0cc      	sub	sp, #304	; 0x130
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
	char valve_state[PRINT_BUFFER_SIZE] = "Valve Configuration: ";
 8005d0c:	4b26      	ldr	r3, [pc, #152]	; (8005da8 <Get_Valve_State_Status_Msg+0xa8>)
 8005d0e:	2298      	movs	r2, #152	; 0x98
 8005d10:	0052      	lsls	r2, r2, #1
 8005d12:	18ba      	adds	r2, r7, r2
 8005d14:	18d1      	adds	r1, r2, r3
 8005d16:	4a25      	ldr	r2, [pc, #148]	; (8005dac <Get_Valve_State_Status_Msg+0xac>)
 8005d18:	000b      	movs	r3, r1
 8005d1a:	ca31      	ldmia	r2!, {r0, r4, r5}
 8005d1c:	c331      	stmia	r3!, {r0, r4, r5}
 8005d1e:	ca11      	ldmia	r2!, {r0, r4}
 8005d20:	c311      	stmia	r3!, {r0, r4}
 8005d22:	8812      	ldrh	r2, [r2, #0]
 8005d24:	801a      	strh	r2, [r3, #0]
 8005d26:	2316      	movs	r3, #22
 8005d28:	18cb      	adds	r3, r1, r3
 8005d2a:	22ea      	movs	r2, #234	; 0xea
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	0018      	movs	r0, r3
 8005d30:	f001 f9eb 	bl	800710a <memset>
	char temp[32];
	sprintf(temp, "%03x", (int)valveConfiguration);
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	491e      	ldr	r1, [pc, #120]	; (8005db0 <Get_Valve_State_Status_Msg+0xb0>)
 8005d38:	2410      	movs	r4, #16
 8005d3a:	193b      	adds	r3, r7, r4
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	f001 f9ed 	bl	800711c <siprintf>
	strcat(valve_state, temp);
 8005d42:	193a      	adds	r2, r7, r4
 8005d44:	2430      	movs	r4, #48	; 0x30
 8005d46:	193b      	adds	r3, r7, r4
 8005d48:	0011      	movs	r1, r2
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	f001 fa06 	bl	800715c <strcat>
	strcat(valve_state, ", Success: ");
 8005d50:	193b      	adds	r3, r7, r4
 8005d52:	0018      	movs	r0, r3
 8005d54:	f7fa f9d6 	bl	8000104 <strlen>
 8005d58:	0003      	movs	r3, r0
 8005d5a:	001a      	movs	r2, r3
 8005d5c:	193b      	adds	r3, r7, r4
 8005d5e:	189a      	adds	r2, r3, r2
 8005d60:	4b14      	ldr	r3, [pc, #80]	; (8005db4 <Get_Valve_State_Status_Msg+0xb4>)
 8005d62:	0010      	movs	r0, r2
 8005d64:	0019      	movs	r1, r3
 8005d66:	230c      	movs	r3, #12
 8005d68:	001a      	movs	r2, r3
 8005d6a:	f001 f9c5 	bl	80070f8 <memcpy>
	strcat(valve_state, (success > 0 ? "True." : "False."));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <Get_Valve_State_Status_Msg+0x78>
 8005d74:	4b10      	ldr	r3, [pc, #64]	; (8005db8 <Get_Valve_State_Status_Msg+0xb8>)
 8005d76:	e000      	b.n	8005d7a <Get_Valve_State_Status_Msg+0x7a>
 8005d78:	4b10      	ldr	r3, [pc, #64]	; (8005dbc <Get_Valve_State_Status_Msg+0xbc>)
 8005d7a:	2430      	movs	r4, #48	; 0x30
 8005d7c:	193a      	adds	r2, r7, r4
 8005d7e:	0019      	movs	r1, r3
 8005d80:	0010      	movs	r0, r2
 8005d82:	f001 f9eb 	bl	800715c <strcat>
	memset(statusMessage, '\0', PRINT_BUFFER_SIZE);
 8005d86:	2380      	movs	r3, #128	; 0x80
 8005d88:	005a      	lsls	r2, r3, #1
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f001 f9bb 	bl	800710a <memset>
	strcpy(statusMessage, valve_state);
 8005d94:	193a      	adds	r2, r7, r4
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	0011      	movs	r1, r2
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	f001 f9ec 	bl	8007178 <strcpy>
}
 8005da0:	46c0      	nop			; (mov r8, r8)
 8005da2:	46bd      	mov	sp, r7
 8005da4:	b04c      	add	sp, #304	; 0x130
 8005da6:	bdb0      	pop	{r4, r5, r7, pc}
 8005da8:	ffffff00 	.word	0xffffff00
 8005dac:	08007bbc 	.word	0x08007bbc
 8005db0:	08007b98 	.word	0x08007b98
 8005db4:	08007ba0 	.word	0x08007ba0
 8005db8:	08007bac 	.word	0x08007bac
 8005dbc:	08007bb4 	.word	0x08007bb4

08005dc0 <PostFire>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "post_fire.h"

uint32_t PostFire(struct StateVars *ctrl)
{
 8005dc0:	b590      	push	{r4, r7, lr}
 8005dc2:	b0c9      	sub	sp, #292	; 0x124
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	228e      	movs	r2, #142	; 0x8e
 8005dcc:	0052      	lsls	r2, r2, #1
 8005dce:	18ba      	adds	r2, r7, r2
 8005dd0:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	228c      	movs	r2, #140	; 0x8c
 8005dd6:	0052      	lsls	r2, r2, #1
 8005dd8:	18ba      	adds	r2, r7, r2
 8005dda:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	228a      	movs	r2, #138	; 0x8a
 8005de0:	0052      	lsls	r2, r2, #1
 8005de2:	18ba      	adds	r2, r7, r2
 8005de4:	6013      	str	r3, [r2, #0]
	uint32_t now = HAL_GetTick();
 8005de6:	f7fa fc91 	bl	800070c <HAL_GetTick>
 8005dea:	0003      	movs	r3, r0
 8005dec:	2288      	movs	r2, #136	; 0x88
 8005dee:	0052      	lsls	r2, r2, #1
 8005df0:	18ba      	adds	r2, r7, r2
 8005df2:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8005df4:	2308      	movs	r3, #8
 8005df6:	18fb      	adds	r3, r7, r3
 8005df8:	2286      	movs	r2, #134	; 0x86
 8005dfa:	0052      	lsls	r2, r2, #1
 8005dfc:	18ba      	adds	r2, r7, r2
 8005dfe:	6013      	str	r3, [r2, #0]

	//TODO Specify a real timeout
	uint32_t TIMEOUT = 2000;
 8005e00:	23fa      	movs	r3, #250	; 0xfa
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	2284      	movs	r2, #132	; 0x84
 8005e06:	0052      	lsls	r2, r2, #1
 8005e08:	18ba      	adds	r2, r7, r2
 8005e0a:	6013      	str	r3, [r2, #0]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	7c5b      	ldrb	r3, [r3, #17]
 8005e10:	0018      	movs	r0, r3
 8005e12:	f000 fee5 	bl	8006be0 <VerifyState>
 8005e16:	1e03      	subs	r3, r0, #0
 8005e18:	d100      	bne.n	8005e1c <PostFire+0x5c>
 8005e1a:	e076      	b.n	8005f0a <PostFire+0x14a>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	7c1b      	ldrb	r3, [r3, #16]
 8005e20:	0018      	movs	r0, r3
 8005e22:	f000 fedd 	bl	8006be0 <VerifyState>
 8005e26:	1e03      	subs	r3, r0, #0
 8005e28:	d06f      	beq.n	8005f0a <PostFire+0x14a>
    {
    	if((ctrl->currentState & POST_FIRE) == POST_FIRE){
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	7c5b      	ldrb	r3, [r3, #17]
 8005e2e:	001a      	movs	r2, r3
 8005e30:	230d      	movs	r3, #13
 8005e32:	4013      	ands	r3, r2
 8005e34:	2b0d      	cmp	r3, #13
 8005e36:	d156      	bne.n	8005ee6 <PostFire+0x126>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 0|  0|  1|  1|  0|  0|  0|  0

    	    // If this is the first time, mark time
    		if(ctrl->currentState != ctrl->lastState)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	7c5a      	ldrb	r2, [r3, #17]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	7c1b      	ldrb	r3, [r3, #16]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d004      	beq.n	8005e4e <PostFire+0x8e>
    	    {
    	    	ctrl->timeStarted = HAL_GetTick();
 8005e44:	f7fa fc62 	bl	800070c <HAL_GetTick>
 8005e48:	0002      	movs	r2, r0
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	601a      	str	r2, [r3, #0]
    	    }

    		// Set Valve States
    		valve_target |= ((uint16_t)VV1 	\
 8005e4e:	248a      	movs	r4, #138	; 0x8a
 8005e50:	0064      	lsls	r4, r4, #1
 8005e52:	193b      	adds	r3, r7, r4
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2218      	movs	r2, #24
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	193a      	adds	r2, r7, r4
 8005e5c:	6013      	str	r3, [r2, #0]
						 |(uint16_t)VV2);
    		// Timestamp and Log
    		valve_configuration = StateConfiguration();
 8005e5e:	f000 fee3 	bl	8006c28 <StateConfiguration>
 8005e62:	0003      	movs	r3, r0
 8005e64:	218c      	movs	r1, #140	; 0x8c
 8005e66:	0049      	lsls	r1, r1, #1
 8005e68:	187a      	adds	r2, r7, r1
 8005e6a:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		ctrl->lastState = ctrl->currentState;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	7c5a      	ldrb	r2, [r3, #17]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	741a      	strb	r2, [r3, #16]
    		ctrl->currentState =POST_FIRE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	220d      	movs	r2, #13
 8005e78:	745a      	strb	r2, [r3, #17]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8005e7a:	187b      	adds	r3, r7, r1
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	193b      	adds	r3, r7, r4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	425a      	negs	r2, r3
 8005e86:	4153      	adcs	r3, r2
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	228e      	movs	r2, #142	; 0x8e
 8005e8c:	0052      	lsls	r2, r2, #1
 8005e8e:	18ba      	adds	r2, r7, r2
 8005e90:	6013      	str	r3, [r2, #0]

    		//TODO Specify time frame
    		if(now - ctrl->timeStarted > TIMEOUT)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2288      	movs	r2, #136	; 0x88
 8005e98:	0052      	lsls	r2, r2, #1
 8005e9a:	18ba      	adds	r2, r7, r2
 8005e9c:	6812      	ldr	r2, [r2, #0]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2284      	movs	r2, #132	; 0x84
 8005ea2:	0052      	lsls	r2, r2, #1
 8005ea4:	18ba      	adds	r2, r7, r2
 8005ea6:	6812      	ldr	r2, [r2, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d205      	bcs.n	8005eb8 <PostFire+0xf8>
    		{
        		ctrl->isArmed = FALSE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	609a      	str	r2, [r3, #8]
        		ctrl->currentState = SAFETY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	220f      	movs	r2, #15
 8005eb6:	745a      	strb	r2, [r3, #17]
    		}

    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8005eb8:	238e      	movs	r3, #142	; 0x8e
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	18fb      	adds	r3, r7, r3
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	238c      	movs	r3, #140	; 0x8c
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	18fb      	adds	r3, r7, r3
 8005ec6:	6819      	ldr	r1, [r3, #0]
 8005ec8:	2486      	movs	r4, #134	; 0x86
 8005eca:	0064      	lsls	r4, r4, #1
 8005ecc:	193b      	adds	r3, r7, r4
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f7ff ff15 	bl	8005d00 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8005ed6:	193b      	adds	r3, r7, r4
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	4b19      	ldr	r3, [pc, #100]	; (8005f40 <PostFire+0x180>)
 8005edc:	0011      	movs	r1, r2
 8005ede:	0018      	movs	r0, r3
 8005ee0:	f000 ffee 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & POST_FIRE) == POST_FIRE){
 8005ee4:	e023      	b.n	8005f2e <PostFire+0x16e>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, POST_FIRE, ctrl->currentState);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	7c5a      	ldrb	r2, [r3, #17]
 8005eea:	2486      	movs	r4, #134	; 0x86
 8005eec:	0064      	lsls	r4, r4, #1
 8005eee:	193b      	adds	r3, r7, r4
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	210d      	movs	r1, #13
 8005ef4:	0018      	movs	r0, r3
 8005ef6:	f7ff fdf5 	bl	8005ae4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1,msgPtr);
 8005efa:	193b      	adds	r3, r7, r4
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <PostFire+0x180>)
 8005f00:	0011      	movs	r1, r2
 8005f02:	0018      	movs	r0, r3
 8005f04:	f000 ffdc 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & POST_FIRE) == POST_FIRE){
 8005f08:	e011      	b.n	8005f2e <PostFire+0x16e>

    	}
    }else{
    	    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, ctrl->currentState, ctrl->lastState);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	7c59      	ldrb	r1, [r3, #17]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	7c1a      	ldrb	r2, [r3, #16]
 8005f12:	2486      	movs	r4, #134	; 0x86
 8005f14:	0064      	lsls	r4, r4, #1
 8005f16:	193b      	adds	r3, r7, r4
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	f7ff fe76 	bl	8005c0c <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8005f20:	193b      	adds	r3, r7, r4
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	4b06      	ldr	r3, [pc, #24]	; (8005f40 <PostFire+0x180>)
 8005f26:	0011      	movs	r1, r2
 8005f28:	0018      	movs	r0, r3
 8005f2a:	f000 ffc9 	bl	8006ec0 <UART_SendMessage>
    }
	return success;
 8005f2e:	238e      	movs	r3, #142	; 0x8e
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	18fb      	adds	r3, r7, r3
 8005f34:	681b      	ldr	r3, [r3, #0]
}
 8005f36:	0018      	movs	r0, r3
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	b049      	add	sp, #292	; 0x124
 8005f3c:	bd90      	pop	{r4, r7, pc}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	2000009c 	.word	0x2000009c

08005f44 <PreChill>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "pre_chill.h"

uint32_t PreChill(struct StateVars *ctrl)
{
 8005f44:	b590      	push	{r4, r7, lr}
 8005f46:	b0c9      	sub	sp, #292	; 0x124
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	228e      	movs	r2, #142	; 0x8e
 8005f50:	0052      	lsls	r2, r2, #1
 8005f52:	18ba      	adds	r2, r7, r2
 8005f54:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8005f56:	2300      	movs	r3, #0
 8005f58:	228c      	movs	r2, #140	; 0x8c
 8005f5a:	0052      	lsls	r2, r2, #1
 8005f5c:	18ba      	adds	r2, r7, r2
 8005f5e:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8005f60:	2300      	movs	r3, #0
 8005f62:	228a      	movs	r2, #138	; 0x8a
 8005f64:	0052      	lsls	r2, r2, #1
 8005f66:	18ba      	adds	r2, r7, r2
 8005f68:	6013      	str	r3, [r2, #0]
	uint32_t now = HAL_GetTick();
 8005f6a:	f7fa fbcf 	bl	800070c <HAL_GetTick>
 8005f6e:	0003      	movs	r3, r0
 8005f70:	2288      	movs	r2, #136	; 0x88
 8005f72:	0052      	lsls	r2, r2, #1
 8005f74:	18ba      	adds	r2, r7, r2
 8005f76:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8005f78:	2308      	movs	r3, #8
 8005f7a:	18fb      	adds	r3, r7, r3
 8005f7c:	2286      	movs	r2, #134	; 0x86
 8005f7e:	0052      	lsls	r2, r2, #1
 8005f80:	18ba      	adds	r2, r7, r2
 8005f82:	6013      	str	r3, [r2, #0]

	//TODO Specify a real timeout
	uint32_t TIMEOUT = 2000;
 8005f84:	23fa      	movs	r3, #250	; 0xfa
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	2284      	movs	r2, #132	; 0x84
 8005f8a:	0052      	lsls	r2, r2, #1
 8005f8c:	18ba      	adds	r2, r7, r2
 8005f8e:	6013      	str	r3, [r2, #0]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	7c5b      	ldrb	r3, [r3, #17]
 8005f94:	0018      	movs	r0, r3
 8005f96:	f000 fe23 	bl	8006be0 <VerifyState>
 8005f9a:	1e03      	subs	r3, r0, #0
 8005f9c:	d073      	beq.n	8006086 <PreChill+0x142>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	7c1b      	ldrb	r3, [r3, #16]
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f000 fe1c 	bl	8006be0 <VerifyState>
 8005fa8:	1e03      	subs	r3, r0, #0
 8005faa:	d06c      	beq.n	8006086 <PreChill+0x142>
    {
    	if((ctrl->currentState & PRE_CHILL) == PRE_CHILL){
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	7c5b      	ldrb	r3, [r3, #17]
 8005fb0:	001a      	movs	r2, r3
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d153      	bne.n	8006062 <PreChill+0x11e>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 1|  1|  0|  0|  0|  0| 10|  0

    	    // If this is the first time, mark time
    		if(ctrl->currentState != ctrl->lastState)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	7c5a      	ldrb	r2, [r3, #17]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	7c1b      	ldrb	r3, [r3, #16]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d004      	beq.n	8005fd0 <PreChill+0x8c>
    	    {
    	    	ctrl->timeStarted = HAL_GetTick();
 8005fc6:	f7fa fba1 	bl	800070c <HAL_GetTick>
 8005fca:	0002      	movs	r2, r0
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	601a      	str	r2, [r3, #0]
    	    }

    		// Set Valve States
    		valve_target |= ((uint16_t)PV2 	\
 8005fd0:	248a      	movs	r4, #138	; 0x8a
 8005fd2:	0064      	lsls	r4, r4, #1
 8005fd4:	193b      	adds	r3, r7, r4
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2286      	movs	r2, #134	; 0x86
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	193a      	adds	r2, r7, r4
 8005fde:	6013      	str	r3, [r2, #0]
    					 |(uint16_t)PV3 	\
						 |(uint16_t)MV1);
    		// Timestamp and Log
    		valve_configuration = StateConfiguration();
 8005fe0:	f000 fe22 	bl	8006c28 <StateConfiguration>
 8005fe4:	0003      	movs	r3, r0
 8005fe6:	218c      	movs	r1, #140	; 0x8c
 8005fe8:	0049      	lsls	r1, r1, #1
 8005fea:	187a      	adds	r2, r7, r1
 8005fec:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		ctrl->lastState = ctrl->currentState;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	7c5a      	ldrb	r2, [r3, #17]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	741a      	strb	r2, [r3, #16]
    		ctrl->currentState = PRE_CHILL;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2203      	movs	r2, #3
 8005ffa:	745a      	strb	r2, [r3, #17]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8005ffc:	187b      	adds	r3, r7, r1
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	193b      	adds	r3, r7, r4
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	425a      	negs	r2, r3
 8006008:	4153      	adcs	r3, r2
 800600a:	b2db      	uxtb	r3, r3
 800600c:	228e      	movs	r2, #142	; 0x8e
 800600e:	0052      	lsls	r2, r2, #1
 8006010:	18ba      	adds	r2, r7, r2
 8006012:	6013      	str	r3, [r2, #0]

    		//TODO Specify time frame
    		if(now - ctrl->timeStarted > TIMEOUT)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2288      	movs	r2, #136	; 0x88
 800601a:	0052      	lsls	r2, r2, #1
 800601c:	18ba      	adds	r2, r7, r2
 800601e:	6812      	ldr	r2, [r2, #0]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2284      	movs	r2, #132	; 0x84
 8006024:	0052      	lsls	r2, r2, #1
 8006026:	18ba      	adds	r2, r7, r2
 8006028:	6812      	ldr	r2, [r2, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d202      	bcs.n	8006034 <PreChill+0xf0>
    		{
        		ctrl->currentState = IGNITION;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2204      	movs	r2, #4
 8006032:	745a      	strb	r2, [r3, #17]
    		}

    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8006034:	238e      	movs	r3, #142	; 0x8e
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	18fb      	adds	r3, r7, r3
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	238c      	movs	r3, #140	; 0x8c
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	18fb      	adds	r3, r7, r3
 8006042:	6819      	ldr	r1, [r3, #0]
 8006044:	2486      	movs	r4, #134	; 0x86
 8006046:	0064      	lsls	r4, r4, #1
 8006048:	193b      	adds	r3, r7, r4
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	0018      	movs	r0, r3
 800604e:	f7ff fe57 	bl	8005d00 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8006052:	193b      	adds	r3, r7, r4
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	4b19      	ldr	r3, [pc, #100]	; (80060bc <PreChill+0x178>)
 8006058:	0011      	movs	r1, r2
 800605a:	0018      	movs	r0, r3
 800605c:	f000 ff30 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & PRE_CHILL) == PRE_CHILL){
 8006060:	e023      	b.n	80060aa <PreChill+0x166>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, PRE_CHILL, ctrl->currentState);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	7c5a      	ldrb	r2, [r3, #17]
 8006066:	2486      	movs	r4, #134	; 0x86
 8006068:	0064      	lsls	r4, r4, #1
 800606a:	193b      	adds	r3, r7, r4
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2103      	movs	r1, #3
 8006070:	0018      	movs	r0, r3
 8006072:	f7ff fd37 	bl	8005ae4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1,msgPtr);
 8006076:	193b      	adds	r3, r7, r4
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	4b10      	ldr	r3, [pc, #64]	; (80060bc <PreChill+0x178>)
 800607c:	0011      	movs	r1, r2
 800607e:	0018      	movs	r0, r3
 8006080:	f000 ff1e 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & PRE_CHILL) == PRE_CHILL){
 8006084:	e011      	b.n	80060aa <PreChill+0x166>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, ctrl->currentState, ctrl->lastState);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	7c59      	ldrb	r1, [r3, #17]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	7c1a      	ldrb	r2, [r3, #16]
 800608e:	2486      	movs	r4, #134	; 0x86
 8006090:	0064      	lsls	r4, r4, #1
 8006092:	193b      	adds	r3, r7, r4
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	0018      	movs	r0, r3
 8006098:	f7ff fdb8 	bl	8005c0c <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 800609c:	193b      	adds	r3, r7, r4
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	4b06      	ldr	r3, [pc, #24]	; (80060bc <PreChill+0x178>)
 80060a2:	0011      	movs	r1, r2
 80060a4:	0018      	movs	r0, r3
 80060a6:	f000 ff0b 	bl	8006ec0 <UART_SendMessage>
    }
	return success;
 80060aa:	238e      	movs	r3, #142	; 0x8e
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	18fb      	adds	r3, r7, r3
 80060b0:	681b      	ldr	r3, [r3, #0]
}
 80060b2:	0018      	movs	r0, r3
 80060b4:	46bd      	mov	sp, r7
 80060b6:	b049      	add	sp, #292	; 0x124
 80060b8:	bd90      	pop	{r4, r7, pc}
 80060ba:	46c0      	nop			; (mov r8, r8)
 80060bc:	2000009c 	.word	0x2000009c

080060c0 <Purge>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "purge.h"

uint32_t Purge(struct StateVars *ctrl)
{
 80060c0:	b590      	push	{r4, r7, lr}
 80060c2:	b0c9      	sub	sp, #292	; 0x124
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 80060c8:	2300      	movs	r3, #0
 80060ca:	228e      	movs	r2, #142	; 0x8e
 80060cc:	0052      	lsls	r2, r2, #1
 80060ce:	18ba      	adds	r2, r7, r2
 80060d0:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 80060d2:	2300      	movs	r3, #0
 80060d4:	228c      	movs	r2, #140	; 0x8c
 80060d6:	0052      	lsls	r2, r2, #1
 80060d8:	18ba      	adds	r2, r7, r2
 80060da:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	228a      	movs	r2, #138	; 0x8a
 80060e0:	0052      	lsls	r2, r2, #1
 80060e2:	18ba      	adds	r2, r7, r2
 80060e4:	6013      	str	r3, [r2, #0]
	uint32_t now = HAL_GetTick();
 80060e6:	f7fa fb11 	bl	800070c <HAL_GetTick>
 80060ea:	0003      	movs	r3, r0
 80060ec:	2288      	movs	r2, #136	; 0x88
 80060ee:	0052      	lsls	r2, r2, #1
 80060f0:	18ba      	adds	r2, r7, r2
 80060f2:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 80060f4:	2308      	movs	r3, #8
 80060f6:	18fb      	adds	r3, r7, r3
 80060f8:	2286      	movs	r2, #134	; 0x86
 80060fa:	0052      	lsls	r2, r2, #1
 80060fc:	18ba      	adds	r2, r7, r2
 80060fe:	6013      	str	r3, [r2, #0]

	//TODO Specify a real timeout
	uint32_t TIMEOUT = 2000;
 8006100:	23fa      	movs	r3, #250	; 0xfa
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	2284      	movs	r2, #132	; 0x84
 8006106:	0052      	lsls	r2, r2, #1
 8006108:	18ba      	adds	r2, r7, r2
 800610a:	6013      	str	r3, [r2, #0]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	7c5b      	ldrb	r3, [r3, #17]
 8006110:	0018      	movs	r0, r3
 8006112:	f000 fd65 	bl	8006be0 <VerifyState>
 8006116:	1e03      	subs	r3, r0, #0
 8006118:	d073      	beq.n	8006202 <Purge+0x142>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	7c1b      	ldrb	r3, [r3, #16]
 800611e:	0018      	movs	r0, r3
 8006120:	f000 fd5e 	bl	8006be0 <VerifyState>
 8006124:	1e03      	subs	r3, r0, #0
 8006126:	d06c      	beq.n	8006202 <Purge+0x142>
    {
    	if((ctrl->currentState & PURGE) == PURGE){
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	7c5b      	ldrb	r3, [r3, #17]
 800612c:	001a      	movs	r2, r3
 800612e:	230c      	movs	r3, #12
 8006130:	4013      	ands	r3, r2
 8006132:	2b0c      	cmp	r3, #12
 8006134:	d153      	bne.n	80061de <Purge+0x11e>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 1| 0|  0|  1|  1|  0|  0|  0|  0

    	    // If this is the first time, mark time
    		if(ctrl->currentState != ctrl->lastState)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	7c5a      	ldrb	r2, [r3, #17]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	7c1b      	ldrb	r3, [r3, #16]
 800613e:	429a      	cmp	r2, r3
 8006140:	d004      	beq.n	800614c <Purge+0x8c>
    	    {
    	    	ctrl->timeStarted = HAL_GetTick();
 8006142:	f7fa fae3 	bl	800070c <HAL_GetTick>
 8006146:	0002      	movs	r2, r0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	601a      	str	r2, [r3, #0]
    	    }

    		// Set Valve States
    		valve_target |= ((uint16_t)PV1 	\
 800614c:	248a      	movs	r4, #138	; 0x8a
 800614e:	0064      	lsls	r4, r4, #1
 8006150:	193b      	adds	r3, r7, r4
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2219      	movs	r2, #25
 8006156:	4313      	orrs	r3, r2
 8006158:	193a      	adds	r2, r7, r4
 800615a:	6013      	str	r3, [r2, #0]
    					 |(uint16_t)VV1 	\
						 |(uint16_t)VV2);
    		// Timestamp and Log
    		valve_configuration = StateConfiguration();
 800615c:	f000 fd64 	bl	8006c28 <StateConfiguration>
 8006160:	0003      	movs	r3, r0
 8006162:	218c      	movs	r1, #140	; 0x8c
 8006164:	0049      	lsls	r1, r1, #1
 8006166:	187a      	adds	r2, r7, r1
 8006168:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		ctrl->lastState = ctrl->currentState;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	7c5a      	ldrb	r2, [r3, #17]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	741a      	strb	r2, [r3, #16]
    		ctrl->currentState =PURGE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	220c      	movs	r2, #12
 8006176:	745a      	strb	r2, [r3, #17]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8006178:	187b      	adds	r3, r7, r1
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	193b      	adds	r3, r7, r4
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	425a      	negs	r2, r3
 8006184:	4153      	adcs	r3, r2
 8006186:	b2db      	uxtb	r3, r3
 8006188:	228e      	movs	r2, #142	; 0x8e
 800618a:	0052      	lsls	r2, r2, #1
 800618c:	18ba      	adds	r2, r7, r2
 800618e:	6013      	str	r3, [r2, #0]

    		//TODO Specify time frame
    		if(now - ctrl->timeStarted > TIMEOUT)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2288      	movs	r2, #136	; 0x88
 8006196:	0052      	lsls	r2, r2, #1
 8006198:	18ba      	adds	r2, r7, r2
 800619a:	6812      	ldr	r2, [r2, #0]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2284      	movs	r2, #132	; 0x84
 80061a0:	0052      	lsls	r2, r2, #1
 80061a2:	18ba      	adds	r2, r7, r2
 80061a4:	6812      	ldr	r2, [r2, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d202      	bcs.n	80061b0 <Purge+0xf0>
    		{
        		ctrl->currentState= POST_FIRE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	220d      	movs	r2, #13
 80061ae:	745a      	strb	r2, [r3, #17]
    		}

    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 80061b0:	238e      	movs	r3, #142	; 0x8e
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	18fb      	adds	r3, r7, r3
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	238c      	movs	r3, #140	; 0x8c
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	18fb      	adds	r3, r7, r3
 80061be:	6819      	ldr	r1, [r3, #0]
 80061c0:	2486      	movs	r4, #134	; 0x86
 80061c2:	0064      	lsls	r4, r4, #1
 80061c4:	193b      	adds	r3, r7, r4
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	0018      	movs	r0, r3
 80061ca:	f7ff fd99 	bl	8005d00 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 80061ce:	193b      	adds	r3, r7, r4
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4b19      	ldr	r3, [pc, #100]	; (8006238 <Purge+0x178>)
 80061d4:	0011      	movs	r1, r2
 80061d6:	0018      	movs	r0, r3
 80061d8:	f000 fe72 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & PURGE) == PURGE){
 80061dc:	e023      	b.n	8006226 <Purge+0x166>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, PURGE, ctrl->currentState);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	7c5a      	ldrb	r2, [r3, #17]
 80061e2:	2486      	movs	r4, #134	; 0x86
 80061e4:	0064      	lsls	r4, r4, #1
 80061e6:	193b      	adds	r3, r7, r4
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	210c      	movs	r1, #12
 80061ec:	0018      	movs	r0, r3
 80061ee:	f7ff fc79 	bl	8005ae4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1,msgPtr);
 80061f2:	193b      	adds	r3, r7, r4
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	4b10      	ldr	r3, [pc, #64]	; (8006238 <Purge+0x178>)
 80061f8:	0011      	movs	r1, r2
 80061fa:	0018      	movs	r0, r3
 80061fc:	f000 fe60 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & PURGE) == PURGE){
 8006200:	e011      	b.n	8006226 <Purge+0x166>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, ctrl->currentState, ctrl->lastState);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	7c59      	ldrb	r1, [r3, #17]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	7c1a      	ldrb	r2, [r3, #16]
 800620a:	2486      	movs	r4, #134	; 0x86
 800620c:	0064      	lsls	r4, r4, #1
 800620e:	193b      	adds	r3, r7, r4
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	0018      	movs	r0, r3
 8006214:	f7ff fcfa 	bl	8005c0c <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8006218:	193b      	adds	r3, r7, r4
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	4b06      	ldr	r3, [pc, #24]	; (8006238 <Purge+0x178>)
 800621e:	0011      	movs	r1, r2
 8006220:	0018      	movs	r0, r3
 8006222:	f000 fe4d 	bl	8006ec0 <UART_SendMessage>
    }
	return success;
 8006226:	238e      	movs	r3, #142	; 0x8e
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	18fb      	adds	r3, r7, r3
 800622c:	681b      	ldr	r3, [r3, #0]
}
 800622e:	0018      	movs	r0, r3
 8006230:	46bd      	mov	sp, r7
 8006232:	b049      	add	sp, #292	; 0x124
 8006234:	bd90      	pop	{r4, r7, pc}
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	2000009c 	.word	0x2000009c

0800623c <Safety>:
//
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "safety.h"

uint32_t Safety(struct StateVars *ctrl) {
 800623c:	b590      	push	{r4, r7, lr}
 800623e:	b0c7      	sub	sp, #284	; 0x11c
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8006244:	2300      	movs	r3, #0
 8006246:	228a      	movs	r2, #138	; 0x8a
 8006248:	0052      	lsls	r2, r2, #1
 800624a:	18ba      	adds	r2, r7, r2
 800624c:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	2288      	movs	r2, #136	; 0x88
 8006252:	0052      	lsls	r2, r2, #1
 8006254:	18ba      	adds	r2, r7, r2
 8006256:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8006258:	2300      	movs	r3, #0
 800625a:	2286      	movs	r2, #134	; 0x86
 800625c:	0052      	lsls	r2, r2, #1
 800625e:	18ba      	adds	r2, r7, r2
 8006260:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8006262:	2308      	movs	r3, #8
 8006264:	18fb      	adds	r3, r7, r3
 8006266:	2284      	movs	r2, #132	; 0x84
 8006268:	0052      	lsls	r2, r2, #1
 800626a:	18ba      	adds	r2, r7, r2
 800626c:	6013      	str	r3, [r2, #0]

	if (VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState)) {
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	7c5b      	ldrb	r3, [r3, #17]
 8006272:	0018      	movs	r0, r3
 8006274:	f000 fcb4 	bl	8006be0 <VerifyState>
 8006278:	1e03      	subs	r3, r0, #0
 800627a:	d066      	beq.n	800634a <Safety+0x10e>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	7c1b      	ldrb	r3, [r3, #16]
 8006280:	0018      	movs	r0, r3
 8006282:	f000 fcad 	bl	8006be0 <VerifyState>
 8006286:	1e03      	subs	r3, r0, #0
 8006288:	d05f      	beq.n	800634a <Safety+0x10e>
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	7c5b      	ldrb	r3, [r3, #17]
 800628e:	001a      	movs	r2, r3
 8006290:	230f      	movs	r3, #15
 8006292:	4013      	ands	r3, r2
 8006294:	2b0f      	cmp	r3, #15
 8006296:	d146      	bne.n	8006326 <Safety+0xea>
			// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
			// | 0|  0|  0| 1|  1|  0|  0|  0|   0
			// Set Valve States
			valve_target |= (uint16_t) VV1 | (uint16_t) VV2;
 8006298:	2486      	movs	r4, #134	; 0x86
 800629a:	0064      	lsls	r4, r4, #1
 800629c:	193b      	adds	r3, r7, r4
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2218      	movs	r2, #24
 80062a2:	4313      	orrs	r3, r2
 80062a4:	193a      	adds	r2, r7, r4
 80062a6:	6013      	str	r3, [r2, #0]
			ValveStateSetter(valve_target);
 80062a8:	193b      	adds	r3, r7, r4
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	0018      	movs	r0, r3
 80062ae:	f000 fd3f 	bl	8006d30 <ValveStateSetter>
			valve_configuration = StateConfiguration();
 80062b2:	f000 fcb9 	bl	8006c28 <StateConfiguration>
 80062b6:	0003      	movs	r3, r0
 80062b8:	2188      	movs	r1, #136	; 0x88
 80062ba:	0049      	lsls	r1, r1, #1
 80062bc:	187a      	adds	r2, r7, r1
 80062be:	6013      	str	r3, [r2, #0]
			ctrl->lastState = ctrl->currentState;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	7c5a      	ldrb	r2, [r3, #17]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	741a      	strb	r2, [r3, #16]
			ctrl->currentState = SAFETY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	220f      	movs	r2, #15
 80062cc:	745a      	strb	r2, [r3, #17]
			success = (valve_configuration == valve_target ? TRUE : FALSE);
 80062ce:	187b      	adds	r3, r7, r1
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	193b      	adds	r3, r7, r4
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	425a      	negs	r2, r3
 80062da:	4153      	adcs	r3, r2
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	228a      	movs	r2, #138	; 0x8a
 80062e0:	0052      	lsls	r2, r2, #1
 80062e2:	18b8      	adds	r0, r7, r2
 80062e4:	6003      	str	r3, [r0, #0]
			// Create Message and Transmit
			Get_Valve_State_Status_Msg(msgPtr, valve_configuration, success);
 80062e6:	18bb      	adds	r3, r7, r2
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	187b      	adds	r3, r7, r1
 80062ec:	6819      	ldr	r1, [r3, #0]
 80062ee:	2484      	movs	r4, #132	; 0x84
 80062f0:	0064      	lsls	r4, r4, #1
 80062f2:	193b      	adds	r3, r7, r4
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	0018      	movs	r0, r3
 80062f8:	f7ff fd02 	bl	8005d00 <Get_Valve_State_Status_Msg>
			UART_SendMessage(&hlpuart1, msgPtr);
 80062fc:	193b      	adds	r3, r7, r4
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	4b20      	ldr	r3, [pc, #128]	; (8006384 <Safety+0x148>)
 8006302:	0011      	movs	r1, r2
 8006304:	0018      	movs	r0, r3
 8006306:	f000 fddb 	bl	8006ec0 <UART_SendMessage>
			if (ctrl->isArmed && success) {
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d02e      	beq.n	8006370 <Safety+0x134>
 8006312:	238a      	movs	r3, #138	; 0x8a
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	18fb      	adds	r3, r7, r3
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d028      	beq.n	8006370 <Safety+0x134>
				ctrl->currentState = SETUP_OPS;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	745a      	strb	r2, [r3, #17]
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 8006324:	e024      	b.n	8006370 <Safety+0x134>
			}
		} else {
			// Log Expected State != Passed State
			Get_State_Disagree_Error_Msg(msgPtr, SAFETY, ctrl->currentState);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	7c5a      	ldrb	r2, [r3, #17]
 800632a:	2484      	movs	r4, #132	; 0x84
 800632c:	0064      	lsls	r4, r4, #1
 800632e:	193b      	adds	r3, r7, r4
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	210f      	movs	r1, #15
 8006334:	0018      	movs	r0, r3
 8006336:	f7ff fbd5 	bl	8005ae4 <Get_State_Disagree_Error_Msg>
			UART_SendMessage(&hlpuart1, msgPtr);
 800633a:	193b      	adds	r3, r7, r4
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	4b11      	ldr	r3, [pc, #68]	; (8006384 <Safety+0x148>)
 8006340:	0011      	movs	r1, r2
 8006342:	0018      	movs	r0, r3
 8006344:	f000 fdbc 	bl	8006ec0 <UART_SendMessage>
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 8006348:	e012      	b.n	8006370 <Safety+0x134>
		}
	} else {
		// Log Invalid State
		Get_Invalid_State_Error_Msg(msgPtr, ctrl->currentState, ctrl->lastState);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	7c59      	ldrb	r1, [r3, #17]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	7c1a      	ldrb	r2, [r3, #16]
 8006352:	2484      	movs	r4, #132	; 0x84
 8006354:	0064      	lsls	r4, r4, #1
 8006356:	193b      	adds	r3, r7, r4
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	0018      	movs	r0, r3
 800635c:	f7ff fc56 	bl	8005c0c <Get_Invalid_State_Error_Msg>
		UART_SendMessage(&hlpuart1, msgPtr);
 8006360:	193b      	adds	r3, r7, r4
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	4b07      	ldr	r3, [pc, #28]	; (8006384 <Safety+0x148>)
 8006366:	0011      	movs	r1, r2
 8006368:	0018      	movs	r0, r3
 800636a:	f000 fda9 	bl	8006ec0 <UART_SendMessage>
 800636e:	e000      	b.n	8006372 <Safety+0x136>
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 8006370:	46c0      	nop			; (mov r8, r8)
	}
	return success;
 8006372:	238a      	movs	r3, #138	; 0x8a
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	18fb      	adds	r3, r7, r3
 8006378:	681b      	ldr	r3, [r3, #0]
}
 800637a:	0018      	movs	r0, r3
 800637c:	46bd      	mov	sp, r7
 800637e:	b047      	add	sp, #284	; 0x11c
 8006380:	bd90      	pop	{r4, r7, pc}
 8006382:	46c0      	nop			; (mov r8, r8)
 8006384:	2000009c 	.word	0x2000009c

08006388 <SetupOps>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "setup_ops.h"

uint32_t SetupOps(struct StateVars *ctrl)
{
 8006388:	b590      	push	{r4, r7, lr}
 800638a:	b0c9      	sub	sp, #292	; 0x124
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8006390:	2300      	movs	r3, #0
 8006392:	228e      	movs	r2, #142	; 0x8e
 8006394:	0052      	lsls	r2, r2, #1
 8006396:	18ba      	adds	r2, r7, r2
 8006398:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 800639a:	2300      	movs	r3, #0
 800639c:	228c      	movs	r2, #140	; 0x8c
 800639e:	0052      	lsls	r2, r2, #1
 80063a0:	18ba      	adds	r2, r7, r2
 80063a2:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 80063a4:	2300      	movs	r3, #0
 80063a6:	228a      	movs	r2, #138	; 0x8a
 80063a8:	0052      	lsls	r2, r2, #1
 80063aa:	18ba      	adds	r2, r7, r2
 80063ac:	6013      	str	r3, [r2, #0]
	uint32_t now = HAL_GetTick();
 80063ae:	f7fa f9ad 	bl	800070c <HAL_GetTick>
 80063b2:	0003      	movs	r3, r0
 80063b4:	2288      	movs	r2, #136	; 0x88
 80063b6:	0052      	lsls	r2, r2, #1
 80063b8:	18ba      	adds	r2, r7, r2
 80063ba:	6013      	str	r3, [r2, #0]
	uint32_t TIMEOUT = 2000;
 80063bc:	23fa      	movs	r3, #250	; 0xfa
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	2286      	movs	r2, #134	; 0x86
 80063c2:	0052      	lsls	r2, r2, #1
 80063c4:	18ba      	adds	r2, r7, r2
 80063c6:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 80063c8:	2308      	movs	r3, #8
 80063ca:	18fb      	adds	r3, r7, r3
 80063cc:	2284      	movs	r2, #132	; 0x84
 80063ce:	0052      	lsls	r2, r2, #1
 80063d0:	18ba      	adds	r2, r7, r2
 80063d2:	6013      	str	r3, [r2, #0]

    if(ctrl->currentState != ctrl->lastState)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	7c5a      	ldrb	r2, [r3, #17]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	7c1b      	ldrb	r3, [r3, #16]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d004      	beq.n	80063ea <SetupOps+0x62>
    {
    	ctrl->timeStarted = HAL_GetTick();
 80063e0:	f7fa f994 	bl	800070c <HAL_GetTick>
 80063e4:	0002      	movs	r2, r0
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	601a      	str	r2, [r3, #0]
    }

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	7c5b      	ldrb	r3, [r3, #17]
 80063ee:	0018      	movs	r0, r3
 80063f0:	f000 fbf6 	bl	8006be0 <VerifyState>
 80063f4:	1e03      	subs	r3, r0, #0
 80063f6:	d050      	beq.n	800649a <SetupOps+0x112>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	7c1b      	ldrb	r3, [r3, #16]
 80063fc:	0018      	movs	r0, r3
 80063fe:	f000 fbef 	bl	8006be0 <VerifyState>
 8006402:	1e03      	subs	r3, r0, #0
 8006404:	d049      	beq.n	800649a <SetupOps+0x112>
    	if((ctrl->currentState & SETUP_OPS) == SETUP_OPS){
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// 11 |11 |11 |11 |11 |11 |11 |11 |11

    		// Set Valve States
    		valve_target |= ((uint16_t)VV1 	\
 8006406:	248a      	movs	r4, #138	; 0x8a
 8006408:	0064      	lsls	r4, r4, #1
 800640a:	193b      	adds	r3, r7, r4
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2218      	movs	r2, #24
 8006410:	4313      	orrs	r3, r2
 8006412:	193a      	adds	r2, r7, r4
 8006414:	6013      	str	r3, [r2, #0]
						 |(uint16_t)VV2);
    		// Timestamp and Log
    		ValveStateSetter(valve_target);
 8006416:	193b      	adds	r3, r7, r4
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	0018      	movs	r0, r3
 800641c:	f000 fc88 	bl	8006d30 <ValveStateSetter>
    		valve_configuration = StateConfiguration();
 8006420:	f000 fc02 	bl	8006c28 <StateConfiguration>
 8006424:	0003      	movs	r3, r0
 8006426:	218c      	movs	r1, #140	; 0x8c
 8006428:	0049      	lsls	r1, r1, #1
 800642a:	187a      	adds	r2, r7, r1
 800642c:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		ctrl->lastState = ctrl->currentState;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	7c5a      	ldrb	r2, [r3, #17]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	741a      	strb	r2, [r3, #16]
    		ctrl->currentState =SETUP_OPS;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	745a      	strb	r2, [r3, #17]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 800643c:	187b      	adds	r3, r7, r1
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	193b      	adds	r3, r7, r4
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	425a      	negs	r2, r3
 8006448:	4153      	adcs	r3, r2
 800644a:	b2db      	uxtb	r3, r3
 800644c:	228e      	movs	r2, #142	; 0x8e
 800644e:	0052      	lsls	r2, r2, #1
 8006450:	18b8      	adds	r0, r7, r2
 8006452:	6003      	str	r3, [r0, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8006454:	18bb      	adds	r3, r7, r2
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	187b      	adds	r3, r7, r1
 800645a:	6819      	ldr	r1, [r3, #0]
 800645c:	2484      	movs	r4, #132	; 0x84
 800645e:	0064      	lsls	r4, r4, #1
 8006460:	193b      	adds	r3, r7, r4
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	0018      	movs	r0, r3
 8006466:	f7ff fc4b 	bl	8005d00 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 800646a:	193b      	adds	r3, r7, r4
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	4b19      	ldr	r3, [pc, #100]	; (80064d4 <SetupOps+0x14c>)
 8006470:	0011      	movs	r1, r2
 8006472:	0018      	movs	r0, r3
 8006474:	f000 fd24 	bl	8006ec0 <UART_SendMessage>

    		//TODO Specify time frame
    		if(now - ctrl->timeStarted > TIMEOUT)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2288      	movs	r2, #136	; 0x88
 800647e:	0052      	lsls	r2, r2, #1
 8006480:	18ba      	adds	r2, r7, r2
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2286      	movs	r2, #134	; 0x86
 8006488:	0052      	lsls	r2, r2, #1
 800648a:	18ba      	adds	r2, r7, r2
 800648c:	6812      	ldr	r2, [r2, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d216      	bcs.n	80064c0 <SetupOps+0x138>
    		{
        		ctrl->currentState=SITE_CLEAR_AND_START_UP;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	745a      	strb	r2, [r3, #17]
    	if((ctrl->currentState & SETUP_OPS) == SETUP_OPS){
 8006498:	e012      	b.n	80064c0 <SetupOps+0x138>
    		UART_SendMessage(&hlpuart1,msgPtr);

    	}
    }else{
    	    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, ctrl->currentState, ctrl->lastState);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	7c59      	ldrb	r1, [r3, #17]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	7c1a      	ldrb	r2, [r3, #16]
 80064a2:	2484      	movs	r4, #132	; 0x84
 80064a4:	0064      	lsls	r4, r4, #1
 80064a6:	193b      	adds	r3, r7, r4
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	0018      	movs	r0, r3
 80064ac:	f7ff fbae 	bl	8005c0c <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 80064b0:	193b      	adds	r3, r7, r4
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	4b07      	ldr	r3, [pc, #28]	; (80064d4 <SetupOps+0x14c>)
 80064b6:	0011      	movs	r1, r2
 80064b8:	0018      	movs	r0, r3
 80064ba:	f000 fd01 	bl	8006ec0 <UART_SendMessage>
 80064be:	e000      	b.n	80064c2 <SetupOps+0x13a>
    	if((ctrl->currentState & SETUP_OPS) == SETUP_OPS){
 80064c0:	46c0      	nop			; (mov r8, r8)
    }
	return success;
 80064c2:	238e      	movs	r3, #142	; 0x8e
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	18fb      	adds	r3, r7, r3
 80064c8:	681b      	ldr	r3, [r3, #0]
}
 80064ca:	0018      	movs	r0, r3
 80064cc:	46bd      	mov	sp, r7
 80064ce:	b049      	add	sp, #292	; 0x124
 80064d0:	bd90      	pop	{r4, r7, pc}
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	2000009c 	.word	0x2000009c

080064d8 <SiteClear>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "site_clear.h"

uint32_t SiteClear(struct StateVars *ctrl)
{
 80064d8:	b590      	push	{r4, r7, lr}
 80064da:	b0c9      	sub	sp, #292	; 0x124
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 80064e0:	2300      	movs	r3, #0
 80064e2:	228e      	movs	r2, #142	; 0x8e
 80064e4:	0052      	lsls	r2, r2, #1
 80064e6:	18ba      	adds	r2, r7, r2
 80064e8:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	228c      	movs	r2, #140	; 0x8c
 80064ee:	0052      	lsls	r2, r2, #1
 80064f0:	18ba      	adds	r2, r7, r2
 80064f2:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	228a      	movs	r2, #138	; 0x8a
 80064f8:	0052      	lsls	r2, r2, #1
 80064fa:	18ba      	adds	r2, r7, r2
 80064fc:	6013      	str	r3, [r2, #0]
	uint32_t now = HAL_GetTick();
 80064fe:	f7fa f905 	bl	800070c <HAL_GetTick>
 8006502:	0003      	movs	r3, r0
 8006504:	2288      	movs	r2, #136	; 0x88
 8006506:	0052      	lsls	r2, r2, #1
 8006508:	18ba      	adds	r2, r7, r2
 800650a:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 800650c:	2308      	movs	r3, #8
 800650e:	18fb      	adds	r3, r7, r3
 8006510:	2286      	movs	r2, #134	; 0x86
 8006512:	0052      	lsls	r2, r2, #1
 8006514:	18ba      	adds	r2, r7, r2
 8006516:	6013      	str	r3, [r2, #0]

	//TODO Specify a real timeout
	uint32_t TIMEOUT = 2000;
 8006518:	23fa      	movs	r3, #250	; 0xfa
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	2284      	movs	r2, #132	; 0x84
 800651e:	0052      	lsls	r2, r2, #1
 8006520:	18ba      	adds	r2, r7, r2
 8006522:	6013      	str	r3, [r2, #0]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	7c5b      	ldrb	r3, [r3, #17]
 8006528:	0018      	movs	r0, r3
 800652a:	f000 fb59 	bl	8006be0 <VerifyState>
 800652e:	1e03      	subs	r3, r0, #0
 8006530:	d072      	beq.n	8006618 <SiteClear+0x140>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	7c1b      	ldrb	r3, [r3, #16]
 8006536:	0018      	movs	r0, r3
 8006538:	f000 fb52 	bl	8006be0 <VerifyState>
 800653c:	1e03      	subs	r3, r0, #0
 800653e:	d06b      	beq.n	8006618 <SiteClear+0x140>
    {
    	if((ctrl->currentState & SITE_CLEAR_AND_START_UP) == SITE_CLEAR_AND_START_UP){
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	7c5b      	ldrb	r3, [r3, #17]
 8006544:	001a      	movs	r2, r3
 8006546:	2301      	movs	r3, #1
 8006548:	4013      	ands	r3, r2
 800654a:	d053      	beq.n	80065f4 <SiteClear+0x11c>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 0|  0|  1|  1|  0|  0|  0|  0
    	    // If this is the first time, mark time
    		if(ctrl->currentState != ctrl->lastState)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	7c5a      	ldrb	r2, [r3, #17]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	7c1b      	ldrb	r3, [r3, #16]
 8006554:	429a      	cmp	r2, r3
 8006556:	d004      	beq.n	8006562 <SiteClear+0x8a>
    	    {
    	    	ctrl->timeStarted = HAL_GetTick();
 8006558:	f7fa f8d8 	bl	800070c <HAL_GetTick>
 800655c:	0002      	movs	r2, r0
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	601a      	str	r2, [r3, #0]
    	    }

    		// Set Valve States
    		valve_target |= ((uint16_t)VV1 	\
 8006562:	248a      	movs	r4, #138	; 0x8a
 8006564:	0064      	lsls	r4, r4, #1
 8006566:	193b      	adds	r3, r7, r4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2218      	movs	r2, #24
 800656c:	4313      	orrs	r3, r2
 800656e:	193a      	adds	r2, r7, r4
 8006570:	6013      	str	r3, [r2, #0]
						 |(uint16_t)VV2);
    		// Timestamp and Log
    		valve_configuration = StateConfiguration();
 8006572:	f000 fb59 	bl	8006c28 <StateConfiguration>
 8006576:	0003      	movs	r3, r0
 8006578:	218c      	movs	r1, #140	; 0x8c
 800657a:	0049      	lsls	r1, r1, #1
 800657c:	187a      	adds	r2, r7, r1
 800657e:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		ctrl->lastState = ctrl->currentState;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	7c5a      	ldrb	r2, [r3, #17]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	741a      	strb	r2, [r3, #16]
    		ctrl->currentState = SITE_CLEAR_AND_START_UP;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	745a      	strb	r2, [r3, #17]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 800658e:	187b      	adds	r3, r7, r1
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	193b      	adds	r3, r7, r4
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	425a      	negs	r2, r3
 800659a:	4153      	adcs	r3, r2
 800659c:	b2db      	uxtb	r3, r3
 800659e:	228e      	movs	r2, #142	; 0x8e
 80065a0:	0052      	lsls	r2, r2, #1
 80065a2:	18ba      	adds	r2, r7, r2
 80065a4:	6013      	str	r3, [r2, #0]

    		//TODO Specify time frame
    		if(now - ctrl->timeStarted > TIMEOUT)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2288      	movs	r2, #136	; 0x88
 80065ac:	0052      	lsls	r2, r2, #1
 80065ae:	18ba      	adds	r2, r7, r2
 80065b0:	6812      	ldr	r2, [r2, #0]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	2284      	movs	r2, #132	; 0x84
 80065b6:	0052      	lsls	r2, r2, #1
 80065b8:	18ba      	adds	r2, r7, r2
 80065ba:	6812      	ldr	r2, [r2, #0]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d202      	bcs.n	80065c6 <SiteClear+0xee>
    		{
        		ctrl->currentState = PRE_CHILL;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2203      	movs	r2, #3
 80065c4:	745a      	strb	r2, [r3, #17]
    		}

    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 80065c6:	238e      	movs	r3, #142	; 0x8e
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	18fb      	adds	r3, r7, r3
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	238c      	movs	r3, #140	; 0x8c
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	18fb      	adds	r3, r7, r3
 80065d4:	6819      	ldr	r1, [r3, #0]
 80065d6:	2486      	movs	r4, #134	; 0x86
 80065d8:	0064      	lsls	r4, r4, #1
 80065da:	193b      	adds	r3, r7, r4
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	0018      	movs	r0, r3
 80065e0:	f7ff fb8e 	bl	8005d00 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 80065e4:	193b      	adds	r3, r7, r4
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	4b18      	ldr	r3, [pc, #96]	; (800664c <SiteClear+0x174>)
 80065ea:	0011      	movs	r1, r2
 80065ec:	0018      	movs	r0, r3
 80065ee:	f000 fc67 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & SITE_CLEAR_AND_START_UP) == SITE_CLEAR_AND_START_UP){
 80065f2:	e023      	b.n	800663c <SiteClear+0x164>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, SITE_CLEAR_AND_START_UP, ctrl->currentState);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	7c5a      	ldrb	r2, [r3, #17]
 80065f8:	2486      	movs	r4, #134	; 0x86
 80065fa:	0064      	lsls	r4, r4, #1
 80065fc:	193b      	adds	r3, r7, r4
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2101      	movs	r1, #1
 8006602:	0018      	movs	r0, r3
 8006604:	f7ff fa6e 	bl	8005ae4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1,msgPtr);
 8006608:	193b      	adds	r3, r7, r4
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	4b0f      	ldr	r3, [pc, #60]	; (800664c <SiteClear+0x174>)
 800660e:	0011      	movs	r1, r2
 8006610:	0018      	movs	r0, r3
 8006612:	f000 fc55 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & SITE_CLEAR_AND_START_UP) == SITE_CLEAR_AND_START_UP){
 8006616:	e011      	b.n	800663c <SiteClear+0x164>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, ctrl->currentState, ctrl->lastState);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	7c59      	ldrb	r1, [r3, #17]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	7c1a      	ldrb	r2, [r3, #16]
 8006620:	2486      	movs	r4, #134	; 0x86
 8006622:	0064      	lsls	r4, r4, #1
 8006624:	193b      	adds	r3, r7, r4
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	0018      	movs	r0, r3
 800662a:	f7ff faef 	bl	8005c0c <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 800662e:	193b      	adds	r3, r7, r4
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	4b06      	ldr	r3, [pc, #24]	; (800664c <SiteClear+0x174>)
 8006634:	0011      	movs	r1, r2
 8006636:	0018      	movs	r0, r3
 8006638:	f000 fc42 	bl	8006ec0 <UART_SendMessage>
    }
	return success;
 800663c:	238e      	movs	r3, #142	; 0x8e
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	18fb      	adds	r3, r7, r3
 8006642:	681b      	ldr	r3, [r3, #0]
}
 8006644:	0018      	movs	r0, r3
 8006646:	46bd      	mov	sp, r7
 8006648:	b049      	add	sp, #292	; 0x124
 800664a:	bd90      	pop	{r4, r7, pc}
 800664c:	2000009c 	.word	0x2000009c

08006650 <StateMachine>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)

#include "state_machine.h"

void StateMachine(uint32_t control, struct StateVars *ctrl)
{
 8006650:	b590      	push	{r4, r7, lr}
 8006652:	b0c5      	sub	sp, #276	; 0x114
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
	uint32_t success = FALSE;
 800665a:	2300      	movs	r3, #0
 800665c:	2286      	movs	r2, #134	; 0x86
 800665e:	0052      	lsls	r2, r2, #1
 8006660:	18ba      	adds	r2, r7, r2
 8006662:	6013      	str	r3, [r2, #0]
	//enum StateName _nextState = Incoming;
	while(TRUE == control)
 8006664:	e0a1      	b.n	80067aa <StateMachine+0x15a>
	{
		if(VerifyState(ctrl->currentState))
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	7c5b      	ldrb	r3, [r3, #17]
 800666a:	0018      	movs	r0, r3
 800666c:	f000 fab8 	bl	8006be0 <VerifyState>
 8006670:	1e03      	subs	r3, r0, #0
 8006672:	d100      	bne.n	8006676 <StateMachine+0x26>
 8006674:	e07e      	b.n	8006774 <StateMachine+0x124>
		{
			switch(ctrl->currentState)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	7c5b      	ldrb	r3, [r3, #17]
 800667a:	2b10      	cmp	r3, #16
 800667c:	d900      	bls.n	8006680 <StateMachine+0x30>
 800667e:	e074      	b.n	800676a <StateMachine+0x11a>
 8006680:	009a      	lsls	r2, r3, #2
 8006682:	4b4e      	ldr	r3, [pc, #312]	; (80067bc <StateMachine+0x16c>)
 8006684:	18d3      	adds	r3, r2, r3
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	469f      	mov	pc, r3
			{
				case SETUP_OPS:
					control = SetupOps(ctrl);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	0018      	movs	r0, r3
 800668e:	f7ff fe7b 	bl	8006388 <SetupOps>
 8006692:	0003      	movs	r3, r0
 8006694:	607b      	str	r3, [r7, #4]
					break;
 8006696:	e088      	b.n	80067aa <StateMachine+0x15a>
				//case LOX_FILL:
					//control = LoxFill(ctrl);
					//break;
				case SITE_CLEAR_AND_START_UP:
					control = SiteClear(ctrl);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	0018      	movs	r0, r3
 800669c:	f7ff ff1c 	bl	80064d8 <SiteClear>
 80066a0:	0003      	movs	r3, r0
 80066a2:	607b      	str	r3, [r7, #4]
					break;
 80066a4:	e081      	b.n	80067aa <StateMachine+0x15a>
				case PRESSURIZATION:
					control = SiteClear(ctrl);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	0018      	movs	r0, r3
 80066aa:	f7ff ff15 	bl	80064d8 <SiteClear>
 80066ae:	0003      	movs	r3, r0
 80066b0:	607b      	str	r3, [r7, #4]
					break;
 80066b2:	e07a      	b.n	80067aa <StateMachine+0x15a>
				case PRE_CHILL:
					control = PreChill(ctrl);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	0018      	movs	r0, r3
 80066b8:	f7ff fc44 	bl	8005f44 <PreChill>
 80066bc:	0003      	movs	r3, r0
 80066be:	607b      	str	r3, [r7, #4]
					break;
 80066c0:	e073      	b.n	80067aa <StateMachine+0x15a>
				case IGNITION:
					control = Ignition(ctrl);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	0018      	movs	r0, r3
 80066c6:	f7fe fdd5 	bl	8005274 <Ignition>
 80066ca:	0003      	movs	r3, r0
 80066cc:	607b      	str	r3, [r7, #4]
					break;
 80066ce:	e06c      	b.n	80067aa <StateMachine+0x15a>
				case LOX_INTRO:
					control = LoxIntro(ctrl);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	0018      	movs	r0, r3
 80066d4:	f7ff f918 	bl	8005908 <LoxIntro>
 80066d8:	0003      	movs	r3, r0
 80066da:	607b      	str	r3, [r7, #4]
					break;
 80066dc:	e065      	b.n	80067aa <StateMachine+0x15a>
				case BURN_INITIATED:
					control = BurnInitiated(ctrl);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	0018      	movs	r0, r3
 80066e2:	f7fe fa1f 	bl	8004b24 <BurnInitiated>
 80066e6:	0003      	movs	r3, r0
 80066e8:	607b      	str	r3, [r7, #4]
					break;
 80066ea:	e05e      	b.n	80067aa <StateMachine+0x15a>
				case BURN_FEEDBACK:
					control = BurnFeedback(ctrl);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	0018      	movs	r0, r3
 80066f0:	f7fe f95a 	bl	80049a8 <BurnFeedback>
 80066f4:	0003      	movs	r3, r0
 80066f6:	607b      	str	r3, [r7, #4]
					break;
 80066f8:	e057      	b.n	80067aa <StateMachine+0x15a>
				case BURN_TERMINATION_1:
					control = BurnTermination1(ctrl);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	0018      	movs	r0, r3
 80066fe:	f7fe fad5 	bl	8004cac <BurnTermination1>
 8006702:	0003      	movs	r3, r0
 8006704:	607b      	str	r3, [r7, #4]
					break;
 8006706:	e050      	b.n	80067aa <StateMachine+0x15a>
				case BURN_TERMINATION_2:
					control = BurnTermination2(ctrl);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	0018      	movs	r0, r3
 800670c:	f7fe fb92 	bl	8004e34 <BurnTermination2>
 8006710:	0003      	movs	r3, r0
 8006712:	607b      	str	r3, [r7, #4]
					break;
 8006714:	e049      	b.n	80067aa <StateMachine+0x15a>
				case BURN_TERMINATION_3:
					control = BurnTermination3(ctrl);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	0018      	movs	r0, r3
 800671a:	f7fe fc55 	bl	8004fc8 <BurnTermination3>
 800671e:	0003      	movs	r3, r0
 8006720:	607b      	str	r3, [r7, #4]
					break;
 8006722:	e042      	b.n	80067aa <StateMachine+0x15a>
				case PURGE:
					control = Purge(ctrl);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	0018      	movs	r0, r3
 8006728:	f7ff fcca 	bl	80060c0 <Purge>
 800672c:	0003      	movs	r3, r0
 800672e:	607b      	str	r3, [r7, #4]
					break;
 8006730:	e03b      	b.n	80067aa <StateMachine+0x15a>
				case POST_FIRE:
					control = PostFire(ctrl);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	0018      	movs	r0, r3
 8006736:	f7ff fb43 	bl	8005dc0 <PostFire>
 800673a:	0003      	movs	r3, r0
 800673c:	607b      	str	r3, [r7, #4]
					break;
 800673e:	e034      	b.n	80067aa <StateMachine+0x15a>
				//case SAFE_APPROACH:
					//control = SafeApproach(ctrl);
					//break;
				case FAILURE:
					control = Failure(ctrl);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	0018      	movs	r0, r3
 8006744:	f7fe fd04 	bl	8005150 <Failure>
 8006748:	0003      	movs	r3, r0
 800674a:	607b      	str	r3, [r7, #4]
					break;
 800674c:	e02d      	b.n	80067aa <StateMachine+0x15a>
				//case GROUNDSTATION:
					//control = Groundstation(ctrl);
					//break;
				case TEST:
					control = Test(ctrl);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	0018      	movs	r0, r3
 8006752:	f000 f9b5 	bl	8006ac0 <Test>
 8006756:	0003      	movs	r3, r0
 8006758:	607b      	str	r3, [r7, #4]
					break;
 800675a:	e026      	b.n	80067aa <StateMachine+0x15a>
				case SAFETY:
					control = Safety(ctrl);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	0018      	movs	r0, r3
 8006760:	f7ff fd6c 	bl	800623c <Safety>
 8006764:	0003      	movs	r3, r0
 8006766:	607b      	str	r3, [r7, #4]
					break;
 8006768:	e01f      	b.n	80067aa <StateMachine+0x15a>

				default:
					ctrl->currentState = FAILURE;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	220e      	movs	r2, #14
 800676e:	745a      	strb	r2, [r3, #17]
					break;
 8006770:	46c0      	nop			; (mov r8, r8)
 8006772:	e01a      	b.n	80067aa <StateMachine+0x15a>
			}
		}else
		{
			char message[PRINT_BUFFER_SIZE];
			char *msgPtr = message;
 8006774:	2308      	movs	r3, #8
 8006776:	18fb      	adds	r3, r7, r3
 8006778:	2084      	movs	r0, #132	; 0x84
 800677a:	0040      	lsls	r0, r0, #1
 800677c:	183a      	adds	r2, r7, r0
 800677e:	6013      	str	r3, [r2, #0]
			ctrl->currentState = FAILURE;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	220e      	movs	r2, #14
 8006784:	745a      	strb	r2, [r3, #17]
	    	// Log Invalid State
	    	Get_Invalid_State_Error_Msg(msgPtr, ctrl->currentState, ctrl->lastState);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	7c59      	ldrb	r1, [r3, #17]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	7c1a      	ldrb	r2, [r3, #16]
 800678e:	0004      	movs	r4, r0
 8006790:	183b      	adds	r3, r7, r0
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	0018      	movs	r0, r3
 8006796:	f7ff fa39 	bl	8005c0c <Get_Invalid_State_Error_Msg>
	    	UART_SendMessage(&hlpuart1, msgPtr);
 800679a:	0020      	movs	r0, r4
 800679c:	183b      	adds	r3, r7, r0
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	4b07      	ldr	r3, [pc, #28]	; (80067c0 <StateMachine+0x170>)
 80067a2:	0011      	movs	r1, r2
 80067a4:	0018      	movs	r0, r3
 80067a6:	f000 fb8b 	bl	8006ec0 <UART_SendMessage>
	while(TRUE == control)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d100      	bne.n	80067b2 <StateMachine+0x162>
 80067b0:	e759      	b.n	8006666 <StateMachine+0x16>
			//ERROR HANDLE
		}
		// WD check
	}
}
 80067b2:	46c0      	nop			; (mov r8, r8)
 80067b4:	46bd      	mov	sp, r7
 80067b6:	b045      	add	sp, #276	; 0x114
 80067b8:	bd90      	pop	{r4, r7, pc}
 80067ba:	46c0      	nop			; (mov r8, r8)
 80067bc:	08007ec4 	.word	0x08007ec4
 80067c0:	2000009c 	.word	0x2000009c

080067c4 <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 80067cc:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <LL_SYSCFG_DisableDBATT+0x1c>)
 80067ce:	6819      	ldr	r1, [r3, #0]
 80067d0:	4b03      	ldr	r3, [pc, #12]	; (80067e0 <LL_SYSCFG_DisableDBATT+0x1c>)
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	601a      	str	r2, [r3, #0]
}
 80067d8:	46c0      	nop			; (mov r8, r8)
 80067da:	46bd      	mov	sp, r7
 80067dc:	b002      	add	sp, #8
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	40010000 	.word	0x40010000

080067e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067ea:	4b11      	ldr	r3, [pc, #68]	; (8006830 <HAL_MspInit+0x4c>)
 80067ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ee:	4b10      	ldr	r3, [pc, #64]	; (8006830 <HAL_MspInit+0x4c>)
 80067f0:	2101      	movs	r1, #1
 80067f2:	430a      	orrs	r2, r1
 80067f4:	641a      	str	r2, [r3, #64]	; 0x40
 80067f6:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <HAL_MspInit+0x4c>)
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	2201      	movs	r2, #1
 80067fc:	4013      	ands	r3, r2
 80067fe:	607b      	str	r3, [r7, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006802:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <HAL_MspInit+0x4c>)
 8006804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006806:	4b0a      	ldr	r3, [pc, #40]	; (8006830 <HAL_MspInit+0x4c>)
 8006808:	2180      	movs	r1, #128	; 0x80
 800680a:	0549      	lsls	r1, r1, #21
 800680c:	430a      	orrs	r2, r1
 800680e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006810:	4b07      	ldr	r3, [pc, #28]	; (8006830 <HAL_MspInit+0x4c>)
 8006812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006814:	2380      	movs	r3, #128	; 0x80
 8006816:	055b      	lsls	r3, r3, #21
 8006818:	4013      	ands	r3, r2
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 800681e:	23c0      	movs	r3, #192	; 0xc0
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	0018      	movs	r0, r3
 8006824:	f7ff ffce 	bl	80067c4 <LL_SYSCFG_DisableDBATT>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006828:	46c0      	nop			; (mov r8, r8)
 800682a:	46bd      	mov	sp, r7
 800682c:	b002      	add	sp, #8
 800682e:	bd80      	pop	{r7, pc}
 8006830:	40021000 	.word	0x40021000

08006834 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006834:	b590      	push	{r4, r7, lr}
 8006836:	b08b      	sub	sp, #44	; 0x2c
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800683c:	2314      	movs	r3, #20
 800683e:	18fb      	adds	r3, r7, r3
 8006840:	0018      	movs	r0, r3
 8006842:	2314      	movs	r3, #20
 8006844:	001a      	movs	r2, r3
 8006846:	2100      	movs	r1, #0
 8006848:	f000 fc5f 	bl	800710a <memset>
  if(hadc->Instance==ADC1)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a26      	ldr	r2, [pc, #152]	; (80068ec <HAL_ADC_MspInit+0xb8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d145      	bne.n	80068e2 <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8006856:	4b26      	ldr	r3, [pc, #152]	; (80068f0 <HAL_ADC_MspInit+0xbc>)
 8006858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800685a:	4b25      	ldr	r3, [pc, #148]	; (80068f0 <HAL_ADC_MspInit+0xbc>)
 800685c:	2180      	movs	r1, #128	; 0x80
 800685e:	0349      	lsls	r1, r1, #13
 8006860:	430a      	orrs	r2, r1
 8006862:	641a      	str	r2, [r3, #64]	; 0x40
 8006864:	4b22      	ldr	r3, [pc, #136]	; (80068f0 <HAL_ADC_MspInit+0xbc>)
 8006866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006868:	2380      	movs	r3, #128	; 0x80
 800686a:	035b      	lsls	r3, r3, #13
 800686c:	4013      	ands	r3, r2
 800686e:	613b      	str	r3, [r7, #16]
 8006870:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006872:	4b1f      	ldr	r3, [pc, #124]	; (80068f0 <HAL_ADC_MspInit+0xbc>)
 8006874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006876:	4b1e      	ldr	r3, [pc, #120]	; (80068f0 <HAL_ADC_MspInit+0xbc>)
 8006878:	2101      	movs	r1, #1
 800687a:	430a      	orrs	r2, r1
 800687c:	635a      	str	r2, [r3, #52]	; 0x34
 800687e:	4b1c      	ldr	r3, [pc, #112]	; (80068f0 <HAL_ADC_MspInit+0xbc>)
 8006880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006882:	2201      	movs	r2, #1
 8006884:	4013      	ands	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800688a:	4b19      	ldr	r3, [pc, #100]	; (80068f0 <HAL_ADC_MspInit+0xbc>)
 800688c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800688e:	4b18      	ldr	r3, [pc, #96]	; (80068f0 <HAL_ADC_MspInit+0xbc>)
 8006890:	2102      	movs	r1, #2
 8006892:	430a      	orrs	r2, r1
 8006894:	635a      	str	r2, [r3, #52]	; 0x34
 8006896:	4b16      	ldr	r3, [pc, #88]	; (80068f0 <HAL_ADC_MspInit+0xbc>)
 8006898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689a:	2202      	movs	r2, #2
 800689c:	4013      	ands	r3, r2
 800689e:	60bb      	str	r3, [r7, #8]
 80068a0:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80068a2:	2414      	movs	r4, #20
 80068a4:	193b      	adds	r3, r7, r4
 80068a6:	22ff      	movs	r2, #255	; 0xff
 80068a8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068aa:	193b      	adds	r3, r7, r4
 80068ac:	2203      	movs	r2, #3
 80068ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068b0:	193b      	adds	r3, r7, r4
 80068b2:	2200      	movs	r2, #0
 80068b4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068b6:	193a      	adds	r2, r7, r4
 80068b8:	23a0      	movs	r3, #160	; 0xa0
 80068ba:	05db      	lsls	r3, r3, #23
 80068bc:	0011      	movs	r1, r2
 80068be:	0018      	movs	r0, r3
 80068c0:	f7fb f870 	bl	80019a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80068c4:	193b      	adds	r3, r7, r4
 80068c6:	2203      	movs	r2, #3
 80068c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068ca:	193b      	adds	r3, r7, r4
 80068cc:	2203      	movs	r2, #3
 80068ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d0:	193b      	adds	r3, r7, r4
 80068d2:	2200      	movs	r2, #0
 80068d4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068d6:	193b      	adds	r3, r7, r4
 80068d8:	4a06      	ldr	r2, [pc, #24]	; (80068f4 <HAL_ADC_MspInit+0xc0>)
 80068da:	0019      	movs	r1, r3
 80068dc:	0010      	movs	r0, r2
 80068de:	f7fb f861 	bl	80019a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80068e2:	46c0      	nop			; (mov r8, r8)
 80068e4:	46bd      	mov	sp, r7
 80068e6:	b00b      	add	sp, #44	; 0x2c
 80068e8:	bd90      	pop	{r4, r7, pc}
 80068ea:	46c0      	nop			; (mov r8, r8)
 80068ec:	40012400 	.word	0x40012400
 80068f0:	40021000 	.word	0x40021000
 80068f4:	50000400 	.word	0x50000400

080068f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80068f8:	b590      	push	{r4, r7, lr}
 80068fa:	b08b      	sub	sp, #44	; 0x2c
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006900:	2314      	movs	r3, #20
 8006902:	18fb      	adds	r3, r7, r3
 8006904:	0018      	movs	r0, r3
 8006906:	2314      	movs	r3, #20
 8006908:	001a      	movs	r2, r3
 800690a:	2100      	movs	r1, #0
 800690c:	f000 fbfd 	bl	800710a <memset>
  if(huart->Instance==LPUART1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a31      	ldr	r2, [pc, #196]	; (80069dc <HAL_UART_MspInit+0xe4>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d15b      	bne.n	80069d2 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800691a:	4b31      	ldr	r3, [pc, #196]	; (80069e0 <HAL_UART_MspInit+0xe8>)
 800691c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800691e:	4b30      	ldr	r3, [pc, #192]	; (80069e0 <HAL_UART_MspInit+0xe8>)
 8006920:	2180      	movs	r1, #128	; 0x80
 8006922:	0349      	lsls	r1, r1, #13
 8006924:	430a      	orrs	r2, r1
 8006926:	63da      	str	r2, [r3, #60]	; 0x3c
 8006928:	4b2d      	ldr	r3, [pc, #180]	; (80069e0 <HAL_UART_MspInit+0xe8>)
 800692a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800692c:	2380      	movs	r3, #128	; 0x80
 800692e:	035b      	lsls	r3, r3, #13
 8006930:	4013      	ands	r3, r2
 8006932:	613b      	str	r3, [r7, #16]
 8006934:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006936:	4b2a      	ldr	r3, [pc, #168]	; (80069e0 <HAL_UART_MspInit+0xe8>)
 8006938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800693a:	4b29      	ldr	r3, [pc, #164]	; (80069e0 <HAL_UART_MspInit+0xe8>)
 800693c:	2104      	movs	r1, #4
 800693e:	430a      	orrs	r2, r1
 8006940:	635a      	str	r2, [r3, #52]	; 0x34
 8006942:	4b27      	ldr	r3, [pc, #156]	; (80069e0 <HAL_UART_MspInit+0xe8>)
 8006944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006946:	2204      	movs	r2, #4
 8006948:	4013      	ands	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800694e:	4b24      	ldr	r3, [pc, #144]	; (80069e0 <HAL_UART_MspInit+0xe8>)
 8006950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006952:	4b23      	ldr	r3, [pc, #140]	; (80069e0 <HAL_UART_MspInit+0xe8>)
 8006954:	2102      	movs	r1, #2
 8006956:	430a      	orrs	r2, r1
 8006958:	635a      	str	r2, [r3, #52]	; 0x34
 800695a:	4b21      	ldr	r3, [pc, #132]	; (80069e0 <HAL_UART_MspInit+0xe8>)
 800695c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695e:	2202      	movs	r2, #2
 8006960:	4013      	ands	r3, r2
 8006962:	60bb      	str	r3, [r7, #8]
 8006964:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration    
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    PB12     ------> LPUART1_DE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|LOW_POWER_UART1_TX_Pin;
 8006966:	2114      	movs	r1, #20
 8006968:	187b      	adds	r3, r7, r1
 800696a:	2203      	movs	r2, #3
 800696c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800696e:	187b      	adds	r3, r7, r1
 8006970:	2202      	movs	r2, #2
 8006972:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006974:	187b      	adds	r3, r7, r1
 8006976:	2200      	movs	r2, #0
 8006978:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800697a:	187b      	adds	r3, r7, r1
 800697c:	2200      	movs	r2, #0
 800697e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPUART1;
 8006980:	187b      	adds	r3, r7, r1
 8006982:	2201      	movs	r2, #1
 8006984:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006986:	000c      	movs	r4, r1
 8006988:	187b      	adds	r3, r7, r1
 800698a:	4a16      	ldr	r2, [pc, #88]	; (80069e4 <HAL_UART_MspInit+0xec>)
 800698c:	0019      	movs	r1, r3
 800698e:	0010      	movs	r0, r2
 8006990:	f7fb f808 	bl	80019a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006994:	0021      	movs	r1, r4
 8006996:	187b      	adds	r3, r7, r1
 8006998:	2280      	movs	r2, #128	; 0x80
 800699a:	0152      	lsls	r2, r2, #5
 800699c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800699e:	187b      	adds	r3, r7, r1
 80069a0:	2202      	movs	r2, #2
 80069a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a4:	187b      	adds	r3, r7, r1
 80069a6:	2200      	movs	r2, #0
 80069a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069aa:	187b      	adds	r3, r7, r1
 80069ac:	2200      	movs	r2, #0
 80069ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPUART1;
 80069b0:	187b      	adds	r3, r7, r1
 80069b2:	2201      	movs	r2, #1
 80069b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069b6:	187b      	adds	r3, r7, r1
 80069b8:	4a0b      	ldr	r2, [pc, #44]	; (80069e8 <HAL_UART_MspInit+0xf0>)
 80069ba:	0019      	movs	r1, r3
 80069bc:	0010      	movs	r0, r2
 80069be:	f7fa fff1 	bl	80019a4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 80069c2:	2200      	movs	r2, #0
 80069c4:	2100      	movs	r1, #0
 80069c6:	201d      	movs	r0, #29
 80069c8:	f7fa ff40 	bl	800184c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 80069cc:	201d      	movs	r0, #29
 80069ce:	f7fa ff52 	bl	8001876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80069d2:	46c0      	nop			; (mov r8, r8)
 80069d4:	46bd      	mov	sp, r7
 80069d6:	b00b      	add	sp, #44	; 0x2c
 80069d8:	bd90      	pop	{r4, r7, pc}
 80069da:	46c0      	nop			; (mov r8, r8)
 80069dc:	40008000 	.word	0x40008000
 80069e0:	40021000 	.word	0x40021000
 80069e4:	50000800 	.word	0x50000800
 80069e8:	50000400 	.word	0x50000400

080069ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80069f0:	46c0      	nop			; (mov r8, r8)
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069fa:	e7fe      	b.n	80069fa <HardFault_Handler+0x4>

080069fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006a00:	46c0      	nop			; (mov r8, r8)
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006a0a:	46c0      	nop			; (mov r8, r8)
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a14:	f7f9 fe6a 	bl	80006ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a18:	46c0      	nop			; (mov r8, r8)
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
	...

08006a20 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 8006a24:	4b03      	ldr	r3, [pc, #12]	; (8006a34 <WWDG_IRQHandler+0x14>)
 8006a26:	0018      	movs	r0, r3
 8006a28:	f7fd ff94 	bl	8004954 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8006a2c:	46c0      	nop			; (mov r8, r8)
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	46c0      	nop			; (mov r8, r8)
 8006a34:	2000018c 	.word	0x2000018c

08006a38 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8006a3c:	4b03      	ldr	r3, [pc, #12]	; (8006a4c <USART3_4_LPUART1_IRQHandler+0x14>)
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f7fc f8b4 	bl	8002bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8006a44:	46c0      	nop			; (mov r8, r8)
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	46c0      	nop			; (mov r8, r8)
 8006a4c:	2000009c 	.word	0x2000009c

08006a50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006a58:	4b11      	ldr	r3, [pc, #68]	; (8006aa0 <_sbrk+0x50>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d102      	bne.n	8006a66 <_sbrk+0x16>
		heap_end = &end;
 8006a60:	4b0f      	ldr	r3, [pc, #60]	; (8006aa0 <_sbrk+0x50>)
 8006a62:	4a10      	ldr	r2, [pc, #64]	; (8006aa4 <_sbrk+0x54>)
 8006a64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006a66:	4b0e      	ldr	r3, [pc, #56]	; (8006aa0 <_sbrk+0x50>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006a6c:	4b0c      	ldr	r3, [pc, #48]	; (8006aa0 <_sbrk+0x50>)
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	18d3      	adds	r3, r2, r3
 8006a74:	466a      	mov	r2, sp
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d907      	bls.n	8006a8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006a7a:	f000 fb13 	bl	80070a4 <__errno>
 8006a7e:	0003      	movs	r3, r0
 8006a80:	220c      	movs	r2, #12
 8006a82:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006a84:	2301      	movs	r3, #1
 8006a86:	425b      	negs	r3, r3
 8006a88:	e006      	b.n	8006a98 <_sbrk+0x48>
	}

	heap_end += incr;
 8006a8a:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <_sbrk+0x50>)
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	18d2      	adds	r2, r2, r3
 8006a92:	4b03      	ldr	r3, [pc, #12]	; (8006aa0 <_sbrk+0x50>)
 8006a94:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8006a96:	68fb      	ldr	r3, [r7, #12]
}
 8006a98:	0018      	movs	r0, r3
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	b004      	add	sp, #16
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	2000008c 	.word	0x2000008c
 8006aa4:	200001a8 	.word	0x200001a8

08006aa8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006aac:	4b03      	ldr	r3, [pc, #12]	; (8006abc <SystemInit+0x14>)
 8006aae:	2280      	movs	r2, #128	; 0x80
 8006ab0:	0512      	lsls	r2, r2, #20
 8006ab2:	609a      	str	r2, [r3, #8]
#endif
}
 8006ab4:	46c0      	nop			; (mov r8, r8)
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	46c0      	nop			; (mov r8, r8)
 8006abc:	e000ed00 	.word	0xe000ed00

08006ac0 <Test>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "test.h"

uint32_t Test(struct StateVars *ctrl)
{
 8006ac0:	b590      	push	{r4, r7, lr}
 8006ac2:	b0c7      	sub	sp, #284	; 0x11c
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	228a      	movs	r2, #138	; 0x8a
 8006acc:	0052      	lsls	r2, r2, #1
 8006ace:	18ba      	adds	r2, r7, r2
 8006ad0:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	2288      	movs	r2, #136	; 0x88
 8006ad6:	0052      	lsls	r2, r2, #1
 8006ad8:	18ba      	adds	r2, r7, r2
 8006ada:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8006adc:	2300      	movs	r3, #0
 8006ade:	2286      	movs	r2, #134	; 0x86
 8006ae0:	0052      	lsls	r2, r2, #1
 8006ae2:	18ba      	adds	r2, r7, r2
 8006ae4:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8006ae6:	2308      	movs	r3, #8
 8006ae8:	18fb      	adds	r3, r7, r3
 8006aea:	2284      	movs	r2, #132	; 0x84
 8006aec:	0052      	lsls	r2, r2, #1
 8006aee:	18ba      	adds	r2, r7, r2
 8006af0:	6013      	str	r3, [r2, #0]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	7c5b      	ldrb	r3, [r3, #17]
 8006af6:	0018      	movs	r0, r3
 8006af8:	f000 f872 	bl	8006be0 <VerifyState>
 8006afc:	1e03      	subs	r3, r0, #0
 8006afe:	d053      	beq.n	8006ba8 <Test+0xe8>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	7c1b      	ldrb	r3, [r3, #16]
 8006b04:	0018      	movs	r0, r3
 8006b06:	f000 f86b 	bl	8006be0 <VerifyState>
 8006b0a:	1e03      	subs	r3, r0, #0
 8006b0c:	d04c      	beq.n	8006ba8 <Test+0xe8>
    {
    	if((ctrl->currentState & TEST) == TEST){
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	7c5b      	ldrb	r3, [r3, #17]
 8006b12:	001a      	movs	r2, r3
 8006b14:	2310      	movs	r3, #16
 8006b16:	4013      	ands	r3, r2
 8006b18:	d034      	beq.n	8006b84 <Test+0xc4>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 0|  0|  1|  1|  0|  0|  0|  0
    		// Set Valve States
    		valve_target |= ((uint16_t)VV1 	\
 8006b1a:	2486      	movs	r4, #134	; 0x86
 8006b1c:	0064      	lsls	r4, r4, #1
 8006b1e:	193b      	adds	r3, r7, r4
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2218      	movs	r2, #24
 8006b24:	4313      	orrs	r3, r2
 8006b26:	193a      	adds	r2, r7, r4
 8006b28:	6013      	str	r3, [r2, #0]
						 |(uint16_t)VV2);
    		// Timestamp and Log
    		valve_configuration = StateConfiguration();
 8006b2a:	f000 f87d 	bl	8006c28 <StateConfiguration>
 8006b2e:	0003      	movs	r3, r0
 8006b30:	2188      	movs	r1, #136	; 0x88
 8006b32:	0049      	lsls	r1, r1, #1
 8006b34:	187a      	adds	r2, r7, r1
 8006b36:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		ctrl->lastState = ctrl->currentState;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	7c5a      	ldrb	r2, [r3, #17]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	741a      	strb	r2, [r3, #16]
    		ctrl->currentState =TEST;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2210      	movs	r2, #16
 8006b44:	745a      	strb	r2, [r3, #17]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8006b46:	187b      	adds	r3, r7, r1
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	193b      	adds	r3, r7, r4
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	425a      	negs	r2, r3
 8006b52:	4153      	adcs	r3, r2
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	228a      	movs	r2, #138	; 0x8a
 8006b58:	0052      	lsls	r2, r2, #1
 8006b5a:	18b8      	adds	r0, r7, r2
 8006b5c:	6003      	str	r3, [r0, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8006b5e:	18bb      	adds	r3, r7, r2
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	187b      	adds	r3, r7, r1
 8006b64:	6819      	ldr	r1, [r3, #0]
 8006b66:	2484      	movs	r4, #132	; 0x84
 8006b68:	0064      	lsls	r4, r4, #1
 8006b6a:	193b      	adds	r3, r7, r4
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	0018      	movs	r0, r3
 8006b70:	f7ff f8c6 	bl	8005d00 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8006b74:	193b      	adds	r3, r7, r4
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	4b18      	ldr	r3, [pc, #96]	; (8006bdc <Test+0x11c>)
 8006b7a:	0011      	movs	r1, r2
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	f000 f99f 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & TEST) == TEST){
 8006b82:	e023      	b.n	8006bcc <Test+0x10c>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, TEST, ctrl->currentState);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	7c5a      	ldrb	r2, [r3, #17]
 8006b88:	2484      	movs	r4, #132	; 0x84
 8006b8a:	0064      	lsls	r4, r4, #1
 8006b8c:	193b      	adds	r3, r7, r4
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2110      	movs	r1, #16
 8006b92:	0018      	movs	r0, r3
 8006b94:	f7fe ffa6 	bl	8005ae4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1,msgPtr);
 8006b98:	193b      	adds	r3, r7, r4
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <Test+0x11c>)
 8006b9e:	0011      	movs	r1, r2
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	f000 f98d 	bl	8006ec0 <UART_SendMessage>
    	if((ctrl->currentState & TEST) == TEST){
 8006ba6:	e011      	b.n	8006bcc <Test+0x10c>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, ctrl->currentState, ctrl->lastState);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	7c59      	ldrb	r1, [r3, #17]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	7c1a      	ldrb	r2, [r3, #16]
 8006bb0:	2484      	movs	r4, #132	; 0x84
 8006bb2:	0064      	lsls	r4, r4, #1
 8006bb4:	193b      	adds	r3, r7, r4
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	0018      	movs	r0, r3
 8006bba:	f7ff f827 	bl	8005c0c <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8006bbe:	193b      	adds	r3, r7, r4
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	4b06      	ldr	r3, [pc, #24]	; (8006bdc <Test+0x11c>)
 8006bc4:	0011      	movs	r1, r2
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	f000 f97a 	bl	8006ec0 <UART_SendMessage>
    }
	return success;
 8006bcc:	238a      	movs	r3, #138	; 0x8a
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	18fb      	adds	r3, r7, r3
 8006bd2:	681b      	ldr	r3, [r3, #0]
}
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	b047      	add	sp, #284	; 0x11c
 8006bda:	bd90      	pop	{r4, r7, pc}
 8006bdc:	2000009c 	.word	0x2000009c

08006be0 <VerifyState>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "utilities.h"
#include "init.h"

uint32_t VerifyState(int state)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8006be8:	2300      	movs	r3, #0
 8006bea:	60fb      	str	r3, [r7, #12]
    if(state <= SAFETY && state >= SETUP_OPS)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b0f      	cmp	r3, #15
 8006bf0:	dc10      	bgt.n	8006c14 <VerifyState+0x34>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	db0d      	blt.n	8006c14 <VerifyState+0x34>
    {
    	success = TRUE;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	60fb      	str	r3, [r7, #12]
		switch(state)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b0f      	cmp	r3, #15
 8006c00:	d805      	bhi.n	8006c0e <VerifyState+0x2e>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	009a      	lsls	r2, r3, #2
 8006c06:	4b07      	ldr	r3, [pc, #28]	; (8006c24 <VerifyState+0x44>)
 8006c08:	18d3      	adds	r3, r2, r3
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	469f      	mov	pc, r3
				//break;
			case SAFETY:
				break;

			default:
				success = FALSE;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60fb      	str	r3, [r7, #12]
				break;
 8006c12:	e002      	b.n	8006c1a <VerifyState+0x3a>
		}
    }
 8006c14:	46c0      	nop			; (mov r8, r8)
 8006c16:	e000      	b.n	8006c1a <VerifyState+0x3a>
				break;
 8006c18:	46c0      	nop			; (mov r8, r8)
	return success;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
}
 8006c1c:	0018      	movs	r0, r3
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	b004      	add	sp, #16
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	08007f68 	.word	0x08007f68

08006c28 <StateConfiguration>:

uint32_t StateConfiguration()
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
	uint32_t vc = 0;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	607b      	str	r3, [r7, #4]
	//PV1
	vc |= (uint32_t)HAL_GPIO_ReadPin(GPIOA, GPIO8_Pin);
 8006c32:	2380      	movs	r3, #128	; 0x80
 8006c34:	005a      	lsls	r2, r3, #1
 8006c36:	23a0      	movs	r3, #160	; 0xa0
 8006c38:	05db      	lsls	r3, r3, #23
 8006c3a:	0011      	movs	r1, r2
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	f7fb f815 	bl	8001c6c <HAL_GPIO_ReadPin>
 8006c42:	0003      	movs	r3, r0
 8006c44:	001a      	movs	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	607b      	str	r3, [r7, #4]

	//PV2
	vc |= (uint32_t)(HAL_GPIO_ReadPin (GPIOA, GPIO9_FAST_Pin) << 1);
 8006c4c:	2380      	movs	r3, #128	; 0x80
 8006c4e:	009a      	lsls	r2, r3, #2
 8006c50:	23a0      	movs	r3, #160	; 0xa0
 8006c52:	05db      	lsls	r3, r3, #23
 8006c54:	0011      	movs	r1, r2
 8006c56:	0018      	movs	r0, r3
 8006c58:	f7fb f808 	bl	8001c6c <HAL_GPIO_ReadPin>
 8006c5c:	0003      	movs	r3, r0
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	001a      	movs	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	607b      	str	r3, [r7, #4]

	//PV3
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOA, GPIO10_FAST_Pin) << 2);
 8006c68:	2380      	movs	r3, #128	; 0x80
 8006c6a:	00da      	lsls	r2, r3, #3
 8006c6c:	23a0      	movs	r3, #160	; 0xa0
 8006c6e:	05db      	lsls	r3, r3, #23
 8006c70:	0011      	movs	r1, r2
 8006c72:	0018      	movs	r0, r3
 8006c74:	f7fa fffa 	bl	8001c6c <HAL_GPIO_ReadPin>
 8006c78:	0003      	movs	r3, r0
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	001a      	movs	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	607b      	str	r3, [r7, #4]

	//VV1
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOB, GPIO13_Pin) << 3);
 8006c84:	2380      	movs	r3, #128	; 0x80
 8006c86:	019b      	lsls	r3, r3, #6
 8006c88:	4a27      	ldr	r2, [pc, #156]	; (8006d28 <StateConfiguration+0x100>)
 8006c8a:	0019      	movs	r1, r3
 8006c8c:	0010      	movs	r0, r2
 8006c8e:	f7fa ffed 	bl	8001c6c <HAL_GPIO_ReadPin>
 8006c92:	0003      	movs	r3, r0
 8006c94:	00db      	lsls	r3, r3, #3
 8006c96:	001a      	movs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	607b      	str	r3, [r7, #4]

	//VV2
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOB, GPIO14_Pin) << 4);
 8006c9e:	2380      	movs	r3, #128	; 0x80
 8006ca0:	01db      	lsls	r3, r3, #7
 8006ca2:	4a21      	ldr	r2, [pc, #132]	; (8006d28 <StateConfiguration+0x100>)
 8006ca4:	0019      	movs	r1, r3
 8006ca6:	0010      	movs	r0, r2
 8006ca8:	f7fa ffe0 	bl	8001c6c <HAL_GPIO_ReadPin>
 8006cac:	0003      	movs	r3, r0
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	001a      	movs	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	607b      	str	r3, [r7, #4]

	//IV1
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOB, GPIO15_Pin) << 5);
 8006cb8:	2380      	movs	r3, #128	; 0x80
 8006cba:	021b      	lsls	r3, r3, #8
 8006cbc:	4a1a      	ldr	r2, [pc, #104]	; (8006d28 <StateConfiguration+0x100>)
 8006cbe:	0019      	movs	r1, r3
 8006cc0:	0010      	movs	r0, r2
 8006cc2:	f7fa ffd3 	bl	8001c6c <HAL_GPIO_ReadPin>
 8006cc6:	0003      	movs	r3, r0
 8006cc8:	015b      	lsls	r3, r3, #5
 8006cca:	001a      	movs	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	607b      	str	r3, [r7, #4]

	//IV2
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOD, GPIO8D8_Pin) << 6);
 8006cd2:	2380      	movs	r3, #128	; 0x80
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	4a15      	ldr	r2, [pc, #84]	; (8006d2c <StateConfiguration+0x104>)
 8006cd8:	0019      	movs	r1, r3
 8006cda:	0010      	movs	r0, r2
 8006cdc:	f7fa ffc6 	bl	8001c6c <HAL_GPIO_ReadPin>
 8006ce0:	0003      	movs	r3, r0
 8006ce2:	019b      	lsls	r3, r3, #6
 8006ce4:	001a      	movs	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	607b      	str	r3, [r7, #4]

	//MV1
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOD, GPIO9_Pin) << 7);
 8006cec:	2380      	movs	r3, #128	; 0x80
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4a0e      	ldr	r2, [pc, #56]	; (8006d2c <StateConfiguration+0x104>)
 8006cf2:	0019      	movs	r1, r3
 8006cf4:	0010      	movs	r0, r2
 8006cf6:	f7fa ffb9 	bl	8001c6c <HAL_GPIO_ReadPin>
 8006cfa:	0003      	movs	r3, r0
 8006cfc:	01db      	lsls	r3, r3, #7
 8006cfe:	001a      	movs	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	607b      	str	r3, [r7, #4]

	//MV2
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOD, GPIO2_Pin) << 8);
 8006d06:	4b09      	ldr	r3, [pc, #36]	; (8006d2c <StateConfiguration+0x104>)
 8006d08:	2104      	movs	r1, #4
 8006d0a:	0018      	movs	r0, r3
 8006d0c:	f7fa ffae 	bl	8001c6c <HAL_GPIO_ReadPin>
 8006d10:	0003      	movs	r3, r0
 8006d12:	021b      	lsls	r3, r3, #8
 8006d14:	001a      	movs	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	607b      	str	r3, [r7, #4]

	return vc;
 8006d1c:	687b      	ldr	r3, [r7, #4]
}
 8006d1e:	0018      	movs	r0, r3
 8006d20:	46bd      	mov	sp, r7
 8006d22:	b002      	add	sp, #8
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	46c0      	nop			; (mov r8, r8)
 8006d28:	50000400 	.word	0x50000400
 8006d2c:	50000c00 	.word	0x50000c00

08006d30 <ValveStateSetter>:

uint32_t ValveStateSetter(uint32_t vs)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	60fb      	str	r3, [r7, #12]
	//PV1
	(vs & (uint32_t)PV1) == (uint32_t)PV1 \
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	4013      	ands	r3, r2
			? HAL_GPIO_WritePin(GPIOA, GPIO8_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, GPIO8_Pin,GPIO_PIN_RESET);
 8006d42:	d008      	beq.n	8006d56 <ValveStateSetter+0x26>
			? HAL_GPIO_WritePin(GPIOA, GPIO8_Pin,GPIO_PIN_SET) \
 8006d44:	2380      	movs	r3, #128	; 0x80
 8006d46:	0059      	lsls	r1, r3, #1
 8006d48:	23a0      	movs	r3, #160	; 0xa0
 8006d4a:	05db      	lsls	r3, r3, #23
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	0018      	movs	r0, r3
 8006d50:	f7fa ffa9 	bl	8001ca6 <HAL_GPIO_WritePin>
 8006d54:	e007      	b.n	8006d66 <ValveStateSetter+0x36>
			: HAL_GPIO_WritePin(GPIOA, GPIO8_Pin,GPIO_PIN_RESET);
 8006d56:	2380      	movs	r3, #128	; 0x80
 8006d58:	0059      	lsls	r1, r3, #1
 8006d5a:	23a0      	movs	r3, #160	; 0xa0
 8006d5c:	05db      	lsls	r3, r3, #23
 8006d5e:	2200      	movs	r2, #0
 8006d60:	0018      	movs	r0, r3
 8006d62:	f7fa ffa0 	bl	8001ca6 <HAL_GPIO_WritePin>

	//PV2
	(vs & (uint32_t)PV2) == (uint32_t)PV2 \
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2202      	movs	r2, #2
 8006d6a:	4013      	ands	r3, r2
			? HAL_GPIO_WritePin(GPIOA, GPIO9_FAST_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, GPIO9_FAST_Pin,GPIO_PIN_RESET);
 8006d6c:	d008      	beq.n	8006d80 <ValveStateSetter+0x50>
			? HAL_GPIO_WritePin(GPIOA, GPIO9_FAST_Pin,GPIO_PIN_SET) \
 8006d6e:	2380      	movs	r3, #128	; 0x80
 8006d70:	0099      	lsls	r1, r3, #2
 8006d72:	23a0      	movs	r3, #160	; 0xa0
 8006d74:	05db      	lsls	r3, r3, #23
 8006d76:	2201      	movs	r2, #1
 8006d78:	0018      	movs	r0, r3
 8006d7a:	f7fa ff94 	bl	8001ca6 <HAL_GPIO_WritePin>
 8006d7e:	e007      	b.n	8006d90 <ValveStateSetter+0x60>
			: HAL_GPIO_WritePin(GPIOA, GPIO9_FAST_Pin,GPIO_PIN_RESET);
 8006d80:	2380      	movs	r3, #128	; 0x80
 8006d82:	0099      	lsls	r1, r3, #2
 8006d84:	23a0      	movs	r3, #160	; 0xa0
 8006d86:	05db      	lsls	r3, r3, #23
 8006d88:	2200      	movs	r2, #0
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	f7fa ff8b 	bl	8001ca6 <HAL_GPIO_WritePin>

	//PV3
	(vs & (uint32_t)PV3) == (uint32_t)PV3 \
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2204      	movs	r2, #4
 8006d94:	4013      	ands	r3, r2
			? HAL_GPIO_WritePin(GPIOA, GPIO10_FAST_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, GPIO10_FAST_Pin,GPIO_PIN_RESET);
 8006d96:	d008      	beq.n	8006daa <ValveStateSetter+0x7a>
			? HAL_GPIO_WritePin(GPIOA, GPIO10_FAST_Pin,GPIO_PIN_SET) \
 8006d98:	2380      	movs	r3, #128	; 0x80
 8006d9a:	00d9      	lsls	r1, r3, #3
 8006d9c:	23a0      	movs	r3, #160	; 0xa0
 8006d9e:	05db      	lsls	r3, r3, #23
 8006da0:	2201      	movs	r2, #1
 8006da2:	0018      	movs	r0, r3
 8006da4:	f7fa ff7f 	bl	8001ca6 <HAL_GPIO_WritePin>
 8006da8:	e007      	b.n	8006dba <ValveStateSetter+0x8a>
			: HAL_GPIO_WritePin(GPIOA, GPIO10_FAST_Pin,GPIO_PIN_RESET);
 8006daa:	2380      	movs	r3, #128	; 0x80
 8006dac:	00d9      	lsls	r1, r3, #3
 8006dae:	23a0      	movs	r3, #160	; 0xa0
 8006db0:	05db      	lsls	r3, r3, #23
 8006db2:	2200      	movs	r2, #0
 8006db4:	0018      	movs	r0, r3
 8006db6:	f7fa ff76 	bl	8001ca6 <HAL_GPIO_WritePin>

	//VV1
	(vs & (uint32_t)VV1) == (uint32_t)VV1 \
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2208      	movs	r2, #8
 8006dbe:	4013      	ands	r3, r2
			? HAL_GPIO_WritePin(GPIOB, GPIO13_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOB, GPIO13_Pin,GPIO_PIN_RESET);
 8006dc0:	d007      	beq.n	8006dd2 <ValveStateSetter+0xa2>
			? HAL_GPIO_WritePin(GPIOB, GPIO13_Pin,GPIO_PIN_SET) \
 8006dc2:	2380      	movs	r3, #128	; 0x80
 8006dc4:	019b      	lsls	r3, r3, #6
 8006dc6:	483c      	ldr	r0, [pc, #240]	; (8006eb8 <ValveStateSetter+0x188>)
 8006dc8:	2201      	movs	r2, #1
 8006dca:	0019      	movs	r1, r3
 8006dcc:	f7fa ff6b 	bl	8001ca6 <HAL_GPIO_WritePin>
 8006dd0:	e006      	b.n	8006de0 <ValveStateSetter+0xb0>
			: HAL_GPIO_WritePin(GPIOB, GPIO13_Pin,GPIO_PIN_RESET);
 8006dd2:	2380      	movs	r3, #128	; 0x80
 8006dd4:	019b      	lsls	r3, r3, #6
 8006dd6:	4838      	ldr	r0, [pc, #224]	; (8006eb8 <ValveStateSetter+0x188>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	0019      	movs	r1, r3
 8006ddc:	f7fa ff63 	bl	8001ca6 <HAL_GPIO_WritePin>

	//VV2
	(vs & (uint32_t)VV2) == (uint32_t)VV2 \
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2210      	movs	r2, #16
 8006de4:	4013      	ands	r3, r2
			? HAL_GPIO_WritePin(GPIOB, GPIO14_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOB, GPIO14_Pin,GPIO_PIN_RESET);
 8006de6:	d007      	beq.n	8006df8 <ValveStateSetter+0xc8>
			? HAL_GPIO_WritePin(GPIOB, GPIO14_Pin,GPIO_PIN_SET) \
 8006de8:	2380      	movs	r3, #128	; 0x80
 8006dea:	01db      	lsls	r3, r3, #7
 8006dec:	4832      	ldr	r0, [pc, #200]	; (8006eb8 <ValveStateSetter+0x188>)
 8006dee:	2201      	movs	r2, #1
 8006df0:	0019      	movs	r1, r3
 8006df2:	f7fa ff58 	bl	8001ca6 <HAL_GPIO_WritePin>
 8006df6:	e006      	b.n	8006e06 <ValveStateSetter+0xd6>
			: HAL_GPIO_WritePin(GPIOB, GPIO14_Pin,GPIO_PIN_RESET);
 8006df8:	2380      	movs	r3, #128	; 0x80
 8006dfa:	01db      	lsls	r3, r3, #7
 8006dfc:	482e      	ldr	r0, [pc, #184]	; (8006eb8 <ValveStateSetter+0x188>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	0019      	movs	r1, r3
 8006e02:	f7fa ff50 	bl	8001ca6 <HAL_GPIO_WritePin>

	//IV1
	(vs & (uint32_t)IV1) == (uint32_t)IV1 \
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	4013      	ands	r3, r2
			? HAL_GPIO_WritePin(GPIOB, GPIO15_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOB, GPIO15_Pin,GPIO_PIN_RESET);
 8006e0c:	d007      	beq.n	8006e1e <ValveStateSetter+0xee>
			? HAL_GPIO_WritePin(GPIOB, GPIO15_Pin,GPIO_PIN_SET) \
 8006e0e:	2380      	movs	r3, #128	; 0x80
 8006e10:	021b      	lsls	r3, r3, #8
 8006e12:	4829      	ldr	r0, [pc, #164]	; (8006eb8 <ValveStateSetter+0x188>)
 8006e14:	2201      	movs	r2, #1
 8006e16:	0019      	movs	r1, r3
 8006e18:	f7fa ff45 	bl	8001ca6 <HAL_GPIO_WritePin>
 8006e1c:	e006      	b.n	8006e2c <ValveStateSetter+0xfc>
			: HAL_GPIO_WritePin(GPIOB, GPIO15_Pin,GPIO_PIN_RESET);
 8006e1e:	2380      	movs	r3, #128	; 0x80
 8006e20:	021b      	lsls	r3, r3, #8
 8006e22:	4825      	ldr	r0, [pc, #148]	; (8006eb8 <ValveStateSetter+0x188>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	0019      	movs	r1, r3
 8006e28:	f7fa ff3d 	bl	8001ca6 <HAL_GPIO_WritePin>

	//IV2
	(vs & (uint32_t)IV2) == (uint32_t)IV2 \
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2240      	movs	r2, #64	; 0x40
 8006e30:	4013      	ands	r3, r2
			? HAL_GPIO_WritePin(GPIOD, GPIO8D8_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOD, GPIO8D8_Pin,GPIO_PIN_RESET);
 8006e32:	d007      	beq.n	8006e44 <ValveStateSetter+0x114>
			? HAL_GPIO_WritePin(GPIOD, GPIO8D8_Pin,GPIO_PIN_SET) \
 8006e34:	2380      	movs	r3, #128	; 0x80
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	4820      	ldr	r0, [pc, #128]	; (8006ebc <ValveStateSetter+0x18c>)
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	0019      	movs	r1, r3
 8006e3e:	f7fa ff32 	bl	8001ca6 <HAL_GPIO_WritePin>
 8006e42:	e006      	b.n	8006e52 <ValveStateSetter+0x122>
			: HAL_GPIO_WritePin(GPIOD, GPIO8D8_Pin,GPIO_PIN_RESET);
 8006e44:	2380      	movs	r3, #128	; 0x80
 8006e46:	005b      	lsls	r3, r3, #1
 8006e48:	481c      	ldr	r0, [pc, #112]	; (8006ebc <ValveStateSetter+0x18c>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	0019      	movs	r1, r3
 8006e4e:	f7fa ff2a 	bl	8001ca6 <HAL_GPIO_WritePin>

	//MV1
	(vs & (uint32_t)MV1) == (uint32_t)MV1 \
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2280      	movs	r2, #128	; 0x80
 8006e56:	4013      	ands	r3, r2
			? HAL_GPIO_WritePin(GPIOD, GPIO9_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOD, GPIO9_Pin,GPIO_PIN_RESET);
 8006e58:	d007      	beq.n	8006e6a <ValveStateSetter+0x13a>
			? HAL_GPIO_WritePin(GPIOD, GPIO9_Pin,GPIO_PIN_SET) \
 8006e5a:	2380      	movs	r3, #128	; 0x80
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4817      	ldr	r0, [pc, #92]	; (8006ebc <ValveStateSetter+0x18c>)
 8006e60:	2201      	movs	r2, #1
 8006e62:	0019      	movs	r1, r3
 8006e64:	f7fa ff1f 	bl	8001ca6 <HAL_GPIO_WritePin>
 8006e68:	e006      	b.n	8006e78 <ValveStateSetter+0x148>
			: HAL_GPIO_WritePin(GPIOD, GPIO9_Pin,GPIO_PIN_RESET);
 8006e6a:	2380      	movs	r3, #128	; 0x80
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4813      	ldr	r0, [pc, #76]	; (8006ebc <ValveStateSetter+0x18c>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	0019      	movs	r1, r3
 8006e74:	f7fa ff17 	bl	8001ca6 <HAL_GPIO_WritePin>

	//MV2
	(vs & (uint32_t)MV2) == (uint32_t)MV2 \
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	2380      	movs	r3, #128	; 0x80
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	4013      	ands	r3, r2
			? HAL_GPIO_WritePin(GPIOD, GPIO2_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOD, GPIO2_Pin,GPIO_PIN_RESET);
 8006e80:	d006      	beq.n	8006e90 <ValveStateSetter+0x160>
			? HAL_GPIO_WritePin(GPIOD, GPIO2_Pin,GPIO_PIN_SET) \
 8006e82:	4b0e      	ldr	r3, [pc, #56]	; (8006ebc <ValveStateSetter+0x18c>)
 8006e84:	2201      	movs	r2, #1
 8006e86:	2104      	movs	r1, #4
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f7fa ff0c 	bl	8001ca6 <HAL_GPIO_WritePin>
 8006e8e:	e005      	b.n	8006e9c <ValveStateSetter+0x16c>
			: HAL_GPIO_WritePin(GPIOD, GPIO2_Pin,GPIO_PIN_RESET);
 8006e90:	4b0a      	ldr	r3, [pc, #40]	; (8006ebc <ValveStateSetter+0x18c>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	2104      	movs	r1, #4
 8006e96:	0018      	movs	r0, r3
 8006e98:	f7fa ff05 	bl	8001ca6 <HAL_GPIO_WritePin>

	success = (vs == StateConfiguration() ? TRUE : FALSE);
 8006e9c:	f7ff fec4 	bl	8006c28 <StateConfiguration>
 8006ea0:	0002      	movs	r2, r0
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	1a9b      	subs	r3, r3, r2
 8006ea6:	425a      	negs	r2, r3
 8006ea8:	4153      	adcs	r3, r2
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	60fb      	str	r3, [r7, #12]

	return success;
 8006eae:	68fb      	ldr	r3, [r7, #12]
}
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b004      	add	sp, #16
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	50000400 	.word	0x50000400
 8006ebc:	50000c00 	.word	0x50000c00

08006ec0 <UART_SendMessage>:

uint32_t UART_SendMessage(UART_HandleTypeDef *hlpuart1, char *message)
{
 8006ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ec2:	4c5c      	ldr	r4, [pc, #368]	; (8007034 <UART_SendMessage+0x174>)
 8006ec4:	44a5      	add	sp, r4
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	6039      	str	r1, [r7, #0]
	uint32_t ofc = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	26c6      	movs	r6, #198	; 0xc6
 8006ed0:	00b6      	lsls	r6, r6, #2
 8006ed2:	19ba      	adds	r2, r7, r6
 8006ed4:	6013      	str	r3, [r2, #0]
	uint32_t msg_time = HAL_GetTick();
 8006ed6:	f7f9 fc19 	bl	800070c <HAL_GetTick>
 8006eda:	0003      	movs	r3, r0
 8006edc:	22c5      	movs	r2, #197	; 0xc5
 8006ede:	0092      	lsls	r2, r2, #2
 8006ee0:	18b9      	adds	r1, r7, r2
 8006ee2:	600b      	str	r3, [r1, #0]
	uint32_t success = FALSE;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	21c7      	movs	r1, #199	; 0xc7
 8006ee8:	0089      	lsls	r1, r1, #2
 8006eea:	1879      	adds	r1, r7, r1
 8006eec:	600b      	str	r3, [r1, #0]
	char invalid_length[PRINT_BUFFER_SIZE] = "Error: Log Message Overflow";
 8006eee:	4b52      	ldr	r3, [pc, #328]	; (8007038 <UART_SendMessage+0x178>)
 8006ef0:	24c8      	movs	r4, #200	; 0xc8
 8006ef2:	00a4      	lsls	r4, r4, #2
 8006ef4:	1939      	adds	r1, r7, r4
 8006ef6:	18c9      	adds	r1, r1, r3
 8006ef8:	4a50      	ldr	r2, [pc, #320]	; (800703c <UART_SendMessage+0x17c>)
 8006efa:	000b      	movs	r3, r1
 8006efc:	ca31      	ldmia	r2!, {r0, r4, r5}
 8006efe:	c331      	stmia	r3!, {r0, r4, r5}
 8006f00:	ca31      	ldmia	r2!, {r0, r4, r5}
 8006f02:	c331      	stmia	r3!, {r0, r4, r5}
 8006f04:	6812      	ldr	r2, [r2, #0]
 8006f06:	601a      	str	r2, [r3, #0]
 8006f08:	000b      	movs	r3, r1
 8006f0a:	331c      	adds	r3, #28
 8006f0c:	22e4      	movs	r2, #228	; 0xe4
 8006f0e:	2100      	movs	r1, #0
 8006f10:	0018      	movs	r0, r3
 8006f12:	f000 f8fa 	bl	800710a <memset>
	char no_message[PRINT_BUFFER_SIZE] = "Error: Log Message Empty";
 8006f16:	4b4a      	ldr	r3, [pc, #296]	; (8007040 <UART_SendMessage+0x180>)
 8006f18:	24c8      	movs	r4, #200	; 0xc8
 8006f1a:	00a4      	lsls	r4, r4, #2
 8006f1c:	1939      	adds	r1, r7, r4
 8006f1e:	18c9      	adds	r1, r1, r3
 8006f20:	4a48      	ldr	r2, [pc, #288]	; (8007044 <UART_SendMessage+0x184>)
 8006f22:	000b      	movs	r3, r1
 8006f24:	ca31      	ldmia	r2!, {r0, r4, r5}
 8006f26:	c331      	stmia	r3!, {r0, r4, r5}
 8006f28:	ca31      	ldmia	r2!, {r0, r4, r5}
 8006f2a:	c331      	stmia	r3!, {r0, r4, r5}
 8006f2c:	7812      	ldrb	r2, [r2, #0]
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	2319      	movs	r3, #25
 8006f32:	18cb      	adds	r3, r1, r3
 8006f34:	22e7      	movs	r2, #231	; 0xe7
 8006f36:	2100      	movs	r1, #0
 8006f38:	0018      	movs	r0, r3
 8006f3a:	f000 f8e6 	bl	800710a <memset>
	char time_str[(sizeof(uint32_t) + 1)];
	char transmit[PRINT_BUFFER_SIZE];

	memset(transmit, '\0', PRINT_BUFFER_SIZE);
 8006f3e:	2380      	movs	r3, #128	; 0x80
 8006f40:	005a      	lsls	r2, r3, #1
 8006f42:	240c      	movs	r4, #12
 8006f44:	193b      	adds	r3, r7, r4
 8006f46:	2100      	movs	r1, #0
 8006f48:	0018      	movs	r0, r3
 8006f4a:	f000 f8de 	bl	800710a <memset>
	memset(time_str, '\0', sizeof(uint32_t) +1);
 8006f4e:	2586      	movs	r5, #134	; 0x86
 8006f50:	006d      	lsls	r5, r5, #1
 8006f52:	197b      	adds	r3, r7, r5
 8006f54:	2205      	movs	r2, #5
 8006f56:	2100      	movs	r1, #0
 8006f58:	0018      	movs	r0, r3
 8006f5a:	f000 f8d6 	bl	800710a <memset>

	sprintf(time_str, "%d",(int)msg_time);
 8006f5e:	22c5      	movs	r2, #197	; 0xc5
 8006f60:	0092      	lsls	r2, r2, #2
 8006f62:	18bb      	adds	r3, r7, r2
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	4938      	ldr	r1, [pc, #224]	; (8007048 <UART_SendMessage+0x188>)
 8006f68:	197b      	adds	r3, r7, r5
 8006f6a:	0018      	movs	r0, r3
 8006f6c:	f000 f8d6 	bl	800711c <siprintf>
	strcat(transmit, time_str);
 8006f70:	197a      	adds	r2, r7, r5
 8006f72:	193b      	adds	r3, r7, r4
 8006f74:	0011      	movs	r1, r2
 8006f76:	0018      	movs	r0, r3
 8006f78:	f000 f8f0 	bl	800715c <strcat>
	strcat(transmit, " : ");
 8006f7c:	193b      	adds	r3, r7, r4
 8006f7e:	0018      	movs	r0, r3
 8006f80:	f7f9 f8c0 	bl	8000104 <strlen>
 8006f84:	0003      	movs	r3, r0
 8006f86:	001a      	movs	r2, r3
 8006f88:	193b      	adds	r3, r7, r4
 8006f8a:	189a      	adds	r2, r3, r2
 8006f8c:	4b2f      	ldr	r3, [pc, #188]	; (800704c <UART_SendMessage+0x18c>)
 8006f8e:	0010      	movs	r0, r2
 8006f90:	0019      	movs	r1, r3
 8006f92:	2304      	movs	r3, #4
 8006f94:	001a      	movs	r2, r3
 8006f96:	f000 f8af 	bl	80070f8 <memcpy>

	ofc += strlen(time_str) + strlen(" : ") + strlen(message);
 8006f9a:	197b      	adds	r3, r7, r5
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f7f9 f8b1 	bl	8000104 <strlen>
 8006fa2:	0004      	movs	r4, r0
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	0018      	movs	r0, r3
 8006fa8:	f7f9 f8ac 	bl	8000104 <strlen>
 8006fac:	0003      	movs	r3, r0
 8006fae:	18e2      	adds	r2, r4, r3
 8006fb0:	19bb      	adds	r3, r7, r6
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	18d3      	adds	r3, r2, r3
 8006fb6:	3303      	adds	r3, #3
 8006fb8:	19ba      	adds	r2, r7, r6
 8006fba:	6013      	str	r3, [r2, #0]
	if(message[0] != '\0')
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d01c      	beq.n	8006ffe <UART_SendMessage+0x13e>
	{
		if(ofc < PRINT_BUFFER_SIZE)
 8006fc4:	23c6      	movs	r3, #198	; 0xc6
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	18fb      	adds	r3, r7, r3
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2bff      	cmp	r3, #255	; 0xff
 8006fce:	d80c      	bhi.n	8006fea <UART_SendMessage+0x12a>
		{
			strcat(transmit, message);
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	230c      	movs	r3, #12
 8006fd4:	18fb      	adds	r3, r7, r3
 8006fd6:	0011      	movs	r1, r2
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f000 f8bf 	bl	800715c <strcat>
			success = TRUE;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	22c7      	movs	r2, #199	; 0xc7
 8006fe2:	0092      	lsls	r2, r2, #2
 8006fe4:	18ba      	adds	r2, r7, r2
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	e012      	b.n	8007010 <UART_SendMessage+0x150>
		}else
		{
			strcat(transmit,invalid_length);
 8006fea:	2385      	movs	r3, #133	; 0x85
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	18fa      	adds	r2, r7, r3
 8006ff0:	230c      	movs	r3, #12
 8006ff2:	18fb      	adds	r3, r7, r3
 8006ff4:	0011      	movs	r1, r2
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	f000 f8b0 	bl	800715c <strcat>
 8006ffc:	e008      	b.n	8007010 <UART_SendMessage+0x150>
		}
	}else
	{
		strcat(transmit,no_message);
 8006ffe:	238a      	movs	r3, #138	; 0x8a
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	18fa      	adds	r2, r7, r3
 8007004:	230c      	movs	r3, #12
 8007006:	18fb      	adds	r3, r7, r3
 8007008:	0011      	movs	r1, r2
 800700a:	0018      	movs	r0, r3
 800700c:	f000 f8a6 	bl	800715c <strcat>
	}

	HAL_UART_Transmit_IT(hlpuart1,(uint8_t *)transmit, sizeof(transmit));
 8007010:	2380      	movs	r3, #128	; 0x80
 8007012:	005a      	lsls	r2, r3, #1
 8007014:	230c      	movs	r3, #12
 8007016:	18f9      	adds	r1, r7, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	0018      	movs	r0, r3
 800701c:	f7fb fd2c 	bl	8002a78 <HAL_UART_Transmit_IT>

	return success;
 8007020:	23c7      	movs	r3, #199	; 0xc7
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	18fb      	adds	r3, r7, r3
 8007026:	681b      	ldr	r3, [r3, #0]
}
 8007028:	0018      	movs	r0, r3
 800702a:	46bd      	mov	sp, r7
 800702c:	23c9      	movs	r3, #201	; 0xc9
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	449d      	add	sp, r3
 8007032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007034:	fffffcdc 	.word	0xfffffcdc
 8007038:	fffffef4 	.word	0xfffffef4
 800703c:	08007cc4 	.word	0x08007cc4
 8007040:	fffffdf4 	.word	0xfffffdf4
 8007044:	08007dc4 	.word	0x08007dc4
 8007048:	08007cbc 	.word	0x08007cbc
 800704c:	08007cc0 	.word	0x08007cc0

08007050 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007050:	480d      	ldr	r0, [pc, #52]	; (8007088 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007052:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007054:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007056:	e003      	b.n	8007060 <LoopCopyDataInit>

08007058 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007058:	4b0c      	ldr	r3, [pc, #48]	; (800708c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800705a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800705c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800705e:	3104      	adds	r1, #4

08007060 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007060:	480b      	ldr	r0, [pc, #44]	; (8007090 <LoopForever+0xa>)
  ldr r3, =_edata
 8007062:	4b0c      	ldr	r3, [pc, #48]	; (8007094 <LoopForever+0xe>)
  adds r2, r0, r1
 8007064:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007066:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007068:	d3f6      	bcc.n	8007058 <CopyDataInit>
  ldr r2, =_sbss
 800706a:	4a0b      	ldr	r2, [pc, #44]	; (8007098 <LoopForever+0x12>)
  b LoopFillZerobss
 800706c:	e002      	b.n	8007074 <LoopFillZerobss>

0800706e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800706e:	2300      	movs	r3, #0
  str  r3, [r2]
 8007070:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007072:	3204      	adds	r2, #4

08007074 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8007074:	4b09      	ldr	r3, [pc, #36]	; (800709c <LoopForever+0x16>)
  cmp r2, r3
 8007076:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007078:	d3f9      	bcc.n	800706e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800707a:	f7ff fd15 	bl	8006aa8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800707e:	f000 f817 	bl	80070b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007082:	f7fe fcff 	bl	8005a84 <main>

08007086 <LoopForever>:

LoopForever:
    b LoopForever
 8007086:	e7fe      	b.n	8007086 <LoopForever>
  ldr   r0, =_estack
 8007088:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 800708c:	08007fec 	.word	0x08007fec
  ldr r0, =_sdata
 8007090:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007094:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8007098:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800709c:	200001a4 	.word	0x200001a4

080070a0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80070a0:	e7fe      	b.n	80070a0 <ADC1_COMP_IRQHandler>
	...

080070a4 <__errno>:
 80070a4:	4b01      	ldr	r3, [pc, #4]	; (80070ac <__errno+0x8>)
 80070a6:	6818      	ldr	r0, [r3, #0]
 80070a8:	4770      	bx	lr
 80070aa:	46c0      	nop			; (mov r8, r8)
 80070ac:	2000000c 	.word	0x2000000c

080070b0 <__libc_init_array>:
 80070b0:	b570      	push	{r4, r5, r6, lr}
 80070b2:	2600      	movs	r6, #0
 80070b4:	4d0c      	ldr	r5, [pc, #48]	; (80070e8 <__libc_init_array+0x38>)
 80070b6:	4c0d      	ldr	r4, [pc, #52]	; (80070ec <__libc_init_array+0x3c>)
 80070b8:	1b64      	subs	r4, r4, r5
 80070ba:	10a4      	asrs	r4, r4, #2
 80070bc:	42a6      	cmp	r6, r4
 80070be:	d109      	bne.n	80070d4 <__libc_init_array+0x24>
 80070c0:	2600      	movs	r6, #0
 80070c2:	f000 fc3f 	bl	8007944 <_init>
 80070c6:	4d0a      	ldr	r5, [pc, #40]	; (80070f0 <__libc_init_array+0x40>)
 80070c8:	4c0a      	ldr	r4, [pc, #40]	; (80070f4 <__libc_init_array+0x44>)
 80070ca:	1b64      	subs	r4, r4, r5
 80070cc:	10a4      	asrs	r4, r4, #2
 80070ce:	42a6      	cmp	r6, r4
 80070d0:	d105      	bne.n	80070de <__libc_init_array+0x2e>
 80070d2:	bd70      	pop	{r4, r5, r6, pc}
 80070d4:	00b3      	lsls	r3, r6, #2
 80070d6:	58eb      	ldr	r3, [r5, r3]
 80070d8:	4798      	blx	r3
 80070da:	3601      	adds	r6, #1
 80070dc:	e7ee      	b.n	80070bc <__libc_init_array+0xc>
 80070de:	00b3      	lsls	r3, r6, #2
 80070e0:	58eb      	ldr	r3, [r5, r3]
 80070e2:	4798      	blx	r3
 80070e4:	3601      	adds	r6, #1
 80070e6:	e7f2      	b.n	80070ce <__libc_init_array+0x1e>
 80070e8:	08007fe4 	.word	0x08007fe4
 80070ec:	08007fe4 	.word	0x08007fe4
 80070f0:	08007fe4 	.word	0x08007fe4
 80070f4:	08007fe8 	.word	0x08007fe8

080070f8 <memcpy>:
 80070f8:	2300      	movs	r3, #0
 80070fa:	b510      	push	{r4, lr}
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d100      	bne.n	8007102 <memcpy+0xa>
 8007100:	bd10      	pop	{r4, pc}
 8007102:	5ccc      	ldrb	r4, [r1, r3]
 8007104:	54c4      	strb	r4, [r0, r3]
 8007106:	3301      	adds	r3, #1
 8007108:	e7f8      	b.n	80070fc <memcpy+0x4>

0800710a <memset>:
 800710a:	0003      	movs	r3, r0
 800710c:	1812      	adds	r2, r2, r0
 800710e:	4293      	cmp	r3, r2
 8007110:	d100      	bne.n	8007114 <memset+0xa>
 8007112:	4770      	bx	lr
 8007114:	7019      	strb	r1, [r3, #0]
 8007116:	3301      	adds	r3, #1
 8007118:	e7f9      	b.n	800710e <memset+0x4>
	...

0800711c <siprintf>:
 800711c:	b40e      	push	{r1, r2, r3}
 800711e:	b500      	push	{lr}
 8007120:	490b      	ldr	r1, [pc, #44]	; (8007150 <siprintf+0x34>)
 8007122:	b09c      	sub	sp, #112	; 0x70
 8007124:	ab1d      	add	r3, sp, #116	; 0x74
 8007126:	9002      	str	r0, [sp, #8]
 8007128:	9006      	str	r0, [sp, #24]
 800712a:	9107      	str	r1, [sp, #28]
 800712c:	9104      	str	r1, [sp, #16]
 800712e:	4809      	ldr	r0, [pc, #36]	; (8007154 <siprintf+0x38>)
 8007130:	4909      	ldr	r1, [pc, #36]	; (8007158 <siprintf+0x3c>)
 8007132:	cb04      	ldmia	r3!, {r2}
 8007134:	9105      	str	r1, [sp, #20]
 8007136:	6800      	ldr	r0, [r0, #0]
 8007138:	a902      	add	r1, sp, #8
 800713a:	9301      	str	r3, [sp, #4]
 800713c:	f000 f886 	bl	800724c <_svfiprintf_r>
 8007140:	2300      	movs	r3, #0
 8007142:	9a02      	ldr	r2, [sp, #8]
 8007144:	7013      	strb	r3, [r2, #0]
 8007146:	b01c      	add	sp, #112	; 0x70
 8007148:	bc08      	pop	{r3}
 800714a:	b003      	add	sp, #12
 800714c:	4718      	bx	r3
 800714e:	46c0      	nop			; (mov r8, r8)
 8007150:	7fffffff 	.word	0x7fffffff
 8007154:	2000000c 	.word	0x2000000c
 8007158:	ffff0208 	.word	0xffff0208

0800715c <strcat>:
 800715c:	0002      	movs	r2, r0
 800715e:	b510      	push	{r4, lr}
 8007160:	7813      	ldrb	r3, [r2, #0]
 8007162:	1c54      	adds	r4, r2, #1
 8007164:	2b00      	cmp	r3, #0
 8007166:	d105      	bne.n	8007174 <strcat+0x18>
 8007168:	5ccc      	ldrb	r4, [r1, r3]
 800716a:	54d4      	strb	r4, [r2, r3]
 800716c:	3301      	adds	r3, #1
 800716e:	2c00      	cmp	r4, #0
 8007170:	d1fa      	bne.n	8007168 <strcat+0xc>
 8007172:	bd10      	pop	{r4, pc}
 8007174:	0022      	movs	r2, r4
 8007176:	e7f3      	b.n	8007160 <strcat+0x4>

08007178 <strcpy>:
 8007178:	0003      	movs	r3, r0
 800717a:	780a      	ldrb	r2, [r1, #0]
 800717c:	3101      	adds	r1, #1
 800717e:	701a      	strb	r2, [r3, #0]
 8007180:	3301      	adds	r3, #1
 8007182:	2a00      	cmp	r2, #0
 8007184:	d1f9      	bne.n	800717a <strcpy+0x2>
 8007186:	4770      	bx	lr

08007188 <__ssputs_r>:
 8007188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800718a:	688e      	ldr	r6, [r1, #8]
 800718c:	b085      	sub	sp, #20
 800718e:	0007      	movs	r7, r0
 8007190:	000c      	movs	r4, r1
 8007192:	9203      	str	r2, [sp, #12]
 8007194:	9301      	str	r3, [sp, #4]
 8007196:	429e      	cmp	r6, r3
 8007198:	d83c      	bhi.n	8007214 <__ssputs_r+0x8c>
 800719a:	2390      	movs	r3, #144	; 0x90
 800719c:	898a      	ldrh	r2, [r1, #12]
 800719e:	00db      	lsls	r3, r3, #3
 80071a0:	421a      	tst	r2, r3
 80071a2:	d034      	beq.n	800720e <__ssputs_r+0x86>
 80071a4:	2503      	movs	r5, #3
 80071a6:	6909      	ldr	r1, [r1, #16]
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	1a5b      	subs	r3, r3, r1
 80071ac:	9302      	str	r3, [sp, #8]
 80071ae:	6963      	ldr	r3, [r4, #20]
 80071b0:	9802      	ldr	r0, [sp, #8]
 80071b2:	435d      	muls	r5, r3
 80071b4:	0feb      	lsrs	r3, r5, #31
 80071b6:	195d      	adds	r5, r3, r5
 80071b8:	9b01      	ldr	r3, [sp, #4]
 80071ba:	106d      	asrs	r5, r5, #1
 80071bc:	3301      	adds	r3, #1
 80071be:	181b      	adds	r3, r3, r0
 80071c0:	42ab      	cmp	r3, r5
 80071c2:	d900      	bls.n	80071c6 <__ssputs_r+0x3e>
 80071c4:	001d      	movs	r5, r3
 80071c6:	0553      	lsls	r3, r2, #21
 80071c8:	d532      	bpl.n	8007230 <__ssputs_r+0xa8>
 80071ca:	0029      	movs	r1, r5
 80071cc:	0038      	movs	r0, r7
 80071ce:	f000 fb19 	bl	8007804 <_malloc_r>
 80071d2:	1e06      	subs	r6, r0, #0
 80071d4:	d109      	bne.n	80071ea <__ssputs_r+0x62>
 80071d6:	230c      	movs	r3, #12
 80071d8:	603b      	str	r3, [r7, #0]
 80071da:	2340      	movs	r3, #64	; 0x40
 80071dc:	2001      	movs	r0, #1
 80071de:	89a2      	ldrh	r2, [r4, #12]
 80071e0:	4240      	negs	r0, r0
 80071e2:	4313      	orrs	r3, r2
 80071e4:	81a3      	strh	r3, [r4, #12]
 80071e6:	b005      	add	sp, #20
 80071e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ea:	9a02      	ldr	r2, [sp, #8]
 80071ec:	6921      	ldr	r1, [r4, #16]
 80071ee:	f7ff ff83 	bl	80070f8 <memcpy>
 80071f2:	89a3      	ldrh	r3, [r4, #12]
 80071f4:	4a14      	ldr	r2, [pc, #80]	; (8007248 <__ssputs_r+0xc0>)
 80071f6:	401a      	ands	r2, r3
 80071f8:	2380      	movs	r3, #128	; 0x80
 80071fa:	4313      	orrs	r3, r2
 80071fc:	81a3      	strh	r3, [r4, #12]
 80071fe:	9b02      	ldr	r3, [sp, #8]
 8007200:	6126      	str	r6, [r4, #16]
 8007202:	18f6      	adds	r6, r6, r3
 8007204:	6026      	str	r6, [r4, #0]
 8007206:	6165      	str	r5, [r4, #20]
 8007208:	9e01      	ldr	r6, [sp, #4]
 800720a:	1aed      	subs	r5, r5, r3
 800720c:	60a5      	str	r5, [r4, #8]
 800720e:	9b01      	ldr	r3, [sp, #4]
 8007210:	429e      	cmp	r6, r3
 8007212:	d900      	bls.n	8007216 <__ssputs_r+0x8e>
 8007214:	9e01      	ldr	r6, [sp, #4]
 8007216:	0032      	movs	r2, r6
 8007218:	9903      	ldr	r1, [sp, #12]
 800721a:	6820      	ldr	r0, [r4, #0]
 800721c:	f000 fa95 	bl	800774a <memmove>
 8007220:	68a3      	ldr	r3, [r4, #8]
 8007222:	2000      	movs	r0, #0
 8007224:	1b9b      	subs	r3, r3, r6
 8007226:	60a3      	str	r3, [r4, #8]
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	199e      	adds	r6, r3, r6
 800722c:	6026      	str	r6, [r4, #0]
 800722e:	e7da      	b.n	80071e6 <__ssputs_r+0x5e>
 8007230:	002a      	movs	r2, r5
 8007232:	0038      	movs	r0, r7
 8007234:	f000 fb44 	bl	80078c0 <_realloc_r>
 8007238:	1e06      	subs	r6, r0, #0
 800723a:	d1e0      	bne.n	80071fe <__ssputs_r+0x76>
 800723c:	6921      	ldr	r1, [r4, #16]
 800723e:	0038      	movs	r0, r7
 8007240:	f000 fa96 	bl	8007770 <_free_r>
 8007244:	e7c7      	b.n	80071d6 <__ssputs_r+0x4e>
 8007246:	46c0      	nop			; (mov r8, r8)
 8007248:	fffffb7f 	.word	0xfffffb7f

0800724c <_svfiprintf_r>:
 800724c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800724e:	b0a1      	sub	sp, #132	; 0x84
 8007250:	9003      	str	r0, [sp, #12]
 8007252:	001d      	movs	r5, r3
 8007254:	898b      	ldrh	r3, [r1, #12]
 8007256:	000f      	movs	r7, r1
 8007258:	0016      	movs	r6, r2
 800725a:	061b      	lsls	r3, r3, #24
 800725c:	d511      	bpl.n	8007282 <_svfiprintf_r+0x36>
 800725e:	690b      	ldr	r3, [r1, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10e      	bne.n	8007282 <_svfiprintf_r+0x36>
 8007264:	2140      	movs	r1, #64	; 0x40
 8007266:	f000 facd 	bl	8007804 <_malloc_r>
 800726a:	6038      	str	r0, [r7, #0]
 800726c:	6138      	str	r0, [r7, #16]
 800726e:	2800      	cmp	r0, #0
 8007270:	d105      	bne.n	800727e <_svfiprintf_r+0x32>
 8007272:	230c      	movs	r3, #12
 8007274:	9a03      	ldr	r2, [sp, #12]
 8007276:	3801      	subs	r0, #1
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	b021      	add	sp, #132	; 0x84
 800727c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800727e:	2340      	movs	r3, #64	; 0x40
 8007280:	617b      	str	r3, [r7, #20]
 8007282:	2300      	movs	r3, #0
 8007284:	ac08      	add	r4, sp, #32
 8007286:	6163      	str	r3, [r4, #20]
 8007288:	3320      	adds	r3, #32
 800728a:	7663      	strb	r3, [r4, #25]
 800728c:	3310      	adds	r3, #16
 800728e:	76a3      	strb	r3, [r4, #26]
 8007290:	9507      	str	r5, [sp, #28]
 8007292:	0035      	movs	r5, r6
 8007294:	782b      	ldrb	r3, [r5, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <_svfiprintf_r+0x52>
 800729a:	2b25      	cmp	r3, #37	; 0x25
 800729c:	d146      	bne.n	800732c <_svfiprintf_r+0xe0>
 800729e:	1bab      	subs	r3, r5, r6
 80072a0:	9305      	str	r3, [sp, #20]
 80072a2:	d00c      	beq.n	80072be <_svfiprintf_r+0x72>
 80072a4:	0032      	movs	r2, r6
 80072a6:	0039      	movs	r1, r7
 80072a8:	9803      	ldr	r0, [sp, #12]
 80072aa:	f7ff ff6d 	bl	8007188 <__ssputs_r>
 80072ae:	1c43      	adds	r3, r0, #1
 80072b0:	d100      	bne.n	80072b4 <_svfiprintf_r+0x68>
 80072b2:	e0ae      	b.n	8007412 <_svfiprintf_r+0x1c6>
 80072b4:	6962      	ldr	r2, [r4, #20]
 80072b6:	9b05      	ldr	r3, [sp, #20]
 80072b8:	4694      	mov	ip, r2
 80072ba:	4463      	add	r3, ip
 80072bc:	6163      	str	r3, [r4, #20]
 80072be:	782b      	ldrb	r3, [r5, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d100      	bne.n	80072c6 <_svfiprintf_r+0x7a>
 80072c4:	e0a5      	b.n	8007412 <_svfiprintf_r+0x1c6>
 80072c6:	2201      	movs	r2, #1
 80072c8:	2300      	movs	r3, #0
 80072ca:	4252      	negs	r2, r2
 80072cc:	6062      	str	r2, [r4, #4]
 80072ce:	a904      	add	r1, sp, #16
 80072d0:	3254      	adds	r2, #84	; 0x54
 80072d2:	1852      	adds	r2, r2, r1
 80072d4:	1c6e      	adds	r6, r5, #1
 80072d6:	6023      	str	r3, [r4, #0]
 80072d8:	60e3      	str	r3, [r4, #12]
 80072da:	60a3      	str	r3, [r4, #8]
 80072dc:	7013      	strb	r3, [r2, #0]
 80072de:	65a3      	str	r3, [r4, #88]	; 0x58
 80072e0:	7831      	ldrb	r1, [r6, #0]
 80072e2:	2205      	movs	r2, #5
 80072e4:	4853      	ldr	r0, [pc, #332]	; (8007434 <_svfiprintf_r+0x1e8>)
 80072e6:	f000 fa25 	bl	8007734 <memchr>
 80072ea:	1c75      	adds	r5, r6, #1
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d11f      	bne.n	8007330 <_svfiprintf_r+0xe4>
 80072f0:	6822      	ldr	r2, [r4, #0]
 80072f2:	06d3      	lsls	r3, r2, #27
 80072f4:	d504      	bpl.n	8007300 <_svfiprintf_r+0xb4>
 80072f6:	2353      	movs	r3, #83	; 0x53
 80072f8:	a904      	add	r1, sp, #16
 80072fa:	185b      	adds	r3, r3, r1
 80072fc:	2120      	movs	r1, #32
 80072fe:	7019      	strb	r1, [r3, #0]
 8007300:	0713      	lsls	r3, r2, #28
 8007302:	d504      	bpl.n	800730e <_svfiprintf_r+0xc2>
 8007304:	2353      	movs	r3, #83	; 0x53
 8007306:	a904      	add	r1, sp, #16
 8007308:	185b      	adds	r3, r3, r1
 800730a:	212b      	movs	r1, #43	; 0x2b
 800730c:	7019      	strb	r1, [r3, #0]
 800730e:	7833      	ldrb	r3, [r6, #0]
 8007310:	2b2a      	cmp	r3, #42	; 0x2a
 8007312:	d016      	beq.n	8007342 <_svfiprintf_r+0xf6>
 8007314:	0035      	movs	r5, r6
 8007316:	2100      	movs	r1, #0
 8007318:	200a      	movs	r0, #10
 800731a:	68e3      	ldr	r3, [r4, #12]
 800731c:	782a      	ldrb	r2, [r5, #0]
 800731e:	1c6e      	adds	r6, r5, #1
 8007320:	3a30      	subs	r2, #48	; 0x30
 8007322:	2a09      	cmp	r2, #9
 8007324:	d94e      	bls.n	80073c4 <_svfiprintf_r+0x178>
 8007326:	2900      	cmp	r1, #0
 8007328:	d018      	beq.n	800735c <_svfiprintf_r+0x110>
 800732a:	e010      	b.n	800734e <_svfiprintf_r+0x102>
 800732c:	3501      	adds	r5, #1
 800732e:	e7b1      	b.n	8007294 <_svfiprintf_r+0x48>
 8007330:	4b40      	ldr	r3, [pc, #256]	; (8007434 <_svfiprintf_r+0x1e8>)
 8007332:	6822      	ldr	r2, [r4, #0]
 8007334:	1ac0      	subs	r0, r0, r3
 8007336:	2301      	movs	r3, #1
 8007338:	4083      	lsls	r3, r0
 800733a:	4313      	orrs	r3, r2
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	002e      	movs	r6, r5
 8007340:	e7ce      	b.n	80072e0 <_svfiprintf_r+0x94>
 8007342:	9b07      	ldr	r3, [sp, #28]
 8007344:	1d19      	adds	r1, r3, #4
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	9107      	str	r1, [sp, #28]
 800734a:	2b00      	cmp	r3, #0
 800734c:	db01      	blt.n	8007352 <_svfiprintf_r+0x106>
 800734e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007350:	e004      	b.n	800735c <_svfiprintf_r+0x110>
 8007352:	425b      	negs	r3, r3
 8007354:	60e3      	str	r3, [r4, #12]
 8007356:	2302      	movs	r3, #2
 8007358:	4313      	orrs	r3, r2
 800735a:	6023      	str	r3, [r4, #0]
 800735c:	782b      	ldrb	r3, [r5, #0]
 800735e:	2b2e      	cmp	r3, #46	; 0x2e
 8007360:	d10a      	bne.n	8007378 <_svfiprintf_r+0x12c>
 8007362:	786b      	ldrb	r3, [r5, #1]
 8007364:	2b2a      	cmp	r3, #42	; 0x2a
 8007366:	d135      	bne.n	80073d4 <_svfiprintf_r+0x188>
 8007368:	9b07      	ldr	r3, [sp, #28]
 800736a:	3502      	adds	r5, #2
 800736c:	1d1a      	adds	r2, r3, #4
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	9207      	str	r2, [sp, #28]
 8007372:	2b00      	cmp	r3, #0
 8007374:	db2b      	blt.n	80073ce <_svfiprintf_r+0x182>
 8007376:	9309      	str	r3, [sp, #36]	; 0x24
 8007378:	4e2f      	ldr	r6, [pc, #188]	; (8007438 <_svfiprintf_r+0x1ec>)
 800737a:	7829      	ldrb	r1, [r5, #0]
 800737c:	2203      	movs	r2, #3
 800737e:	0030      	movs	r0, r6
 8007380:	f000 f9d8 	bl	8007734 <memchr>
 8007384:	2800      	cmp	r0, #0
 8007386:	d006      	beq.n	8007396 <_svfiprintf_r+0x14a>
 8007388:	2340      	movs	r3, #64	; 0x40
 800738a:	1b80      	subs	r0, r0, r6
 800738c:	4083      	lsls	r3, r0
 800738e:	6822      	ldr	r2, [r4, #0]
 8007390:	3501      	adds	r5, #1
 8007392:	4313      	orrs	r3, r2
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	7829      	ldrb	r1, [r5, #0]
 8007398:	2206      	movs	r2, #6
 800739a:	4828      	ldr	r0, [pc, #160]	; (800743c <_svfiprintf_r+0x1f0>)
 800739c:	1c6e      	adds	r6, r5, #1
 800739e:	7621      	strb	r1, [r4, #24]
 80073a0:	f000 f9c8 	bl	8007734 <memchr>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d03c      	beq.n	8007422 <_svfiprintf_r+0x1d6>
 80073a8:	4b25      	ldr	r3, [pc, #148]	; (8007440 <_svfiprintf_r+0x1f4>)
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d125      	bne.n	80073fa <_svfiprintf_r+0x1ae>
 80073ae:	2207      	movs	r2, #7
 80073b0:	9b07      	ldr	r3, [sp, #28]
 80073b2:	3307      	adds	r3, #7
 80073b4:	4393      	bics	r3, r2
 80073b6:	3308      	adds	r3, #8
 80073b8:	9307      	str	r3, [sp, #28]
 80073ba:	6963      	ldr	r3, [r4, #20]
 80073bc:	9a04      	ldr	r2, [sp, #16]
 80073be:	189b      	adds	r3, r3, r2
 80073c0:	6163      	str	r3, [r4, #20]
 80073c2:	e766      	b.n	8007292 <_svfiprintf_r+0x46>
 80073c4:	4343      	muls	r3, r0
 80073c6:	2101      	movs	r1, #1
 80073c8:	189b      	adds	r3, r3, r2
 80073ca:	0035      	movs	r5, r6
 80073cc:	e7a6      	b.n	800731c <_svfiprintf_r+0xd0>
 80073ce:	2301      	movs	r3, #1
 80073d0:	425b      	negs	r3, r3
 80073d2:	e7d0      	b.n	8007376 <_svfiprintf_r+0x12a>
 80073d4:	2300      	movs	r3, #0
 80073d6:	200a      	movs	r0, #10
 80073d8:	001a      	movs	r2, r3
 80073da:	3501      	adds	r5, #1
 80073dc:	6063      	str	r3, [r4, #4]
 80073de:	7829      	ldrb	r1, [r5, #0]
 80073e0:	1c6e      	adds	r6, r5, #1
 80073e2:	3930      	subs	r1, #48	; 0x30
 80073e4:	2909      	cmp	r1, #9
 80073e6:	d903      	bls.n	80073f0 <_svfiprintf_r+0x1a4>
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d0c5      	beq.n	8007378 <_svfiprintf_r+0x12c>
 80073ec:	9209      	str	r2, [sp, #36]	; 0x24
 80073ee:	e7c3      	b.n	8007378 <_svfiprintf_r+0x12c>
 80073f0:	4342      	muls	r2, r0
 80073f2:	2301      	movs	r3, #1
 80073f4:	1852      	adds	r2, r2, r1
 80073f6:	0035      	movs	r5, r6
 80073f8:	e7f1      	b.n	80073de <_svfiprintf_r+0x192>
 80073fa:	ab07      	add	r3, sp, #28
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	003a      	movs	r2, r7
 8007400:	4b10      	ldr	r3, [pc, #64]	; (8007444 <_svfiprintf_r+0x1f8>)
 8007402:	0021      	movs	r1, r4
 8007404:	9803      	ldr	r0, [sp, #12]
 8007406:	e000      	b.n	800740a <_svfiprintf_r+0x1be>
 8007408:	bf00      	nop
 800740a:	9004      	str	r0, [sp, #16]
 800740c:	9b04      	ldr	r3, [sp, #16]
 800740e:	3301      	adds	r3, #1
 8007410:	d1d3      	bne.n	80073ba <_svfiprintf_r+0x16e>
 8007412:	89bb      	ldrh	r3, [r7, #12]
 8007414:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007416:	065b      	lsls	r3, r3, #25
 8007418:	d400      	bmi.n	800741c <_svfiprintf_r+0x1d0>
 800741a:	e72e      	b.n	800727a <_svfiprintf_r+0x2e>
 800741c:	2001      	movs	r0, #1
 800741e:	4240      	negs	r0, r0
 8007420:	e72b      	b.n	800727a <_svfiprintf_r+0x2e>
 8007422:	ab07      	add	r3, sp, #28
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	003a      	movs	r2, r7
 8007428:	4b06      	ldr	r3, [pc, #24]	; (8007444 <_svfiprintf_r+0x1f8>)
 800742a:	0021      	movs	r1, r4
 800742c:	9803      	ldr	r0, [sp, #12]
 800742e:	f000 f879 	bl	8007524 <_printf_i>
 8007432:	e7ea      	b.n	800740a <_svfiprintf_r+0x1be>
 8007434:	08007fa8 	.word	0x08007fa8
 8007438:	08007fae 	.word	0x08007fae
 800743c:	08007fb2 	.word	0x08007fb2
 8007440:	00000000 	.word	0x00000000
 8007444:	08007189 	.word	0x08007189

08007448 <_printf_common>:
 8007448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800744a:	0015      	movs	r5, r2
 800744c:	9301      	str	r3, [sp, #4]
 800744e:	688a      	ldr	r2, [r1, #8]
 8007450:	690b      	ldr	r3, [r1, #16]
 8007452:	9000      	str	r0, [sp, #0]
 8007454:	000c      	movs	r4, r1
 8007456:	4293      	cmp	r3, r2
 8007458:	da00      	bge.n	800745c <_printf_common+0x14>
 800745a:	0013      	movs	r3, r2
 800745c:	0022      	movs	r2, r4
 800745e:	602b      	str	r3, [r5, #0]
 8007460:	3243      	adds	r2, #67	; 0x43
 8007462:	7812      	ldrb	r2, [r2, #0]
 8007464:	2a00      	cmp	r2, #0
 8007466:	d001      	beq.n	800746c <_printf_common+0x24>
 8007468:	3301      	adds	r3, #1
 800746a:	602b      	str	r3, [r5, #0]
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	069b      	lsls	r3, r3, #26
 8007470:	d502      	bpl.n	8007478 <_printf_common+0x30>
 8007472:	682b      	ldr	r3, [r5, #0]
 8007474:	3302      	adds	r3, #2
 8007476:	602b      	str	r3, [r5, #0]
 8007478:	2706      	movs	r7, #6
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	401f      	ands	r7, r3
 800747e:	d027      	beq.n	80074d0 <_printf_common+0x88>
 8007480:	0023      	movs	r3, r4
 8007482:	3343      	adds	r3, #67	; 0x43
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	1e5a      	subs	r2, r3, #1
 8007488:	4193      	sbcs	r3, r2
 800748a:	6822      	ldr	r2, [r4, #0]
 800748c:	0692      	lsls	r2, r2, #26
 800748e:	d430      	bmi.n	80074f2 <_printf_common+0xaa>
 8007490:	0022      	movs	r2, r4
 8007492:	9901      	ldr	r1, [sp, #4]
 8007494:	3243      	adds	r2, #67	; 0x43
 8007496:	9800      	ldr	r0, [sp, #0]
 8007498:	9e08      	ldr	r6, [sp, #32]
 800749a:	47b0      	blx	r6
 800749c:	1c43      	adds	r3, r0, #1
 800749e:	d025      	beq.n	80074ec <_printf_common+0xa4>
 80074a0:	2306      	movs	r3, #6
 80074a2:	6820      	ldr	r0, [r4, #0]
 80074a4:	682a      	ldr	r2, [r5, #0]
 80074a6:	68e1      	ldr	r1, [r4, #12]
 80074a8:	4003      	ands	r3, r0
 80074aa:	2500      	movs	r5, #0
 80074ac:	2b04      	cmp	r3, #4
 80074ae:	d103      	bne.n	80074b8 <_printf_common+0x70>
 80074b0:	1a8d      	subs	r5, r1, r2
 80074b2:	43eb      	mvns	r3, r5
 80074b4:	17db      	asrs	r3, r3, #31
 80074b6:	401d      	ands	r5, r3
 80074b8:	68a3      	ldr	r3, [r4, #8]
 80074ba:	6922      	ldr	r2, [r4, #16]
 80074bc:	4293      	cmp	r3, r2
 80074be:	dd01      	ble.n	80074c4 <_printf_common+0x7c>
 80074c0:	1a9b      	subs	r3, r3, r2
 80074c2:	18ed      	adds	r5, r5, r3
 80074c4:	2700      	movs	r7, #0
 80074c6:	42bd      	cmp	r5, r7
 80074c8:	d120      	bne.n	800750c <_printf_common+0xc4>
 80074ca:	2000      	movs	r0, #0
 80074cc:	e010      	b.n	80074f0 <_printf_common+0xa8>
 80074ce:	3701      	adds	r7, #1
 80074d0:	68e3      	ldr	r3, [r4, #12]
 80074d2:	682a      	ldr	r2, [r5, #0]
 80074d4:	1a9b      	subs	r3, r3, r2
 80074d6:	42bb      	cmp	r3, r7
 80074d8:	ddd2      	ble.n	8007480 <_printf_common+0x38>
 80074da:	0022      	movs	r2, r4
 80074dc:	2301      	movs	r3, #1
 80074de:	3219      	adds	r2, #25
 80074e0:	9901      	ldr	r1, [sp, #4]
 80074e2:	9800      	ldr	r0, [sp, #0]
 80074e4:	9e08      	ldr	r6, [sp, #32]
 80074e6:	47b0      	blx	r6
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d1f0      	bne.n	80074ce <_printf_common+0x86>
 80074ec:	2001      	movs	r0, #1
 80074ee:	4240      	negs	r0, r0
 80074f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80074f2:	2030      	movs	r0, #48	; 0x30
 80074f4:	18e1      	adds	r1, r4, r3
 80074f6:	3143      	adds	r1, #67	; 0x43
 80074f8:	7008      	strb	r0, [r1, #0]
 80074fa:	0021      	movs	r1, r4
 80074fc:	1c5a      	adds	r2, r3, #1
 80074fe:	3145      	adds	r1, #69	; 0x45
 8007500:	7809      	ldrb	r1, [r1, #0]
 8007502:	18a2      	adds	r2, r4, r2
 8007504:	3243      	adds	r2, #67	; 0x43
 8007506:	3302      	adds	r3, #2
 8007508:	7011      	strb	r1, [r2, #0]
 800750a:	e7c1      	b.n	8007490 <_printf_common+0x48>
 800750c:	0022      	movs	r2, r4
 800750e:	2301      	movs	r3, #1
 8007510:	321a      	adds	r2, #26
 8007512:	9901      	ldr	r1, [sp, #4]
 8007514:	9800      	ldr	r0, [sp, #0]
 8007516:	9e08      	ldr	r6, [sp, #32]
 8007518:	47b0      	blx	r6
 800751a:	1c43      	adds	r3, r0, #1
 800751c:	d0e6      	beq.n	80074ec <_printf_common+0xa4>
 800751e:	3701      	adds	r7, #1
 8007520:	e7d1      	b.n	80074c6 <_printf_common+0x7e>
	...

08007524 <_printf_i>:
 8007524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007526:	b089      	sub	sp, #36	; 0x24
 8007528:	9204      	str	r2, [sp, #16]
 800752a:	000a      	movs	r2, r1
 800752c:	3243      	adds	r2, #67	; 0x43
 800752e:	9305      	str	r3, [sp, #20]
 8007530:	9003      	str	r0, [sp, #12]
 8007532:	9202      	str	r2, [sp, #8]
 8007534:	7e0a      	ldrb	r2, [r1, #24]
 8007536:	000c      	movs	r4, r1
 8007538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800753a:	2a6e      	cmp	r2, #110	; 0x6e
 800753c:	d100      	bne.n	8007540 <_printf_i+0x1c>
 800753e:	e086      	b.n	800764e <_printf_i+0x12a>
 8007540:	d81f      	bhi.n	8007582 <_printf_i+0x5e>
 8007542:	2a63      	cmp	r2, #99	; 0x63
 8007544:	d033      	beq.n	80075ae <_printf_i+0x8a>
 8007546:	d808      	bhi.n	800755a <_printf_i+0x36>
 8007548:	2a00      	cmp	r2, #0
 800754a:	d100      	bne.n	800754e <_printf_i+0x2a>
 800754c:	e08c      	b.n	8007668 <_printf_i+0x144>
 800754e:	2a58      	cmp	r2, #88	; 0x58
 8007550:	d04d      	beq.n	80075ee <_printf_i+0xca>
 8007552:	0025      	movs	r5, r4
 8007554:	3542      	adds	r5, #66	; 0x42
 8007556:	702a      	strb	r2, [r5, #0]
 8007558:	e030      	b.n	80075bc <_printf_i+0x98>
 800755a:	2a64      	cmp	r2, #100	; 0x64
 800755c:	d001      	beq.n	8007562 <_printf_i+0x3e>
 800755e:	2a69      	cmp	r2, #105	; 0x69
 8007560:	d1f7      	bne.n	8007552 <_printf_i+0x2e>
 8007562:	6819      	ldr	r1, [r3, #0]
 8007564:	6825      	ldr	r5, [r4, #0]
 8007566:	1d0a      	adds	r2, r1, #4
 8007568:	0628      	lsls	r0, r5, #24
 800756a:	d529      	bpl.n	80075c0 <_printf_i+0x9c>
 800756c:	6808      	ldr	r0, [r1, #0]
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	2800      	cmp	r0, #0
 8007572:	da03      	bge.n	800757c <_printf_i+0x58>
 8007574:	232d      	movs	r3, #45	; 0x2d
 8007576:	9a02      	ldr	r2, [sp, #8]
 8007578:	4240      	negs	r0, r0
 800757a:	7013      	strb	r3, [r2, #0]
 800757c:	4e6b      	ldr	r6, [pc, #428]	; (800772c <_printf_i+0x208>)
 800757e:	270a      	movs	r7, #10
 8007580:	e04f      	b.n	8007622 <_printf_i+0xfe>
 8007582:	2a73      	cmp	r2, #115	; 0x73
 8007584:	d074      	beq.n	8007670 <_printf_i+0x14c>
 8007586:	d808      	bhi.n	800759a <_printf_i+0x76>
 8007588:	2a6f      	cmp	r2, #111	; 0x6f
 800758a:	d01f      	beq.n	80075cc <_printf_i+0xa8>
 800758c:	2a70      	cmp	r2, #112	; 0x70
 800758e:	d1e0      	bne.n	8007552 <_printf_i+0x2e>
 8007590:	2220      	movs	r2, #32
 8007592:	6809      	ldr	r1, [r1, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	6022      	str	r2, [r4, #0]
 8007598:	e003      	b.n	80075a2 <_printf_i+0x7e>
 800759a:	2a75      	cmp	r2, #117	; 0x75
 800759c:	d016      	beq.n	80075cc <_printf_i+0xa8>
 800759e:	2a78      	cmp	r2, #120	; 0x78
 80075a0:	d1d7      	bne.n	8007552 <_printf_i+0x2e>
 80075a2:	0022      	movs	r2, r4
 80075a4:	2178      	movs	r1, #120	; 0x78
 80075a6:	3245      	adds	r2, #69	; 0x45
 80075a8:	7011      	strb	r1, [r2, #0]
 80075aa:	4e61      	ldr	r6, [pc, #388]	; (8007730 <_printf_i+0x20c>)
 80075ac:	e022      	b.n	80075f4 <_printf_i+0xd0>
 80075ae:	0025      	movs	r5, r4
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	3542      	adds	r5, #66	; 0x42
 80075b4:	1d11      	adds	r1, r2, #4
 80075b6:	6019      	str	r1, [r3, #0]
 80075b8:	6813      	ldr	r3, [r2, #0]
 80075ba:	702b      	strb	r3, [r5, #0]
 80075bc:	2301      	movs	r3, #1
 80075be:	e065      	b.n	800768c <_printf_i+0x168>
 80075c0:	6808      	ldr	r0, [r1, #0]
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	0669      	lsls	r1, r5, #25
 80075c6:	d5d3      	bpl.n	8007570 <_printf_i+0x4c>
 80075c8:	b200      	sxth	r0, r0
 80075ca:	e7d1      	b.n	8007570 <_printf_i+0x4c>
 80075cc:	6819      	ldr	r1, [r3, #0]
 80075ce:	6825      	ldr	r5, [r4, #0]
 80075d0:	1d08      	adds	r0, r1, #4
 80075d2:	6018      	str	r0, [r3, #0]
 80075d4:	6808      	ldr	r0, [r1, #0]
 80075d6:	062e      	lsls	r6, r5, #24
 80075d8:	d505      	bpl.n	80075e6 <_printf_i+0xc2>
 80075da:	4e54      	ldr	r6, [pc, #336]	; (800772c <_printf_i+0x208>)
 80075dc:	2708      	movs	r7, #8
 80075de:	2a6f      	cmp	r2, #111	; 0x6f
 80075e0:	d01b      	beq.n	800761a <_printf_i+0xf6>
 80075e2:	270a      	movs	r7, #10
 80075e4:	e019      	b.n	800761a <_printf_i+0xf6>
 80075e6:	066d      	lsls	r5, r5, #25
 80075e8:	d5f7      	bpl.n	80075da <_printf_i+0xb6>
 80075ea:	b280      	uxth	r0, r0
 80075ec:	e7f5      	b.n	80075da <_printf_i+0xb6>
 80075ee:	3145      	adds	r1, #69	; 0x45
 80075f0:	4e4e      	ldr	r6, [pc, #312]	; (800772c <_printf_i+0x208>)
 80075f2:	700a      	strb	r2, [r1, #0]
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	6822      	ldr	r2, [r4, #0]
 80075f8:	1d01      	adds	r1, r0, #4
 80075fa:	6800      	ldr	r0, [r0, #0]
 80075fc:	6019      	str	r1, [r3, #0]
 80075fe:	0615      	lsls	r5, r2, #24
 8007600:	d521      	bpl.n	8007646 <_printf_i+0x122>
 8007602:	07d3      	lsls	r3, r2, #31
 8007604:	d502      	bpl.n	800760c <_printf_i+0xe8>
 8007606:	2320      	movs	r3, #32
 8007608:	431a      	orrs	r2, r3
 800760a:	6022      	str	r2, [r4, #0]
 800760c:	2710      	movs	r7, #16
 800760e:	2800      	cmp	r0, #0
 8007610:	d103      	bne.n	800761a <_printf_i+0xf6>
 8007612:	2320      	movs	r3, #32
 8007614:	6822      	ldr	r2, [r4, #0]
 8007616:	439a      	bics	r2, r3
 8007618:	6022      	str	r2, [r4, #0]
 800761a:	0023      	movs	r3, r4
 800761c:	2200      	movs	r2, #0
 800761e:	3343      	adds	r3, #67	; 0x43
 8007620:	701a      	strb	r2, [r3, #0]
 8007622:	6863      	ldr	r3, [r4, #4]
 8007624:	60a3      	str	r3, [r4, #8]
 8007626:	2b00      	cmp	r3, #0
 8007628:	db58      	blt.n	80076dc <_printf_i+0x1b8>
 800762a:	2204      	movs	r2, #4
 800762c:	6821      	ldr	r1, [r4, #0]
 800762e:	4391      	bics	r1, r2
 8007630:	6021      	str	r1, [r4, #0]
 8007632:	2800      	cmp	r0, #0
 8007634:	d154      	bne.n	80076e0 <_printf_i+0x1bc>
 8007636:	9d02      	ldr	r5, [sp, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d05a      	beq.n	80076f2 <_printf_i+0x1ce>
 800763c:	0025      	movs	r5, r4
 800763e:	7833      	ldrb	r3, [r6, #0]
 8007640:	3542      	adds	r5, #66	; 0x42
 8007642:	702b      	strb	r3, [r5, #0]
 8007644:	e055      	b.n	80076f2 <_printf_i+0x1ce>
 8007646:	0655      	lsls	r5, r2, #25
 8007648:	d5db      	bpl.n	8007602 <_printf_i+0xde>
 800764a:	b280      	uxth	r0, r0
 800764c:	e7d9      	b.n	8007602 <_printf_i+0xde>
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	680d      	ldr	r5, [r1, #0]
 8007652:	1d10      	adds	r0, r2, #4
 8007654:	6949      	ldr	r1, [r1, #20]
 8007656:	6018      	str	r0, [r3, #0]
 8007658:	6813      	ldr	r3, [r2, #0]
 800765a:	062e      	lsls	r6, r5, #24
 800765c:	d501      	bpl.n	8007662 <_printf_i+0x13e>
 800765e:	6019      	str	r1, [r3, #0]
 8007660:	e002      	b.n	8007668 <_printf_i+0x144>
 8007662:	066d      	lsls	r5, r5, #25
 8007664:	d5fb      	bpl.n	800765e <_printf_i+0x13a>
 8007666:	8019      	strh	r1, [r3, #0]
 8007668:	2300      	movs	r3, #0
 800766a:	9d02      	ldr	r5, [sp, #8]
 800766c:	6123      	str	r3, [r4, #16]
 800766e:	e04f      	b.n	8007710 <_printf_i+0x1ec>
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	1d11      	adds	r1, r2, #4
 8007674:	6019      	str	r1, [r3, #0]
 8007676:	6815      	ldr	r5, [r2, #0]
 8007678:	2100      	movs	r1, #0
 800767a:	6862      	ldr	r2, [r4, #4]
 800767c:	0028      	movs	r0, r5
 800767e:	f000 f859 	bl	8007734 <memchr>
 8007682:	2800      	cmp	r0, #0
 8007684:	d001      	beq.n	800768a <_printf_i+0x166>
 8007686:	1b40      	subs	r0, r0, r5
 8007688:	6060      	str	r0, [r4, #4]
 800768a:	6863      	ldr	r3, [r4, #4]
 800768c:	6123      	str	r3, [r4, #16]
 800768e:	2300      	movs	r3, #0
 8007690:	9a02      	ldr	r2, [sp, #8]
 8007692:	7013      	strb	r3, [r2, #0]
 8007694:	e03c      	b.n	8007710 <_printf_i+0x1ec>
 8007696:	6923      	ldr	r3, [r4, #16]
 8007698:	002a      	movs	r2, r5
 800769a:	9904      	ldr	r1, [sp, #16]
 800769c:	9803      	ldr	r0, [sp, #12]
 800769e:	9d05      	ldr	r5, [sp, #20]
 80076a0:	47a8      	blx	r5
 80076a2:	1c43      	adds	r3, r0, #1
 80076a4:	d03e      	beq.n	8007724 <_printf_i+0x200>
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	079b      	lsls	r3, r3, #30
 80076aa:	d415      	bmi.n	80076d8 <_printf_i+0x1b4>
 80076ac:	9b07      	ldr	r3, [sp, #28]
 80076ae:	68e0      	ldr	r0, [r4, #12]
 80076b0:	4298      	cmp	r0, r3
 80076b2:	da39      	bge.n	8007728 <_printf_i+0x204>
 80076b4:	0018      	movs	r0, r3
 80076b6:	e037      	b.n	8007728 <_printf_i+0x204>
 80076b8:	0022      	movs	r2, r4
 80076ba:	2301      	movs	r3, #1
 80076bc:	3219      	adds	r2, #25
 80076be:	9904      	ldr	r1, [sp, #16]
 80076c0:	9803      	ldr	r0, [sp, #12]
 80076c2:	9e05      	ldr	r6, [sp, #20]
 80076c4:	47b0      	blx	r6
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	d02c      	beq.n	8007724 <_printf_i+0x200>
 80076ca:	3501      	adds	r5, #1
 80076cc:	68e3      	ldr	r3, [r4, #12]
 80076ce:	9a07      	ldr	r2, [sp, #28]
 80076d0:	1a9b      	subs	r3, r3, r2
 80076d2:	42ab      	cmp	r3, r5
 80076d4:	dcf0      	bgt.n	80076b8 <_printf_i+0x194>
 80076d6:	e7e9      	b.n	80076ac <_printf_i+0x188>
 80076d8:	2500      	movs	r5, #0
 80076da:	e7f7      	b.n	80076cc <_printf_i+0x1a8>
 80076dc:	2800      	cmp	r0, #0
 80076de:	d0ad      	beq.n	800763c <_printf_i+0x118>
 80076e0:	9d02      	ldr	r5, [sp, #8]
 80076e2:	0039      	movs	r1, r7
 80076e4:	f7f8 fd9c 	bl	8000220 <__aeabi_uidivmod>
 80076e8:	5c73      	ldrb	r3, [r6, r1]
 80076ea:	3d01      	subs	r5, #1
 80076ec:	702b      	strb	r3, [r5, #0]
 80076ee:	2800      	cmp	r0, #0
 80076f0:	d1f7      	bne.n	80076e2 <_printf_i+0x1be>
 80076f2:	2f08      	cmp	r7, #8
 80076f4:	d109      	bne.n	800770a <_printf_i+0x1e6>
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	07db      	lsls	r3, r3, #31
 80076fa:	d506      	bpl.n	800770a <_printf_i+0x1e6>
 80076fc:	6863      	ldr	r3, [r4, #4]
 80076fe:	6922      	ldr	r2, [r4, #16]
 8007700:	4293      	cmp	r3, r2
 8007702:	dc02      	bgt.n	800770a <_printf_i+0x1e6>
 8007704:	2330      	movs	r3, #48	; 0x30
 8007706:	3d01      	subs	r5, #1
 8007708:	702b      	strb	r3, [r5, #0]
 800770a:	9b02      	ldr	r3, [sp, #8]
 800770c:	1b5b      	subs	r3, r3, r5
 800770e:	6123      	str	r3, [r4, #16]
 8007710:	9b05      	ldr	r3, [sp, #20]
 8007712:	aa07      	add	r2, sp, #28
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	0021      	movs	r1, r4
 8007718:	9b04      	ldr	r3, [sp, #16]
 800771a:	9803      	ldr	r0, [sp, #12]
 800771c:	f7ff fe94 	bl	8007448 <_printf_common>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	d1b8      	bne.n	8007696 <_printf_i+0x172>
 8007724:	2001      	movs	r0, #1
 8007726:	4240      	negs	r0, r0
 8007728:	b009      	add	sp, #36	; 0x24
 800772a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800772c:	08007fb9 	.word	0x08007fb9
 8007730:	08007fca 	.word	0x08007fca

08007734 <memchr>:
 8007734:	b2c9      	uxtb	r1, r1
 8007736:	1882      	adds	r2, r0, r2
 8007738:	4290      	cmp	r0, r2
 800773a:	d101      	bne.n	8007740 <memchr+0xc>
 800773c:	2000      	movs	r0, #0
 800773e:	4770      	bx	lr
 8007740:	7803      	ldrb	r3, [r0, #0]
 8007742:	428b      	cmp	r3, r1
 8007744:	d0fb      	beq.n	800773e <memchr+0xa>
 8007746:	3001      	adds	r0, #1
 8007748:	e7f6      	b.n	8007738 <memchr+0x4>

0800774a <memmove>:
 800774a:	b510      	push	{r4, lr}
 800774c:	4288      	cmp	r0, r1
 800774e:	d902      	bls.n	8007756 <memmove+0xc>
 8007750:	188b      	adds	r3, r1, r2
 8007752:	4298      	cmp	r0, r3
 8007754:	d303      	bcc.n	800775e <memmove+0x14>
 8007756:	2300      	movs	r3, #0
 8007758:	e007      	b.n	800776a <memmove+0x20>
 800775a:	5c8b      	ldrb	r3, [r1, r2]
 800775c:	5483      	strb	r3, [r0, r2]
 800775e:	3a01      	subs	r2, #1
 8007760:	d2fb      	bcs.n	800775a <memmove+0x10>
 8007762:	bd10      	pop	{r4, pc}
 8007764:	5ccc      	ldrb	r4, [r1, r3]
 8007766:	54c4      	strb	r4, [r0, r3]
 8007768:	3301      	adds	r3, #1
 800776a:	429a      	cmp	r2, r3
 800776c:	d1fa      	bne.n	8007764 <memmove+0x1a>
 800776e:	e7f8      	b.n	8007762 <memmove+0x18>

08007770 <_free_r>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	0005      	movs	r5, r0
 8007774:	2900      	cmp	r1, #0
 8007776:	d010      	beq.n	800779a <_free_r+0x2a>
 8007778:	1f0c      	subs	r4, r1, #4
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	da00      	bge.n	8007782 <_free_r+0x12>
 8007780:	18e4      	adds	r4, r4, r3
 8007782:	0028      	movs	r0, r5
 8007784:	f000 f8d4 	bl	8007930 <__malloc_lock>
 8007788:	4a1d      	ldr	r2, [pc, #116]	; (8007800 <_free_r+0x90>)
 800778a:	6813      	ldr	r3, [r2, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d105      	bne.n	800779c <_free_r+0x2c>
 8007790:	6063      	str	r3, [r4, #4]
 8007792:	6014      	str	r4, [r2, #0]
 8007794:	0028      	movs	r0, r5
 8007796:	f000 f8cc 	bl	8007932 <__malloc_unlock>
 800779a:	bd70      	pop	{r4, r5, r6, pc}
 800779c:	42a3      	cmp	r3, r4
 800779e:	d909      	bls.n	80077b4 <_free_r+0x44>
 80077a0:	6821      	ldr	r1, [r4, #0]
 80077a2:	1860      	adds	r0, r4, r1
 80077a4:	4283      	cmp	r3, r0
 80077a6:	d1f3      	bne.n	8007790 <_free_r+0x20>
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	1841      	adds	r1, r0, r1
 80077ae:	6021      	str	r1, [r4, #0]
 80077b0:	e7ee      	b.n	8007790 <_free_r+0x20>
 80077b2:	0013      	movs	r3, r2
 80077b4:	685a      	ldr	r2, [r3, #4]
 80077b6:	2a00      	cmp	r2, #0
 80077b8:	d001      	beq.n	80077be <_free_r+0x4e>
 80077ba:	42a2      	cmp	r2, r4
 80077bc:	d9f9      	bls.n	80077b2 <_free_r+0x42>
 80077be:	6819      	ldr	r1, [r3, #0]
 80077c0:	1858      	adds	r0, r3, r1
 80077c2:	42a0      	cmp	r0, r4
 80077c4:	d10b      	bne.n	80077de <_free_r+0x6e>
 80077c6:	6820      	ldr	r0, [r4, #0]
 80077c8:	1809      	adds	r1, r1, r0
 80077ca:	1858      	adds	r0, r3, r1
 80077cc:	6019      	str	r1, [r3, #0]
 80077ce:	4282      	cmp	r2, r0
 80077d0:	d1e0      	bne.n	8007794 <_free_r+0x24>
 80077d2:	6810      	ldr	r0, [r2, #0]
 80077d4:	6852      	ldr	r2, [r2, #4]
 80077d6:	1841      	adds	r1, r0, r1
 80077d8:	6019      	str	r1, [r3, #0]
 80077da:	605a      	str	r2, [r3, #4]
 80077dc:	e7da      	b.n	8007794 <_free_r+0x24>
 80077de:	42a0      	cmp	r0, r4
 80077e0:	d902      	bls.n	80077e8 <_free_r+0x78>
 80077e2:	230c      	movs	r3, #12
 80077e4:	602b      	str	r3, [r5, #0]
 80077e6:	e7d5      	b.n	8007794 <_free_r+0x24>
 80077e8:	6821      	ldr	r1, [r4, #0]
 80077ea:	1860      	adds	r0, r4, r1
 80077ec:	4282      	cmp	r2, r0
 80077ee:	d103      	bne.n	80077f8 <_free_r+0x88>
 80077f0:	6810      	ldr	r0, [r2, #0]
 80077f2:	6852      	ldr	r2, [r2, #4]
 80077f4:	1841      	adds	r1, r0, r1
 80077f6:	6021      	str	r1, [r4, #0]
 80077f8:	6062      	str	r2, [r4, #4]
 80077fa:	605c      	str	r4, [r3, #4]
 80077fc:	e7ca      	b.n	8007794 <_free_r+0x24>
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	20000090 	.word	0x20000090

08007804 <_malloc_r>:
 8007804:	2303      	movs	r3, #3
 8007806:	b570      	push	{r4, r5, r6, lr}
 8007808:	1ccd      	adds	r5, r1, #3
 800780a:	439d      	bics	r5, r3
 800780c:	3508      	adds	r5, #8
 800780e:	0006      	movs	r6, r0
 8007810:	2d0c      	cmp	r5, #12
 8007812:	d21e      	bcs.n	8007852 <_malloc_r+0x4e>
 8007814:	250c      	movs	r5, #12
 8007816:	42a9      	cmp	r1, r5
 8007818:	d81d      	bhi.n	8007856 <_malloc_r+0x52>
 800781a:	0030      	movs	r0, r6
 800781c:	f000 f888 	bl	8007930 <__malloc_lock>
 8007820:	4a25      	ldr	r2, [pc, #148]	; (80078b8 <_malloc_r+0xb4>)
 8007822:	6814      	ldr	r4, [r2, #0]
 8007824:	0021      	movs	r1, r4
 8007826:	2900      	cmp	r1, #0
 8007828:	d119      	bne.n	800785e <_malloc_r+0x5a>
 800782a:	4c24      	ldr	r4, [pc, #144]	; (80078bc <_malloc_r+0xb8>)
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d103      	bne.n	800783a <_malloc_r+0x36>
 8007832:	0030      	movs	r0, r6
 8007834:	f000 f86a 	bl	800790c <_sbrk_r>
 8007838:	6020      	str	r0, [r4, #0]
 800783a:	0029      	movs	r1, r5
 800783c:	0030      	movs	r0, r6
 800783e:	f000 f865 	bl	800790c <_sbrk_r>
 8007842:	1c43      	adds	r3, r0, #1
 8007844:	d12b      	bne.n	800789e <_malloc_r+0x9a>
 8007846:	230c      	movs	r3, #12
 8007848:	0030      	movs	r0, r6
 800784a:	6033      	str	r3, [r6, #0]
 800784c:	f000 f871 	bl	8007932 <__malloc_unlock>
 8007850:	e003      	b.n	800785a <_malloc_r+0x56>
 8007852:	2d00      	cmp	r5, #0
 8007854:	dadf      	bge.n	8007816 <_malloc_r+0x12>
 8007856:	230c      	movs	r3, #12
 8007858:	6033      	str	r3, [r6, #0]
 800785a:	2000      	movs	r0, #0
 800785c:	bd70      	pop	{r4, r5, r6, pc}
 800785e:	680b      	ldr	r3, [r1, #0]
 8007860:	1b5b      	subs	r3, r3, r5
 8007862:	d419      	bmi.n	8007898 <_malloc_r+0x94>
 8007864:	2b0b      	cmp	r3, #11
 8007866:	d903      	bls.n	8007870 <_malloc_r+0x6c>
 8007868:	600b      	str	r3, [r1, #0]
 800786a:	18cc      	adds	r4, r1, r3
 800786c:	6025      	str	r5, [r4, #0]
 800786e:	e003      	b.n	8007878 <_malloc_r+0x74>
 8007870:	684b      	ldr	r3, [r1, #4]
 8007872:	428c      	cmp	r4, r1
 8007874:	d10d      	bne.n	8007892 <_malloc_r+0x8e>
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	0030      	movs	r0, r6
 800787a:	f000 f85a 	bl	8007932 <__malloc_unlock>
 800787e:	0020      	movs	r0, r4
 8007880:	2207      	movs	r2, #7
 8007882:	300b      	adds	r0, #11
 8007884:	1d23      	adds	r3, r4, #4
 8007886:	4390      	bics	r0, r2
 8007888:	1ac3      	subs	r3, r0, r3
 800788a:	d0e7      	beq.n	800785c <_malloc_r+0x58>
 800788c:	425a      	negs	r2, r3
 800788e:	50e2      	str	r2, [r4, r3]
 8007890:	e7e4      	b.n	800785c <_malloc_r+0x58>
 8007892:	6063      	str	r3, [r4, #4]
 8007894:	000c      	movs	r4, r1
 8007896:	e7ef      	b.n	8007878 <_malloc_r+0x74>
 8007898:	000c      	movs	r4, r1
 800789a:	6849      	ldr	r1, [r1, #4]
 800789c:	e7c3      	b.n	8007826 <_malloc_r+0x22>
 800789e:	2303      	movs	r3, #3
 80078a0:	1cc4      	adds	r4, r0, #3
 80078a2:	439c      	bics	r4, r3
 80078a4:	42a0      	cmp	r0, r4
 80078a6:	d0e1      	beq.n	800786c <_malloc_r+0x68>
 80078a8:	1a21      	subs	r1, r4, r0
 80078aa:	0030      	movs	r0, r6
 80078ac:	f000 f82e 	bl	800790c <_sbrk_r>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d1db      	bne.n	800786c <_malloc_r+0x68>
 80078b4:	e7c7      	b.n	8007846 <_malloc_r+0x42>
 80078b6:	46c0      	nop			; (mov r8, r8)
 80078b8:	20000090 	.word	0x20000090
 80078bc:	20000094 	.word	0x20000094

080078c0 <_realloc_r>:
 80078c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c2:	0007      	movs	r7, r0
 80078c4:	000d      	movs	r5, r1
 80078c6:	0016      	movs	r6, r2
 80078c8:	2900      	cmp	r1, #0
 80078ca:	d105      	bne.n	80078d8 <_realloc_r+0x18>
 80078cc:	0011      	movs	r1, r2
 80078ce:	f7ff ff99 	bl	8007804 <_malloc_r>
 80078d2:	0004      	movs	r4, r0
 80078d4:	0020      	movs	r0, r4
 80078d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d8:	2a00      	cmp	r2, #0
 80078da:	d103      	bne.n	80078e4 <_realloc_r+0x24>
 80078dc:	f7ff ff48 	bl	8007770 <_free_r>
 80078e0:	0034      	movs	r4, r6
 80078e2:	e7f7      	b.n	80078d4 <_realloc_r+0x14>
 80078e4:	f000 f826 	bl	8007934 <_malloc_usable_size_r>
 80078e8:	002c      	movs	r4, r5
 80078ea:	42b0      	cmp	r0, r6
 80078ec:	d2f2      	bcs.n	80078d4 <_realloc_r+0x14>
 80078ee:	0031      	movs	r1, r6
 80078f0:	0038      	movs	r0, r7
 80078f2:	f7ff ff87 	bl	8007804 <_malloc_r>
 80078f6:	1e04      	subs	r4, r0, #0
 80078f8:	d0ec      	beq.n	80078d4 <_realloc_r+0x14>
 80078fa:	0029      	movs	r1, r5
 80078fc:	0032      	movs	r2, r6
 80078fe:	f7ff fbfb 	bl	80070f8 <memcpy>
 8007902:	0029      	movs	r1, r5
 8007904:	0038      	movs	r0, r7
 8007906:	f7ff ff33 	bl	8007770 <_free_r>
 800790a:	e7e3      	b.n	80078d4 <_realloc_r+0x14>

0800790c <_sbrk_r>:
 800790c:	2300      	movs	r3, #0
 800790e:	b570      	push	{r4, r5, r6, lr}
 8007910:	4c06      	ldr	r4, [pc, #24]	; (800792c <_sbrk_r+0x20>)
 8007912:	0005      	movs	r5, r0
 8007914:	0008      	movs	r0, r1
 8007916:	6023      	str	r3, [r4, #0]
 8007918:	f7ff f89a 	bl	8006a50 <_sbrk>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d103      	bne.n	8007928 <_sbrk_r+0x1c>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d000      	beq.n	8007928 <_sbrk_r+0x1c>
 8007926:	602b      	str	r3, [r5, #0]
 8007928:	bd70      	pop	{r4, r5, r6, pc}
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	200001a0 	.word	0x200001a0

08007930 <__malloc_lock>:
 8007930:	4770      	bx	lr

08007932 <__malloc_unlock>:
 8007932:	4770      	bx	lr

08007934 <_malloc_usable_size_r>:
 8007934:	1f0b      	subs	r3, r1, #4
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	1f18      	subs	r0, r3, #4
 800793a:	2b00      	cmp	r3, #0
 800793c:	da01      	bge.n	8007942 <_malloc_usable_size_r+0xe>
 800793e:	580b      	ldr	r3, [r1, r0]
 8007940:	18c0      	adds	r0, r0, r3
 8007942:	4770      	bx	lr

08007944 <_init>:
 8007944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007946:	46c0      	nop			; (mov r8, r8)
 8007948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800794a:	bc08      	pop	{r3}
 800794c:	469e      	mov	lr, r3
 800794e:	4770      	bx	lr

08007950 <_fini>:
 8007950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007952:	46c0      	nop			; (mov r8, r8)
 8007954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007956:	bc08      	pop	{r3}
 8007958:	469e      	mov	lr, r3
 800795a:	4770      	bx	lr

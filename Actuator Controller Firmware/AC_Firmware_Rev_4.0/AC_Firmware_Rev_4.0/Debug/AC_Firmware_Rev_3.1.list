
AC_Firmware_Rev_3.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000780c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a2c  0800799c  0800799c  0001799c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083c8  080083c8  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  080083c8  080083c8  000183c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083d0  080083d0  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083d0  080083d0  000183d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083d4  080083d4  000183d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  080083d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013dc  2000015c  08008534  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001538  08008534  00021538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002975c  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004716  00000000  00000000  000498e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  0004e000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  0004ec38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b3f1  00000000  00000000  0004f668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170d1  00000000  00000000  0007aa59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea663  00000000  00000000  00091b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017c18d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f84  00000000  00000000  0017c1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007984 	.word	0x08007984

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	08007984 	.word	0x08007984

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <AutomaticShutdown>:


//Automatic shutdown : Purge and go back to SAFETY

uint32_t AutomaticShutdown(struct StateVars *ctrl)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
	ctrl->valveConfiguration = StateConfiguration();
 8000584:	f002 fc26 	bl	8002dd4 <StateConfiguration>
 8000588:	4602      	mov	r2, r0
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	62da      	str	r2, [r3, #44]	; 0x2c

	/*FUEL PURGE N2  - LOX PURGE N2*/
	ctrl->valveTarget  = ((uint16_t)SOV3 	\
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000594:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV9);


	uint32_t TIMEOUT = 3000; // 3 second time out
 8000596:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800059a:	613b      	str	r3, [r7, #16]
	
    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fbda 	bl	8002d5c <VerifyState>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d054      	beq.n	8000658 <AutomaticShutdown+0xe0>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fbd1 	bl	8002d5c <VerifyState>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d04b      	beq.n	8000658 <AutomaticShutdown+0xe0>
    {
    	if((ctrl->currentState & AUTOMATIC_SHUTDOWN) == AUTOMATIC_SHUTDOWN){
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80005c6:	f003 030c 	and.w	r3, r3, #12
 80005ca:	2b0c      	cmp	r3, #12
 80005cc:	d137      	bne.n	800063e <AutomaticShutdown+0xc6>


    		StateStatus(ctrl);
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f002 fb6e 	bl	8002cb0 <StateStatus>

    		uint32_t now = HAL_GetTick();
 80005d4:	f003 ff06 	bl	80043e4 <HAL_GetTick>
 80005d8:	60f8      	str	r0, [r7, #12]
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d003      	beq.n	80005f2 <AutomaticShutdown+0x7a>
    	    {
    			success = StateInitialize(ctrl);
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f002 fd44 	bl	8003078 <StateInitialize>
 80005f0:	6178      	str	r0, [r7, #20]
    	    }


    		success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	429a      	cmp	r2, r3
 80005fc:	bf0c      	ite	eq
 80005fe:	2301      	moveq	r3, #1
 8000600:	2300      	movne	r3, #0
 8000602:	b2db      	uxtb	r3, r3
 8000604:	617b      	str	r3, [r7, #20]

    		 if(now - ctrl->timeStarted > TIMEOUT && success)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	429a      	cmp	r2, r3
 8000612:	d206      	bcs.n	8000622 <AutomaticShutdown+0xaa>
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d003      	beq.n	8000622 <AutomaticShutdown+0xaa>
    		   {
    		       ctrl->currentState= SAFETY;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2205      	movs	r2, #5
 800061e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		   }

    		 // Increment state counter
			ctrl->stateCounter++;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	1c5a      	adds	r2, r3, #1
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000634:	d11f      	bne.n	8000676 <AutomaticShutdown+0xfe>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & AUTOMATIC_SHUTDOWN) == AUTOMATIC_SHUTDOWN){
 800063c:	e01b      	b.n	8000676 <AutomaticShutdown+0xfe>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, AUTOMATIC_SHUTDOWN, ctrl->currentState);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000644:	461a      	mov	r2, r3
 8000646:	210c      	movs	r1, #12
 8000648:	480f      	ldr	r0, [pc, #60]	; (8000688 <AutomaticShutdown+0x110>)
 800064a:	f001 fc33 	bl	8001eb4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2, Tx_Buffer);
 800064e:	490e      	ldr	r1, [pc, #56]	; (8000688 <AutomaticShutdown+0x110>)
 8000650:	480e      	ldr	r0, [pc, #56]	; (800068c <AutomaticShutdown+0x114>)
 8000652:	f000 fc77 	bl	8000f44 <UART_SendMessage>
    	if((ctrl->currentState & AUTOMATIC_SHUTDOWN) == AUTOMATIC_SHUTDOWN){
 8000656:	e00e      	b.n	8000676 <AutomaticShutdown+0xfe>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000664:	461a      	mov	r2, r3
 8000666:	4808      	ldr	r0, [pc, #32]	; (8000688 <AutomaticShutdown+0x110>)
 8000668:	f001 fc9e 	bl	8001fa8 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 800066c:	4906      	ldr	r1, [pc, #24]	; (8000688 <AutomaticShutdown+0x110>)
 800066e:	4807      	ldr	r0, [pc, #28]	; (800068c <AutomaticShutdown+0x114>)
 8000670:	f000 fc68 	bl	8000f44 <UART_SendMessage>
 8000674:	e000      	b.n	8000678 <AutomaticShutdown+0x100>
    	if((ctrl->currentState & AUTOMATIC_SHUTDOWN) == AUTOMATIC_SHUTDOWN){
 8000676:	bf00      	nop
    }
    circular_buffer_readFlag = TRUE;
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <AutomaticShutdown+0x118>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
	return success;
 800067e:	697b      	ldr	r3, [r7, #20]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3718      	adds	r7, #24
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000238 	.word	0x20000238
 800068c:	2000145c 	.word	0x2000145c
 8000690:	20000184 	.word	0x20000184

08000694 <Firing>:
#include "messages.h"
#include "utilities.h"
#include "ring_buffer.h"

uint32_t Firing(struct StateVars *ctrl)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
	ctrl->valveConfiguration = StateConfiguration();
 80006a0:	f002 fb98 	bl	8002dd4 <StateConfiguration>
 80006a4:	4602      	mov	r2, r0
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV1 	\
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2233      	movs	r2, #51	; 0x33
 80006ae:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV2 	\
			 |(uint16_t)SOV5 	\
			 |(uint16_t)SOV6);

	uint32_t TIMEOUT = 3000;// 3 second time out
 80006b0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80006b4:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fb4d 	bl	8002d5c <VerifyState>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d056      	beq.n	8000776 <Firing+0xe2>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fb44 	bl	8002d5c <VerifyState>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d04d      	beq.n	8000776 <Firing+0xe2>
    {
    	if((ctrl->currentState & FIRING) == FIRING){
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80006e0:	f003 0309 	and.w	r3, r3, #9
 80006e4:	2b09      	cmp	r3, #9
 80006e6:	d139      	bne.n	800075c <Firing+0xc8>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  1  |   1  |   0  |   0  |   1  |   1  |   0  |   0  |  0  |  0

    		StateStatus(ctrl);
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f002 fae1 	bl	8002cb0 <StateStatus>
    		//nominal = NominalValueCheck(ctrl, Rx_Buffer);
    		ringBufferRead();
 80006ee:	f001 fecd 	bl	800248c <ringBufferRead>

    		uint32_t now = HAL_GetTick();
 80006f2:	f003 fe77 	bl	80043e4 <HAL_GetTick>
 80006f6:	60f8      	str	r0, [r7, #12]
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000704:	429a      	cmp	r2, r3
 8000706:	d003      	beq.n	8000710 <Firing+0x7c>
    	    {
    			success = StateInitialize(ctrl);
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f002 fcb5 	bl	8003078 <StateInitialize>
 800070e:	6178      	str	r0, [r7, #20]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000718:	429a      	cmp	r2, r3
 800071a:	bf0c      	ite	eq
 800071c:	2301      	moveq	r3, #1
 800071e:	2300      	movne	r3, #0
 8000720:	b2db      	uxtb	r3, r3
 8000722:	617b      	str	r3, [r7, #20]


    		if(now - ctrl->timeStarted > TIMEOUT && success)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	1ad3      	subs	r3, r2, r3
 800072c:	693a      	ldr	r2, [r7, #16]
 800072e:	429a      	cmp	r2, r3
 8000730:	d206      	bcs.n	8000740 <Firing+0xac>
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d003      	beq.n	8000740 <Firing+0xac>
    		{
        		ctrl->currentState= PURGE;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	220a      	movs	r2, #10
 800073c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}



    		// Increment state counter
    		ctrl->stateCounter++;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	1c5a      	adds	r2, r3, #1
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	609a      	str	r2, [r3, #8]
    		if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000752:	d11f      	bne.n	8000794 <Firing+0x100>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & FIRING) == FIRING){
 800075a:	e01b      	b.n	8000794 <Firing+0x100>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, FIRING, ctrl->currentState);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000762:	461a      	mov	r2, r3
 8000764:	2109      	movs	r1, #9
 8000766:	480e      	ldr	r0, [pc, #56]	; (80007a0 <Firing+0x10c>)
 8000768:	f001 fba4 	bl	8001eb4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 800076c:	490c      	ldr	r1, [pc, #48]	; (80007a0 <Firing+0x10c>)
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <Firing+0x110>)
 8000770:	f000 fbe8 	bl	8000f44 <UART_SendMessage>
    	if((ctrl->currentState & FIRING) == FIRING){
 8000774:	e00e      	b.n	8000794 <Firing+0x100>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000782:	461a      	mov	r2, r3
 8000784:	4806      	ldr	r0, [pc, #24]	; (80007a0 <Firing+0x10c>)
 8000786:	f001 fc0f 	bl	8001fa8 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 800078a:	4905      	ldr	r1, [pc, #20]	; (80007a0 <Firing+0x10c>)
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <Firing+0x110>)
 800078e:	f000 fbd9 	bl	8000f44 <UART_SendMessage>
 8000792:	e000      	b.n	8000796 <Firing+0x102>
    	if((ctrl->currentState & FIRING) == FIRING){
 8000794:	bf00      	nop
    }
	return success;
 8000796:	697b      	ldr	r3, [r7, #20]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000238 	.word	0x20000238
 80007a4:	2000145c 	.word	0x2000145c

080007a8 <Ignition>:
#include "messages.h"
#include "utilities.h"
#include "ring_buffer.h"

uint32_t Ignition(struct StateVars *ctrl)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
	ctrl->valveConfiguration = StateConfiguration();
 80007b4:	f002 fb0e 	bl	8002dd4 <StateConfiguration>
 80007b8:	4602      	mov	r2, r0
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV1 	\
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f240 2203 	movw	r2, #515	; 0x203
 80007c4:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV2 |(uint16_t)IG1);

	uint32_t TIMEOUT = 5000;//5 second time out
 80007c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80007ca:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 fac2 	bl	8002d5c <VerifyState>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d056      	beq.n	800088c <Ignition+0xe4>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fab9 	bl	8002d5c <VerifyState>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d04d      	beq.n	800088c <Ignition+0xe4>
    {
    	if((ctrl->currentState & IGNITION) == IGNITION){
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80007f6:	f003 0307 	and.w	r3, r3, #7
 80007fa:	2b07      	cmp	r3, #7
 80007fc:	d139      	bne.n	8000872 <Ignition+0xca>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  1  |   1  |   0  |   0  |   0  |   0  |   0  |   0  |  0  |  1

    		StateStatus(ctrl);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f002 fa56 	bl	8002cb0 <StateStatus>
    		//nominal = NominalValueCheck(ctrl, Rx_Buffer);
    		ringBufferRead();
 8000804:	f001 fe42 	bl	800248c <ringBufferRead>

    		uint32_t now = HAL_GetTick();//should return the number of milliseconds elapsed since startup
 8000808:	f003 fdec 	bl	80043e4 <HAL_GetTick>
 800080c:	60f8      	str	r0, [r7, #12]
    	    // If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800081a:	429a      	cmp	r2, r3
 800081c:	d003      	beq.n	8000826 <Ignition+0x7e>
    	    {
    			success = StateInitialize(ctrl);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f002 fc2a 	bl	8003078 <StateInitialize>
 8000824:	6178      	str	r0, [r7, #20]
    	    }


			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	429a      	cmp	r2, r3
 8000830:	bf0c      	ite	eq
 8000832:	2301      	moveq	r3, #1
 8000834:	2300      	movne	r3, #0
 8000836:	b2db      	uxtb	r3, r3
 8000838:	617b      	str	r3, [r7, #20]

    		if((now - ctrl->timeStarted >= TIMEOUT) && success)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	429a      	cmp	r2, r3
 8000846:	d806      	bhi.n	8000856 <Ignition+0xae>
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d003      	beq.n	8000856 <Ignition+0xae>
    		{
        		ctrl->currentState= OXIDIZER_START;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2208      	movs	r2, #8
 8000852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}

    		// Increment state counter
			ctrl->stateCounter++;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000868:	d11f      	bne.n	80008aa <Ignition+0x102>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & IGNITION) == IGNITION){
 8000870:	e01b      	b.n	80008aa <Ignition+0x102>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, IGNITION, ctrl->currentState);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000878:	461a      	mov	r2, r3
 800087a:	2107      	movs	r1, #7
 800087c:	480e      	ldr	r0, [pc, #56]	; (80008b8 <Ignition+0x110>)
 800087e:	f001 fb19 	bl	8001eb4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8000882:	490d      	ldr	r1, [pc, #52]	; (80008b8 <Ignition+0x110>)
 8000884:	480d      	ldr	r0, [pc, #52]	; (80008bc <Ignition+0x114>)
 8000886:	f000 fb5d 	bl	8000f44 <UART_SendMessage>
    	if((ctrl->currentState & IGNITION) == IGNITION){
 800088a:	e00e      	b.n	80008aa <Ignition+0x102>
    	}

    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000898:	461a      	mov	r2, r3
 800089a:	4807      	ldr	r0, [pc, #28]	; (80008b8 <Ignition+0x110>)
 800089c:	f001 fb84 	bl	8001fa8 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 80008a0:	4905      	ldr	r1, [pc, #20]	; (80008b8 <Ignition+0x110>)
 80008a2:	4806      	ldr	r0, [pc, #24]	; (80008bc <Ignition+0x114>)
 80008a4:	f000 fb4e 	bl	8000f44 <UART_SendMessage>
 80008a8:	e000      	b.n	80008ac <Ignition+0x104>
    	if((ctrl->currentState & IGNITION) == IGNITION){
 80008aa:	bf00      	nop
    }
	return success;
 80008ac:	697b      	ldr	r3, [r7, #20]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000238 	.word	0x20000238
 80008bc:	2000145c 	.word	0x2000145c

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b0b8      	sub	sp, #224	; 0xe0
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008ca:	2244      	movs	r2, #68	; 0x44
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f006 fc0c 	bl	80070ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e4:	463b      	mov	r3, r7
 80008e6:	2288      	movs	r2, #136	; 0x88
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f006 fbfe 	bl	80070ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f0:	2302      	movs	r3, #2
 80008f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fe:	2310      	movs	r3, #16
 8000900:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000904:	2302      	movs	r3, #2
 8000906:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800090a:	2302      	movs	r3, #2
 800090c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000910:	2301      	movs	r3, #1
 8000912:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000916:	230a      	movs	r3, #10
 8000918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800091c:	2307      	movs	r3, #7
 800091e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000922:	2302      	movs	r3, #2
 8000924:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000928:	2302      	movs	r3, #2
 800092a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000932:	4618      	mov	r0, r3
 8000934:	f004 f93a 	bl	8004bac <HAL_RCC_OscConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800093e:	f000 f941 	bl	8000bc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000942:	230f      	movs	r3, #15
 8000944:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000948:	2303      	movs	r3, #3
 800094a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000960:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000964:	2104      	movs	r1, #4
 8000966:	4618      	mov	r0, r3
 8000968:	f004 fd06 	bl	8005378 <HAL_RCC_ClockConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000972:	f000 f927 	bl	8000bc4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 8000976:	2306      	movs	r3, #6
 8000978:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800097a:	2300      	movs	r3, #0
 800097c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800097e:	2300      	movs	r3, #0
 8000980:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000982:	463b      	mov	r3, r7
 8000984:	4618      	mov	r0, r3
 8000986:	f004 fefd 	bl	8005784 <HAL_RCCEx_PeriphCLKConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000990:	f000 f918 	bl	8000bc4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000994:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000998:	f004 f8b2 	bl	8004b00 <HAL_PWREx_ControlVoltageScaling>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80009a2:	f000 f90f 	bl	8000bc4 <Error_Handler>
  }
}
 80009a6:	bf00      	nop
 80009a8:	37e0      	adds	r7, #224	; 0xe0
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <MX_USART2_UART_Init>:
    * @brief USART1 Initialization Function
    * @param None
    * @retval None
    */
void MX_USART2_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009b6:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <MX_USART2_UART_Init+0x5c>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009f4:	f005 fb82 	bl	80060fc <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009fe:	f000 f8e1 	bl	8000bc4 <Error_Handler>
  }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

  }
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	2000145c 	.word	0x2000145c
 8000a0c:	40004400 	.word	0x40004400

08000a10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a16:	4a15      	ldr	r2, [pc, #84]	; (8000a6c <MX_USART3_UART_Init+0x5c>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a54:	f005 fb52 	bl	80060fc <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a5e:	f000 f8b1 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000194 	.word	0x20000194
 8000a6c:	40004800 	.word	0x40004800

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	4b4b      	ldr	r3, [pc, #300]	; (8000bb4 <MX_GPIO_Init+0x144>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	4a4a      	ldr	r2, [pc, #296]	; (8000bb4 <MX_GPIO_Init+0x144>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a92:	4b48      	ldr	r3, [pc, #288]	; (8000bb4 <MX_GPIO_Init+0x144>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9e:	4b45      	ldr	r3, [pc, #276]	; (8000bb4 <MX_GPIO_Init+0x144>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	4a44      	ldr	r2, [pc, #272]	; (8000bb4 <MX_GPIO_Init+0x144>)
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aaa:	4b42      	ldr	r3, [pc, #264]	; (8000bb4 <MX_GPIO_Init+0x144>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b3f      	ldr	r3, [pc, #252]	; (8000bb4 <MX_GPIO_Init+0x144>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	4a3e      	ldr	r2, [pc, #248]	; (8000bb4 <MX_GPIO_Init+0x144>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac2:	4b3c      	ldr	r3, [pc, #240]	; (8000bb4 <MX_GPIO_Init+0x144>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <MX_GPIO_Init+0x144>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4a38      	ldr	r2, [pc, #224]	; (8000bb4 <MX_GPIO_Init+0x144>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b36      	ldr	r3, [pc, #216]	; (8000bb4 <MX_GPIO_Init+0x144>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LOX_MAIN_Pin|FUEL_MAIN_Pin|IGNITION1_Pin
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 51f9 	mov.w	r1, #7968	; 0x1f20
 8000aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af0:	f003 ffbc 	bl	8004a6c <HAL_GPIO_WritePin>
                          |FUEL_PRESSURE_Pin|LOX_PRESSURE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin|LOX_PURGE_Pin|LOX_FILL_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 4124 	mov.w	r1, #41984	; 0xa400
 8000afa:	482f      	ldr	r0, [pc, #188]	; (8000bb8 <MX_GPIO_Init+0x148>)
 8000afc:	f003 ffb6 	bl	8004a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin|FUEL_PURGE_N2_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	21c0      	movs	r1, #192	; 0xc0
 8000b04:	482d      	ldr	r0, [pc, #180]	; (8000bbc <MX_GPIO_Init+0x14c>)
 8000b06:	f003 ffb1 	bl	8004a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b10:	4b2b      	ldr	r3, [pc, #172]	; (8000bc0 <MX_GPIO_Init+0x150>)
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4827      	ldr	r0, [pc, #156]	; (8000bbc <MX_GPIO_Init+0x14c>)
 8000b20:	f003 fde2 	bl	80046e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b24:	2320      	movs	r3, #32
 8000b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3e:	f003 fdd3 	bl	80046e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOX_VENT_Pin LOX_PURGE_Pin LOX_FILL_Pin */
  GPIO_InitStruct.Pin = LOX_VENT_Pin|LOX_PURGE_Pin|LOX_FILL_Pin;
 8000b42:	f44f 4324 	mov.w	r3, #41984	; 0xa400
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4817      	ldr	r0, [pc, #92]	; (8000bb8 <MX_GPIO_Init+0x148>)
 8000b5c:	f003 fdc4 	bl	80046e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FUEL_VENT_Pin FUEL_PURGE_N2_Pin */
  GPIO_InitStruct.Pin = FUEL_VENT_Pin|FUEL_PURGE_N2_Pin;
 8000b60:	23c0      	movs	r3, #192	; 0xc0
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4811      	ldr	r0, [pc, #68]	; (8000bbc <MX_GPIO_Init+0x14c>)
 8000b78:	f003 fdb6 	bl	80046e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOX_MAIN_Pin FUEL_MAIN_Pin IGNITION1_Pin FUEL_PRESSURE_Pin
                           LOX_PRESSURE_Pin */
  GPIO_InitStruct.Pin = LOX_MAIN_Pin|FUEL_MAIN_Pin|IGNITION1_Pin|FUEL_PRESSURE_Pin
 8000b7c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000b80:	617b      	str	r3, [r7, #20]
                          |LOX_PRESSURE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b98:	f003 fda6 	bl	80046e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2028      	movs	r0, #40	; 0x28
 8000ba2:	f003 fd2a 	bl	80045fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ba6:	2028      	movs	r0, #40	; 0x28
 8000ba8:	f003 fd43 	bl	8004632 <HAL_NVIC_EnableIRQ>

}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	; 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	48000400 	.word	0x48000400
 8000bbc:	48000800 	.word	0x48000800
 8000bc0:	10210000 	.word	0x10210000

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <Error_Handler+0x8>
	...

08000bd0 <LoxChill>:
#include "lox_chill.h"
#include "messages.h"
#include "ring_buffer.h"

uint32_t LoxChill(struct StateVars *ctrl)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 8000bdc:	f002 f8fa 	bl	8002dd4 <StateConfiguration>
 8000be0:	4602      	mov	r2, r0
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV4 	\
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	22a8      	movs	r2, #168	; 0xa8
 8000bea:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV6 	\
			 |(uint16_t)SOV8);

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f002 f8b2 	bl	8002d5c <VerifyState>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d048      	beq.n	8000c90 <LoxChill+0xc0>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c04:	4618      	mov	r0, r3
 8000c06:	f002 f8a9 	bl	8002d5c <VerifyState>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d03f      	beq.n	8000c90 <LoxChill+0xc0>
    {
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d02b      	beq.n	8000c76 <LoxChill+0xa6>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8
    		//|  0  |   0  |   0  |   1  |   0  |   1  |   0  |   1  |

    		StateStatus(ctrl);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f002 f846 	bl	8002cb0 <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d003      	beq.n	8000c3c <LoxChill+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f002 fa1f 	bl	8003078 <StateInitialize>
 8000c3a:	60f8      	str	r0, [r7, #12]
    	    }

    		//check if command changed
    		ProcessCommands(ctrl);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f000 fb55 	bl	80012ec <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	bf0c      	ite	eq
 8000c4e:	2301      	moveq	r3, #1
 8000c50:	2300      	movne	r3, #0
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	60fb      	str	r3, [r7, #12]

			//NominalValueCheck(ctrl, Rx_Buffer);
			ringBufferRead();
 8000c56:	f001 fc19 	bl	800248c <ringBufferRead>

    		// Increment state counter
			ctrl->stateCounter++;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	1c5a      	adds	r2, r3, #1
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c6c:	d11f      	bne.n	8000cae <LoxChill+0xde>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000c74:	e01b      	b.n	8000cae <LoxChill+0xde>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, LOX_CHILL, ctrl->currentState);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	2104      	movs	r1, #4
 8000c80:	480e      	ldr	r0, [pc, #56]	; (8000cbc <LoxChill+0xec>)
 8000c82:	f001 f917 	bl	8001eb4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8000c86:	490d      	ldr	r1, [pc, #52]	; (8000cbc <LoxChill+0xec>)
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <LoxChill+0xf0>)
 8000c8a:	f000 f95b 	bl	8000f44 <UART_SendMessage>
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000c8e:	e00e      	b.n	8000cae <LoxChill+0xde>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4807      	ldr	r0, [pc, #28]	; (8000cbc <LoxChill+0xec>)
 8000ca0:	f001 f982 	bl	8001fa8 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8000ca4:	4905      	ldr	r1, [pc, #20]	; (8000cbc <LoxChill+0xec>)
 8000ca6:	4806      	ldr	r0, [pc, #24]	; (8000cc0 <LoxChill+0xf0>)
 8000ca8:	f000 f94c 	bl	8000f44 <UART_SendMessage>
 8000cac:	e000      	b.n	8000cb0 <LoxChill+0xe0>
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000cae:	bf00      	nop
    }
	return success;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000238 	.word	0x20000238
 8000cc0:	2000145c 	.word	0x2000145c

08000cc4 <LoxFill>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "lox_fill.h"
#include "messages.h"
#include "ring_buffer.h"

uint32_t LoxFill(struct StateVars *ctrl){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 8000cd0:	f002 f880 	bl	8002dd4 <StateConfiguration>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV4 	\
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	22c8      	movs	r2, #200	; 0xc8
 8000cde:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV7 	\
			 |(uint16_t)SOV8);

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f002 f838 	bl	8002d5c <VerifyState>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d048      	beq.n	8000d84 <LoxFill+0xc0>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f002 f82f 	bl	8002d5c <VerifyState>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d03f      	beq.n	8000d84 <LoxFill+0xc0>
    {
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d0a:	f003 0303 	and.w	r3, r3, #3
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d12b      	bne.n	8000d6a <LoxFill+0xa6>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  0  |   0  |   0  |   1  |   0  |   0  |   1  |   1  |  0  |  0

    		StateStatus(ctrl);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f001 ffcc 	bl	8002cb0 <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d003      	beq.n	8000d30 <LoxFill+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f002 f9a5 	bl	8003078 <StateInitialize>
 8000d2e:	60f8      	str	r0, [r7, #12]
    	    }


    		ProcessCommands(ctrl);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 fadb 	bl	80012ec <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	bf0c      	ite	eq
 8000d42:	2301      	moveq	r3, #1
 8000d44:	2300      	movne	r3, #0
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	60fb      	str	r3, [r7, #12]

			//NominalValueCheck(ctrl, Rx_Buffer);
			ringBufferRead();
 8000d4a:	f001 fb9f 	bl	800248c <ringBufferRead>

    		// Increment state counter
			ctrl->stateCounter++;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d60:	d11f      	bne.n	8000da2 <LoxFill+0xde>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000d68:	e01b      	b.n	8000da2 <LoxFill+0xde>

    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, LOX_FILL, ctrl->currentState);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d70:	461a      	mov	r2, r3
 8000d72:	2103      	movs	r1, #3
 8000d74:	480e      	ldr	r0, [pc, #56]	; (8000db0 <LoxFill+0xec>)
 8000d76:	f001 f89d 	bl	8001eb4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8000d7a:	490d      	ldr	r1, [pc, #52]	; (8000db0 <LoxFill+0xec>)
 8000d7c:	480d      	ldr	r0, [pc, #52]	; (8000db4 <LoxFill+0xf0>)
 8000d7e:	f000 f8e1 	bl	8000f44 <UART_SendMessage>
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000d82:	e00e      	b.n	8000da2 <LoxFill+0xde>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d90:	461a      	mov	r2, r3
 8000d92:	4807      	ldr	r0, [pc, #28]	; (8000db0 <LoxFill+0xec>)
 8000d94:	f001 f908 	bl	8001fa8 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 8000d98:	4905      	ldr	r1, [pc, #20]	; (8000db0 <LoxFill+0xec>)
 8000d9a:	4806      	ldr	r0, [pc, #24]	; (8000db4 <LoxFill+0xf0>)
 8000d9c:	f000 f8d2 	bl	8000f44 <UART_SendMessage>
 8000da0:	e000      	b.n	8000da4 <LoxFill+0xe0>
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000da2:	bf00      	nop
    }

	return success;
 8000da4:	68fb      	ldr	r3, [r7, #12]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000238 	.word	0x20000238
 8000db4:	2000145c 	.word	0x2000145c

08000db8 <LoxPreFill>:
#include "messages.h"
#include "ring_buffer.h"


uint32_t LoxPreFill(struct StateVars *ctrl)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]

	ctrl->valveConfiguration = StateConfiguration();
 8000dc4:	f002 f806 	bl	8002dd4 <StateConfiguration>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV2 | (uint16_t)SOV4 |(uint16_t)SOV6);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	222a      	movs	r2, #42	; 0x2a
 8000dd2:	631a      	str	r2, [r3, #48]	; 0x30


    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 ffbe 	bl	8002d5c <VerifyState>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d048      	beq.n	8000e78 <LoxPreFill+0xc0>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 ffb5 	bl	8002d5c <VerifyState>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d03f      	beq.n	8000e78 <LoxPreFill+0xc0>
    {
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d02b      	beq.n	8000e5e <LoxPreFill+0xa6>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8   SOV9   IG1
    		// | 0	|   1  |   0  |   1  |   0  |   1  |   0  |   0  |   0  |  0
    		StateStatus(ctrl);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f001 ff52 	bl	8002cb0 <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d003      	beq.n	8000e24 <LoxPreFill+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f002 f92b 	bl	8003078 <StateInitialize>
 8000e22:	60f8      	str	r0, [r7, #12]
    	    }

    		//StateStatus(ctrl);

    		ProcessCommands(ctrl);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 fa61 	bl	80012ec <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	429a      	cmp	r2, r3
 8000e34:	bf0c      	ite	eq
 8000e36:	2301      	moveq	r3, #1
 8000e38:	2300      	movne	r3, #0
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	60fb      	str	r3, [r7, #12]

			//NominalValueCheck(ctrl, Rx_Buffer);
			ringBufferRead();
 8000e3e:	f001 fb25 	bl	800248c <ringBufferRead>
    		// Increment state counter
    		ctrl->stateCounter++;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
    		if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e54:	d11f      	bne.n	8000e96 <LoxPreFill+0xde>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000e5c:	e01b      	b.n	8000e96 <LoxPreFill+0xde>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, LOX_PRE_FILL, ctrl->currentState);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e64:	461a      	mov	r2, r3
 8000e66:	2102      	movs	r1, #2
 8000e68:	480e      	ldr	r0, [pc, #56]	; (8000ea4 <LoxPreFill+0xec>)
 8000e6a:	f001 f823 	bl	8001eb4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2, Tx_Buffer);
 8000e6e:	490d      	ldr	r1, [pc, #52]	; (8000ea4 <LoxPreFill+0xec>)
 8000e70:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <LoxPreFill+0xf0>)
 8000e72:	f000 f867 	bl	8000f44 <UART_SendMessage>
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000e76:	e00e      	b.n	8000e96 <LoxPreFill+0xde>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e84:	461a      	mov	r2, r3
 8000e86:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <LoxPreFill+0xec>)
 8000e88:	f001 f88e 	bl	8001fa8 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8000e8c:	4905      	ldr	r1, [pc, #20]	; (8000ea4 <LoxPreFill+0xec>)
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <LoxPreFill+0xf0>)
 8000e90:	f000 f858 	bl	8000f44 <UART_SendMessage>
 8000e94:	e000      	b.n	8000e98 <LoxPreFill+0xe0>
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000e96:	bf00      	nop
    }

	return success;
 8000e98:	68fb      	ldr	r3, [r7, #12]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000238 	.word	0x20000238
 8000ea8:	2000145c 	.word	0x2000145c

08000eac <main>:
#include "states_def.h"
#include "init.h"
#include "ring_buffer.h"
int main(void)

{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b090      	sub	sp, #64	; 0x40
 8000eb0:	af00      	add	r7, sp, #0
struct StateVars controls = {
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	223c      	movs	r2, #60	; 0x3c
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f006 f917 	bl	80070ec <memset>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ec2:	230b      	movs	r3, #11
 8000ec4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
		TURN_OFF,	//lastState
		START_HANDLER, 	//currentState
		&controls	//this address.
		};

	HAL_Init();
 8000ecc:	f003 fa1a 	bl	8004304 <HAL_Init>

	SystemClock_Config();
 8000ed0:	f7ff fcf6 	bl	80008c0 <SystemClock_Config>
	MX_GPIO_Init();
 8000ed4:	f7ff fdcc 	bl	8000a70 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000ed8:	f7ff fd6a 	bl	80009b0 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000edc:	f7ff fd98 	bl	8000a10 <MX_USART3_UART_Init>
    circular = 0; // Flag for circular buffer init
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <main+0x7c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
    bufferLength = 0, readIndex = 0, writeIndex = 0;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <main+0x80>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <main+0x84>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <main+0x88>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
    initOnceFlag = TRUE;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <main+0x8c>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	601a      	str	r2, [r3, #0]

	 HAL_UART_Receive_IT(&huart2,(uint8_t *)Rx_data, 1); // Asserts UART Interrupt every time 1 byte is received.
 8000efe:	2201      	movs	r2, #1
 8000f00:	490e      	ldr	r1, [pc, #56]	; (8000f3c <main+0x90>)
 8000f02:	480f      	ldr	r0, [pc, #60]	; (8000f40 <main+0x94>)
 8000f04:	f005 f9dc 	bl	80062c0 <HAL_UART_Receive_IT>


	while(controls.isStateMachineRunning)
 8000f08:	e005      	b.n	8000f16 <main+0x6a>
	{

	  StateMachine(controls.isStateMachineRunning,controls.adr);
 8000f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f001 fc23 	bl	800275c <StateMachine>
	while(controls.isStateMachineRunning)
 8000f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1f6      	bne.n	8000f0a <main+0x5e>
 8000f1c:	2300      	movs	r3, #0
	}

}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3740      	adds	r7, #64	; 0x40
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000124c 	.word	0x2000124c
 8000f2c:	2000018c 	.word	0x2000018c
 8000f30:	20001500 	.word	0x20001500
 8000f34:	20001260 	.word	0x20001260
 8000f38:	20000220 	.word	0x20000220
 8000f3c:	20000228 	.word	0x20000228
 8000f40:	2000145c 	.word	0x2000145c

08000f44 <UART_SendMessage>:
//troubleshooting
int x = 0;

// Function to send the messages over serial communication
void UART_SendMessage(UART_HandleTypeDef *huart, char* message)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	  int len = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
	  uint32_t success = FALSE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
	  sprintf(buffer, message);
 8000f56:	6839      	ldr	r1, [r7, #0]
 8000f58:	4809      	ldr	r0, [pc, #36]	; (8000f80 <UART_SendMessage+0x3c>)
 8000f5a:	f006 f8cf 	bl	80070fc <siprintf>
	  len =strlen(buffer);
 8000f5e:	4808      	ldr	r0, [pc, #32]	; (8000f80 <UART_SendMessage+0x3c>)
 8000f60:	f7ff f936 	bl	80001d0 <strlen>
 8000f64:	4603      	mov	r3, r0
 8000f66:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f70:	4903      	ldr	r1, [pc, #12]	; (8000f80 <UART_SendMessage+0x3c>)
 8000f72:	4804      	ldr	r0, [pc, #16]	; (8000f84 <UART_SendMessage+0x40>)
 8000f74:	f005 f910 	bl	8006198 <HAL_UART_Transmit>
	  return success;
 8000f78:	bf00      	nop
}
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20001264 	.word	0x20001264
 8000f84:	2000145c 	.word	0x2000145c

08000f88 <UART_SendMessage_VI>:
//Function that sends the state transition message to the VI
void UART_SendMessage_VI(UART_HandleTypeDef *huart, char* message){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
		  int len = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
		  uint32_t success = FALSE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
		  sprintf(buffer, message);
 8000f9a:	6839      	ldr	r1, [r7, #0]
 8000f9c:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <UART_SendMessage_VI+0x3c>)
 8000f9e:	f006 f8ad 	bl	80070fc <siprintf>
		  len =strlen(buffer);
 8000fa2:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <UART_SendMessage_VI+0x3c>)
 8000fa4:	f7ff f914 	bl	80001d0 <strlen>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart3, buffer, len, 1000);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb4:	4903      	ldr	r1, [pc, #12]	; (8000fc4 <UART_SendMessage_VI+0x3c>)
 8000fb6:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <UART_SendMessage_VI+0x40>)
 8000fb8:	f005 f8ee 	bl	8006198 <HAL_UART_Transmit>
		  return success;
 8000fbc:	bf00      	nop
}
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20001264 	.word	0x20001264
 8000fc8:	20000194 	.word	0x20000194

08000fcc <HAL_UART_RxCpltCallback>:

//Receiving the command
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	 uint32_t success = FALSE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	613b      	str	r3, [r7, #16]
	 uint8_t i;
	    if (huart->Instance == USART2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a6e      	ldr	r2, [pc, #440]	; (8001198 <HAL_UART_RxCpltCallback+0x1cc>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	f040 80d6 	bne.w	8001190 <HAL_UART_RxCpltCallback+0x1c4>
	     {
	    	//clear Rx_Buffer before receiving new data
	        if (Rx_indx==0) { for (i=0;i<100;i++) Rx_Buffer[i]=0; }
 8000fe4:	4b6d      	ldr	r3, [pc, #436]	; (800119c <HAL_UART_RxCpltCallback+0x1d0>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d10c      	bne.n	8001006 <HAL_UART_RxCpltCallback+0x3a>
 8000fec:	2300      	movs	r3, #0
 8000fee:	75fb      	strb	r3, [r7, #23]
 8000ff0:	e006      	b.n	8001000 <HAL_UART_RxCpltCallback+0x34>
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
 8000ff4:	4a6a      	ldr	r2, [pc, #424]	; (80011a0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	54d1      	strb	r1, [r2, r3]
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	75fb      	strb	r3, [r7, #23]
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	2b63      	cmp	r3, #99	; 0x63
 8001004:	d9f5      	bls.n	8000ff2 <HAL_UART_RxCpltCallback+0x26>

	        //if received data different from ascii 13 (Carriage Return) continue storing data.
	        if (Rx_data[0] != 13)
 8001006:	4b67      	ldr	r3, [pc, #412]	; (80011a4 <HAL_UART_RxCpltCallback+0x1d8>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b0d      	cmp	r3, #13
 800100c:	d00b      	beq.n	8001026 <HAL_UART_RxCpltCallback+0x5a>
	            {
	        		Rx_Buffer[Rx_indx++]=Rx_data[0];    //add data to Rx_Buffer
 800100e:	4b63      	ldr	r3, [pc, #396]	; (800119c <HAL_UART_RxCpltCallback+0x1d0>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	b2d1      	uxtb	r1, r2
 8001016:	4a61      	ldr	r2, [pc, #388]	; (800119c <HAL_UART_RxCpltCallback+0x1d0>)
 8001018:	7011      	strb	r1, [r2, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	4b61      	ldr	r3, [pc, #388]	; (80011a4 <HAL_UART_RxCpltCallback+0x1d8>)
 800101e:	7819      	ldrb	r1, [r3, #0]
 8001020:	4b5f      	ldr	r3, [pc, #380]	; (80011a0 <HAL_UART_RxCpltCallback+0x1d4>)
 8001022:	5499      	strb	r1, [r3, r2]
 8001024:	e0af      	b.n	8001186 <HAL_UART_RxCpltCallback+0x1ba>


	        else  //the receiving is complete!
	            {
	        		 // Flag variables
	        	     Rx_indx=0;          //Reset the Rx index to start reading data from the beginning.
 8001026:	4b5d      	ldr	r3, [pc, #372]	; (800119c <HAL_UART_RxCpltCallback+0x1d0>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
	        	     retransition = TRUE;//For message in case usr tries to transition to the current state.
 800102c:	4b5e      	ldr	r3, [pc, #376]	; (80011a8 <HAL_UART_RxCpltCallback+0x1dc>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]
					 inv_flag = TRUE;    //For message about invalid command.
 8001032:	4b5e      	ldr	r3, [pc, #376]	; (80011ac <HAL_UART_RxCpltCallback+0x1e0>)
 8001034:	2201      	movs	r2, #1
 8001036:	601a      	str	r2, [r3, #0]
					 RxTxFlags |= 0x1;
 8001038:	4b5d      	ldr	r3, [pc, #372]	; (80011b0 <HAL_UART_RxCpltCallback+0x1e4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	4a5b      	ldr	r2, [pc, #364]	; (80011b0 <HAL_UART_RxCpltCallback+0x1e4>)
 8001042:	6013      	str	r3, [r2, #0]
					 success = TRUE;
 8001044:	2301      	movs	r3, #1
 8001046:	613b      	str	r3, [r7, #16]
	        		 // Pass Rx_Buffer to splitValues and look for spaces
	        		 // if data contains a command then checker = 1,
					 // if data contains a Marionette data packet then checker = 8
					 // MAR_DATA_CHECK contains the number of values for the data packet.
					 // EX: Testing MAR_DATA_CHECK = 8 (3F99 and 7 sensor values)
	        		  uint32_t checker = splitValues(Rx_Buffer, NULL);
 8001048:	2100      	movs	r1, #0
 800104a:	4855      	ldr	r0, [pc, #340]	; (80011a0 <HAL_UART_RxCpltCallback+0x1d4>)
 800104c:	f000 fe44 	bl	8001cd8 <splitValues>
 8001050:	60f8      	str	r0, [r7, #12]
	        		  if (checker == MAR_DATA_CHECK){
 8001052:	4b58      	ldr	r3, [pc, #352]	; (80011b4 <HAL_UART_RxCpltCallback+0x1e8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <HAL_UART_RxCpltCallback+0x98>

	        			  //send data packet to ring buffer
	        			  ringBuffer(Rx_Buffer);
 800105c:	4850      	ldr	r0, [pc, #320]	; (80011a0 <HAL_UART_RxCpltCallback+0x1d4>)
 800105e:	f001 f987 	bl	8002370 <ringBuffer>
 8001062:	e090      	b.n	8001186 <HAL_UART_RxCpltCallback+0x1ba>

	        	     }
	        		  else{
	        		  //Otherwise we have an user's command
	        		 // convert the hex command received into uint32_t
	        		 command =  hexadecimalTouint32(Rx_Buffer);
 8001064:	484e      	ldr	r0, [pc, #312]	; (80011a0 <HAL_UART_RxCpltCallback+0x1d4>)
 8001066:	f000 f8ef 	bl	8001248 <hexadecimalTouint32>
 800106a:	4603      	mov	r3, r0
 800106c:	4a52      	ldr	r2, [pc, #328]	; (80011b8 <HAL_UART_RxCpltCallback+0x1ec>)
 800106e:	6013      	str	r3, [r2, #0]

	                 // command variable contains the uint32 conversion from the hex command
	                 if(command ==state_status){
 8001070:	4b51      	ldr	r3, [pc, #324]	; (80011b8 <HAL_UART_RxCpltCallback+0x1ec>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b51      	ldr	r3, [pc, #324]	; (80011bc <HAL_UART_RxCpltCallback+0x1f0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	d103      	bne.n	8001084 <HAL_UART_RxCpltCallback+0xb8>
	                	 status= TRUE;
 800107c:	4b50      	ldr	r3, [pc, #320]	; (80011c0 <HAL_UART_RxCpltCallback+0x1f4>)
 800107e:	2201      	movs	r2, #1
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	e080      	b.n	8001186 <HAL_UART_RxCpltCallback+0x1ba>
	                 }
	                 else if (command ==  power_off || stop || valve_check || lox_fill || lox_chill || pressurizing || lox_pre_fill || ignition ||start_handler \
 8001084:	4b4c      	ldr	r3, [pc, #304]	; (80011b8 <HAL_UART_RxCpltCallback+0x1ec>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b4e      	ldr	r3, [pc, #312]	; (80011c4 <HAL_UART_RxCpltCallback+0x1f8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d077      	beq.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 8001090:	4b4d      	ldr	r3, [pc, #308]	; (80011c8 <HAL_UART_RxCpltCallback+0x1fc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d173      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 8001098:	4b4c      	ldr	r3, [pc, #304]	; (80011cc <HAL_UART_RxCpltCallback+0x200>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d16f      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 80010a0:	4b4b      	ldr	r3, [pc, #300]	; (80011d0 <HAL_UART_RxCpltCallback+0x204>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d16b      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 80010a8:	4b4a      	ldr	r3, [pc, #296]	; (80011d4 <HAL_UART_RxCpltCallback+0x208>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d167      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 80010b0:	4b49      	ldr	r3, [pc, #292]	; (80011d8 <HAL_UART_RxCpltCallback+0x20c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d163      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 80010b8:	4b48      	ldr	r3, [pc, #288]	; (80011dc <HAL_UART_RxCpltCallback+0x210>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d15f      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 80010c0:	4b47      	ldr	r3, [pc, #284]	; (80011e0 <HAL_UART_RxCpltCallback+0x214>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d15b      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 80010c8:	4b46      	ldr	r3, [pc, #280]	; (80011e4 <HAL_UART_RxCpltCallback+0x218>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d157      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
	             			|| cycle_valves || cycle_voff || IGON || IGOFF || SOV1ON || SOV1OFF || SOV2ON || SOV2OFF || SOV3ON || SOV3OFF || SOV4ON || SOV4OFF || SOV5ON || SOV5OFF ||\
 80010d0:	4b45      	ldr	r3, [pc, #276]	; (80011e8 <HAL_UART_RxCpltCallback+0x21c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d153      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 80010d8:	4b44      	ldr	r3, [pc, #272]	; (80011ec <HAL_UART_RxCpltCallback+0x220>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d14f      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 80010e0:	4b43      	ldr	r3, [pc, #268]	; (80011f0 <HAL_UART_RxCpltCallback+0x224>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d14b      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 80010e8:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <HAL_UART_RxCpltCallback+0x228>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d147      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 80010f0:	4b41      	ldr	r3, [pc, #260]	; (80011f8 <HAL_UART_RxCpltCallback+0x22c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d143      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 80010f8:	4b40      	ldr	r3, [pc, #256]	; (80011fc <HAL_UART_RxCpltCallback+0x230>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d13f      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 8001100:	4b3f      	ldr	r3, [pc, #252]	; (8001200 <HAL_UART_RxCpltCallback+0x234>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d13b      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 8001108:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <HAL_UART_RxCpltCallback+0x238>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d137      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 8001110:	4b3d      	ldr	r3, [pc, #244]	; (8001208 <HAL_UART_RxCpltCallback+0x23c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d133      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 8001118:	4b3c      	ldr	r3, [pc, #240]	; (800120c <HAL_UART_RxCpltCallback+0x240>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d12f      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 8001120:	4b3b      	ldr	r3, [pc, #236]	; (8001210 <HAL_UART_RxCpltCallback+0x244>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d12b      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 8001128:	4b3a      	ldr	r3, [pc, #232]	; (8001214 <HAL_UART_RxCpltCallback+0x248>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d127      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 8001130:	4b39      	ldr	r3, [pc, #228]	; (8001218 <HAL_UART_RxCpltCallback+0x24c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d123      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 8001138:	4b38      	ldr	r3, [pc, #224]	; (800121c <HAL_UART_RxCpltCallback+0x250>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d11f      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 8001140:	4b37      	ldr	r3, [pc, #220]	; (8001220 <HAL_UART_RxCpltCallback+0x254>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d11b      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
	             			 SOV6ON || SOV6OFF || SOV7ON || SOV7OFF || SOV8ON || SOV8OFF || SOV9ON || SOV9OFF ){
 8001148:	4b36      	ldr	r3, [pc, #216]	; (8001224 <HAL_UART_RxCpltCallback+0x258>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d117      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 8001150:	4b35      	ldr	r3, [pc, #212]	; (8001228 <HAL_UART_RxCpltCallback+0x25c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d113      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 8001158:	4b34      	ldr	r3, [pc, #208]	; (800122c <HAL_UART_RxCpltCallback+0x260>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10f      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 8001160:	4b33      	ldr	r3, [pc, #204]	; (8001230 <HAL_UART_RxCpltCallback+0x264>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d10b      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 8001168:	4b32      	ldr	r3, [pc, #200]	; (8001234 <HAL_UART_RxCpltCallback+0x268>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d107      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 8001170:	4b31      	ldr	r3, [pc, #196]	; (8001238 <HAL_UART_RxCpltCallback+0x26c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d103      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x1b4>
 8001178:	4b30      	ldr	r3, [pc, #192]	; (800123c <HAL_UART_RxCpltCallback+0x270>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <HAL_UART_RxCpltCallback+0x1ba>

	                	 cmd_flag = TRUE;// so that the transition to a state occur once and not re transition continuosly
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <HAL_UART_RxCpltCallback+0x274>)
 8001182:	2201      	movs	r2, #1
 8001184:	601a      	str	r2, [r3, #0]
	                 }
	              }//end of else for user command

	            }// end of else for receive complete

	        HAL_UART_Receive_IT(&huart2, Rx_data, 1);   //activate UART receive interrupt for ascii byte every time.
 8001186:	2201      	movs	r2, #1
 8001188:	4906      	ldr	r1, [pc, #24]	; (80011a4 <HAL_UART_RxCpltCallback+0x1d8>)
 800118a:	482e      	ldr	r0, [pc, #184]	; (8001244 <HAL_UART_RxCpltCallback+0x278>)
 800118c:	f005 f898 	bl	80062c0 <HAL_UART_Receive_IT>

	}// end of if  (huart->Instance == USART2)
}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40004400 	.word	0x40004400
 800119c:	20000190 	.word	0x20000190
 80011a0:	20001368 	.word	0x20001368
 80011a4:	20000228 	.word	0x20000228
 80011a8:	200013e0 	.word	0x200013e0
 80011ac:	20001250 	.word	0x20001250
 80011b0:	20000188 	.word	0x20000188
 80011b4:	20000000 	.word	0x20000000
 80011b8:	2000022c 	.word	0x2000022c
 80011bc:	2000002c 	.word	0x2000002c
 80011c0:	2000150c 	.word	0x2000150c
 80011c4:	20000004 	.word	0x20000004
 80011c8:	20000008 	.word	0x20000008
 80011cc:	2000000c 	.word	0x2000000c
 80011d0:	20000010 	.word	0x20000010
 80011d4:	20000014 	.word	0x20000014
 80011d8:	2000001c 	.word	0x2000001c
 80011dc:	20000018 	.word	0x20000018
 80011e0:	20000024 	.word	0x20000024
 80011e4:	20000028 	.word	0x20000028
 80011e8:	20000034 	.word	0x20000034
 80011ec:	20000038 	.word	0x20000038
 80011f0:	2000003c 	.word	0x2000003c
 80011f4:	20000040 	.word	0x20000040
 80011f8:	20000044 	.word	0x20000044
 80011fc:	20000048 	.word	0x20000048
 8001200:	2000004c 	.word	0x2000004c
 8001204:	20000050 	.word	0x20000050
 8001208:	20000054 	.word	0x20000054
 800120c:	20000058 	.word	0x20000058
 8001210:	2000005c 	.word	0x2000005c
 8001214:	20000060 	.word	0x20000060
 8001218:	20000064 	.word	0x20000064
 800121c:	20000068 	.word	0x20000068
 8001220:	2000006c 	.word	0x2000006c
 8001224:	20000070 	.word	0x20000070
 8001228:	20000074 	.word	0x20000074
 800122c:	20000078 	.word	0x20000078
 8001230:	2000007c 	.word	0x2000007c
 8001234:	20000080 	.word	0x20000080
 8001238:	20000084 	.word	0x20000084
 800123c:	20000088 	.word	0x20000088
 8001240:	2000125c 	.word	0x2000125c
 8001244:	2000145c 	.word	0x2000145c

08001248 <hexadecimalTouint32>:

//Convert HEX to uint32_t
uint32_t hexadecimalTouint32(char* hexVal)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	uint32_t len = strlen(hexVal);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7fe ffbd 	bl	80001d0 <strlen>
 8001256:	60b8      	str	r0, [r7, #8]

    // Initializing base value to 1 ( 16^0, 16^1, 16^2, etc )
     uint32_t base = 1;
 8001258:	2301      	movs	r3, #1
 800125a:	617b      	str	r3, [r7, #20]
     uint32_t val = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]

    // Extracting characters as digits from last character
    for (int i=len-1; i>=0; i--)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	3b01      	subs	r3, #1
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	e039      	b.n	80012dc <hexadecimalTouint32+0x94>
    {
        // if ASCII char is between (0-9)
        if (hexVal[i]>='0' && hexVal[i]<='9')
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b2f      	cmp	r3, #47	; 0x2f
 8001272:	d915      	bls.n	80012a0 <hexadecimalTouint32+0x58>
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b39      	cmp	r3, #57	; 0x39
 800127e:	d80f      	bhi.n	80012a0 <hexadecimalTouint32+0x58>
        {
            val += (hexVal[i] - 48)*base;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	3b30      	subs	r3, #48	; 0x30
 800128a:	461a      	mov	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fb03 f302 	mul.w	r3, r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4413      	add	r3, r2
 8001296:	613b      	str	r3, [r7, #16]

            // incrementing the base by power
            base = base * 16;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	e01a      	b.n	80012d6 <hexadecimalTouint32+0x8e>
        }

        // if ASCII char is between(A-F)
        else if (hexVal[i]>='A' && hexVal[i]<='F')
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b40      	cmp	r3, #64	; 0x40
 80012aa:	d914      	bls.n	80012d6 <hexadecimalTouint32+0x8e>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b46      	cmp	r3, #70	; 0x46
 80012b6:	d80e      	bhi.n	80012d6 <hexadecimalTouint32+0x8e>
        {
            val += (hexVal[i] - 55)*base;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	3b37      	subs	r3, #55	; 0x37
 80012c2:	461a      	mov	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fb03 f302 	mul.w	r3, r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4413      	add	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]

            // incrementing the base by power
            base = base*16;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	617b      	str	r3, [r7, #20]
    for (int i=len-1; i>=0; i--)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3b01      	subs	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	dac2      	bge.n	8001268 <hexadecimalTouint32+0x20>
        }
    }
    return val;
 80012e2:	693b      	ldr	r3, [r7, #16]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <ProcessCommands>:

//Function to process the command messages
uint32_t ProcessCommands(struct StateVars * ctrl)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]

	// LOX_PRE_FILL command
	if((ctrl->currentState == START_HANDLER) && command == lox_pre_fill )
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d112      	bne.n	8001328 <ProcessCommands+0x3c>
 8001302:	4ba0      	ldr	r3, [pc, #640]	; (8001584 <ProcessCommands+0x298>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4ba0      	ldr	r3, [pc, #640]	; (8001588 <ProcessCommands+0x29c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d10c      	bne.n	8001328 <ProcessCommands+0x3c>
	{
		ctrl ->currentState = LOX_PRE_FILL;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2202      	movs	r2, #2
 8001312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 8001316:	2301      	movs	r3, #1
 8001318:	60fb      	str	r3, [r7, #12]
		RxTxFlags &= !RX_DATA_READY;
 800131a:	4b9c      	ldr	r3, [pc, #624]	; (800158c <ProcessCommands+0x2a0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4b9b      	ldr	r3, [pc, #620]	; (800158c <ProcessCommands+0x2a0>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	f000 bc9d 	b.w	8001c62 <ProcessCommands+0x976>
	}
    // TURN_OFF command
	else if((command == power_off) && (ctrl->currentState== VALVE_CHECK || \
 8001328:	4b96      	ldr	r3, [pc, #600]	; (8001584 <ProcessCommands+0x298>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b98      	ldr	r3, [pc, #608]	; (8001590 <ProcessCommands+0x2a4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d116      	bne.n	8001362 <ProcessCommands+0x76>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800133a:	2b01      	cmp	r3, #1
 800133c:	d004      	beq.n	8001348 <ProcessCommands+0x5c>
			 ctrl->currentState == SAFETY))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == power_off) && (ctrl->currentState== VALVE_CHECK || \
 8001344:	2b05      	cmp	r3, #5
 8001346:	d10c      	bne.n	8001362 <ProcessCommands+0x76>
	{
		ctrl ->currentState = TURN_OFF;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	220b      	movs	r2, #11
 800134c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 8001350:	2301      	movs	r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
		RxTxFlags &= !RX_DATA_READY;
 8001354:	4b8d      	ldr	r3, [pc, #564]	; (800158c <ProcessCommands+0x2a0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4b8c      	ldr	r3, [pc, #560]	; (800158c <ProcessCommands+0x2a0>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	f000 bc80 	b.w	8001c62 <ProcessCommands+0x976>
	}
    // STOP command
	else if((command == stop) && ( ctrl->currentState== LOX_PRE_FILL || \
 8001362:	4b88      	ldr	r3, [pc, #544]	; (8001584 <ProcessCommands+0x298>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b8b      	ldr	r3, [pc, #556]	; (8001594 <ProcessCommands+0x2a8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d120      	bne.n	80013b0 <ProcessCommands+0xc4>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001374:	2b02      	cmp	r3, #2
 8001376:	d00e      	beq.n	8001396 <ProcessCommands+0xaa>
			  ctrl->currentState == LOX_CHILL|| \
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == stop) && ( ctrl->currentState== LOX_PRE_FILL || \
 800137e:	2b04      	cmp	r3, #4
 8001380:	d009      	beq.n	8001396 <ProcessCommands+0xaa>
			  ctrl->currentState == LOX_FILL 	|| \
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
			  ctrl->currentState == LOX_CHILL|| \
 8001388:	2b03      	cmp	r3, #3
 800138a:	d004      	beq.n	8001396 <ProcessCommands+0xaa>
			  /*ctrl->currentState == VALVE_CHECK|| \*/ //dont want valve_check to end up in safety
			  ctrl->currentState == START_HANDLER) )
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
			  ctrl->currentState == LOX_FILL 	|| \
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10c      	bne.n	80013b0 <ProcessCommands+0xc4>
	{
		ctrl->currentState = SAFETY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2205      	movs	r2, #5
 800139a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 800139e:	2301      	movs	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 80013a2:	4b7a      	ldr	r3, [pc, #488]	; (800158c <ProcessCommands+0x2a0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4b79      	ldr	r3, [pc, #484]	; (800158c <ProcessCommands+0x2a0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	f000 bc59 	b.w	8001c62 <ProcessCommands+0x976>
	}

	// LOX_FILL command
	else if(( ctrl->currentState == LOX_PRE_FILL) && (command == lox_fill))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d112      	bne.n	80013e0 <ProcessCommands+0xf4>
 80013ba:	4b72      	ldr	r3, [pc, #456]	; (8001584 <ProcessCommands+0x298>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b76      	ldr	r3, [pc, #472]	; (8001598 <ProcessCommands+0x2ac>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d10c      	bne.n	80013e0 <ProcessCommands+0xf4>
	{
		ctrl->currentState = LOX_FILL;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2203      	movs	r2, #3
 80013ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 80013ce:	2301      	movs	r3, #1
 80013d0:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 80013d2:	4b6e      	ldr	r3, [pc, #440]	; (800158c <ProcessCommands+0x2a0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4b6d      	ldr	r3, [pc, #436]	; (800158c <ProcessCommands+0x2a0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	f000 bc41 	b.w	8001c62 <ProcessCommands+0x976>
	}
    // LOX_FILL command
	else if((ctrl->currentState == LOX_FILL) && (command == lox_chill))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d112      	bne.n	8001410 <ProcessCommands+0x124>
 80013ea:	4b66      	ldr	r3, [pc, #408]	; (8001584 <ProcessCommands+0x298>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4b6b      	ldr	r3, [pc, #428]	; (800159c <ProcessCommands+0x2b0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d10c      	bne.n	8001410 <ProcessCommands+0x124>
	{
		ctrl->currentState = LOX_CHILL;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2204      	movs	r2, #4
 80013fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 80013fe:	2301      	movs	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 8001402:	4b62      	ldr	r3, [pc, #392]	; (800158c <ProcessCommands+0x2a0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4b61      	ldr	r3, [pc, #388]	; (800158c <ProcessCommands+0x2a0>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	f000 bc29 	b.w	8001c62 <ProcessCommands+0x976>
	}
    // LOX_CHILL command
	else if(( ctrl->currentState == LOX_CHILL) && (command == safety))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001416:	2b04      	cmp	r3, #4
 8001418:	d112      	bne.n	8001440 <ProcessCommands+0x154>
 800141a:	4b5a      	ldr	r3, [pc, #360]	; (8001584 <ProcessCommands+0x298>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b60      	ldr	r3, [pc, #384]	; (80015a0 <ProcessCommands+0x2b4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d10c      	bne.n	8001440 <ProcessCommands+0x154>
	{
		ctrl->currentState = SAFETY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2205      	movs	r2, #5
 800142a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 800142e:	2301      	movs	r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 8001432:	4b56      	ldr	r3, [pc, #344]	; (800158c <ProcessCommands+0x2a0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4b55      	ldr	r3, [pc, #340]	; (800158c <ProcessCommands+0x2a0>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	f000 bc11 	b.w	8001c62 <ProcessCommands+0x976>
	}
    // VALVE_CHECK command
	else if(( ctrl->currentState == START_HANDLER ) && (command == valve_check))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001446:	2b00      	cmp	r3, #0
 8001448:	d111      	bne.n	800146e <ProcessCommands+0x182>
 800144a:	4b4e      	ldr	r3, [pc, #312]	; (8001584 <ProcessCommands+0x298>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	4b55      	ldr	r3, [pc, #340]	; (80015a4 <ProcessCommands+0x2b8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d10b      	bne.n	800146e <ProcessCommands+0x182>
	{
		ctrl->currentState = VALVE_CHECK;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 800145e:	2301      	movs	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <ProcessCommands+0x2a0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4b49      	ldr	r3, [pc, #292]	; (800158c <ProcessCommands+0x2a0>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	e3f9      	b.n	8001c62 <ProcessCommands+0x976>
	}

    // PRESSURIZE command
	else if((ctrl->currentState == SAFETY) && (command == pressurizing))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001474:	2b05      	cmp	r3, #5
 8001476:	d111      	bne.n	800149c <ProcessCommands+0x1b0>
 8001478:	4b42      	ldr	r3, [pc, #264]	; (8001584 <ProcessCommands+0x298>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b4a      	ldr	r3, [pc, #296]	; (80015a8 <ProcessCommands+0x2bc>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d10b      	bne.n	800149c <ProcessCommands+0x1b0>
	{
		ctrl->currentState = PRESSURIZE;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2206      	movs	r2, #6
 8001488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 800148c:	2301      	movs	r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 8001490:	4b3e      	ldr	r3, [pc, #248]	; (800158c <ProcessCommands+0x2a0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4b3d      	ldr	r3, [pc, #244]	; (800158c <ProcessCommands+0x2a0>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	e3e2      	b.n	8001c62 <ProcessCommands+0x976>
	}
    // IGNITION command
	else if((ctrl->currentState == PRESSURIZE) && (command == ignition))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d111      	bne.n	80014ca <ProcessCommands+0x1de>
 80014a6:	4b37      	ldr	r3, [pc, #220]	; (8001584 <ProcessCommands+0x298>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b40      	ldr	r3, [pc, #256]	; (80015ac <ProcessCommands+0x2c0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d10b      	bne.n	80014ca <ProcessCommands+0x1de>
	{
		ctrl->currentState = IGNITION; //START of the FSM
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2207      	movs	r2, #7
 80014b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 80014ba:	2301      	movs	r3, #1
 80014bc:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 80014be:	4b33      	ldr	r3, [pc, #204]	; (800158c <ProcessCommands+0x2a0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4b32      	ldr	r3, [pc, #200]	; (800158c <ProcessCommands+0x2a0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	e3cb      	b.n	8001c62 <ProcessCommands+0x976>
	}


	//State status
	else if((command ==state_status) && (
 80014ca:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <ProcessCommands+0x298>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4b38      	ldr	r3, [pc, #224]	; (80015b0 <ProcessCommands+0x2c4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d132      	bne.n	800153c <ProcessCommands+0x250>
				  ctrl->currentState == START_HANDLER || \
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command ==state_status) && (
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d022      	beq.n	8001526 <ProcessCommands+0x23a>
				  ctrl->currentState == LOX_PRE_FILL || \
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == START_HANDLER || \
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d01d      	beq.n	8001526 <ProcessCommands+0x23a>
				  ctrl->currentState == LOX_CHILL|| \
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == LOX_PRE_FILL || \
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d018      	beq.n	8001526 <ProcessCommands+0x23a>
				  ctrl->currentState == LOX_FILL 	|| \
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == LOX_CHILL|| \
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d013      	beq.n	8001526 <ProcessCommands+0x23a>
				  ctrl->currentState == VALVE_CHECK|| \
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == LOX_FILL 	|| \
 8001504:	2b01      	cmp	r3, #1
 8001506:	d00e      	beq.n	8001526 <ProcessCommands+0x23a>
				  ctrl->currentState == PRESSURIZE  ||   \
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == VALVE_CHECK|| \
 800150e:	2b06      	cmp	r3, #6
 8001510:	d009      	beq.n	8001526 <ProcessCommands+0x23a>
				  ctrl->currentState == TURN_OFF || \
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == PRESSURIZE  ||   \
 8001518:	2b0b      	cmp	r3, #11
 800151a:	d004      	beq.n	8001526 <ProcessCommands+0x23a>
				  ctrl->currentState == SAFETY \
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == TURN_OFF || \
 8001522:	2b05      	cmp	r3, #5
 8001524:	d10a      	bne.n	800153c <ProcessCommands+0x250>
				  ))
		{

		    StateStatus(ctrl);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f001 fbc2 	bl	8002cb0 <StateStatus>
			success = TRUE;
 800152c:	2301      	movs	r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
			// Clear data read flag
			RxTxFlags &= !RX_DATA_READY;
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <ProcessCommands+0x2a0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <ProcessCommands+0x2a0>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e392      	b.n	8001c62 <ProcessCommands+0x976>
		}
	// Handling invalid transitions
	else if ((command == stop) && (ctrl->currentState==VALVE_CHECK || ctrl->currentState == START_HANDLER)){
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <ProcessCommands+0x298>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <ProcessCommands+0x2a8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d13b      	bne.n	80015c0 <ProcessCommands+0x2d4>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800154e:	2b01      	cmp	r3, #1
 8001550:	d004      	beq.n	800155c <ProcessCommands+0x270>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001558:	2b00      	cmp	r3, #0
 800155a:	d131      	bne.n	80015c0 <ProcessCommands+0x2d4>
					if (cmd_flag)
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <ProcessCommands+0x2c8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <ProcessCommands+0x286>
				 	  {
				 	 	  UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 8001564:	4914      	ldr	r1, [pc, #80]	; (80015b8 <ProcessCommands+0x2cc>)
 8001566:	4815      	ldr	r0, [pc, #84]	; (80015bc <ProcessCommands+0x2d0>)
 8001568:	f7ff fcec 	bl	8000f44 <UART_SendMessage>
				 	 	  cmd_flag = FALSE;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <ProcessCommands+0x2c8>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
				 	 }
						success = TRUE;
 8001572:	2301      	movs	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
						// Clear data read flag
						RxTxFlags &= !RX_DATA_READY;
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <ProcessCommands+0x2a0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <ProcessCommands+0x2a0>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	e36f      	b.n	8001c62 <ProcessCommands+0x976>
 8001582:	bf00      	nop
 8001584:	2000022c 	.word	0x2000022c
 8001588:	20000018 	.word	0x20000018
 800158c:	20000188 	.word	0x20000188
 8001590:	20000004 	.word	0x20000004
 8001594:	20000008 	.word	0x20000008
 8001598:	20000010 	.word	0x20000010
 800159c:	20000014 	.word	0x20000014
 80015a0:	20000020 	.word	0x20000020
 80015a4:	2000000c 	.word	0x2000000c
 80015a8:	2000001c 	.word	0x2000001c
 80015ac:	20000024 	.word	0x20000024
 80015b0:	2000002c 	.word	0x2000002c
 80015b4:	2000125c 	.word	0x2000125c
 80015b8:	0800799c 	.word	0x0800799c
 80015bc:	2000145c 	.word	0x2000145c
		}
	else if((command == lox_fill) && (
 80015c0:	4ba2      	ldr	r3, [pc, #648]	; (800184c <ProcessCommands+0x560>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4ba2      	ldr	r3, [pc, #648]	; (8001850 <ProcessCommands+0x564>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d130      	bne.n	800162e <ProcessCommands+0x342>
					  ctrl->currentState == START_HANDLER|| \
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == lox_fill) && (
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d018      	beq.n	8001608 <ProcessCommands+0x31c>
					  ctrl->currentState == LOX_CHILL	|| \
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == START_HANDLER|| \
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d013      	beq.n	8001608 <ProcessCommands+0x31c>
					  ctrl->currentState == VALVE_CHECK|| \
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == LOX_CHILL	|| \
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d00e      	beq.n	8001608 <ProcessCommands+0x31c>
					  ctrl->currentState == PRESSURIZE  ||   \
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == VALVE_CHECK|| \
 80015f0:	2b06      	cmp	r3, #6
 80015f2:	d009      	beq.n	8001608 <ProcessCommands+0x31c>
					  ctrl->currentState == TURN_OFF || \
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == PRESSURIZE  ||   \
 80015fa:	2b0b      	cmp	r3, #11
 80015fc:	d004      	beq.n	8001608 <ProcessCommands+0x31c>
					  ctrl->currentState == SAFETY \
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == TURN_OFF || \
 8001604:	2b05      	cmp	r3, #5
 8001606:	d112      	bne.n	800162e <ProcessCommands+0x342>
					  )){

					if (cmd_flag)
 8001608:	4b92      	ldr	r3, [pc, #584]	; (8001854 <ProcessCommands+0x568>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <ProcessCommands+0x332>
		 	 	 	 	 {
		 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 8001610:	4991      	ldr	r1, [pc, #580]	; (8001858 <ProcessCommands+0x56c>)
 8001612:	4892      	ldr	r0, [pc, #584]	; (800185c <ProcessCommands+0x570>)
 8001614:	f7ff fc96 	bl	8000f44 <UART_SendMessage>
		 	 	 		 	cmd_flag = FALSE;
 8001618:	4b8e      	ldr	r3, [pc, #568]	; (8001854 <ProcessCommands+0x568>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
		 	 	 	 	 }
				success = TRUE;
 800161e:	2301      	movs	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
				// Clear data read flag
				RxTxFlags &= !RX_DATA_READY;
 8001622:	4b8f      	ldr	r3, [pc, #572]	; (8001860 <ProcessCommands+0x574>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4b8e      	ldr	r3, [pc, #568]	; (8001860 <ProcessCommands+0x574>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	e319      	b.n	8001c62 <ProcessCommands+0x976>
			}
	else if((command == lox_chill) && (
 800162e:	4b87      	ldr	r3, [pc, #540]	; (800184c <ProcessCommands+0x560>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b8c      	ldr	r3, [pc, #560]	; (8001864 <ProcessCommands+0x578>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d130      	bne.n	800169c <ProcessCommands+0x3b0>
						  ctrl->currentState == START_HANDLER|| \
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == lox_chill) && (
 8001640:	2b00      	cmp	r3, #0
 8001642:	d018      	beq.n	8001676 <ProcessCommands+0x38a>
						  ctrl->currentState == LOX_PRE_FILL	|| \
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == START_HANDLER|| \
 800164a:	2b02      	cmp	r3, #2
 800164c:	d013      	beq.n	8001676 <ProcessCommands+0x38a>
						  ctrl->currentState == VALVE_CHECK|| \
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_PRE_FILL	|| \
 8001654:	2b01      	cmp	r3, #1
 8001656:	d00e      	beq.n	8001676 <ProcessCommands+0x38a>
						  ctrl->currentState == PRESSURIZE  ||   \
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == VALVE_CHECK|| \
 800165e:	2b06      	cmp	r3, #6
 8001660:	d009      	beq.n	8001676 <ProcessCommands+0x38a>
						  ctrl->currentState == TURN_OFF || \
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == PRESSURIZE  ||   \
 8001668:	2b0b      	cmp	r3, #11
 800166a:	d004      	beq.n	8001676 <ProcessCommands+0x38a>
						  ctrl->currentState == SAFETY \
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == TURN_OFF || \
 8001672:	2b05      	cmp	r3, #5
 8001674:	d112      	bne.n	800169c <ProcessCommands+0x3b0>
						  ))
				{

							if (cmd_flag)
 8001676:	4b77      	ldr	r3, [pc, #476]	; (8001854 <ProcessCommands+0x568>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d006      	beq.n	800168c <ProcessCommands+0x3a0>
				 	 	 	 	 {
				 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 800167e:	4976      	ldr	r1, [pc, #472]	; (8001858 <ProcessCommands+0x56c>)
 8001680:	4876      	ldr	r0, [pc, #472]	; (800185c <ProcessCommands+0x570>)
 8001682:	f7ff fc5f 	bl	8000f44 <UART_SendMessage>
				 	 	 		 	cmd_flag = FALSE;
 8001686:	4b73      	ldr	r3, [pc, #460]	; (8001854 <ProcessCommands+0x568>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
				 	 	 	 	 }
					success = TRUE;
 800168c:	2301      	movs	r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
					// Clear data read flag
					RxTxFlags &= !RX_DATA_READY;
 8001690:	4b73      	ldr	r3, [pc, #460]	; (8001860 <ProcessCommands+0x574>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4b72      	ldr	r3, [pc, #456]	; (8001860 <ProcessCommands+0x574>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e2e2      	b.n	8001c62 <ProcessCommands+0x976>
				}
	else if((command == safety) && (
 800169c:	4b6b      	ldr	r3, [pc, #428]	; (800184c <ProcessCommands+0x560>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b71      	ldr	r3, [pc, #452]	; (8001868 <ProcessCommands+0x57c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d130      	bne.n	800170a <ProcessCommands+0x41e>
						  ctrl->currentState == START_HANDLER|| \
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == safety) && (
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d018      	beq.n	80016e4 <ProcessCommands+0x3f8>
						  ctrl->currentState == LOX_FILL	|| \
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == START_HANDLER|| \
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d013      	beq.n	80016e4 <ProcessCommands+0x3f8>
						  ctrl->currentState == VALVE_CHECK|| \
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_FILL	|| \
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d00e      	beq.n	80016e4 <ProcessCommands+0x3f8>
						  ctrl->currentState == PRESSURIZE  ||   \
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == VALVE_CHECK|| \
 80016cc:	2b06      	cmp	r3, #6
 80016ce:	d009      	beq.n	80016e4 <ProcessCommands+0x3f8>
						  ctrl->currentState == TURN_OFF ||\
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == PRESSURIZE  ||   \
 80016d6:	2b0b      	cmp	r3, #11
 80016d8:	d004      	beq.n	80016e4 <ProcessCommands+0x3f8>
						  ctrl->currentState == LOX_PRE_FILL \
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == TURN_OFF ||\
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d112      	bne.n	800170a <ProcessCommands+0x41e>
						  ))
				{
						if (cmd_flag)
 80016e4:	4b5b      	ldr	r3, [pc, #364]	; (8001854 <ProcessCommands+0x568>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <ProcessCommands+0x40e>
				 	 	 	 	 {
				 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 80016ec:	495a      	ldr	r1, [pc, #360]	; (8001858 <ProcessCommands+0x56c>)
 80016ee:	485b      	ldr	r0, [pc, #364]	; (800185c <ProcessCommands+0x570>)
 80016f0:	f7ff fc28 	bl	8000f44 <UART_SendMessage>
				 	 	 		 	cmd_flag = FALSE;
 80016f4:	4b57      	ldr	r3, [pc, #348]	; (8001854 <ProcessCommands+0x568>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
				 	 	 	 	 }
					success = TRUE;
 80016fa:	2301      	movs	r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]
					// Clear data read flag
					RxTxFlags &= !RX_DATA_READY;
 80016fe:	4b58      	ldr	r3, [pc, #352]	; (8001860 <ProcessCommands+0x574>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4b57      	ldr	r3, [pc, #348]	; (8001860 <ProcessCommands+0x574>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	e2ab      	b.n	8001c62 <ProcessCommands+0x976>
				}
	else if((command == valve_check) && (
 800170a:	4b50      	ldr	r3, [pc, #320]	; (800184c <ProcessCommands+0x560>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4b57      	ldr	r3, [pc, #348]	; (800186c <ProcessCommands+0x580>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d130      	bne.n	8001778 <ProcessCommands+0x48c>
						  ctrl->currentState == LOX_PRE_FILL|| \
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == valve_check) && (
 800171c:	2b02      	cmp	r3, #2
 800171e:	d018      	beq.n	8001752 <ProcessCommands+0x466>
						  ctrl->currentState == LOX_CHILL	|| \
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_PRE_FILL|| \
 8001726:	2b04      	cmp	r3, #4
 8001728:	d013      	beq.n	8001752 <ProcessCommands+0x466>
						  ctrl->currentState == LOX_FILL|| \
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_CHILL	|| \
 8001730:	2b03      	cmp	r3, #3
 8001732:	d00e      	beq.n	8001752 <ProcessCommands+0x466>
						  ctrl->currentState == PRESSURIZE  ||   \
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_FILL|| \
 800173a:	2b06      	cmp	r3, #6
 800173c:	d009      	beq.n	8001752 <ProcessCommands+0x466>
						  ctrl->currentState == TURN_OFF || \
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == PRESSURIZE  ||   \
 8001744:	2b0b      	cmp	r3, #11
 8001746:	d004      	beq.n	8001752 <ProcessCommands+0x466>
						  ctrl->currentState == SAFETY \
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == TURN_OFF || \
 800174e:	2b05      	cmp	r3, #5
 8001750:	d112      	bne.n	8001778 <ProcessCommands+0x48c>
						  ))
				{
						if (cmd_flag)
 8001752:	4b40      	ldr	r3, [pc, #256]	; (8001854 <ProcessCommands+0x568>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <ProcessCommands+0x47c>
				 	 	 	 	 {
				 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 800175a:	493f      	ldr	r1, [pc, #252]	; (8001858 <ProcessCommands+0x56c>)
 800175c:	483f      	ldr	r0, [pc, #252]	; (800185c <ProcessCommands+0x570>)
 800175e:	f7ff fbf1 	bl	8000f44 <UART_SendMessage>
				 	 	 		 	cmd_flag = FALSE;
 8001762:	4b3c      	ldr	r3, [pc, #240]	; (8001854 <ProcessCommands+0x568>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
				 	 	 	 	 }
					success = TRUE;
 8001768:	2301      	movs	r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
					// Clear data read flag
					RxTxFlags &= !RX_DATA_READY;
 800176c:	4b3c      	ldr	r3, [pc, #240]	; (8001860 <ProcessCommands+0x574>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4b3b      	ldr	r3, [pc, #236]	; (8001860 <ProcessCommands+0x574>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	e274      	b.n	8001c62 <ProcessCommands+0x976>

				}
	else if((command == lox_pre_fill) && (
 8001778:	4b34      	ldr	r3, [pc, #208]	; (800184c <ProcessCommands+0x560>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b3c      	ldr	r3, [pc, #240]	; (8001870 <ProcessCommands+0x584>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d130      	bne.n	80017e6 <ProcessCommands+0x4fa>
							  ctrl->currentState == LOX_CHILL || \
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == lox_pre_fill) && (
 800178a:	2b04      	cmp	r3, #4
 800178c:	d018      	beq.n	80017c0 <ProcessCommands+0x4d4>
							  ctrl->currentState == SAFETY|| \
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == LOX_CHILL || \
 8001794:	2b05      	cmp	r3, #5
 8001796:	d013      	beq.n	80017c0 <ProcessCommands+0x4d4>
							  ctrl->currentState == LOX_FILL	|| \
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == SAFETY|| \
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d00e      	beq.n	80017c0 <ProcessCommands+0x4d4>
							  ctrl->currentState == VALVE_CHECK|| \
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == LOX_FILL	|| \
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d009      	beq.n	80017c0 <ProcessCommands+0x4d4>
							  ctrl->currentState == PRESSURIZE  ||   \
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == VALVE_CHECK|| \
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d004      	beq.n	80017c0 <ProcessCommands+0x4d4>
							  ctrl->currentState == TURN_OFF ))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == PRESSURIZE  ||   \
 80017bc:	2b0b      	cmp	r3, #11
 80017be:	d112      	bne.n	80017e6 <ProcessCommands+0x4fa>
					{
							if (cmd_flag)
 80017c0:	4b24      	ldr	r3, [pc, #144]	; (8001854 <ProcessCommands+0x568>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d006      	beq.n	80017d6 <ProcessCommands+0x4ea>
					 	 	 	 	 {
					 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 80017c8:	4923      	ldr	r1, [pc, #140]	; (8001858 <ProcessCommands+0x56c>)
 80017ca:	4824      	ldr	r0, [pc, #144]	; (800185c <ProcessCommands+0x570>)
 80017cc:	f7ff fbba 	bl	8000f44 <UART_SendMessage>
					 	 	 		 	cmd_flag = FALSE;
 80017d0:	4b20      	ldr	r3, [pc, #128]	; (8001854 <ProcessCommands+0x568>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
					 	 	 	 	 }
						success = TRUE;
 80017d6:	2301      	movs	r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
						// Clear data read flag
						RxTxFlags &= !RX_DATA_READY;
 80017da:	4b21      	ldr	r3, [pc, #132]	; (8001860 <ProcessCommands+0x574>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <ProcessCommands+0x574>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	e23d      	b.n	8001c62 <ProcessCommands+0x976>
					}
	else if((command == pressurizing) && (
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <ProcessCommands+0x560>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b22      	ldr	r3, [pc, #136]	; (8001874 <ProcessCommands+0x588>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d142      	bne.n	8001878 <ProcessCommands+0x58c>
								  ctrl->currentState == LOX_PRE_FILL || \
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == pressurizing) && (
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d013      	beq.n	8001824 <ProcessCommands+0x538>
								  ctrl->currentState == LOX_CHILL || \
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == LOX_PRE_FILL || \
 8001802:	2b04      	cmp	r3, #4
 8001804:	d00e      	beq.n	8001824 <ProcessCommands+0x538>
								  ctrl->currentState == LOX_FILL	|| \
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == LOX_CHILL || \
 800180c:	2b03      	cmp	r3, #3
 800180e:	d009      	beq.n	8001824 <ProcessCommands+0x538>
								  ctrl->currentState == VALVE_CHECK|| \
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == LOX_FILL	|| \
 8001816:	2b01      	cmp	r3, #1
 8001818:	d004      	beq.n	8001824 <ProcessCommands+0x538>
								  ctrl->currentState == TURN_OFF ))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == VALVE_CHECK|| \
 8001820:	2b0b      	cmp	r3, #11
 8001822:	d129      	bne.n	8001878 <ProcessCommands+0x58c>
						{
								if (cmd_flag)
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <ProcessCommands+0x568>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d006      	beq.n	800183a <ProcessCommands+0x54e>
						 	 	 	 	 {
						 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 800182c:	490a      	ldr	r1, [pc, #40]	; (8001858 <ProcessCommands+0x56c>)
 800182e:	480b      	ldr	r0, [pc, #44]	; (800185c <ProcessCommands+0x570>)
 8001830:	f7ff fb88 	bl	8000f44 <UART_SendMessage>
						 	 	 		 	cmd_flag = FALSE;
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <ProcessCommands+0x568>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
						 	 	 	 	 }
							success = TRUE;
 800183a:	2301      	movs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
							// Clear data read flag
							RxTxFlags &= !RX_DATA_READY;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <ProcessCommands+0x574>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <ProcessCommands+0x574>)
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	e20b      	b.n	8001c62 <ProcessCommands+0x976>
 800184a:	bf00      	nop
 800184c:	2000022c 	.word	0x2000022c
 8001850:	20000010 	.word	0x20000010
 8001854:	2000125c 	.word	0x2000125c
 8001858:	0800799c 	.word	0x0800799c
 800185c:	2000145c 	.word	0x2000145c
 8001860:	20000188 	.word	0x20000188
 8001864:	20000014 	.word	0x20000014
 8001868:	20000020 	.word	0x20000020
 800186c:	2000000c 	.word	0x2000000c
 8001870:	20000018 	.word	0x20000018
 8001874:	2000001c 	.word	0x2000001c
						}

	//Handle trying to transition to the same state
	else if ((command == lox_pre_fill && ctrl->currentState == LOX_PRE_FILL)||\
 8001878:	4b84      	ldr	r3, [pc, #528]	; (8001a8c <ProcessCommands+0x7a0>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b84      	ldr	r3, [pc, #528]	; (8001a90 <ProcessCommands+0x7a4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d104      	bne.n	800188e <ProcessCommands+0x5a2>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800188a:	2b02      	cmp	r3, #2
 800188c:	d04c      	beq.n	8001928 <ProcessCommands+0x63c>
			 (command == lox_fill && ctrl->currentState == LOX_FILL)|| \
 800188e:	4b7f      	ldr	r3, [pc, #508]	; (8001a8c <ProcessCommands+0x7a0>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4b80      	ldr	r3, [pc, #512]	; (8001a94 <ProcessCommands+0x7a8>)
 8001894:	681b      	ldr	r3, [r3, #0]
	else if ((command == lox_pre_fill && ctrl->currentState == LOX_PRE_FILL)||\
 8001896:	429a      	cmp	r2, r3
 8001898:	d104      	bne.n	80018a4 <ProcessCommands+0x5b8>
			 (command == lox_fill && ctrl->currentState == LOX_FILL)|| \
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d041      	beq.n	8001928 <ProcessCommands+0x63c>
			 (command == lox_chill && ctrl->currentState == LOX_CHILL)||\
 80018a4:	4b79      	ldr	r3, [pc, #484]	; (8001a8c <ProcessCommands+0x7a0>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b7b      	ldr	r3, [pc, #492]	; (8001a98 <ProcessCommands+0x7ac>)
 80018aa:	681b      	ldr	r3, [r3, #0]
			 (command == lox_fill && ctrl->currentState == LOX_FILL)|| \
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d104      	bne.n	80018ba <ProcessCommands+0x5ce>
			 (command == lox_chill && ctrl->currentState == LOX_CHILL)||\
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d036      	beq.n	8001928 <ProcessCommands+0x63c>
			 (command == safety && ctrl->currentState == SAFETY)||\
 80018ba:	4b74      	ldr	r3, [pc, #464]	; (8001a8c <ProcessCommands+0x7a0>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	4b77      	ldr	r3, [pc, #476]	; (8001a9c <ProcessCommands+0x7b0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
			 (command == lox_chill && ctrl->currentState == LOX_CHILL)||\
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d104      	bne.n	80018d0 <ProcessCommands+0x5e4>
			 (command == safety && ctrl->currentState == SAFETY)||\
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d02b      	beq.n	8001928 <ProcessCommands+0x63c>
			 (command == valve_check && ctrl->currentState == VALVE_CHECK)||\
 80018d0:	4b6e      	ldr	r3, [pc, #440]	; (8001a8c <ProcessCommands+0x7a0>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b72      	ldr	r3, [pc, #456]	; (8001aa0 <ProcessCommands+0x7b4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
			 (command == safety && ctrl->currentState == SAFETY)||\
 80018d8:	429a      	cmp	r2, r3
 80018da:	d104      	bne.n	80018e6 <ProcessCommands+0x5fa>
			 (command == valve_check && ctrl->currentState == VALVE_CHECK)||\
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d020      	beq.n	8001928 <ProcessCommands+0x63c>
			 (command == pressurizing && ctrl->currentState == PRESSURIZE) ||\
 80018e6:	4b69      	ldr	r3, [pc, #420]	; (8001a8c <ProcessCommands+0x7a0>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4b6e      	ldr	r3, [pc, #440]	; (8001aa4 <ProcessCommands+0x7b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
			 (command == valve_check && ctrl->currentState == VALVE_CHECK)||\
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d104      	bne.n	80018fc <ProcessCommands+0x610>
			 (command == pressurizing && ctrl->currentState == PRESSURIZE) ||\
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018f8:	2b06      	cmp	r3, #6
 80018fa:	d015      	beq.n	8001928 <ProcessCommands+0x63c>
		     (command == stop && ctrl->currentState == SAFETY)||\
 80018fc:	4b63      	ldr	r3, [pc, #396]	; (8001a8c <ProcessCommands+0x7a0>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b69      	ldr	r3, [pc, #420]	; (8001aa8 <ProcessCommands+0x7bc>)
 8001902:	681b      	ldr	r3, [r3, #0]
			 (command == pressurizing && ctrl->currentState == PRESSURIZE) ||\
 8001904:	429a      	cmp	r2, r3
 8001906:	d104      	bne.n	8001912 <ProcessCommands+0x626>
		     (command == stop && ctrl->currentState == SAFETY)||\
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800190e:	2b05      	cmp	r3, #5
 8001910:	d00a      	beq.n	8001928 <ProcessCommands+0x63c>
			 (command == start_handler && ctrl->currentState == START_HANDLER)){
 8001912:	4b5e      	ldr	r3, [pc, #376]	; (8001a8c <ProcessCommands+0x7a0>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4b65      	ldr	r3, [pc, #404]	; (8001aac <ProcessCommands+0x7c0>)
 8001918:	681b      	ldr	r3, [r3, #0]
		     (command == stop && ctrl->currentState == SAFETY)||\
 800191a:	429a      	cmp	r2, r3
 800191c:	d116      	bne.n	800194c <ProcessCommands+0x660>
			 (command == start_handler && ctrl->currentState == START_HANDLER)){
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001924:	2b00      	cmp	r3, #0
 8001926:	d111      	bne.n	800194c <ProcessCommands+0x660>

								if (cmd_flag && retransition)
 8001928:	4b61      	ldr	r3, [pc, #388]	; (8001ab0 <ProcessCommands+0x7c4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 8197 	beq.w	8001c60 <ProcessCommands+0x974>
 8001932:	4b60      	ldr	r3, [pc, #384]	; (8001ab4 <ProcessCommands+0x7c8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8192 	beq.w	8001c60 <ProcessCommands+0x974>
						 	 	 	 	 {
						 	 	 		 	 UART_SendMessage(&huart2, " Currently in the state you are intending to transition to...\n");
 800193c:	495e      	ldr	r1, [pc, #376]	; (8001ab8 <ProcessCommands+0x7cc>)
 800193e:	485f      	ldr	r0, [pc, #380]	; (8001abc <ProcessCommands+0x7d0>)
 8001940:	f7ff fb00 	bl	8000f44 <UART_SendMessage>
						 	 	 		 	cmd_flag = FALSE;
 8001944:	4b5a      	ldr	r3, [pc, #360]	; (8001ab0 <ProcessCommands+0x7c4>)
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
								if (cmd_flag && retransition)
 800194a:	e189      	b.n	8001c60 <ProcessCommands+0x974>
						 	 	 	 	 }
	}

	//Handle the case of an unknown command
	else if (!(command == power_off || stop || valve_check || lox_fill || lox_chill || pressurizing || lox_pre_fill || ignition ||start_handler \
 800194c:	4b4f      	ldr	r3, [pc, #316]	; (8001a8c <ProcessCommands+0x7a0>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b5b      	ldr	r3, [pc, #364]	; (8001ac0 <ProcessCommands+0x7d4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	f000 80e7 	beq.w	8001b28 <ProcessCommands+0x83c>
 800195a:	4b53      	ldr	r3, [pc, #332]	; (8001aa8 <ProcessCommands+0x7bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	f040 80e2 	bne.w	8001b28 <ProcessCommands+0x83c>
 8001964:	4b4e      	ldr	r3, [pc, #312]	; (8001aa0 <ProcessCommands+0x7b4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	f040 80dd 	bne.w	8001b28 <ProcessCommands+0x83c>
 800196e:	4b49      	ldr	r3, [pc, #292]	; (8001a94 <ProcessCommands+0x7a8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 80d8 	bne.w	8001b28 <ProcessCommands+0x83c>
 8001978:	4b47      	ldr	r3, [pc, #284]	; (8001a98 <ProcessCommands+0x7ac>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	f040 80d3 	bne.w	8001b28 <ProcessCommands+0x83c>
 8001982:	4b48      	ldr	r3, [pc, #288]	; (8001aa4 <ProcessCommands+0x7b8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f040 80ce 	bne.w	8001b28 <ProcessCommands+0x83c>
 800198c:	4b40      	ldr	r3, [pc, #256]	; (8001a90 <ProcessCommands+0x7a4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	f040 80c9 	bne.w	8001b28 <ProcessCommands+0x83c>
 8001996:	4b4b      	ldr	r3, [pc, #300]	; (8001ac4 <ProcessCommands+0x7d8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f040 80c4 	bne.w	8001b28 <ProcessCommands+0x83c>
 80019a0:	4b42      	ldr	r3, [pc, #264]	; (8001aac <ProcessCommands+0x7c0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f040 80bf 	bne.w	8001b28 <ProcessCommands+0x83c>
			|| cycle_valves || cycle_voff || IGON || IGOFF || SOV1ON || SOV1OFF || SOV2ON || SOV2OFF || SOV3ON || SOV3OFF || SOV4ON || SOV4OFF || SOV5ON || SOV5OFF ||\
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <ProcessCommands+0x7dc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f040 80ba 	bne.w	8001b28 <ProcessCommands+0x83c>
 80019b4:	4b45      	ldr	r3, [pc, #276]	; (8001acc <ProcessCommands+0x7e0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f040 80b5 	bne.w	8001b28 <ProcessCommands+0x83c>
 80019be:	4b44      	ldr	r3, [pc, #272]	; (8001ad0 <ProcessCommands+0x7e4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f040 80b0 	bne.w	8001b28 <ProcessCommands+0x83c>
 80019c8:	4b42      	ldr	r3, [pc, #264]	; (8001ad4 <ProcessCommands+0x7e8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f040 80ab 	bne.w	8001b28 <ProcessCommands+0x83c>
 80019d2:	4b41      	ldr	r3, [pc, #260]	; (8001ad8 <ProcessCommands+0x7ec>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 80a6 	bne.w	8001b28 <ProcessCommands+0x83c>
 80019dc:	4b3f      	ldr	r3, [pc, #252]	; (8001adc <ProcessCommands+0x7f0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f040 80a1 	bne.w	8001b28 <ProcessCommands+0x83c>
 80019e6:	4b3e      	ldr	r3, [pc, #248]	; (8001ae0 <ProcessCommands+0x7f4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f040 809c 	bne.w	8001b28 <ProcessCommands+0x83c>
 80019f0:	4b3c      	ldr	r3, [pc, #240]	; (8001ae4 <ProcessCommands+0x7f8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f040 8097 	bne.w	8001b28 <ProcessCommands+0x83c>
 80019fa:	4b3b      	ldr	r3, [pc, #236]	; (8001ae8 <ProcessCommands+0x7fc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f040 8092 	bne.w	8001b28 <ProcessCommands+0x83c>
 8001a04:	4b39      	ldr	r3, [pc, #228]	; (8001aec <ProcessCommands+0x800>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f040 808d 	bne.w	8001b28 <ProcessCommands+0x83c>
 8001a0e:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <ProcessCommands+0x804>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f040 8088 	bne.w	8001b28 <ProcessCommands+0x83c>
 8001a18:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <ProcessCommands+0x808>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f040 8083 	bne.w	8001b28 <ProcessCommands+0x83c>
 8001a22:	4b35      	ldr	r3, [pc, #212]	; (8001af8 <ProcessCommands+0x80c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d17e      	bne.n	8001b28 <ProcessCommands+0x83c>
 8001a2a:	4b34      	ldr	r3, [pc, #208]	; (8001afc <ProcessCommands+0x810>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d17a      	bne.n	8001b28 <ProcessCommands+0x83c>
 8001a32:	4b33      	ldr	r3, [pc, #204]	; (8001b00 <ProcessCommands+0x814>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d176      	bne.n	8001b28 <ProcessCommands+0x83c>
			 SOV6ON || SOV6OFF || SOV7ON || SOV7OFF || SOV8ON || SOV8OFF || SOV9ON || SOV9OFF )){
 8001a3a:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <ProcessCommands+0x818>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d172      	bne.n	8001b28 <ProcessCommands+0x83c>
 8001a42:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <ProcessCommands+0x81c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d16e      	bne.n	8001b28 <ProcessCommands+0x83c>
 8001a4a:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <ProcessCommands+0x820>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d16a      	bne.n	8001b28 <ProcessCommands+0x83c>
 8001a52:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <ProcessCommands+0x824>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d166      	bne.n	8001b28 <ProcessCommands+0x83c>
 8001a5a:	4b2e      	ldr	r3, [pc, #184]	; (8001b14 <ProcessCommands+0x828>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d162      	bne.n	8001b28 <ProcessCommands+0x83c>
 8001a62:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <ProcessCommands+0x82c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d15e      	bne.n	8001b28 <ProcessCommands+0x83c>
 8001a6a:	4b2c      	ldr	r3, [pc, #176]	; (8001b1c <ProcessCommands+0x830>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
	else if (!(command == power_off || stop || valve_check || lox_fill || lox_chill || pressurizing || lox_pre_fill || ignition ||start_handler \
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d15a      	bne.n	8001b28 <ProcessCommands+0x83c>

		if (inv_flag){
 8001a72:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <ProcessCommands+0x834>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 80f3 	beq.w	8001c62 <ProcessCommands+0x976>
		UART_SendMessage(&huart2, " Invalid command !...\n");
 8001a7c:	4929      	ldr	r1, [pc, #164]	; (8001b24 <ProcessCommands+0x838>)
 8001a7e:	480f      	ldr	r0, [pc, #60]	; (8001abc <ProcessCommands+0x7d0>)
 8001a80:	f7ff fa60 	bl	8000f44 <UART_SendMessage>
		 inv_flag = FALSE;
 8001a84:	4b26      	ldr	r3, [pc, #152]	; (8001b20 <ProcessCommands+0x834>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
		if (inv_flag){
 8001a8a:	e0ea      	b.n	8001c62 <ProcessCommands+0x976>
 8001a8c:	2000022c 	.word	0x2000022c
 8001a90:	20000018 	.word	0x20000018
 8001a94:	20000010 	.word	0x20000010
 8001a98:	20000014 	.word	0x20000014
 8001a9c:	20000020 	.word	0x20000020
 8001aa0:	2000000c 	.word	0x2000000c
 8001aa4:	2000001c 	.word	0x2000001c
 8001aa8:	20000008 	.word	0x20000008
 8001aac:	20000028 	.word	0x20000028
 8001ab0:	2000125c 	.word	0x2000125c
 8001ab4:	200013e0 	.word	0x200013e0
 8001ab8:	080079e4 	.word	0x080079e4
 8001abc:	2000145c 	.word	0x2000145c
 8001ac0:	20000004 	.word	0x20000004
 8001ac4:	20000024 	.word	0x20000024
 8001ac8:	20000034 	.word	0x20000034
 8001acc:	20000038 	.word	0x20000038
 8001ad0:	2000003c 	.word	0x2000003c
 8001ad4:	20000040 	.word	0x20000040
 8001ad8:	20000044 	.word	0x20000044
 8001adc:	20000048 	.word	0x20000048
 8001ae0:	2000004c 	.word	0x2000004c
 8001ae4:	20000050 	.word	0x20000050
 8001ae8:	20000054 	.word	0x20000054
 8001aec:	20000058 	.word	0x20000058
 8001af0:	2000005c 	.word	0x2000005c
 8001af4:	20000060 	.word	0x20000060
 8001af8:	20000064 	.word	0x20000064
 8001afc:	20000068 	.word	0x20000068
 8001b00:	2000006c 	.word	0x2000006c
 8001b04:	20000070 	.word	0x20000070
 8001b08:	20000074 	.word	0x20000074
 8001b0c:	20000078 	.word	0x20000078
 8001b10:	2000007c 	.word	0x2000007c
 8001b14:	20000080 	.word	0x20000080
 8001b18:	20000084 	.word	0x20000084
 8001b1c:	20000088 	.word	0x20000088
 8001b20:	20001250 	.word	0x20001250
 8001b24:	08007a24 	.word	0x08007a24
		}

	}

	//Handle the case of commands outside valve check state
	else if (command == valve_status || command == cycle_valves ||command == cycle_voff ||command == IGON ||command ==IGOFF \
 8001b28:	4b50      	ldr	r3, [pc, #320]	; (8001c6c <ProcessCommands+0x980>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b50      	ldr	r3, [pc, #320]	; (8001c70 <ProcessCommands+0x984>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	f000 8084 	beq.w	8001c3e <ProcessCommands+0x952>
 8001b36:	4b4d      	ldr	r3, [pc, #308]	; (8001c6c <ProcessCommands+0x980>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4b4e      	ldr	r3, [pc, #312]	; (8001c74 <ProcessCommands+0x988>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d07d      	beq.n	8001c3e <ProcessCommands+0x952>
 8001b42:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <ProcessCommands+0x980>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4b4c      	ldr	r3, [pc, #304]	; (8001c78 <ProcessCommands+0x98c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d077      	beq.n	8001c3e <ProcessCommands+0x952>
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <ProcessCommands+0x980>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <ProcessCommands+0x990>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d071      	beq.n	8001c3e <ProcessCommands+0x952>
 8001b5a:	4b44      	ldr	r3, [pc, #272]	; (8001c6c <ProcessCommands+0x980>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4b48      	ldr	r3, [pc, #288]	; (8001c80 <ProcessCommands+0x994>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d06b      	beq.n	8001c3e <ProcessCommands+0x952>
			||command == SOV1ON ||command == SOV1OFF ||command == SOV2ON ||command == SOV2OFF || command ==SOV3ON \
 8001b66:	4b41      	ldr	r3, [pc, #260]	; (8001c6c <ProcessCommands+0x980>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b46      	ldr	r3, [pc, #280]	; (8001c84 <ProcessCommands+0x998>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d065      	beq.n	8001c3e <ProcessCommands+0x952>
 8001b72:	4b3e      	ldr	r3, [pc, #248]	; (8001c6c <ProcessCommands+0x980>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4b44      	ldr	r3, [pc, #272]	; (8001c88 <ProcessCommands+0x99c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d05f      	beq.n	8001c3e <ProcessCommands+0x952>
 8001b7e:	4b3b      	ldr	r3, [pc, #236]	; (8001c6c <ProcessCommands+0x980>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	4b42      	ldr	r3, [pc, #264]	; (8001c8c <ProcessCommands+0x9a0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d059      	beq.n	8001c3e <ProcessCommands+0x952>
 8001b8a:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <ProcessCommands+0x980>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <ProcessCommands+0x9a4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d053      	beq.n	8001c3e <ProcessCommands+0x952>
 8001b96:	4b35      	ldr	r3, [pc, #212]	; (8001c6c <ProcessCommands+0x980>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	4b3e      	ldr	r3, [pc, #248]	; (8001c94 <ProcessCommands+0x9a8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d04d      	beq.n	8001c3e <ProcessCommands+0x952>
			||command ==SOV3OFF ||command == SOV4ON ||command == SOV4OFF ||command == SOV5ON ||command ==SOV5OFF \
 8001ba2:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <ProcessCommands+0x980>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4b3c      	ldr	r3, [pc, #240]	; (8001c98 <ProcessCommands+0x9ac>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d047      	beq.n	8001c3e <ProcessCommands+0x952>
 8001bae:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <ProcessCommands+0x980>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <ProcessCommands+0x9b0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d041      	beq.n	8001c3e <ProcessCommands+0x952>
 8001bba:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <ProcessCommands+0x980>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b38      	ldr	r3, [pc, #224]	; (8001ca0 <ProcessCommands+0x9b4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d03b      	beq.n	8001c3e <ProcessCommands+0x952>
 8001bc6:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <ProcessCommands+0x980>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <ProcessCommands+0x9b8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d035      	beq.n	8001c3e <ProcessCommands+0x952>
 8001bd2:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <ProcessCommands+0x980>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	4b34      	ldr	r3, [pc, #208]	; (8001ca8 <ProcessCommands+0x9bc>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d02f      	beq.n	8001c3e <ProcessCommands+0x952>
			||command ==SOV6ON ||command == SOV6OFF ||command == SOV7ON ||command == SOV7OFF ||command == SOV8ON \
 8001bde:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <ProcessCommands+0x980>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4b32      	ldr	r3, [pc, #200]	; (8001cac <ProcessCommands+0x9c0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d029      	beq.n	8001c3e <ProcessCommands+0x952>
 8001bea:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <ProcessCommands+0x980>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <ProcessCommands+0x9c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d023      	beq.n	8001c3e <ProcessCommands+0x952>
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <ProcessCommands+0x980>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4b2e      	ldr	r3, [pc, #184]	; (8001cb4 <ProcessCommands+0x9c8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d01d      	beq.n	8001c3e <ProcessCommands+0x952>
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <ProcessCommands+0x980>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <ProcessCommands+0x9cc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d017      	beq.n	8001c3e <ProcessCommands+0x952>
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <ProcessCommands+0x980>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <ProcessCommands+0x9d0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d011      	beq.n	8001c3e <ProcessCommands+0x952>
			||command ==SOV8OFF || command ==SOV9ON || command ==SOV9OFF){
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <ProcessCommands+0x980>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <ProcessCommands+0x9d4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d00b      	beq.n	8001c3e <ProcessCommands+0x952>
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <ProcessCommands+0x980>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <ProcessCommands+0x9d8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d005      	beq.n	8001c3e <ProcessCommands+0x952>
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <ProcessCommands+0x980>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <ProcessCommands+0x9dc>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d111      	bne.n	8001c62 <ProcessCommands+0x976>

			if (cmd_flag && !(ctrl->currentState == VALVE_CHECK)){
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <ProcessCommands+0x9e0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00d      	beq.n	8001c62 <ProcessCommands+0x976>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d008      	beq.n	8001c62 <ProcessCommands+0x976>
				UART_SendMessage(&huart2, " This command is only valid under the valve check state...\n");
 8001c50:	491f      	ldr	r1, [pc, #124]	; (8001cd0 <ProcessCommands+0x9e4>)
 8001c52:	4820      	ldr	r0, [pc, #128]	; (8001cd4 <ProcessCommands+0x9e8>)
 8001c54:	f7ff f976 	bl	8000f44 <UART_SendMessage>
				cmd_flag = FALSE;
 8001c58:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <ProcessCommands+0x9e0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e000      	b.n	8001c62 <ProcessCommands+0x976>
								if (cmd_flag && retransition)
 8001c60:	bf00      	nop
			}

	}


		return success;
 8001c62:	68fb      	ldr	r3, [r7, #12]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	2000022c 	.word	0x2000022c
 8001c70:	20000030 	.word	0x20000030
 8001c74:	20000034 	.word	0x20000034
 8001c78:	20000038 	.word	0x20000038
 8001c7c:	2000003c 	.word	0x2000003c
 8001c80:	20000040 	.word	0x20000040
 8001c84:	20000044 	.word	0x20000044
 8001c88:	20000048 	.word	0x20000048
 8001c8c:	2000004c 	.word	0x2000004c
 8001c90:	20000050 	.word	0x20000050
 8001c94:	20000054 	.word	0x20000054
 8001c98:	20000058 	.word	0x20000058
 8001c9c:	2000005c 	.word	0x2000005c
 8001ca0:	20000060 	.word	0x20000060
 8001ca4:	20000064 	.word	0x20000064
 8001ca8:	20000068 	.word	0x20000068
 8001cac:	2000006c 	.word	0x2000006c
 8001cb0:	20000070 	.word	0x20000070
 8001cb4:	20000074 	.word	0x20000074
 8001cb8:	20000078 	.word	0x20000078
 8001cbc:	2000007c 	.word	0x2000007c
 8001cc0:	20000080 	.word	0x20000080
 8001cc4:	20000084 	.word	0x20000084
 8001cc8:	20000088 	.word	0x20000088
 8001ccc:	2000125c 	.word	0x2000125c
 8001cd0:	08007a3c 	.word	0x08007a3c
 8001cd4:	2000145c 	.word	0x2000145c

08001cd8 <splitValues>:

//Function to separate sensor values
uint32_t splitValues(char *marionette_data, char separated[10][20])
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
	int n=0,j=0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
	//Initialize the storage 2d array to 0
	for(int a=0; a<10;a ++){
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	e017      	b.n	8001d20 <splitValues+0x48>
		for(int b=0; b<20; b++){
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	e00e      	b.n	8001d14 <splitValues+0x3c>
			separated[a][b] = 0;
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	461a      	mov	r2, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	441a      	add	r2, r3
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4413      	add	r3, r2
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
		for(int b=0; b<20; b++){
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	3301      	adds	r3, #1
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	2b13      	cmp	r3, #19
 8001d18:	dded      	ble.n	8001cf6 <splitValues+0x1e>
	for(int a=0; a<10;a ++){
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b09      	cmp	r3, #9
 8001d24:	dde4      	ble.n	8001cf0 <splitValues+0x18>
		}
	}

	for(int i=0;TRUE;i++)// Process the whole marionette data packet
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
	{
		if(marionette_data[i]!=' '){
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b20      	cmp	r3, #32
 8001d34:	d010      	beq.n	8001d58 <splitValues+0x80>
			separated[n][j++]=marionette_data[i];
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	18d1      	adds	r1, r2, r3
 8001d3c:	69fa      	ldr	r2, [r7, #28]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	461a      	mov	r2, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	441a      	add	r2, r3
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	1c58      	adds	r0, r3, #1
 8001d50:	61b8      	str	r0, [r7, #24]
 8001d52:	7809      	ldrb	r1, [r1, #0]
 8001d54:	54d1      	strb	r1, [r2, r3]
 8001d56:	e011      	b.n	8001d7c <splitValues+0xa4>
		}
		else{// sensor value processed
			separated[n][j++]='\0';//insert NULL
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	461a      	mov	r2, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	441a      	add	r2, r3
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	1c59      	adds	r1, r3, #1
 8001d6c:	61b9      	str	r1, [r7, #24]
 8001d6e:	2100      	movs	r1, #0
 8001d70:	54d1      	strb	r1, [r2, r3]
			n++; // increase by one for every sensor value
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3301      	adds	r3, #1
 8001d76:	61fb      	str	r3, [r7, #28]
			j=0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61bb      	str	r3, [r7, #24]
		}
		if(marionette_data[i]=='\0')
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <splitValues+0xb8>
	for(int i=0;TRUE;i++)// Process the whole marionette data packet
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	60fb      	str	r3, [r7, #12]
		if(marionette_data[i]!=' '){
 8001d8e:	e7cc      	b.n	8001d2a <splitValues+0x52>
		    break;
 8001d90:	bf00      	nop
	}
	// n + 1 will give you how many items in the data you want to split when there is a space.
	return n+1;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3301      	adds	r3, #1
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3724      	adds	r7, #36	; 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <NominalValueCheck>:
// Function in charge of determining that the Sensor Values are Nominal.
void NominalValueCheck(struct StateVars *ctrl, char marionette[]){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b0d0      	sub	sp, #320	; 0x140
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	6018      	str	r0, [r3, #0]
 8001dae:	463b      	mov	r3, r7
 8001db0:	6019      	str	r1, [r3, #0]

		uint32_t amount, counter, sensor_value = 0; 	//number of hex and counter of valves.
 8001db2:	2300      	movs	r3, #0
 8001db4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		char arr[10][20] = {0}; 						//to hold the separated sensor values.
 8001db8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dbc:	22c8      	movs	r2, #200	; 0xc8
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f005 f993 	bl	80070ec <memset>
	    char notice[100] = {0}; 						//for the output message.
 8001dc6:	f107 0308 	add.w	r3, r7, #8
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	2260      	movs	r2, #96	; 0x60
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f005 f989 	bl	80070ec <memset>

        //amount holds the amount of sensor values.
	    //this helps to know how many sensor values need to be processed.
		amount = splitValues(marionette,arr);
 8001dda:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001dde:	463b      	mov	r3, r7
 8001de0:	4611      	mov	r1, r2
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	f7ff ff78 	bl	8001cd8 <splitValues>
 8001de8:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134

		//Check for valid marionette data packet key (3F99)
		if (hexadecimalTouint32(arr[0]) == marionette_cmd){
 8001dec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fa29 	bl	8001248 <hexadecimalTouint32>
 8001df6:	4602      	mov	r2, r0
 8001df8:	4b29      	ldr	r3, [pc, #164]	; (8001ea0 <NominalValueCheck+0xfc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d13c      	bne.n	8001e7a <NominalValueCheck+0xd6>
            //If the arr[0] contains the key then a sensor value will start at arr[1]
			for(int i=1; i<=amount; i++){
 8001e00:	2301      	movs	r3, #1
 8001e02:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001e06:	e031      	b.n	8001e6c <NominalValueCheck+0xc8>
				sensor_value = hexadecimalTouint32(arr[i]);
 8001e08:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8001e0c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fa14 	bl	8001248 <hexadecimalTouint32>
 8001e20:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138

			// Check if the sensor value is in the nominal range
			if ( sensor_value <= 99 && sensor_value >= 0){
 8001e24:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e28:	2b63      	cmp	r3, #99	; 0x63
 8001e2a:	d91a      	bls.n	8001e62 <NominalValueCheck+0xbe>
					// UART_SendMessage(&huart2,"%s\n\r",notice);
	            	// counter ++;
				}
			//If the sensor value is not in the nominal range.
	        else {
	        	init_time = HAL_GetTick();; //Get time.
 8001e2c:	f002 fada 	bl	80043e4 <HAL_GetTick>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <NominalValueCheck+0x100>)
 8001e34:	6013      	str	r3, [r2, #0]

	        	//Issue a Warning Message.
	            sprintf(notice, "\nWARNING: Sensor %d value = %s is outside nominal range...",i, arr[i]);
 8001e36:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8001e3a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	f107 0008 	add.w	r0, r7, #8
 8001e4c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001e50:	4915      	ldr	r1, [pc, #84]	; (8001ea8 <NominalValueCheck+0x104>)
 8001e52:	f005 f953 	bl	80070fc <siprintf>
	            // Ok send the warning message
	            UART_SendMessage(&huart2, notice);
 8001e56:	f107 0308 	add.w	r3, r7, #8
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4813      	ldr	r0, [pc, #76]	; (8001eac <NominalValueCheck+0x108>)
 8001e5e:	f7ff f871 	bl	8000f44 <UART_SendMessage>
			for(int i=1; i<=amount; i++){
 8001e62:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e66:	3301      	adds	r3, #1
 8001e68:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001e6c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e70:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d2c7      	bcs.n	8001e08 <NominalValueCheck+0x64>
                // Ok send the warning message
                UART_SendMessage(&huart2, notice);

			}

}//end of NominalValueCheck()
 8001e78:	e00d      	b.n	8001e96 <NominalValueCheck+0xf2>
                sprintf(notice, "\nWARNING: Marionette data packet key is not correct. The key used: %s..", arr[0]);
 8001e7a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001e7e:	f107 0308 	add.w	r3, r7, #8
 8001e82:	490b      	ldr	r1, [pc, #44]	; (8001eb0 <NominalValueCheck+0x10c>)
 8001e84:	4618      	mov	r0, r3
 8001e86:	f005 f939 	bl	80070fc <siprintf>
                UART_SendMessage(&huart2, notice);
 8001e8a:	f107 0308 	add.w	r3, r7, #8
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4806      	ldr	r0, [pc, #24]	; (8001eac <NominalValueCheck+0x108>)
 8001e92:	f7ff f857 	bl	8000f44 <UART_SendMessage>
}//end of NominalValueCheck()
 8001e96:	bf00      	nop
 8001e98:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	2000008c 	.word	0x2000008c
 8001ea4:	200014dc 	.word	0x200014dc
 8001ea8:	08007a78 	.word	0x08007a78
 8001eac:	2000145c 	.word	0x2000145c
 8001eb0:	08007ab4 	.word	0x08007ab4

08001eb4 <Get_State_Disagree_Error_Msg>:

// Function to Double check that we are transitioning to the correct state
void Get_State_Disagree_Error_Msg(char *errorMessage, enum StateName expectedState, \
			enum StateName passedState)
{
 8001eb4:	b5b0      	push	{r4, r5, r7, lr}
 8001eb6:	b0a2      	sub	sp, #136	; 0x88
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70fb      	strb	r3, [r7, #3]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	70bb      	strb	r3, [r7, #2]
	char state_disagree[VALVE_STATE_BUFFER_SIZE] = "ERROR: Expected State, Passed State Disagree. ";
 8001ec4:	4b34      	ldr	r3, [pc, #208]	; (8001f98 <Get_State_Disagree_Error_Msg+0xe4>)
 8001ec6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001eca:	461d      	mov	r5, r3
 8001ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ed4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ed8:	c407      	stmia	r4!, {r0, r1, r2}
 8001eda:	8023      	strh	r3, [r4, #0]
 8001edc:	3402      	adds	r4, #2
 8001ede:	0c1b      	lsrs	r3, r3, #16
 8001ee0:	7023      	strb	r3, [r4, #0]
 8001ee2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001ee6:	2231      	movs	r2, #49	; 0x31
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f005 f8fe 	bl	80070ec <memset>
	char temp[32];
	strcat(state_disagree, "Expected: ");
 8001ef0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe f96b 	bl	80001d0 <strlen>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f02:	4413      	add	r3, r2
 8001f04:	4925      	ldr	r1, [pc, #148]	; (8001f9c <Get_State_Disagree_Error_Msg+0xe8>)
 8001f06:	461a      	mov	r2, r3
 8001f08:	460b      	mov	r3, r1
 8001f0a:	cb03      	ldmia	r3!, {r0, r1}
 8001f0c:	6010      	str	r0, [r2, #0]
 8001f0e:	6051      	str	r1, [r2, #4]
 8001f10:	8819      	ldrh	r1, [r3, #0]
 8001f12:	789b      	ldrb	r3, [r3, #2]
 8001f14:	8111      	strh	r1, [r2, #8]
 8001f16:	7293      	strb	r3, [r2, #10]
	sprintf(temp, "%d", expectedState);
 8001f18:	78fa      	ldrb	r2, [r7, #3]
 8001f1a:	f107 0308 	add.w	r3, r7, #8
 8001f1e:	4920      	ldr	r1, [pc, #128]	; (8001fa0 <Get_State_Disagree_Error_Msg+0xec>)
 8001f20:	4618      	mov	r0, r3
 8001f22:	f005 f8eb 	bl	80070fc <siprintf>
	strcat(state_disagree, temp);
 8001f26:	f107 0208 	add.w	r2, r7, #8
 8001f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f005 f903 	bl	800713c <strcat>
	strcat(state_disagree,"Passed: ");
 8001f36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe f948 	bl	80001d0 <strlen>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f48:	4413      	add	r3, r2
 8001f4a:	4916      	ldr	r1, [pc, #88]	; (8001fa4 <Get_State_Disagree_Error_Msg+0xf0>)
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	460b      	mov	r3, r1
 8001f50:	cb03      	ldmia	r3!, {r0, r1}
 8001f52:	6010      	str	r0, [r2, #0]
 8001f54:	6051      	str	r1, [r2, #4]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	7213      	strb	r3, [r2, #8]
	sprintf(temp, "%d", passedState);
 8001f5a:	78ba      	ldrb	r2, [r7, #2]
 8001f5c:	f107 0308 	add.w	r3, r7, #8
 8001f60:	490f      	ldr	r1, [pc, #60]	; (8001fa0 <Get_State_Disagree_Error_Msg+0xec>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f005 f8ca 	bl	80070fc <siprintf>
	strcat(state_disagree, temp);
 8001f68:	f107 0208 	add.w	r2, r7, #8
 8001f6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f005 f8e2 	bl	800713c <strcat>
	memset(errorMessage, '\0', VALVE_STATE_BUFFER_SIZE);
 8001f78:	2260      	movs	r2, #96	; 0x60
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f005 f8b5 	bl	80070ec <memset>
	strcpy(errorMessage, state_disagree);
 8001f82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f86:	4619      	mov	r1, r3
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f005 f8e6 	bl	800715a <strcpy>
}
 8001f8e:	bf00      	nop
 8001f90:	3788      	adds	r7, #136	; 0x88
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bdb0      	pop	{r4, r5, r7, pc}
 8001f96:	bf00      	nop
 8001f98:	08007b18 	.word	0x08007b18
 8001f9c:	08007afc 	.word	0x08007afc
 8001fa0:	08007b08 	.word	0x08007b08
 8001fa4:	08007b0c 	.word	0x08007b0c

08001fa8 <Get_Invalid_State_Error_Msg>:

// Function to let the usr know which state transition is expected and which one is trying to transition being invalid.
void Get_Invalid_State_Error_Msg(char *errorMessage, enum StateName state, enum StateName lastState)
{
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b0a3      	sub	sp, #140	; 0x8c
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	70bb      	strb	r3, [r7, #2]
	char state_invalid[VALVE_STATE_BUFFER_SIZE] = "Invalid State: ";
 8001fb8:	4b26      	ldr	r3, [pc, #152]	; (8002054 <Get_Invalid_State_Error_Msg+0xac>)
 8001fba:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001fbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fc4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fc8:	2250      	movs	r2, #80	; 0x50
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f005 f88d 	bl	80070ec <memset>
	char temp[32];
	sprintf(temp, " %d ",state);
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	f107 0308 	add.w	r3, r7, #8
 8001fd8:	491f      	ldr	r1, [pc, #124]	; (8002058 <Get_Invalid_State_Error_Msg+0xb0>)
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f005 f88e 	bl	80070fc <siprintf>
	strcat(state_invalid, temp);
 8001fe0:	f107 0208 	add.w	r2, r7, #8
 8001fe4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fe8:	4611      	mov	r1, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f005 f8a6 	bl	800713c <strcat>
	strcat(state_invalid, ", lastState: ");
 8001ff0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe f8eb 	bl	80001d0 <strlen>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002002:	4413      	add	r3, r2
 8002004:	4a15      	ldr	r2, [pc, #84]	; (800205c <Get_Invalid_State_Error_Msg+0xb4>)
 8002006:	461c      	mov	r4, r3
 8002008:	4613      	mov	r3, r2
 800200a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800200c:	6020      	str	r0, [r4, #0]
 800200e:	6061      	str	r1, [r4, #4]
 8002010:	60a2      	str	r2, [r4, #8]
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	81a3      	strh	r3, [r4, #12]
	sprintf(temp, " %d \n\n", lastState);
 8002016:	78ba      	ldrb	r2, [r7, #2]
 8002018:	f107 0308 	add.w	r3, r7, #8
 800201c:	4910      	ldr	r1, [pc, #64]	; (8002060 <Get_Invalid_State_Error_Msg+0xb8>)
 800201e:	4618      	mov	r0, r3
 8002020:	f005 f86c 	bl	80070fc <siprintf>
	strcat(state_invalid, temp);
 8002024:	f107 0208 	add.w	r2, r7, #8
 8002028:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f005 f884 	bl	800713c <strcat>
	memset(errorMessage, '\0', VALVE_STATE_BUFFER_SIZE);
 8002034:	2260      	movs	r2, #96	; 0x60
 8002036:	2100      	movs	r1, #0
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f005 f857 	bl	80070ec <memset>
	strcpy(errorMessage, state_invalid);
 800203e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002042:	4619      	mov	r1, r3
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f005 f888 	bl	800715a <strcpy>
}
 800204a:	bf00      	nop
 800204c:	378c      	adds	r7, #140	; 0x8c
 800204e:	46bd      	mov	sp, r7
 8002050:	bd90      	pop	{r4, r7, pc}
 8002052:	bf00      	nop
 8002054:	08007b98 	.word	0x08007b98
 8002058:	08007b78 	.word	0x08007b78
 800205c:	08007b80 	.word	0x08007b80
 8002060:	08007b90 	.word	0x08007b90

08002064 <OxidizerStart>:
#include "messages.h"
#include "utilities.h"
#include "ring_buffer.h"


uint32_t OxidizerStart(struct StateVars *ctrl){
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

	uint32_t success = FALSE;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]

	ctrl->valveConfiguration = StateConfiguration();
 8002070:	f000 feb0 	bl	8002dd4 <StateConfiguration>
 8002074:	4602      	mov	r2, r0
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV1 	\
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2223      	movs	r2, #35	; 0x23
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV6);

	


	uint32_t TIMEOUT = 200;// .2 second time out
 8002080:	23c8      	movs	r3, #200	; 0xc8
 8002082:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800208a:	4618      	mov	r0, r3
 800208c:	f000 fe66 	bl	8002d5c <VerifyState>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d056      	beq.n	8002144 <OxidizerStart+0xe0>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800209c:	4618      	mov	r0, r3
 800209e:	f000 fe5d 	bl	8002d5c <VerifyState>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d04d      	beq.n	8002144 <OxidizerStart+0xe0>
    {
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d039      	beq.n	800212a <OxidizerStart+0xc6>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  1  |   1   |  0  |   0  |   0  |   1  |   0   |  0  |  0  |  0

    		StateStatus(ctrl);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fdfa 	bl	8002cb0 <StateStatus>
    		//nominal = NominalValueCheck(ctrl, Rx_Buffer);
    		ringBufferRead();
 80020bc:	f000 f9e6 	bl	800248c <ringBufferRead>

    		uint32_t now = HAL_GetTick();
 80020c0:	f002 f990 	bl	80043e4 <HAL_GetTick>
 80020c4:	60f8      	str	r0, [r7, #12]
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d003      	beq.n	80020de <OxidizerStart+0x7a>
    	    {
    			success = StateInitialize(ctrl);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 ffce 	bl	8003078 <StateInitialize>
 80020dc:	6178      	str	r0, [r7, #20]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	429a      	cmp	r2, r3
 80020e8:	bf0c      	ite	eq
 80020ea:	2301      	moveq	r3, #1
 80020ec:	2300      	movne	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	617b      	str	r3, [r7, #20]



    		if(now - ctrl->timeStarted > TIMEOUT && success)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d206      	bcs.n	800210e <OxidizerStart+0xaa>
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <OxidizerStart+0xaa>
    		{
        		ctrl->currentState = FIRING;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2209      	movs	r2, #9
 800210a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}

    		// Increment state counter
			ctrl->stateCounter++;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d11f      	bne.n	8002162 <OxidizerStart+0xfe>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 8002128:	e01b      	b.n	8002162 <OxidizerStart+0xfe>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, OXIDIZER_START, ctrl->currentState);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002130:	461a      	mov	r2, r3
 8002132:	2108      	movs	r1, #8
 8002134:	480e      	ldr	r0, [pc, #56]	; (8002170 <OxidizerStart+0x10c>)
 8002136:	f7ff febd 	bl	8001eb4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2, Tx_Buffer);
 800213a:	490d      	ldr	r1, [pc, #52]	; (8002170 <OxidizerStart+0x10c>)
 800213c:	480d      	ldr	r0, [pc, #52]	; (8002174 <OxidizerStart+0x110>)
 800213e:	f7fe ff01 	bl	8000f44 <UART_SendMessage>
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 8002142:	e00e      	b.n	8002162 <OxidizerStart+0xfe>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002150:	461a      	mov	r2, r3
 8002152:	4807      	ldr	r0, [pc, #28]	; (8002170 <OxidizerStart+0x10c>)
 8002154:	f7ff ff28 	bl	8001fa8 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8002158:	4905      	ldr	r1, [pc, #20]	; (8002170 <OxidizerStart+0x10c>)
 800215a:	4806      	ldr	r0, [pc, #24]	; (8002174 <OxidizerStart+0x110>)
 800215c:	f7fe fef2 	bl	8000f44 <UART_SendMessage>
 8002160:	e000      	b.n	8002164 <OxidizerStart+0x100>
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 8002162:	bf00      	nop
    }
	return success;
 8002164:	697b      	ldr	r3, [r7, #20]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000238 	.word	0x20000238
 8002174:	2000145c 	.word	0x2000145c

08002178 <Pressurize>:
#include "pressurize.h"
#include "messages.h"
#include "ring_buffer.h"


uint32_t Pressurize(struct StateVars *ctrl){
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]

	ctrl->valveConfiguration = StateConfiguration();
 8002184:	f000 fe26 	bl	8002dd4 <StateConfiguration>
 8002188:	4602      	mov	r2, r0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget = ((uint16_t)SOV1 	\
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2203      	movs	r2, #3
 8002192:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV2);

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800219a:	4618      	mov	r0, r3
 800219c:	f000 fdde 	bl	8002d5c <VerifyState>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d03e      	beq.n	8002224 <Pressurize+0xac>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 fdd5 	bl	8002d5c <VerifyState>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d035      	beq.n	8002224 <Pressurize+0xac>
    {
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021be:	f003 0306 	and.w	r3, r3, #6
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d121      	bne.n	800220a <Pressurize+0x92>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8    SOV9   IG1
    		//|  1  |   1  |   0  |   0  |   0  |   0  |   0  |   0  |   0   |  0

    		StateStatus(ctrl);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fd72 	bl	8002cb0 <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021d8:	429a      	cmp	r2, r3
 80021da:	d003      	beq.n	80021e4 <Pressurize+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 ff4b 	bl	8003078 <StateInitialize>
 80021e2:	60f8      	str	r0, [r7, #12]
    	    }

    		ProcessCommands(ctrl);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff f881 	bl	80012ec <ProcessCommands>

    		//Check the nominal value
			//NominalValueCheck(ctrl, Rx_Buffer);
    		ringBufferRead();
 80021ea:	f000 f94f 	bl	800248c <ringBufferRead>

    		// Increment state counter
			ctrl->stateCounter++;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d11f      	bne.n	8002242 <Pressurize+0xca>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 8002208:	e01b      	b.n	8002242 <Pressurize+0xca>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, PRESSURIZE, ctrl->currentState);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002210:	461a      	mov	r2, r3
 8002212:	2106      	movs	r1, #6
 8002214:	480e      	ldr	r0, [pc, #56]	; (8002250 <Pressurize+0xd8>)
 8002216:	f7ff fe4d 	bl	8001eb4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 800221a:	490d      	ldr	r1, [pc, #52]	; (8002250 <Pressurize+0xd8>)
 800221c:	480d      	ldr	r0, [pc, #52]	; (8002254 <Pressurize+0xdc>)
 800221e:	f7fe fe91 	bl	8000f44 <UART_SendMessage>
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 8002222:	e00e      	b.n	8002242 <Pressurize+0xca>
    	}
    }else{
    	    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002230:	461a      	mov	r2, r3
 8002232:	4807      	ldr	r0, [pc, #28]	; (8002250 <Pressurize+0xd8>)
 8002234:	f7ff feb8 	bl	8001fa8 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 8002238:	4905      	ldr	r1, [pc, #20]	; (8002250 <Pressurize+0xd8>)
 800223a:	4806      	ldr	r0, [pc, #24]	; (8002254 <Pressurize+0xdc>)
 800223c:	f7fe fe82 	bl	8000f44 <UART_SendMessage>
 8002240:	e000      	b.n	8002244 <Pressurize+0xcc>
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 8002242:	bf00      	nop
    }
	return success;
 8002244:	68fb      	ldr	r3, [r7, #12]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000238 	.word	0x20000238
 8002254:	2000145c 	.word	0x2000145c

08002258 <Purge>:
#include "messages.h"
#include "utilities.h"
#include "ring_buffer.h"


uint32_t Purge(struct StateVars *ctrl){
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]

	ctrl->valveConfiguration = StateConfiguration();
 8002264:	f000 fdb6 	bl	8002dd4 <StateConfiguration>
 8002268:	4602      	mov	r2, r0
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV3  \
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002274:	631a      	str	r2, [r3, #48]	; 0x30
			  |(uint16_t)SOV9);


	uint32_t TIMEOUT = 3000; // 3 second time out
 8002276:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800227a:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fd6a 	bl	8002d5c <VerifyState>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d056      	beq.n	800233c <Purge+0xe4>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002294:	4618      	mov	r0, r3
 8002296:	f000 fd61 	bl	8002d5c <VerifyState>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d04d      	beq.n	800233c <Purge+0xe4>
    {
    	if((ctrl->currentState & PURGE) == PURGE){
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a6:	f003 030a 	and.w	r3, r3, #10
 80022aa:	2b0a      	cmp	r3, #10
 80022ac:	d139      	bne.n	8002322 <Purge+0xca>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  0  |   0  |   1  |   0  |   0  |   0  |   0  |   0  |  1  |  0

    		StateStatus(ctrl);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fcfe 	bl	8002cb0 <StateStatus>
    		//nominal = NominalValueCheck(ctrl, Rx_Buffer);
    		ringBufferRead();
 80022b4:	f000 f8ea 	bl	800248c <ringBufferRead>


    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d003      	beq.n	80022d0 <Purge+0x78>
    	    {
    			success = StateInitialize(ctrl);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fed5 	bl	8003078 <StateInitialize>
 80022ce:	6178      	str	r0, [r7, #20]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	429a      	cmp	r2, r3
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	617b      	str	r3, [r7, #20]


			uint32_t now = HAL_GetTick();
 80022e4:	f002 f87e 	bl	80043e4 <HAL_GetTick>
 80022e8:	60f8      	str	r0, [r7, #12]

    		if(now - ctrl->timeStarted > TIMEOUT && success)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d206      	bcs.n	8002306 <Purge+0xae>
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <Purge+0xae>
    		{
        		ctrl->currentState= SAFETY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2205      	movs	r2, #5
 8002302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}

    		// Increment state counter
			ctrl->stateCounter++;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002318:	d11f      	bne.n	800235a <Purge+0x102>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & PURGE) == PURGE){
 8002320:	e01b      	b.n	800235a <Purge+0x102>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, PURGE, ctrl->currentState);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002328:	461a      	mov	r2, r3
 800232a:	210a      	movs	r1, #10
 800232c:	480e      	ldr	r0, [pc, #56]	; (8002368 <Purge+0x110>)
 800232e:	f7ff fdc1 	bl	8001eb4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8002332:	490d      	ldr	r1, [pc, #52]	; (8002368 <Purge+0x110>)
 8002334:	480d      	ldr	r0, [pc, #52]	; (800236c <Purge+0x114>)
 8002336:	f7fe fe05 	bl	8000f44 <UART_SendMessage>
    	if((ctrl->currentState & PURGE) == PURGE){
 800233a:	e00e      	b.n	800235a <Purge+0x102>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002348:	461a      	mov	r2, r3
 800234a:	4807      	ldr	r0, [pc, #28]	; (8002368 <Purge+0x110>)
 800234c:	f7ff fe2c 	bl	8001fa8 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 8002350:	4905      	ldr	r1, [pc, #20]	; (8002368 <Purge+0x110>)
 8002352:	4806      	ldr	r0, [pc, #24]	; (800236c <Purge+0x114>)
 8002354:	f7fe fdf6 	bl	8000f44 <UART_SendMessage>
 8002358:	e000      	b.n	800235c <Purge+0x104>
    	if((ctrl->currentState & PURGE) == PURGE){
 800235a:	bf00      	nop
    }
	return success;
 800235c:	697b      	ldr	r3, [r7, #20]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000238 	.word	0x20000238
 800236c:	2000145c 	.word	0x2000145c

08002370 <ringBuffer>:
#include "ring_buffer.h" // include the header file
#include "messages.h"

void ringBuffer(char data []){
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
//First store the marionette data in a ring buffer FIFO style
//If is the first time using the buffer Initialize it
	 if (circular==0) {
 8002378:	4b3f      	ldr	r3, [pc, #252]	; (8002478 <ringBuffer+0x108>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d11e      	bne.n	80023be <ringBuffer+0x4e>

		 for (int i=0;i<16;i++){ // i for rows
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	e015      	b.n	80023b2 <ringBuffer+0x42>
			 for (int j = 0; j<250; j ++){// j for columns
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	e00c      	b.n	80023a6 <ringBuffer+0x36>

				 circularBuffer[i][j]= 0;
 800238c:	4a3b      	ldr	r2, [pc, #236]	; (800247c <ringBuffer+0x10c>)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	21fa      	movs	r1, #250	; 0xfa
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	441a      	add	r2, r3
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
			 for (int j = 0; j<250; j ++){// j for columns
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	3301      	adds	r3, #1
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	2bf9      	cmp	r3, #249	; 0xf9
 80023aa:	ddef      	ble.n	800238c <ringBuffer+0x1c>
		 for (int i=0;i<16;i++){ // i for rows
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	3301      	adds	r3, #1
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b0f      	cmp	r3, #15
 80023b6:	dde6      	ble.n	8002386 <ringBuffer+0x16>
			 }
		 }
		 //The 2D array is initialized !
		 circular = 1;
 80023b8:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <ringBuffer+0x108>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
	 }

	 //Circular Buffer FULL
	 if (bufferLength == SIZE_OF_BUFFER){ // Case where the circular buffer is full
 80023be:	4b30      	ldr	r3, [pc, #192]	; (8002480 <ringBuffer+0x110>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4b30      	ldr	r3, [pc, #192]	; (8002484 <ringBuffer+0x114>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d106      	bne.n	80023d8 <ringBuffer+0x68>
		 bufferLength = 0;
 80023ca:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <ringBuffer+0x110>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
		 writeIndex = 0;
 80023d0:	4b2d      	ldr	r3, [pc, #180]	; (8002488 <ringBuffer+0x118>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
		 writeIndex++;

		 if (writeIndex == 15){writeIndex = 0;}
	 }

}
 80023d6:	e04a      	b.n	800246e <ringBuffer+0xfe>
	 else if (bufferLength != SIZE_OF_BUFFER){
 80023d8:	4b29      	ldr	r3, [pc, #164]	; (8002480 <ringBuffer+0x110>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b29      	ldr	r3, [pc, #164]	; (8002484 <ringBuffer+0x114>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d044      	beq.n	800246e <ringBuffer+0xfe>
		 for (int i = 0; i < 250; i++){
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	e02d      	b.n	8002446 <ringBuffer+0xd6>
			 circularBuffer[writeIndex][i] = data[i];
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	441a      	add	r2, r3
 80023f0:	4b25      	ldr	r3, [pc, #148]	; (8002488 <ringBuffer+0x118>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	7810      	ldrb	r0, [r2, #0]
 80023f6:	4a21      	ldr	r2, [pc, #132]	; (800247c <ringBuffer+0x10c>)
 80023f8:	21fa      	movs	r1, #250	; 0xfa
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	441a      	add	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4413      	add	r3, r2
 8002404:	4602      	mov	r2, r0
 8002406:	701a      	strb	r2, [r3, #0]
		 if (strlen(data) == i){
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7fd fee1 	bl	80001d0 <strlen>
 800240e:	4602      	mov	r2, r0
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	429a      	cmp	r2, r3
 8002414:	d114      	bne.n	8002440 <ringBuffer+0xd0>
			 for(int j = i+1; j <= 250; j++ ){
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3301      	adds	r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	e00d      	b.n	800243a <ringBuffer+0xca>
				 circularBuffer[writeIndex][j] = 0;
 800241e:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <ringBuffer+0x118>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a16      	ldr	r2, [pc, #88]	; (800247c <ringBuffer+0x10c>)
 8002424:	21fa      	movs	r1, #250	; 0xfa
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	441a      	add	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4413      	add	r3, r2
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
			 for(int j = i+1; j <= 250; j++ ){
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	3301      	adds	r3, #1
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2bfa      	cmp	r3, #250	; 0xfa
 800243e:	ddee      	ble.n	800241e <ringBuffer+0xae>
		 for (int i = 0; i < 250; i++){
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3301      	adds	r3, #1
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2bf9      	cmp	r3, #249	; 0xf9
 800244a:	ddce      	ble.n	80023ea <ringBuffer+0x7a>
		 bufferLength ++;
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <ringBuffer+0x110>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3301      	adds	r3, #1
 8002452:	4a0b      	ldr	r2, [pc, #44]	; (8002480 <ringBuffer+0x110>)
 8002454:	6013      	str	r3, [r2, #0]
		 writeIndex++;
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <ringBuffer+0x118>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <ringBuffer+0x118>)
 800245e:	6013      	str	r3, [r2, #0]
		 if (writeIndex == 15){writeIndex = 0;}
 8002460:	4b09      	ldr	r3, [pc, #36]	; (8002488 <ringBuffer+0x118>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b0f      	cmp	r3, #15
 8002466:	d102      	bne.n	800246e <ringBuffer+0xfe>
 8002468:	4b07      	ldr	r3, [pc, #28]	; (8002488 <ringBuffer+0x118>)
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
}
 800246e:	bf00      	nop
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	2000124c 	.word	0x2000124c
 800247c:	200002a8 	.word	0x200002a8
 8002480:	2000018c 	.word	0x2000018c
 8002484:	20000090 	.word	0x20000090
 8002488:	20001260 	.word	0x20001260

0800248c <ringBufferRead>:
// One alternative to check the marionette values from withing the each states ( Create a function read and call it )
// Otherwise leave read inside the ring buffer function and handling the marionettes values will be done first!
void ringBufferRead(){
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
	int counter = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
	    //check if the circular buffer is empty
	    // Initialize it to zero
	     if(bufferLength == 0 && initOnceFlag == TRUE){
 8002496:	4b3c      	ldr	r3, [pc, #240]	; (8002588 <ringBufferRead+0xfc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d123      	bne.n	80024e6 <ringBufferRead+0x5a>
 800249e:	4b3b      	ldr	r3, [pc, #236]	; (800258c <ringBufferRead+0x100>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d11f      	bne.n	80024e6 <ringBufferRead+0x5a>

	    	 for (int i=0;i<16;i++){ // rows
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	e015      	b.n	80024d8 <ringBufferRead+0x4c>
	    	 			 for (int j = 0; j<250; j ++){// columns
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	e00c      	b.n	80024cc <ringBufferRead+0x40>

	    	 				 circularBuffer[i][j]= 0;
 80024b2:	4a37      	ldr	r2, [pc, #220]	; (8002590 <ringBufferRead+0x104>)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	21fa      	movs	r1, #250	; 0xfa
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	441a      	add	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4413      	add	r3, r2
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
	    	 			 for (int j = 0; j<250; j ++){// columns
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3301      	adds	r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2bf9      	cmp	r3, #249	; 0xf9
 80024d0:	ddef      	ble.n	80024b2 <ringBufferRead+0x26>
	    	 for (int i=0;i<16;i++){ // rows
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	3301      	adds	r3, #1
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	2b0f      	cmp	r3, #15
 80024dc:	dde6      	ble.n	80024ac <ringBufferRead+0x20>
	    	 			 }

	    	 	 }
	    	 initOnceFlag = FALSE;
 80024de:	4b2b      	ldr	r3, [pc, #172]	; (800258c <ringBufferRead+0x100>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
			 if (readIndex == 15){readIndex = 0;}

       //Then service data packets
       NominalValueCheck(NULL, marionette_data);
    }
}
 80024e4:	e04b      	b.n	800257e <ringBufferRead+0xf2>
	     else if(bufferLength <= SIZE_OF_BUFFER && bufferLength != 0){ // && circular_buffer_readFlag){
 80024e6:	4b28      	ldr	r3, [pc, #160]	; (8002588 <ringBufferRead+0xfc>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <ringBufferRead+0x108>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d845      	bhi.n	800257e <ringBufferRead+0xf2>
 80024f2:	4b25      	ldr	r3, [pc, #148]	; (8002588 <ringBufferRead+0xfc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d041      	beq.n	800257e <ringBufferRead+0xf2>
			 for(int j = 0; circularBuffer[readIndex][j] != '\0'; j++){
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	e004      	b.n	800250a <ringBufferRead+0x7e>
				 counter = j;
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	617b      	str	r3, [r7, #20]
			 for(int j = 0; circularBuffer[readIndex][j] != '\0'; j++){
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	3301      	adds	r3, #1
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	4b23      	ldr	r3, [pc, #140]	; (8002598 <ringBufferRead+0x10c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a20      	ldr	r2, [pc, #128]	; (8002590 <ringBufferRead+0x104>)
 8002510:	21fa      	movs	r1, #250	; 0xfa
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	441a      	add	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4413      	add	r3, r2
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1ee      	bne.n	8002500 <ringBufferRead+0x74>
			 for (int i = 0; i < counter+1; i++){
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	e011      	b.n	800254c <ringBufferRead+0xc0>
				 marionette_data[i] = circularBuffer[readIndex][i];
 8002528:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <ringBufferRead+0x10c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a18      	ldr	r2, [pc, #96]	; (8002590 <ringBufferRead+0x104>)
 800252e:	21fa      	movs	r1, #250	; 0xfa
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	441a      	add	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	7819      	ldrb	r1, [r3, #0]
 800253c:	4a17      	ldr	r2, [pc, #92]	; (800259c <ringBufferRead+0x110>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	460a      	mov	r2, r1
 8002544:	701a      	strb	r2, [r3, #0]
			 for (int i = 0; i < counter+1; i++){
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3301      	adds	r3, #1
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	429a      	cmp	r2, r3
 8002552:	dae9      	bge.n	8002528 <ringBufferRead+0x9c>
			 bufferLength --;
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <ringBufferRead+0xfc>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	3b01      	subs	r3, #1
 800255a:	4a0b      	ldr	r2, [pc, #44]	; (8002588 <ringBufferRead+0xfc>)
 800255c:	6013      	str	r3, [r2, #0]
			 readIndex ++;
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <ringBufferRead+0x10c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	3301      	adds	r3, #1
 8002564:	4a0c      	ldr	r2, [pc, #48]	; (8002598 <ringBufferRead+0x10c>)
 8002566:	6013      	str	r3, [r2, #0]
			 if (readIndex == 15){readIndex = 0;}
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <ringBufferRead+0x10c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b0f      	cmp	r3, #15
 800256e:	d102      	bne.n	8002576 <ringBufferRead+0xea>
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <ringBufferRead+0x10c>)
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
       NominalValueCheck(NULL, marionette_data);
 8002576:	4909      	ldr	r1, [pc, #36]	; (800259c <ringBufferRead+0x110>)
 8002578:	2000      	movs	r0, #0
 800257a:	f7ff fc13 	bl	8001da4 <NominalValueCheck>
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2000018c 	.word	0x2000018c
 800258c:	20000220 	.word	0x20000220
 8002590:	200002a8 	.word	0x200002a8
 8002594:	20000090 	.word	0x20000090
 8002598:	20001500 	.word	0x20001500
 800259c:	200013e4 	.word	0x200013e4

080025a0 <Safety>:
#include "safety.h"
#include "messages.h"
#include "ring_buffer.h"


uint32_t Safety(struct StateVars *ctrl) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

	uint32_t success = FALSE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]

	ctrl->valveConfiguration = StateConfiguration();
 80025ac:	f000 fc12 	bl	8002dd4 <StateConfiguration>
 80025b0:	4602      	mov	r2, r0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = (uint16_t) SOV4 | (uint16_t) SOV8;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2288      	movs	r2, #136	; 0x88
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30

	if (VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState)) {
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fbca 	bl	8002d5c <VerifyState>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d048      	beq.n	8002660 <Safety+0xc0>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 fbc1 	bl	8002d5c <VerifyState>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d03f      	beq.n	8002660 <Safety+0xc0>
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e6:	f003 0305 	and.w	r3, r3, #5
 80025ea:	2b05      	cmp	r3, #5
 80025ec:	d12b      	bne.n	8002646 <Safety+0xa6>
			// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
			// | 0  |   0  |   0  |   1  |   0  |   0  |    0|    1  |  0  |  0

			StateStatus(ctrl);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fb5e 	bl	8002cb0 <StateStatus>
			// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002600:	429a      	cmp	r2, r3
 8002602:	d003      	beq.n	800260c <Safety+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fd37 	bl	8003078 <StateInitialize>
 800260a:	60f8      	str	r0, [r7, #12]
    	    }

            ProcessCommands(ctrl);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7fe fe6d 	bl	80012ec <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	429a      	cmp	r2, r3
 800261c:	bf0c      	ite	eq
 800261e:	2301      	moveq	r3, #1
 8002620:	2300      	movne	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	60fb      	str	r3, [r7, #12]

			//NominalValueCheck(ctrl, Rx_Buffer);
			ringBufferRead();
 8002626:	f7ff ff31 	bl	800248c <ringBufferRead>

			ctrl->stateCounter++;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d11f      	bne.n	800267e <Safety+0xde>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 8002644:	e01b      	b.n	800267e <Safety+0xde>

		} else {
			// Log Expected State != Passed State
			Get_State_Disagree_Error_Msg(Tx_Buffer, SAFETY, ctrl->currentState);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800264c:	461a      	mov	r2, r3
 800264e:	2105      	movs	r1, #5
 8002650:	480e      	ldr	r0, [pc, #56]	; (800268c <Safety+0xec>)
 8002652:	f7ff fc2f 	bl	8001eb4 <Get_State_Disagree_Error_Msg>
			UART_SendMessage(&huart2,Tx_Buffer);
 8002656:	490d      	ldr	r1, [pc, #52]	; (800268c <Safety+0xec>)
 8002658:	480d      	ldr	r0, [pc, #52]	; (8002690 <Safety+0xf0>)
 800265a:	f7fe fc73 	bl	8000f44 <UART_SendMessage>
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 800265e:	e00e      	b.n	800267e <Safety+0xde>
		}
	} else {
		// Log Invalid State
		Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800266c:	461a      	mov	r2, r3
 800266e:	4807      	ldr	r0, [pc, #28]	; (800268c <Safety+0xec>)
 8002670:	f7ff fc9a 	bl	8001fa8 <Get_Invalid_State_Error_Msg>
		UART_SendMessage(&huart2,Tx_Buffer);
 8002674:	4905      	ldr	r1, [pc, #20]	; (800268c <Safety+0xec>)
 8002676:	4806      	ldr	r0, [pc, #24]	; (8002690 <Safety+0xf0>)
 8002678:	f7fe fc64 	bl	8000f44 <UART_SendMessage>
 800267c:	e000      	b.n	8002680 <Safety+0xe0>
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 800267e:	bf00      	nop
	}
	return success;
 8002680:	68fb      	ldr	r3, [r7, #12]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000238 	.word	0x20000238
 8002690:	2000145c 	.word	0x2000145c

08002694 <StartHandler>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "start_handler.h"
#include "messages.h"
#include "ring_buffer.h"

uint32_t StartHandler(struct StateVars *ctrl){
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

	uint32_t success = FALSE;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 80026a0:	f000 fb98 	bl	8002dd4 <StateConfiguration>
 80026a4:	4602      	mov	r2, r0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	62da      	str	r2, [r3, #44]	; 0x2c

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState)){
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 fb53 	bl	8002d5c <VerifyState>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d036      	beq.n	800272a <StartHandler+0x96>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fb4a 	bl	8002d5c <VerifyState>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d02d      	beq.n	800272a <StartHandler+0x96>



    		//StateStatus(ctrl);
    		// If this is the first time, initialize state
     		if(ctrl->currentState != ctrl->lastState)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026da:	429a      	cmp	r2, r3
 80026dc:	d006      	beq.n	80026ec <StartHandler+0x58>
    	    {
     			ctrl->valveTarget  = !((uint16_t)SOV1 \
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
     			    					|(uint16_t)SOV6 \
     			    					|(uint16_t)SOV7 \
     			    					|(uint16_t)SOV8 \
     			    					|(uint16_t)SOV9 \
     									|(uint16_t)IG1 );
    	    	success = StateInitialize(ctrl);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 fcc7 	bl	8003078 <StateInitialize>
 80026ea:	60f8      	str	r0, [r7, #12]
    	    }

    		ProcessCommands(ctrl);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7fe fdfd 	bl	80012ec <ProcessCommands>

			success &= (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d101      	bne.n	8002702 <StartHandler+0x6e>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <StartHandler+0x70>
 8002702:	2300      	movs	r3, #0
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4013      	ands	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]

			//nomVal = NominalValueCheck(ctrl);
			//if (nomVal)
			// Read from ring Buffer and check nominal value
			ringBufferRead();
 800270a:	f7ff febf 	bl	800248c <ringBufferRead>

    		// Increment state counter
			ctrl->stateCounter++;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d112      	bne.n	8002748 <StartHandler+0xb4>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & START_HANDLER) == START_HANDLER){
 8002728:	e00e      	b.n	8002748 <StartHandler+0xb4>
    		Get_State_Disagree_Error_Msg(Tx_Buffer, START_HANDLER, ctrl->currentState);
    		UART_SendMessage(&huart2,Tx_Buffer);
    	}
    }else{
    	    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002736:	461a      	mov	r2, r3
 8002738:	4806      	ldr	r0, [pc, #24]	; (8002754 <StartHandler+0xc0>)
 800273a:	f7ff fc35 	bl	8001fa8 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 800273e:	4905      	ldr	r1, [pc, #20]	; (8002754 <StartHandler+0xc0>)
 8002740:	4805      	ldr	r0, [pc, #20]	; (8002758 <StartHandler+0xc4>)
 8002742:	f7fe fbff 	bl	8000f44 <UART_SendMessage>
 8002746:	e000      	b.n	800274a <StartHandler+0xb6>
    	if((ctrl->currentState & START_HANDLER) == START_HANDLER){
 8002748:	bf00      	nop
    }
	return success;
 800274a:	68fb      	ldr	r3, [r7, #12]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000238 	.word	0x20000238
 8002758:	2000145c 	.word	0x2000145c

0800275c <StateMachine>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)

#include "state_machine.h"

void StateMachine(uint32_t control, struct StateVars *ctrl)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
	while(TRUE == control)
 8002766:	e087      	b.n	8002878 <StateMachine+0x11c>
	{
		if(VerifyState(ctrl->currentState))
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800276e:	4618      	mov	r0, r3
 8002770:	f000 faf4 	bl	8002d5c <VerifyState>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d06c      	beq.n	8002854 <StateMachine+0xf8>
		{
			switch(ctrl->currentState)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002780:	2b0c      	cmp	r3, #12
 8002782:	d861      	bhi.n	8002848 <StateMachine+0xec>
 8002784:	a201      	add	r2, pc, #4	; (adr r2, 800278c <StateMachine+0x30>)
 8002786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278a:	bf00      	nop
 800278c:	080027c1 	.word	0x080027c1
 8002790:	080027cd 	.word	0x080027cd
 8002794:	080027d7 	.word	0x080027d7
 8002798:	080027e3 	.word	0x080027e3
 800279c:	080027ef 	.word	0x080027ef
 80027a0:	080027f9 	.word	0x080027f9
 80027a4:	08002803 	.word	0x08002803
 80027a8:	0800280d 	.word	0x0800280d
 80027ac:	08002817 	.word	0x08002817
 80027b0:	08002821 	.word	0x08002821
 80027b4:	0800282b 	.word	0x0800282b
 80027b8:	08002835 	.word	0x08002835
 80027bc:	0800283f 	.word	0x0800283f
			{
			    case START_HANDLER:
			    	control = StartHandler(ctrl);
 80027c0:	6838      	ldr	r0, [r7, #0]
 80027c2:	f7ff ff67 	bl	8002694 <StartHandler>
 80027c6:	4603      	mov	r3, r0
 80027c8:	607b      	str	r3, [r7, #4]
			    	break;
 80027ca:	e055      	b.n	8002878 <StateMachine+0x11c>
				case VALVE_CHECK:
					control = ValveCheck(ctrl);
 80027cc:	6838      	ldr	r0, [r7, #0]
 80027ce:	f001 fceb 	bl	80041a8 <ValveCheck>
 80027d2:	6078      	str	r0, [r7, #4]
					break;
 80027d4:	e050      	b.n	8002878 <StateMachine+0x11c>
				case LOX_PRE_FILL:
					control = LoxPreFill(ctrl);
 80027d6:	6838      	ldr	r0, [r7, #0]
 80027d8:	f7fe faee 	bl	8000db8 <LoxPreFill>
 80027dc:	4603      	mov	r3, r0
 80027de:	607b      	str	r3, [r7, #4]
					break;
 80027e0:	e04a      	b.n	8002878 <StateMachine+0x11c>
				case LOX_FILL:
					control = LoxFill(ctrl);
 80027e2:	6838      	ldr	r0, [r7, #0]
 80027e4:	f7fe fa6e 	bl	8000cc4 <LoxFill>
 80027e8:	4603      	mov	r3, r0
 80027ea:	607b      	str	r3, [r7, #4]
					break;
 80027ec:	e044      	b.n	8002878 <StateMachine+0x11c>
				case LOX_CHILL:
					control = LoxChill(ctrl);
 80027ee:	6838      	ldr	r0, [r7, #0]
 80027f0:	f7fe f9ee 	bl	8000bd0 <LoxChill>
 80027f4:	6078      	str	r0, [r7, #4]
				    break;
 80027f6:	e03f      	b.n	8002878 <StateMachine+0x11c>
			    case SAFETY:
					control = Safety(ctrl);
 80027f8:	6838      	ldr	r0, [r7, #0]
 80027fa:	f7ff fed1 	bl	80025a0 <Safety>
 80027fe:	6078      	str	r0, [r7, #4]
					break;
 8002800:	e03a      	b.n	8002878 <StateMachine+0x11c>
				case PRESSURIZE:
					control = Pressurize(ctrl);
 8002802:	6838      	ldr	r0, [r7, #0]
 8002804:	f7ff fcb8 	bl	8002178 <Pressurize>
 8002808:	6078      	str	r0, [r7, #4]
					break;
 800280a:	e035      	b.n	8002878 <StateMachine+0x11c>
				case IGNITION:
					control = Ignition(ctrl);
 800280c:	6838      	ldr	r0, [r7, #0]
 800280e:	f7fd ffcb 	bl	80007a8 <Ignition>
 8002812:	6078      	str	r0, [r7, #4]
					break;
 8002814:	e030      	b.n	8002878 <StateMachine+0x11c>
				case OXIDIZER_START:
					control = OxidizerStart(ctrl);
 8002816:	6838      	ldr	r0, [r7, #0]
 8002818:	f7ff fc24 	bl	8002064 <OxidizerStart>
 800281c:	6078      	str	r0, [r7, #4]
					break;
 800281e:	e02b      	b.n	8002878 <StateMachine+0x11c>
				case FIRING:
					control = Firing(ctrl);
 8002820:	6838      	ldr	r0, [r7, #0]
 8002822:	f7fd ff37 	bl	8000694 <Firing>
 8002826:	6078      	str	r0, [r7, #4]
					break;
 8002828:	e026      	b.n	8002878 <StateMachine+0x11c>
				case PURGE:
					control = Purge(ctrl);
 800282a:	6838      	ldr	r0, [r7, #0]
 800282c:	f7ff fd14 	bl	8002258 <Purge>
 8002830:	6078      	str	r0, [r7, #4]
					break;
 8002832:	e021      	b.n	8002878 <StateMachine+0x11c>
				case TURN_OFF:
					control = TurnOff(ctrl);
 8002834:	6838      	ldr	r0, [r7, #0]
 8002836:	f000 f9c3 	bl	8002bc0 <TurnOff>
 800283a:	6078      	str	r0, [r7, #4]
					break;
 800283c:	e01c      	b.n	8002878 <StateMachine+0x11c>
				case AUTOMATIC_SHUTDOWN:
					control = AutomaticShutdown(ctrl);
 800283e:	6838      	ldr	r0, [r7, #0]
 8002840:	f7fd fe9a 	bl	8000578 <AutomaticShutdown>
 8002844:	6078      	str	r0, [r7, #4]
					break;
 8002846:	e017      	b.n	8002878 <StateMachine+0x11c>


				default:
					ctrl->currentState = AUTOMATIC_SHUTDOWN;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	220c      	movs	r2, #12
 800284c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
					break;
 8002850:	bf00      	nop
 8002852:	e011      	b.n	8002878 <StateMachine+0x11c>
			}
		}else
		{
			ctrl->currentState = AUTOMATIC_SHUTDOWN;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	220c      	movs	r2, #12
 8002858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	    	// Log Invalid State
	    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002868:	461a      	mov	r2, r3
 800286a:	4808      	ldr	r0, [pc, #32]	; (800288c <StateMachine+0x130>)
 800286c:	f7ff fb9c 	bl	8001fa8 <Get_Invalid_State_Error_Msg>
	    	UART_SendMessage(&huart2,Tx_Buffer);
 8002870:	4906      	ldr	r1, [pc, #24]	; (800288c <StateMachine+0x130>)
 8002872:	4807      	ldr	r0, [pc, #28]	; (8002890 <StateMachine+0x134>)
 8002874:	f7fe fb66 	bl	8000f44 <UART_SendMessage>
	while(TRUE == control)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b01      	cmp	r3, #1
 800287c:	f43f af74 	beq.w	8002768 <StateMachine+0xc>
			//ERROR HANDLE
		}
		// WD check
	}
}
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000238 	.word	0x20000238
 8002890:	2000145c 	.word	0x2000145c

08002894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289a:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <HAL_MspInit+0x44>)
 800289c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289e:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <HAL_MspInit+0x44>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6613      	str	r3, [r2, #96]	; 0x60
 80028a6:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <HAL_MspInit+0x44>)
 80028a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_MspInit+0x44>)
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	4a08      	ldr	r2, [pc, #32]	; (80028d8 <HAL_MspInit+0x44>)
 80028b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028bc:	6593      	str	r3, [r2, #88]	; 0x58
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_MspInit+0x44>)
 80028c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000

080028dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08e      	sub	sp, #56	; 0x38
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a53      	ldr	r2, [pc, #332]	; (8002a48 <HAL_UART_MspInit+0x16c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d131      	bne.n	8002962 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028fe:	4b53      	ldr	r3, [pc, #332]	; (8002a4c <HAL_UART_MspInit+0x170>)
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002902:	4a52      	ldr	r2, [pc, #328]	; (8002a4c <HAL_UART_MspInit+0x170>)
 8002904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002908:	6593      	str	r3, [r2, #88]	; 0x58
 800290a:	4b50      	ldr	r3, [pc, #320]	; (8002a4c <HAL_UART_MspInit+0x170>)
 800290c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	623b      	str	r3, [r7, #32]
 8002914:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002916:	4b4d      	ldr	r3, [pc, #308]	; (8002a4c <HAL_UART_MspInit+0x170>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	4a4c      	ldr	r2, [pc, #304]	; (8002a4c <HAL_UART_MspInit+0x170>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002922:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <HAL_UART_MspInit+0x170>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	61fb      	str	r3, [r7, #28]
 800292c:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800292e:	230c      	movs	r3, #12
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800293e:	2307      	movs	r3, #7
 8002940:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002946:	4619      	mov	r1, r3
 8002948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800294c:	f001 fecc 	bl	80046e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002950:	2200      	movs	r2, #0
 8002952:	2100      	movs	r1, #0
 8002954:	2026      	movs	r0, #38	; 0x26
 8002956:	f001 fe50 	bl	80045fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800295a:	2026      	movs	r0, #38	; 0x26
 800295c:	f001 fe69 	bl	8004632 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002960:	e06d      	b.n	8002a3e <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART3)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a3a      	ldr	r2, [pc, #232]	; (8002a50 <HAL_UART_MspInit+0x174>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d168      	bne.n	8002a3e <HAL_UART_MspInit+0x162>
    __HAL_RCC_USART3_CLK_ENABLE();
 800296c:	4b37      	ldr	r3, [pc, #220]	; (8002a4c <HAL_UART_MspInit+0x170>)
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	4a36      	ldr	r2, [pc, #216]	; (8002a4c <HAL_UART_MspInit+0x170>)
 8002972:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002976:	6593      	str	r3, [r2, #88]	; 0x58
 8002978:	4b34      	ldr	r3, [pc, #208]	; (8002a4c <HAL_UART_MspInit+0x170>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002984:	4b31      	ldr	r3, [pc, #196]	; (8002a4c <HAL_UART_MspInit+0x170>)
 8002986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002988:	4a30      	ldr	r2, [pc, #192]	; (8002a4c <HAL_UART_MspInit+0x170>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002990:	4b2e      	ldr	r3, [pc, #184]	; (8002a4c <HAL_UART_MspInit+0x170>)
 8002992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800299c:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <HAL_UART_MspInit+0x170>)
 800299e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a0:	4a2a      	ldr	r2, [pc, #168]	; (8002a4c <HAL_UART_MspInit+0x170>)
 80029a2:	f043 0304 	orr.w	r3, r3, #4
 80029a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029a8:	4b28      	ldr	r3, [pc, #160]	; (8002a4c <HAL_UART_MspInit+0x170>)
 80029aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b4:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <HAL_UART_MspInit+0x170>)
 80029b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b8:	4a24      	ldr	r2, [pc, #144]	; (8002a4c <HAL_UART_MspInit+0x170>)
 80029ba:	f043 0302 	orr.w	r3, r3, #2
 80029be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029c0:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <HAL_UART_MspInit+0x170>)
 80029c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029cc:	2340      	movs	r3, #64	; 0x40
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d8:	2303      	movs	r3, #3
 80029da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029dc:	2307      	movs	r3, #7
 80029de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e4:	4619      	mov	r1, r3
 80029e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ea:	f001 fe7d 	bl	80046e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80029ee:	2330      	movs	r3, #48	; 0x30
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fa:	2303      	movs	r3, #3
 80029fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029fe:	2307      	movs	r3, #7
 8002a00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a06:	4619      	mov	r1, r3
 8002a08:	4812      	ldr	r0, [pc, #72]	; (8002a54 <HAL_UART_MspInit+0x178>)
 8002a0a:	f001 fe6d 	bl	80046e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a1e:	2307      	movs	r3, #7
 8002a20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a26:	4619      	mov	r1, r3
 8002a28:	480b      	ldr	r0, [pc, #44]	; (8002a58 <HAL_UART_MspInit+0x17c>)
 8002a2a:	f001 fe5d 	bl	80046e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2100      	movs	r1, #0
 8002a32:	2027      	movs	r0, #39	; 0x27
 8002a34:	f001 fde1 	bl	80045fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a38:	2027      	movs	r0, #39	; 0x27
 8002a3a:	f001 fdfa 	bl	8004632 <HAL_NVIC_EnableIRQ>
}
 8002a3e:	bf00      	nop
 8002a40:	3738      	adds	r7, #56	; 0x38
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40004400 	.word	0x40004400
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40004800 	.word	0x40004800
 8002a54:	48000800 	.word	0x48000800
 8002a58:	48000400 	.word	0x48000400

08002a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a60:	e7fe      	b.n	8002a60 <NMI_Handler+0x4>

08002a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a66:	e7fe      	b.n	8002a66 <HardFault_Handler+0x4>

08002a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a6c:	e7fe      	b.n	8002a6c <MemManage_Handler+0x4>

08002a6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a72:	e7fe      	b.n	8002a72 <BusFault_Handler+0x4>

08002a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a78:	e7fe      	b.n	8002a78 <UsageFault_Handler+0x4>

08002a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aa8:	f001 fc88 	bl	80043bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <USART2_IRQHandler+0x10>)
 8002ab6:	f003 fca5 	bl	8006404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	2000145c 	.word	0x2000145c

08002ac4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ac8:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <USART3_IRQHandler+0x10>)
 8002aca:	f003 fc9b 	bl	8006404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000194 	.word	0x20000194

08002ad8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002adc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ae0:	f001 ffdc 	bl	8004a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ae4:	bf00      	nop
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af0:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <_sbrk+0x5c>)
 8002af2:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <_sbrk+0x60>)
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <_sbrk+0x64>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d102      	bne.n	8002b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <_sbrk+0x64>)
 8002b06:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <_sbrk+0x68>)
 8002b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <_sbrk+0x64>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d207      	bcs.n	8002b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b18:	f004 fabe 	bl	8007098 <__errno>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	220c      	movs	r2, #12
 8002b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295
 8002b26:	e009      	b.n	8002b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <_sbrk+0x64>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b2e:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <_sbrk+0x64>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	4a05      	ldr	r2, [pc, #20]	; (8002b4c <_sbrk+0x64>)
 8002b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20018000 	.word	0x20018000
 8002b48:	00000400 	.word	0x00000400
 8002b4c:	20000178 	.word	0x20000178
 8002b50:	20001538 	.word	0x20001538

08002b54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b58:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <SystemInit+0x64>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	4a16      	ldr	r2, [pc, #88]	; (8002bb8 <SystemInit+0x64>)
 8002b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002b68:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <SystemInit+0x68>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a13      	ldr	r2, [pc, #76]	; (8002bbc <SystemInit+0x68>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <SystemInit+0x68>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <SystemInit+0x68>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a0f      	ldr	r2, [pc, #60]	; (8002bbc <SystemInit+0x68>)
 8002b80:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002b84:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002b88:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <SystemInit+0x68>)
 8002b8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b90:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <SystemInit+0x68>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a09      	ldr	r2, [pc, #36]	; (8002bbc <SystemInit+0x68>)
 8002b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002b9e:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <SystemInit+0x68>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ba4:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <SystemInit+0x64>)
 8002ba6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002baa:	609a      	str	r2, [r3, #8]
#endif
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000ed00 	.word	0xe000ed00
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <TurnOff>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "turnoff.h"
#include "ring_buffer.h"


uint32_t TurnOff(struct StateVars *ctrl){
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]

	ctrl->valveConfiguration = StateConfiguration();
 8002bcc:	f000 f902 	bl	8002dd4 <StateConfiguration>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV4  \
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2288      	movs	r2, #136	; 0x88
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
				  |(uint16_t)SOV8);

     //Todo Do we want to set all the valves OFF instead ????

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f8ba 	bl	8002d5c <VerifyState>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d046      	beq.n	8002c7c <TurnOff+0xbc>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 f8b1 	bl	8002d5c <VerifyState>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d03d      	beq.n	8002c7c <TurnOff+0xbc>
    {
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c06:	f003 030b 	and.w	r3, r3, #11
 8002c0a:	2b0b      	cmp	r3, #11
 8002c0c:	d129      	bne.n	8002c62 <TurnOff+0xa2>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8   SOV9  IG1
    		//|  0  |   0  |   0  |   1  |   0  |   0  |   0  |   1  |   0  | 0

    		StateStatus(ctrl);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f84e 	bl	8002cb0 <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d003      	beq.n	8002c2c <TurnOff+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fa27 	bl	8003078 <StateInitialize>
 8002c2a:	60f8      	str	r0, [r7, #12]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	429a      	cmp	r2, r3
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	60fb      	str	r3, [r7, #12]

			//STOP ANY PROCEDURES
			ctrl->isStateMachineRunning = FALSE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	629a      	str	r2, [r3, #40]	; 0x28

    		// Increment state counter
			ctrl->stateCounter++;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c58:	d11f      	bne.n	8002c9a <TurnOff+0xda>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 8002c60:	e01b      	b.n	8002c9a <TurnOff+0xda>

    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, TURN_OFF, ctrl->currentState);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c68:	461a      	mov	r2, r3
 8002c6a:	210b      	movs	r1, #11
 8002c6c:	480e      	ldr	r0, [pc, #56]	; (8002ca8 <TurnOff+0xe8>)
 8002c6e:	f7ff f921 	bl	8001eb4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8002c72:	490d      	ldr	r1, [pc, #52]	; (8002ca8 <TurnOff+0xe8>)
 8002c74:	480d      	ldr	r0, [pc, #52]	; (8002cac <TurnOff+0xec>)
 8002c76:	f7fe f965 	bl	8000f44 <UART_SendMessage>
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 8002c7a:	e00e      	b.n	8002c9a <TurnOff+0xda>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4807      	ldr	r0, [pc, #28]	; (8002ca8 <TurnOff+0xe8>)
 8002c8c:	f7ff f98c 	bl	8001fa8 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 8002c90:	4905      	ldr	r1, [pc, #20]	; (8002ca8 <TurnOff+0xe8>)
 8002c92:	4806      	ldr	r0, [pc, #24]	; (8002cac <TurnOff+0xec>)
 8002c94:	f7fe f956 	bl	8000f44 <UART_SendMessage>
 8002c98:	e000      	b.n	8002c9c <TurnOff+0xdc>
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 8002c9a:	bf00      	nop
    }
 return 0; // end the program
 8002c9c:	2300      	movs	r3, #0

}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000238 	.word	0x20000238
 8002cac:	2000145c 	.word	0x2000145c

08002cb0 <StateStatus>:
#include "utilities.h"
#include "messages.h"
#include "valve_check.h"

//Function that sends the current state status to the user
void StateStatus(struct StateVars *ctrl){
 8002cb0:	b5b0      	push	{r4, r5, r7, lr}
 8002cb2:	b090      	sub	sp, #64	; 0x40
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

     int state = ctrl->currentState;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cbe:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char* naming[] = { [0] = "State : Start Handler\n", [1] = "State : Valve Check\n" ,	\
 8002cc0:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <StateStatus+0x98>)
 8002cc2:	f107 0408 	add.w	r4, r7, #8
 8002cc6:	461d      	mov	r5, r3
 8002cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cd4:	682b      	ldr	r3, [r5, #0]
 8002cd6:	6023      	str	r3, [r4, #0]
		[2] = "State : Lox Pre Fill\n", [3] = "State : Lox Fill\n", [4] = "State : Lox Chill\n",	\
		[5] = "State : Safety\n", [6] = "State : Pressurize\n", [7] = "State : Ignition\n",	[8] = "State : Oxidizer Start\n",\
		[9] = "State : Firing\n", [10] = "State : Purge\n",	[11] = "State : Turn Off\n", [12] = "State : Automatic Shutdown\n"};

		if (ctrl->lastState  != ctrl->currentState){
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d019      	beq.n	8002d1c <StateStatus+0x6c>
			UART_SendMessage(&huart2, naming[state]);
 8002ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4814      	ldr	r0, [pc, #80]	; (8002d4c <StateStatus+0x9c>)
 8002cfa:	f7fe f923 	bl	8000f44 <UART_SendMessage>
			UART_SendMessage_VI(&huart3, naming[state]);
 8002cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002d06:	4413      	add	r3, r2
 8002d08:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4810      	ldr	r0, [pc, #64]	; (8002d50 <StateStatus+0xa0>)
 8002d10:	f7fe f93a 	bl	8000f88 <UART_SendMessage_VI>

			// Flag for the transitioning to the same state
			retransition = FALSE;
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <StateStatus+0xa4>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
			UART_SendMessage(&huart2, naming[state]);
			//UART_SendMessage_VI(&huart3, naming[state]);
			status = FALSE;

		}
}// end of function
 8002d1a:	e011      	b.n	8002d40 <StateStatus+0x90>
		else if(status)
 8002d1c:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <StateStatus+0xa8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00d      	beq.n	8002d40 <StateStatus+0x90>
			UART_SendMessage(&huart2, naming[state]);
 8002d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002d32:	4619      	mov	r1, r3
 8002d34:	4805      	ldr	r0, [pc, #20]	; (8002d4c <StateStatus+0x9c>)
 8002d36:	f7fe f905 	bl	8000f44 <UART_SendMessage>
			status = FALSE;
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <StateStatus+0xa8>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
}// end of function
 8002d40:	bf00      	nop
 8002d42:	3740      	adds	r7, #64	; 0x40
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bdb0      	pop	{r4, r5, r7, pc}
 8002d48:	08007d08 	.word	0x08007d08
 8002d4c:	2000145c 	.word	0x2000145c
 8002d50:	20000194 	.word	0x20000194
 8002d54:	200013e0 	.word	0x200013e0
 8002d58:	2000150c 	.word	0x2000150c

08002d5c <VerifyState>:
 *  	success <uint32_t>: TRUE | FALSE | 1 | 0
 *
 *  Notes:
 */
uint32_t VerifyState(int state)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]

	uint32_t success = FALSE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
    if(state <= TURN_OFF && state >= START_HANDLER)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b0b      	cmp	r3, #11
 8002d6c:	dc27      	bgt.n	8002dbe <VerifyState+0x62>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	db24      	blt.n	8002dbe <VerifyState+0x62>
    {
    	success = TRUE;
 8002d74:	2301      	movs	r3, #1
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b0c      	cmp	r3, #12
 8002d7c:	d81c      	bhi.n	8002db8 <VerifyState+0x5c>
 8002d7e:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <VerifyState+0x28>)
 8002d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d84:	08002dc3 	.word	0x08002dc3
 8002d88:	08002dc3 	.word	0x08002dc3
 8002d8c:	08002dc3 	.word	0x08002dc3
 8002d90:	08002dc3 	.word	0x08002dc3
 8002d94:	08002dc3 	.word	0x08002dc3
 8002d98:	08002dc3 	.word	0x08002dc3
 8002d9c:	08002dc3 	.word	0x08002dc3
 8002da0:	08002dc3 	.word	0x08002dc3
 8002da4:	08002dc3 	.word	0x08002dc3
 8002da8:	08002dc3 	.word	0x08002dc3
 8002dac:	08002dc3 	.word	0x08002dc3
 8002db0:	08002dc3 	.word	0x08002dc3
 8002db4:	08002dc3 	.word	0x08002dc3
				break;
			case TURN_OFF:
				break;

			default:
				success = FALSE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]
				break;
 8002dbc:	e002      	b.n	8002dc4 <VerifyState+0x68>
		}
    }
 8002dbe:	bf00      	nop
 8002dc0:	e000      	b.n	8002dc4 <VerifyState+0x68>
				break;
 8002dc2:	bf00      	nop
	return success;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop

08002dd4 <StateConfiguration>:

// EX- if vc = 0001 then 0001 | 0010 , vc = 0011


uint32_t StateConfiguration()
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
	uint32_t vc = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	607b      	str	r3, [r7, #4]
	//SOV1 - Fuel Pressure (PA_11)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin) << 0);
 8002dde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002de6:	f001 fe29 	bl	8004a3c <HAL_GPIO_ReadPin>
 8002dea:	4603      	mov	r3, r0
 8002dec:	461a      	mov	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	607b      	str	r3, [r7, #4]

	//SOV2 - Lox Pressure (PA_12)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin) << 1);
 8002df4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dfc:	f001 fe1e 	bl	8004a3c <HAL_GPIO_ReadPin>
 8002e00:	4603      	mov	r3, r0
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	461a      	mov	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	607b      	str	r3, [r7, #4]

	//SOV3 - Fuel Purge N2 (PC_7)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin) << 2);
 8002e0c:	2180      	movs	r1, #128	; 0x80
 8002e0e:	482e      	ldr	r0, [pc, #184]	; (8002ec8 <StateConfiguration+0xf4>)
 8002e10:	f001 fe14 	bl	8004a3c <HAL_GPIO_ReadPin>
 8002e14:	4603      	mov	r3, r0
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	461a      	mov	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	607b      	str	r3, [r7, #4]

	//SOV4 - Fuel Vent (PC_6)
	vc |= (uint32_t)(HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin) << 3);
 8002e20:	2140      	movs	r1, #64	; 0x40
 8002e22:	4829      	ldr	r0, [pc, #164]	; (8002ec8 <StateConfiguration+0xf4>)
 8002e24:	f001 fe0a 	bl	8004a3c <HAL_GPIO_ReadPin>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	607b      	str	r3, [r7, #4]

	//SOV5 - Fuel Main (PA_9)
	vc |= (uint32_t)(HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin) << 4);
 8002e34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e3c:	f001 fdfe 	bl	8004a3c <HAL_GPIO_ReadPin>
 8002e40:	4603      	mov	r3, r0
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	461a      	mov	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	607b      	str	r3, [r7, #4]

	//SOV6 - Lox Main (PA_8)
	vc |= (uint32_t)(HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin) << 5);
 8002e4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e54:	f001 fdf2 	bl	8004a3c <HAL_GPIO_ReadPin>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	015b      	lsls	r3, r3, #5
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	607b      	str	r3, [r7, #4]

	//SOV7 - Lox Fill (PB_15)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin) << 6);
 8002e64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e68:	4818      	ldr	r0, [pc, #96]	; (8002ecc <StateConfiguration+0xf8>)
 8002e6a:	f001 fde7 	bl	8004a3c <HAL_GPIO_ReadPin>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	019b      	lsls	r3, r3, #6
 8002e72:	461a      	mov	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	607b      	str	r3, [r7, #4]

	//SOV8 - Lox Vent (PB_10)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin) << 7);
 8002e7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e7e:	4813      	ldr	r0, [pc, #76]	; (8002ecc <StateConfiguration+0xf8>)
 8002e80:	f001 fddc 	bl	8004a3c <HAL_GPIO_ReadPin>
 8002e84:	4603      	mov	r3, r0
 8002e86:	01db      	lsls	r3, r3, #7
 8002e88:	461a      	mov	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	607b      	str	r3, [r7, #4]

	//SOV9 - Lox Purge (PB_13)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin) << 8);
 8002e90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e94:	480d      	ldr	r0, [pc, #52]	; (8002ecc <StateConfiguration+0xf8>)
 8002e96:	f001 fdd1 	bl	8004a3c <HAL_GPIO_ReadPin>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	607b      	str	r3, [r7, #4]

	//IG1 - Igniter (PA_10)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 9);
 8002ea6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eae:	f001 fdc5 	bl	8004a3c <HAL_GPIO_ReadPin>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	025b      	lsls	r3, r3, #9
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	607b      	str	r3, [r7, #4]

	return vc;
 8002ebe:	687b      	ldr	r3, [r7, #4]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	48000800 	.word	0x48000800
 8002ecc:	48000400 	.word	0x48000400

08002ed0 <ValveStateSetter>:
 *
 *  Notes:
 */

uint32_t ValveStateSetter(uint32_t vs)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]
	//SOV1
	(vs & (uint32_t)SOV1) == (uint32_t)SOV1 \
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f003 0301 	and.w	r3, r3, #1
			? HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_RESET);
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <ValveStateSetter+0x26>
			? HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_SET) \
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ef0:	f001 fdbc 	bl	8004a6c <HAL_GPIO_WritePin>
 8002ef4:	e006      	b.n	8002f04 <ValveStateSetter+0x34>
			: HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_RESET);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f00:	f001 fdb4 	bl	8004a6c <HAL_GPIO_WritePin>

	//SOV2
	(vs & (uint32_t)SOV2) == (uint32_t)SOV2 \
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f003 0302 	and.w	r3, r3, #2
			? HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_RESET);
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d007      	beq.n	8002f1e <ValveStateSetter+0x4e>
			? HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_SET) \
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f18:	f001 fda8 	bl	8004a6c <HAL_GPIO_WritePin>
 8002f1c:	e006      	b.n	8002f2c <ValveStateSetter+0x5c>
			: HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_RESET);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f28:	f001 fda0 	bl	8004a6c <HAL_GPIO_WritePin>

	//SOV3
	(vs & (uint32_t)SOV3) == (uint32_t)SOV3 \
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
			? HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_RESET);
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <ValveStateSetter+0x72>
			? HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_SET) \
 8002f36:	2201      	movs	r2, #1
 8002f38:	2180      	movs	r1, #128	; 0x80
 8002f3a:	484d      	ldr	r0, [pc, #308]	; (8003070 <ValveStateSetter+0x1a0>)
 8002f3c:	f001 fd96 	bl	8004a6c <HAL_GPIO_WritePin>
 8002f40:	e004      	b.n	8002f4c <ValveStateSetter+0x7c>
			: HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_RESET);
 8002f42:	2200      	movs	r2, #0
 8002f44:	2180      	movs	r1, #128	; 0x80
 8002f46:	484a      	ldr	r0, [pc, #296]	; (8003070 <ValveStateSetter+0x1a0>)
 8002f48:	f001 fd90 	bl	8004a6c <HAL_GPIO_WritePin>

	//SOV4
	(vs & (uint32_t)SOV4) == (uint32_t)SOV4 \
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
			? HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_RESET);
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <ValveStateSetter+0x92>
			? HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_SET) \
 8002f56:	2201      	movs	r2, #1
 8002f58:	2140      	movs	r1, #64	; 0x40
 8002f5a:	4845      	ldr	r0, [pc, #276]	; (8003070 <ValveStateSetter+0x1a0>)
 8002f5c:	f001 fd86 	bl	8004a6c <HAL_GPIO_WritePin>
 8002f60:	e004      	b.n	8002f6c <ValveStateSetter+0x9c>
			: HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_RESET);
 8002f62:	2200      	movs	r2, #0
 8002f64:	2140      	movs	r1, #64	; 0x40
 8002f66:	4842      	ldr	r0, [pc, #264]	; (8003070 <ValveStateSetter+0x1a0>)
 8002f68:	f001 fd80 	bl	8004a6c <HAL_GPIO_WritePin>

	//SOV5
	(vs & (uint32_t)SOV5) == (uint32_t)SOV5 \
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f003 0310 	and.w	r3, r3, #16
			? HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_RESET);
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d007      	beq.n	8002f86 <ValveStateSetter+0xb6>
			? HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_SET) \
 8002f76:	2201      	movs	r2, #1
 8002f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f80:	f001 fd74 	bl	8004a6c <HAL_GPIO_WritePin>
 8002f84:	e006      	b.n	8002f94 <ValveStateSetter+0xc4>
			: HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_RESET);
 8002f86:	2200      	movs	r2, #0
 8002f88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f90:	f001 fd6c 	bl	8004a6c <HAL_GPIO_WritePin>

	//SOV6
	(vs & (uint32_t)SOV6) == (uint32_t)SOV6 \
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 0320 	and.w	r3, r3, #32
			? HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_RESET);
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d007      	beq.n	8002fae <ValveStateSetter+0xde>
			? HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_SET) \
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fa8:	f001 fd60 	bl	8004a6c <HAL_GPIO_WritePin>
 8002fac:	e006      	b.n	8002fbc <ValveStateSetter+0xec>
			: HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_RESET);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fb8:	f001 fd58 	bl	8004a6c <HAL_GPIO_WritePin>

	//SOV7
	(vs & (uint32_t)SOV7) == (uint32_t)SOV7 \
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
			? HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin ,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin,GPIO_PIN_RESET);
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d006      	beq.n	8002fd4 <ValveStateSetter+0x104>
			? HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin ,GPIO_PIN_SET) \
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fcc:	4829      	ldr	r0, [pc, #164]	; (8003074 <ValveStateSetter+0x1a4>)
 8002fce:	f001 fd4d 	bl	8004a6c <HAL_GPIO_WritePin>
 8002fd2:	e005      	b.n	8002fe0 <ValveStateSetter+0x110>
			: HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin,GPIO_PIN_RESET);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fda:	4826      	ldr	r0, [pc, #152]	; (8003074 <ValveStateSetter+0x1a4>)
 8002fdc:	f001 fd46 	bl	8004a6c <HAL_GPIO_WritePin>

	//SOV8
	(vs & (uint32_t)SOV8) == (uint32_t)SOV8 \
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
			? HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_RESET);
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d006      	beq.n	8002ff8 <ValveStateSetter+0x128>
			? HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_SET) \
 8002fea:	2201      	movs	r2, #1
 8002fec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ff0:	4820      	ldr	r0, [pc, #128]	; (8003074 <ValveStateSetter+0x1a4>)
 8002ff2:	f001 fd3b 	bl	8004a6c <HAL_GPIO_WritePin>
 8002ff6:	e005      	b.n	8003004 <ValveStateSetter+0x134>
			: HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_RESET);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ffe:	481d      	ldr	r0, [pc, #116]	; (8003074 <ValveStateSetter+0x1a4>)
 8003000:	f001 fd34 	bl	8004a6c <HAL_GPIO_WritePin>

	//SOV9
	(vs & (uint32_t)SOV9) == (uint32_t)SOV9 \
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
			? HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_RESET);
 800300a:	2b00      	cmp	r3, #0
 800300c:	d006      	beq.n	800301c <ValveStateSetter+0x14c>
			? HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_SET) \
 800300e:	2201      	movs	r2, #1
 8003010:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003014:	4817      	ldr	r0, [pc, #92]	; (8003074 <ValveStateSetter+0x1a4>)
 8003016:	f001 fd29 	bl	8004a6c <HAL_GPIO_WritePin>
 800301a:	e005      	b.n	8003028 <ValveStateSetter+0x158>
			: HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_RESET);
 800301c:	2200      	movs	r2, #0
 800301e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003022:	4814      	ldr	r0, [pc, #80]	; (8003074 <ValveStateSetter+0x1a4>)
 8003024:	f001 fd22 	bl	8004a6c <HAL_GPIO_WritePin>

	//IG1
	(vs & (uint32_t)IG1) == (uint32_t)IG1 \
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f403 7300 	and.w	r3, r3, #512	; 0x200
			? HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <ValveStateSetter+0x172>
			? HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET) \
 8003032:	2201      	movs	r2, #1
 8003034:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800303c:	f001 fd16 	bl	8004a6c <HAL_GPIO_WritePin>
 8003040:	e006      	b.n	8003050 <ValveStateSetter+0x180>
			: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
 8003042:	2200      	movs	r2, #0
 8003044:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800304c:	f001 fd0e 	bl	8004a6c <HAL_GPIO_WritePin>


	success = (vs == StateConfiguration() ? TRUE : FALSE);
 8003050:	f7ff fec0 	bl	8002dd4 <StateConfiguration>
 8003054:	4602      	mov	r2, r0
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4293      	cmp	r3, r2
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	60fb      	str	r3, [r7, #12]

	return success;
 8003064:	68fb      	ldr	r3, [r7, #12]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	48000800 	.word	0x48000800
 8003074:	48000400 	.word	0x48000400

08003078 <StateInitialize>:
 *  success <uint32_t>: TRUE | FALSE | 1 | 0
 *
 *  Notes:
 */
uint32_t StateInitialize(struct StateVars *ctrl)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8003080:	2300      	movs	r3, #0
 8003082:	60fb      	str	r3, [r7, #12]
	// Reset state counter, log start
	ctrl->stateCounter = 0;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
	ctrl->timeStarted = HAL_GetTick();;
 800308a:	f001 f9ab 	bl	80043e4 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	601a      	str	r2, [r3, #0]

	// Change State conditions
	ctrl->lastState = ctrl->currentState;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	// Set Valve States
	ValveStateSetter(ctrl->valveTarget);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff13 	bl	8002ed0 <ValveStateSetter>
	ctrl->valveConfiguration = StateConfiguration();
 80030aa:	f7ff fe93 	bl	8002dd4 <StateConfiguration>
 80030ae:	4602      	mov	r2, r0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	62da      	str	r2, [r3, #44]	; 0x2c

	///success = SendStatusMessage(ctrl);
	return success;
 80030b4:	68fb      	ldr	r3, [r7, #12]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <ValveCheckCmd>:


//Function to handle individual valves (Part of the Valve check state)
void ValveCheckCmd(struct StateVars *ctrl){
 80030c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c2:	b091      	sub	sp, #68	; 0x44
 80030c4:	af08      	add	r7, sp, #32
 80030c6:	60f8      	str	r0, [r7, #12]

	uint32_t success = TRUE;
 80030c8:	2301      	movs	r3, #1
 80030ca:	61fb      	str	r3, [r7, #28]

    	   if (command == IGON){
 80030cc:	4ba4      	ldr	r3, [pc, #656]	; (8003360 <ValveCheckCmd+0x2a0>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4ba4      	ldr	r3, [pc, #656]	; (8003364 <ValveCheckCmd+0x2a4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d13b      	bne.n	8003150 <ValveCheckCmd+0x90>
				if (cmd_flag && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 80030d8:	4ba3      	ldr	r3, [pc, #652]	; (8003368 <ValveCheckCmd+0x2a8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01f      	beq.n	8003120 <ValveCheckCmd+0x60>
 80030e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030e8:	f001 fca8 	bl	8004a3c <HAL_GPIO_ReadPin>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d116      	bne.n	8003120 <ValveCheckCmd+0x60>
					valves_selected |= (uint16_t)IG1;
 80030f2:	4b9e      	ldr	r3, [pc, #632]	; (800336c <ValveCheckCmd+0x2ac>)
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	4b9b      	ldr	r3, [pc, #620]	; (800336c <ValveCheckCmd+0x2ac>)
 80030fe:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " Igniter is ON...\n");
 8003100:	499b      	ldr	r1, [pc, #620]	; (8003370 <ValveCheckCmd+0x2b0>)
 8003102:	489c      	ldr	r0, [pc, #624]	; (8003374 <ValveCheckCmd+0x2b4>)
 8003104:	f7fd ff1e 	bl	8000f44 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " Igniter is ON...\n");
 8003108:	4999      	ldr	r1, [pc, #612]	; (8003370 <ValveCheckCmd+0x2b0>)
 800310a:	489b      	ldr	r0, [pc, #620]	; (8003378 <ValveCheckCmd+0x2b8>)
 800310c:	f7fd ff3c 	bl	8000f88 <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8003110:	4b95      	ldr	r3, [pc, #596]	; (8003368 <ValveCheckCmd+0x2a8>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
					ignit = 1;
 8003116:	4b99      	ldr	r3, [pc, #612]	; (800337c <ValveCheckCmd+0x2bc>)
 8003118:	2201      	movs	r2, #1
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	f000 bdfc 	b.w	8003d18 <ValveCheckCmd+0xc58>
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 8003120:	4b91      	ldr	r3, [pc, #580]	; (8003368 <ValveCheckCmd+0x2a8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 85f7 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 800312a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800312e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003132:	f001 fc83 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 85ed 	beq.w	8003d18 <ValveCheckCmd+0xc58>
				{
					UART_SendMessage(&huart2, " Igniter is already ON...\n");
 800313e:	4990      	ldr	r1, [pc, #576]	; (8003380 <ValveCheckCmd+0x2c0>)
 8003140:	488c      	ldr	r0, [pc, #560]	; (8003374 <ValveCheckCmd+0x2b4>)
 8003142:	f7fd feff 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 8003146:	4b88      	ldr	r3, [pc, #544]	; (8003368 <ValveCheckCmd+0x2a8>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	f000 bde4 	b.w	8003d18 <ValveCheckCmd+0xc58>
				}
			}
			else if (command == IGOFF){
 8003150:	4b83      	ldr	r3, [pc, #524]	; (8003360 <ValveCheckCmd+0x2a0>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4b8b      	ldr	r3, [pc, #556]	; (8003384 <ValveCheckCmd+0x2c4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d13a      	bne.n	80031d2 <ValveCheckCmd+0x112>
				if (cmd_flag && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 800315c:	4b82      	ldr	r3, [pc, #520]	; (8003368 <ValveCheckCmd+0x2a8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01e      	beq.n	80031a2 <ValveCheckCmd+0xe2>
 8003164:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800316c:	f001 fc66 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d015      	beq.n	80031a2 <ValveCheckCmd+0xe2>
					valves_selected &= 0xFF;
 8003176:	4b7d      	ldr	r3, [pc, #500]	; (800336c <ValveCheckCmd+0x2ac>)
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	b29a      	uxth	r2, r3
 800317e:	4b7b      	ldr	r3, [pc, #492]	; (800336c <ValveCheckCmd+0x2ac>)
 8003180:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " Igniter is OFF...\n");
 8003182:	4981      	ldr	r1, [pc, #516]	; (8003388 <ValveCheckCmd+0x2c8>)
 8003184:	487b      	ldr	r0, [pc, #492]	; (8003374 <ValveCheckCmd+0x2b4>)
 8003186:	f7fd fedd 	bl	8000f44 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " Igniter is OFF...\n");
 800318a:	497f      	ldr	r1, [pc, #508]	; (8003388 <ValveCheckCmd+0x2c8>)
 800318c:	487a      	ldr	r0, [pc, #488]	; (8003378 <ValveCheckCmd+0x2b8>)
 800318e:	f7fd fefb 	bl	8000f88 <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8003192:	4b75      	ldr	r3, [pc, #468]	; (8003368 <ValveCheckCmd+0x2a8>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
					ignit = 0;
 8003198:	4b78      	ldr	r3, [pc, #480]	; (800337c <ValveCheckCmd+0x2bc>)
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	f000 bdbb 	b.w	8003d18 <ValveCheckCmd+0xc58>

				}
				else if (cmd_flag && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 80031a2:	4b71      	ldr	r3, [pc, #452]	; (8003368 <ValveCheckCmd+0x2a8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 85b6 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 80031ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031b4:	f001 fc42 	bl	8004a3c <HAL_GPIO_ReadPin>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f040 85ac 	bne.w	8003d18 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " Igniter is already OFF...\n");
 80031c0:	4972      	ldr	r1, [pc, #456]	; (800338c <ValveCheckCmd+0x2cc>)
 80031c2:	486c      	ldr	r0, [pc, #432]	; (8003374 <ValveCheckCmd+0x2b4>)
 80031c4:	f7fd febe 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 80031c8:	4b67      	ldr	r3, [pc, #412]	; (8003368 <ValveCheckCmd+0x2a8>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	f000 bda3 	b.w	8003d18 <ValveCheckCmd+0xc58>
				}

			}
			else if(command == SOV1ON){
 80031d2:	4b63      	ldr	r3, [pc, #396]	; (8003360 <ValveCheckCmd+0x2a0>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	4b6e      	ldr	r3, [pc, #440]	; (8003390 <ValveCheckCmd+0x2d0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d13b      	bne.n	8003256 <ValveCheckCmd+0x196>
				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 80031de:	4b62      	ldr	r3, [pc, #392]	; (8003368 <ValveCheckCmd+0x2a8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d01f      	beq.n	8003226 <ValveCheckCmd+0x166>
 80031e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031ee:	f001 fc25 	bl	8004a3c <HAL_GPIO_ReadPin>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d116      	bne.n	8003226 <ValveCheckCmd+0x166>
					valves_selected |= (uint16_t)SOV1;
 80031f8:	4b5c      	ldr	r3, [pc, #368]	; (800336c <ValveCheckCmd+0x2ac>)
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	4b5a      	ldr	r3, [pc, #360]	; (800336c <ValveCheckCmd+0x2ac>)
 8003204:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV1 is ON...\n");
 8003206:	4963      	ldr	r1, [pc, #396]	; (8003394 <ValveCheckCmd+0x2d4>)
 8003208:	485a      	ldr	r0, [pc, #360]	; (8003374 <ValveCheckCmd+0x2b4>)
 800320a:	f7fd fe9b 	bl	8000f44 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " SOV1 is ON...\n");
 800320e:	4961      	ldr	r1, [pc, #388]	; (8003394 <ValveCheckCmd+0x2d4>)
 8003210:	4859      	ldr	r0, [pc, #356]	; (8003378 <ValveCheckCmd+0x2b8>)
 8003212:	f7fd feb9 	bl	8000f88 <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8003216:	4b54      	ldr	r3, [pc, #336]	; (8003368 <ValveCheckCmd+0x2a8>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
					v1 =1;
 800321c:	4b5e      	ldr	r3, [pc, #376]	; (8003398 <ValveCheckCmd+0x2d8>)
 800321e:	2201      	movs	r2, #1
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	f000 bd79 	b.w	8003d18 <ValveCheckCmd+0xc58>
				}
				else if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 8003226:	4b50      	ldr	r3, [pc, #320]	; (8003368 <ValveCheckCmd+0x2a8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 8574 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 8003230:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003238:	f001 fc00 	bl	8004a3c <HAL_GPIO_ReadPin>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 856a 	beq.w	8003d18 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " SOV1 is already ON...\n");
 8003244:	4955      	ldr	r1, [pc, #340]	; (800339c <ValveCheckCmd+0x2dc>)
 8003246:	484b      	ldr	r0, [pc, #300]	; (8003374 <ValveCheckCmd+0x2b4>)
 8003248:	f7fd fe7c 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 800324c:	4b46      	ldr	r3, [pc, #280]	; (8003368 <ValveCheckCmd+0x2a8>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	f000 bd61 	b.w	8003d18 <ValveCheckCmd+0xc58>
				}
			}
			else if (command == SOV1OFF){
 8003256:	4b42      	ldr	r3, [pc, #264]	; (8003360 <ValveCheckCmd+0x2a0>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	4b51      	ldr	r3, [pc, #324]	; (80033a0 <ValveCheckCmd+0x2e0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d13c      	bne.n	80032dc <ValveCheckCmd+0x21c>
				if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 8003262:	4b41      	ldr	r3, [pc, #260]	; (8003368 <ValveCheckCmd+0x2a8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d020      	beq.n	80032ac <ValveCheckCmd+0x1ec>
 800326a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800326e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003272:	f001 fbe3 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d017      	beq.n	80032ac <ValveCheckCmd+0x1ec>
					valves_selected &= 0x3FE;
 800327c:	4b3b      	ldr	r3, [pc, #236]	; (800336c <ValveCheckCmd+0x2ac>)
 800327e:	881a      	ldrh	r2, [r3, #0]
 8003280:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8003284:	4013      	ands	r3, r2
 8003286:	b29a      	uxth	r2, r3
 8003288:	4b38      	ldr	r3, [pc, #224]	; (800336c <ValveCheckCmd+0x2ac>)
 800328a:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV1 is OFF...\n");
 800328c:	4945      	ldr	r1, [pc, #276]	; (80033a4 <ValveCheckCmd+0x2e4>)
 800328e:	4839      	ldr	r0, [pc, #228]	; (8003374 <ValveCheckCmd+0x2b4>)
 8003290:	f7fd fe58 	bl	8000f44 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " SOV1 is OFF...\n");
 8003294:	4943      	ldr	r1, [pc, #268]	; (80033a4 <ValveCheckCmd+0x2e4>)
 8003296:	4838      	ldr	r0, [pc, #224]	; (8003378 <ValveCheckCmd+0x2b8>)
 8003298:	f7fd fe76 	bl	8000f88 <UART_SendMessage_VI>
					cmd_flag = FALSE;
 800329c:	4b32      	ldr	r3, [pc, #200]	; (8003368 <ValveCheckCmd+0x2a8>)
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
					v1=0;
 80032a2:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <ValveCheckCmd+0x2d8>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	f000 bd36 	b.w	8003d18 <ValveCheckCmd+0xc58>
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 80032ac:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <ValveCheckCmd+0x2a8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8531 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 80032b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032be:	f001 fbbd 	bl	8004a3c <HAL_GPIO_ReadPin>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f040 8527 	bne.w	8003d18 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " SOV1 is already OFF...\n");
 80032ca:	4937      	ldr	r1, [pc, #220]	; (80033a8 <ValveCheckCmd+0x2e8>)
 80032cc:	4829      	ldr	r0, [pc, #164]	; (8003374 <ValveCheckCmd+0x2b4>)
 80032ce:	f7fd fe39 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 80032d2:	4b25      	ldr	r3, [pc, #148]	; (8003368 <ValveCheckCmd+0x2a8>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	f000 bd1e 	b.w	8003d18 <ValveCheckCmd+0xc58>
				}
			}
			else if(command == SOV2ON){
 80032dc:	4b20      	ldr	r3, [pc, #128]	; (8003360 <ValveCheckCmd+0x2a0>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4b32      	ldr	r3, [pc, #200]	; (80033ac <ValveCheckCmd+0x2ec>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d169      	bne.n	80033bc <ValveCheckCmd+0x2fc>
				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 80032e8:	4b1f      	ldr	r3, [pc, #124]	; (8003368 <ValveCheckCmd+0x2a8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01f      	beq.n	8003330 <ValveCheckCmd+0x270>
 80032f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032f8:	f001 fba0 	bl	8004a3c <HAL_GPIO_ReadPin>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d116      	bne.n	8003330 <ValveCheckCmd+0x270>
					valves_selected |= (uint16_t)SOV2;
 8003302:	4b1a      	ldr	r3, [pc, #104]	; (800336c <ValveCheckCmd+0x2ac>)
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	f043 0302 	orr.w	r3, r3, #2
 800330a:	b29a      	uxth	r2, r3
 800330c:	4b17      	ldr	r3, [pc, #92]	; (800336c <ValveCheckCmd+0x2ac>)
 800330e:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV2 is ON...\n");
 8003310:	4927      	ldr	r1, [pc, #156]	; (80033b0 <ValveCheckCmd+0x2f0>)
 8003312:	4818      	ldr	r0, [pc, #96]	; (8003374 <ValveCheckCmd+0x2b4>)
 8003314:	f7fd fe16 	bl	8000f44 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " SOV2 is ON...\n");
 8003318:	4925      	ldr	r1, [pc, #148]	; (80033b0 <ValveCheckCmd+0x2f0>)
 800331a:	4817      	ldr	r0, [pc, #92]	; (8003378 <ValveCheckCmd+0x2b8>)
 800331c:	f7fd fe34 	bl	8000f88 <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <ValveCheckCmd+0x2a8>)
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
					v2=1;
 8003326:	4b23      	ldr	r3, [pc, #140]	; (80033b4 <ValveCheckCmd+0x2f4>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	f000 bcf4 	b.w	8003d18 <ValveCheckCmd+0xc58>

				}
				else if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 8003330:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <ValveCheckCmd+0x2a8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 84ef 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 800333a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800333e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003342:	f001 fb7b 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 84e5 	beq.w	8003d18 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " SOV2 is already ON...\n");
 800334e:	491a      	ldr	r1, [pc, #104]	; (80033b8 <ValveCheckCmd+0x2f8>)
 8003350:	4808      	ldr	r0, [pc, #32]	; (8003374 <ValveCheckCmd+0x2b4>)
 8003352:	f7fd fdf7 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 8003356:	4b04      	ldr	r3, [pc, #16]	; (8003368 <ValveCheckCmd+0x2a8>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	f000 bcdc 	b.w	8003d18 <ValveCheckCmd+0xc58>
 8003360:	2000022c 	.word	0x2000022c
 8003364:	200000a0 	.word	0x200000a0
 8003368:	2000125c 	.word	0x2000125c
 800336c:	20001520 	.word	0x20001520
 8003370:	08007d3c 	.word	0x08007d3c
 8003374:	2000145c 	.word	0x2000145c
 8003378:	20000194 	.word	0x20000194
 800337c:	20001248 	.word	0x20001248
 8003380:	08007d50 	.word	0x08007d50
 8003384:	200000a4 	.word	0x200000a4
 8003388:	08007d6c 	.word	0x08007d6c
 800338c:	08007d80 	.word	0x08007d80
 8003390:	200000a8 	.word	0x200000a8
 8003394:	08007d9c 	.word	0x08007d9c
 8003398:	2000021c 	.word	0x2000021c
 800339c:	08007dac 	.word	0x08007dac
 80033a0:	200000ac 	.word	0x200000ac
 80033a4:	08007dc4 	.word	0x08007dc4
 80033a8:	08007dd8 	.word	0x08007dd8
 80033ac:	200000b0 	.word	0x200000b0
 80033b0:	08007df4 	.word	0x08007df4
 80033b4:	20001364 	.word	0x20001364
 80033b8:	08007e04 	.word	0x08007e04
				}

			}
			else if (command == SOV2OFF){
 80033bc:	4b9b      	ldr	r3, [pc, #620]	; (800362c <ValveCheckCmd+0x56c>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b9b      	ldr	r3, [pc, #620]	; (8003630 <ValveCheckCmd+0x570>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d13c      	bne.n	8003442 <ValveCheckCmd+0x382>
				if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 80033c8:	4b9a      	ldr	r3, [pc, #616]	; (8003634 <ValveCheckCmd+0x574>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d020      	beq.n	8003412 <ValveCheckCmd+0x352>
 80033d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033d8:	f001 fb30 	bl	8004a3c <HAL_GPIO_ReadPin>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d017      	beq.n	8003412 <ValveCheckCmd+0x352>
					valves_selected &= 0x1FD;
 80033e2:	4b95      	ldr	r3, [pc, #596]	; (8003638 <ValveCheckCmd+0x578>)
 80033e4:	881a      	ldrh	r2, [r3, #0]
 80033e6:	f240 13fd 	movw	r3, #509	; 0x1fd
 80033ea:	4013      	ands	r3, r2
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	4b92      	ldr	r3, [pc, #584]	; (8003638 <ValveCheckCmd+0x578>)
 80033f0:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV2 is OFF...\n");
 80033f2:	4992      	ldr	r1, [pc, #584]	; (800363c <ValveCheckCmd+0x57c>)
 80033f4:	4892      	ldr	r0, [pc, #584]	; (8003640 <ValveCheckCmd+0x580>)
 80033f6:	f7fd fda5 	bl	8000f44 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " SOV2 is OFF...\n");
 80033fa:	4990      	ldr	r1, [pc, #576]	; (800363c <ValveCheckCmd+0x57c>)
 80033fc:	4891      	ldr	r0, [pc, #580]	; (8003644 <ValveCheckCmd+0x584>)
 80033fe:	f7fd fdc3 	bl	8000f88 <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8003402:	4b8c      	ldr	r3, [pc, #560]	; (8003634 <ValveCheckCmd+0x574>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
					v2=0;
 8003408:	4b8f      	ldr	r3, [pc, #572]	; (8003648 <ValveCheckCmd+0x588>)
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	f000 bc83 	b.w	8003d18 <ValveCheckCmd+0xc58>
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 8003412:	4b88      	ldr	r3, [pc, #544]	; (8003634 <ValveCheckCmd+0x574>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 847e 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 800341c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003424:	f001 fb0a 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	f040 8474 	bne.w	8003d18 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " SOV2 is already OFF...\n");
 8003430:	4986      	ldr	r1, [pc, #536]	; (800364c <ValveCheckCmd+0x58c>)
 8003432:	4883      	ldr	r0, [pc, #524]	; (8003640 <ValveCheckCmd+0x580>)
 8003434:	f7fd fd86 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 8003438:	4b7e      	ldr	r3, [pc, #504]	; (8003634 <ValveCheckCmd+0x574>)
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	f000 bc6b 	b.w	8003d18 <ValveCheckCmd+0xc58>
				}
			}
			else if(command == SOV3ON){
 8003442:	4b7a      	ldr	r3, [pc, #488]	; (800362c <ValveCheckCmd+0x56c>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4b82      	ldr	r3, [pc, #520]	; (8003650 <ValveCheckCmd+0x590>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d137      	bne.n	80034be <ValveCheckCmd+0x3fe>
				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin))){
 800344e:	4b79      	ldr	r3, [pc, #484]	; (8003634 <ValveCheckCmd+0x574>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01d      	beq.n	8003492 <ValveCheckCmd+0x3d2>
 8003456:	2180      	movs	r1, #128	; 0x80
 8003458:	487e      	ldr	r0, [pc, #504]	; (8003654 <ValveCheckCmd+0x594>)
 800345a:	f001 faef 	bl	8004a3c <HAL_GPIO_ReadPin>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d116      	bne.n	8003492 <ValveCheckCmd+0x3d2>
					valves_selected |= (uint16_t)SOV3;
 8003464:	4b74      	ldr	r3, [pc, #464]	; (8003638 <ValveCheckCmd+0x578>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	f043 0304 	orr.w	r3, r3, #4
 800346c:	b29a      	uxth	r2, r3
 800346e:	4b72      	ldr	r3, [pc, #456]	; (8003638 <ValveCheckCmd+0x578>)
 8003470:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV3 is ON...\n");
 8003472:	4979      	ldr	r1, [pc, #484]	; (8003658 <ValveCheckCmd+0x598>)
 8003474:	4872      	ldr	r0, [pc, #456]	; (8003640 <ValveCheckCmd+0x580>)
 8003476:	f7fd fd65 	bl	8000f44 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " SOV3 is ON...\n");
 800347a:	4977      	ldr	r1, [pc, #476]	; (8003658 <ValveCheckCmd+0x598>)
 800347c:	4871      	ldr	r0, [pc, #452]	; (8003644 <ValveCheckCmd+0x584>)
 800347e:	f7fd fd83 	bl	8000f88 <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8003482:	4b6c      	ldr	r3, [pc, #432]	; (8003634 <ValveCheckCmd+0x574>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
					v3=1;
 8003488:	4b74      	ldr	r3, [pc, #464]	; (800365c <ValveCheckCmd+0x59c>)
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	f000 bc43 	b.w	8003d18 <ValveCheckCmd+0xc58>
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin)){
 8003492:	4b68      	ldr	r3, [pc, #416]	; (8003634 <ValveCheckCmd+0x574>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 843e 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 800349c:	2180      	movs	r1, #128	; 0x80
 800349e:	486d      	ldr	r0, [pc, #436]	; (8003654 <ValveCheckCmd+0x594>)
 80034a0:	f001 facc 	bl	8004a3c <HAL_GPIO_ReadPin>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 8436 	beq.w	8003d18 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " SOV3 is already ON...\n");
 80034ac:	496c      	ldr	r1, [pc, #432]	; (8003660 <ValveCheckCmd+0x5a0>)
 80034ae:	4864      	ldr	r0, [pc, #400]	; (8003640 <ValveCheckCmd+0x580>)
 80034b0:	f7fd fd48 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 80034b4:	4b5f      	ldr	r3, [pc, #380]	; (8003634 <ValveCheckCmd+0x574>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	f000 bc2d 	b.w	8003d18 <ValveCheckCmd+0xc58>
				}
			}
			else if (command == SOV3OFF){
 80034be:	4b5b      	ldr	r3, [pc, #364]	; (800362c <ValveCheckCmd+0x56c>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	4b68      	ldr	r3, [pc, #416]	; (8003664 <ValveCheckCmd+0x5a4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d137      	bne.n	800353a <ValveCheckCmd+0x47a>
				if (cmd_flag && HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin)){
 80034ca:	4b5a      	ldr	r3, [pc, #360]	; (8003634 <ValveCheckCmd+0x574>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d01e      	beq.n	8003510 <ValveCheckCmd+0x450>
 80034d2:	2180      	movs	r1, #128	; 0x80
 80034d4:	485f      	ldr	r0, [pc, #380]	; (8003654 <ValveCheckCmd+0x594>)
 80034d6:	f001 fab1 	bl	8004a3c <HAL_GPIO_ReadPin>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d017      	beq.n	8003510 <ValveCheckCmd+0x450>
					valves_selected &= 0x3FB;
 80034e0:	4b55      	ldr	r3, [pc, #340]	; (8003638 <ValveCheckCmd+0x578>)
 80034e2:	881a      	ldrh	r2, [r3, #0]
 80034e4:	f240 33fb 	movw	r3, #1019	; 0x3fb
 80034e8:	4013      	ands	r3, r2
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	4b52      	ldr	r3, [pc, #328]	; (8003638 <ValveCheckCmd+0x578>)
 80034ee:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV3 is OFF...\n");
 80034f0:	495d      	ldr	r1, [pc, #372]	; (8003668 <ValveCheckCmd+0x5a8>)
 80034f2:	4853      	ldr	r0, [pc, #332]	; (8003640 <ValveCheckCmd+0x580>)
 80034f4:	f7fd fd26 	bl	8000f44 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " SOV3 is OFF...\n");
 80034f8:	495b      	ldr	r1, [pc, #364]	; (8003668 <ValveCheckCmd+0x5a8>)
 80034fa:	4852      	ldr	r0, [pc, #328]	; (8003644 <ValveCheckCmd+0x584>)
 80034fc:	f7fd fd44 	bl	8000f88 <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8003500:	4b4c      	ldr	r3, [pc, #304]	; (8003634 <ValveCheckCmd+0x574>)
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
					v3=0;
 8003506:	4b55      	ldr	r3, [pc, #340]	; (800365c <ValveCheckCmd+0x59c>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	f000 bc04 	b.w	8003d18 <ValveCheckCmd+0xc58>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin))) {
 8003510:	4b48      	ldr	r3, [pc, #288]	; (8003634 <ValveCheckCmd+0x574>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 83ff 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 800351a:	2180      	movs	r1, #128	; 0x80
 800351c:	484d      	ldr	r0, [pc, #308]	; (8003654 <ValveCheckCmd+0x594>)
 800351e:	f001 fa8d 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	f040 83f7 	bne.w	8003d18 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " SOV3 is already OFF...\n");
 800352a:	4950      	ldr	r1, [pc, #320]	; (800366c <ValveCheckCmd+0x5ac>)
 800352c:	4844      	ldr	r0, [pc, #272]	; (8003640 <ValveCheckCmd+0x580>)
 800352e:	f7fd fd09 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 8003532:	4b40      	ldr	r3, [pc, #256]	; (8003634 <ValveCheckCmd+0x574>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	e3ee      	b.n	8003d18 <ValveCheckCmd+0xc58>
				}
			}
			else if(command == SOV4ON){
 800353a:	4b3c      	ldr	r3, [pc, #240]	; (800362c <ValveCheckCmd+0x56c>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4b4c      	ldr	r3, [pc, #304]	; (8003670 <ValveCheckCmd+0x5b0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d135      	bne.n	80035b2 <ValveCheckCmd+0x4f2>
				if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin))){
 8003546:	4b3b      	ldr	r3, [pc, #236]	; (8003634 <ValveCheckCmd+0x574>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d01c      	beq.n	8003588 <ValveCheckCmd+0x4c8>
 800354e:	2140      	movs	r1, #64	; 0x40
 8003550:	4840      	ldr	r0, [pc, #256]	; (8003654 <ValveCheckCmd+0x594>)
 8003552:	f001 fa73 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d115      	bne.n	8003588 <ValveCheckCmd+0x4c8>
					valves_selected |= (uint16_t)SOV4;
 800355c:	4b36      	ldr	r3, [pc, #216]	; (8003638 <ValveCheckCmd+0x578>)
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	f043 0308 	orr.w	r3, r3, #8
 8003564:	b29a      	uxth	r2, r3
 8003566:	4b34      	ldr	r3, [pc, #208]	; (8003638 <ValveCheckCmd+0x578>)
 8003568:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV4 is ON...\n");
 800356a:	4942      	ldr	r1, [pc, #264]	; (8003674 <ValveCheckCmd+0x5b4>)
 800356c:	4834      	ldr	r0, [pc, #208]	; (8003640 <ValveCheckCmd+0x580>)
 800356e:	f7fd fce9 	bl	8000f44 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " SOV4 is ON...\n");
 8003572:	4940      	ldr	r1, [pc, #256]	; (8003674 <ValveCheckCmd+0x5b4>)
 8003574:	4833      	ldr	r0, [pc, #204]	; (8003644 <ValveCheckCmd+0x584>)
 8003576:	f7fd fd07 	bl	8000f88 <UART_SendMessage_VI>
					cmd_flag = FALSE;
 800357a:	4b2e      	ldr	r3, [pc, #184]	; (8003634 <ValveCheckCmd+0x574>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
					v4=1;
 8003580:	4b3d      	ldr	r3, [pc, #244]	; (8003678 <ValveCheckCmd+0x5b8>)
 8003582:	2201      	movs	r2, #1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e3c7      	b.n	8003d18 <ValveCheckCmd+0xc58>

				}
				else if (cmd_flag && HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin)){
 8003588:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <ValveCheckCmd+0x574>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 83c3 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 8003592:	2140      	movs	r1, #64	; 0x40
 8003594:	482f      	ldr	r0, [pc, #188]	; (8003654 <ValveCheckCmd+0x594>)
 8003596:	f001 fa51 	bl	8004a3c <HAL_GPIO_ReadPin>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 83bb 	beq.w	8003d18 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " SOV4 is already ON...\n");
 80035a2:	4936      	ldr	r1, [pc, #216]	; (800367c <ValveCheckCmd+0x5bc>)
 80035a4:	4826      	ldr	r0, [pc, #152]	; (8003640 <ValveCheckCmd+0x580>)
 80035a6:	f7fd fccd 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 80035aa:	4b22      	ldr	r3, [pc, #136]	; (8003634 <ValveCheckCmd+0x574>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	e3b2      	b.n	8003d18 <ValveCheckCmd+0xc58>
				}
			}
			else if (command == SOV4OFF){
 80035b2:	4b1e      	ldr	r3, [pc, #120]	; (800362c <ValveCheckCmd+0x56c>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	4b32      	ldr	r3, [pc, #200]	; (8003680 <ValveCheckCmd+0x5c0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d166      	bne.n	800368c <ValveCheckCmd+0x5cc>


				if (cmd_flag && HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin)){
 80035be:	4b1d      	ldr	r3, [pc, #116]	; (8003634 <ValveCheckCmd+0x574>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d01d      	beq.n	8003602 <ValveCheckCmd+0x542>
 80035c6:	2140      	movs	r1, #64	; 0x40
 80035c8:	4822      	ldr	r0, [pc, #136]	; (8003654 <ValveCheckCmd+0x594>)
 80035ca:	f001 fa37 	bl	8004a3c <HAL_GPIO_ReadPin>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d016      	beq.n	8003602 <ValveCheckCmd+0x542>
					valves_selected &= 0x3F7;
 80035d4:	4b18      	ldr	r3, [pc, #96]	; (8003638 <ValveCheckCmd+0x578>)
 80035d6:	881a      	ldrh	r2, [r3, #0]
 80035d8:	f240 33f7 	movw	r3, #1015	; 0x3f7
 80035dc:	4013      	ands	r3, r2
 80035de:	b29a      	uxth	r2, r3
 80035e0:	4b15      	ldr	r3, [pc, #84]	; (8003638 <ValveCheckCmd+0x578>)
 80035e2:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV4 is OFF...\n");
 80035e4:	4927      	ldr	r1, [pc, #156]	; (8003684 <ValveCheckCmd+0x5c4>)
 80035e6:	4816      	ldr	r0, [pc, #88]	; (8003640 <ValveCheckCmd+0x580>)
 80035e8:	f7fd fcac 	bl	8000f44 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " SOV4 is OFF...\n");
 80035ec:	4925      	ldr	r1, [pc, #148]	; (8003684 <ValveCheckCmd+0x5c4>)
 80035ee:	4815      	ldr	r0, [pc, #84]	; (8003644 <ValveCheckCmd+0x584>)
 80035f0:	f7fd fcca 	bl	8000f88 <UART_SendMessage_VI>
					cmd_flag = FALSE;
 80035f4:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <ValveCheckCmd+0x574>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
					v4=0;
 80035fa:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <ValveCheckCmd+0x5b8>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	e38a      	b.n	8003d18 <ValveCheckCmd+0xc58>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin))){
 8003602:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <ValveCheckCmd+0x574>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 8386 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 800360c:	2140      	movs	r1, #64	; 0x40
 800360e:	4811      	ldr	r0, [pc, #68]	; (8003654 <ValveCheckCmd+0x594>)
 8003610:	f001 fa14 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 837e 	bne.w	8003d18 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " SOV4 is already OFF...\n");
 800361c:	491a      	ldr	r1, [pc, #104]	; (8003688 <ValveCheckCmd+0x5c8>)
 800361e:	4808      	ldr	r0, [pc, #32]	; (8003640 <ValveCheckCmd+0x580>)
 8003620:	f7fd fc90 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 8003624:	4b03      	ldr	r3, [pc, #12]	; (8003634 <ValveCheckCmd+0x574>)
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e375      	b.n	8003d18 <ValveCheckCmd+0xc58>
 800362c:	2000022c 	.word	0x2000022c
 8003630:	200000b4 	.word	0x200000b4
 8003634:	2000125c 	.word	0x2000125c
 8003638:	20001520 	.word	0x20001520
 800363c:	08007e1c 	.word	0x08007e1c
 8003640:	2000145c 	.word	0x2000145c
 8003644:	20000194 	.word	0x20000194
 8003648:	20001364 	.word	0x20001364
 800364c:	08007e30 	.word	0x08007e30
 8003650:	200000b8 	.word	0x200000b8
 8003654:	48000800 	.word	0x48000800
 8003658:	08007e4c 	.word	0x08007e4c
 800365c:	200002a0 	.word	0x200002a0
 8003660:	08007e5c 	.word	0x08007e5c
 8003664:	200000bc 	.word	0x200000bc
 8003668:	08007e74 	.word	0x08007e74
 800366c:	08007e88 	.word	0x08007e88
 8003670:	200000c0 	.word	0x200000c0
 8003674:	08007ea4 	.word	0x08007ea4
 8003678:	20001514 	.word	0x20001514
 800367c:	08007eb4 	.word	0x08007eb4
 8003680:	200000c4 	.word	0x200000c4
 8003684:	08007ecc 	.word	0x08007ecc
 8003688:	08007ee0 	.word	0x08007ee0
				}
			}
			else if(command == SOV5ON){
 800368c:	4b9f      	ldr	r3, [pc, #636]	; (800390c <ValveCheckCmd+0x84c>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4b9f      	ldr	r3, [pc, #636]	; (8003910 <ValveCheckCmd+0x850>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d139      	bne.n	800370c <ValveCheckCmd+0x64c>
				if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin))){
 8003698:	4b9e      	ldr	r3, [pc, #632]	; (8003914 <ValveCheckCmd+0x854>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01e      	beq.n	80036de <ValveCheckCmd+0x61e>
 80036a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036a8:	f001 f9c8 	bl	8004a3c <HAL_GPIO_ReadPin>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d115      	bne.n	80036de <ValveCheckCmd+0x61e>
					valves_selected |= (uint16_t)SOV5;
 80036b2:	4b99      	ldr	r3, [pc, #612]	; (8003918 <ValveCheckCmd+0x858>)
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	f043 0310 	orr.w	r3, r3, #16
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	4b96      	ldr	r3, [pc, #600]	; (8003918 <ValveCheckCmd+0x858>)
 80036be:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV5 is ON...\n");
 80036c0:	4996      	ldr	r1, [pc, #600]	; (800391c <ValveCheckCmd+0x85c>)
 80036c2:	4897      	ldr	r0, [pc, #604]	; (8003920 <ValveCheckCmd+0x860>)
 80036c4:	f7fd fc3e 	bl	8000f44 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " SOV5 is ON...\n");
 80036c8:	4994      	ldr	r1, [pc, #592]	; (800391c <ValveCheckCmd+0x85c>)
 80036ca:	4896      	ldr	r0, [pc, #600]	; (8003924 <ValveCheckCmd+0x864>)
 80036cc:	f7fd fc5c 	bl	8000f88 <UART_SendMessage_VI>
					cmd_flag = FALSE;
 80036d0:	4b90      	ldr	r3, [pc, #576]	; (8003914 <ValveCheckCmd+0x854>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
					v5=1;
 80036d6:	4b94      	ldr	r3, [pc, #592]	; (8003928 <ValveCheckCmd+0x868>)
 80036d8:	2201      	movs	r2, #1
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	e31c      	b.n	8003d18 <ValveCheckCmd+0xc58>
				}
				else if(cmd_flag && HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin)){
 80036de:	4b8d      	ldr	r3, [pc, #564]	; (8003914 <ValveCheckCmd+0x854>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 8318 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 80036e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036f0:	f001 f9a4 	bl	8004a3c <HAL_GPIO_ReadPin>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 830e 	beq.w	8003d18 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " SOV5 is already ON...\n");
 80036fc:	498b      	ldr	r1, [pc, #556]	; (800392c <ValveCheckCmd+0x86c>)
 80036fe:	4888      	ldr	r0, [pc, #544]	; (8003920 <ValveCheckCmd+0x860>)
 8003700:	f7fd fc20 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 8003704:	4b83      	ldr	r3, [pc, #524]	; (8003914 <ValveCheckCmd+0x854>)
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	e305      	b.n	8003d18 <ValveCheckCmd+0xc58>
				}
			}
			else if (command == SOV5OFF){
 800370c:	4b7f      	ldr	r3, [pc, #508]	; (800390c <ValveCheckCmd+0x84c>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b87      	ldr	r3, [pc, #540]	; (8003930 <ValveCheckCmd+0x870>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d13a      	bne.n	800378e <ValveCheckCmd+0x6ce>


				if (cmd_flag && HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin)){
 8003718:	4b7e      	ldr	r3, [pc, #504]	; (8003914 <ValveCheckCmd+0x854>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01f      	beq.n	8003760 <ValveCheckCmd+0x6a0>
 8003720:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003728:	f001 f988 	bl	8004a3c <HAL_GPIO_ReadPin>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d016      	beq.n	8003760 <ValveCheckCmd+0x6a0>
					valves_selected &= 0x3EF;
 8003732:	4b79      	ldr	r3, [pc, #484]	; (8003918 <ValveCheckCmd+0x858>)
 8003734:	881a      	ldrh	r2, [r3, #0]
 8003736:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800373a:	4013      	ands	r3, r2
 800373c:	b29a      	uxth	r2, r3
 800373e:	4b76      	ldr	r3, [pc, #472]	; (8003918 <ValveCheckCmd+0x858>)
 8003740:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV5 is OFF...\n");
 8003742:	497c      	ldr	r1, [pc, #496]	; (8003934 <ValveCheckCmd+0x874>)
 8003744:	4876      	ldr	r0, [pc, #472]	; (8003920 <ValveCheckCmd+0x860>)
 8003746:	f7fd fbfd 	bl	8000f44 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " SOV5 is OFF...\n");
 800374a:	497a      	ldr	r1, [pc, #488]	; (8003934 <ValveCheckCmd+0x874>)
 800374c:	4875      	ldr	r0, [pc, #468]	; (8003924 <ValveCheckCmd+0x864>)
 800374e:	f7fd fc1b 	bl	8000f88 <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8003752:	4b70      	ldr	r3, [pc, #448]	; (8003914 <ValveCheckCmd+0x854>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
					v5=0;
 8003758:	4b73      	ldr	r3, [pc, #460]	; (8003928 <ValveCheckCmd+0x868>)
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	e2db      	b.n	8003d18 <ValveCheckCmd+0xc58>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin))) {
 8003760:	4b6c      	ldr	r3, [pc, #432]	; (8003914 <ValveCheckCmd+0x854>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 82d7 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 800376a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800376e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003772:	f001 f963 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	f040 82cd 	bne.w	8003d18 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " SOV5 is already OFF...\n");
 800377e:	496e      	ldr	r1, [pc, #440]	; (8003938 <ValveCheckCmd+0x878>)
 8003780:	4867      	ldr	r0, [pc, #412]	; (8003920 <ValveCheckCmd+0x860>)
 8003782:	f7fd fbdf 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 8003786:	4b63      	ldr	r3, [pc, #396]	; (8003914 <ValveCheckCmd+0x854>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e2c4      	b.n	8003d18 <ValveCheckCmd+0xc58>
				}
			}
			else if(command == SOV6ON){
 800378e:	4b5f      	ldr	r3, [pc, #380]	; (800390c <ValveCheckCmd+0x84c>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	4b6a      	ldr	r3, [pc, #424]	; (800393c <ValveCheckCmd+0x87c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d139      	bne.n	800380e <ValveCheckCmd+0x74e>
				if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin))){
 800379a:	4b5e      	ldr	r3, [pc, #376]	; (8003914 <ValveCheckCmd+0x854>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d01e      	beq.n	80037e0 <ValveCheckCmd+0x720>
 80037a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037aa:	f001 f947 	bl	8004a3c <HAL_GPIO_ReadPin>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d115      	bne.n	80037e0 <ValveCheckCmd+0x720>
				valves_selected |= (uint16_t)SOV6;
 80037b4:	4b58      	ldr	r3, [pc, #352]	; (8003918 <ValveCheckCmd+0x858>)
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	f043 0320 	orr.w	r3, r3, #32
 80037bc:	b29a      	uxth	r2, r3
 80037be:	4b56      	ldr	r3, [pc, #344]	; (8003918 <ValveCheckCmd+0x858>)
 80037c0:	801a      	strh	r2, [r3, #0]
				UART_SendMessage(&huart2, " SOV6 is ON...\n");
 80037c2:	495f      	ldr	r1, [pc, #380]	; (8003940 <ValveCheckCmd+0x880>)
 80037c4:	4856      	ldr	r0, [pc, #344]	; (8003920 <ValveCheckCmd+0x860>)
 80037c6:	f7fd fbbd 	bl	8000f44 <UART_SendMessage>
				UART_SendMessage_VI(&huart3, " SOV6 is ON...\n");
 80037ca:	495d      	ldr	r1, [pc, #372]	; (8003940 <ValveCheckCmd+0x880>)
 80037cc:	4855      	ldr	r0, [pc, #340]	; (8003924 <ValveCheckCmd+0x864>)
 80037ce:	f7fd fbdb 	bl	8000f88 <UART_SendMessage_VI>
				cmd_flag = FALSE;
 80037d2:	4b50      	ldr	r3, [pc, #320]	; (8003914 <ValveCheckCmd+0x854>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
				v6=1;
 80037d8:	4b5a      	ldr	r3, [pc, #360]	; (8003944 <ValveCheckCmd+0x884>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e29b      	b.n	8003d18 <ValveCheckCmd+0xc58>

				}
				else if (cmd_flag && HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin)){
 80037e0:	4b4c      	ldr	r3, [pc, #304]	; (8003914 <ValveCheckCmd+0x854>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 8297 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 80037ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037f2:	f001 f923 	bl	8004a3c <HAL_GPIO_ReadPin>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 828d 	beq.w	8003d18 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " SOV6 is already ON...\n");
 80037fe:	4952      	ldr	r1, [pc, #328]	; (8003948 <ValveCheckCmd+0x888>)
 8003800:	4847      	ldr	r0, [pc, #284]	; (8003920 <ValveCheckCmd+0x860>)
 8003802:	f7fd fb9f 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 8003806:	4b43      	ldr	r3, [pc, #268]	; (8003914 <ValveCheckCmd+0x854>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e284      	b.n	8003d18 <ValveCheckCmd+0xc58>
				}
			}
			else if (command == SOV6OFF){
 800380e:	4b3f      	ldr	r3, [pc, #252]	; (800390c <ValveCheckCmd+0x84c>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	4b4e      	ldr	r3, [pc, #312]	; (800394c <ValveCheckCmd+0x88c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d13a      	bne.n	8003890 <ValveCheckCmd+0x7d0>

				if (cmd_flag && HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin)){
 800381a:	4b3e      	ldr	r3, [pc, #248]	; (8003914 <ValveCheckCmd+0x854>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d01f      	beq.n	8003862 <ValveCheckCmd+0x7a2>
 8003822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800382a:	f001 f907 	bl	8004a3c <HAL_GPIO_ReadPin>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d016      	beq.n	8003862 <ValveCheckCmd+0x7a2>
					valves_selected &= 0x3DF;
 8003834:	4b38      	ldr	r3, [pc, #224]	; (8003918 <ValveCheckCmd+0x858>)
 8003836:	881a      	ldrh	r2, [r3, #0]
 8003838:	f240 33df 	movw	r3, #991	; 0x3df
 800383c:	4013      	ands	r3, r2
 800383e:	b29a      	uxth	r2, r3
 8003840:	4b35      	ldr	r3, [pc, #212]	; (8003918 <ValveCheckCmd+0x858>)
 8003842:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV6 is OFF...\n");
 8003844:	4942      	ldr	r1, [pc, #264]	; (8003950 <ValveCheckCmd+0x890>)
 8003846:	4836      	ldr	r0, [pc, #216]	; (8003920 <ValveCheckCmd+0x860>)
 8003848:	f7fd fb7c 	bl	8000f44 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " SOV6 is OFF...\n");
 800384c:	4940      	ldr	r1, [pc, #256]	; (8003950 <ValveCheckCmd+0x890>)
 800384e:	4835      	ldr	r0, [pc, #212]	; (8003924 <ValveCheckCmd+0x864>)
 8003850:	f7fd fb9a 	bl	8000f88 <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8003854:	4b2f      	ldr	r3, [pc, #188]	; (8003914 <ValveCheckCmd+0x854>)
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
					v6=0;
 800385a:	4b3a      	ldr	r3, [pc, #232]	; (8003944 <ValveCheckCmd+0x884>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e25a      	b.n	8003d18 <ValveCheckCmd+0xc58>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin))){
 8003862:	4b2c      	ldr	r3, [pc, #176]	; (8003914 <ValveCheckCmd+0x854>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 8256 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 800386c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003874:	f001 f8e2 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	f040 824c 	bne.w	8003d18 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " SOV6 is already OFF...\n");
 8003880:	4934      	ldr	r1, [pc, #208]	; (8003954 <ValveCheckCmd+0x894>)
 8003882:	4827      	ldr	r0, [pc, #156]	; (8003920 <ValveCheckCmd+0x860>)
 8003884:	f7fd fb5e 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 8003888:	4b22      	ldr	r3, [pc, #136]	; (8003914 <ValveCheckCmd+0x854>)
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e243      	b.n	8003d18 <ValveCheckCmd+0xc58>
				}
			}
			else if(command == SOV7ON){
 8003890:	4b1e      	ldr	r3, [pc, #120]	; (800390c <ValveCheckCmd+0x84c>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	4b30      	ldr	r3, [pc, #192]	; (8003958 <ValveCheckCmd+0x898>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d167      	bne.n	800396c <ValveCheckCmd+0x8ac>


				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin))){
 800389c:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <ValveCheckCmd+0x854>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01d      	beq.n	80038e0 <ValveCheckCmd+0x820>
 80038a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038a8:	482c      	ldr	r0, [pc, #176]	; (800395c <ValveCheckCmd+0x89c>)
 80038aa:	f001 f8c7 	bl	8004a3c <HAL_GPIO_ReadPin>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d115      	bne.n	80038e0 <ValveCheckCmd+0x820>
					valves_selected |= (uint16_t)SOV7;
 80038b4:	4b18      	ldr	r3, [pc, #96]	; (8003918 <ValveCheckCmd+0x858>)
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038bc:	b29a      	uxth	r2, r3
 80038be:	4b16      	ldr	r3, [pc, #88]	; (8003918 <ValveCheckCmd+0x858>)
 80038c0:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV7 is ON...\n");
 80038c2:	4927      	ldr	r1, [pc, #156]	; (8003960 <ValveCheckCmd+0x8a0>)
 80038c4:	4816      	ldr	r0, [pc, #88]	; (8003920 <ValveCheckCmd+0x860>)
 80038c6:	f7fd fb3d 	bl	8000f44 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " SOV7 is ON...\n");
 80038ca:	4925      	ldr	r1, [pc, #148]	; (8003960 <ValveCheckCmd+0x8a0>)
 80038cc:	4815      	ldr	r0, [pc, #84]	; (8003924 <ValveCheckCmd+0x864>)
 80038ce:	f7fd fb5b 	bl	8000f88 <UART_SendMessage_VI>
					cmd_flag = FALSE;
 80038d2:	4b10      	ldr	r3, [pc, #64]	; (8003914 <ValveCheckCmd+0x854>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
					v7=1;
 80038d8:	4b22      	ldr	r3, [pc, #136]	; (8003964 <ValveCheckCmd+0x8a4>)
 80038da:	2201      	movs	r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	e21b      	b.n	8003d18 <ValveCheckCmd+0xc58>
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin)){
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <ValveCheckCmd+0x854>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8217 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 80038ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038ee:	481b      	ldr	r0, [pc, #108]	; (800395c <ValveCheckCmd+0x89c>)
 80038f0:	f001 f8a4 	bl	8004a3c <HAL_GPIO_ReadPin>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 820e 	beq.w	8003d18 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " SOV7 is already ON...\n");
 80038fc:	491a      	ldr	r1, [pc, #104]	; (8003968 <ValveCheckCmd+0x8a8>)
 80038fe:	4808      	ldr	r0, [pc, #32]	; (8003920 <ValveCheckCmd+0x860>)
 8003900:	f7fd fb20 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 8003904:	4b03      	ldr	r3, [pc, #12]	; (8003914 <ValveCheckCmd+0x854>)
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	e205      	b.n	8003d18 <ValveCheckCmd+0xc58>
 800390c:	2000022c 	.word	0x2000022c
 8003910:	200000c8 	.word	0x200000c8
 8003914:	2000125c 	.word	0x2000125c
 8003918:	20001520 	.word	0x20001520
 800391c:	08007efc 	.word	0x08007efc
 8003920:	2000145c 	.word	0x2000145c
 8003924:	20000194 	.word	0x20000194
 8003928:	200013d4 	.word	0x200013d4
 800392c:	08007f0c 	.word	0x08007f0c
 8003930:	200000cc 	.word	0x200000cc
 8003934:	08007f24 	.word	0x08007f24
 8003938:	08007f38 	.word	0x08007f38
 800393c:	200000d0 	.word	0x200000d0
 8003940:	08007f54 	.word	0x08007f54
 8003944:	20000214 	.word	0x20000214
 8003948:	08007f64 	.word	0x08007f64
 800394c:	200000d4 	.word	0x200000d4
 8003950:	08007f7c 	.word	0x08007f7c
 8003954:	08007f90 	.word	0x08007f90
 8003958:	200000d8 	.word	0x200000d8
 800395c:	48000400 	.word	0x48000400
 8003960:	08007fac 	.word	0x08007fac
 8003964:	20000234 	.word	0x20000234
 8003968:	08007fbc 	.word	0x08007fbc
				}
			}
			else if (command == SOV7OFF){
 800396c:	4b9c      	ldr	r3, [pc, #624]	; (8003be0 <ValveCheckCmd+0xb20>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b9c      	ldr	r3, [pc, #624]	; (8003be4 <ValveCheckCmd+0xb24>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d138      	bne.n	80039ea <ValveCheckCmd+0x92a>


				if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin)){
 8003978:	4b9b      	ldr	r3, [pc, #620]	; (8003be8 <ValveCheckCmd+0xb28>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01e      	beq.n	80039be <ValveCheckCmd+0x8fe>
 8003980:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003984:	4899      	ldr	r0, [pc, #612]	; (8003bec <ValveCheckCmd+0xb2c>)
 8003986:	f001 f859 	bl	8004a3c <HAL_GPIO_ReadPin>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d016      	beq.n	80039be <ValveCheckCmd+0x8fe>

					valves_selected &= 0x3BF;
 8003990:	4b97      	ldr	r3, [pc, #604]	; (8003bf0 <ValveCheckCmd+0xb30>)
 8003992:	881a      	ldrh	r2, [r3, #0]
 8003994:	f240 33bf 	movw	r3, #959	; 0x3bf
 8003998:	4013      	ands	r3, r2
 800399a:	b29a      	uxth	r2, r3
 800399c:	4b94      	ldr	r3, [pc, #592]	; (8003bf0 <ValveCheckCmd+0xb30>)
 800399e:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV7 is OFF...\n");
 80039a0:	4994      	ldr	r1, [pc, #592]	; (8003bf4 <ValveCheckCmd+0xb34>)
 80039a2:	4895      	ldr	r0, [pc, #596]	; (8003bf8 <ValveCheckCmd+0xb38>)
 80039a4:	f7fd face 	bl	8000f44 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " SOV7 is OFF...\n");
 80039a8:	4992      	ldr	r1, [pc, #584]	; (8003bf4 <ValveCheckCmd+0xb34>)
 80039aa:	4894      	ldr	r0, [pc, #592]	; (8003bfc <ValveCheckCmd+0xb3c>)
 80039ac:	f7fd faec 	bl	8000f88 <UART_SendMessage_VI>
					cmd_flag = FALSE;
 80039b0:	4b8d      	ldr	r3, [pc, #564]	; (8003be8 <ValveCheckCmd+0xb28>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
					v7=0;
 80039b6:	4b92      	ldr	r3, [pc, #584]	; (8003c00 <ValveCheckCmd+0xb40>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	e1ac      	b.n	8003d18 <ValveCheckCmd+0xc58>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin))) {
 80039be:	4b8a      	ldr	r3, [pc, #552]	; (8003be8 <ValveCheckCmd+0xb28>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 81a8 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 80039c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039cc:	4887      	ldr	r0, [pc, #540]	; (8003bec <ValveCheckCmd+0xb2c>)
 80039ce:	f001 f835 	bl	8004a3c <HAL_GPIO_ReadPin>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f040 819f 	bne.w	8003d18 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " SOV7 is already OFF...\n");
 80039da:	498a      	ldr	r1, [pc, #552]	; (8003c04 <ValveCheckCmd+0xb44>)
 80039dc:	4886      	ldr	r0, [pc, #536]	; (8003bf8 <ValveCheckCmd+0xb38>)
 80039de:	f7fd fab1 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 80039e2:	4b81      	ldr	r3, [pc, #516]	; (8003be8 <ValveCheckCmd+0xb28>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	e196      	b.n	8003d18 <ValveCheckCmd+0xc58>
				}
			}
			else if(command == SOV8ON){
 80039ea:	4b7d      	ldr	r3, [pc, #500]	; (8003be0 <ValveCheckCmd+0xb20>)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	4b86      	ldr	r3, [pc, #536]	; (8003c08 <ValveCheckCmd+0xb48>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d137      	bne.n	8003a66 <ValveCheckCmd+0x9a6>


				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin))){
 80039f6:	4b7c      	ldr	r3, [pc, #496]	; (8003be8 <ValveCheckCmd+0xb28>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01d      	beq.n	8003a3a <ValveCheckCmd+0x97a>
 80039fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a02:	487a      	ldr	r0, [pc, #488]	; (8003bec <ValveCheckCmd+0xb2c>)
 8003a04:	f001 f81a 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d115      	bne.n	8003a3a <ValveCheckCmd+0x97a>
					valves_selected |= (uint16_t)SOV8;
 8003a0e:	4b78      	ldr	r3, [pc, #480]	; (8003bf0 <ValveCheckCmd+0xb30>)
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	4b75      	ldr	r3, [pc, #468]	; (8003bf0 <ValveCheckCmd+0xb30>)
 8003a1a:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV8 is ON...\n");
 8003a1c:	497b      	ldr	r1, [pc, #492]	; (8003c0c <ValveCheckCmd+0xb4c>)
 8003a1e:	4876      	ldr	r0, [pc, #472]	; (8003bf8 <ValveCheckCmd+0xb38>)
 8003a20:	f7fd fa90 	bl	8000f44 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " SOV8 is ON...\n");
 8003a24:	4979      	ldr	r1, [pc, #484]	; (8003c0c <ValveCheckCmd+0xb4c>)
 8003a26:	4875      	ldr	r0, [pc, #468]	; (8003bfc <ValveCheckCmd+0xb3c>)
 8003a28:	f7fd faae 	bl	8000f88 <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8003a2c:	4b6e      	ldr	r3, [pc, #440]	; (8003be8 <ValveCheckCmd+0xb28>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
					v8=1;
 8003a32:	4b77      	ldr	r3, [pc, #476]	; (8003c10 <ValveCheckCmd+0xb50>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	e16e      	b.n	8003d18 <ValveCheckCmd+0xc58>
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin)){
 8003a3a:	4b6b      	ldr	r3, [pc, #428]	; (8003be8 <ValveCheckCmd+0xb28>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 816a 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 8003a44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a48:	4868      	ldr	r0, [pc, #416]	; (8003bec <ValveCheckCmd+0xb2c>)
 8003a4a:	f000 fff7 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8161 	beq.w	8003d18 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " SOV8 is already ON...\n");
 8003a56:	496f      	ldr	r1, [pc, #444]	; (8003c14 <ValveCheckCmd+0xb54>)
 8003a58:	4867      	ldr	r0, [pc, #412]	; (8003bf8 <ValveCheckCmd+0xb38>)
 8003a5a:	f7fd fa73 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 8003a5e:	4b62      	ldr	r3, [pc, #392]	; (8003be8 <ValveCheckCmd+0xb28>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	e158      	b.n	8003d18 <ValveCheckCmd+0xc58>
				}
			}
			else if (command == SOV8OFF){
 8003a66:	4b5e      	ldr	r3, [pc, #376]	; (8003be0 <ValveCheckCmd+0xb20>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4b6b      	ldr	r3, [pc, #428]	; (8003c18 <ValveCheckCmd+0xb58>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d138      	bne.n	8003ae4 <ValveCheckCmd+0xa24>

				if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin)){
 8003a72:	4b5d      	ldr	r3, [pc, #372]	; (8003be8 <ValveCheckCmd+0xb28>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d01e      	beq.n	8003ab8 <ValveCheckCmd+0x9f8>
 8003a7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a7e:	485b      	ldr	r0, [pc, #364]	; (8003bec <ValveCheckCmd+0xb2c>)
 8003a80:	f000 ffdc 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d016      	beq.n	8003ab8 <ValveCheckCmd+0x9f8>
					valves_selected &= 0X37F;
 8003a8a:	4b59      	ldr	r3, [pc, #356]	; (8003bf0 <ValveCheckCmd+0xb30>)
 8003a8c:	881a      	ldrh	r2, [r3, #0]
 8003a8e:	f240 337f 	movw	r3, #895	; 0x37f
 8003a92:	4013      	ands	r3, r2
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	4b56      	ldr	r3, [pc, #344]	; (8003bf0 <ValveCheckCmd+0xb30>)
 8003a98:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV8 is OFF...\n");
 8003a9a:	4960      	ldr	r1, [pc, #384]	; (8003c1c <ValveCheckCmd+0xb5c>)
 8003a9c:	4856      	ldr	r0, [pc, #344]	; (8003bf8 <ValveCheckCmd+0xb38>)
 8003a9e:	f7fd fa51 	bl	8000f44 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " SOV8 is OFF...\n");
 8003aa2:	495e      	ldr	r1, [pc, #376]	; (8003c1c <ValveCheckCmd+0xb5c>)
 8003aa4:	4855      	ldr	r0, [pc, #340]	; (8003bfc <ValveCheckCmd+0xb3c>)
 8003aa6:	f7fd fa6f 	bl	8000f88 <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8003aaa:	4b4f      	ldr	r3, [pc, #316]	; (8003be8 <ValveCheckCmd+0xb28>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
					v8=0;
 8003ab0:	4b57      	ldr	r3, [pc, #348]	; (8003c10 <ValveCheckCmd+0xb50>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	e12f      	b.n	8003d18 <ValveCheckCmd+0xc58>
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin))){
 8003ab8:	4b4b      	ldr	r3, [pc, #300]	; (8003be8 <ValveCheckCmd+0xb28>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 812b 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 8003ac2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ac6:	4849      	ldr	r0, [pc, #292]	; (8003bec <ValveCheckCmd+0xb2c>)
 8003ac8:	f000 ffb8 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f040 8122 	bne.w	8003d18 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " SOV8 is already OFF...\n");
 8003ad4:	4952      	ldr	r1, [pc, #328]	; (8003c20 <ValveCheckCmd+0xb60>)
 8003ad6:	4848      	ldr	r0, [pc, #288]	; (8003bf8 <ValveCheckCmd+0xb38>)
 8003ad8:	f7fd fa34 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 8003adc:	4b42      	ldr	r3, [pc, #264]	; (8003be8 <ValveCheckCmd+0xb28>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	e119      	b.n	8003d18 <ValveCheckCmd+0xc58>
				}
			}
			else if(command == SOV9ON){
 8003ae4:	4b3e      	ldr	r3, [pc, #248]	; (8003be0 <ValveCheckCmd+0xb20>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	4b4e      	ldr	r3, [pc, #312]	; (8003c24 <ValveCheckCmd+0xb64>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d137      	bne.n	8003b60 <ValveCheckCmd+0xaa0>


				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin))){
 8003af0:	4b3d      	ldr	r3, [pc, #244]	; (8003be8 <ValveCheckCmd+0xb28>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d01d      	beq.n	8003b34 <ValveCheckCmd+0xa74>
 8003af8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003afc:	483b      	ldr	r0, [pc, #236]	; (8003bec <ValveCheckCmd+0xb2c>)
 8003afe:	f000 ff9d 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d115      	bne.n	8003b34 <ValveCheckCmd+0xa74>
					valves_selected |= (uint16_t)SOV9;
 8003b08:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <ValveCheckCmd+0xb30>)
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	4b37      	ldr	r3, [pc, #220]	; (8003bf0 <ValveCheckCmd+0xb30>)
 8003b14:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV9 is ON...\n");
 8003b16:	4944      	ldr	r1, [pc, #272]	; (8003c28 <ValveCheckCmd+0xb68>)
 8003b18:	4837      	ldr	r0, [pc, #220]	; (8003bf8 <ValveCheckCmd+0xb38>)
 8003b1a:	f7fd fa13 	bl	8000f44 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " SOV9 is ON...\n");
 8003b1e:	4942      	ldr	r1, [pc, #264]	; (8003c28 <ValveCheckCmd+0xb68>)
 8003b20:	4836      	ldr	r0, [pc, #216]	; (8003bfc <ValveCheckCmd+0xb3c>)
 8003b22:	f7fd fa31 	bl	8000f88 <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8003b26:	4b30      	ldr	r3, [pc, #192]	; (8003be8 <ValveCheckCmd+0xb28>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
					v9=1;
 8003b2c:	4b3f      	ldr	r3, [pc, #252]	; (8003c2c <ValveCheckCmd+0xb6c>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	e0f1      	b.n	8003d18 <ValveCheckCmd+0xc58>
				}
				else if(cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin)){
 8003b34:	4b2c      	ldr	r3, [pc, #176]	; (8003be8 <ValveCheckCmd+0xb28>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 80ed 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 8003b3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b42:	482a      	ldr	r0, [pc, #168]	; (8003bec <ValveCheckCmd+0xb2c>)
 8003b44:	f000 ff7a 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 80e4 	beq.w	8003d18 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " SOV9 is already ON...\n");
 8003b50:	4937      	ldr	r1, [pc, #220]	; (8003c30 <ValveCheckCmd+0xb70>)
 8003b52:	4829      	ldr	r0, [pc, #164]	; (8003bf8 <ValveCheckCmd+0xb38>)
 8003b54:	f7fd f9f6 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 8003b58:	4b23      	ldr	r3, [pc, #140]	; (8003be8 <ValveCheckCmd+0xb28>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e0db      	b.n	8003d18 <ValveCheckCmd+0xc58>

				}
			}
			else if (command == SOV9OFF){
 8003b60:	4b1f      	ldr	r3, [pc, #124]	; (8003be0 <ValveCheckCmd+0xb20>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4b33      	ldr	r3, [pc, #204]	; (8003c34 <ValveCheckCmd+0xb74>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d169      	bne.n	8003c40 <ValveCheckCmd+0xb80>


				if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin)){
 8003b6c:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <ValveCheckCmd+0xb28>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01e      	beq.n	8003bb2 <ValveCheckCmd+0xaf2>
 8003b74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b78:	481c      	ldr	r0, [pc, #112]	; (8003bec <ValveCheckCmd+0xb2c>)
 8003b7a:	f000 ff5f 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d016      	beq.n	8003bb2 <ValveCheckCmd+0xaf2>
					valves_selected &= 0X2FF;
 8003b84:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <ValveCheckCmd+0xb30>)
 8003b86:	881a      	ldrh	r2, [r3, #0]
 8003b88:	f240 23ff 	movw	r3, #767	; 0x2ff
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	4b17      	ldr	r3, [pc, #92]	; (8003bf0 <ValveCheckCmd+0xb30>)
 8003b92:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV9 is OFF...\n");
 8003b94:	4928      	ldr	r1, [pc, #160]	; (8003c38 <ValveCheckCmd+0xb78>)
 8003b96:	4818      	ldr	r0, [pc, #96]	; (8003bf8 <ValveCheckCmd+0xb38>)
 8003b98:	f7fd f9d4 	bl	8000f44 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " SOV9 is OFF...\n");
 8003b9c:	4926      	ldr	r1, [pc, #152]	; (8003c38 <ValveCheckCmd+0xb78>)
 8003b9e:	4817      	ldr	r0, [pc, #92]	; (8003bfc <ValveCheckCmd+0xb3c>)
 8003ba0:	f7fd f9f2 	bl	8000f88 <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8003ba4:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <ValveCheckCmd+0xb28>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
					v9=0;
 8003baa:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <ValveCheckCmd+0xb6c>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	e0b2      	b.n	8003d18 <ValveCheckCmd+0xc58>
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin))){
 8003bb2:	4b0d      	ldr	r3, [pc, #52]	; (8003be8 <ValveCheckCmd+0xb28>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80ae 	beq.w	8003d18 <ValveCheckCmd+0xc58>
 8003bbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bc0:	480a      	ldr	r0, [pc, #40]	; (8003bec <ValveCheckCmd+0xb2c>)
 8003bc2:	f000 ff3b 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f040 80a5 	bne.w	8003d18 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " SOV9 is already OFF...\n");
 8003bce:	491b      	ldr	r1, [pc, #108]	; (8003c3c <ValveCheckCmd+0xb7c>)
 8003bd0:	4809      	ldr	r0, [pc, #36]	; (8003bf8 <ValveCheckCmd+0xb38>)
 8003bd2:	f7fd f9b7 	bl	8000f44 <UART_SendMessage>
					cmd_flag = FALSE;
 8003bd6:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <ValveCheckCmd+0xb28>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	e09c      	b.n	8003d18 <ValveCheckCmd+0xc58>
 8003bde:	bf00      	nop
 8003be0:	2000022c 	.word	0x2000022c
 8003be4:	200000dc 	.word	0x200000dc
 8003be8:	2000125c 	.word	0x2000125c
 8003bec:	48000400 	.word	0x48000400
 8003bf0:	20001520 	.word	0x20001520
 8003bf4:	08007fd4 	.word	0x08007fd4
 8003bf8:	2000145c 	.word	0x2000145c
 8003bfc:	20000194 	.word	0x20000194
 8003c00:	20000234 	.word	0x20000234
 8003c04:	08007fe8 	.word	0x08007fe8
 8003c08:	200000e0 	.word	0x200000e0
 8003c0c:	08008004 	.word	0x08008004
 8003c10:	20001510 	.word	0x20001510
 8003c14:	08008014 	.word	0x08008014
 8003c18:	200000e4 	.word	0x200000e4
 8003c1c:	0800802c 	.word	0x0800802c
 8003c20:	08008040 	.word	0x08008040
 8003c24:	200000e8 	.word	0x200000e8
 8003c28:	0800805c 	.word	0x0800805c
 8003c2c:	20000230 	.word	0x20000230
 8003c30:	0800806c 	.word	0x0800806c
 8003c34:	200000ec 	.word	0x200000ec
 8003c38:	08008084 	.word	0x08008084
 8003c3c:	08008098 	.word	0x08008098
				}
			}
			else if (command == valve_status && cmd_flag){
 8003c40:	4b41      	ldr	r3, [pc, #260]	; (8003d48 <ValveCheckCmd+0xc88>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b41      	ldr	r3, [pc, #260]	; (8003d4c <ValveCheckCmd+0xc8c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d13c      	bne.n	8003cc6 <ValveCheckCmd+0xc06>
 8003c4c:	4b40      	ldr	r3, [pc, #256]	; (8003d50 <ValveCheckCmd+0xc90>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d038      	beq.n	8003cc6 <ValveCheckCmd+0xc06>

				 int len = 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
				  sprintf(buffer,"\n*** Valves and Igniters Status ***\r\n\n SOV1: %d\r\n"
 8003c58:	4b3e      	ldr	r3, [pc, #248]	; (8003d54 <ValveCheckCmd+0xc94>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	4b3e      	ldr	r3, [pc, #248]	; (8003d58 <ValveCheckCmd+0xc98>)
 8003c60:	6819      	ldr	r1, [r3, #0]
 8003c62:	6079      	str	r1, [r7, #4]
 8003c64:	4b3d      	ldr	r3, [pc, #244]	; (8003d5c <ValveCheckCmd+0xc9c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a3d      	ldr	r2, [pc, #244]	; (8003d60 <ValveCheckCmd+0xca0>)
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	493d      	ldr	r1, [pc, #244]	; (8003d64 <ValveCheckCmd+0xca4>)
 8003c6e:	6809      	ldr	r1, [r1, #0]
 8003c70:	483d      	ldr	r0, [pc, #244]	; (8003d68 <ValveCheckCmd+0xca8>)
 8003c72:	6800      	ldr	r0, [r0, #0]
 8003c74:	6038      	str	r0, [r7, #0]
 8003c76:	4c3d      	ldr	r4, [pc, #244]	; (8003d6c <ValveCheckCmd+0xcac>)
 8003c78:	6824      	ldr	r4, [r4, #0]
 8003c7a:	4d3d      	ldr	r5, [pc, #244]	; (8003d70 <ValveCheckCmd+0xcb0>)
 8003c7c:	682d      	ldr	r5, [r5, #0]
 8003c7e:	4e3d      	ldr	r6, [pc, #244]	; (8003d74 <ValveCheckCmd+0xcb4>)
 8003c80:	6836      	ldr	r6, [r6, #0]
 8003c82:	483d      	ldr	r0, [pc, #244]	; (8003d78 <ValveCheckCmd+0xcb8>)
 8003c84:	6800      	ldr	r0, [r0, #0]
 8003c86:	9007      	str	r0, [sp, #28]
 8003c88:	9606      	str	r6, [sp, #24]
 8003c8a:	9505      	str	r5, [sp, #20]
 8003c8c:	9404      	str	r4, [sp, #16]
 8003c8e:	6838      	ldr	r0, [r7, #0]
 8003c90:	9003      	str	r0, [sp, #12]
 8003c92:	9102      	str	r1, [sp, #8]
 8003c94:	9201      	str	r2, [sp, #4]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	4937      	ldr	r1, [pc, #220]	; (8003d7c <ValveCheckCmd+0xcbc>)
 8003c9e:	4838      	ldr	r0, [pc, #224]	; (8003d80 <ValveCheckCmd+0xcc0>)
 8003ca0:	f003 fa2c 	bl	80070fc <siprintf>
						                   " SOV2: %d\r\n SOV3: %d\r\n SOV4: %d\r\n SOV5: %d\r\n SOV6: %d\r\n"
						                   " SOV7: %d\r\n SOV8: %d\r\n SOV9: %d\r\n IG:   %d\r\n",v1, v2, v3,\
										   v4,v5,v6,v7,v8,v9,ignit);
				  len =strlen(buffer);
 8003ca4:	4836      	ldr	r0, [pc, #216]	; (8003d80 <ValveCheckCmd+0xcc0>)
 8003ca6:	f7fc fa93 	bl	80001d0 <strlen>
 8003caa:	4603      	mov	r3, r0
 8003cac:	617b      	str	r3, [r7, #20]
				  HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cb6:	4932      	ldr	r1, [pc, #200]	; (8003d80 <ValveCheckCmd+0xcc0>)
 8003cb8:	4832      	ldr	r0, [pc, #200]	; (8003d84 <ValveCheckCmd+0xcc4>)
 8003cba:	f002 fa6d 	bl	8006198 <HAL_UART_Transmit>
				  cmd_flag = FALSE;
 8003cbe:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <ValveCheckCmd+0xc90>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
			else if (command == valve_status && cmd_flag){
 8003cc4:	e028      	b.n	8003d18 <ValveCheckCmd+0xc58>
			}
            /*********************************************/
            // Auto cycling valves
			else if (command == cycle_valves && cmd_flag ){
 8003cc6:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <ValveCheckCmd+0xc88>)
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4b2f      	ldr	r3, [pc, #188]	; (8003d88 <ValveCheckCmd+0xcc8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d122      	bne.n	8003d18 <ValveCheckCmd+0xc58>
 8003cd2:	4b1f      	ldr	r3, [pc, #124]	; (8003d50 <ValveCheckCmd+0xc90>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d01e      	beq.n	8003d18 <ValveCheckCmd+0xc58>
				    UART_SendMessage(&huart2, "\r ...Auto cycling valves...\n");
 8003cda:	492c      	ldr	r1, [pc, #176]	; (8003d8c <ValveCheckCmd+0xccc>)
 8003cdc:	4829      	ldr	r0, [pc, #164]	; (8003d84 <ValveCheckCmd+0xcc4>)
 8003cde:	f7fd f931 	bl	8000f44 <UART_SendMessage>
			    	cmd_flag = FALSE;
 8003ce2:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <ValveCheckCmd+0xc90>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]

                 //Set all the valves off before starting
			    	valves_selected = 0;
 8003ce8:	4b29      	ldr	r3, [pc, #164]	; (8003d90 <ValveCheckCmd+0xcd0>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	801a      	strh	r2, [r3, #0]
			    	ctrl->valveTarget  = valves_selected;
 8003cee:	4b28      	ldr	r3, [pc, #160]	; (8003d90 <ValveCheckCmd+0xcd0>)
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	631a      	str	r2, [r3, #48]	; 0x30

			    	for(int i =  0 ; i <=9 ; i ++){
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	e009      	b.n	8003d12 <ValveCheckCmd+0xc52>
			    			success &= CycleValves(ctrl);
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f848 	bl	8003d94 <CycleValves>
 8003d04:	4602      	mov	r2, r0
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61fb      	str	r3, [r7, #28]
			    	for(int i =  0 ; i <=9 ; i ++){
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	2b09      	cmp	r3, #9
 8003d16:	ddf2      	ble.n	8003cfe <ValveCheckCmd+0xc3e>
			    		cmd_flag = FALSE;
			   } // end of else if for cycle_valves*/
            /*************************************************************/

    	   // Set valves
			ctrl->valveTarget = valves_selected;
 8003d18:	4b1d      	ldr	r3, [pc, #116]	; (8003d90 <ValveCheckCmd+0xcd0>)
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	631a      	str	r2, [r3, #48]	; 0x30
			success &= ValveStateSetter(ctrl->valveTarget);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff f8d2 	bl	8002ed0 <ValveStateSetter>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61fb      	str	r3, [r7, #28]
			ctrl->valveConfiguration = StateConfiguration();
 8003d34:	f7ff f84e 	bl	8002dd4 <StateConfiguration>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003d3e:	bf00      	nop
 8003d40:	3724      	adds	r7, #36	; 0x24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d46:	bf00      	nop
 8003d48:	2000022c 	.word	0x2000022c
 8003d4c:	20000098 	.word	0x20000098
 8003d50:	2000125c 	.word	0x2000125c
 8003d54:	2000021c 	.word	0x2000021c
 8003d58:	20001364 	.word	0x20001364
 8003d5c:	200002a0 	.word	0x200002a0
 8003d60:	20001514 	.word	0x20001514
 8003d64:	200013d4 	.word	0x200013d4
 8003d68:	20000214 	.word	0x20000214
 8003d6c:	20000234 	.word	0x20000234
 8003d70:	20001510 	.word	0x20001510
 8003d74:	20000230 	.word	0x20000230
 8003d78:	20001248 	.word	0x20001248
 8003d7c:	080080b4 	.word	0x080080b4
 8003d80:	20001264 	.word	0x20001264
 8003d84:	2000145c 	.word	0x2000145c
 8003d88:	2000009c 	.word	0x2000009c
 8003d8c:	0800814c 	.word	0x0800814c
 8003d90:	20001520 	.word	0x20001520

08003d94 <CycleValves>:

uint32_t CycleValves(struct StateVars *ctrl)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	uint32_t success = TRUE;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	60fb      	str	r3, [r7, #12]
	HAL_Delay(300);
 8003da0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003da4:	f000 fb2a 	bl	80043fc <HAL_Delay>
    if (ctrl->valveTarget == 0){
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d103      	bne.n	8003db8 <CycleValves+0x24>
    	ctrl->valveTarget = 0x1;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30
 8003db6:	e011      	b.n	8003ddc <CycleValves+0x48>
    }
	else if (ctrl->valveTarget < 256){
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	2bff      	cmp	r3, #255	; 0xff
 8003dbe:	d805      	bhi.n	8003dcc <CycleValves+0x38>

		ctrl->valveTarget *= 2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	005a      	lsls	r2, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	631a      	str	r2, [r3, #48]	; 0x30
 8003dca:	e007      	b.n	8003ddc <CycleValves+0x48>


	}
	else if (ctrl->valveTarget == 256){
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd4:	d102      	bne.n	8003ddc <CycleValves+0x48>
		ctrl->valveTarget = 0 ;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30
	}



	success &= ValveStateSetter(ctrl->valveTarget);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff f875 	bl	8002ed0 <ValveStateSetter>
 8003de6:	4602      	mov	r2, r0
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4013      	ands	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 8003dee:	f7fe fff1 	bl	8002dd4 <StateConfiguration>
 8003df2:	4602      	mov	r2, r0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	62da      	str	r2, [r3, #44]	; 0x2c

	if (ctrl -> valveTarget == 1 && HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin)){
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d10d      	bne.n	8003e1c <CycleValves+0x88>
 8003e00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e08:	f000 fe18 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d004      	beq.n	8003e1c <CycleValves+0x88>
		UART_SendMessage(&huart2, " SOV1 ON...\n");
 8003e12:	49af      	ldr	r1, [pc, #700]	; (80040d0 <CycleValves+0x33c>)
 8003e14:	48af      	ldr	r0, [pc, #700]	; (80040d4 <CycleValves+0x340>)
 8003e16:	f7fd f895 	bl	8000f44 <UART_SendMessage>
 8003e1a:	e099      	b.n	8003f50 <CycleValves+0x1bc>
	}
	else if( ctrl-> valveTarget == 2 && HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin)){
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d10d      	bne.n	8003e40 <CycleValves+0xac>
 8003e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e2c:	f000 fe06 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d004      	beq.n	8003e40 <CycleValves+0xac>
		UART_SendMessage(&huart2, " SOV1 OFF...SOV2 ON\n");
 8003e36:	49a8      	ldr	r1, [pc, #672]	; (80040d8 <CycleValves+0x344>)
 8003e38:	48a6      	ldr	r0, [pc, #664]	; (80040d4 <CycleValves+0x340>)
 8003e3a:	f7fd f883 	bl	8000f44 <UART_SendMessage>
 8003e3e:	e087      	b.n	8003f50 <CycleValves+0x1bc>
	}
	else if(ctrl-> valveTarget == 4 && HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin)){
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d10b      	bne.n	8003e60 <CycleValves+0xcc>
 8003e48:	2180      	movs	r1, #128	; 0x80
 8003e4a:	48a4      	ldr	r0, [pc, #656]	; (80040dc <CycleValves+0x348>)
 8003e4c:	f000 fdf6 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d004      	beq.n	8003e60 <CycleValves+0xcc>
		UART_SendMessage(&huart2, " SOV2 OFF...SOV3 ON\n");
 8003e56:	49a2      	ldr	r1, [pc, #648]	; (80040e0 <CycleValves+0x34c>)
 8003e58:	489e      	ldr	r0, [pc, #632]	; (80040d4 <CycleValves+0x340>)
 8003e5a:	f7fd f873 	bl	8000f44 <UART_SendMessage>
 8003e5e:	e077      	b.n	8003f50 <CycleValves+0x1bc>
	}
	else if(ctrl-> valveTarget == 8 && HAL_GPIO_ReadPin(GPIOC, FUEL_VENT_Pin)){
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d10b      	bne.n	8003e80 <CycleValves+0xec>
 8003e68:	2140      	movs	r1, #64	; 0x40
 8003e6a:	489c      	ldr	r0, [pc, #624]	; (80040dc <CycleValves+0x348>)
 8003e6c:	f000 fde6 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d004      	beq.n	8003e80 <CycleValves+0xec>
		UART_SendMessage(&huart2, " SOV3 OFF...SOV4 ON\n");
 8003e76:	499b      	ldr	r1, [pc, #620]	; (80040e4 <CycleValves+0x350>)
 8003e78:	4896      	ldr	r0, [pc, #600]	; (80040d4 <CycleValves+0x340>)
 8003e7a:	f7fd f863 	bl	8000f44 <UART_SendMessage>
 8003e7e:	e067      	b.n	8003f50 <CycleValves+0x1bc>
	}
	else if(ctrl-> valveTarget == 16 && HAL_GPIO_ReadPin(GPIOA, FUEL_MAIN_Pin)){
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d10d      	bne.n	8003ea4 <CycleValves+0x110>
 8003e88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e90:	f000 fdd4 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d004      	beq.n	8003ea4 <CycleValves+0x110>
		UART_SendMessage(&huart2, " SOV4 OFF...SOV5 ON\n");
 8003e9a:	4993      	ldr	r1, [pc, #588]	; (80040e8 <CycleValves+0x354>)
 8003e9c:	488d      	ldr	r0, [pc, #564]	; (80040d4 <CycleValves+0x340>)
 8003e9e:	f7fd f851 	bl	8000f44 <UART_SendMessage>
 8003ea2:	e055      	b.n	8003f50 <CycleValves+0x1bc>
	}
	else if(ctrl-> valveTarget == 32 && HAL_GPIO_ReadPin(GPIOA, LOX_MAIN_Pin)){
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	d10d      	bne.n	8003ec8 <CycleValves+0x134>
 8003eac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eb4:	f000 fdc2 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d004      	beq.n	8003ec8 <CycleValves+0x134>
			UART_SendMessage(&huart2, " SOV5 OFF...SOV6 ON\n");
 8003ebe:	498b      	ldr	r1, [pc, #556]	; (80040ec <CycleValves+0x358>)
 8003ec0:	4884      	ldr	r0, [pc, #528]	; (80040d4 <CycleValves+0x340>)
 8003ec2:	f7fd f83f 	bl	8000f44 <UART_SendMessage>
 8003ec6:	e043      	b.n	8003f50 <CycleValves+0x1bc>
	}
	else if(ctrl-> valveTarget == 64 && HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin)){
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	2b40      	cmp	r3, #64	; 0x40
 8003ece:	d10c      	bne.n	8003eea <CycleValves+0x156>
 8003ed0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ed4:	4886      	ldr	r0, [pc, #536]	; (80040f0 <CycleValves+0x35c>)
 8003ed6:	f000 fdb1 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d004      	beq.n	8003eea <CycleValves+0x156>
				UART_SendMessage(&huart2, " SOV6 OFF...SOV7 ON\n");
 8003ee0:	4984      	ldr	r1, [pc, #528]	; (80040f4 <CycleValves+0x360>)
 8003ee2:	487c      	ldr	r0, [pc, #496]	; (80040d4 <CycleValves+0x340>)
 8003ee4:	f7fd f82e 	bl	8000f44 <UART_SendMessage>
 8003ee8:	e032      	b.n	8003f50 <CycleValves+0x1bc>
	}
	else if(ctrl-> valveTarget == 128 && HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin)){
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	2b80      	cmp	r3, #128	; 0x80
 8003ef0:	d10c      	bne.n	8003f0c <CycleValves+0x178>
 8003ef2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ef6:	487e      	ldr	r0, [pc, #504]	; (80040f0 <CycleValves+0x35c>)
 8003ef8:	f000 fda0 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d004      	beq.n	8003f0c <CycleValves+0x178>
					UART_SendMessage(&huart2, " SOV7 OFF...SOV8 ON\n");
 8003f02:	497d      	ldr	r1, [pc, #500]	; (80040f8 <CycleValves+0x364>)
 8003f04:	4873      	ldr	r0, [pc, #460]	; (80040d4 <CycleValves+0x340>)
 8003f06:	f7fd f81d 	bl	8000f44 <UART_SendMessage>
 8003f0a:	e021      	b.n	8003f50 <CycleValves+0x1bc>
		}
	else if(ctrl-> valveTarget == 256 && HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin)){
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f14:	d10c      	bne.n	8003f30 <CycleValves+0x19c>
 8003f16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f1a:	4875      	ldr	r0, [pc, #468]	; (80040f0 <CycleValves+0x35c>)
 8003f1c:	f000 fd8e 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d004      	beq.n	8003f30 <CycleValves+0x19c>
						UART_SendMessage(&huart2, " SOV8 OFF...SOV9 ON\n");
 8003f26:	4975      	ldr	r1, [pc, #468]	; (80040fc <CycleValves+0x368>)
 8003f28:	486a      	ldr	r0, [pc, #424]	; (80040d4 <CycleValves+0x340>)
 8003f2a:	f7fd f80b 	bl	8000f44 <UART_SendMessage>
 8003f2e:	e00f      	b.n	8003f50 <CycleValves+0x1bc>
			}
	else if (ctrl-> valveTarget == 0 && !( HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin)) ){
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10b      	bne.n	8003f50 <CycleValves+0x1bc>
 8003f38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f3c:	486c      	ldr	r0, [pc, #432]	; (80040f0 <CycleValves+0x35c>)
 8003f3e:	f000 fd7d 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d103      	bne.n	8003f50 <CycleValves+0x1bc>
		UART_SendMessage(&huart2, " SOV9 OFF...\n");
 8003f48:	496d      	ldr	r1, [pc, #436]	; (8004100 <CycleValves+0x36c>)
 8003f4a:	4862      	ldr	r0, [pc, #392]	; (80040d4 <CycleValves+0x340>)
 8003f4c:	f7fc fffa 	bl	8000f44 <UART_SendMessage>

	//Todo ADD  a handler for commands that can be tryin to access while the automatic sequence is on
    // Auto cycling GPIO check for messaging to VI and printing on screen
    //SOV1
	//HAL_Delay(2);//allow time to read
	if(HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin)){
 8003f50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f58:	f000 fd70 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d004      	beq.n	8003f6c <CycleValves+0x1d8>
		// UART_SendMessage(&huart2, " SOV1 ON...");
		 UART_SendMessage_VI(&huart3, " SOV1 ON...\n");
 8003f62:	495b      	ldr	r1, [pc, #364]	; (80040d0 <CycleValves+0x33c>)
 8003f64:	4867      	ldr	r0, [pc, #412]	; (8004104 <CycleValves+0x370>)
 8003f66:	f7fd f80f 	bl	8000f88 <UART_SendMessage_VI>
 8003f6a:	e00c      	b.n	8003f86 <CycleValves+0x1f2>
	}
	else if ( !(HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 8003f6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f74:	f000 fd62 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d103      	bne.n	8003f86 <CycleValves+0x1f2>
		 //UART_SendMessage(&huart2, " SOV1 OFF...");
		 UART_SendMessage_VI(&huart3, " SOV1 OFF...\n");
 8003f7e:	4962      	ldr	r1, [pc, #392]	; (8004108 <CycleValves+0x374>)
 8003f80:	4860      	ldr	r0, [pc, #384]	; (8004104 <CycleValves+0x370>)
 8003f82:	f7fd f801 	bl	8000f88 <UART_SendMessage_VI>

	}
	//SOV2

	if (HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin)){
 8003f86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f8e:	f000 fd55 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d004      	beq.n	8003fa2 <CycleValves+0x20e>
		 //UART_SendMessage(&huart2, " SOV2 ON...");
		 UART_SendMessage_VI(&huart3, " SOV2 ON...\n");
 8003f98:	495c      	ldr	r1, [pc, #368]	; (800410c <CycleValves+0x378>)
 8003f9a:	485a      	ldr	r0, [pc, #360]	; (8004104 <CycleValves+0x370>)
 8003f9c:	f7fc fff4 	bl	8000f88 <UART_SendMessage_VI>
 8003fa0:	e00c      	b.n	8003fbc <CycleValves+0x228>
	}
	else if (!( HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 8003fa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003faa:	f000 fd47 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d103      	bne.n	8003fbc <CycleValves+0x228>
		 //UART_SendMessage(&huart2, " SOV2 OFF...");
		 UART_SendMessage_VI(&huart3, " SOV2 OFF...\n");
 8003fb4:	4956      	ldr	r1, [pc, #344]	; (8004110 <CycleValves+0x37c>)
 8003fb6:	4853      	ldr	r0, [pc, #332]	; (8004104 <CycleValves+0x370>)
 8003fb8:	f7fc ffe6 	bl	8000f88 <UART_SendMessage_VI>
	}
    //SOV3

	if (HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin)){
 8003fbc:	2180      	movs	r1, #128	; 0x80
 8003fbe:	4847      	ldr	r0, [pc, #284]	; (80040dc <CycleValves+0x348>)
 8003fc0:	f000 fd3c 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d004      	beq.n	8003fd4 <CycleValves+0x240>
		 //UART_SendMessage(&huart2, " SOV3 ON...");
		 UART_SendMessage_VI(&huart3, " SOV3 ON...\n");
 8003fca:	4952      	ldr	r1, [pc, #328]	; (8004114 <CycleValves+0x380>)
 8003fcc:	484d      	ldr	r0, [pc, #308]	; (8004104 <CycleValves+0x370>)
 8003fce:	f7fc ffdb 	bl	8000f88 <UART_SendMessage_VI>
 8003fd2:	e00a      	b.n	8003fea <CycleValves+0x256>
	}
	else if (!( HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin))){
 8003fd4:	2180      	movs	r1, #128	; 0x80
 8003fd6:	4841      	ldr	r0, [pc, #260]	; (80040dc <CycleValves+0x348>)
 8003fd8:	f000 fd30 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d103      	bne.n	8003fea <CycleValves+0x256>
		 //UART_SendMessage(&huart2, " SOV3 OFF...");
		 UART_SendMessage_VI(&huart3, " SOV3 OFF...\n");
 8003fe2:	494d      	ldr	r1, [pc, #308]	; (8004118 <CycleValves+0x384>)
 8003fe4:	4847      	ldr	r0, [pc, #284]	; (8004104 <CycleValves+0x370>)
 8003fe6:	f7fc ffcf 	bl	8000f88 <UART_SendMessage_VI>
	}

    //SOV4
	if (HAL_GPIO_ReadPin(GPIOC, FUEL_VENT_Pin)){
 8003fea:	2140      	movs	r1, #64	; 0x40
 8003fec:	483b      	ldr	r0, [pc, #236]	; (80040dc <CycleValves+0x348>)
 8003fee:	f000 fd25 	bl	8004a3c <HAL_GPIO_ReadPin>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d004      	beq.n	8004002 <CycleValves+0x26e>
		// UART_SendMessage(&huart2, " SOV4 ON...");
		 UART_SendMessage_VI(&huart3, " SOV4 ON...\n");
 8003ff8:	4948      	ldr	r1, [pc, #288]	; (800411c <CycleValves+0x388>)
 8003ffa:	4842      	ldr	r0, [pc, #264]	; (8004104 <CycleValves+0x370>)
 8003ffc:	f7fc ffc4 	bl	8000f88 <UART_SendMessage_VI>
 8004000:	e00a      	b.n	8004018 <CycleValves+0x284>
	}
	else if(!( HAL_GPIO_ReadPin(GPIOC, FUEL_VENT_Pin))){
 8004002:	2140      	movs	r1, #64	; 0x40
 8004004:	4835      	ldr	r0, [pc, #212]	; (80040dc <CycleValves+0x348>)
 8004006:	f000 fd19 	bl	8004a3c <HAL_GPIO_ReadPin>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d103      	bne.n	8004018 <CycleValves+0x284>
		 //UART_SendMessage(&huart2, " SOV4 OFF...");
		 UART_SendMessage_VI(&huart3, " SOV4 OFF...\n");
 8004010:	4943      	ldr	r1, [pc, #268]	; (8004120 <CycleValves+0x38c>)
 8004012:	483c      	ldr	r0, [pc, #240]	; (8004104 <CycleValves+0x370>)
 8004014:	f7fc ffb8 	bl	8000f88 <UART_SendMessage_VI>
	}

    //SOV5

	if (HAL_GPIO_ReadPin(GPIOA, FUEL_MAIN_Pin)){
 8004018:	f44f 7100 	mov.w	r1, #512	; 0x200
 800401c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004020:	f000 fd0c 	bl	8004a3c <HAL_GPIO_ReadPin>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d004      	beq.n	8004034 <CycleValves+0x2a0>
		// UART_SendMessage(&huart2, " SOV5 ON...");
		 UART_SendMessage_VI(&huart3, " SOV5 ON...\n");
 800402a:	493e      	ldr	r1, [pc, #248]	; (8004124 <CycleValves+0x390>)
 800402c:	4835      	ldr	r0, [pc, #212]	; (8004104 <CycleValves+0x370>)
 800402e:	f7fc ffab 	bl	8000f88 <UART_SendMessage_VI>
 8004032:	e00c      	b.n	800404e <CycleValves+0x2ba>
	}
	else if(!( HAL_GPIO_ReadPin(GPIOA, FUEL_MAIN_Pin))){
 8004034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800403c:	f000 fcfe 	bl	8004a3c <HAL_GPIO_ReadPin>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d103      	bne.n	800404e <CycleValves+0x2ba>
		// UART_SendMessage(&huart2, " SOV5 OFF...");
		 UART_SendMessage_VI(&huart3, " SOV5 OFF...\n");
 8004046:	4938      	ldr	r1, [pc, #224]	; (8004128 <CycleValves+0x394>)
 8004048:	482e      	ldr	r0, [pc, #184]	; (8004104 <CycleValves+0x370>)
 800404a:	f7fc ff9d 	bl	8000f88 <UART_SendMessage_VI>
	}

    //SOV6
	if (HAL_GPIO_ReadPin(GPIOA, LOX_MAIN_Pin)){
 800404e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004056:	f000 fcf1 	bl	8004a3c <HAL_GPIO_ReadPin>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d004      	beq.n	800406a <CycleValves+0x2d6>
		// UART_SendMessage(&huart2, " SOV6 ON...");
		 UART_SendMessage_VI(&huart3, " SOV6 ON...\n");
 8004060:	4932      	ldr	r1, [pc, #200]	; (800412c <CycleValves+0x398>)
 8004062:	4828      	ldr	r0, [pc, #160]	; (8004104 <CycleValves+0x370>)
 8004064:	f7fc ff90 	bl	8000f88 <UART_SendMessage_VI>
 8004068:	e00c      	b.n	8004084 <CycleValves+0x2f0>
	}
	else if (!( HAL_GPIO_ReadPin(GPIOA, LOX_MAIN_Pin))){
 800406a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800406e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004072:	f000 fce3 	bl	8004a3c <HAL_GPIO_ReadPin>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d103      	bne.n	8004084 <CycleValves+0x2f0>
		// UART_SendMessage(&huart2, " SOV6 OFF...");
		 UART_SendMessage_VI(&huart3, " SOV6 OFF...\n");
 800407c:	492c      	ldr	r1, [pc, #176]	; (8004130 <CycleValves+0x39c>)
 800407e:	4821      	ldr	r0, [pc, #132]	; (8004104 <CycleValves+0x370>)
 8004080:	f7fc ff82 	bl	8000f88 <UART_SendMessage_VI>
	}


    //SOV7
	if (HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin)){
 8004084:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004088:	4819      	ldr	r0, [pc, #100]	; (80040f0 <CycleValves+0x35c>)
 800408a:	f000 fcd7 	bl	8004a3c <HAL_GPIO_ReadPin>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d004      	beq.n	800409e <CycleValves+0x30a>
		// UART_SendMessage(&huart2, " SOV7 ON...");
		 UART_SendMessage_VI(&huart3, " SOV7 ON...\n");
 8004094:	4927      	ldr	r1, [pc, #156]	; (8004134 <CycleValves+0x3a0>)
 8004096:	481b      	ldr	r0, [pc, #108]	; (8004104 <CycleValves+0x370>)
 8004098:	f7fc ff76 	bl	8000f88 <UART_SendMessage_VI>
 800409c:	e00b      	b.n	80040b6 <CycleValves+0x322>
	}
	else if(!( HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin))){
 800409e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040a2:	4813      	ldr	r0, [pc, #76]	; (80040f0 <CycleValves+0x35c>)
 80040a4:	f000 fcca 	bl	8004a3c <HAL_GPIO_ReadPin>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d103      	bne.n	80040b6 <CycleValves+0x322>
		// UART_SendMessage(&huart2, " SOV7 OFF...");
		 UART_SendMessage_VI(&huart3, " SOV7 OFF...\n");
 80040ae:	4922      	ldr	r1, [pc, #136]	; (8004138 <CycleValves+0x3a4>)
 80040b0:	4814      	ldr	r0, [pc, #80]	; (8004104 <CycleValves+0x370>)
 80040b2:	f7fc ff69 	bl	8000f88 <UART_SendMessage_VI>
	}

    //SOV8
	if (HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin)){
 80040b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80040ba:	480d      	ldr	r0, [pc, #52]	; (80040f0 <CycleValves+0x35c>)
 80040bc:	f000 fcbe 	bl	8004a3c <HAL_GPIO_ReadPin>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d03c      	beq.n	8004140 <CycleValves+0x3ac>
		// UART_SendMessage(&huart2, " SOV8 ON...");
		 UART_SendMessage_VI(&huart3, " SOV8 ON...\n");
 80040c6:	491d      	ldr	r1, [pc, #116]	; (800413c <CycleValves+0x3a8>)
 80040c8:	480e      	ldr	r0, [pc, #56]	; (8004104 <CycleValves+0x370>)
 80040ca:	f7fc ff5d 	bl	8000f88 <UART_SendMessage_VI>
 80040ce:	e043      	b.n	8004158 <CycleValves+0x3c4>
 80040d0:	0800816c 	.word	0x0800816c
 80040d4:	2000145c 	.word	0x2000145c
 80040d8:	0800817c 	.word	0x0800817c
 80040dc:	48000800 	.word	0x48000800
 80040e0:	08008194 	.word	0x08008194
 80040e4:	080081ac 	.word	0x080081ac
 80040e8:	080081c4 	.word	0x080081c4
 80040ec:	080081dc 	.word	0x080081dc
 80040f0:	48000400 	.word	0x48000400
 80040f4:	080081f4 	.word	0x080081f4
 80040f8:	0800820c 	.word	0x0800820c
 80040fc:	08008224 	.word	0x08008224
 8004100:	0800823c 	.word	0x0800823c
 8004104:	20000194 	.word	0x20000194
 8004108:	0800824c 	.word	0x0800824c
 800410c:	0800825c 	.word	0x0800825c
 8004110:	0800826c 	.word	0x0800826c
 8004114:	0800827c 	.word	0x0800827c
 8004118:	0800828c 	.word	0x0800828c
 800411c:	0800829c 	.word	0x0800829c
 8004120:	080082ac 	.word	0x080082ac
 8004124:	080082bc 	.word	0x080082bc
 8004128:	080082cc 	.word	0x080082cc
 800412c:	080082dc 	.word	0x080082dc
 8004130:	080082ec 	.word	0x080082ec
 8004134:	080082fc 	.word	0x080082fc
 8004138:	0800830c 	.word	0x0800830c
 800413c:	0800831c 	.word	0x0800831c
	}
	else if(!( HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin))){
 8004140:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004144:	4813      	ldr	r0, [pc, #76]	; (8004194 <CycleValves+0x400>)
 8004146:	f000 fc79 	bl	8004a3c <HAL_GPIO_ReadPin>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d103      	bne.n	8004158 <CycleValves+0x3c4>
		// UART_SendMessage(&huart2, " SOV8 OFF...");
		 UART_SendMessage_VI(&huart3, " SOV8 OFF...\n");
 8004150:	4911      	ldr	r1, [pc, #68]	; (8004198 <CycleValves+0x404>)
 8004152:	4812      	ldr	r0, [pc, #72]	; (800419c <CycleValves+0x408>)
 8004154:	f7fc ff18 	bl	8000f88 <UART_SendMessage_VI>
	}
	//SOV9
	if (HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin)){
 8004158:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800415c:	480d      	ldr	r0, [pc, #52]	; (8004194 <CycleValves+0x400>)
 800415e:	f000 fc6d 	bl	8004a3c <HAL_GPIO_ReadPin>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d004      	beq.n	8004172 <CycleValves+0x3de>
		// UART_SendMessage(&huart2, " SOV9 ON... \n");
		 UART_SendMessage_VI(&huart3, " SOV9 ON...\n");
 8004168:	490d      	ldr	r1, [pc, #52]	; (80041a0 <CycleValves+0x40c>)
 800416a:	480c      	ldr	r0, [pc, #48]	; (800419c <CycleValves+0x408>)
 800416c:	f7fc ff0c 	bl	8000f88 <UART_SendMessage_VI>
 8004170:	e00b      	b.n	800418a <CycleValves+0x3f6>

	}
	else if(!( HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin))){
 8004172:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004176:	4807      	ldr	r0, [pc, #28]	; (8004194 <CycleValves+0x400>)
 8004178:	f000 fc60 	bl	8004a3c <HAL_GPIO_ReadPin>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d103      	bne.n	800418a <CycleValves+0x3f6>
		 //UART_SendMessage(&huart2, " SOV9 OFF...\n");
		 UART_SendMessage_VI(&huart3, " SOV9 OFF...\n");
 8004182:	4908      	ldr	r1, [pc, #32]	; (80041a4 <CycleValves+0x410>)
 8004184:	4805      	ldr	r0, [pc, #20]	; (800419c <CycleValves+0x408>)
 8004186:	f7fc feff 	bl	8000f88 <UART_SendMessage_VI>
	}



	return success;
 800418a:	68fb      	ldr	r3, [r7, #12]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	48000400 	.word	0x48000400
 8004198:	0800832c 	.word	0x0800832c
 800419c:	20000194 	.word	0x20000194
 80041a0:	0800833c 	.word	0x0800833c
 80041a4:	0800823c 	.word	0x0800823c

080041a8 <ValveCheck>:
#include "messages.h"
#include "ring_buffer.h"


uint32_t ValveCheck(struct StateVars *ctrl)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	uint32_t success = TRUE;
 80041b0:	2301      	movs	r3, #1
 80041b2:	60fb      	str	r3, [r7, #12]
	// Configure the Valves depending in the State.
	ctrl->valveConfiguration = StateConfiguration();
 80041b4:	f7fe fe0e 	bl	8002dd4 <StateConfiguration>
 80041b8:	4602      	mov	r2, r0
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	62da      	str	r2, [r3, #44]	; 0x2c


    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fe fdc9 	bl	8002d5c <VerifyState>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d053      	beq.n	8004278 <ValveCheck+0xd0>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe fdc0 	bl	8002d5c <VerifyState>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d04a      	beq.n	8004278 <ValveCheck+0xd0>
    {
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d036      	beq.n	800425e <ValveCheck+0xb6>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8   SOV9  IG1
    		//|  01 |  01  |  01  |   01  |  01  |  01 |  01  |  01  |  01 |  01 |

    		StateStatus(ctrl);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7fe fd5d 	bl	8002cb0 <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004202:	429a      	cmp	r2, r3
 8004204:	d009      	beq.n	800421a <ValveCheck+0x72>
    	    {
    			//Start by setting all the valves OFF
    			ctrl->valveTarget  = !((uint16_t)SOV1 \
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
    					|(uint16_t)SOV6 \
    					|(uint16_t)SOV7 \
    					|(uint16_t)SOV8 \
    					|(uint16_t)SOV9 \
						|(uint16_t)IG1);
    		    valves_selected = 0;
 800420c:	4b25      	ldr	r3, [pc, #148]	; (80042a4 <ValveCheck+0xfc>)
 800420e:	2200      	movs	r2, #0
 8004210:	801a      	strh	r2, [r3, #0]
    			success = StateInitialize(ctrl);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fe ff30 	bl	8003078 <StateInitialize>
 8004218:	60f8      	str	r0, [r7, #12]
    	    }
    		// Process a Marionette Data Packet
    		ringBufferRead();
 800421a:	f7fe f937 	bl	800248c <ringBufferRead>

    		// Check for command changes
    		ProcessCommands(ctrl);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fd f864 	bl	80012ec <ProcessCommands>

    		// Function to handle individual valves.
    		ValveCheckCmd(ctrl);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7fe ff4b 	bl	80030c0 <ValveCheckCmd>

    		//If the Valve configuration is the same as the ValveTarget set success as 1 for TRUE or 0 FALSE
    		success &= (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	429a      	cmp	r2, r3
 8004234:	d101      	bne.n	800423a <ValveCheck+0x92>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <ValveCheck+0x94>
 800423a:	2300      	movs	r3, #0
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4013      	ands	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]

    		// Increment state counter // Testing Purposes
			ctrl->stateCounter++;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004254:	d11f      	bne.n	8004296 <ValveCheck+0xee>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 800425c:	e01b      	b.n	8004296 <ValveCheck+0xee>
    	}else{
    		// If current State dosn't match the expected current State
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, VALVE_CHECK, ctrl->currentState);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004264:	461a      	mov	r2, r3
 8004266:	2101      	movs	r1, #1
 8004268:	480f      	ldr	r0, [pc, #60]	; (80042a8 <ValveCheck+0x100>)
 800426a:	f7fd fe23 	bl	8001eb4 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 800426e:	490e      	ldr	r1, [pc, #56]	; (80042a8 <ValveCheck+0x100>)
 8004270:	480e      	ldr	r0, [pc, #56]	; (80042ac <ValveCheck+0x104>)
 8004272:	f7fc fe67 	bl	8000f44 <UART_SendMessage>
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 8004276:	e00e      	b.n	8004296 <ValveCheck+0xee>
    	}
    }else{

    	// If current State and Last State dosnt match the expected states.
    	// Log Invalid State and let the user know.
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004284:	461a      	mov	r2, r3
 8004286:	4808      	ldr	r0, [pc, #32]	; (80042a8 <ValveCheck+0x100>)
 8004288:	f7fd fe8e 	bl	8001fa8 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 800428c:	4906      	ldr	r1, [pc, #24]	; (80042a8 <ValveCheck+0x100>)
 800428e:	4807      	ldr	r0, [pc, #28]	; (80042ac <ValveCheck+0x104>)
 8004290:	f7fc fe58 	bl	8000f44 <UART_SendMessage>
 8004294:	e000      	b.n	8004298 <ValveCheck+0xf0>
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 8004296:	bf00      	nop
    }
	return success;
 8004298:	68fb      	ldr	r3, [r7, #12]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20001520 	.word	0x20001520
 80042a8:	20000238 	.word	0x20000238
 80042ac:	2000145c 	.word	0x2000145c

080042b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80042b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80042b4:	f7fe fc4e 	bl	8002b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80042b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80042ba:	e003      	b.n	80042c4 <LoopCopyDataInit>

080042bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80042be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80042c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80042c2:	3104      	adds	r1, #4

080042c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80042c4:	480a      	ldr	r0, [pc, #40]	; (80042f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80042c6:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80042c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80042ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80042cc:	d3f6      	bcc.n	80042bc <CopyDataInit>
	ldr	r2, =_sbss
 80042ce:	4a0a      	ldr	r2, [pc, #40]	; (80042f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80042d0:	e002      	b.n	80042d8 <LoopFillZerobss>

080042d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80042d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80042d4:	f842 3b04 	str.w	r3, [r2], #4

080042d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80042d8:	4b08      	ldr	r3, [pc, #32]	; (80042fc <LoopForever+0x16>)
	cmp	r2, r3
 80042da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80042dc:	d3f9      	bcc.n	80042d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042de:	f002 fee1 	bl	80070a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80042e2:	f7fc fde3 	bl	8000eac <main>

080042e6 <LoopForever>:

LoopForever:
    b LoopForever
 80042e6:	e7fe      	b.n	80042e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80042e8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80042ec:	080083d8 	.word	0x080083d8
	ldr	r0, =_sdata
 80042f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80042f4:	2000015c 	.word	0x2000015c
	ldr	r2, =_sbss
 80042f8:	2000015c 	.word	0x2000015c
	ldr	r3, = _ebss
 80042fc:	20001538 	.word	0x20001538

08004300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004300:	e7fe      	b.n	8004300 <ADC1_2_IRQHandler>
	...

08004304 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800430e:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <HAL_Init+0x3c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a0b      	ldr	r2, [pc, #44]	; (8004340 <HAL_Init+0x3c>)
 8004314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004318:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800431a:	2003      	movs	r0, #3
 800431c:	f000 f962 	bl	80045e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004320:	2000      	movs	r0, #0
 8004322:	f000 f80f 	bl	8004344 <HAL_InitTick>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	71fb      	strb	r3, [r7, #7]
 8004330:	e001      	b.n	8004336 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004332:	f7fe faaf 	bl	8002894 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004336:	79fb      	ldrb	r3, [r7, #7]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40022000 	.word	0x40022000

08004344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004350:	4b17      	ldr	r3, [pc, #92]	; (80043b0 <HAL_InitTick+0x6c>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d023      	beq.n	80043a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004358:	4b16      	ldr	r3, [pc, #88]	; (80043b4 <HAL_InitTick+0x70>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	4b14      	ldr	r3, [pc, #80]	; (80043b0 <HAL_InitTick+0x6c>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	4619      	mov	r1, r3
 8004362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004366:	fbb3 f3f1 	udiv	r3, r3, r1
 800436a:	fbb2 f3f3 	udiv	r3, r2, r3
 800436e:	4618      	mov	r0, r3
 8004370:	f000 f96d 	bl	800464e <HAL_SYSTICK_Config>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10f      	bne.n	800439a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b0f      	cmp	r3, #15
 800437e:	d809      	bhi.n	8004394 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004380:	2200      	movs	r2, #0
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	f04f 30ff 	mov.w	r0, #4294967295
 8004388:	f000 f937 	bl	80045fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800438c:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <HAL_InitTick+0x74>)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e007      	b.n	80043a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	73fb      	strb	r3, [r7, #15]
 8004398:	e004      	b.n	80043a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]
 800439e:	e001      	b.n	80043a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	200000f4 	.word	0x200000f4
 80043b4:	20000094 	.word	0x20000094
 80043b8:	200000f0 	.word	0x200000f0

080043bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043c0:	4b06      	ldr	r3, [pc, #24]	; (80043dc <HAL_IncTick+0x20>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <HAL_IncTick+0x24>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4413      	add	r3, r2
 80043cc:	4a04      	ldr	r2, [pc, #16]	; (80043e0 <HAL_IncTick+0x24>)
 80043ce:	6013      	str	r3, [r2, #0]
}
 80043d0:	bf00      	nop
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	200000f4 	.word	0x200000f4
 80043e0:	20001524 	.word	0x20001524

080043e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return uwTick;
 80043e8:	4b03      	ldr	r3, [pc, #12]	; (80043f8 <HAL_GetTick+0x14>)
 80043ea:	681b      	ldr	r3, [r3, #0]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20001524 	.word	0x20001524

080043fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004404:	f7ff ffee 	bl	80043e4 <HAL_GetTick>
 8004408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004414:	d005      	beq.n	8004422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004416:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <HAL_Delay+0x44>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004422:	bf00      	nop
 8004424:	f7ff ffde 	bl	80043e4 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	429a      	cmp	r2, r3
 8004432:	d8f7      	bhi.n	8004424 <HAL_Delay+0x28>
  {
  }
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	200000f4 	.word	0x200000f4

08004444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <__NVIC_SetPriorityGrouping+0x44>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004460:	4013      	ands	r3, r2
 8004462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800446c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004476:	4a04      	ldr	r2, [pc, #16]	; (8004488 <__NVIC_SetPriorityGrouping+0x44>)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	60d3      	str	r3, [r2, #12]
}
 800447c:	bf00      	nop
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	e000ed00 	.word	0xe000ed00

0800448c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004490:	4b04      	ldr	r3, [pc, #16]	; (80044a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	0a1b      	lsrs	r3, r3, #8
 8004496:	f003 0307 	and.w	r3, r3, #7
}
 800449a:	4618      	mov	r0, r3
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	e000ed00 	.word	0xe000ed00

080044a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	db0b      	blt.n	80044d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	f003 021f 	and.w	r2, r3, #31
 80044c0:	4907      	ldr	r1, [pc, #28]	; (80044e0 <__NVIC_EnableIRQ+0x38>)
 80044c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	2001      	movs	r0, #1
 80044ca:	fa00 f202 	lsl.w	r2, r0, r2
 80044ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	e000e100 	.word	0xe000e100

080044e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	4603      	mov	r3, r0
 80044ec:	6039      	str	r1, [r7, #0]
 80044ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	db0a      	blt.n	800450e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	490c      	ldr	r1, [pc, #48]	; (8004530 <__NVIC_SetPriority+0x4c>)
 80044fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004502:	0112      	lsls	r2, r2, #4
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	440b      	add	r3, r1
 8004508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800450c:	e00a      	b.n	8004524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	b2da      	uxtb	r2, r3
 8004512:	4908      	ldr	r1, [pc, #32]	; (8004534 <__NVIC_SetPriority+0x50>)
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	3b04      	subs	r3, #4
 800451c:	0112      	lsls	r2, r2, #4
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	440b      	add	r3, r1
 8004522:	761a      	strb	r2, [r3, #24]
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	e000e100 	.word	0xe000e100
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004538:	b480      	push	{r7}
 800453a:	b089      	sub	sp, #36	; 0x24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f1c3 0307 	rsb	r3, r3, #7
 8004552:	2b04      	cmp	r3, #4
 8004554:	bf28      	it	cs
 8004556:	2304      	movcs	r3, #4
 8004558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	3304      	adds	r3, #4
 800455e:	2b06      	cmp	r3, #6
 8004560:	d902      	bls.n	8004568 <NVIC_EncodePriority+0x30>
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	3b03      	subs	r3, #3
 8004566:	e000      	b.n	800456a <NVIC_EncodePriority+0x32>
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800456c:	f04f 32ff 	mov.w	r2, #4294967295
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	43da      	mvns	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	401a      	ands	r2, r3
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004580:	f04f 31ff 	mov.w	r1, #4294967295
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	fa01 f303 	lsl.w	r3, r1, r3
 800458a:	43d9      	mvns	r1, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004590:	4313      	orrs	r3, r2
         );
}
 8004592:	4618      	mov	r0, r3
 8004594:	3724      	adds	r7, #36	; 0x24
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
	...

080045a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045b0:	d301      	bcc.n	80045b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045b2:	2301      	movs	r3, #1
 80045b4:	e00f      	b.n	80045d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045b6:	4a0a      	ldr	r2, [pc, #40]	; (80045e0 <SysTick_Config+0x40>)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045be:	210f      	movs	r1, #15
 80045c0:	f04f 30ff 	mov.w	r0, #4294967295
 80045c4:	f7ff ff8e 	bl	80044e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <SysTick_Config+0x40>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045ce:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <SysTick_Config+0x40>)
 80045d0:	2207      	movs	r2, #7
 80045d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	e000e010 	.word	0xe000e010

080045e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7ff ff29 	bl	8004444 <__NVIC_SetPriorityGrouping>
}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b086      	sub	sp, #24
 80045fe:	af00      	add	r7, sp, #0
 8004600:	4603      	mov	r3, r0
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800460c:	f7ff ff3e 	bl	800448c <__NVIC_GetPriorityGrouping>
 8004610:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	68b9      	ldr	r1, [r7, #8]
 8004616:	6978      	ldr	r0, [r7, #20]
 8004618:	f7ff ff8e 	bl	8004538 <NVIC_EncodePriority>
 800461c:	4602      	mov	r2, r0
 800461e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004622:	4611      	mov	r1, r2
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff ff5d 	bl	80044e4 <__NVIC_SetPriority>
}
 800462a:	bf00      	nop
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	4603      	mov	r3, r0
 800463a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800463c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff ff31 	bl	80044a8 <__NVIC_EnableIRQ>
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff ffa2 	bl	80045a0 <SysTick_Config>
 800465c:	4603      	mov	r3, r0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d005      	beq.n	800468a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2204      	movs	r2, #4
 8004682:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
 8004688:	e029      	b.n	80046de <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 020e 	bic.w	r2, r2, #14
 8004698:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0201 	bic.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	f003 021c 	and.w	r2, r3, #28
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	2101      	movs	r1, #1
 80046b8:	fa01 f202 	lsl.w	r2, r1, r2
 80046bc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	4798      	blx	r3
    }
  }
  return status;
 80046de:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046f2:	2300      	movs	r3, #0
 80046f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046f6:	e17f      	b.n	80049f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	2101      	movs	r1, #1
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	fa01 f303 	lsl.w	r3, r1, r3
 8004704:	4013      	ands	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 8171 	beq.w	80049f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d00b      	beq.n	8004730 <HAL_GPIO_Init+0x48>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d007      	beq.n	8004730 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004724:	2b11      	cmp	r3, #17
 8004726:	d003      	beq.n	8004730 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b12      	cmp	r3, #18
 800472e:	d130      	bne.n	8004792 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	2203      	movs	r2, #3
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	43db      	mvns	r3, r3
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4013      	ands	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004766:	2201      	movs	r2, #1
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	43db      	mvns	r3, r3
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4013      	ands	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	091b      	lsrs	r3, r3, #4
 800477c:	f003 0201 	and.w	r2, r3, #1
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	2b03      	cmp	r3, #3
 800479c:	d118      	bne.n	80047d0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80047a4:	2201      	movs	r2, #1
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	43db      	mvns	r3, r3
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4013      	ands	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	08db      	lsrs	r3, r3, #3
 80047ba:	f003 0201 	and.w	r2, r3, #1
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	2203      	movs	r2, #3
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4013      	ands	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d003      	beq.n	8004810 <HAL_GPIO_Init+0x128>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b12      	cmp	r3, #18
 800480e:	d123      	bne.n	8004858 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	08da      	lsrs	r2, r3, #3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3208      	adds	r2, #8
 8004818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800481c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	220f      	movs	r2, #15
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	43db      	mvns	r3, r3
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4013      	ands	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	08da      	lsrs	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3208      	adds	r2, #8
 8004852:	6939      	ldr	r1, [r7, #16]
 8004854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	2203      	movs	r2, #3
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	43db      	mvns	r3, r3
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4013      	ands	r3, r2
 800486e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 0203 	and.w	r2, r3, #3
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 80ac 	beq.w	80049f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800489a:	4b5f      	ldr	r3, [pc, #380]	; (8004a18 <HAL_GPIO_Init+0x330>)
 800489c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800489e:	4a5e      	ldr	r2, [pc, #376]	; (8004a18 <HAL_GPIO_Init+0x330>)
 80048a0:	f043 0301 	orr.w	r3, r3, #1
 80048a4:	6613      	str	r3, [r2, #96]	; 0x60
 80048a6:	4b5c      	ldr	r3, [pc, #368]	; (8004a18 <HAL_GPIO_Init+0x330>)
 80048a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	60bb      	str	r3, [r7, #8]
 80048b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80048b2:	4a5a      	ldr	r2, [pc, #360]	; (8004a1c <HAL_GPIO_Init+0x334>)
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	089b      	lsrs	r3, r3, #2
 80048b8:	3302      	adds	r3, #2
 80048ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	220f      	movs	r2, #15
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	43db      	mvns	r3, r3
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4013      	ands	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80048dc:	d025      	beq.n	800492a <HAL_GPIO_Init+0x242>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a4f      	ldr	r2, [pc, #316]	; (8004a20 <HAL_GPIO_Init+0x338>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d01f      	beq.n	8004926 <HAL_GPIO_Init+0x23e>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a4e      	ldr	r2, [pc, #312]	; (8004a24 <HAL_GPIO_Init+0x33c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d019      	beq.n	8004922 <HAL_GPIO_Init+0x23a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a4d      	ldr	r2, [pc, #308]	; (8004a28 <HAL_GPIO_Init+0x340>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d013      	beq.n	800491e <HAL_GPIO_Init+0x236>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a4c      	ldr	r2, [pc, #304]	; (8004a2c <HAL_GPIO_Init+0x344>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00d      	beq.n	800491a <HAL_GPIO_Init+0x232>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a4b      	ldr	r2, [pc, #300]	; (8004a30 <HAL_GPIO_Init+0x348>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d007      	beq.n	8004916 <HAL_GPIO_Init+0x22e>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a4a      	ldr	r2, [pc, #296]	; (8004a34 <HAL_GPIO_Init+0x34c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d101      	bne.n	8004912 <HAL_GPIO_Init+0x22a>
 800490e:	2306      	movs	r3, #6
 8004910:	e00c      	b.n	800492c <HAL_GPIO_Init+0x244>
 8004912:	2307      	movs	r3, #7
 8004914:	e00a      	b.n	800492c <HAL_GPIO_Init+0x244>
 8004916:	2305      	movs	r3, #5
 8004918:	e008      	b.n	800492c <HAL_GPIO_Init+0x244>
 800491a:	2304      	movs	r3, #4
 800491c:	e006      	b.n	800492c <HAL_GPIO_Init+0x244>
 800491e:	2303      	movs	r3, #3
 8004920:	e004      	b.n	800492c <HAL_GPIO_Init+0x244>
 8004922:	2302      	movs	r3, #2
 8004924:	e002      	b.n	800492c <HAL_GPIO_Init+0x244>
 8004926:	2301      	movs	r3, #1
 8004928:	e000      	b.n	800492c <HAL_GPIO_Init+0x244>
 800492a:	2300      	movs	r3, #0
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	f002 0203 	and.w	r2, r2, #3
 8004932:	0092      	lsls	r2, r2, #2
 8004934:	4093      	lsls	r3, r2
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800493c:	4937      	ldr	r1, [pc, #220]	; (8004a1c <HAL_GPIO_Init+0x334>)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	089b      	lsrs	r3, r3, #2
 8004942:	3302      	adds	r3, #2
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800494a:	4b3b      	ldr	r3, [pc, #236]	; (8004a38 <HAL_GPIO_Init+0x350>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	43db      	mvns	r3, r3
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	4013      	ands	r3, r2
 8004958:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800496e:	4a32      	ldr	r2, [pc, #200]	; (8004a38 <HAL_GPIO_Init+0x350>)
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004974:	4b30      	ldr	r3, [pc, #192]	; (8004a38 <HAL_GPIO_Init+0x350>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	43db      	mvns	r3, r3
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4013      	ands	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4313      	orrs	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004998:	4a27      	ldr	r2, [pc, #156]	; (8004a38 <HAL_GPIO_Init+0x350>)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800499e:	4b26      	ldr	r3, [pc, #152]	; (8004a38 <HAL_GPIO_Init+0x350>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	43db      	mvns	r3, r3
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4013      	ands	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049c2:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <HAL_GPIO_Init+0x350>)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049c8:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <HAL_GPIO_Init+0x350>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	43db      	mvns	r3, r3
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4013      	ands	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049ec:	4a12      	ldr	r2, [pc, #72]	; (8004a38 <HAL_GPIO_Init+0x350>)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	3301      	adds	r3, #1
 80049f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f47f ae78 	bne.w	80046f8 <HAL_GPIO_Init+0x10>
  }
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	40010000 	.word	0x40010000
 8004a20:	48000400 	.word	0x48000400
 8004a24:	48000800 	.word	0x48000800
 8004a28:	48000c00 	.word	0x48000c00
 8004a2c:	48001000 	.word	0x48001000
 8004a30:	48001400 	.word	0x48001400
 8004a34:	48001800 	.word	0x48001800
 8004a38:	40010400 	.word	0x40010400

08004a3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	887b      	ldrh	r3, [r7, #2]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a54:	2301      	movs	r3, #1
 8004a56:	73fb      	strb	r3, [r7, #15]
 8004a58:	e001      	b.n	8004a5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	807b      	strh	r3, [r7, #2]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a7c:	787b      	ldrb	r3, [r7, #1]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a82:	887a      	ldrh	r2, [r7, #2]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a88:	e002      	b.n	8004a90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a8a:	887a      	ldrh	r2, [r7, #2]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004aa6:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004aa8:	695a      	ldr	r2, [r3, #20]
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d006      	beq.n	8004ac0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ab2:	4a05      	ldr	r2, [pc, #20]	; (8004ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ab4:	88fb      	ldrh	r3, [r7, #6]
 8004ab6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ab8:	88fb      	ldrh	r3, [r7, #6]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f806 	bl	8004acc <HAL_GPIO_EXTI_Callback>
  }
}
 8004ac0:	bf00      	nop
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40010400 	.word	0x40010400

08004acc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004ae8:	4b04      	ldr	r3, [pc, #16]	; (8004afc <HAL_PWREx_GetVoltageRange+0x18>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40007000 	.word	0x40007000

08004b00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b0e:	d130      	bne.n	8004b72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b10:	4b23      	ldr	r3, [pc, #140]	; (8004ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b1c:	d038      	beq.n	8004b90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b1e:	4b20      	ldr	r3, [pc, #128]	; (8004ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b26:	4a1e      	ldr	r2, [pc, #120]	; (8004ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ba4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2232      	movs	r2, #50	; 0x32
 8004b34:	fb02 f303 	mul.w	r3, r2, r3
 8004b38:	4a1b      	ldr	r2, [pc, #108]	; (8004ba8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	0c9b      	lsrs	r3, r3, #18
 8004b40:	3301      	adds	r3, #1
 8004b42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b44:	e002      	b.n	8004b4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b4c:	4b14      	ldr	r3, [pc, #80]	; (8004ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b58:	d102      	bne.n	8004b60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1f2      	bne.n	8004b46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b60:	4b0f      	ldr	r3, [pc, #60]	; (8004ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6c:	d110      	bne.n	8004b90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e00f      	b.n	8004b92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b72:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b7e:	d007      	beq.n	8004b90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b80:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b88:	4a05      	ldr	r2, [pc, #20]	; (8004ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40007000 	.word	0x40007000
 8004ba4:	20000094 	.word	0x20000094
 8004ba8:	431bde83 	.word	0x431bde83

08004bac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e3d4      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bbe:	4ba1      	ldr	r3, [pc, #644]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
 8004bc6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bc8:	4b9e      	ldr	r3, [pc, #632]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 80e4 	beq.w	8004da8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d007      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x4a>
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	2b0c      	cmp	r3, #12
 8004bea:	f040 808b 	bne.w	8004d04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	f040 8087 	bne.w	8004d04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bf6:	4b93      	ldr	r3, [pc, #588]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_RCC_OscConfig+0x62>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e3ac      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1a      	ldr	r2, [r3, #32]
 8004c12:	4b8c      	ldr	r3, [pc, #560]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d004      	beq.n	8004c28 <HAL_RCC_OscConfig+0x7c>
 8004c1e:	4b89      	ldr	r3, [pc, #548]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c26:	e005      	b.n	8004c34 <HAL_RCC_OscConfig+0x88>
 8004c28:	4b86      	ldr	r3, [pc, #536]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2e:	091b      	lsrs	r3, r3, #4
 8004c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d223      	bcs.n	8004c80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fd41 	bl	80056c4 <RCC_SetFlashLatencyFromMSIRange>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e38d      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c4c:	4b7d      	ldr	r3, [pc, #500]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a7c      	ldr	r2, [pc, #496]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004c52:	f043 0308 	orr.w	r3, r3, #8
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	4b7a      	ldr	r3, [pc, #488]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	4977      	ldr	r1, [pc, #476]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c6a:	4b76      	ldr	r3, [pc, #472]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	021b      	lsls	r3, r3, #8
 8004c78:	4972      	ldr	r1, [pc, #456]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	604b      	str	r3, [r1, #4]
 8004c7e:	e025      	b.n	8004ccc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c80:	4b70      	ldr	r3, [pc, #448]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a6f      	ldr	r2, [pc, #444]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004c86:	f043 0308 	orr.w	r3, r3, #8
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	4b6d      	ldr	r3, [pc, #436]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	496a      	ldr	r1, [pc, #424]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c9e:	4b69      	ldr	r3, [pc, #420]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	4965      	ldr	r1, [pc, #404]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d109      	bne.n	8004ccc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fd01 	bl	80056c4 <RCC_SetFlashLatencyFromMSIRange>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e34d      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ccc:	f000 fc36 	bl	800553c <HAL_RCC_GetSysClockFreq>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	4b5c      	ldr	r3, [pc, #368]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	091b      	lsrs	r3, r3, #4
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	495a      	ldr	r1, [pc, #360]	; (8004e48 <HAL_RCC_OscConfig+0x29c>)
 8004cde:	5ccb      	ldrb	r3, [r1, r3]
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce8:	4a58      	ldr	r2, [pc, #352]	; (8004e4c <HAL_RCC_OscConfig+0x2a0>)
 8004cea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004cec:	4b58      	ldr	r3, [pc, #352]	; (8004e50 <HAL_RCC_OscConfig+0x2a4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fb27 	bl	8004344 <HAL_InitTick>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004cfa:	7bfb      	ldrb	r3, [r7, #15]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d052      	beq.n	8004da6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	e331      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d032      	beq.n	8004d72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d0c:	4b4d      	ldr	r3, [pc, #308]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a4c      	ldr	r2, [pc, #304]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004d12:	f043 0301 	orr.w	r3, r3, #1
 8004d16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d18:	f7ff fb64 	bl	80043e4 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d20:	f7ff fb60 	bl	80043e4 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e31a      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d32:	4b44      	ldr	r3, [pc, #272]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f0      	beq.n	8004d20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d3e:	4b41      	ldr	r3, [pc, #260]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a40      	ldr	r2, [pc, #256]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004d44:	f043 0308 	orr.w	r3, r3, #8
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	4b3e      	ldr	r3, [pc, #248]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	493b      	ldr	r1, [pc, #236]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d5c:	4b39      	ldr	r3, [pc, #228]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	021b      	lsls	r3, r3, #8
 8004d6a:	4936      	ldr	r1, [pc, #216]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	604b      	str	r3, [r1, #4]
 8004d70:	e01a      	b.n	8004da8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d72:	4b34      	ldr	r3, [pc, #208]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a33      	ldr	r2, [pc, #204]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004d78:	f023 0301 	bic.w	r3, r3, #1
 8004d7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d7e:	f7ff fb31 	bl	80043e4 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d86:	f7ff fb2d 	bl	80043e4 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e2e7      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d98:	4b2a      	ldr	r3, [pc, #168]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1f0      	bne.n	8004d86 <HAL_RCC_OscConfig+0x1da>
 8004da4:	e000      	b.n	8004da8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004da6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d074      	beq.n	8004e9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d005      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x21a>
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	2b0c      	cmp	r3, #12
 8004dbe:	d10e      	bne.n	8004dde <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d10b      	bne.n	8004dde <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc6:	4b1f      	ldr	r3, [pc, #124]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d064      	beq.n	8004e9c <HAL_RCC_OscConfig+0x2f0>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d160      	bne.n	8004e9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e2c4      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de6:	d106      	bne.n	8004df6 <HAL_RCC_OscConfig+0x24a>
 8004de8:	4b16      	ldr	r3, [pc, #88]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a15      	ldr	r2, [pc, #84]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	e01d      	b.n	8004e32 <HAL_RCC_OscConfig+0x286>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dfe:	d10c      	bne.n	8004e1a <HAL_RCC_OscConfig+0x26e>
 8004e00:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a0f      	ldr	r2, [pc, #60]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004e06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a0c      	ldr	r2, [pc, #48]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	e00b      	b.n	8004e32 <HAL_RCC_OscConfig+0x286>
 8004e1a:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a09      	ldr	r2, [pc, #36]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a06      	ldr	r2, [pc, #24]	; (8004e44 <HAL_RCC_OscConfig+0x298>)
 8004e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d01c      	beq.n	8004e74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3a:	f7ff fad3 	bl	80043e4 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e40:	e011      	b.n	8004e66 <HAL_RCC_OscConfig+0x2ba>
 8004e42:	bf00      	nop
 8004e44:	40021000 	.word	0x40021000
 8004e48:	0800834c 	.word	0x0800834c
 8004e4c:	20000094 	.word	0x20000094
 8004e50:	200000f0 	.word	0x200000f0
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e54:	f7ff fac6 	bl	80043e4 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b64      	cmp	r3, #100	; 0x64
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e280      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e66:	4baf      	ldr	r3, [pc, #700]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0x2a8>
 8004e72:	e014      	b.n	8004e9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e74:	f7ff fab6 	bl	80043e4 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e7c:	f7ff fab2 	bl	80043e4 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b64      	cmp	r3, #100	; 0x64
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e26c      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e8e:	4ba5      	ldr	r3, [pc, #660]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f0      	bne.n	8004e7c <HAL_RCC_OscConfig+0x2d0>
 8004e9a:	e000      	b.n	8004e9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d060      	beq.n	8004f6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d005      	beq.n	8004ebc <HAL_RCC_OscConfig+0x310>
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	2b0c      	cmp	r3, #12
 8004eb4:	d119      	bne.n	8004eea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d116      	bne.n	8004eea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ebc:	4b99      	ldr	r3, [pc, #612]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d005      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x328>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e249      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed4:	4b93      	ldr	r3, [pc, #588]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	061b      	lsls	r3, r3, #24
 8004ee2:	4990      	ldr	r1, [pc, #576]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ee8:	e040      	b.n	8004f6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d023      	beq.n	8004f3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ef2:	4b8c      	ldr	r3, [pc, #560]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a8b      	ldr	r2, [pc, #556]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8004ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efe:	f7ff fa71 	bl	80043e4 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f06:	f7ff fa6d 	bl	80043e4 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e227      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f18:	4b82      	ldr	r3, [pc, #520]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0f0      	beq.n	8004f06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f24:	4b7f      	ldr	r3, [pc, #508]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	061b      	lsls	r3, r3, #24
 8004f32:	497c      	ldr	r1, [pc, #496]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	604b      	str	r3, [r1, #4]
 8004f38:	e018      	b.n	8004f6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f3a:	4b7a      	ldr	r3, [pc, #488]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a79      	ldr	r2, [pc, #484]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8004f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f46:	f7ff fa4d 	bl	80043e4 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f4e:	f7ff fa49 	bl	80043e4 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e203      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f60:	4b70      	ldr	r3, [pc, #448]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f0      	bne.n	8004f4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d03c      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01c      	beq.n	8004fba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f80:	4b68      	ldr	r3, [pc, #416]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8004f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f86:	4a67      	ldr	r2, [pc, #412]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8004f88:	f043 0301 	orr.w	r3, r3, #1
 8004f8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f90:	f7ff fa28 	bl	80043e4 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f98:	f7ff fa24 	bl	80043e4 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e1de      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004faa:	4b5e      	ldr	r3, [pc, #376]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8004fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0ef      	beq.n	8004f98 <HAL_RCC_OscConfig+0x3ec>
 8004fb8:	e01b      	b.n	8004ff2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fba:	4b5a      	ldr	r3, [pc, #360]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8004fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fc0:	4a58      	ldr	r2, [pc, #352]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8004fc2:	f023 0301 	bic.w	r3, r3, #1
 8004fc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fca:	f7ff fa0b 	bl	80043e4 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fd2:	f7ff fa07 	bl	80043e4 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e1c1      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fe4:	4b4f      	ldr	r3, [pc, #316]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8004fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1ef      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80a6 	beq.w	800514c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005000:	2300      	movs	r3, #0
 8005002:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005004:	4b47      	ldr	r3, [pc, #284]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8005006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10d      	bne.n	800502c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005010:	4b44      	ldr	r3, [pc, #272]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	4a43      	ldr	r2, [pc, #268]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8005016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800501a:	6593      	str	r3, [r2, #88]	; 0x58
 800501c:	4b41      	ldr	r3, [pc, #260]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 800501e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005028:	2301      	movs	r3, #1
 800502a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800502c:	4b3e      	ldr	r3, [pc, #248]	; (8005128 <HAL_RCC_OscConfig+0x57c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005034:	2b00      	cmp	r3, #0
 8005036:	d118      	bne.n	800506a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005038:	4b3b      	ldr	r3, [pc, #236]	; (8005128 <HAL_RCC_OscConfig+0x57c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a3a      	ldr	r2, [pc, #232]	; (8005128 <HAL_RCC_OscConfig+0x57c>)
 800503e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005042:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005044:	f7ff f9ce 	bl	80043e4 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800504c:	f7ff f9ca 	bl	80043e4 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e184      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800505e:	4b32      	ldr	r3, [pc, #200]	; (8005128 <HAL_RCC_OscConfig+0x57c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d108      	bne.n	8005084 <HAL_RCC_OscConfig+0x4d8>
 8005072:	4b2c      	ldr	r3, [pc, #176]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8005074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005078:	4a2a      	ldr	r2, [pc, #168]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005082:	e024      	b.n	80050ce <HAL_RCC_OscConfig+0x522>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	2b05      	cmp	r3, #5
 800508a:	d110      	bne.n	80050ae <HAL_RCC_OscConfig+0x502>
 800508c:	4b25      	ldr	r3, [pc, #148]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 800508e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005092:	4a24      	ldr	r2, [pc, #144]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 8005094:	f043 0304 	orr.w	r3, r3, #4
 8005098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800509c:	4b21      	ldr	r3, [pc, #132]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a2:	4a20      	ldr	r2, [pc, #128]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050ac:	e00f      	b.n	80050ce <HAL_RCC_OscConfig+0x522>
 80050ae:	4b1d      	ldr	r3, [pc, #116]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 80050b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b4:	4a1b      	ldr	r2, [pc, #108]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 80050b6:	f023 0301 	bic.w	r3, r3, #1
 80050ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050be:	4b19      	ldr	r3, [pc, #100]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	4a17      	ldr	r2, [pc, #92]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 80050c6:	f023 0304 	bic.w	r3, r3, #4
 80050ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d016      	beq.n	8005104 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d6:	f7ff f985 	bl	80043e4 <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050dc:	e00a      	b.n	80050f4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050de:	f7ff f981 	bl	80043e4 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e139      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050f4:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <HAL_RCC_OscConfig+0x578>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0ed      	beq.n	80050de <HAL_RCC_OscConfig+0x532>
 8005102:	e01a      	b.n	800513a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005104:	f7ff f96e 	bl	80043e4 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800510a:	e00f      	b.n	800512c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800510c:	f7ff f96a 	bl	80043e4 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f241 3288 	movw	r2, #5000	; 0x1388
 800511a:	4293      	cmp	r3, r2
 800511c:	d906      	bls.n	800512c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e122      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
 8005122:	bf00      	nop
 8005124:	40021000 	.word	0x40021000
 8005128:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800512c:	4b90      	ldr	r3, [pc, #576]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 800512e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e8      	bne.n	800510c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800513a:	7ffb      	ldrb	r3, [r7, #31]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d105      	bne.n	800514c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005140:	4b8b      	ldr	r3, [pc, #556]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 8005142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005144:	4a8a      	ldr	r2, [pc, #552]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 8005146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800514a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 8108 	beq.w	8005366 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515a:	2b02      	cmp	r3, #2
 800515c:	f040 80d0 	bne.w	8005300 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005160:	4b83      	ldr	r3, [pc, #524]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f003 0203 	and.w	r2, r3, #3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005170:	429a      	cmp	r2, r3
 8005172:	d130      	bne.n	80051d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	3b01      	subs	r3, #1
 8005180:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005182:	429a      	cmp	r2, r3
 8005184:	d127      	bne.n	80051d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005190:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005192:	429a      	cmp	r2, r3
 8005194:	d11f      	bne.n	80051d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051a0:	2a07      	cmp	r2, #7
 80051a2:	bf14      	ite	ne
 80051a4:	2201      	movne	r2, #1
 80051a6:	2200      	moveq	r2, #0
 80051a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d113      	bne.n	80051d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b8:	085b      	lsrs	r3, r3, #1
 80051ba:	3b01      	subs	r3, #1
 80051bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80051be:	429a      	cmp	r2, r3
 80051c0:	d109      	bne.n	80051d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	085b      	lsrs	r3, r3, #1
 80051ce:	3b01      	subs	r3, #1
 80051d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d06e      	beq.n	80052b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	2b0c      	cmp	r3, #12
 80051da:	d069      	beq.n	80052b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051dc:	4b64      	ldr	r3, [pc, #400]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d105      	bne.n	80051f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80051e8:	4b61      	ldr	r3, [pc, #388]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e0b7      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80051f8:	4b5d      	ldr	r3, [pc, #372]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a5c      	ldr	r2, [pc, #368]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 80051fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005202:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005204:	f7ff f8ee 	bl	80043e4 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800520c:	f7ff f8ea 	bl	80043e4 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e0a4      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800521e:	4b54      	ldr	r3, [pc, #336]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1f0      	bne.n	800520c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800522a:	4b51      	ldr	r3, [pc, #324]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	4b51      	ldr	r3, [pc, #324]	; (8005374 <HAL_RCC_OscConfig+0x7c8>)
 8005230:	4013      	ands	r3, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800523a:	3a01      	subs	r2, #1
 800523c:	0112      	lsls	r2, r2, #4
 800523e:	4311      	orrs	r1, r2
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005244:	0212      	lsls	r2, r2, #8
 8005246:	4311      	orrs	r1, r2
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800524c:	0852      	lsrs	r2, r2, #1
 800524e:	3a01      	subs	r2, #1
 8005250:	0552      	lsls	r2, r2, #21
 8005252:	4311      	orrs	r1, r2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005258:	0852      	lsrs	r2, r2, #1
 800525a:	3a01      	subs	r2, #1
 800525c:	0652      	lsls	r2, r2, #25
 800525e:	4311      	orrs	r1, r2
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005264:	0912      	lsrs	r2, r2, #4
 8005266:	0452      	lsls	r2, r2, #17
 8005268:	430a      	orrs	r2, r1
 800526a:	4941      	ldr	r1, [pc, #260]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 800526c:	4313      	orrs	r3, r2
 800526e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005270:	4b3f      	ldr	r3, [pc, #252]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a3e      	ldr	r2, [pc, #248]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 8005276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800527a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800527c:	4b3c      	ldr	r3, [pc, #240]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	4a3b      	ldr	r2, [pc, #236]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 8005282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005286:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005288:	f7ff f8ac 	bl	80043e4 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005290:	f7ff f8a8 	bl	80043e4 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e062      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052a2:	4b33      	ldr	r3, [pc, #204]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0f0      	beq.n	8005290 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052ae:	e05a      	b.n	8005366 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e059      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052b4:	4b2e      	ldr	r3, [pc, #184]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d152      	bne.n	8005366 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052c0:	4b2b      	ldr	r3, [pc, #172]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a2a      	ldr	r2, [pc, #168]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 80052c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052cc:	4b28      	ldr	r3, [pc, #160]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	4a27      	ldr	r2, [pc, #156]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 80052d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052d8:	f7ff f884 	bl	80043e4 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e0:	f7ff f880 	bl	80043e4 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e03a      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052f2:	4b1f      	ldr	r3, [pc, #124]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0f0      	beq.n	80052e0 <HAL_RCC_OscConfig+0x734>
 80052fe:	e032      	b.n	8005366 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	2b0c      	cmp	r3, #12
 8005304:	d02d      	beq.n	8005362 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005306:	4b1a      	ldr	r3, [pc, #104]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a19      	ldr	r2, [pc, #100]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 800530c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005310:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005312:	4b17      	ldr	r3, [pc, #92]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d105      	bne.n	800532a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800531e:	4b14      	ldr	r3, [pc, #80]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	4a13      	ldr	r2, [pc, #76]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 8005324:	f023 0303 	bic.w	r3, r3, #3
 8005328:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800532a:	4b11      	ldr	r3, [pc, #68]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	4a10      	ldr	r2, [pc, #64]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 8005330:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005338:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533a:	f7ff f853 	bl	80043e4 <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005340:	e008      	b.n	8005354 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005342:	f7ff f84f 	bl	80043e4 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d901      	bls.n	8005354 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e009      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005354:	4b06      	ldr	r3, [pc, #24]	; (8005370 <HAL_RCC_OscConfig+0x7c4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1f0      	bne.n	8005342 <HAL_RCC_OscConfig+0x796>
 8005360:	e001      	b.n	8005366 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e000      	b.n	8005368 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3720      	adds	r7, #32
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40021000 	.word	0x40021000
 8005374:	f99d808c 	.word	0xf99d808c

08005378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e0c8      	b.n	800551e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800538c:	4b66      	ldr	r3, [pc, #408]	; (8005528 <HAL_RCC_ClockConfig+0x1b0>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d910      	bls.n	80053bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539a:	4b63      	ldr	r3, [pc, #396]	; (8005528 <HAL_RCC_ClockConfig+0x1b0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f023 0207 	bic.w	r2, r3, #7
 80053a2:	4961      	ldr	r1, [pc, #388]	; (8005528 <HAL_RCC_ClockConfig+0x1b0>)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053aa:	4b5f      	ldr	r3, [pc, #380]	; (8005528 <HAL_RCC_ClockConfig+0x1b0>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e0b0      	b.n	800551e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d04c      	beq.n	8005462 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d107      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053d0:	4b56      	ldr	r3, [pc, #344]	; (800552c <HAL_RCC_ClockConfig+0x1b4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d121      	bne.n	8005420 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e09e      	b.n	800551e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d107      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053e8:	4b50      	ldr	r3, [pc, #320]	; (800552c <HAL_RCC_ClockConfig+0x1b4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d115      	bne.n	8005420 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e092      	b.n	800551e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d107      	bne.n	8005410 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005400:	4b4a      	ldr	r3, [pc, #296]	; (800552c <HAL_RCC_ClockConfig+0x1b4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d109      	bne.n	8005420 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e086      	b.n	800551e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005410:	4b46      	ldr	r3, [pc, #280]	; (800552c <HAL_RCC_ClockConfig+0x1b4>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e07e      	b.n	800551e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005420:	4b42      	ldr	r3, [pc, #264]	; (800552c <HAL_RCC_ClockConfig+0x1b4>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f023 0203 	bic.w	r2, r3, #3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	493f      	ldr	r1, [pc, #252]	; (800552c <HAL_RCC_ClockConfig+0x1b4>)
 800542e:	4313      	orrs	r3, r2
 8005430:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005432:	f7fe ffd7 	bl	80043e4 <HAL_GetTick>
 8005436:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005438:	e00a      	b.n	8005450 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800543a:	f7fe ffd3 	bl	80043e4 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	f241 3288 	movw	r2, #5000	; 0x1388
 8005448:	4293      	cmp	r3, r2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e066      	b.n	800551e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005450:	4b36      	ldr	r3, [pc, #216]	; (800552c <HAL_RCC_ClockConfig+0x1b4>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f003 020c 	and.w	r2, r3, #12
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	429a      	cmp	r2, r3
 8005460:	d1eb      	bne.n	800543a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d008      	beq.n	8005480 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800546e:	4b2f      	ldr	r3, [pc, #188]	; (800552c <HAL_RCC_ClockConfig+0x1b4>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	492c      	ldr	r1, [pc, #176]	; (800552c <HAL_RCC_ClockConfig+0x1b4>)
 800547c:	4313      	orrs	r3, r2
 800547e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005480:	4b29      	ldr	r3, [pc, #164]	; (8005528 <HAL_RCC_ClockConfig+0x1b0>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d210      	bcs.n	80054b0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548e:	4b26      	ldr	r3, [pc, #152]	; (8005528 <HAL_RCC_ClockConfig+0x1b0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f023 0207 	bic.w	r2, r3, #7
 8005496:	4924      	ldr	r1, [pc, #144]	; (8005528 <HAL_RCC_ClockConfig+0x1b0>)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	4313      	orrs	r3, r2
 800549c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800549e:	4b22      	ldr	r3, [pc, #136]	; (8005528 <HAL_RCC_ClockConfig+0x1b0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d001      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e036      	b.n	800551e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d008      	beq.n	80054ce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054bc:	4b1b      	ldr	r3, [pc, #108]	; (800552c <HAL_RCC_ClockConfig+0x1b4>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	4918      	ldr	r1, [pc, #96]	; (800552c <HAL_RCC_ClockConfig+0x1b4>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d009      	beq.n	80054ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054da:	4b14      	ldr	r3, [pc, #80]	; (800552c <HAL_RCC_ClockConfig+0x1b4>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	4910      	ldr	r1, [pc, #64]	; (800552c <HAL_RCC_ClockConfig+0x1b4>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054ee:	f000 f825 	bl	800553c <HAL_RCC_GetSysClockFreq>
 80054f2:	4602      	mov	r2, r0
 80054f4:	4b0d      	ldr	r3, [pc, #52]	; (800552c <HAL_RCC_ClockConfig+0x1b4>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	091b      	lsrs	r3, r3, #4
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	490c      	ldr	r1, [pc, #48]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 8005500:	5ccb      	ldrb	r3, [r1, r3]
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	fa22 f303 	lsr.w	r3, r2, r3
 800550a:	4a0a      	ldr	r2, [pc, #40]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 800550c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800550e:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <HAL_RCC_ClockConfig+0x1c0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe ff16 	bl	8004344 <HAL_InitTick>
 8005518:	4603      	mov	r3, r0
 800551a:	72fb      	strb	r3, [r7, #11]

  return status;
 800551c:	7afb      	ldrb	r3, [r7, #11]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	40022000 	.word	0x40022000
 800552c:	40021000 	.word	0x40021000
 8005530:	0800834c 	.word	0x0800834c
 8005534:	20000094 	.word	0x20000094
 8005538:	200000f0 	.word	0x200000f0

0800553c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800553c:	b480      	push	{r7}
 800553e:	b089      	sub	sp, #36	; 0x24
 8005540:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
 8005546:	2300      	movs	r3, #0
 8005548:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800554a:	4b3e      	ldr	r3, [pc, #248]	; (8005644 <HAL_RCC_GetSysClockFreq+0x108>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 030c 	and.w	r3, r3, #12
 8005552:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005554:	4b3b      	ldr	r3, [pc, #236]	; (8005644 <HAL_RCC_GetSysClockFreq+0x108>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0303 	and.w	r3, r3, #3
 800555c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d005      	beq.n	8005570 <HAL_RCC_GetSysClockFreq+0x34>
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	2b0c      	cmp	r3, #12
 8005568:	d121      	bne.n	80055ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d11e      	bne.n	80055ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005570:	4b34      	ldr	r3, [pc, #208]	; (8005644 <HAL_RCC_GetSysClockFreq+0x108>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	2b00      	cmp	r3, #0
 800557a:	d107      	bne.n	800558c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800557c:	4b31      	ldr	r3, [pc, #196]	; (8005644 <HAL_RCC_GetSysClockFreq+0x108>)
 800557e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005582:	0a1b      	lsrs	r3, r3, #8
 8005584:	f003 030f 	and.w	r3, r3, #15
 8005588:	61fb      	str	r3, [r7, #28]
 800558a:	e005      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800558c:	4b2d      	ldr	r3, [pc, #180]	; (8005644 <HAL_RCC_GetSysClockFreq+0x108>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	091b      	lsrs	r3, r3, #4
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005598:	4a2b      	ldr	r2, [pc, #172]	; (8005648 <HAL_RCC_GetSysClockFreq+0x10c>)
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10d      	bne.n	80055c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055ac:	e00a      	b.n	80055c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d102      	bne.n	80055ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055b4:	4b25      	ldr	r3, [pc, #148]	; (800564c <HAL_RCC_GetSysClockFreq+0x110>)
 80055b6:	61bb      	str	r3, [r7, #24]
 80055b8:	e004      	b.n	80055c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d101      	bne.n	80055c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055c0:	4b23      	ldr	r3, [pc, #140]	; (8005650 <HAL_RCC_GetSysClockFreq+0x114>)
 80055c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	2b0c      	cmp	r3, #12
 80055c8:	d134      	bne.n	8005634 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055ca:	4b1e      	ldr	r3, [pc, #120]	; (8005644 <HAL_RCC_GetSysClockFreq+0x108>)
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d003      	beq.n	80055e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d003      	beq.n	80055e8 <HAL_RCC_GetSysClockFreq+0xac>
 80055e0:	e005      	b.n	80055ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80055e2:	4b1a      	ldr	r3, [pc, #104]	; (800564c <HAL_RCC_GetSysClockFreq+0x110>)
 80055e4:	617b      	str	r3, [r7, #20]
      break;
 80055e6:	e005      	b.n	80055f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055e8:	4b19      	ldr	r3, [pc, #100]	; (8005650 <HAL_RCC_GetSysClockFreq+0x114>)
 80055ea:	617b      	str	r3, [r7, #20]
      break;
 80055ec:	e002      	b.n	80055f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	617b      	str	r3, [r7, #20]
      break;
 80055f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055f4:	4b13      	ldr	r3, [pc, #76]	; (8005644 <HAL_RCC_GetSysClockFreq+0x108>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	091b      	lsrs	r3, r3, #4
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	3301      	adds	r3, #1
 8005600:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005602:	4b10      	ldr	r3, [pc, #64]	; (8005644 <HAL_RCC_GetSysClockFreq+0x108>)
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	0a1b      	lsrs	r3, r3, #8
 8005608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	fb02 f203 	mul.w	r2, r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	fbb2 f3f3 	udiv	r3, r2, r3
 8005618:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800561a:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <HAL_RCC_GetSysClockFreq+0x108>)
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	0e5b      	lsrs	r3, r3, #25
 8005620:	f003 0303 	and.w	r3, r3, #3
 8005624:	3301      	adds	r3, #1
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005632:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005634:	69bb      	ldr	r3, [r7, #24]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3724      	adds	r7, #36	; 0x24
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40021000 	.word	0x40021000
 8005648:	08008364 	.word	0x08008364
 800564c:	00f42400 	.word	0x00f42400
 8005650:	007a1200 	.word	0x007a1200

08005654 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005658:	4b03      	ldr	r3, [pc, #12]	; (8005668 <HAL_RCC_GetHCLKFreq+0x14>)
 800565a:	681b      	ldr	r3, [r3, #0]
}
 800565c:	4618      	mov	r0, r3
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	20000094 	.word	0x20000094

0800566c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005670:	f7ff fff0 	bl	8005654 <HAL_RCC_GetHCLKFreq>
 8005674:	4602      	mov	r2, r0
 8005676:	4b06      	ldr	r3, [pc, #24]	; (8005690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	0a1b      	lsrs	r3, r3, #8
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	4904      	ldr	r1, [pc, #16]	; (8005694 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005682:	5ccb      	ldrb	r3, [r1, r3]
 8005684:	f003 031f 	and.w	r3, r3, #31
 8005688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800568c:	4618      	mov	r0, r3
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40021000 	.word	0x40021000
 8005694:	0800835c 	.word	0x0800835c

08005698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800569c:	f7ff ffda 	bl	8005654 <HAL_RCC_GetHCLKFreq>
 80056a0:	4602      	mov	r2, r0
 80056a2:	4b06      	ldr	r3, [pc, #24]	; (80056bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	0adb      	lsrs	r3, r3, #11
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	4904      	ldr	r1, [pc, #16]	; (80056c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056ae:	5ccb      	ldrb	r3, [r1, r3]
 80056b0:	f003 031f 	and.w	r3, r3, #31
 80056b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40021000 	.word	0x40021000
 80056c0:	0800835c 	.word	0x0800835c

080056c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80056cc:	2300      	movs	r3, #0
 80056ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056d0:	4b2a      	ldr	r3, [pc, #168]	; (800577c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056dc:	f7ff fa02 	bl	8004ae4 <HAL_PWREx_GetVoltageRange>
 80056e0:	6178      	str	r0, [r7, #20]
 80056e2:	e014      	b.n	800570e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056e4:	4b25      	ldr	r3, [pc, #148]	; (800577c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e8:	4a24      	ldr	r2, [pc, #144]	; (800577c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ee:	6593      	str	r3, [r2, #88]	; 0x58
 80056f0:	4b22      	ldr	r3, [pc, #136]	; (800577c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056fc:	f7ff f9f2 	bl	8004ae4 <HAL_PWREx_GetVoltageRange>
 8005700:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005702:	4b1e      	ldr	r3, [pc, #120]	; (800577c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005706:	4a1d      	ldr	r2, [pc, #116]	; (800577c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800570c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005714:	d10b      	bne.n	800572e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b80      	cmp	r3, #128	; 0x80
 800571a:	d919      	bls.n	8005750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2ba0      	cmp	r3, #160	; 0xa0
 8005720:	d902      	bls.n	8005728 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005722:	2302      	movs	r3, #2
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	e013      	b.n	8005750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005728:	2301      	movs	r3, #1
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	e010      	b.n	8005750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b80      	cmp	r3, #128	; 0x80
 8005732:	d902      	bls.n	800573a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005734:	2303      	movs	r3, #3
 8005736:	613b      	str	r3, [r7, #16]
 8005738:	e00a      	b.n	8005750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b80      	cmp	r3, #128	; 0x80
 800573e:	d102      	bne.n	8005746 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005740:	2302      	movs	r3, #2
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	e004      	b.n	8005750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b70      	cmp	r3, #112	; 0x70
 800574a:	d101      	bne.n	8005750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800574c:	2301      	movs	r3, #1
 800574e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005750:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f023 0207 	bic.w	r2, r3, #7
 8005758:	4909      	ldr	r1, [pc, #36]	; (8005780 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005760:	4b07      	ldr	r3, [pc, #28]	; (8005780 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	429a      	cmp	r2, r3
 800576c:	d001      	beq.n	8005772 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e000      	b.n	8005774 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3718      	adds	r7, #24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	40021000 	.word	0x40021000
 8005780:	40022000 	.word	0x40022000

08005784 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800578c:	2300      	movs	r3, #0
 800578e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005790:	2300      	movs	r3, #0
 8005792:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800579c:	2b00      	cmp	r3, #0
 800579e:	d041      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057a8:	d02a      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80057aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057ae:	d824      	bhi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80057b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057b4:	d008      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80057b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057ba:	d81e      	bhi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00a      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80057c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057c4:	d010      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057c6:	e018      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057c8:	4b86      	ldr	r3, [pc, #536]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	4a85      	ldr	r2, [pc, #532]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057d4:	e015      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3304      	adds	r3, #4
 80057da:	2100      	movs	r1, #0
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 fabb 	bl	8005d58 <RCCEx_PLLSAI1_Config>
 80057e2:	4603      	mov	r3, r0
 80057e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057e6:	e00c      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3320      	adds	r3, #32
 80057ec:	2100      	movs	r1, #0
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fba6 	bl	8005f40 <RCCEx_PLLSAI2_Config>
 80057f4:	4603      	mov	r3, r0
 80057f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057f8:	e003      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	74fb      	strb	r3, [r7, #19]
      break;
 80057fe:	e000      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005802:	7cfb      	ldrb	r3, [r7, #19]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10b      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005808:	4b76      	ldr	r3, [pc, #472]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800580a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005816:	4973      	ldr	r1, [pc, #460]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800581e:	e001      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005820:	7cfb      	ldrb	r3, [r7, #19]
 8005822:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d041      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005834:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005838:	d02a      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800583a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800583e:	d824      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005844:	d008      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005846:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800584a:	d81e      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005854:	d010      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005856:	e018      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005858:	4b62      	ldr	r3, [pc, #392]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	4a61      	ldr	r2, [pc, #388]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800585e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005862:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005864:	e015      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3304      	adds	r3, #4
 800586a:	2100      	movs	r1, #0
 800586c:	4618      	mov	r0, r3
 800586e:	f000 fa73 	bl	8005d58 <RCCEx_PLLSAI1_Config>
 8005872:	4603      	mov	r3, r0
 8005874:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005876:	e00c      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3320      	adds	r3, #32
 800587c:	2100      	movs	r1, #0
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fb5e 	bl	8005f40 <RCCEx_PLLSAI2_Config>
 8005884:	4603      	mov	r3, r0
 8005886:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005888:	e003      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	74fb      	strb	r3, [r7, #19]
      break;
 800588e:	e000      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005890:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005892:	7cfb      	ldrb	r3, [r7, #19]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10b      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005898:	4b52      	ldr	r3, [pc, #328]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800589a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058a6:	494f      	ldr	r1, [pc, #316]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80058ae:	e001      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b0:	7cfb      	ldrb	r3, [r7, #19]
 80058b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 80a0 	beq.w	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058c2:	2300      	movs	r3, #0
 80058c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058c6:	4b47      	ldr	r3, [pc, #284]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80058d6:	2300      	movs	r3, #0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00d      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058dc:	4b41      	ldr	r3, [pc, #260]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e0:	4a40      	ldr	r2, [pc, #256]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e6:	6593      	str	r3, [r2, #88]	; 0x58
 80058e8:	4b3e      	ldr	r3, [pc, #248]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f0:	60bb      	str	r3, [r7, #8]
 80058f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058f4:	2301      	movs	r3, #1
 80058f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058f8:	4b3b      	ldr	r3, [pc, #236]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a3a      	ldr	r2, [pc, #232]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005902:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005904:	f7fe fd6e 	bl	80043e4 <HAL_GetTick>
 8005908:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800590a:	e009      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800590c:	f7fe fd6a 	bl	80043e4 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d902      	bls.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	74fb      	strb	r3, [r7, #19]
        break;
 800591e:	e005      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005920:	4b31      	ldr	r3, [pc, #196]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0ef      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800592c:	7cfb      	ldrb	r3, [r7, #19]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d15c      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005932:	4b2c      	ldr	r3, [pc, #176]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800593c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01f      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	429a      	cmp	r2, r3
 800594e:	d019      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005950:	4b24      	ldr	r3, [pc, #144]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800595a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800595c:	4b21      	ldr	r3, [pc, #132]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800595e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005962:	4a20      	ldr	r2, [pc, #128]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800596c:	4b1d      	ldr	r3, [pc, #116]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800596e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005972:	4a1c      	ldr	r2, [pc, #112]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800597c:	4a19      	ldr	r2, [pc, #100]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d016      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598e:	f7fe fd29 	bl	80043e4 <HAL_GetTick>
 8005992:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005994:	e00b      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005996:	f7fe fd25 	bl	80043e4 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d902      	bls.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	74fb      	strb	r3, [r7, #19]
            break;
 80059ac:	e006      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059ae:	4b0d      	ldr	r3, [pc, #52]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0ec      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80059bc:	7cfb      	ldrb	r3, [r7, #19]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10c      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059c2:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d2:	4904      	ldr	r1, [pc, #16]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80059da:	e009      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059dc:	7cfb      	ldrb	r3, [r7, #19]
 80059de:	74bb      	strb	r3, [r7, #18]
 80059e0:	e006      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80059e2:	bf00      	nop
 80059e4:	40021000 	.word	0x40021000
 80059e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ec:	7cfb      	ldrb	r3, [r7, #19]
 80059ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059f0:	7c7b      	ldrb	r3, [r7, #17]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d105      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059f6:	4b9e      	ldr	r3, [pc, #632]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fa:	4a9d      	ldr	r2, [pc, #628]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a0e:	4b98      	ldr	r3, [pc, #608]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a14:	f023 0203 	bic.w	r2, r3, #3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1c:	4994      	ldr	r1, [pc, #592]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a30:	4b8f      	ldr	r3, [pc, #572]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a36:	f023 020c 	bic.w	r2, r3, #12
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3e:	498c      	ldr	r1, [pc, #560]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a52:	4b87      	ldr	r3, [pc, #540]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a60:	4983      	ldr	r1, [pc, #524]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a74:	4b7e      	ldr	r3, [pc, #504]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	497b      	ldr	r1, [pc, #492]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0310 	and.w	r3, r3, #16
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a96:	4b76      	ldr	r3, [pc, #472]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa4:	4972      	ldr	r1, [pc, #456]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0320 	and.w	r3, r3, #32
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ab8:	4b6d      	ldr	r3, [pc, #436]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac6:	496a      	ldr	r1, [pc, #424]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ada:	4b65      	ldr	r3, [pc, #404]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae8:	4961      	ldr	r1, [pc, #388]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00a      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005afc:	4b5c      	ldr	r3, [pc, #368]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b0a:	4959      	ldr	r1, [pc, #356]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b1e:	4b54      	ldr	r3, [pc, #336]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2c:	4950      	ldr	r1, [pc, #320]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00a      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b40:	4b4b      	ldr	r3, [pc, #300]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4e:	4948      	ldr	r1, [pc, #288]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b62:	4b43      	ldr	r3, [pc, #268]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b70:	493f      	ldr	r1, [pc, #252]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d028      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b84:	4b3a      	ldr	r3, [pc, #232]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b92:	4937      	ldr	r1, [pc, #220]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ba2:	d106      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ba4:	4b32      	ldr	r3, [pc, #200]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	4a31      	ldr	r2, [pc, #196]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bae:	60d3      	str	r3, [r2, #12]
 8005bb0:	e011      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bba:	d10c      	bne.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 f8c8 	bl	8005d58 <RCCEx_PLLSAI1_Config>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005bcc:	7cfb      	ldrb	r3, [r7, #19]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005bd2:	7cfb      	ldrb	r3, [r7, #19]
 8005bd4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d028      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005be2:	4b23      	ldr	r3, [pc, #140]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf0:	491f      	ldr	r1, [pc, #124]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c00:	d106      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c02:	4b1b      	ldr	r3, [pc, #108]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	4a1a      	ldr	r2, [pc, #104]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c0c:	60d3      	str	r3, [r2, #12]
 8005c0e:	e011      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c18:	d10c      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	2101      	movs	r1, #1
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 f899 	bl	8005d58 <RCCEx_PLLSAI1_Config>
 8005c26:	4603      	mov	r3, r0
 8005c28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c2a:	7cfb      	ldrb	r3, [r7, #19]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005c30:	7cfb      	ldrb	r3, [r7, #19]
 8005c32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d02b      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c40:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c4e:	4908      	ldr	r1, [pc, #32]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c5e:	d109      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c60:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	4a02      	ldr	r2, [pc, #8]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c6a:	60d3      	str	r3, [r2, #12]
 8005c6c:	e014      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005c6e:	bf00      	nop
 8005c70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c7c:	d10c      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3304      	adds	r3, #4
 8005c82:	2101      	movs	r1, #1
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 f867 	bl	8005d58 <RCCEx_PLLSAI1_Config>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c8e:	7cfb      	ldrb	r3, [r7, #19]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005c94:	7cfb      	ldrb	r3, [r7, #19]
 8005c96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d02f      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ca4:	4b2b      	ldr	r3, [pc, #172]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005caa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cb2:	4928      	ldr	r1, [pc, #160]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cc2:	d10d      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	2102      	movs	r1, #2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 f844 	bl	8005d58 <RCCEx_PLLSAI1_Config>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cd4:	7cfb      	ldrb	r3, [r7, #19]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d014      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005cda:	7cfb      	ldrb	r3, [r7, #19]
 8005cdc:	74bb      	strb	r3, [r7, #18]
 8005cde:	e011      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ce8:	d10c      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3320      	adds	r3, #32
 8005cee:	2102      	movs	r1, #2
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 f925 	bl	8005f40 <RCCEx_PLLSAI2_Config>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cfa:	7cfb      	ldrb	r3, [r7, #19]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005d00:	7cfb      	ldrb	r3, [r7, #19]
 8005d02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00a      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d10:	4b10      	ldr	r3, [pc, #64]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d1e:	490d      	ldr	r1, [pc, #52]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00b      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d32:	4b08      	ldr	r3, [pc, #32]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d42:	4904      	ldr	r1, [pc, #16]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	40021000 	.word	0x40021000

08005d58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d66:	4b75      	ldr	r3, [pc, #468]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d018      	beq.n	8005da4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d72:	4b72      	ldr	r3, [pc, #456]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f003 0203 	and.w	r2, r3, #3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d10d      	bne.n	8005d9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
       ||
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d8a:	4b6c      	ldr	r3, [pc, #432]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	091b      	lsrs	r3, r3, #4
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
       ||
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d047      	beq.n	8005e2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	73fb      	strb	r3, [r7, #15]
 8005da2:	e044      	b.n	8005e2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d018      	beq.n	8005dde <RCCEx_PLLSAI1_Config+0x86>
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d825      	bhi.n	8005dfc <RCCEx_PLLSAI1_Config+0xa4>
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d002      	beq.n	8005dba <RCCEx_PLLSAI1_Config+0x62>
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d009      	beq.n	8005dcc <RCCEx_PLLSAI1_Config+0x74>
 8005db8:	e020      	b.n	8005dfc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005dba:	4b60      	ldr	r3, [pc, #384]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d11d      	bne.n	8005e02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dca:	e01a      	b.n	8005e02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005dcc:	4b5b      	ldr	r3, [pc, #364]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d116      	bne.n	8005e06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ddc:	e013      	b.n	8005e06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005dde:	4b57      	ldr	r3, [pc, #348]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10f      	bne.n	8005e0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005dea:	4b54      	ldr	r3, [pc, #336]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d109      	bne.n	8005e0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dfa:	e006      	b.n	8005e0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8005e00:	e004      	b.n	8005e0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e02:	bf00      	nop
 8005e04:	e002      	b.n	8005e0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e06:	bf00      	nop
 8005e08:	e000      	b.n	8005e0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10d      	bne.n	8005e2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e12:	4b4a      	ldr	r3, [pc, #296]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6819      	ldr	r1, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	430b      	orrs	r3, r1
 8005e28:	4944      	ldr	r1, [pc, #272]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d17d      	bne.n	8005f30 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005e34:	4b41      	ldr	r3, [pc, #260]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a40      	ldr	r2, [pc, #256]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e40:	f7fe fad0 	bl	80043e4 <HAL_GetTick>
 8005e44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e46:	e009      	b.n	8005e5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e48:	f7fe facc 	bl	80043e4 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d902      	bls.n	8005e5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	73fb      	strb	r3, [r7, #15]
        break;
 8005e5a:	e005      	b.n	8005e68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e5c:	4b37      	ldr	r3, [pc, #220]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1ef      	bne.n	8005e48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d160      	bne.n	8005f30 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d111      	bne.n	8005e98 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e74:	4b31      	ldr	r3, [pc, #196]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6892      	ldr	r2, [r2, #8]
 8005e84:	0211      	lsls	r1, r2, #8
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	68d2      	ldr	r2, [r2, #12]
 8005e8a:	0912      	lsrs	r2, r2, #4
 8005e8c:	0452      	lsls	r2, r2, #17
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	492a      	ldr	r1, [pc, #168]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	610b      	str	r3, [r1, #16]
 8005e96:	e027      	b.n	8005ee8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d112      	bne.n	8005ec4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e9e:	4b27      	ldr	r3, [pc, #156]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005ea6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6892      	ldr	r2, [r2, #8]
 8005eae:	0211      	lsls	r1, r2, #8
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6912      	ldr	r2, [r2, #16]
 8005eb4:	0852      	lsrs	r2, r2, #1
 8005eb6:	3a01      	subs	r2, #1
 8005eb8:	0552      	lsls	r2, r2, #21
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	491f      	ldr	r1, [pc, #124]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	610b      	str	r3, [r1, #16]
 8005ec2:	e011      	b.n	8005ee8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ec4:	4b1d      	ldr	r3, [pc, #116]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ecc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6892      	ldr	r2, [r2, #8]
 8005ed4:	0211      	lsls	r1, r2, #8
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6952      	ldr	r2, [r2, #20]
 8005eda:	0852      	lsrs	r2, r2, #1
 8005edc:	3a01      	subs	r2, #1
 8005ede:	0652      	lsls	r2, r2, #25
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	4916      	ldr	r1, [pc, #88]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ee8:	4b14      	ldr	r3, [pc, #80]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a13      	ldr	r2, [pc, #76]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ef2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef4:	f7fe fa76 	bl	80043e4 <HAL_GetTick>
 8005ef8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005efa:	e009      	b.n	8005f10 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005efc:	f7fe fa72 	bl	80043e4 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d902      	bls.n	8005f10 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	73fb      	strb	r3, [r7, #15]
          break;
 8005f0e:	e005      	b.n	8005f1c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0ef      	beq.n	8005efc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005f22:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f24:	691a      	ldr	r2, [r3, #16]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	4904      	ldr	r1, [pc, #16]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40021000 	.word	0x40021000

08005f40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f4e:	4b6a      	ldr	r3, [pc, #424]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f003 0303 	and.w	r3, r3, #3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d018      	beq.n	8005f8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f5a:	4b67      	ldr	r3, [pc, #412]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f003 0203 	and.w	r2, r3, #3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d10d      	bne.n	8005f86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
       ||
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d009      	beq.n	8005f86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005f72:	4b61      	ldr	r3, [pc, #388]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	091b      	lsrs	r3, r3, #4
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
       ||
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d047      	beq.n	8006016 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	73fb      	strb	r3, [r7, #15]
 8005f8a:	e044      	b.n	8006016 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d018      	beq.n	8005fc6 <RCCEx_PLLSAI2_Config+0x86>
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d825      	bhi.n	8005fe4 <RCCEx_PLLSAI2_Config+0xa4>
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d002      	beq.n	8005fa2 <RCCEx_PLLSAI2_Config+0x62>
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d009      	beq.n	8005fb4 <RCCEx_PLLSAI2_Config+0x74>
 8005fa0:	e020      	b.n	8005fe4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005fa2:	4b55      	ldr	r3, [pc, #340]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d11d      	bne.n	8005fea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fb2:	e01a      	b.n	8005fea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005fb4:	4b50      	ldr	r3, [pc, #320]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d116      	bne.n	8005fee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fc4:	e013      	b.n	8005fee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fc6:	4b4c      	ldr	r3, [pc, #304]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10f      	bne.n	8005ff2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fd2:	4b49      	ldr	r3, [pc, #292]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d109      	bne.n	8005ff2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fe2:	e006      	b.n	8005ff2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe8:	e004      	b.n	8005ff4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fea:	bf00      	nop
 8005fec:	e002      	b.n	8005ff4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e000      	b.n	8005ff4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ff2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10d      	bne.n	8006016 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ffa:	4b3f      	ldr	r3, [pc, #252]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6819      	ldr	r1, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	3b01      	subs	r3, #1
 800600c:	011b      	lsls	r3, r3, #4
 800600e:	430b      	orrs	r3, r1
 8006010:	4939      	ldr	r1, [pc, #228]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006012:	4313      	orrs	r3, r2
 8006014:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006016:	7bfb      	ldrb	r3, [r7, #15]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d167      	bne.n	80060ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800601c:	4b36      	ldr	r3, [pc, #216]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a35      	ldr	r2, [pc, #212]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006028:	f7fe f9dc 	bl	80043e4 <HAL_GetTick>
 800602c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800602e:	e009      	b.n	8006044 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006030:	f7fe f9d8 	bl	80043e4 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d902      	bls.n	8006044 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	73fb      	strb	r3, [r7, #15]
        break;
 8006042:	e005      	b.n	8006050 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006044:	4b2c      	ldr	r3, [pc, #176]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1ef      	bne.n	8006030 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d14a      	bne.n	80060ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d111      	bne.n	8006080 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800605c:	4b26      	ldr	r3, [pc, #152]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6892      	ldr	r2, [r2, #8]
 800606c:	0211      	lsls	r1, r2, #8
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68d2      	ldr	r2, [r2, #12]
 8006072:	0912      	lsrs	r2, r2, #4
 8006074:	0452      	lsls	r2, r2, #17
 8006076:	430a      	orrs	r2, r1
 8006078:	491f      	ldr	r1, [pc, #124]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800607a:	4313      	orrs	r3, r2
 800607c:	614b      	str	r3, [r1, #20]
 800607e:	e011      	b.n	80060a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006080:	4b1d      	ldr	r3, [pc, #116]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006088:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6892      	ldr	r2, [r2, #8]
 8006090:	0211      	lsls	r1, r2, #8
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	6912      	ldr	r2, [r2, #16]
 8006096:	0852      	lsrs	r2, r2, #1
 8006098:	3a01      	subs	r2, #1
 800609a:	0652      	lsls	r2, r2, #25
 800609c:	430a      	orrs	r2, r1
 800609e:	4916      	ldr	r1, [pc, #88]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80060a4:	4b14      	ldr	r3, [pc, #80]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a13      	ldr	r2, [pc, #76]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b0:	f7fe f998 	bl	80043e4 <HAL_GetTick>
 80060b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060b6:	e009      	b.n	80060cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060b8:	f7fe f994 	bl	80043e4 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d902      	bls.n	80060cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	73fb      	strb	r3, [r7, #15]
          break;
 80060ca:	e005      	b.n	80060d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060cc:	4b0a      	ldr	r3, [pc, #40]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d0ef      	beq.n	80060b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80060de:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060e0:	695a      	ldr	r2, [r3, #20]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	4904      	ldr	r1, [pc, #16]	; (80060f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	40021000 	.word	0x40021000

080060fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e040      	b.n	8006190 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006112:	2b00      	cmp	r3, #0
 8006114:	d106      	bne.n	8006124 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7fc fbdc 	bl	80028dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2224      	movs	r2, #36	; 0x24
 8006128:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0201 	bic.w	r2, r2, #1
 8006138:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fabc 	bl	80066b8 <UART_SetConfig>
 8006140:	4603      	mov	r3, r0
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e022      	b.n	8006190 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fd3a 	bl	8006bcc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006176:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0201 	orr.w	r2, r2, #1
 8006186:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fdc1 	bl	8006d10 <UART_CheckIdleState>
 800618e:	4603      	mov	r3, r0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08a      	sub	sp, #40	; 0x28
 800619c:	af02      	add	r7, sp, #8
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	4613      	mov	r3, r2
 80061a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	f040 8081 	bne.w	80062b4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <HAL_UART_Transmit+0x26>
 80061b8:	88fb      	ldrh	r3, [r7, #6]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e079      	b.n	80062b6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_UART_Transmit+0x38>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e072      	b.n	80062b6 <HAL_UART_Transmit+0x11e>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2221      	movs	r2, #33	; 0x21
 80061e2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80061e4:	f7fe f8fe 	bl	80043e4 <HAL_GetTick>
 80061e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	88fa      	ldrh	r2, [r7, #6]
 80061ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	88fa      	ldrh	r2, [r7, #6]
 80061f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006202:	d108      	bne.n	8006216 <HAL_UART_Transmit+0x7e>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800620c:	2300      	movs	r3, #0
 800620e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	61bb      	str	r3, [r7, #24]
 8006214:	e003      	b.n	800621e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800621a:	2300      	movs	r3, #0
 800621c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006226:	e02d      	b.n	8006284 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2200      	movs	r2, #0
 8006230:	2180      	movs	r1, #128	; 0x80
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 fdb1 	bl	8006d9a <UART_WaitOnFlagUntilTimeout>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e039      	b.n	80062b6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10b      	bne.n	8006260 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	881a      	ldrh	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006254:	b292      	uxth	r2, r2
 8006256:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	3302      	adds	r3, #2
 800625c:	61bb      	str	r3, [r7, #24]
 800625e:	e008      	b.n	8006272 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	781a      	ldrb	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	b292      	uxth	r2, r2
 800626a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	3301      	adds	r3, #1
 8006270:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006278:	b29b      	uxth	r3, r3
 800627a:	3b01      	subs	r3, #1
 800627c:	b29a      	uxth	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1cb      	bne.n	8006228 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2200      	movs	r2, #0
 8006298:	2140      	movs	r1, #64	; 0x40
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 fd7d 	bl	8006d9a <UART_WaitOnFlagUntilTimeout>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e005      	b.n	80062b6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2220      	movs	r2, #32
 80062ae:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e000      	b.n	80062b6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80062b4:	2302      	movs	r3, #2
  }
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	4613      	mov	r3, r2
 80062cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	f040 808a 	bne.w	80063ec <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <HAL_UART_Receive_IT+0x24>
 80062de:	88fb      	ldrh	r3, [r7, #6]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e082      	b.n	80063ee <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d101      	bne.n	80062f6 <HAL_UART_Receive_IT+0x36>
 80062f2:	2302      	movs	r3, #2
 80062f4:	e07b      	b.n	80063ee <HAL_UART_Receive_IT+0x12e>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	88fa      	ldrh	r2, [r7, #6]
 8006308:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	88fa      	ldrh	r2, [r7, #6]
 8006310:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006322:	d10e      	bne.n	8006342 <HAL_UART_Receive_IT+0x82>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d105      	bne.n	8006338 <HAL_UART_Receive_IT+0x78>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006332:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006336:	e02d      	b.n	8006394 <HAL_UART_Receive_IT+0xd4>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	22ff      	movs	r2, #255	; 0xff
 800633c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006340:	e028      	b.n	8006394 <HAL_UART_Receive_IT+0xd4>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10d      	bne.n	8006366 <HAL_UART_Receive_IT+0xa6>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d104      	bne.n	800635c <HAL_UART_Receive_IT+0x9c>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	22ff      	movs	r2, #255	; 0xff
 8006356:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800635a:	e01b      	b.n	8006394 <HAL_UART_Receive_IT+0xd4>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	227f      	movs	r2, #127	; 0x7f
 8006360:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006364:	e016      	b.n	8006394 <HAL_UART_Receive_IT+0xd4>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800636e:	d10d      	bne.n	800638c <HAL_UART_Receive_IT+0xcc>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d104      	bne.n	8006382 <HAL_UART_Receive_IT+0xc2>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	227f      	movs	r2, #127	; 0x7f
 800637c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006380:	e008      	b.n	8006394 <HAL_UART_Receive_IT+0xd4>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	223f      	movs	r2, #63	; 0x3f
 8006386:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800638a:	e003      	b.n	8006394 <HAL_UART_Receive_IT+0xd4>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2222      	movs	r2, #34	; 0x22
 800639e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f042 0201 	orr.w	r2, r2, #1
 80063ae:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b8:	d107      	bne.n	80063ca <HAL_UART_Receive_IT+0x10a>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d103      	bne.n	80063ca <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4a0d      	ldr	r2, [pc, #52]	; (80063fc <HAL_UART_Receive_IT+0x13c>)
 80063c6:	661a      	str	r2, [r3, #96]	; 0x60
 80063c8:	e002      	b.n	80063d0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	4a0c      	ldr	r2, [pc, #48]	; (8006400 <HAL_UART_Receive_IT+0x140>)
 80063ce:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80063e6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	e000      	b.n	80063ee <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80063ec:	2302      	movs	r3, #2
  }
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	08006fd9 	.word	0x08006fd9
 8006400:	08006f2f 	.word	0x08006f2f

08006404 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006424:	69fa      	ldr	r2, [r7, #28]
 8006426:	f640 030f 	movw	r3, #2063	; 0x80f
 800642a:	4013      	ands	r3, r2
 800642c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d113      	bne.n	800645c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00e      	beq.n	800645c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	f003 0320 	and.w	r3, r3, #32
 8006444:	2b00      	cmp	r3, #0
 8006446:	d009      	beq.n	800645c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 8113 	beq.w	8006678 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	4798      	blx	r3
      }
      return;
 800645a:	e10d      	b.n	8006678 <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 80d6 	beq.w	8006610 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d105      	bne.n	800647a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	4b85      	ldr	r3, [pc, #532]	; (8006688 <HAL_UART_IRQHandler+0x284>)
 8006472:	4013      	ands	r3, r2
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 80cb 	beq.w	8006610 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00e      	beq.n	80064a2 <HAL_UART_IRQHandler+0x9e>
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800648a:	2b00      	cmp	r3, #0
 800648c:	d009      	beq.n	80064a2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2201      	movs	r2, #1
 8006494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800649a:	f043 0201 	orr.w	r2, r3, #1
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00e      	beq.n	80064ca <HAL_UART_IRQHandler+0xc6>
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d009      	beq.n	80064ca <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2202      	movs	r2, #2
 80064bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c2:	f043 0204 	orr.w	r2, r3, #4
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00e      	beq.n	80064f2 <HAL_UART_IRQHandler+0xee>
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d009      	beq.n	80064f2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2204      	movs	r2, #4
 80064e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ea:	f043 0202 	orr.w	r2, r3, #2
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	f003 0308 	and.w	r3, r3, #8
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d013      	beq.n	8006524 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	f003 0320 	and.w	r3, r3, #32
 8006502:	2b00      	cmp	r3, #0
 8006504:	d104      	bne.n	8006510 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800650c:	2b00      	cmp	r3, #0
 800650e:	d009      	beq.n	8006524 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2208      	movs	r2, #8
 8006516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800651c:	f043 0208 	orr.w	r2, r3, #8
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00f      	beq.n	800654e <HAL_UART_IRQHandler+0x14a>
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006540:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006546:	f043 0220 	orr.w	r2, r3, #32
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 8092 	beq.w	800667c <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00c      	beq.n	800657c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	f003 0320 	and.w	r3, r3, #32
 8006568:	2b00      	cmp	r3, #0
 800656a:	d007      	beq.n	800657c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006570:	2b00      	cmp	r3, #0
 8006572:	d003      	beq.n	800657c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006580:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658c:	2b40      	cmp	r3, #64	; 0x40
 800658e:	d004      	beq.n	800659a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006596:	2b00      	cmp	r3, #0
 8006598:	d031      	beq.n	80065fe <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fc78 	bl	8006e90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065aa:	2b40      	cmp	r3, #64	; 0x40
 80065ac:	d123      	bne.n	80065f6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065bc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d013      	beq.n	80065ee <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ca:	4a30      	ldr	r2, [pc, #192]	; (800668c <HAL_UART_IRQHandler+0x288>)
 80065cc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe f847 	bl	8004666 <HAL_DMA_Abort_IT>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d016      	beq.n	800660c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80065e8:	4610      	mov	r0, r2
 80065ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ec:	e00e      	b.n	800660c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f858 	bl	80066a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f4:	e00a      	b.n	800660c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f854 	bl	80066a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065fc:	e006      	b.n	800660c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f850 	bl	80066a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800660a:	e037      	b.n	800667c <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660c:	bf00      	nop
    return;
 800660e:	e035      	b.n	800667c <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00d      	beq.n	8006636 <HAL_UART_IRQHandler+0x232>
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d008      	beq.n	8006636 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800662c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fd27 	bl	8007082 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006634:	e025      	b.n	8006682 <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00d      	beq.n	800665c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006646:	2b00      	cmp	r3, #0
 8006648:	d008      	beq.n	800665c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800664e:	2b00      	cmp	r3, #0
 8006650:	d016      	beq.n	8006680 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	4798      	blx	r3
    }
    return;
 800665a:	e011      	b.n	8006680 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00d      	beq.n	8006682 <HAL_UART_IRQHandler+0x27e>
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d008      	beq.n	8006682 <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fc43 	bl	8006efc <UART_EndTransmit_IT>
    return;
 8006676:	e004      	b.n	8006682 <HAL_UART_IRQHandler+0x27e>
      return;
 8006678:	bf00      	nop
 800667a:	e002      	b.n	8006682 <HAL_UART_IRQHandler+0x27e>
    return;
 800667c:	bf00      	nop
 800667e:	e000      	b.n	8006682 <HAL_UART_IRQHandler+0x27e>
    return;
 8006680:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006682:	3720      	adds	r7, #32
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	04000120 	.word	0x04000120
 800668c:	08006ed1 	.word	0x08006ed1

08006690 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066b8:	b5b0      	push	{r4, r5, r7, lr}
 80066ba:	b088      	sub	sp, #32
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	4313      	orrs	r3, r2
 80066da:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	4bad      	ldr	r3, [pc, #692]	; (8006998 <UART_SetConfig+0x2e0>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6812      	ldr	r2, [r2, #0]
 80066ea:	69f9      	ldr	r1, [r7, #28]
 80066ec:	430b      	orrs	r3, r1
 80066ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4aa2      	ldr	r2, [pc, #648]	; (800699c <UART_SetConfig+0x2e4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d004      	beq.n	8006720 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	4313      	orrs	r3, r2
 800671e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	69fa      	ldr	r2, [r7, #28]
 8006730:	430a      	orrs	r2, r1
 8006732:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a99      	ldr	r2, [pc, #612]	; (80069a0 <UART_SetConfig+0x2e8>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d121      	bne.n	8006782 <UART_SetConfig+0xca>
 800673e:	4b99      	ldr	r3, [pc, #612]	; (80069a4 <UART_SetConfig+0x2ec>)
 8006740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006744:	f003 0303 	and.w	r3, r3, #3
 8006748:	2b03      	cmp	r3, #3
 800674a:	d817      	bhi.n	800677c <UART_SetConfig+0xc4>
 800674c:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <UART_SetConfig+0x9c>)
 800674e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006752:	bf00      	nop
 8006754:	08006765 	.word	0x08006765
 8006758:	08006771 	.word	0x08006771
 800675c:	0800676b 	.word	0x0800676b
 8006760:	08006777 	.word	0x08006777
 8006764:	2301      	movs	r3, #1
 8006766:	76fb      	strb	r3, [r7, #27]
 8006768:	e0e7      	b.n	800693a <UART_SetConfig+0x282>
 800676a:	2302      	movs	r3, #2
 800676c:	76fb      	strb	r3, [r7, #27]
 800676e:	e0e4      	b.n	800693a <UART_SetConfig+0x282>
 8006770:	2304      	movs	r3, #4
 8006772:	76fb      	strb	r3, [r7, #27]
 8006774:	e0e1      	b.n	800693a <UART_SetConfig+0x282>
 8006776:	2308      	movs	r3, #8
 8006778:	76fb      	strb	r3, [r7, #27]
 800677a:	e0de      	b.n	800693a <UART_SetConfig+0x282>
 800677c:	2310      	movs	r3, #16
 800677e:	76fb      	strb	r3, [r7, #27]
 8006780:	e0db      	b.n	800693a <UART_SetConfig+0x282>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a88      	ldr	r2, [pc, #544]	; (80069a8 <UART_SetConfig+0x2f0>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d132      	bne.n	80067f2 <UART_SetConfig+0x13a>
 800678c:	4b85      	ldr	r3, [pc, #532]	; (80069a4 <UART_SetConfig+0x2ec>)
 800678e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006792:	f003 030c 	and.w	r3, r3, #12
 8006796:	2b0c      	cmp	r3, #12
 8006798:	d828      	bhi.n	80067ec <UART_SetConfig+0x134>
 800679a:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <UART_SetConfig+0xe8>)
 800679c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a0:	080067d5 	.word	0x080067d5
 80067a4:	080067ed 	.word	0x080067ed
 80067a8:	080067ed 	.word	0x080067ed
 80067ac:	080067ed 	.word	0x080067ed
 80067b0:	080067e1 	.word	0x080067e1
 80067b4:	080067ed 	.word	0x080067ed
 80067b8:	080067ed 	.word	0x080067ed
 80067bc:	080067ed 	.word	0x080067ed
 80067c0:	080067db 	.word	0x080067db
 80067c4:	080067ed 	.word	0x080067ed
 80067c8:	080067ed 	.word	0x080067ed
 80067cc:	080067ed 	.word	0x080067ed
 80067d0:	080067e7 	.word	0x080067e7
 80067d4:	2300      	movs	r3, #0
 80067d6:	76fb      	strb	r3, [r7, #27]
 80067d8:	e0af      	b.n	800693a <UART_SetConfig+0x282>
 80067da:	2302      	movs	r3, #2
 80067dc:	76fb      	strb	r3, [r7, #27]
 80067de:	e0ac      	b.n	800693a <UART_SetConfig+0x282>
 80067e0:	2304      	movs	r3, #4
 80067e2:	76fb      	strb	r3, [r7, #27]
 80067e4:	e0a9      	b.n	800693a <UART_SetConfig+0x282>
 80067e6:	2308      	movs	r3, #8
 80067e8:	76fb      	strb	r3, [r7, #27]
 80067ea:	e0a6      	b.n	800693a <UART_SetConfig+0x282>
 80067ec:	2310      	movs	r3, #16
 80067ee:	76fb      	strb	r3, [r7, #27]
 80067f0:	e0a3      	b.n	800693a <UART_SetConfig+0x282>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a6d      	ldr	r2, [pc, #436]	; (80069ac <UART_SetConfig+0x2f4>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d120      	bne.n	800683e <UART_SetConfig+0x186>
 80067fc:	4b69      	ldr	r3, [pc, #420]	; (80069a4 <UART_SetConfig+0x2ec>)
 80067fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006802:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006806:	2b30      	cmp	r3, #48	; 0x30
 8006808:	d013      	beq.n	8006832 <UART_SetConfig+0x17a>
 800680a:	2b30      	cmp	r3, #48	; 0x30
 800680c:	d814      	bhi.n	8006838 <UART_SetConfig+0x180>
 800680e:	2b20      	cmp	r3, #32
 8006810:	d009      	beq.n	8006826 <UART_SetConfig+0x16e>
 8006812:	2b20      	cmp	r3, #32
 8006814:	d810      	bhi.n	8006838 <UART_SetConfig+0x180>
 8006816:	2b00      	cmp	r3, #0
 8006818:	d002      	beq.n	8006820 <UART_SetConfig+0x168>
 800681a:	2b10      	cmp	r3, #16
 800681c:	d006      	beq.n	800682c <UART_SetConfig+0x174>
 800681e:	e00b      	b.n	8006838 <UART_SetConfig+0x180>
 8006820:	2300      	movs	r3, #0
 8006822:	76fb      	strb	r3, [r7, #27]
 8006824:	e089      	b.n	800693a <UART_SetConfig+0x282>
 8006826:	2302      	movs	r3, #2
 8006828:	76fb      	strb	r3, [r7, #27]
 800682a:	e086      	b.n	800693a <UART_SetConfig+0x282>
 800682c:	2304      	movs	r3, #4
 800682e:	76fb      	strb	r3, [r7, #27]
 8006830:	e083      	b.n	800693a <UART_SetConfig+0x282>
 8006832:	2308      	movs	r3, #8
 8006834:	76fb      	strb	r3, [r7, #27]
 8006836:	e080      	b.n	800693a <UART_SetConfig+0x282>
 8006838:	2310      	movs	r3, #16
 800683a:	76fb      	strb	r3, [r7, #27]
 800683c:	e07d      	b.n	800693a <UART_SetConfig+0x282>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a5b      	ldr	r2, [pc, #364]	; (80069b0 <UART_SetConfig+0x2f8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d120      	bne.n	800688a <UART_SetConfig+0x1d2>
 8006848:	4b56      	ldr	r3, [pc, #344]	; (80069a4 <UART_SetConfig+0x2ec>)
 800684a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800684e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006852:	2bc0      	cmp	r3, #192	; 0xc0
 8006854:	d013      	beq.n	800687e <UART_SetConfig+0x1c6>
 8006856:	2bc0      	cmp	r3, #192	; 0xc0
 8006858:	d814      	bhi.n	8006884 <UART_SetConfig+0x1cc>
 800685a:	2b80      	cmp	r3, #128	; 0x80
 800685c:	d009      	beq.n	8006872 <UART_SetConfig+0x1ba>
 800685e:	2b80      	cmp	r3, #128	; 0x80
 8006860:	d810      	bhi.n	8006884 <UART_SetConfig+0x1cc>
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <UART_SetConfig+0x1b4>
 8006866:	2b40      	cmp	r3, #64	; 0x40
 8006868:	d006      	beq.n	8006878 <UART_SetConfig+0x1c0>
 800686a:	e00b      	b.n	8006884 <UART_SetConfig+0x1cc>
 800686c:	2300      	movs	r3, #0
 800686e:	76fb      	strb	r3, [r7, #27]
 8006870:	e063      	b.n	800693a <UART_SetConfig+0x282>
 8006872:	2302      	movs	r3, #2
 8006874:	76fb      	strb	r3, [r7, #27]
 8006876:	e060      	b.n	800693a <UART_SetConfig+0x282>
 8006878:	2304      	movs	r3, #4
 800687a:	76fb      	strb	r3, [r7, #27]
 800687c:	e05d      	b.n	800693a <UART_SetConfig+0x282>
 800687e:	2308      	movs	r3, #8
 8006880:	76fb      	strb	r3, [r7, #27]
 8006882:	e05a      	b.n	800693a <UART_SetConfig+0x282>
 8006884:	2310      	movs	r3, #16
 8006886:	76fb      	strb	r3, [r7, #27]
 8006888:	e057      	b.n	800693a <UART_SetConfig+0x282>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a49      	ldr	r2, [pc, #292]	; (80069b4 <UART_SetConfig+0x2fc>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d125      	bne.n	80068e0 <UART_SetConfig+0x228>
 8006894:	4b43      	ldr	r3, [pc, #268]	; (80069a4 <UART_SetConfig+0x2ec>)
 8006896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800689e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068a2:	d017      	beq.n	80068d4 <UART_SetConfig+0x21c>
 80068a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068a8:	d817      	bhi.n	80068da <UART_SetConfig+0x222>
 80068aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ae:	d00b      	beq.n	80068c8 <UART_SetConfig+0x210>
 80068b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068b4:	d811      	bhi.n	80068da <UART_SetConfig+0x222>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <UART_SetConfig+0x20a>
 80068ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068be:	d006      	beq.n	80068ce <UART_SetConfig+0x216>
 80068c0:	e00b      	b.n	80068da <UART_SetConfig+0x222>
 80068c2:	2300      	movs	r3, #0
 80068c4:	76fb      	strb	r3, [r7, #27]
 80068c6:	e038      	b.n	800693a <UART_SetConfig+0x282>
 80068c8:	2302      	movs	r3, #2
 80068ca:	76fb      	strb	r3, [r7, #27]
 80068cc:	e035      	b.n	800693a <UART_SetConfig+0x282>
 80068ce:	2304      	movs	r3, #4
 80068d0:	76fb      	strb	r3, [r7, #27]
 80068d2:	e032      	b.n	800693a <UART_SetConfig+0x282>
 80068d4:	2308      	movs	r3, #8
 80068d6:	76fb      	strb	r3, [r7, #27]
 80068d8:	e02f      	b.n	800693a <UART_SetConfig+0x282>
 80068da:	2310      	movs	r3, #16
 80068dc:	76fb      	strb	r3, [r7, #27]
 80068de:	e02c      	b.n	800693a <UART_SetConfig+0x282>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a2d      	ldr	r2, [pc, #180]	; (800699c <UART_SetConfig+0x2e4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d125      	bne.n	8006936 <UART_SetConfig+0x27e>
 80068ea:	4b2e      	ldr	r3, [pc, #184]	; (80069a4 <UART_SetConfig+0x2ec>)
 80068ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068f8:	d017      	beq.n	800692a <UART_SetConfig+0x272>
 80068fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068fe:	d817      	bhi.n	8006930 <UART_SetConfig+0x278>
 8006900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006904:	d00b      	beq.n	800691e <UART_SetConfig+0x266>
 8006906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800690a:	d811      	bhi.n	8006930 <UART_SetConfig+0x278>
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <UART_SetConfig+0x260>
 8006910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006914:	d006      	beq.n	8006924 <UART_SetConfig+0x26c>
 8006916:	e00b      	b.n	8006930 <UART_SetConfig+0x278>
 8006918:	2300      	movs	r3, #0
 800691a:	76fb      	strb	r3, [r7, #27]
 800691c:	e00d      	b.n	800693a <UART_SetConfig+0x282>
 800691e:	2302      	movs	r3, #2
 8006920:	76fb      	strb	r3, [r7, #27]
 8006922:	e00a      	b.n	800693a <UART_SetConfig+0x282>
 8006924:	2304      	movs	r3, #4
 8006926:	76fb      	strb	r3, [r7, #27]
 8006928:	e007      	b.n	800693a <UART_SetConfig+0x282>
 800692a:	2308      	movs	r3, #8
 800692c:	76fb      	strb	r3, [r7, #27]
 800692e:	e004      	b.n	800693a <UART_SetConfig+0x282>
 8006930:	2310      	movs	r3, #16
 8006932:	76fb      	strb	r3, [r7, #27]
 8006934:	e001      	b.n	800693a <UART_SetConfig+0x282>
 8006936:	2310      	movs	r3, #16
 8006938:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a17      	ldr	r2, [pc, #92]	; (800699c <UART_SetConfig+0x2e4>)
 8006940:	4293      	cmp	r3, r2
 8006942:	f040 8087 	bne.w	8006a54 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006946:	7efb      	ldrb	r3, [r7, #27]
 8006948:	2b08      	cmp	r3, #8
 800694a:	d837      	bhi.n	80069bc <UART_SetConfig+0x304>
 800694c:	a201      	add	r2, pc, #4	; (adr r2, 8006954 <UART_SetConfig+0x29c>)
 800694e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006952:	bf00      	nop
 8006954:	08006979 	.word	0x08006979
 8006958:	080069bd 	.word	0x080069bd
 800695c:	08006981 	.word	0x08006981
 8006960:	080069bd 	.word	0x080069bd
 8006964:	08006987 	.word	0x08006987
 8006968:	080069bd 	.word	0x080069bd
 800696c:	080069bd 	.word	0x080069bd
 8006970:	080069bd 	.word	0x080069bd
 8006974:	0800698f 	.word	0x0800698f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006978:	f7fe fe78 	bl	800566c <HAL_RCC_GetPCLK1Freq>
 800697c:	6178      	str	r0, [r7, #20]
        break;
 800697e:	e022      	b.n	80069c6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006980:	4b0d      	ldr	r3, [pc, #52]	; (80069b8 <UART_SetConfig+0x300>)
 8006982:	617b      	str	r3, [r7, #20]
        break;
 8006984:	e01f      	b.n	80069c6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006986:	f7fe fdd9 	bl	800553c <HAL_RCC_GetSysClockFreq>
 800698a:	6178      	str	r0, [r7, #20]
        break;
 800698c:	e01b      	b.n	80069c6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800698e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006992:	617b      	str	r3, [r7, #20]
        break;
 8006994:	e017      	b.n	80069c6 <UART_SetConfig+0x30e>
 8006996:	bf00      	nop
 8006998:	efff69f3 	.word	0xefff69f3
 800699c:	40008000 	.word	0x40008000
 80069a0:	40013800 	.word	0x40013800
 80069a4:	40021000 	.word	0x40021000
 80069a8:	40004400 	.word	0x40004400
 80069ac:	40004800 	.word	0x40004800
 80069b0:	40004c00 	.word	0x40004c00
 80069b4:	40005000 	.word	0x40005000
 80069b8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	76bb      	strb	r3, [r7, #26]
        break;
 80069c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 80f1 	beq.w	8006bb0 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	4613      	mov	r3, r2
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	4413      	add	r3, r2
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d305      	bcc.n	80069ea <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d902      	bls.n	80069f0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	76bb      	strb	r3, [r7, #26]
 80069ee:	e0df      	b.n	8006bb0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f04f 0100 	mov.w	r1, #0
 80069f8:	f04f 0200 	mov.w	r2, #0
 80069fc:	f04f 0300 	mov.w	r3, #0
 8006a00:	020b      	lsls	r3, r1, #8
 8006a02:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a06:	0202      	lsls	r2, r0, #8
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	6849      	ldr	r1, [r1, #4]
 8006a0c:	0849      	lsrs	r1, r1, #1
 8006a0e:	4608      	mov	r0, r1
 8006a10:	f04f 0100 	mov.w	r1, #0
 8006a14:	1814      	adds	r4, r2, r0
 8006a16:	eb43 0501 	adc.w	r5, r3, r1
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	4620      	mov	r0, r4
 8006a26:	4629      	mov	r1, r5
 8006a28:	f7f9 fc2a 	bl	8000280 <__aeabi_uldivmod>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4613      	mov	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a3a:	d308      	bcc.n	8006a4e <UART_SetConfig+0x396>
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a42:	d204      	bcs.n	8006a4e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	60da      	str	r2, [r3, #12]
 8006a4c:	e0b0      	b.n	8006bb0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	76bb      	strb	r3, [r7, #26]
 8006a52:	e0ad      	b.n	8006bb0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a5c:	d15c      	bne.n	8006b18 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006a5e:	7efb      	ldrb	r3, [r7, #27]
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d828      	bhi.n	8006ab6 <UART_SetConfig+0x3fe>
 8006a64:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <UART_SetConfig+0x3b4>)
 8006a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6a:	bf00      	nop
 8006a6c:	08006a91 	.word	0x08006a91
 8006a70:	08006a99 	.word	0x08006a99
 8006a74:	08006aa1 	.word	0x08006aa1
 8006a78:	08006ab7 	.word	0x08006ab7
 8006a7c:	08006aa7 	.word	0x08006aa7
 8006a80:	08006ab7 	.word	0x08006ab7
 8006a84:	08006ab7 	.word	0x08006ab7
 8006a88:	08006ab7 	.word	0x08006ab7
 8006a8c:	08006aaf 	.word	0x08006aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a90:	f7fe fdec 	bl	800566c <HAL_RCC_GetPCLK1Freq>
 8006a94:	6178      	str	r0, [r7, #20]
        break;
 8006a96:	e013      	b.n	8006ac0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a98:	f7fe fdfe 	bl	8005698 <HAL_RCC_GetPCLK2Freq>
 8006a9c:	6178      	str	r0, [r7, #20]
        break;
 8006a9e:	e00f      	b.n	8006ac0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006aa0:	4b49      	ldr	r3, [pc, #292]	; (8006bc8 <UART_SetConfig+0x510>)
 8006aa2:	617b      	str	r3, [r7, #20]
        break;
 8006aa4:	e00c      	b.n	8006ac0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aa6:	f7fe fd49 	bl	800553c <HAL_RCC_GetSysClockFreq>
 8006aaa:	6178      	str	r0, [r7, #20]
        break;
 8006aac:	e008      	b.n	8006ac0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ab2:	617b      	str	r3, [r7, #20]
        break;
 8006ab4:	e004      	b.n	8006ac0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	76bb      	strb	r3, [r7, #26]
        break;
 8006abe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d074      	beq.n	8006bb0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	005a      	lsls	r2, r3, #1
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	085b      	lsrs	r3, r3, #1
 8006ad0:	441a      	add	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	2b0f      	cmp	r3, #15
 8006ae2:	d916      	bls.n	8006b12 <UART_SetConfig+0x45a>
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aea:	d212      	bcs.n	8006b12 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	f023 030f 	bic.w	r3, r3, #15
 8006af4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	085b      	lsrs	r3, r3, #1
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	f003 0307 	and.w	r3, r3, #7
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	89fb      	ldrh	r3, [r7, #14]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	89fa      	ldrh	r2, [r7, #14]
 8006b0e:	60da      	str	r2, [r3, #12]
 8006b10:	e04e      	b.n	8006bb0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	76bb      	strb	r3, [r7, #26]
 8006b16:	e04b      	b.n	8006bb0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b18:	7efb      	ldrb	r3, [r7, #27]
 8006b1a:	2b08      	cmp	r3, #8
 8006b1c:	d827      	bhi.n	8006b6e <UART_SetConfig+0x4b6>
 8006b1e:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <UART_SetConfig+0x46c>)
 8006b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b24:	08006b49 	.word	0x08006b49
 8006b28:	08006b51 	.word	0x08006b51
 8006b2c:	08006b59 	.word	0x08006b59
 8006b30:	08006b6f 	.word	0x08006b6f
 8006b34:	08006b5f 	.word	0x08006b5f
 8006b38:	08006b6f 	.word	0x08006b6f
 8006b3c:	08006b6f 	.word	0x08006b6f
 8006b40:	08006b6f 	.word	0x08006b6f
 8006b44:	08006b67 	.word	0x08006b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b48:	f7fe fd90 	bl	800566c <HAL_RCC_GetPCLK1Freq>
 8006b4c:	6178      	str	r0, [r7, #20]
        break;
 8006b4e:	e013      	b.n	8006b78 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b50:	f7fe fda2 	bl	8005698 <HAL_RCC_GetPCLK2Freq>
 8006b54:	6178      	str	r0, [r7, #20]
        break;
 8006b56:	e00f      	b.n	8006b78 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b58:	4b1b      	ldr	r3, [pc, #108]	; (8006bc8 <UART_SetConfig+0x510>)
 8006b5a:	617b      	str	r3, [r7, #20]
        break;
 8006b5c:	e00c      	b.n	8006b78 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b5e:	f7fe fced 	bl	800553c <HAL_RCC_GetSysClockFreq>
 8006b62:	6178      	str	r0, [r7, #20]
        break;
 8006b64:	e008      	b.n	8006b78 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b6a:	617b      	str	r3, [r7, #20]
        break;
 8006b6c:	e004      	b.n	8006b78 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	76bb      	strb	r3, [r7, #26]
        break;
 8006b76:	bf00      	nop
    }

    if (pclk != 0U)
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d018      	beq.n	8006bb0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	085a      	lsrs	r2, r3, #1
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	441a      	add	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2b0f      	cmp	r3, #15
 8006b98:	d908      	bls.n	8006bac <UART_SetConfig+0x4f4>
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ba0:	d204      	bcs.n	8006bac <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	60da      	str	r2, [r3, #12]
 8006baa:	e001      	b.n	8006bb0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006bbc:	7ebb      	ldrb	r3, [r7, #26]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3720      	adds	r7, #32
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	00f42400 	.word	0x00f42400

08006bcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00a      	beq.n	8006bf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00a      	beq.n	8006c18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00a      	beq.n	8006c3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	f003 0308 	and.w	r3, r3, #8
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c60:	f003 0310 	and.w	r3, r3, #16
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	f003 0320 	and.w	r3, r3, #32
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d01a      	beq.n	8006ce2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cca:	d10a      	bne.n	8006ce2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	605a      	str	r2, [r3, #4]
  }
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af02      	add	r7, sp, #8
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006d1e:	f7fd fb61 	bl	80043e4 <HAL_GetTick>
 8006d22:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	2b08      	cmp	r3, #8
 8006d30:	d10e      	bne.n	8006d50 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f82a 	bl	8006d9a <UART_WaitOnFlagUntilTimeout>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e020      	b.n	8006d92 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0304 	and.w	r3, r3, #4
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d10e      	bne.n	8006d7c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f814 	bl	8006d9a <UART_WaitOnFlagUntilTimeout>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e00a      	b.n	8006d92 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2220      	movs	r2, #32
 8006d86:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	60f8      	str	r0, [r7, #12]
 8006da2:	60b9      	str	r1, [r7, #8]
 8006da4:	603b      	str	r3, [r7, #0]
 8006da6:	4613      	mov	r3, r2
 8006da8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006daa:	e05d      	b.n	8006e68 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db2:	d059      	beq.n	8006e68 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006db4:	f7fd fb16 	bl	80043e4 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	69ba      	ldr	r2, [r7, #24]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d302      	bcc.n	8006dca <UART_WaitOnFlagUntilTimeout+0x30>
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d11b      	bne.n	8006e02 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006dd8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0201 	bic.w	r2, r2, #1
 8006de8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2220      	movs	r2, #32
 8006dee:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e042      	b.n	8006e88 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d02b      	beq.n	8006e68 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e1e:	d123      	bne.n	8006e68 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e38:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 0201 	bic.w	r2, r2, #1
 8006e48:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2220      	movs	r2, #32
 8006e54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e00f      	b.n	8006e88 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69da      	ldr	r2, [r3, #28]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	4013      	ands	r3, r2
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	bf0c      	ite	eq
 8006e78:	2301      	moveq	r3, #1
 8006e7a:	2300      	movne	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	461a      	mov	r2, r3
 8006e80:	79fb      	ldrb	r3, [r7, #7]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d092      	beq.n	8006dac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ea6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f022 0201 	bic.w	r2, r2, #1
 8006eb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006edc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f7ff fbd8 	bl	80066a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ef4:	bf00      	nop
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f12:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2220      	movs	r2, #32
 8006f18:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7ff fbb5 	bl	8006690 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f26:	bf00      	nop
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f3c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f42:	2b22      	cmp	r3, #34	; 0x22
 8006f44:	d13a      	bne.n	8006fbc <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f4c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f4e:	89bb      	ldrh	r3, [r7, #12]
 8006f50:	b2d9      	uxtb	r1, r3
 8006f52:	89fb      	ldrh	r3, [r7, #14]
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5a:	400a      	ands	r2, r1
 8006f5c:	b2d2      	uxtb	r2, r2
 8006f5e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d123      	bne.n	8006fd0 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f96:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0201 	bic.w	r2, r2, #1
 8006fa6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2220      	movs	r2, #32
 8006fac:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7fa f809 	bl	8000fcc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fba:	e009      	b.n	8006fd0 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	8b1b      	ldrh	r3, [r3, #24]
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f042 0208 	orr.w	r2, r2, #8
 8006fcc:	b292      	uxth	r2, r2
 8006fce:	831a      	strh	r2, [r3, #24]
}
 8006fd0:	bf00      	nop
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006fe6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fec:	2b22      	cmp	r3, #34	; 0x22
 8006fee:	d13a      	bne.n	8007066 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006ff6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006ffe:	89ba      	ldrh	r2, [r7, #12]
 8007000:	89fb      	ldrh	r3, [r7, #14]
 8007002:	4013      	ands	r3, r2
 8007004:	b29a      	uxth	r2, r3
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800700e:	1c9a      	adds	r2, r3, #2
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800701a:	b29b      	uxth	r3, r3
 800701c:	3b01      	subs	r3, #1
 800701e:	b29a      	uxth	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800702c:	b29b      	uxth	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d123      	bne.n	800707a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007040:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689a      	ldr	r2, [r3, #8]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0201 	bic.w	r2, r2, #1
 8007050:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2220      	movs	r2, #32
 8007056:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7f9 ffb4 	bl	8000fcc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007064:	e009      	b.n	800707a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	8b1b      	ldrh	r3, [r3, #24]
 800706c:	b29a      	uxth	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0208 	orr.w	r2, r2, #8
 8007076:	b292      	uxth	r2, r2
 8007078:	831a      	strh	r2, [r3, #24]
}
 800707a:	bf00      	nop
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007082:	b480      	push	{r7}
 8007084:	b083      	sub	sp, #12
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800708a:	bf00      	nop
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
	...

08007098 <__errno>:
 8007098:	4b01      	ldr	r3, [pc, #4]	; (80070a0 <__errno+0x8>)
 800709a:	6818      	ldr	r0, [r3, #0]
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	200000f8 	.word	0x200000f8

080070a4 <__libc_init_array>:
 80070a4:	b570      	push	{r4, r5, r6, lr}
 80070a6:	4d0d      	ldr	r5, [pc, #52]	; (80070dc <__libc_init_array+0x38>)
 80070a8:	4c0d      	ldr	r4, [pc, #52]	; (80070e0 <__libc_init_array+0x3c>)
 80070aa:	1b64      	subs	r4, r4, r5
 80070ac:	10a4      	asrs	r4, r4, #2
 80070ae:	2600      	movs	r6, #0
 80070b0:	42a6      	cmp	r6, r4
 80070b2:	d109      	bne.n	80070c8 <__libc_init_array+0x24>
 80070b4:	4d0b      	ldr	r5, [pc, #44]	; (80070e4 <__libc_init_array+0x40>)
 80070b6:	4c0c      	ldr	r4, [pc, #48]	; (80070e8 <__libc_init_array+0x44>)
 80070b8:	f000 fc64 	bl	8007984 <_init>
 80070bc:	1b64      	subs	r4, r4, r5
 80070be:	10a4      	asrs	r4, r4, #2
 80070c0:	2600      	movs	r6, #0
 80070c2:	42a6      	cmp	r6, r4
 80070c4:	d105      	bne.n	80070d2 <__libc_init_array+0x2e>
 80070c6:	bd70      	pop	{r4, r5, r6, pc}
 80070c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070cc:	4798      	blx	r3
 80070ce:	3601      	adds	r6, #1
 80070d0:	e7ee      	b.n	80070b0 <__libc_init_array+0xc>
 80070d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070d6:	4798      	blx	r3
 80070d8:	3601      	adds	r6, #1
 80070da:	e7f2      	b.n	80070c2 <__libc_init_array+0x1e>
 80070dc:	080083d0 	.word	0x080083d0
 80070e0:	080083d0 	.word	0x080083d0
 80070e4:	080083d0 	.word	0x080083d0
 80070e8:	080083d4 	.word	0x080083d4

080070ec <memset>:
 80070ec:	4402      	add	r2, r0
 80070ee:	4603      	mov	r3, r0
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d100      	bne.n	80070f6 <memset+0xa>
 80070f4:	4770      	bx	lr
 80070f6:	f803 1b01 	strb.w	r1, [r3], #1
 80070fa:	e7f9      	b.n	80070f0 <memset+0x4>

080070fc <siprintf>:
 80070fc:	b40e      	push	{r1, r2, r3}
 80070fe:	b500      	push	{lr}
 8007100:	b09c      	sub	sp, #112	; 0x70
 8007102:	ab1d      	add	r3, sp, #116	; 0x74
 8007104:	9002      	str	r0, [sp, #8]
 8007106:	9006      	str	r0, [sp, #24]
 8007108:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800710c:	4809      	ldr	r0, [pc, #36]	; (8007134 <siprintf+0x38>)
 800710e:	9107      	str	r1, [sp, #28]
 8007110:	9104      	str	r1, [sp, #16]
 8007112:	4909      	ldr	r1, [pc, #36]	; (8007138 <siprintf+0x3c>)
 8007114:	f853 2b04 	ldr.w	r2, [r3], #4
 8007118:	9105      	str	r1, [sp, #20]
 800711a:	6800      	ldr	r0, [r0, #0]
 800711c:	9301      	str	r3, [sp, #4]
 800711e:	a902      	add	r1, sp, #8
 8007120:	f000 f87e 	bl	8007220 <_svfiprintf_r>
 8007124:	9b02      	ldr	r3, [sp, #8]
 8007126:	2200      	movs	r2, #0
 8007128:	701a      	strb	r2, [r3, #0]
 800712a:	b01c      	add	sp, #112	; 0x70
 800712c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007130:	b003      	add	sp, #12
 8007132:	4770      	bx	lr
 8007134:	200000f8 	.word	0x200000f8
 8007138:	ffff0208 	.word	0xffff0208

0800713c <strcat>:
 800713c:	b510      	push	{r4, lr}
 800713e:	4602      	mov	r2, r0
 8007140:	7814      	ldrb	r4, [r2, #0]
 8007142:	4613      	mov	r3, r2
 8007144:	3201      	adds	r2, #1
 8007146:	2c00      	cmp	r4, #0
 8007148:	d1fa      	bne.n	8007140 <strcat+0x4>
 800714a:	3b01      	subs	r3, #1
 800714c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007150:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007154:	2a00      	cmp	r2, #0
 8007156:	d1f9      	bne.n	800714c <strcat+0x10>
 8007158:	bd10      	pop	{r4, pc}

0800715a <strcpy>:
 800715a:	4603      	mov	r3, r0
 800715c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007160:	f803 2b01 	strb.w	r2, [r3], #1
 8007164:	2a00      	cmp	r2, #0
 8007166:	d1f9      	bne.n	800715c <strcpy+0x2>
 8007168:	4770      	bx	lr

0800716a <__ssputs_r>:
 800716a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800716e:	688e      	ldr	r6, [r1, #8]
 8007170:	429e      	cmp	r6, r3
 8007172:	4682      	mov	sl, r0
 8007174:	460c      	mov	r4, r1
 8007176:	4690      	mov	r8, r2
 8007178:	461f      	mov	r7, r3
 800717a:	d838      	bhi.n	80071ee <__ssputs_r+0x84>
 800717c:	898a      	ldrh	r2, [r1, #12]
 800717e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007182:	d032      	beq.n	80071ea <__ssputs_r+0x80>
 8007184:	6825      	ldr	r5, [r4, #0]
 8007186:	6909      	ldr	r1, [r1, #16]
 8007188:	eba5 0901 	sub.w	r9, r5, r1
 800718c:	6965      	ldr	r5, [r4, #20]
 800718e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007192:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007196:	3301      	adds	r3, #1
 8007198:	444b      	add	r3, r9
 800719a:	106d      	asrs	r5, r5, #1
 800719c:	429d      	cmp	r5, r3
 800719e:	bf38      	it	cc
 80071a0:	461d      	movcc	r5, r3
 80071a2:	0553      	lsls	r3, r2, #21
 80071a4:	d531      	bpl.n	800720a <__ssputs_r+0xa0>
 80071a6:	4629      	mov	r1, r5
 80071a8:	f000 fb46 	bl	8007838 <_malloc_r>
 80071ac:	4606      	mov	r6, r0
 80071ae:	b950      	cbnz	r0, 80071c6 <__ssputs_r+0x5c>
 80071b0:	230c      	movs	r3, #12
 80071b2:	f8ca 3000 	str.w	r3, [sl]
 80071b6:	89a3      	ldrh	r3, [r4, #12]
 80071b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071bc:	81a3      	strh	r3, [r4, #12]
 80071be:	f04f 30ff 	mov.w	r0, #4294967295
 80071c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c6:	6921      	ldr	r1, [r4, #16]
 80071c8:	464a      	mov	r2, r9
 80071ca:	f000 fabd 	bl	8007748 <memcpy>
 80071ce:	89a3      	ldrh	r3, [r4, #12]
 80071d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d8:	81a3      	strh	r3, [r4, #12]
 80071da:	6126      	str	r6, [r4, #16]
 80071dc:	6165      	str	r5, [r4, #20]
 80071de:	444e      	add	r6, r9
 80071e0:	eba5 0509 	sub.w	r5, r5, r9
 80071e4:	6026      	str	r6, [r4, #0]
 80071e6:	60a5      	str	r5, [r4, #8]
 80071e8:	463e      	mov	r6, r7
 80071ea:	42be      	cmp	r6, r7
 80071ec:	d900      	bls.n	80071f0 <__ssputs_r+0x86>
 80071ee:	463e      	mov	r6, r7
 80071f0:	4632      	mov	r2, r6
 80071f2:	6820      	ldr	r0, [r4, #0]
 80071f4:	4641      	mov	r1, r8
 80071f6:	f000 fab5 	bl	8007764 <memmove>
 80071fa:	68a3      	ldr	r3, [r4, #8]
 80071fc:	6822      	ldr	r2, [r4, #0]
 80071fe:	1b9b      	subs	r3, r3, r6
 8007200:	4432      	add	r2, r6
 8007202:	60a3      	str	r3, [r4, #8]
 8007204:	6022      	str	r2, [r4, #0]
 8007206:	2000      	movs	r0, #0
 8007208:	e7db      	b.n	80071c2 <__ssputs_r+0x58>
 800720a:	462a      	mov	r2, r5
 800720c:	f000 fb6e 	bl	80078ec <_realloc_r>
 8007210:	4606      	mov	r6, r0
 8007212:	2800      	cmp	r0, #0
 8007214:	d1e1      	bne.n	80071da <__ssputs_r+0x70>
 8007216:	6921      	ldr	r1, [r4, #16]
 8007218:	4650      	mov	r0, sl
 800721a:	f000 fabd 	bl	8007798 <_free_r>
 800721e:	e7c7      	b.n	80071b0 <__ssputs_r+0x46>

08007220 <_svfiprintf_r>:
 8007220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007224:	4698      	mov	r8, r3
 8007226:	898b      	ldrh	r3, [r1, #12]
 8007228:	061b      	lsls	r3, r3, #24
 800722a:	b09d      	sub	sp, #116	; 0x74
 800722c:	4607      	mov	r7, r0
 800722e:	460d      	mov	r5, r1
 8007230:	4614      	mov	r4, r2
 8007232:	d50e      	bpl.n	8007252 <_svfiprintf_r+0x32>
 8007234:	690b      	ldr	r3, [r1, #16]
 8007236:	b963      	cbnz	r3, 8007252 <_svfiprintf_r+0x32>
 8007238:	2140      	movs	r1, #64	; 0x40
 800723a:	f000 fafd 	bl	8007838 <_malloc_r>
 800723e:	6028      	str	r0, [r5, #0]
 8007240:	6128      	str	r0, [r5, #16]
 8007242:	b920      	cbnz	r0, 800724e <_svfiprintf_r+0x2e>
 8007244:	230c      	movs	r3, #12
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	f04f 30ff 	mov.w	r0, #4294967295
 800724c:	e0d1      	b.n	80073f2 <_svfiprintf_r+0x1d2>
 800724e:	2340      	movs	r3, #64	; 0x40
 8007250:	616b      	str	r3, [r5, #20]
 8007252:	2300      	movs	r3, #0
 8007254:	9309      	str	r3, [sp, #36]	; 0x24
 8007256:	2320      	movs	r3, #32
 8007258:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800725c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007260:	2330      	movs	r3, #48	; 0x30
 8007262:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800740c <_svfiprintf_r+0x1ec>
 8007266:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800726a:	f04f 0901 	mov.w	r9, #1
 800726e:	4623      	mov	r3, r4
 8007270:	469a      	mov	sl, r3
 8007272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007276:	b10a      	cbz	r2, 800727c <_svfiprintf_r+0x5c>
 8007278:	2a25      	cmp	r2, #37	; 0x25
 800727a:	d1f9      	bne.n	8007270 <_svfiprintf_r+0x50>
 800727c:	ebba 0b04 	subs.w	fp, sl, r4
 8007280:	d00b      	beq.n	800729a <_svfiprintf_r+0x7a>
 8007282:	465b      	mov	r3, fp
 8007284:	4622      	mov	r2, r4
 8007286:	4629      	mov	r1, r5
 8007288:	4638      	mov	r0, r7
 800728a:	f7ff ff6e 	bl	800716a <__ssputs_r>
 800728e:	3001      	adds	r0, #1
 8007290:	f000 80aa 	beq.w	80073e8 <_svfiprintf_r+0x1c8>
 8007294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007296:	445a      	add	r2, fp
 8007298:	9209      	str	r2, [sp, #36]	; 0x24
 800729a:	f89a 3000 	ldrb.w	r3, [sl]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 80a2 	beq.w	80073e8 <_svfiprintf_r+0x1c8>
 80072a4:	2300      	movs	r3, #0
 80072a6:	f04f 32ff 	mov.w	r2, #4294967295
 80072aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072ae:	f10a 0a01 	add.w	sl, sl, #1
 80072b2:	9304      	str	r3, [sp, #16]
 80072b4:	9307      	str	r3, [sp, #28]
 80072b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072ba:	931a      	str	r3, [sp, #104]	; 0x68
 80072bc:	4654      	mov	r4, sl
 80072be:	2205      	movs	r2, #5
 80072c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072c4:	4851      	ldr	r0, [pc, #324]	; (800740c <_svfiprintf_r+0x1ec>)
 80072c6:	f7f8 ff8b 	bl	80001e0 <memchr>
 80072ca:	9a04      	ldr	r2, [sp, #16]
 80072cc:	b9d8      	cbnz	r0, 8007306 <_svfiprintf_r+0xe6>
 80072ce:	06d0      	lsls	r0, r2, #27
 80072d0:	bf44      	itt	mi
 80072d2:	2320      	movmi	r3, #32
 80072d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072d8:	0711      	lsls	r1, r2, #28
 80072da:	bf44      	itt	mi
 80072dc:	232b      	movmi	r3, #43	; 0x2b
 80072de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072e2:	f89a 3000 	ldrb.w	r3, [sl]
 80072e6:	2b2a      	cmp	r3, #42	; 0x2a
 80072e8:	d015      	beq.n	8007316 <_svfiprintf_r+0xf6>
 80072ea:	9a07      	ldr	r2, [sp, #28]
 80072ec:	4654      	mov	r4, sl
 80072ee:	2000      	movs	r0, #0
 80072f0:	f04f 0c0a 	mov.w	ip, #10
 80072f4:	4621      	mov	r1, r4
 80072f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072fa:	3b30      	subs	r3, #48	; 0x30
 80072fc:	2b09      	cmp	r3, #9
 80072fe:	d94e      	bls.n	800739e <_svfiprintf_r+0x17e>
 8007300:	b1b0      	cbz	r0, 8007330 <_svfiprintf_r+0x110>
 8007302:	9207      	str	r2, [sp, #28]
 8007304:	e014      	b.n	8007330 <_svfiprintf_r+0x110>
 8007306:	eba0 0308 	sub.w	r3, r0, r8
 800730a:	fa09 f303 	lsl.w	r3, r9, r3
 800730e:	4313      	orrs	r3, r2
 8007310:	9304      	str	r3, [sp, #16]
 8007312:	46a2      	mov	sl, r4
 8007314:	e7d2      	b.n	80072bc <_svfiprintf_r+0x9c>
 8007316:	9b03      	ldr	r3, [sp, #12]
 8007318:	1d19      	adds	r1, r3, #4
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	9103      	str	r1, [sp, #12]
 800731e:	2b00      	cmp	r3, #0
 8007320:	bfbb      	ittet	lt
 8007322:	425b      	neglt	r3, r3
 8007324:	f042 0202 	orrlt.w	r2, r2, #2
 8007328:	9307      	strge	r3, [sp, #28]
 800732a:	9307      	strlt	r3, [sp, #28]
 800732c:	bfb8      	it	lt
 800732e:	9204      	strlt	r2, [sp, #16]
 8007330:	7823      	ldrb	r3, [r4, #0]
 8007332:	2b2e      	cmp	r3, #46	; 0x2e
 8007334:	d10c      	bne.n	8007350 <_svfiprintf_r+0x130>
 8007336:	7863      	ldrb	r3, [r4, #1]
 8007338:	2b2a      	cmp	r3, #42	; 0x2a
 800733a:	d135      	bne.n	80073a8 <_svfiprintf_r+0x188>
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	1d1a      	adds	r2, r3, #4
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	9203      	str	r2, [sp, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	bfb8      	it	lt
 8007348:	f04f 33ff 	movlt.w	r3, #4294967295
 800734c:	3402      	adds	r4, #2
 800734e:	9305      	str	r3, [sp, #20]
 8007350:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800741c <_svfiprintf_r+0x1fc>
 8007354:	7821      	ldrb	r1, [r4, #0]
 8007356:	2203      	movs	r2, #3
 8007358:	4650      	mov	r0, sl
 800735a:	f7f8 ff41 	bl	80001e0 <memchr>
 800735e:	b140      	cbz	r0, 8007372 <_svfiprintf_r+0x152>
 8007360:	2340      	movs	r3, #64	; 0x40
 8007362:	eba0 000a 	sub.w	r0, r0, sl
 8007366:	fa03 f000 	lsl.w	r0, r3, r0
 800736a:	9b04      	ldr	r3, [sp, #16]
 800736c:	4303      	orrs	r3, r0
 800736e:	3401      	adds	r4, #1
 8007370:	9304      	str	r3, [sp, #16]
 8007372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007376:	4826      	ldr	r0, [pc, #152]	; (8007410 <_svfiprintf_r+0x1f0>)
 8007378:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800737c:	2206      	movs	r2, #6
 800737e:	f7f8 ff2f 	bl	80001e0 <memchr>
 8007382:	2800      	cmp	r0, #0
 8007384:	d038      	beq.n	80073f8 <_svfiprintf_r+0x1d8>
 8007386:	4b23      	ldr	r3, [pc, #140]	; (8007414 <_svfiprintf_r+0x1f4>)
 8007388:	bb1b      	cbnz	r3, 80073d2 <_svfiprintf_r+0x1b2>
 800738a:	9b03      	ldr	r3, [sp, #12]
 800738c:	3307      	adds	r3, #7
 800738e:	f023 0307 	bic.w	r3, r3, #7
 8007392:	3308      	adds	r3, #8
 8007394:	9303      	str	r3, [sp, #12]
 8007396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007398:	4433      	add	r3, r6
 800739a:	9309      	str	r3, [sp, #36]	; 0x24
 800739c:	e767      	b.n	800726e <_svfiprintf_r+0x4e>
 800739e:	fb0c 3202 	mla	r2, ip, r2, r3
 80073a2:	460c      	mov	r4, r1
 80073a4:	2001      	movs	r0, #1
 80073a6:	e7a5      	b.n	80072f4 <_svfiprintf_r+0xd4>
 80073a8:	2300      	movs	r3, #0
 80073aa:	3401      	adds	r4, #1
 80073ac:	9305      	str	r3, [sp, #20]
 80073ae:	4619      	mov	r1, r3
 80073b0:	f04f 0c0a 	mov.w	ip, #10
 80073b4:	4620      	mov	r0, r4
 80073b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073ba:	3a30      	subs	r2, #48	; 0x30
 80073bc:	2a09      	cmp	r2, #9
 80073be:	d903      	bls.n	80073c8 <_svfiprintf_r+0x1a8>
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d0c5      	beq.n	8007350 <_svfiprintf_r+0x130>
 80073c4:	9105      	str	r1, [sp, #20]
 80073c6:	e7c3      	b.n	8007350 <_svfiprintf_r+0x130>
 80073c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80073cc:	4604      	mov	r4, r0
 80073ce:	2301      	movs	r3, #1
 80073d0:	e7f0      	b.n	80073b4 <_svfiprintf_r+0x194>
 80073d2:	ab03      	add	r3, sp, #12
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	462a      	mov	r2, r5
 80073d8:	4b0f      	ldr	r3, [pc, #60]	; (8007418 <_svfiprintf_r+0x1f8>)
 80073da:	a904      	add	r1, sp, #16
 80073dc:	4638      	mov	r0, r7
 80073de:	f3af 8000 	nop.w
 80073e2:	1c42      	adds	r2, r0, #1
 80073e4:	4606      	mov	r6, r0
 80073e6:	d1d6      	bne.n	8007396 <_svfiprintf_r+0x176>
 80073e8:	89ab      	ldrh	r3, [r5, #12]
 80073ea:	065b      	lsls	r3, r3, #25
 80073ec:	f53f af2c 	bmi.w	8007248 <_svfiprintf_r+0x28>
 80073f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073f2:	b01d      	add	sp, #116	; 0x74
 80073f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f8:	ab03      	add	r3, sp, #12
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	462a      	mov	r2, r5
 80073fe:	4b06      	ldr	r3, [pc, #24]	; (8007418 <_svfiprintf_r+0x1f8>)
 8007400:	a904      	add	r1, sp, #16
 8007402:	4638      	mov	r0, r7
 8007404:	f000 f87a 	bl	80074fc <_printf_i>
 8007408:	e7eb      	b.n	80073e2 <_svfiprintf_r+0x1c2>
 800740a:	bf00      	nop
 800740c:	08008394 	.word	0x08008394
 8007410:	0800839e 	.word	0x0800839e
 8007414:	00000000 	.word	0x00000000
 8007418:	0800716b 	.word	0x0800716b
 800741c:	0800839a 	.word	0x0800839a

08007420 <_printf_common>:
 8007420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007424:	4616      	mov	r6, r2
 8007426:	4699      	mov	r9, r3
 8007428:	688a      	ldr	r2, [r1, #8]
 800742a:	690b      	ldr	r3, [r1, #16]
 800742c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007430:	4293      	cmp	r3, r2
 8007432:	bfb8      	it	lt
 8007434:	4613      	movlt	r3, r2
 8007436:	6033      	str	r3, [r6, #0]
 8007438:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800743c:	4607      	mov	r7, r0
 800743e:	460c      	mov	r4, r1
 8007440:	b10a      	cbz	r2, 8007446 <_printf_common+0x26>
 8007442:	3301      	adds	r3, #1
 8007444:	6033      	str	r3, [r6, #0]
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	0699      	lsls	r1, r3, #26
 800744a:	bf42      	ittt	mi
 800744c:	6833      	ldrmi	r3, [r6, #0]
 800744e:	3302      	addmi	r3, #2
 8007450:	6033      	strmi	r3, [r6, #0]
 8007452:	6825      	ldr	r5, [r4, #0]
 8007454:	f015 0506 	ands.w	r5, r5, #6
 8007458:	d106      	bne.n	8007468 <_printf_common+0x48>
 800745a:	f104 0a19 	add.w	sl, r4, #25
 800745e:	68e3      	ldr	r3, [r4, #12]
 8007460:	6832      	ldr	r2, [r6, #0]
 8007462:	1a9b      	subs	r3, r3, r2
 8007464:	42ab      	cmp	r3, r5
 8007466:	dc26      	bgt.n	80074b6 <_printf_common+0x96>
 8007468:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800746c:	1e13      	subs	r3, r2, #0
 800746e:	6822      	ldr	r2, [r4, #0]
 8007470:	bf18      	it	ne
 8007472:	2301      	movne	r3, #1
 8007474:	0692      	lsls	r2, r2, #26
 8007476:	d42b      	bmi.n	80074d0 <_printf_common+0xb0>
 8007478:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800747c:	4649      	mov	r1, r9
 800747e:	4638      	mov	r0, r7
 8007480:	47c0      	blx	r8
 8007482:	3001      	adds	r0, #1
 8007484:	d01e      	beq.n	80074c4 <_printf_common+0xa4>
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	68e5      	ldr	r5, [r4, #12]
 800748a:	6832      	ldr	r2, [r6, #0]
 800748c:	f003 0306 	and.w	r3, r3, #6
 8007490:	2b04      	cmp	r3, #4
 8007492:	bf08      	it	eq
 8007494:	1aad      	subeq	r5, r5, r2
 8007496:	68a3      	ldr	r3, [r4, #8]
 8007498:	6922      	ldr	r2, [r4, #16]
 800749a:	bf0c      	ite	eq
 800749c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074a0:	2500      	movne	r5, #0
 80074a2:	4293      	cmp	r3, r2
 80074a4:	bfc4      	itt	gt
 80074a6:	1a9b      	subgt	r3, r3, r2
 80074a8:	18ed      	addgt	r5, r5, r3
 80074aa:	2600      	movs	r6, #0
 80074ac:	341a      	adds	r4, #26
 80074ae:	42b5      	cmp	r5, r6
 80074b0:	d11a      	bne.n	80074e8 <_printf_common+0xc8>
 80074b2:	2000      	movs	r0, #0
 80074b4:	e008      	b.n	80074c8 <_printf_common+0xa8>
 80074b6:	2301      	movs	r3, #1
 80074b8:	4652      	mov	r2, sl
 80074ba:	4649      	mov	r1, r9
 80074bc:	4638      	mov	r0, r7
 80074be:	47c0      	blx	r8
 80074c0:	3001      	adds	r0, #1
 80074c2:	d103      	bne.n	80074cc <_printf_common+0xac>
 80074c4:	f04f 30ff 	mov.w	r0, #4294967295
 80074c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074cc:	3501      	adds	r5, #1
 80074ce:	e7c6      	b.n	800745e <_printf_common+0x3e>
 80074d0:	18e1      	adds	r1, r4, r3
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	2030      	movs	r0, #48	; 0x30
 80074d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074da:	4422      	add	r2, r4
 80074dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074e4:	3302      	adds	r3, #2
 80074e6:	e7c7      	b.n	8007478 <_printf_common+0x58>
 80074e8:	2301      	movs	r3, #1
 80074ea:	4622      	mov	r2, r4
 80074ec:	4649      	mov	r1, r9
 80074ee:	4638      	mov	r0, r7
 80074f0:	47c0      	blx	r8
 80074f2:	3001      	adds	r0, #1
 80074f4:	d0e6      	beq.n	80074c4 <_printf_common+0xa4>
 80074f6:	3601      	adds	r6, #1
 80074f8:	e7d9      	b.n	80074ae <_printf_common+0x8e>
	...

080074fc <_printf_i>:
 80074fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007500:	460c      	mov	r4, r1
 8007502:	4691      	mov	r9, r2
 8007504:	7e27      	ldrb	r7, [r4, #24]
 8007506:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007508:	2f78      	cmp	r7, #120	; 0x78
 800750a:	4680      	mov	r8, r0
 800750c:	469a      	mov	sl, r3
 800750e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007512:	d807      	bhi.n	8007524 <_printf_i+0x28>
 8007514:	2f62      	cmp	r7, #98	; 0x62
 8007516:	d80a      	bhi.n	800752e <_printf_i+0x32>
 8007518:	2f00      	cmp	r7, #0
 800751a:	f000 80d8 	beq.w	80076ce <_printf_i+0x1d2>
 800751e:	2f58      	cmp	r7, #88	; 0x58
 8007520:	f000 80a3 	beq.w	800766a <_printf_i+0x16e>
 8007524:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007528:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800752c:	e03a      	b.n	80075a4 <_printf_i+0xa8>
 800752e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007532:	2b15      	cmp	r3, #21
 8007534:	d8f6      	bhi.n	8007524 <_printf_i+0x28>
 8007536:	a001      	add	r0, pc, #4	; (adr r0, 800753c <_printf_i+0x40>)
 8007538:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800753c:	08007595 	.word	0x08007595
 8007540:	080075a9 	.word	0x080075a9
 8007544:	08007525 	.word	0x08007525
 8007548:	08007525 	.word	0x08007525
 800754c:	08007525 	.word	0x08007525
 8007550:	08007525 	.word	0x08007525
 8007554:	080075a9 	.word	0x080075a9
 8007558:	08007525 	.word	0x08007525
 800755c:	08007525 	.word	0x08007525
 8007560:	08007525 	.word	0x08007525
 8007564:	08007525 	.word	0x08007525
 8007568:	080076b5 	.word	0x080076b5
 800756c:	080075d9 	.word	0x080075d9
 8007570:	08007697 	.word	0x08007697
 8007574:	08007525 	.word	0x08007525
 8007578:	08007525 	.word	0x08007525
 800757c:	080076d7 	.word	0x080076d7
 8007580:	08007525 	.word	0x08007525
 8007584:	080075d9 	.word	0x080075d9
 8007588:	08007525 	.word	0x08007525
 800758c:	08007525 	.word	0x08007525
 8007590:	0800769f 	.word	0x0800769f
 8007594:	680b      	ldr	r3, [r1, #0]
 8007596:	1d1a      	adds	r2, r3, #4
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	600a      	str	r2, [r1, #0]
 800759c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80075a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075a4:	2301      	movs	r3, #1
 80075a6:	e0a3      	b.n	80076f0 <_printf_i+0x1f4>
 80075a8:	6825      	ldr	r5, [r4, #0]
 80075aa:	6808      	ldr	r0, [r1, #0]
 80075ac:	062e      	lsls	r6, r5, #24
 80075ae:	f100 0304 	add.w	r3, r0, #4
 80075b2:	d50a      	bpl.n	80075ca <_printf_i+0xce>
 80075b4:	6805      	ldr	r5, [r0, #0]
 80075b6:	600b      	str	r3, [r1, #0]
 80075b8:	2d00      	cmp	r5, #0
 80075ba:	da03      	bge.n	80075c4 <_printf_i+0xc8>
 80075bc:	232d      	movs	r3, #45	; 0x2d
 80075be:	426d      	negs	r5, r5
 80075c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075c4:	485e      	ldr	r0, [pc, #376]	; (8007740 <_printf_i+0x244>)
 80075c6:	230a      	movs	r3, #10
 80075c8:	e019      	b.n	80075fe <_printf_i+0x102>
 80075ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80075ce:	6805      	ldr	r5, [r0, #0]
 80075d0:	600b      	str	r3, [r1, #0]
 80075d2:	bf18      	it	ne
 80075d4:	b22d      	sxthne	r5, r5
 80075d6:	e7ef      	b.n	80075b8 <_printf_i+0xbc>
 80075d8:	680b      	ldr	r3, [r1, #0]
 80075da:	6825      	ldr	r5, [r4, #0]
 80075dc:	1d18      	adds	r0, r3, #4
 80075de:	6008      	str	r0, [r1, #0]
 80075e0:	0628      	lsls	r0, r5, #24
 80075e2:	d501      	bpl.n	80075e8 <_printf_i+0xec>
 80075e4:	681d      	ldr	r5, [r3, #0]
 80075e6:	e002      	b.n	80075ee <_printf_i+0xf2>
 80075e8:	0669      	lsls	r1, r5, #25
 80075ea:	d5fb      	bpl.n	80075e4 <_printf_i+0xe8>
 80075ec:	881d      	ldrh	r5, [r3, #0]
 80075ee:	4854      	ldr	r0, [pc, #336]	; (8007740 <_printf_i+0x244>)
 80075f0:	2f6f      	cmp	r7, #111	; 0x6f
 80075f2:	bf0c      	ite	eq
 80075f4:	2308      	moveq	r3, #8
 80075f6:	230a      	movne	r3, #10
 80075f8:	2100      	movs	r1, #0
 80075fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075fe:	6866      	ldr	r6, [r4, #4]
 8007600:	60a6      	str	r6, [r4, #8]
 8007602:	2e00      	cmp	r6, #0
 8007604:	bfa2      	ittt	ge
 8007606:	6821      	ldrge	r1, [r4, #0]
 8007608:	f021 0104 	bicge.w	r1, r1, #4
 800760c:	6021      	strge	r1, [r4, #0]
 800760e:	b90d      	cbnz	r5, 8007614 <_printf_i+0x118>
 8007610:	2e00      	cmp	r6, #0
 8007612:	d04d      	beq.n	80076b0 <_printf_i+0x1b4>
 8007614:	4616      	mov	r6, r2
 8007616:	fbb5 f1f3 	udiv	r1, r5, r3
 800761a:	fb03 5711 	mls	r7, r3, r1, r5
 800761e:	5dc7      	ldrb	r7, [r0, r7]
 8007620:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007624:	462f      	mov	r7, r5
 8007626:	42bb      	cmp	r3, r7
 8007628:	460d      	mov	r5, r1
 800762a:	d9f4      	bls.n	8007616 <_printf_i+0x11a>
 800762c:	2b08      	cmp	r3, #8
 800762e:	d10b      	bne.n	8007648 <_printf_i+0x14c>
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	07df      	lsls	r7, r3, #31
 8007634:	d508      	bpl.n	8007648 <_printf_i+0x14c>
 8007636:	6923      	ldr	r3, [r4, #16]
 8007638:	6861      	ldr	r1, [r4, #4]
 800763a:	4299      	cmp	r1, r3
 800763c:	bfde      	ittt	le
 800763e:	2330      	movle	r3, #48	; 0x30
 8007640:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007644:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007648:	1b92      	subs	r2, r2, r6
 800764a:	6122      	str	r2, [r4, #16]
 800764c:	f8cd a000 	str.w	sl, [sp]
 8007650:	464b      	mov	r3, r9
 8007652:	aa03      	add	r2, sp, #12
 8007654:	4621      	mov	r1, r4
 8007656:	4640      	mov	r0, r8
 8007658:	f7ff fee2 	bl	8007420 <_printf_common>
 800765c:	3001      	adds	r0, #1
 800765e:	d14c      	bne.n	80076fa <_printf_i+0x1fe>
 8007660:	f04f 30ff 	mov.w	r0, #4294967295
 8007664:	b004      	add	sp, #16
 8007666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800766a:	4835      	ldr	r0, [pc, #212]	; (8007740 <_printf_i+0x244>)
 800766c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	680e      	ldr	r6, [r1, #0]
 8007674:	061f      	lsls	r7, r3, #24
 8007676:	f856 5b04 	ldr.w	r5, [r6], #4
 800767a:	600e      	str	r6, [r1, #0]
 800767c:	d514      	bpl.n	80076a8 <_printf_i+0x1ac>
 800767e:	07d9      	lsls	r1, r3, #31
 8007680:	bf44      	itt	mi
 8007682:	f043 0320 	orrmi.w	r3, r3, #32
 8007686:	6023      	strmi	r3, [r4, #0]
 8007688:	b91d      	cbnz	r5, 8007692 <_printf_i+0x196>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	f023 0320 	bic.w	r3, r3, #32
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	2310      	movs	r3, #16
 8007694:	e7b0      	b.n	80075f8 <_printf_i+0xfc>
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	f043 0320 	orr.w	r3, r3, #32
 800769c:	6023      	str	r3, [r4, #0]
 800769e:	2378      	movs	r3, #120	; 0x78
 80076a0:	4828      	ldr	r0, [pc, #160]	; (8007744 <_printf_i+0x248>)
 80076a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076a6:	e7e3      	b.n	8007670 <_printf_i+0x174>
 80076a8:	065e      	lsls	r6, r3, #25
 80076aa:	bf48      	it	mi
 80076ac:	b2ad      	uxthmi	r5, r5
 80076ae:	e7e6      	b.n	800767e <_printf_i+0x182>
 80076b0:	4616      	mov	r6, r2
 80076b2:	e7bb      	b.n	800762c <_printf_i+0x130>
 80076b4:	680b      	ldr	r3, [r1, #0]
 80076b6:	6826      	ldr	r6, [r4, #0]
 80076b8:	6960      	ldr	r0, [r4, #20]
 80076ba:	1d1d      	adds	r5, r3, #4
 80076bc:	600d      	str	r5, [r1, #0]
 80076be:	0635      	lsls	r5, r6, #24
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	d501      	bpl.n	80076c8 <_printf_i+0x1cc>
 80076c4:	6018      	str	r0, [r3, #0]
 80076c6:	e002      	b.n	80076ce <_printf_i+0x1d2>
 80076c8:	0671      	lsls	r1, r6, #25
 80076ca:	d5fb      	bpl.n	80076c4 <_printf_i+0x1c8>
 80076cc:	8018      	strh	r0, [r3, #0]
 80076ce:	2300      	movs	r3, #0
 80076d0:	6123      	str	r3, [r4, #16]
 80076d2:	4616      	mov	r6, r2
 80076d4:	e7ba      	b.n	800764c <_printf_i+0x150>
 80076d6:	680b      	ldr	r3, [r1, #0]
 80076d8:	1d1a      	adds	r2, r3, #4
 80076da:	600a      	str	r2, [r1, #0]
 80076dc:	681e      	ldr	r6, [r3, #0]
 80076de:	6862      	ldr	r2, [r4, #4]
 80076e0:	2100      	movs	r1, #0
 80076e2:	4630      	mov	r0, r6
 80076e4:	f7f8 fd7c 	bl	80001e0 <memchr>
 80076e8:	b108      	cbz	r0, 80076ee <_printf_i+0x1f2>
 80076ea:	1b80      	subs	r0, r0, r6
 80076ec:	6060      	str	r0, [r4, #4]
 80076ee:	6863      	ldr	r3, [r4, #4]
 80076f0:	6123      	str	r3, [r4, #16]
 80076f2:	2300      	movs	r3, #0
 80076f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076f8:	e7a8      	b.n	800764c <_printf_i+0x150>
 80076fa:	6923      	ldr	r3, [r4, #16]
 80076fc:	4632      	mov	r2, r6
 80076fe:	4649      	mov	r1, r9
 8007700:	4640      	mov	r0, r8
 8007702:	47d0      	blx	sl
 8007704:	3001      	adds	r0, #1
 8007706:	d0ab      	beq.n	8007660 <_printf_i+0x164>
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	079b      	lsls	r3, r3, #30
 800770c:	d413      	bmi.n	8007736 <_printf_i+0x23a>
 800770e:	68e0      	ldr	r0, [r4, #12]
 8007710:	9b03      	ldr	r3, [sp, #12]
 8007712:	4298      	cmp	r0, r3
 8007714:	bfb8      	it	lt
 8007716:	4618      	movlt	r0, r3
 8007718:	e7a4      	b.n	8007664 <_printf_i+0x168>
 800771a:	2301      	movs	r3, #1
 800771c:	4632      	mov	r2, r6
 800771e:	4649      	mov	r1, r9
 8007720:	4640      	mov	r0, r8
 8007722:	47d0      	blx	sl
 8007724:	3001      	adds	r0, #1
 8007726:	d09b      	beq.n	8007660 <_printf_i+0x164>
 8007728:	3501      	adds	r5, #1
 800772a:	68e3      	ldr	r3, [r4, #12]
 800772c:	9903      	ldr	r1, [sp, #12]
 800772e:	1a5b      	subs	r3, r3, r1
 8007730:	42ab      	cmp	r3, r5
 8007732:	dcf2      	bgt.n	800771a <_printf_i+0x21e>
 8007734:	e7eb      	b.n	800770e <_printf_i+0x212>
 8007736:	2500      	movs	r5, #0
 8007738:	f104 0619 	add.w	r6, r4, #25
 800773c:	e7f5      	b.n	800772a <_printf_i+0x22e>
 800773e:	bf00      	nop
 8007740:	080083a5 	.word	0x080083a5
 8007744:	080083b6 	.word	0x080083b6

08007748 <memcpy>:
 8007748:	440a      	add	r2, r1
 800774a:	4291      	cmp	r1, r2
 800774c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007750:	d100      	bne.n	8007754 <memcpy+0xc>
 8007752:	4770      	bx	lr
 8007754:	b510      	push	{r4, lr}
 8007756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800775a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800775e:	4291      	cmp	r1, r2
 8007760:	d1f9      	bne.n	8007756 <memcpy+0xe>
 8007762:	bd10      	pop	{r4, pc}

08007764 <memmove>:
 8007764:	4288      	cmp	r0, r1
 8007766:	b510      	push	{r4, lr}
 8007768:	eb01 0402 	add.w	r4, r1, r2
 800776c:	d902      	bls.n	8007774 <memmove+0x10>
 800776e:	4284      	cmp	r4, r0
 8007770:	4623      	mov	r3, r4
 8007772:	d807      	bhi.n	8007784 <memmove+0x20>
 8007774:	1e43      	subs	r3, r0, #1
 8007776:	42a1      	cmp	r1, r4
 8007778:	d008      	beq.n	800778c <memmove+0x28>
 800777a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800777e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007782:	e7f8      	b.n	8007776 <memmove+0x12>
 8007784:	4402      	add	r2, r0
 8007786:	4601      	mov	r1, r0
 8007788:	428a      	cmp	r2, r1
 800778a:	d100      	bne.n	800778e <memmove+0x2a>
 800778c:	bd10      	pop	{r4, pc}
 800778e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007796:	e7f7      	b.n	8007788 <memmove+0x24>

08007798 <_free_r>:
 8007798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800779a:	2900      	cmp	r1, #0
 800779c:	d048      	beq.n	8007830 <_free_r+0x98>
 800779e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077a2:	9001      	str	r0, [sp, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f1a1 0404 	sub.w	r4, r1, #4
 80077aa:	bfb8      	it	lt
 80077ac:	18e4      	addlt	r4, r4, r3
 80077ae:	f000 f8d3 	bl	8007958 <__malloc_lock>
 80077b2:	4a20      	ldr	r2, [pc, #128]	; (8007834 <_free_r+0x9c>)
 80077b4:	9801      	ldr	r0, [sp, #4]
 80077b6:	6813      	ldr	r3, [r2, #0]
 80077b8:	4615      	mov	r5, r2
 80077ba:	b933      	cbnz	r3, 80077ca <_free_r+0x32>
 80077bc:	6063      	str	r3, [r4, #4]
 80077be:	6014      	str	r4, [r2, #0]
 80077c0:	b003      	add	sp, #12
 80077c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077c6:	f000 b8cd 	b.w	8007964 <__malloc_unlock>
 80077ca:	42a3      	cmp	r3, r4
 80077cc:	d90b      	bls.n	80077e6 <_free_r+0x4e>
 80077ce:	6821      	ldr	r1, [r4, #0]
 80077d0:	1862      	adds	r2, r4, r1
 80077d2:	4293      	cmp	r3, r2
 80077d4:	bf04      	itt	eq
 80077d6:	681a      	ldreq	r2, [r3, #0]
 80077d8:	685b      	ldreq	r3, [r3, #4]
 80077da:	6063      	str	r3, [r4, #4]
 80077dc:	bf04      	itt	eq
 80077de:	1852      	addeq	r2, r2, r1
 80077e0:	6022      	streq	r2, [r4, #0]
 80077e2:	602c      	str	r4, [r5, #0]
 80077e4:	e7ec      	b.n	80077c0 <_free_r+0x28>
 80077e6:	461a      	mov	r2, r3
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	b10b      	cbz	r3, 80077f0 <_free_r+0x58>
 80077ec:	42a3      	cmp	r3, r4
 80077ee:	d9fa      	bls.n	80077e6 <_free_r+0x4e>
 80077f0:	6811      	ldr	r1, [r2, #0]
 80077f2:	1855      	adds	r5, r2, r1
 80077f4:	42a5      	cmp	r5, r4
 80077f6:	d10b      	bne.n	8007810 <_free_r+0x78>
 80077f8:	6824      	ldr	r4, [r4, #0]
 80077fa:	4421      	add	r1, r4
 80077fc:	1854      	adds	r4, r2, r1
 80077fe:	42a3      	cmp	r3, r4
 8007800:	6011      	str	r1, [r2, #0]
 8007802:	d1dd      	bne.n	80077c0 <_free_r+0x28>
 8007804:	681c      	ldr	r4, [r3, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	6053      	str	r3, [r2, #4]
 800780a:	4421      	add	r1, r4
 800780c:	6011      	str	r1, [r2, #0]
 800780e:	e7d7      	b.n	80077c0 <_free_r+0x28>
 8007810:	d902      	bls.n	8007818 <_free_r+0x80>
 8007812:	230c      	movs	r3, #12
 8007814:	6003      	str	r3, [r0, #0]
 8007816:	e7d3      	b.n	80077c0 <_free_r+0x28>
 8007818:	6825      	ldr	r5, [r4, #0]
 800781a:	1961      	adds	r1, r4, r5
 800781c:	428b      	cmp	r3, r1
 800781e:	bf04      	itt	eq
 8007820:	6819      	ldreq	r1, [r3, #0]
 8007822:	685b      	ldreq	r3, [r3, #4]
 8007824:	6063      	str	r3, [r4, #4]
 8007826:	bf04      	itt	eq
 8007828:	1949      	addeq	r1, r1, r5
 800782a:	6021      	streq	r1, [r4, #0]
 800782c:	6054      	str	r4, [r2, #4]
 800782e:	e7c7      	b.n	80077c0 <_free_r+0x28>
 8007830:	b003      	add	sp, #12
 8007832:	bd30      	pop	{r4, r5, pc}
 8007834:	2000017c 	.word	0x2000017c

08007838 <_malloc_r>:
 8007838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783a:	1ccd      	adds	r5, r1, #3
 800783c:	f025 0503 	bic.w	r5, r5, #3
 8007840:	3508      	adds	r5, #8
 8007842:	2d0c      	cmp	r5, #12
 8007844:	bf38      	it	cc
 8007846:	250c      	movcc	r5, #12
 8007848:	2d00      	cmp	r5, #0
 800784a:	4606      	mov	r6, r0
 800784c:	db01      	blt.n	8007852 <_malloc_r+0x1a>
 800784e:	42a9      	cmp	r1, r5
 8007850:	d903      	bls.n	800785a <_malloc_r+0x22>
 8007852:	230c      	movs	r3, #12
 8007854:	6033      	str	r3, [r6, #0]
 8007856:	2000      	movs	r0, #0
 8007858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800785a:	f000 f87d 	bl	8007958 <__malloc_lock>
 800785e:	4921      	ldr	r1, [pc, #132]	; (80078e4 <_malloc_r+0xac>)
 8007860:	680a      	ldr	r2, [r1, #0]
 8007862:	4614      	mov	r4, r2
 8007864:	b99c      	cbnz	r4, 800788e <_malloc_r+0x56>
 8007866:	4f20      	ldr	r7, [pc, #128]	; (80078e8 <_malloc_r+0xb0>)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	b923      	cbnz	r3, 8007876 <_malloc_r+0x3e>
 800786c:	4621      	mov	r1, r4
 800786e:	4630      	mov	r0, r6
 8007870:	f000 f862 	bl	8007938 <_sbrk_r>
 8007874:	6038      	str	r0, [r7, #0]
 8007876:	4629      	mov	r1, r5
 8007878:	4630      	mov	r0, r6
 800787a:	f000 f85d 	bl	8007938 <_sbrk_r>
 800787e:	1c43      	adds	r3, r0, #1
 8007880:	d123      	bne.n	80078ca <_malloc_r+0x92>
 8007882:	230c      	movs	r3, #12
 8007884:	6033      	str	r3, [r6, #0]
 8007886:	4630      	mov	r0, r6
 8007888:	f000 f86c 	bl	8007964 <__malloc_unlock>
 800788c:	e7e3      	b.n	8007856 <_malloc_r+0x1e>
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	1b5b      	subs	r3, r3, r5
 8007892:	d417      	bmi.n	80078c4 <_malloc_r+0x8c>
 8007894:	2b0b      	cmp	r3, #11
 8007896:	d903      	bls.n	80078a0 <_malloc_r+0x68>
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	441c      	add	r4, r3
 800789c:	6025      	str	r5, [r4, #0]
 800789e:	e004      	b.n	80078aa <_malloc_r+0x72>
 80078a0:	6863      	ldr	r3, [r4, #4]
 80078a2:	42a2      	cmp	r2, r4
 80078a4:	bf0c      	ite	eq
 80078a6:	600b      	streq	r3, [r1, #0]
 80078a8:	6053      	strne	r3, [r2, #4]
 80078aa:	4630      	mov	r0, r6
 80078ac:	f000 f85a 	bl	8007964 <__malloc_unlock>
 80078b0:	f104 000b 	add.w	r0, r4, #11
 80078b4:	1d23      	adds	r3, r4, #4
 80078b6:	f020 0007 	bic.w	r0, r0, #7
 80078ba:	1ac2      	subs	r2, r0, r3
 80078bc:	d0cc      	beq.n	8007858 <_malloc_r+0x20>
 80078be:	1a1b      	subs	r3, r3, r0
 80078c0:	50a3      	str	r3, [r4, r2]
 80078c2:	e7c9      	b.n	8007858 <_malloc_r+0x20>
 80078c4:	4622      	mov	r2, r4
 80078c6:	6864      	ldr	r4, [r4, #4]
 80078c8:	e7cc      	b.n	8007864 <_malloc_r+0x2c>
 80078ca:	1cc4      	adds	r4, r0, #3
 80078cc:	f024 0403 	bic.w	r4, r4, #3
 80078d0:	42a0      	cmp	r0, r4
 80078d2:	d0e3      	beq.n	800789c <_malloc_r+0x64>
 80078d4:	1a21      	subs	r1, r4, r0
 80078d6:	4630      	mov	r0, r6
 80078d8:	f000 f82e 	bl	8007938 <_sbrk_r>
 80078dc:	3001      	adds	r0, #1
 80078de:	d1dd      	bne.n	800789c <_malloc_r+0x64>
 80078e0:	e7cf      	b.n	8007882 <_malloc_r+0x4a>
 80078e2:	bf00      	nop
 80078e4:	2000017c 	.word	0x2000017c
 80078e8:	20000180 	.word	0x20000180

080078ec <_realloc_r>:
 80078ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ee:	4607      	mov	r7, r0
 80078f0:	4614      	mov	r4, r2
 80078f2:	460e      	mov	r6, r1
 80078f4:	b921      	cbnz	r1, 8007900 <_realloc_r+0x14>
 80078f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80078fa:	4611      	mov	r1, r2
 80078fc:	f7ff bf9c 	b.w	8007838 <_malloc_r>
 8007900:	b922      	cbnz	r2, 800790c <_realloc_r+0x20>
 8007902:	f7ff ff49 	bl	8007798 <_free_r>
 8007906:	4625      	mov	r5, r4
 8007908:	4628      	mov	r0, r5
 800790a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800790c:	f000 f830 	bl	8007970 <_malloc_usable_size_r>
 8007910:	42a0      	cmp	r0, r4
 8007912:	d20f      	bcs.n	8007934 <_realloc_r+0x48>
 8007914:	4621      	mov	r1, r4
 8007916:	4638      	mov	r0, r7
 8007918:	f7ff ff8e 	bl	8007838 <_malloc_r>
 800791c:	4605      	mov	r5, r0
 800791e:	2800      	cmp	r0, #0
 8007920:	d0f2      	beq.n	8007908 <_realloc_r+0x1c>
 8007922:	4631      	mov	r1, r6
 8007924:	4622      	mov	r2, r4
 8007926:	f7ff ff0f 	bl	8007748 <memcpy>
 800792a:	4631      	mov	r1, r6
 800792c:	4638      	mov	r0, r7
 800792e:	f7ff ff33 	bl	8007798 <_free_r>
 8007932:	e7e9      	b.n	8007908 <_realloc_r+0x1c>
 8007934:	4635      	mov	r5, r6
 8007936:	e7e7      	b.n	8007908 <_realloc_r+0x1c>

08007938 <_sbrk_r>:
 8007938:	b538      	push	{r3, r4, r5, lr}
 800793a:	4d06      	ldr	r5, [pc, #24]	; (8007954 <_sbrk_r+0x1c>)
 800793c:	2300      	movs	r3, #0
 800793e:	4604      	mov	r4, r0
 8007940:	4608      	mov	r0, r1
 8007942:	602b      	str	r3, [r5, #0]
 8007944:	f7fb f8d0 	bl	8002ae8 <_sbrk>
 8007948:	1c43      	adds	r3, r0, #1
 800794a:	d102      	bne.n	8007952 <_sbrk_r+0x1a>
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	b103      	cbz	r3, 8007952 <_sbrk_r+0x1a>
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	bd38      	pop	{r3, r4, r5, pc}
 8007954:	20001528 	.word	0x20001528

08007958 <__malloc_lock>:
 8007958:	4801      	ldr	r0, [pc, #4]	; (8007960 <__malloc_lock+0x8>)
 800795a:	f000 b811 	b.w	8007980 <__retarget_lock_acquire_recursive>
 800795e:	bf00      	nop
 8007960:	20001530 	.word	0x20001530

08007964 <__malloc_unlock>:
 8007964:	4801      	ldr	r0, [pc, #4]	; (800796c <__malloc_unlock+0x8>)
 8007966:	f000 b80c 	b.w	8007982 <__retarget_lock_release_recursive>
 800796a:	bf00      	nop
 800796c:	20001530 	.word	0x20001530

08007970 <_malloc_usable_size_r>:
 8007970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007974:	1f18      	subs	r0, r3, #4
 8007976:	2b00      	cmp	r3, #0
 8007978:	bfbc      	itt	lt
 800797a:	580b      	ldrlt	r3, [r1, r0]
 800797c:	18c0      	addlt	r0, r0, r3
 800797e:	4770      	bx	lr

08007980 <__retarget_lock_acquire_recursive>:
 8007980:	4770      	bx	lr

08007982 <__retarget_lock_release_recursive>:
 8007982:	4770      	bx	lr

08007984 <_init>:
 8007984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007986:	bf00      	nop
 8007988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798a:	bc08      	pop	{r3}
 800798c:	469e      	mov	lr, r3
 800798e:	4770      	bx	lr

08007990 <_fini>:
 8007990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007992:	bf00      	nop
 8007994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007996:	bc08      	pop	{r3}
 8007998:	469e      	mov	lr, r3
 800799a:	4770      	bx	lr

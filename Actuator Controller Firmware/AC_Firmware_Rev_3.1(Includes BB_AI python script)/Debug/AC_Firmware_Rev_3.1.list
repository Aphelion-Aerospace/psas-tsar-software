
AC_Firmware_Rev_3.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006840  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000087c  080069d0  080069d0  000169d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800724c  0800724c  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800724c  0800724c  0001724c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007254  08007254  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007254  08007254  00017254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800725c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003290  20000160  080073bc  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200033f0  080073bc  000233f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002655c  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f8f  00000000  00000000  000466ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b60  00000000  00000000  0004a680  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000968  00000000  00000000  0004b1e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b16c  00000000  00000000  0004bb48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012ea2  00000000  00000000  00076cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9f55  00000000  00000000  00089b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00173aab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b70  00000000  00000000  00173b28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080069b8 	.word	0x080069b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	080069b8 	.word	0x080069b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <AutomaticShutdown>:


//Automatic shutdown : Purge and go back to SAFETY

uint32_t AutomaticShutdown(struct StateVars *ctrl)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
	ctrl->valveConfiguration = StateConfiguration();
 800058c:	f002 fb34 	bl	8002bf8 <StateConfiguration>
 8000590:	4602      	mov	r2, r0
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	62da      	str	r2, [r3, #44]	; 0x2c

	/*FUEL PURGE N2  - LOX PURGE N2*/
	ctrl->valveTarget  = ((uint16_t)SOV3 	\
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f44f 7282 	mov.w	r2, #260	; 0x104
 800059c:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV9);


	uint32_t TIMEOUT = 3000; // 3 second time out
 800059e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005a2:	613b      	str	r3, [r7, #16]
	
    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fae8 	bl	8002b80 <VerifyState>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d054      	beq.n	8000660 <AutomaticShutdown+0xe0>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fadf 	bl	8002b80 <VerifyState>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d04b      	beq.n	8000660 <AutomaticShutdown+0xe0>
    {
    	if((ctrl->currentState & AUTOMATIC_SHUTDOWN) == AUTOMATIC_SHUTDOWN){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80005ce:	f003 030c 	and.w	r3, r3, #12
 80005d2:	2b0c      	cmp	r3, #12
 80005d4:	d137      	bne.n	8000646 <AutomaticShutdown+0xc6>


    		StateStatus(ctrl);
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f002 fa88 	bl	8002aec <StateStatus>

    		uint32_t now = HAL_GetTick();
 80005dc:	f003 fc02 	bl	8003de4 <HAL_GetTick>
 80005e0:	60f8      	str	r0, [r7, #12]
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d003      	beq.n	80005fa <AutomaticShutdown+0x7a>
    	    {
    			success = StateInitialize(ctrl);
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f002 fc52 	bl	8002e9c <StateInitialize>
 80005f8:	6178      	str	r0, [r7, #20]
    	    }


    		success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	429a      	cmp	r2, r3
 8000604:	bf0c      	ite	eq
 8000606:	2301      	moveq	r3, #1
 8000608:	2300      	movne	r3, #0
 800060a:	b2db      	uxtb	r3, r3
 800060c:	617b      	str	r3, [r7, #20]

    		 if(now - ctrl->timeStarted > TIMEOUT && success)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	429a      	cmp	r2, r3
 800061a:	d206      	bcs.n	800062a <AutomaticShutdown+0xaa>
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d003      	beq.n	800062a <AutomaticShutdown+0xaa>
    		   {
    		       ctrl->currentState= SAFETY;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2205      	movs	r2, #5
 8000626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		   }

    		 // Increment state counter
			ctrl->stateCounter++;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	1c5a      	adds	r2, r3, #1
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800063c:	d11f      	bne.n	800067e <AutomaticShutdown+0xfe>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & AUTOMATIC_SHUTDOWN) == AUTOMATIC_SHUTDOWN){
 8000644:	e01b      	b.n	800067e <AutomaticShutdown+0xfe>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, AUTOMATIC_SHUTDOWN, ctrl->currentState);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800064c:	461a      	mov	r2, r3
 800064e:	210c      	movs	r1, #12
 8000650:	480f      	ldr	r0, [pc, #60]	; (8000690 <AutomaticShutdown+0x110>)
 8000652:	f001 fbc3 	bl	8001ddc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2, Tx_Buffer);
 8000656:	490e      	ldr	r1, [pc, #56]	; (8000690 <AutomaticShutdown+0x110>)
 8000658:	480e      	ldr	r0, [pc, #56]	; (8000694 <AutomaticShutdown+0x114>)
 800065a:	f000 fc2b 	bl	8000eb4 <UART_SendMessage>
    	if((ctrl->currentState & AUTOMATIC_SHUTDOWN) == AUTOMATIC_SHUTDOWN){
 800065e:	e00e      	b.n	800067e <AutomaticShutdown+0xfe>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800066c:	461a      	mov	r2, r3
 800066e:	4808      	ldr	r0, [pc, #32]	; (8000690 <AutomaticShutdown+0x110>)
 8000670:	f001 fc2e 	bl	8001ed0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8000674:	4906      	ldr	r1, [pc, #24]	; (8000690 <AutomaticShutdown+0x110>)
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <AutomaticShutdown+0x114>)
 8000678:	f000 fc1c 	bl	8000eb4 <UART_SendMessage>
 800067c:	e000      	b.n	8000680 <AutomaticShutdown+0x100>
    	if((ctrl->currentState & AUTOMATIC_SHUTDOWN) == AUTOMATIC_SHUTDOWN){
 800067e:	bf00      	nop
    }
    circular_buffer_readFlag = TRUE;
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <AutomaticShutdown+0x118>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
	return success;
 8000686:	697b      	ldr	r3, [r7, #20]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200001bc 	.word	0x200001bc
 8000694:	20003320 	.word	0x20003320
 8000698:	20000188 	.word	0x20000188

0800069c <Firing>:
#include "messages.h"
#include "utilities.h"
#include "ring_buffer.h"

uint32_t Firing(struct StateVars *ctrl)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
	ctrl->valveConfiguration = StateConfiguration();
 80006a8:	f002 faa6 	bl	8002bf8 <StateConfiguration>
 80006ac:	4602      	mov	r2, r0
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV1 	\
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2233      	movs	r2, #51	; 0x33
 80006b6:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV2 	\
			 |(uint16_t)SOV5 	\
			 |(uint16_t)SOV6);

	uint32_t TIMEOUT = 3000;// 3 second time out
 80006b8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80006bc:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 fa5b 	bl	8002b80 <VerifyState>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d05a      	beq.n	8000786 <Firing+0xea>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fa52 	bl	8002b80 <VerifyState>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d051      	beq.n	8000786 <Firing+0xea>
    {
    	if((ctrl->currentState & FIRING) == FIRING){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80006e8:	f003 0309 	and.w	r3, r3, #9
 80006ec:	2b09      	cmp	r3, #9
 80006ee:	d13d      	bne.n	800076c <Firing+0xd0>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  1  |   1  |   0  |   0  |   1  |   1  |   0  |   0  |  0  |  0

    		StateStatus(ctrl);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f002 f9fb 	bl	8002aec <StateStatus>
    		//nominal = NominalValueCheck(ctrl, Rx_Buffer);
    		ringBufferRead();
 80006f6:	f001 fe69 	bl	80023cc <ringBufferRead>

    		uint32_t now = HAL_GetTick();
 80006fa:	f003 fb73 	bl	8003de4 <HAL_GetTick>
 80006fe:	60f8      	str	r0, [r7, #12]
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800070c:	429a      	cmp	r2, r3
 800070e:	d003      	beq.n	8000718 <Firing+0x7c>
    	    {
    			success = StateInitialize(ctrl);
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f002 fbc3 	bl	8002e9c <StateInitialize>
 8000716:	6178      	str	r0, [r7, #20]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000720:	429a      	cmp	r2, r3
 8000722:	bf0c      	ite	eq
 8000724:	2301      	moveq	r3, #1
 8000726:	2300      	movne	r3, #0
 8000728:	b2db      	uxtb	r3, r3
 800072a:	617b      	str	r3, [r7, #20]


    		if(now - ctrl->timeStarted > TIMEOUT && success && nominal)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	693a      	ldr	r2, [r7, #16]
 8000736:	429a      	cmp	r2, r3
 8000738:	d20a      	bcs.n	8000750 <Firing+0xb4>
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d007      	beq.n	8000750 <Firing+0xb4>
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <Firing+0x114>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d003      	beq.n	8000750 <Firing+0xb4>
    		{
        		ctrl->currentState= PURGE;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	220a      	movs	r2, #10
 800074c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}



    		// Increment state counter
    		ctrl->stateCounter++;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	1c5a      	adds	r2, r3, #1
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	609a      	str	r2, [r3, #8]
    		if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	689b      	ldr	r3, [r3, #8]
 800075e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000762:	d11f      	bne.n	80007a4 <Firing+0x108>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & FIRING) == FIRING){
 800076a:	e01b      	b.n	80007a4 <Firing+0x108>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, FIRING, ctrl->currentState);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000772:	461a      	mov	r2, r3
 8000774:	2109      	movs	r1, #9
 8000776:	480f      	ldr	r0, [pc, #60]	; (80007b4 <Firing+0x118>)
 8000778:	f001 fb30 	bl	8001ddc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 800077c:	490d      	ldr	r1, [pc, #52]	; (80007b4 <Firing+0x118>)
 800077e:	480e      	ldr	r0, [pc, #56]	; (80007b8 <Firing+0x11c>)
 8000780:	f000 fb98 	bl	8000eb4 <UART_SendMessage>
    	if((ctrl->currentState & FIRING) == FIRING){
 8000784:	e00e      	b.n	80007a4 <Firing+0x108>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000792:	461a      	mov	r2, r3
 8000794:	4807      	ldr	r0, [pc, #28]	; (80007b4 <Firing+0x118>)
 8000796:	f001 fb9b 	bl	8001ed0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 800079a:	4906      	ldr	r1, [pc, #24]	; (80007b4 <Firing+0x118>)
 800079c:	4806      	ldr	r0, [pc, #24]	; (80007b8 <Firing+0x11c>)
 800079e:	f000 fb89 	bl	8000eb4 <UART_SendMessage>
 80007a2:	e000      	b.n	80007a6 <Firing+0x10a>
    	if((ctrl->currentState & FIRING) == FIRING){
 80007a4:	bf00      	nop
    }
	return success;
 80007a6:	697b      	ldr	r3, [r7, #20]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000019c 	.word	0x2000019c
 80007b4:	200001bc 	.word	0x200001bc
 80007b8:	20003320 	.word	0x20003320

080007bc <Ignition>:
#include "messages.h"
#include "utilities.h"
#include "ring_buffer.h"

uint32_t Ignition(struct StateVars *ctrl)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
	ctrl->valveConfiguration = StateConfiguration();
 80007c8:	f002 fa16 	bl	8002bf8 <StateConfiguration>
 80007cc:	4602      	mov	r2, r0
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV1 	\
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f240 2203 	movw	r2, #515	; 0x203
 80007d8:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV2 |(uint16_t)IG1);

	uint32_t TIMEOUT = 5000;//5 second time out
 80007da:	f241 3388 	movw	r3, #5000	; 0x1388
 80007de:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80007e6:	4618      	mov	r0, r3
 80007e8:	f002 f9ca 	bl	8002b80 <VerifyState>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d05a      	beq.n	80008a8 <Ignition+0xec>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 f9c1 	bl	8002b80 <VerifyState>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d051      	beq.n	80008a8 <Ignition+0xec>
    {
    	if((ctrl->currentState & IGNITION) == IGNITION){
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	2b07      	cmp	r3, #7
 8000810:	d13d      	bne.n	800088e <Ignition+0xd2>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  1  |   1  |   0  |   0  |   0  |   0  |   0  |   0  |  0  |  1

    		StateStatus(ctrl);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f002 f96a 	bl	8002aec <StateStatus>
    		//nominal = NominalValueCheck(ctrl, Rx_Buffer);
    		ringBufferRead();
 8000818:	f001 fdd8 	bl	80023cc <ringBufferRead>

    		uint32_t now = HAL_GetTick();//should return the number of milliseconds elapsed since startup
 800081c:	f003 fae2 	bl	8003de4 <HAL_GetTick>
 8000820:	60f8      	str	r0, [r7, #12]
    	    // If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800082e:	429a      	cmp	r2, r3
 8000830:	d003      	beq.n	800083a <Ignition+0x7e>
    	    {
    			success = StateInitialize(ctrl);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f002 fb32 	bl	8002e9c <StateInitialize>
 8000838:	6178      	str	r0, [r7, #20]
    	    }


			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	429a      	cmp	r2, r3
 8000844:	bf0c      	ite	eq
 8000846:	2301      	moveq	r3, #1
 8000848:	2300      	movne	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	617b      	str	r3, [r7, #20]

    		if((now - ctrl->timeStarted >= TIMEOUT) && success && nominal)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	429a      	cmp	r2, r3
 800085a:	d80a      	bhi.n	8000872 <Ignition+0xb6>
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d007      	beq.n	8000872 <Ignition+0xb6>
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <Ignition+0x118>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d003      	beq.n	8000872 <Ignition+0xb6>
    		{
        		ctrl->currentState= OXIDIZER_START;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2208      	movs	r2, #8
 800086e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}

    		// Increment state counter
			ctrl->stateCounter++;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000884:	d11f      	bne.n	80008c6 <Ignition+0x10a>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & IGNITION) == IGNITION){
 800088c:	e01b      	b.n	80008c6 <Ignition+0x10a>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, IGNITION, ctrl->currentState);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000894:	461a      	mov	r2, r3
 8000896:	2107      	movs	r1, #7
 8000898:	480f      	ldr	r0, [pc, #60]	; (80008d8 <Ignition+0x11c>)
 800089a:	f001 fa9f 	bl	8001ddc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 800089e:	490e      	ldr	r1, [pc, #56]	; (80008d8 <Ignition+0x11c>)
 80008a0:	480e      	ldr	r0, [pc, #56]	; (80008dc <Ignition+0x120>)
 80008a2:	f000 fb07 	bl	8000eb4 <UART_SendMessage>
    	if((ctrl->currentState & IGNITION) == IGNITION){
 80008a6:	e00e      	b.n	80008c6 <Ignition+0x10a>
    	}

    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80008b4:	461a      	mov	r2, r3
 80008b6:	4808      	ldr	r0, [pc, #32]	; (80008d8 <Ignition+0x11c>)
 80008b8:	f001 fb0a 	bl	8001ed0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 80008bc:	4906      	ldr	r1, [pc, #24]	; (80008d8 <Ignition+0x11c>)
 80008be:	4807      	ldr	r0, [pc, #28]	; (80008dc <Ignition+0x120>)
 80008c0:	f000 faf8 	bl	8000eb4 <UART_SendMessage>
 80008c4:	e000      	b.n	80008c8 <Ignition+0x10c>
    	if((ctrl->currentState & IGNITION) == IGNITION){
 80008c6:	bf00      	nop
    }
	return success;
 80008c8:	697b      	ldr	r3, [r7, #20]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2000019c 	.word	0x2000019c
 80008d8:	200001bc 	.word	0x200001bc
 80008dc:	20003320 	.word	0x20003320

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b096      	sub	sp, #88	; 0x58
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2244      	movs	r2, #68	; 0x44
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f005 fc3c 	bl	800616c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000902:	2302      	movs	r3, #2
 8000904:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800090a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800090c:	2310      	movs	r3, #16
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000910:	2302      	movs	r3, #2
 8000912:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000914:	2302      	movs	r3, #2
 8000916:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000918:	2301      	movs	r3, #1
 800091a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800091c:	230a      	movs	r3, #10
 800091e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000920:	2307      	movs	r3, #7
 8000922:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000924:	2302      	movs	r3, #2
 8000926:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000928:	2302      	movs	r3, #2
 800092a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4618      	mov	r0, r3
 8000932:	f003 fe37 	bl	80045a4 <HAL_RCC_OscConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800093c:	f000 f8fc 	bl	8000b38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000940:	230f      	movs	r3, #15
 8000942:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000944:	2303      	movs	r3, #3
 8000946:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000954:	463b      	mov	r3, r7
 8000956:	2104      	movs	r1, #4
 8000958:	4618      	mov	r0, r3
 800095a:	f004 fa09 	bl	8004d70 <HAL_RCC_ClockConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000964:	f000 f8e8 	bl	8000b38 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000968:	f44f 7000 	mov.w	r0, #512	; 0x200
 800096c:	f003 fdc4 	bl	80044f8 <HAL_PWREx_ControlVoltageScaling>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000976:	f000 f8df 	bl	8000b38 <Error_Handler>
  }
}
 800097a:	bf00      	nop
 800097c:	3758      	adds	r7, #88	; 0x58
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <MX_USART2_UART_Init>:
    * @brief USART1 Initialization Function
    * @param None
    * @retval None
    */
void MX_USART2_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USART2_UART_Init+0x58>)
 800098a:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <MX_USART2_UART_Init+0x5c>)
 800098c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_USART2_UART_Init+0x58>)
 8000990:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_USART2_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_USART2_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009c8:	f004 fbd6 	bl	8005178 <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009d2:	f000 f8b1 	bl	8000b38 <Error_Handler>
  }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

  }
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20003320 	.word	0x20003320
 80009e0:	40004400 	.word	0x40004400

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	4b4b      	ldr	r3, [pc, #300]	; (8000b28 <MX_GPIO_Init+0x144>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4a4a      	ldr	r2, [pc, #296]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4b48      	ldr	r3, [pc, #288]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a12:	4b45      	ldr	r3, [pc, #276]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a44      	ldr	r2, [pc, #272]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b42      	ldr	r3, [pc, #264]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b3f      	ldr	r3, [pc, #252]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4a3e      	ldr	r2, [pc, #248]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b3c      	ldr	r3, [pc, #240]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	4b39      	ldr	r3, [pc, #228]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a38      	ldr	r2, [pc, #224]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b36      	ldr	r3, [pc, #216]	; (8000b28 <MX_GPIO_Init+0x144>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LOX_MAIN_Pin|FUEL_MAIN_Pin|IGNITION1_Pin
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 51f9 	mov.w	r1, #7968	; 0x1f20
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a64:	f003 fcfe 	bl	8004464 <HAL_GPIO_WritePin>
                          |FUEL_PRESSURE_Pin|LOX_PRESSURE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin|LOX_PURGE_Pin|LOX_FILL_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 4124 	mov.w	r1, #41984	; 0xa400
 8000a6e:	482f      	ldr	r0, [pc, #188]	; (8000b2c <MX_GPIO_Init+0x148>)
 8000a70:	f003 fcf8 	bl	8004464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin|FUEL_PURGE_N2_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	21c0      	movs	r1, #192	; 0xc0
 8000a78:	482d      	ldr	r0, [pc, #180]	; (8000b30 <MX_GPIO_Init+0x14c>)
 8000a7a:	f003 fcf3 	bl	8004464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a84:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <MX_GPIO_Init+0x150>)
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	4827      	ldr	r0, [pc, #156]	; (8000b30 <MX_GPIO_Init+0x14c>)
 8000a94:	f003 fb26 	bl	80040e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a98:	2320      	movs	r3, #32
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab2:	f003 fb17 	bl	80040e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOX_VENT_Pin LOX_PURGE_Pin LOX_FILL_Pin */
  GPIO_InitStruct.Pin = LOX_VENT_Pin|LOX_PURGE_Pin|LOX_FILL_Pin;
 8000ab6:	f44f 4324 	mov.w	r3, #41984	; 0xa400
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	4817      	ldr	r0, [pc, #92]	; (8000b2c <MX_GPIO_Init+0x148>)
 8000ad0:	f003 fb08 	bl	80040e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FUEL_VENT_Pin FUEL_PURGE_N2_Pin */
  GPIO_InitStruct.Pin = FUEL_VENT_Pin|FUEL_PURGE_N2_Pin;
 8000ad4:	23c0      	movs	r3, #192	; 0xc0
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4811      	ldr	r0, [pc, #68]	; (8000b30 <MX_GPIO_Init+0x14c>)
 8000aec:	f003 fafa 	bl	80040e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOX_MAIN_Pin FUEL_MAIN_Pin IGNITION1_Pin FUEL_PRESSURE_Pin
                           LOX_PRESSURE_Pin */
  GPIO_InitStruct.Pin = LOX_MAIN_Pin|FUEL_MAIN_Pin|IGNITION1_Pin|FUEL_PRESSURE_Pin
 8000af0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000af4:	617b      	str	r3, [r7, #20]
                          |LOX_PRESSURE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0c:	f003 faea 	bl	80040e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	2028      	movs	r0, #40	; 0x28
 8000b16:	f003 fa6e 	bl	8003ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b1a:	2028      	movs	r0, #40	; 0x28
 8000b1c:	f003 fa87 	bl	800402e <HAL_NVIC_EnableIRQ>

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	48000400 	.word	0x48000400
 8000b30:	48000800 	.word	0x48000800
 8000b34:	10210000 	.word	0x10210000

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <Error_Handler+0x6>

08000b40 <LoxChill>:
#include <lox_chill.h>
#include "messages.h"
#include "ring_buffer.h"

uint32_t LoxChill(struct StateVars *ctrl)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 8000b4c:	f002 f854 	bl	8002bf8 <StateConfiguration>
 8000b50:	4602      	mov	r2, r0
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV4 	\
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	22a8      	movs	r2, #168	; 0xa8
 8000b5a:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV6 	\
			 |(uint16_t)SOV8);

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 f80c 	bl	8002b80 <VerifyState>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d048      	beq.n	8000c00 <LoxChill+0xc0>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 f803 	bl	8002b80 <VerifyState>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d03f      	beq.n	8000c00 <LoxChill+0xc0>
    {
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d02b      	beq.n	8000be6 <LoxChill+0xa6>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8
    		//|  0  |   0  |   0  |   1  |   0  |   1  |   0  |   1  |

    		StateStatus(ctrl);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f001 ffac 	bl	8002aec <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d003      	beq.n	8000bac <LoxChill+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f002 f979 	bl	8002e9c <StateInitialize>
 8000baa:	60f8      	str	r0, [r7, #12]
    	    }

    		//check if command changed
    		ProcessCommands(ctrl);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f000 fb33 	bl	8001218 <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	bf0c      	ite	eq
 8000bbe:	2301      	moveq	r3, #1
 8000bc0:	2300      	movne	r3, #0
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	60fb      	str	r3, [r7, #12]

			//NominalValueCheck(ctrl, Rx_Buffer);
			ringBufferRead();
 8000bc6:	f001 fc01 	bl	80023cc <ringBufferRead>

    		// Increment state counter
			ctrl->stateCounter++;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bdc:	d11f      	bne.n	8000c1e <LoxChill+0xde>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000be4:	e01b      	b.n	8000c1e <LoxChill+0xde>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, LOX_CHILL, ctrl->currentState);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bec:	461a      	mov	r2, r3
 8000bee:	2104      	movs	r1, #4
 8000bf0:	480e      	ldr	r0, [pc, #56]	; (8000c2c <LoxChill+0xec>)
 8000bf2:	f001 f8f3 	bl	8001ddc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8000bf6:	490d      	ldr	r1, [pc, #52]	; (8000c2c <LoxChill+0xec>)
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoxChill+0xf0>)
 8000bfa:	f000 f95b 	bl	8000eb4 <UART_SendMessage>
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000bfe:	e00e      	b.n	8000c1e <LoxChill+0xde>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4807      	ldr	r0, [pc, #28]	; (8000c2c <LoxChill+0xec>)
 8000c10:	f001 f95e 	bl	8001ed0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8000c14:	4905      	ldr	r1, [pc, #20]	; (8000c2c <LoxChill+0xec>)
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <LoxChill+0xf0>)
 8000c18:	f000 f94c 	bl	8000eb4 <UART_SendMessage>
 8000c1c:	e000      	b.n	8000c20 <LoxChill+0xe0>
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000c1e:	bf00      	nop
    }
	return success;
 8000c20:	68fb      	ldr	r3, [r7, #12]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200001bc 	.word	0x200001bc
 8000c30:	20003320 	.word	0x20003320

08000c34 <LoxFill>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include <lox_fill.h>
#include <messages.h>
#include "ring_buffer.h"

uint32_t LoxFill(struct StateVars *ctrl){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 8000c40:	f001 ffda 	bl	8002bf8 <StateConfiguration>
 8000c44:	4602      	mov	r2, r0
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV4 	\
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	22c8      	movs	r2, #200	; 0xc8
 8000c4e:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV7 	\
			 |(uint16_t)SOV8);

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 ff92 	bl	8002b80 <VerifyState>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d048      	beq.n	8000cf4 <LoxFill+0xc0>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 ff89 	bl	8002b80 <VerifyState>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d03f      	beq.n	8000cf4 <LoxFill+0xc0>
    {
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c7a:	f003 0303 	and.w	r3, r3, #3
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d12b      	bne.n	8000cda <LoxFill+0xa6>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  0  |   0  |   0  |   1  |   0  |   0  |   1  |   1  |  0  |  0

    		StateStatus(ctrl);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f001 ff32 	bl	8002aec <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d003      	beq.n	8000ca0 <LoxFill+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f002 f8ff 	bl	8002e9c <StateInitialize>
 8000c9e:	60f8      	str	r0, [r7, #12]
    	    }


    		ProcessCommands(ctrl);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f000 fab9 	bl	8001218 <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	bf0c      	ite	eq
 8000cb2:	2301      	moveq	r3, #1
 8000cb4:	2300      	movne	r3, #0
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	60fb      	str	r3, [r7, #12]

			//NominalValueCheck(ctrl, Rx_Buffer);
			ringBufferRead();
 8000cba:	f001 fb87 	bl	80023cc <ringBufferRead>

    		// Increment state counter
			ctrl->stateCounter++;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd0:	d11f      	bne.n	8000d12 <LoxFill+0xde>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000cd8:	e01b      	b.n	8000d12 <LoxFill+0xde>

    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, LOX_FILL, ctrl->currentState);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	2103      	movs	r1, #3
 8000ce4:	480e      	ldr	r0, [pc, #56]	; (8000d20 <LoxFill+0xec>)
 8000ce6:	f001 f879 	bl	8001ddc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8000cea:	490d      	ldr	r1, [pc, #52]	; (8000d20 <LoxFill+0xec>)
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <LoxFill+0xf0>)
 8000cee:	f000 f8e1 	bl	8000eb4 <UART_SendMessage>
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000cf2:	e00e      	b.n	8000d12 <LoxFill+0xde>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d00:	461a      	mov	r2, r3
 8000d02:	4807      	ldr	r0, [pc, #28]	; (8000d20 <LoxFill+0xec>)
 8000d04:	f001 f8e4 	bl	8001ed0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 8000d08:	4905      	ldr	r1, [pc, #20]	; (8000d20 <LoxFill+0xec>)
 8000d0a:	4806      	ldr	r0, [pc, #24]	; (8000d24 <LoxFill+0xf0>)
 8000d0c:	f000 f8d2 	bl	8000eb4 <UART_SendMessage>
 8000d10:	e000      	b.n	8000d14 <LoxFill+0xe0>
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000d12:	bf00      	nop
    }

	return success;
 8000d14:	68fb      	ldr	r3, [r7, #12]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200001bc 	.word	0x200001bc
 8000d24:	20003320 	.word	0x20003320

08000d28 <LoxPreFill>:
#include <messages.h>
#include "ring_buffer.h"


uint32_t LoxPreFill(struct StateVars *ctrl)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]

	ctrl->valveConfiguration = StateConfiguration();
 8000d34:	f001 ff60 	bl	8002bf8 <StateConfiguration>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV2 | (uint16_t)SOV4 |(uint16_t)SOV6);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	222a      	movs	r2, #42	; 0x2a
 8000d42:	631a      	str	r2, [r3, #48]	; 0x30


    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 ff18 	bl	8002b80 <VerifyState>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d04b      	beq.n	8000dee <LoxPreFill+0xc6>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f001 ff0f 	bl	8002b80 <VerifyState>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d042      	beq.n	8000dee <LoxPreFill+0xc6>
    {
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d02e      	beq.n	8000dd4 <LoxPreFill+0xac>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8   SOV9   IG1
    		// | 0	|   1  |   0  |   1  |   0  |   1  |   0  |   0  |   0  |  0
    		StateStatus(ctrl);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f001 feb8 	bl	8002aec <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d003      	beq.n	8000d94 <LoxPreFill+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f002 f885 	bl	8002e9c <StateInitialize>
 8000d92:	60f8      	str	r0, [r7, #12]
    	    }

    		StateStatus(ctrl);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f001 fea9 	bl	8002aec <StateStatus>

    		ProcessCommands(ctrl);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f000 fa3c 	bl	8001218 <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	429a      	cmp	r2, r3
 8000daa:	bf0c      	ite	eq
 8000dac:	2301      	moveq	r3, #1
 8000dae:	2300      	movne	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	60fb      	str	r3, [r7, #12]

			//NominalValueCheck(ctrl, Rx_Buffer);
			ringBufferRead();
 8000db4:	f001 fb0a 	bl	80023cc <ringBufferRead>
    		// Increment state counter
    		ctrl->stateCounter++;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	1c5a      	adds	r2, r3, #1
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
    		if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dca:	d11f      	bne.n	8000e0c <LoxPreFill+0xe4>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000dd2:	e01b      	b.n	8000e0c <LoxPreFill+0xe4>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, LOX_PRE_FILL, ctrl->currentState);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dda:	461a      	mov	r2, r3
 8000ddc:	2102      	movs	r1, #2
 8000dde:	480e      	ldr	r0, [pc, #56]	; (8000e18 <LoxPreFill+0xf0>)
 8000de0:	f000 fffc 	bl	8001ddc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2, Tx_Buffer);
 8000de4:	490c      	ldr	r1, [pc, #48]	; (8000e18 <LoxPreFill+0xf0>)
 8000de6:	480d      	ldr	r0, [pc, #52]	; (8000e1c <LoxPreFill+0xf4>)
 8000de8:	f000 f864 	bl	8000eb4 <UART_SendMessage>
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000dec:	e00e      	b.n	8000e0c <LoxPreFill+0xe4>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4806      	ldr	r0, [pc, #24]	; (8000e18 <LoxPreFill+0xf0>)
 8000dfe:	f001 f867 	bl	8001ed0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8000e02:	4905      	ldr	r1, [pc, #20]	; (8000e18 <LoxPreFill+0xf0>)
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <LoxPreFill+0xf4>)
 8000e06:	f000 f855 	bl	8000eb4 <UART_SendMessage>
 8000e0a:	e000      	b.n	8000e0e <LoxPreFill+0xe6>
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000e0c:	bf00      	nop
    }

	return success;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200001bc 	.word	0x200001bc
 8000e1c:	20003320 	.word	0x20003320

08000e20 <main>:
#include "states_def.h"
#include "init.h"
#include "ring_buffer.h"
int main(void)

{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b090      	sub	sp, #64	; 0x40
 8000e24:	af00      	add	r7, sp, #0
struct StateVars controls = {
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	223c      	movs	r2, #60	; 0x3c
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f005 f99d 	bl	800616c <memset>
 8000e32:	2301      	movs	r3, #1
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e36:	230b      	movs	r3, #11
 8000e38:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
		TURN_OFF,	//lastState
		START_HANDLER, 	//currentState
		&controls	//this address.
		};

	HAL_Init();
 8000e40:	f002 ff60 	bl	8003d04 <HAL_Init>

	SystemClock_Config();
 8000e44:	f7ff fd4c 	bl	80008e0 <SystemClock_Config>
	MX_GPIO_Init();
 8000e48:	f7ff fdcc 	bl	80009e4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000e4c:	f7ff fd9a 	bl	8000984 <MX_USART2_UART_Init>
    circular = 0; // Flag for circular buffer init
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <main+0x78>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
    bufferLength = 0, readIndex = 0, writeIndex = 0;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <main+0x7c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <main+0x80>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <main+0x84>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
    initOnceFlag = TRUE;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <main+0x88>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]

	 HAL_UART_Receive_IT(&huart2,(uint8_t *)Rx_data, 1); // Asserts UART Interrupt every time 1 byte is received.
 8000e6e:	2201      	movs	r2, #1
 8000e70:	490e      	ldr	r1, [pc, #56]	; (8000eac <main+0x8c>)
 8000e72:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <main+0x90>)
 8000e74:	f004 fa62 	bl	800533c <HAL_UART_Receive_IT>


	while(controls.isStateMachineRunning)
 8000e78:	e005      	b.n	8000e86 <main+0x66>
	{

	  StateMachine(controls.isStateMachineRunning,controls.adr);
 8000e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 fc0b 	bl	800269c <StateMachine>
	while(controls.isStateMachineRunning)
 8000e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1f6      	bne.n	8000e7a <main+0x5a>
 8000e8c:	2300      	movs	r3, #0
	}

}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3740      	adds	r7, #64	; 0x40
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20003110 	.word	0x20003110
 8000e9c:	20000190 	.word	0x20000190
 8000ea0:	200033c4 	.word	0x200033c4
 8000ea4:	20003124 	.word	0x20003124
 8000ea8:	200001a4 	.word	0x200001a4
 8000eac:	200001ac 	.word	0x200001ac
 8000eb0:	20003320 	.word	0x20003320

08000eb4 <UART_SendMessage>:
//troubleshooting
int x = 0;

// Function to send the messages over serial communication
void UART_SendMessage(UART_HandleTypeDef *huart, char* message)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
	  int len = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
	  uint32_t success = FALSE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
	  sprintf(buffer, message);
 8000ec6:	6839      	ldr	r1, [r7, #0]
 8000ec8:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <UART_SendMessage+0x3c>)
 8000eca:	f005 f957 	bl	800617c <siprintf>
	  len =strlen(buffer);
 8000ece:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <UART_SendMessage+0x3c>)
 8000ed0:	f7ff f97e 	bl	80001d0 <strlen>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee0:	4903      	ldr	r1, [pc, #12]	; (8000ef0 <UART_SendMessage+0x3c>)
 8000ee2:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <UART_SendMessage+0x40>)
 8000ee4:	f004 f996 	bl	8005214 <HAL_UART_Transmit>
	  return success;
 8000ee8:	bf00      	nop
}
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20003128 	.word	0x20003128
 8000ef4:	20003320 	.word	0x20003320

08000ef8 <HAL_UART_RxCpltCallback>:

//Receiving the command
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	 uint32_t success = FALSE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
	 uint8_t i;
	    if (huart->Instance == USART2)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a6e      	ldr	r2, [pc, #440]	; (80010c4 <HAL_UART_RxCpltCallback+0x1cc>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	f040 80d6 	bne.w	80010bc <HAL_UART_RxCpltCallback+0x1c4>
	     {
	    	//clear Rx_Buffer before receiving new data
	        if (Rx_indx==0) { for (i=0;i<100;i++) Rx_Buffer[i]=0; }
 8000f10:	4b6d      	ldr	r3, [pc, #436]	; (80010c8 <HAL_UART_RxCpltCallback+0x1d0>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10c      	bne.n	8000f32 <HAL_UART_RxCpltCallback+0x3a>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	75fb      	strb	r3, [r7, #23]
 8000f1c:	e006      	b.n	8000f2c <HAL_UART_RxCpltCallback+0x34>
 8000f1e:	7dfb      	ldrb	r3, [r7, #23]
 8000f20:	4a6a      	ldr	r2, [pc, #424]	; (80010cc <HAL_UART_RxCpltCallback+0x1d4>)
 8000f22:	2100      	movs	r1, #0
 8000f24:	54d1      	strb	r1, [r2, r3]
 8000f26:	7dfb      	ldrb	r3, [r7, #23]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	75fb      	strb	r3, [r7, #23]
 8000f2c:	7dfb      	ldrb	r3, [r7, #23]
 8000f2e:	2b63      	cmp	r3, #99	; 0x63
 8000f30:	d9f5      	bls.n	8000f1e <HAL_UART_RxCpltCallback+0x26>

	        //if received data different from ascii 13 (Carriage Return) continue storing data.
	        if (Rx_data[0] != 13)
 8000f32:	4b67      	ldr	r3, [pc, #412]	; (80010d0 <HAL_UART_RxCpltCallback+0x1d8>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b0d      	cmp	r3, #13
 8000f38:	d00b      	beq.n	8000f52 <HAL_UART_RxCpltCallback+0x5a>
	            {
	        		Rx_Buffer[Rx_indx++]=Rx_data[0];    //add data to Rx_Buffer
 8000f3a:	4b63      	ldr	r3, [pc, #396]	; (80010c8 <HAL_UART_RxCpltCallback+0x1d0>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	b2d1      	uxtb	r1, r2
 8000f42:	4a61      	ldr	r2, [pc, #388]	; (80010c8 <HAL_UART_RxCpltCallback+0x1d0>)
 8000f44:	7011      	strb	r1, [r2, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b61      	ldr	r3, [pc, #388]	; (80010d0 <HAL_UART_RxCpltCallback+0x1d8>)
 8000f4a:	7819      	ldrb	r1, [r3, #0]
 8000f4c:	4b5f      	ldr	r3, [pc, #380]	; (80010cc <HAL_UART_RxCpltCallback+0x1d4>)
 8000f4e:	5499      	strb	r1, [r3, r2]
 8000f50:	e0af      	b.n	80010b2 <HAL_UART_RxCpltCallback+0x1ba>


	        else  //the receiving is complete!
	            {
	        		 // Flag variables
	        	     Rx_indx=0;          //Reset the Rx index to start reading data from the beginning.
 8000f52:	4b5d      	ldr	r3, [pc, #372]	; (80010c8 <HAL_UART_RxCpltCallback+0x1d0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
	        	     retransition = TRUE;//For message in case usr tries to transition to the current state.
 8000f58:	4b5e      	ldr	r3, [pc, #376]	; (80010d4 <HAL_UART_RxCpltCallback+0x1dc>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]
					 inv_flag = TRUE;    //For message about invalid command.
 8000f5e:	4b5e      	ldr	r3, [pc, #376]	; (80010d8 <HAL_UART_RxCpltCallback+0x1e0>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	601a      	str	r2, [r3, #0]
					 RxTxFlags |= 0x1;
 8000f64:	4b5d      	ldr	r3, [pc, #372]	; (80010dc <HAL_UART_RxCpltCallback+0x1e4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	4a5b      	ldr	r2, [pc, #364]	; (80010dc <HAL_UART_RxCpltCallback+0x1e4>)
 8000f6e:	6013      	str	r3, [r2, #0]
					 success = TRUE;
 8000f70:	2301      	movs	r3, #1
 8000f72:	613b      	str	r3, [r7, #16]
	        		 // Pass Rx_Buffer to splitValues and look for spaces
	        		 // if data contains a command then checker = 1,
					 // if data contains a Marionette data packet then checker = 8
					 // MAR_DATA_CHECK contains the number of values for the data packet.
					 // EX: Testing MAR_DATA_CHECK = 8 (3F99 and 7 sensor values)
	        		  uint32_t checker = splitValues(Rx_Buffer, NULL);
 8000f74:	2100      	movs	r1, #0
 8000f76:	4855      	ldr	r0, [pc, #340]	; (80010cc <HAL_UART_RxCpltCallback+0x1d4>)
 8000f78:	f000 fe44 	bl	8001c04 <splitValues>
 8000f7c:	60f8      	str	r0, [r7, #12]
	        		  if (checker == MAR_DATA_CHECK){
 8000f7e:	4b58      	ldr	r3, [pc, #352]	; (80010e0 <HAL_UART_RxCpltCallback+0x1e8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d103      	bne.n	8000f90 <HAL_UART_RxCpltCallback+0x98>

	        			  //send data packet to ring buffer
	        			  ringBuffer(Rx_Buffer);
 8000f88:	4850      	ldr	r0, [pc, #320]	; (80010cc <HAL_UART_RxCpltCallback+0x1d4>)
 8000f8a:	f001 f991 	bl	80022b0 <ringBuffer>
 8000f8e:	e090      	b.n	80010b2 <HAL_UART_RxCpltCallback+0x1ba>

	        	     }
	        		  else{
	        		  //Otherwise we have an user's command
	        		 // convert the hex command received into uint32_t
	        		 command =  hexadecimalTouint32(Rx_Buffer);
 8000f90:	484e      	ldr	r0, [pc, #312]	; (80010cc <HAL_UART_RxCpltCallback+0x1d4>)
 8000f92:	f000 f8ef 	bl	8001174 <hexadecimalTouint32>
 8000f96:	4602      	mov	r2, r0
 8000f98:	4b52      	ldr	r3, [pc, #328]	; (80010e4 <HAL_UART_RxCpltCallback+0x1ec>)
 8000f9a:	601a      	str	r2, [r3, #0]

	                 // command variable contains the uint32 conversion from the hex command
	                 if(command ==state_status){
 8000f9c:	4b51      	ldr	r3, [pc, #324]	; (80010e4 <HAL_UART_RxCpltCallback+0x1ec>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b51      	ldr	r3, [pc, #324]	; (80010e8 <HAL_UART_RxCpltCallback+0x1f0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d103      	bne.n	8000fb0 <HAL_UART_RxCpltCallback+0xb8>
	                	 status= TRUE;
 8000fa8:	4b50      	ldr	r3, [pc, #320]	; (80010ec <HAL_UART_RxCpltCallback+0x1f4>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	e080      	b.n	80010b2 <HAL_UART_RxCpltCallback+0x1ba>
	                 }
	                 else if (command ==  power_off || stop || valve_check || lox_fill || lox_chill || pressurizing || lox_pre_fill || ignition ||start_handler \
 8000fb0:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <HAL_UART_RxCpltCallback+0x1ec>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b4e      	ldr	r3, [pc, #312]	; (80010f0 <HAL_UART_RxCpltCallback+0x1f8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d077      	beq.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 8000fbc:	4b4d      	ldr	r3, [pc, #308]	; (80010f4 <HAL_UART_RxCpltCallback+0x1fc>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d173      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 8000fc4:	4b4c      	ldr	r3, [pc, #304]	; (80010f8 <HAL_UART_RxCpltCallback+0x200>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d16f      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 8000fcc:	4b4b      	ldr	r3, [pc, #300]	; (80010fc <HAL_UART_RxCpltCallback+0x204>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d16b      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 8000fd4:	4b4a      	ldr	r3, [pc, #296]	; (8001100 <HAL_UART_RxCpltCallback+0x208>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d167      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 8000fdc:	4b49      	ldr	r3, [pc, #292]	; (8001104 <HAL_UART_RxCpltCallback+0x20c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d163      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 8000fe4:	4b48      	ldr	r3, [pc, #288]	; (8001108 <HAL_UART_RxCpltCallback+0x210>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d15f      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 8000fec:	4b47      	ldr	r3, [pc, #284]	; (800110c <HAL_UART_RxCpltCallback+0x214>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d15b      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 8000ff4:	4b46      	ldr	r3, [pc, #280]	; (8001110 <HAL_UART_RxCpltCallback+0x218>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d157      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
	             			|| cycle_valves || cycle_voff || IGON || IGOFF || SOV1ON || SOV1OFF || SOV2ON || SOV2OFF || SOV3ON || SOV3OFF || SOV4ON || SOV4OFF || SOV5ON || SOV5OFF ||\
 8000ffc:	4b45      	ldr	r3, [pc, #276]	; (8001114 <HAL_UART_RxCpltCallback+0x21c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d153      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 8001004:	4b44      	ldr	r3, [pc, #272]	; (8001118 <HAL_UART_RxCpltCallback+0x220>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d14f      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 800100c:	4b43      	ldr	r3, [pc, #268]	; (800111c <HAL_UART_RxCpltCallback+0x224>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d14b      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 8001014:	4b42      	ldr	r3, [pc, #264]	; (8001120 <HAL_UART_RxCpltCallback+0x228>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d147      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 800101c:	4b41      	ldr	r3, [pc, #260]	; (8001124 <HAL_UART_RxCpltCallback+0x22c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d143      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 8001024:	4b40      	ldr	r3, [pc, #256]	; (8001128 <HAL_UART_RxCpltCallback+0x230>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d13f      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 800102c:	4b3f      	ldr	r3, [pc, #252]	; (800112c <HAL_UART_RxCpltCallback+0x234>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d13b      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 8001034:	4b3e      	ldr	r3, [pc, #248]	; (8001130 <HAL_UART_RxCpltCallback+0x238>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d137      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 800103c:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <HAL_UART_RxCpltCallback+0x23c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d133      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 8001044:	4b3c      	ldr	r3, [pc, #240]	; (8001138 <HAL_UART_RxCpltCallback+0x240>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d12f      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 800104c:	4b3b      	ldr	r3, [pc, #236]	; (800113c <HAL_UART_RxCpltCallback+0x244>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d12b      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 8001054:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <HAL_UART_RxCpltCallback+0x248>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d127      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 800105c:	4b39      	ldr	r3, [pc, #228]	; (8001144 <HAL_UART_RxCpltCallback+0x24c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d123      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 8001064:	4b38      	ldr	r3, [pc, #224]	; (8001148 <HAL_UART_RxCpltCallback+0x250>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d11f      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 800106c:	4b37      	ldr	r3, [pc, #220]	; (800114c <HAL_UART_RxCpltCallback+0x254>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d11b      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
	             			 SOV6ON || SOV6OFF || SOV7ON || SOV7OFF || SOV8ON || SOV8OFF || SOV9ON || SOV9OFF ){
 8001074:	4b36      	ldr	r3, [pc, #216]	; (8001150 <HAL_UART_RxCpltCallback+0x258>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d117      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 800107c:	4b35      	ldr	r3, [pc, #212]	; (8001154 <HAL_UART_RxCpltCallback+0x25c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d113      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 8001084:	4b34      	ldr	r3, [pc, #208]	; (8001158 <HAL_UART_RxCpltCallback+0x260>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10f      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 800108c:	4b33      	ldr	r3, [pc, #204]	; (800115c <HAL_UART_RxCpltCallback+0x264>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10b      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 8001094:	4b32      	ldr	r3, [pc, #200]	; (8001160 <HAL_UART_RxCpltCallback+0x268>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d107      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 800109c:	4b31      	ldr	r3, [pc, #196]	; (8001164 <HAL_UART_RxCpltCallback+0x26c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d103      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1b4>
 80010a4:	4b30      	ldr	r3, [pc, #192]	; (8001168 <HAL_UART_RxCpltCallback+0x270>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <HAL_UART_RxCpltCallback+0x1ba>

	                	 cmd_flag = TRUE;// so that the transition to a state occur once and not re transition continuosly
 80010ac:	4b2f      	ldr	r3, [pc, #188]	; (800116c <HAL_UART_RxCpltCallback+0x274>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]
	                 }
	              }//end of else for user command

	            }// end of else for receive complete

	        HAL_UART_Receive_IT(&huart2, Rx_data, 1);   //activate UART receive interrupt for ascii byte every time.
 80010b2:	2201      	movs	r2, #1
 80010b4:	4906      	ldr	r1, [pc, #24]	; (80010d0 <HAL_UART_RxCpltCallback+0x1d8>)
 80010b6:	482e      	ldr	r0, [pc, #184]	; (8001170 <HAL_UART_RxCpltCallback+0x278>)
 80010b8:	f004 f940 	bl	800533c <HAL_UART_Receive_IT>

	}// end of if  (huart->Instance == USART2)
}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40004400 	.word	0x40004400
 80010c8:	20000194 	.word	0x20000194
 80010cc:	2000322c 	.word	0x2000322c
 80010d0:	200001ac 	.word	0x200001ac
 80010d4:	200032a4 	.word	0x200032a4
 80010d8:	20003114 	.word	0x20003114
 80010dc:	2000018c 	.word	0x2000018c
 80010e0:	20000000 	.word	0x20000000
 80010e4:	200001b0 	.word	0x200001b0
 80010e8:	2000002c 	.word	0x2000002c
 80010ec:	200033d0 	.word	0x200033d0
 80010f0:	20000004 	.word	0x20000004
 80010f4:	20000008 	.word	0x20000008
 80010f8:	2000000c 	.word	0x2000000c
 80010fc:	20000010 	.word	0x20000010
 8001100:	20000014 	.word	0x20000014
 8001104:	2000001c 	.word	0x2000001c
 8001108:	20000018 	.word	0x20000018
 800110c:	20000024 	.word	0x20000024
 8001110:	20000028 	.word	0x20000028
 8001114:	20000034 	.word	0x20000034
 8001118:	20000038 	.word	0x20000038
 800111c:	2000003c 	.word	0x2000003c
 8001120:	20000040 	.word	0x20000040
 8001124:	20000044 	.word	0x20000044
 8001128:	20000048 	.word	0x20000048
 800112c:	2000004c 	.word	0x2000004c
 8001130:	20000050 	.word	0x20000050
 8001134:	20000054 	.word	0x20000054
 8001138:	20000058 	.word	0x20000058
 800113c:	2000005c 	.word	0x2000005c
 8001140:	20000060 	.word	0x20000060
 8001144:	20000064 	.word	0x20000064
 8001148:	20000068 	.word	0x20000068
 800114c:	2000006c 	.word	0x2000006c
 8001150:	20000070 	.word	0x20000070
 8001154:	20000074 	.word	0x20000074
 8001158:	20000078 	.word	0x20000078
 800115c:	2000007c 	.word	0x2000007c
 8001160:	20000080 	.word	0x20000080
 8001164:	20000084 	.word	0x20000084
 8001168:	20000088 	.word	0x20000088
 800116c:	20003120 	.word	0x20003120
 8001170:	20003320 	.word	0x20003320

08001174 <hexadecimalTouint32>:

//Convert HEX to uint32_t
uint32_t hexadecimalTouint32(char* hexVal)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	uint32_t len = strlen(hexVal);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff f827 	bl	80001d0 <strlen>
 8001182:	60b8      	str	r0, [r7, #8]

    // Initializing base value to 1 ( 16^0, 16^1, 16^2, etc )
     uint32_t base = 1;
 8001184:	2301      	movs	r3, #1
 8001186:	617b      	str	r3, [r7, #20]
     uint32_t val = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]

    // Extracting characters as digits from last character
    for (int i=len-1; i>=0; i--)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	3b01      	subs	r3, #1
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	e039      	b.n	8001208 <hexadecimalTouint32+0x94>
    {
        // if ASCII char is between (0-9)
        if (hexVal[i]>='0' && hexVal[i]<='9')
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b2f      	cmp	r3, #47	; 0x2f
 800119e:	d915      	bls.n	80011cc <hexadecimalTouint32+0x58>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b39      	cmp	r3, #57	; 0x39
 80011aa:	d80f      	bhi.n	80011cc <hexadecimalTouint32+0x58>
        {
            val += (hexVal[i] - 48)*base;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	3b30      	subs	r3, #48	; 0x30
 80011b6:	461a      	mov	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fb03 f302 	mul.w	r3, r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4413      	add	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]

            // incrementing the base by power
            base = base * 16;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	e01a      	b.n	8001202 <hexadecimalTouint32+0x8e>
        }

        // if ASCII char is between(A-F)
        else if (hexVal[i]>='A' && hexVal[i]<='F')
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b40      	cmp	r3, #64	; 0x40
 80011d6:	d914      	bls.n	8001202 <hexadecimalTouint32+0x8e>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b46      	cmp	r3, #70	; 0x46
 80011e2:	d80e      	bhi.n	8001202 <hexadecimalTouint32+0x8e>
        {
            val += (hexVal[i] - 55)*base;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	3b37      	subs	r3, #55	; 0x37
 80011ee:	461a      	mov	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fb03 f302 	mul.w	r3, r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4413      	add	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]

            // incrementing the base by power
            base = base*16;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	617b      	str	r3, [r7, #20]
    for (int i=len-1; i>=0; i--)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3b01      	subs	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	dac2      	bge.n	8001194 <hexadecimalTouint32+0x20>
        }
    }
    return val;
 800120e:	693b      	ldr	r3, [r7, #16]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <ProcessCommands>:

//Function to process the command messages
uint32_t ProcessCommands(struct StateVars * ctrl)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]

	// LOX_PRE_FILL command
	if((ctrl->currentState == START_HANDLER) && command == lox_pre_fill )
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800122a:	2b00      	cmp	r3, #0
 800122c:	d112      	bne.n	8001254 <ProcessCommands+0x3c>
 800122e:	4ba0      	ldr	r3, [pc, #640]	; (80014b0 <ProcessCommands+0x298>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4ba0      	ldr	r3, [pc, #640]	; (80014b4 <ProcessCommands+0x29c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	429a      	cmp	r2, r3
 8001238:	d10c      	bne.n	8001254 <ProcessCommands+0x3c>
	{
		ctrl ->currentState = LOX_PRE_FILL;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2202      	movs	r2, #2
 800123e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 8001242:	2301      	movs	r3, #1
 8001244:	60fb      	str	r3, [r7, #12]
		RxTxFlags &= !RX_DATA_READY;
 8001246:	4b9c      	ldr	r3, [pc, #624]	; (80014b8 <ProcessCommands+0x2a0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4b9b      	ldr	r3, [pc, #620]	; (80014b8 <ProcessCommands+0x2a0>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	f000 bc9d 	b.w	8001b8e <ProcessCommands+0x976>
	}
    // TURN_OFF command
	else if((command == power_off) && (ctrl->currentState== VALVE_CHECK || \
 8001254:	4b96      	ldr	r3, [pc, #600]	; (80014b0 <ProcessCommands+0x298>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b98      	ldr	r3, [pc, #608]	; (80014bc <ProcessCommands+0x2a4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	d116      	bne.n	800128e <ProcessCommands+0x76>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001266:	2b01      	cmp	r3, #1
 8001268:	d004      	beq.n	8001274 <ProcessCommands+0x5c>
			 ctrl->currentState == SAFETY))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == power_off) && (ctrl->currentState== VALVE_CHECK || \
 8001270:	2b05      	cmp	r3, #5
 8001272:	d10c      	bne.n	800128e <ProcessCommands+0x76>
	{
		ctrl ->currentState = TURN_OFF;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	220b      	movs	r2, #11
 8001278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 800127c:	2301      	movs	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
		RxTxFlags &= !RX_DATA_READY;
 8001280:	4b8d      	ldr	r3, [pc, #564]	; (80014b8 <ProcessCommands+0x2a0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4b8c      	ldr	r3, [pc, #560]	; (80014b8 <ProcessCommands+0x2a0>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	f000 bc80 	b.w	8001b8e <ProcessCommands+0x976>
	}
    // STOP command
	else if((command == stop) && ( ctrl->currentState== LOX_PRE_FILL || \
 800128e:	4b88      	ldr	r3, [pc, #544]	; (80014b0 <ProcessCommands+0x298>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4b8b      	ldr	r3, [pc, #556]	; (80014c0 <ProcessCommands+0x2a8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d120      	bne.n	80012dc <ProcessCommands+0xc4>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d00e      	beq.n	80012c2 <ProcessCommands+0xaa>
			  ctrl->currentState == LOX_CHILL|| \
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == stop) && ( ctrl->currentState== LOX_PRE_FILL || \
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	d009      	beq.n	80012c2 <ProcessCommands+0xaa>
			  ctrl->currentState == LOX_FILL 	|| \
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
			  ctrl->currentState == LOX_CHILL|| \
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d004      	beq.n	80012c2 <ProcessCommands+0xaa>
			  /*ctrl->currentState == VALVE_CHECK|| \*/ //dont want valve_check to end up in safety
			  ctrl->currentState == START_HANDLER) )
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
			  ctrl->currentState == LOX_FILL 	|| \
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10c      	bne.n	80012dc <ProcessCommands+0xc4>
	{
		ctrl->currentState = SAFETY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2205      	movs	r2, #5
 80012c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 80012ca:	2301      	movs	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 80012ce:	4b7a      	ldr	r3, [pc, #488]	; (80014b8 <ProcessCommands+0x2a0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4b79      	ldr	r3, [pc, #484]	; (80014b8 <ProcessCommands+0x2a0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	f000 bc59 	b.w	8001b8e <ProcessCommands+0x976>
	}

	// LOX_FILL command
	else if(( ctrl->currentState == LOX_PRE_FILL) && (command == lox_fill))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d112      	bne.n	800130c <ProcessCommands+0xf4>
 80012e6:	4b72      	ldr	r3, [pc, #456]	; (80014b0 <ProcessCommands+0x298>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b76      	ldr	r3, [pc, #472]	; (80014c4 <ProcessCommands+0x2ac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d10c      	bne.n	800130c <ProcessCommands+0xf4>
	{
		ctrl->currentState = LOX_FILL;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2203      	movs	r2, #3
 80012f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 80012fa:	2301      	movs	r3, #1
 80012fc:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 80012fe:	4b6e      	ldr	r3, [pc, #440]	; (80014b8 <ProcessCommands+0x2a0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4b6d      	ldr	r3, [pc, #436]	; (80014b8 <ProcessCommands+0x2a0>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	f000 bc41 	b.w	8001b8e <ProcessCommands+0x976>
	}
    // LOX_FILL command
	else if((ctrl->currentState == LOX_FILL) && (command == lox_chill))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001312:	2b03      	cmp	r3, #3
 8001314:	d112      	bne.n	800133c <ProcessCommands+0x124>
 8001316:	4b66      	ldr	r3, [pc, #408]	; (80014b0 <ProcessCommands+0x298>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4b6b      	ldr	r3, [pc, #428]	; (80014c8 <ProcessCommands+0x2b0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	429a      	cmp	r2, r3
 8001320:	d10c      	bne.n	800133c <ProcessCommands+0x124>
	{
		ctrl->currentState = LOX_CHILL;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2204      	movs	r2, #4
 8001326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 800132a:	2301      	movs	r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 800132e:	4b62      	ldr	r3, [pc, #392]	; (80014b8 <ProcessCommands+0x2a0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4b61      	ldr	r3, [pc, #388]	; (80014b8 <ProcessCommands+0x2a0>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	f000 bc29 	b.w	8001b8e <ProcessCommands+0x976>
	}
    // LOX_CHILL command
	else if(( ctrl->currentState == LOX_CHILL) && (command == safety))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001342:	2b04      	cmp	r3, #4
 8001344:	d112      	bne.n	800136c <ProcessCommands+0x154>
 8001346:	4b5a      	ldr	r3, [pc, #360]	; (80014b0 <ProcessCommands+0x298>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	4b60      	ldr	r3, [pc, #384]	; (80014cc <ProcessCommands+0x2b4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d10c      	bne.n	800136c <ProcessCommands+0x154>
	{
		ctrl->currentState = SAFETY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2205      	movs	r2, #5
 8001356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 800135a:	2301      	movs	r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 800135e:	4b56      	ldr	r3, [pc, #344]	; (80014b8 <ProcessCommands+0x2a0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4b55      	ldr	r3, [pc, #340]	; (80014b8 <ProcessCommands+0x2a0>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	f000 bc11 	b.w	8001b8e <ProcessCommands+0x976>
	}
    // VALVE_CHECK command
	else if(( ctrl->currentState == START_HANDLER ) && (command == valve_check))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001372:	2b00      	cmp	r3, #0
 8001374:	d111      	bne.n	800139a <ProcessCommands+0x182>
 8001376:	4b4e      	ldr	r3, [pc, #312]	; (80014b0 <ProcessCommands+0x298>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b55      	ldr	r3, [pc, #340]	; (80014d0 <ProcessCommands+0x2b8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d10b      	bne.n	800139a <ProcessCommands+0x182>
	{
		ctrl->currentState = VALVE_CHECK;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 800138a:	2301      	movs	r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 800138e:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <ProcessCommands+0x2a0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4b49      	ldr	r3, [pc, #292]	; (80014b8 <ProcessCommands+0x2a0>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e3f9      	b.n	8001b8e <ProcessCommands+0x976>
	}

    // PRESSURIZE command
	else if((ctrl->currentState == SAFETY) && (command == pressurizing))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	d111      	bne.n	80013c8 <ProcessCommands+0x1b0>
 80013a4:	4b42      	ldr	r3, [pc, #264]	; (80014b0 <ProcessCommands+0x298>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b4a      	ldr	r3, [pc, #296]	; (80014d4 <ProcessCommands+0x2bc>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d10b      	bne.n	80013c8 <ProcessCommands+0x1b0>
	{
		ctrl->currentState = PRESSURIZE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2206      	movs	r2, #6
 80013b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 80013b8:	2301      	movs	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 80013bc:	4b3e      	ldr	r3, [pc, #248]	; (80014b8 <ProcessCommands+0x2a0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <ProcessCommands+0x2a0>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	e3e2      	b.n	8001b8e <ProcessCommands+0x976>
	}
    // IGNITION command
	else if((ctrl->currentState == PRESSURIZE) && (command == ignition))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ce:	2b06      	cmp	r3, #6
 80013d0:	d111      	bne.n	80013f6 <ProcessCommands+0x1de>
 80013d2:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <ProcessCommands+0x298>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b40      	ldr	r3, [pc, #256]	; (80014d8 <ProcessCommands+0x2c0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d10b      	bne.n	80013f6 <ProcessCommands+0x1de>
	{
		ctrl->currentState = IGNITION; //START of the FSM
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2207      	movs	r2, #7
 80013e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 80013e6:	2301      	movs	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 80013ea:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <ProcessCommands+0x2a0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <ProcessCommands+0x2a0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	e3cb      	b.n	8001b8e <ProcessCommands+0x976>
	}


	//State status
	else if((command ==state_status) && (
 80013f6:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <ProcessCommands+0x298>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <ProcessCommands+0x2c4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d132      	bne.n	8001468 <ProcessCommands+0x250>
				  ctrl->currentState == START_HANDLER || \
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command ==state_status) && (
 8001408:	2b00      	cmp	r3, #0
 800140a:	d022      	beq.n	8001452 <ProcessCommands+0x23a>
				  ctrl->currentState == LOX_PRE_FILL || \
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == START_HANDLER || \
 8001412:	2b02      	cmp	r3, #2
 8001414:	d01d      	beq.n	8001452 <ProcessCommands+0x23a>
				  ctrl->currentState == LOX_CHILL|| \
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == LOX_PRE_FILL || \
 800141c:	2b04      	cmp	r3, #4
 800141e:	d018      	beq.n	8001452 <ProcessCommands+0x23a>
				  ctrl->currentState == LOX_FILL 	|| \
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == LOX_CHILL|| \
 8001426:	2b03      	cmp	r3, #3
 8001428:	d013      	beq.n	8001452 <ProcessCommands+0x23a>
				  ctrl->currentState == VALVE_CHECK|| \
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == LOX_FILL 	|| \
 8001430:	2b01      	cmp	r3, #1
 8001432:	d00e      	beq.n	8001452 <ProcessCommands+0x23a>
				  ctrl->currentState == PRESSURIZE  ||   \
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == VALVE_CHECK|| \
 800143a:	2b06      	cmp	r3, #6
 800143c:	d009      	beq.n	8001452 <ProcessCommands+0x23a>
				  ctrl->currentState == TURN_OFF || \
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == PRESSURIZE  ||   \
 8001444:	2b0b      	cmp	r3, #11
 8001446:	d004      	beq.n	8001452 <ProcessCommands+0x23a>
				  ctrl->currentState == SAFETY \
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == TURN_OFF || \
 800144e:	2b05      	cmp	r3, #5
 8001450:	d10a      	bne.n	8001468 <ProcessCommands+0x250>
				  ))
		{

		    StateStatus(ctrl);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f001 fb4a 	bl	8002aec <StateStatus>
			success = TRUE;
 8001458:	2301      	movs	r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
			// Clear data read flag
			RxTxFlags &= !RX_DATA_READY;
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <ProcessCommands+0x2a0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <ProcessCommands+0x2a0>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	e392      	b.n	8001b8e <ProcessCommands+0x976>
		}
	// Handling invalid transitions
	else if ((command == stop) && (ctrl->currentState==VALVE_CHECK || ctrl->currentState == START_HANDLER)){
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <ProcessCommands+0x298>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <ProcessCommands+0x2a8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d13b      	bne.n	80014ec <ProcessCommands+0x2d4>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800147a:	2b01      	cmp	r3, #1
 800147c:	d004      	beq.n	8001488 <ProcessCommands+0x270>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001484:	2b00      	cmp	r3, #0
 8001486:	d131      	bne.n	80014ec <ProcessCommands+0x2d4>
					if (cmd_flag)
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <ProcessCommands+0x2c8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d006      	beq.n	800149e <ProcessCommands+0x286>
				 	  {
				 	 	  UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 8001490:	4914      	ldr	r1, [pc, #80]	; (80014e4 <ProcessCommands+0x2cc>)
 8001492:	4815      	ldr	r0, [pc, #84]	; (80014e8 <ProcessCommands+0x2d0>)
 8001494:	f7ff fd0e 	bl	8000eb4 <UART_SendMessage>
				 	 	  cmd_flag = FALSE;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <ProcessCommands+0x2c8>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
				 	 }
						success = TRUE;
 800149e:	2301      	movs	r3, #1
 80014a0:	60fb      	str	r3, [r7, #12]
						// Clear data read flag
						RxTxFlags &= !RX_DATA_READY;
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <ProcessCommands+0x2a0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <ProcessCommands+0x2a0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	e36f      	b.n	8001b8e <ProcessCommands+0x976>
 80014ae:	bf00      	nop
 80014b0:	200001b0 	.word	0x200001b0
 80014b4:	20000018 	.word	0x20000018
 80014b8:	2000018c 	.word	0x2000018c
 80014bc:	20000004 	.word	0x20000004
 80014c0:	20000008 	.word	0x20000008
 80014c4:	20000010 	.word	0x20000010
 80014c8:	20000014 	.word	0x20000014
 80014cc:	20000020 	.word	0x20000020
 80014d0:	2000000c 	.word	0x2000000c
 80014d4:	2000001c 	.word	0x2000001c
 80014d8:	20000024 	.word	0x20000024
 80014dc:	2000002c 	.word	0x2000002c
 80014e0:	20003120 	.word	0x20003120
 80014e4:	080069d0 	.word	0x080069d0
 80014e8:	20003320 	.word	0x20003320
		}
	else if((command == lox_fill) && (
 80014ec:	4ba2      	ldr	r3, [pc, #648]	; (8001778 <ProcessCommands+0x560>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4ba2      	ldr	r3, [pc, #648]	; (800177c <ProcessCommands+0x564>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d130      	bne.n	800155a <ProcessCommands+0x342>
					  ctrl->currentState == START_HANDLER|| \
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == lox_fill) && (
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d018      	beq.n	8001534 <ProcessCommands+0x31c>
					  ctrl->currentState == LOX_CHILL	|| \
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == START_HANDLER|| \
 8001508:	2b04      	cmp	r3, #4
 800150a:	d013      	beq.n	8001534 <ProcessCommands+0x31c>
					  ctrl->currentState == VALVE_CHECK|| \
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == LOX_CHILL	|| \
 8001512:	2b01      	cmp	r3, #1
 8001514:	d00e      	beq.n	8001534 <ProcessCommands+0x31c>
					  ctrl->currentState == PRESSURIZE  ||   \
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == VALVE_CHECK|| \
 800151c:	2b06      	cmp	r3, #6
 800151e:	d009      	beq.n	8001534 <ProcessCommands+0x31c>
					  ctrl->currentState == TURN_OFF || \
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == PRESSURIZE  ||   \
 8001526:	2b0b      	cmp	r3, #11
 8001528:	d004      	beq.n	8001534 <ProcessCommands+0x31c>
					  ctrl->currentState == SAFETY \
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == TURN_OFF || \
 8001530:	2b05      	cmp	r3, #5
 8001532:	d112      	bne.n	800155a <ProcessCommands+0x342>
					  )){

					if (cmd_flag)
 8001534:	4b92      	ldr	r3, [pc, #584]	; (8001780 <ProcessCommands+0x568>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <ProcessCommands+0x332>
		 	 	 	 	 {
		 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 800153c:	4991      	ldr	r1, [pc, #580]	; (8001784 <ProcessCommands+0x56c>)
 800153e:	4892      	ldr	r0, [pc, #584]	; (8001788 <ProcessCommands+0x570>)
 8001540:	f7ff fcb8 	bl	8000eb4 <UART_SendMessage>
		 	 	 		 	cmd_flag = FALSE;
 8001544:	4b8e      	ldr	r3, [pc, #568]	; (8001780 <ProcessCommands+0x568>)
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
		 	 	 	 	 }
				success = TRUE;
 800154a:	2301      	movs	r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
				// Clear data read flag
				RxTxFlags &= !RX_DATA_READY;
 800154e:	4b8f      	ldr	r3, [pc, #572]	; (800178c <ProcessCommands+0x574>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4b8e      	ldr	r3, [pc, #568]	; (800178c <ProcessCommands+0x574>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	e319      	b.n	8001b8e <ProcessCommands+0x976>
			}
	else if((command == lox_chill) && (
 800155a:	4b87      	ldr	r3, [pc, #540]	; (8001778 <ProcessCommands+0x560>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4b8c      	ldr	r3, [pc, #560]	; (8001790 <ProcessCommands+0x578>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d130      	bne.n	80015c8 <ProcessCommands+0x3b0>
						  ctrl->currentState == START_HANDLER|| \
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == lox_chill) && (
 800156c:	2b00      	cmp	r3, #0
 800156e:	d018      	beq.n	80015a2 <ProcessCommands+0x38a>
						  ctrl->currentState == LOX_PRE_FILL	|| \
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == START_HANDLER|| \
 8001576:	2b02      	cmp	r3, #2
 8001578:	d013      	beq.n	80015a2 <ProcessCommands+0x38a>
						  ctrl->currentState == VALVE_CHECK|| \
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_PRE_FILL	|| \
 8001580:	2b01      	cmp	r3, #1
 8001582:	d00e      	beq.n	80015a2 <ProcessCommands+0x38a>
						  ctrl->currentState == PRESSURIZE  ||   \
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == VALVE_CHECK|| \
 800158a:	2b06      	cmp	r3, #6
 800158c:	d009      	beq.n	80015a2 <ProcessCommands+0x38a>
						  ctrl->currentState == TURN_OFF || \
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == PRESSURIZE  ||   \
 8001594:	2b0b      	cmp	r3, #11
 8001596:	d004      	beq.n	80015a2 <ProcessCommands+0x38a>
						  ctrl->currentState == SAFETY \
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == TURN_OFF || \
 800159e:	2b05      	cmp	r3, #5
 80015a0:	d112      	bne.n	80015c8 <ProcessCommands+0x3b0>
						  ))
				{

							if (cmd_flag)
 80015a2:	4b77      	ldr	r3, [pc, #476]	; (8001780 <ProcessCommands+0x568>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d006      	beq.n	80015b8 <ProcessCommands+0x3a0>
				 	 	 	 	 {
				 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 80015aa:	4976      	ldr	r1, [pc, #472]	; (8001784 <ProcessCommands+0x56c>)
 80015ac:	4876      	ldr	r0, [pc, #472]	; (8001788 <ProcessCommands+0x570>)
 80015ae:	f7ff fc81 	bl	8000eb4 <UART_SendMessage>
				 	 	 		 	cmd_flag = FALSE;
 80015b2:	4b73      	ldr	r3, [pc, #460]	; (8001780 <ProcessCommands+0x568>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
				 	 	 	 	 }
					success = TRUE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
					// Clear data read flag
					RxTxFlags &= !RX_DATA_READY;
 80015bc:	4b73      	ldr	r3, [pc, #460]	; (800178c <ProcessCommands+0x574>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4b72      	ldr	r3, [pc, #456]	; (800178c <ProcessCommands+0x574>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	e2e2      	b.n	8001b8e <ProcessCommands+0x976>
				}
	else if((command == safety) && (
 80015c8:	4b6b      	ldr	r3, [pc, #428]	; (8001778 <ProcessCommands+0x560>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b71      	ldr	r3, [pc, #452]	; (8001794 <ProcessCommands+0x57c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d130      	bne.n	8001636 <ProcessCommands+0x41e>
						  ctrl->currentState == START_HANDLER|| \
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == safety) && (
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d018      	beq.n	8001610 <ProcessCommands+0x3f8>
						  ctrl->currentState == LOX_FILL	|| \
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == START_HANDLER|| \
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d013      	beq.n	8001610 <ProcessCommands+0x3f8>
						  ctrl->currentState == VALVE_CHECK|| \
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_FILL	|| \
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d00e      	beq.n	8001610 <ProcessCommands+0x3f8>
						  ctrl->currentState == PRESSURIZE  ||   \
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == VALVE_CHECK|| \
 80015f8:	2b06      	cmp	r3, #6
 80015fa:	d009      	beq.n	8001610 <ProcessCommands+0x3f8>
						  ctrl->currentState == TURN_OFF ||\
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == PRESSURIZE  ||   \
 8001602:	2b0b      	cmp	r3, #11
 8001604:	d004      	beq.n	8001610 <ProcessCommands+0x3f8>
						  ctrl->currentState == LOX_PRE_FILL \
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == TURN_OFF ||\
 800160c:	2b02      	cmp	r3, #2
 800160e:	d112      	bne.n	8001636 <ProcessCommands+0x41e>
						  ))
				{
						if (cmd_flag)
 8001610:	4b5b      	ldr	r3, [pc, #364]	; (8001780 <ProcessCommands+0x568>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <ProcessCommands+0x40e>
				 	 	 	 	 {
				 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 8001618:	495a      	ldr	r1, [pc, #360]	; (8001784 <ProcessCommands+0x56c>)
 800161a:	485b      	ldr	r0, [pc, #364]	; (8001788 <ProcessCommands+0x570>)
 800161c:	f7ff fc4a 	bl	8000eb4 <UART_SendMessage>
				 	 	 		 	cmd_flag = FALSE;
 8001620:	4b57      	ldr	r3, [pc, #348]	; (8001780 <ProcessCommands+0x568>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
				 	 	 	 	 }
					success = TRUE;
 8001626:	2301      	movs	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
					// Clear data read flag
					RxTxFlags &= !RX_DATA_READY;
 800162a:	4b58      	ldr	r3, [pc, #352]	; (800178c <ProcessCommands+0x574>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4b57      	ldr	r3, [pc, #348]	; (800178c <ProcessCommands+0x574>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	e2ab      	b.n	8001b8e <ProcessCommands+0x976>
				}
	else if((command == valve_check) && (
 8001636:	4b50      	ldr	r3, [pc, #320]	; (8001778 <ProcessCommands+0x560>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4b57      	ldr	r3, [pc, #348]	; (8001798 <ProcessCommands+0x580>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d130      	bne.n	80016a4 <ProcessCommands+0x48c>
						  ctrl->currentState == LOX_PRE_FILL|| \
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == valve_check) && (
 8001648:	2b02      	cmp	r3, #2
 800164a:	d018      	beq.n	800167e <ProcessCommands+0x466>
						  ctrl->currentState == LOX_CHILL	|| \
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_PRE_FILL|| \
 8001652:	2b04      	cmp	r3, #4
 8001654:	d013      	beq.n	800167e <ProcessCommands+0x466>
						  ctrl->currentState == LOX_FILL|| \
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_CHILL	|| \
 800165c:	2b03      	cmp	r3, #3
 800165e:	d00e      	beq.n	800167e <ProcessCommands+0x466>
						  ctrl->currentState == PRESSURIZE  ||   \
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_FILL|| \
 8001666:	2b06      	cmp	r3, #6
 8001668:	d009      	beq.n	800167e <ProcessCommands+0x466>
						  ctrl->currentState == TURN_OFF || \
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == PRESSURIZE  ||   \
 8001670:	2b0b      	cmp	r3, #11
 8001672:	d004      	beq.n	800167e <ProcessCommands+0x466>
						  ctrl->currentState == SAFETY \
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == TURN_OFF || \
 800167a:	2b05      	cmp	r3, #5
 800167c:	d112      	bne.n	80016a4 <ProcessCommands+0x48c>
						  ))
				{
						if (cmd_flag)
 800167e:	4b40      	ldr	r3, [pc, #256]	; (8001780 <ProcessCommands+0x568>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d006      	beq.n	8001694 <ProcessCommands+0x47c>
				 	 	 	 	 {
				 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 8001686:	493f      	ldr	r1, [pc, #252]	; (8001784 <ProcessCommands+0x56c>)
 8001688:	483f      	ldr	r0, [pc, #252]	; (8001788 <ProcessCommands+0x570>)
 800168a:	f7ff fc13 	bl	8000eb4 <UART_SendMessage>
				 	 	 		 	cmd_flag = FALSE;
 800168e:	4b3c      	ldr	r3, [pc, #240]	; (8001780 <ProcessCommands+0x568>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
				 	 	 	 	 }
					success = TRUE;
 8001694:	2301      	movs	r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
					// Clear data read flag
					RxTxFlags &= !RX_DATA_READY;
 8001698:	4b3c      	ldr	r3, [pc, #240]	; (800178c <ProcessCommands+0x574>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4b3b      	ldr	r3, [pc, #236]	; (800178c <ProcessCommands+0x574>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	e274      	b.n	8001b8e <ProcessCommands+0x976>

				}
	else if((command == lox_pre_fill) && (
 80016a4:	4b34      	ldr	r3, [pc, #208]	; (8001778 <ProcessCommands+0x560>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b3c      	ldr	r3, [pc, #240]	; (800179c <ProcessCommands+0x584>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d130      	bne.n	8001712 <ProcessCommands+0x4fa>
							  ctrl->currentState == LOX_CHILL || \
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == lox_pre_fill) && (
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	d018      	beq.n	80016ec <ProcessCommands+0x4d4>
							  ctrl->currentState == SAFETY|| \
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == LOX_CHILL || \
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	d013      	beq.n	80016ec <ProcessCommands+0x4d4>
							  ctrl->currentState == LOX_FILL	|| \
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == SAFETY|| \
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d00e      	beq.n	80016ec <ProcessCommands+0x4d4>
							  ctrl->currentState == VALVE_CHECK|| \
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == LOX_FILL	|| \
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d009      	beq.n	80016ec <ProcessCommands+0x4d4>
							  ctrl->currentState == PRESSURIZE  ||   \
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == VALVE_CHECK|| \
 80016de:	2b06      	cmp	r3, #6
 80016e0:	d004      	beq.n	80016ec <ProcessCommands+0x4d4>
							  ctrl->currentState == TURN_OFF ))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == PRESSURIZE  ||   \
 80016e8:	2b0b      	cmp	r3, #11
 80016ea:	d112      	bne.n	8001712 <ProcessCommands+0x4fa>
					{
							if (cmd_flag)
 80016ec:	4b24      	ldr	r3, [pc, #144]	; (8001780 <ProcessCommands+0x568>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d006      	beq.n	8001702 <ProcessCommands+0x4ea>
					 	 	 	 	 {
					 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 80016f4:	4923      	ldr	r1, [pc, #140]	; (8001784 <ProcessCommands+0x56c>)
 80016f6:	4824      	ldr	r0, [pc, #144]	; (8001788 <ProcessCommands+0x570>)
 80016f8:	f7ff fbdc 	bl	8000eb4 <UART_SendMessage>
					 	 	 		 	cmd_flag = FALSE;
 80016fc:	4b20      	ldr	r3, [pc, #128]	; (8001780 <ProcessCommands+0x568>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
					 	 	 	 	 }
						success = TRUE;
 8001702:	2301      	movs	r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
						// Clear data read flag
						RxTxFlags &= !RX_DATA_READY;
 8001706:	4b21      	ldr	r3, [pc, #132]	; (800178c <ProcessCommands+0x574>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <ProcessCommands+0x574>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e23d      	b.n	8001b8e <ProcessCommands+0x976>
					}
	else if((command == pressurizing) && (
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <ProcessCommands+0x560>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <ProcessCommands+0x588>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d142      	bne.n	80017a4 <ProcessCommands+0x58c>
								  ctrl->currentState == LOX_PRE_FILL || \
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == pressurizing) && (
 8001724:	2b02      	cmp	r3, #2
 8001726:	d013      	beq.n	8001750 <ProcessCommands+0x538>
								  ctrl->currentState == LOX_CHILL || \
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == LOX_PRE_FILL || \
 800172e:	2b04      	cmp	r3, #4
 8001730:	d00e      	beq.n	8001750 <ProcessCommands+0x538>
								  ctrl->currentState == LOX_FILL	|| \
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == LOX_CHILL || \
 8001738:	2b03      	cmp	r3, #3
 800173a:	d009      	beq.n	8001750 <ProcessCommands+0x538>
								  ctrl->currentState == VALVE_CHECK|| \
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == LOX_FILL	|| \
 8001742:	2b01      	cmp	r3, #1
 8001744:	d004      	beq.n	8001750 <ProcessCommands+0x538>
								  ctrl->currentState == TURN_OFF ))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == VALVE_CHECK|| \
 800174c:	2b0b      	cmp	r3, #11
 800174e:	d129      	bne.n	80017a4 <ProcessCommands+0x58c>
						{
								if (cmd_flag)
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <ProcessCommands+0x568>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <ProcessCommands+0x54e>
						 	 	 	 	 {
						 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 8001758:	490a      	ldr	r1, [pc, #40]	; (8001784 <ProcessCommands+0x56c>)
 800175a:	480b      	ldr	r0, [pc, #44]	; (8001788 <ProcessCommands+0x570>)
 800175c:	f7ff fbaa 	bl	8000eb4 <UART_SendMessage>
						 	 	 		 	cmd_flag = FALSE;
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <ProcessCommands+0x568>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
						 	 	 	 	 }
							success = TRUE;
 8001766:	2301      	movs	r3, #1
 8001768:	60fb      	str	r3, [r7, #12]
							// Clear data read flag
							RxTxFlags &= !RX_DATA_READY;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <ProcessCommands+0x574>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <ProcessCommands+0x574>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	e20b      	b.n	8001b8e <ProcessCommands+0x976>
 8001776:	bf00      	nop
 8001778:	200001b0 	.word	0x200001b0
 800177c:	20000010 	.word	0x20000010
 8001780:	20003120 	.word	0x20003120
 8001784:	080069d0 	.word	0x080069d0
 8001788:	20003320 	.word	0x20003320
 800178c:	2000018c 	.word	0x2000018c
 8001790:	20000014 	.word	0x20000014
 8001794:	20000020 	.word	0x20000020
 8001798:	2000000c 	.word	0x2000000c
 800179c:	20000018 	.word	0x20000018
 80017a0:	2000001c 	.word	0x2000001c
						}

	//Handle trying to transition to the same state
	else if ((command == lox_pre_fill && ctrl->currentState == LOX_PRE_FILL)||\
 80017a4:	4b84      	ldr	r3, [pc, #528]	; (80019b8 <ProcessCommands+0x7a0>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b84      	ldr	r3, [pc, #528]	; (80019bc <ProcessCommands+0x7a4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d104      	bne.n	80017ba <ProcessCommands+0x5a2>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d04c      	beq.n	8001854 <ProcessCommands+0x63c>
			 (command == lox_fill && ctrl->currentState == LOX_FILL)|| \
 80017ba:	4b7f      	ldr	r3, [pc, #508]	; (80019b8 <ProcessCommands+0x7a0>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b80      	ldr	r3, [pc, #512]	; (80019c0 <ProcessCommands+0x7a8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
	else if ((command == lox_pre_fill && ctrl->currentState == LOX_PRE_FILL)||\
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d104      	bne.n	80017d0 <ProcessCommands+0x5b8>
			 (command == lox_fill && ctrl->currentState == LOX_FILL)|| \
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d041      	beq.n	8001854 <ProcessCommands+0x63c>
			 (command == lox_chill && ctrl->currentState == LOX_CHILL)||\
 80017d0:	4b79      	ldr	r3, [pc, #484]	; (80019b8 <ProcessCommands+0x7a0>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b7b      	ldr	r3, [pc, #492]	; (80019c4 <ProcessCommands+0x7ac>)
 80017d6:	681b      	ldr	r3, [r3, #0]
			 (command == lox_fill && ctrl->currentState == LOX_FILL)|| \
 80017d8:	429a      	cmp	r2, r3
 80017da:	d104      	bne.n	80017e6 <ProcessCommands+0x5ce>
			 (command == lox_chill && ctrl->currentState == LOX_CHILL)||\
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d036      	beq.n	8001854 <ProcessCommands+0x63c>
			 (command == safety && ctrl->currentState == SAFETY)||\
 80017e6:	4b74      	ldr	r3, [pc, #464]	; (80019b8 <ProcessCommands+0x7a0>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b77      	ldr	r3, [pc, #476]	; (80019c8 <ProcessCommands+0x7b0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
			 (command == lox_chill && ctrl->currentState == LOX_CHILL)||\
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d104      	bne.n	80017fc <ProcessCommands+0x5e4>
			 (command == safety && ctrl->currentState == SAFETY)||\
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d02b      	beq.n	8001854 <ProcessCommands+0x63c>
			 (command == valve_check && ctrl->currentState == VALVE_CHECK)||\
 80017fc:	4b6e      	ldr	r3, [pc, #440]	; (80019b8 <ProcessCommands+0x7a0>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b72      	ldr	r3, [pc, #456]	; (80019cc <ProcessCommands+0x7b4>)
 8001802:	681b      	ldr	r3, [r3, #0]
			 (command == safety && ctrl->currentState == SAFETY)||\
 8001804:	429a      	cmp	r2, r3
 8001806:	d104      	bne.n	8001812 <ProcessCommands+0x5fa>
			 (command == valve_check && ctrl->currentState == VALVE_CHECK)||\
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800180e:	2b01      	cmp	r3, #1
 8001810:	d020      	beq.n	8001854 <ProcessCommands+0x63c>
			 (command == pressurizing && ctrl->currentState == PRESSURIZE) ||\
 8001812:	4b69      	ldr	r3, [pc, #420]	; (80019b8 <ProcessCommands+0x7a0>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4b6e      	ldr	r3, [pc, #440]	; (80019d0 <ProcessCommands+0x7b8>)
 8001818:	681b      	ldr	r3, [r3, #0]
			 (command == valve_check && ctrl->currentState == VALVE_CHECK)||\
 800181a:	429a      	cmp	r2, r3
 800181c:	d104      	bne.n	8001828 <ProcessCommands+0x610>
			 (command == pressurizing && ctrl->currentState == PRESSURIZE) ||\
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001824:	2b06      	cmp	r3, #6
 8001826:	d015      	beq.n	8001854 <ProcessCommands+0x63c>
		     (command == stop && ctrl->currentState == SAFETY)||\
 8001828:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <ProcessCommands+0x7a0>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b69      	ldr	r3, [pc, #420]	; (80019d4 <ProcessCommands+0x7bc>)
 800182e:	681b      	ldr	r3, [r3, #0]
			 (command == pressurizing && ctrl->currentState == PRESSURIZE) ||\
 8001830:	429a      	cmp	r2, r3
 8001832:	d104      	bne.n	800183e <ProcessCommands+0x626>
		     (command == stop && ctrl->currentState == SAFETY)||\
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800183a:	2b05      	cmp	r3, #5
 800183c:	d00a      	beq.n	8001854 <ProcessCommands+0x63c>
			 (command == start_handler && ctrl->currentState == START_HANDLER)){
 800183e:	4b5e      	ldr	r3, [pc, #376]	; (80019b8 <ProcessCommands+0x7a0>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b65      	ldr	r3, [pc, #404]	; (80019d8 <ProcessCommands+0x7c0>)
 8001844:	681b      	ldr	r3, [r3, #0]
		     (command == stop && ctrl->currentState == SAFETY)||\
 8001846:	429a      	cmp	r2, r3
 8001848:	d116      	bne.n	8001878 <ProcessCommands+0x660>
			 (command == start_handler && ctrl->currentState == START_HANDLER)){
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001850:	2b00      	cmp	r3, #0
 8001852:	d111      	bne.n	8001878 <ProcessCommands+0x660>

								if (cmd_flag && retransition)
 8001854:	4b61      	ldr	r3, [pc, #388]	; (80019dc <ProcessCommands+0x7c4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 8197 	beq.w	8001b8c <ProcessCommands+0x974>
 800185e:	4b60      	ldr	r3, [pc, #384]	; (80019e0 <ProcessCommands+0x7c8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8192 	beq.w	8001b8c <ProcessCommands+0x974>
						 	 	 	 	 {
						 	 	 		 	 UART_SendMessage(&huart2, " Currently in the state you are intending to transition to...\n");
 8001868:	495e      	ldr	r1, [pc, #376]	; (80019e4 <ProcessCommands+0x7cc>)
 800186a:	485f      	ldr	r0, [pc, #380]	; (80019e8 <ProcessCommands+0x7d0>)
 800186c:	f7ff fb22 	bl	8000eb4 <UART_SendMessage>
						 	 	 		 	cmd_flag = FALSE;
 8001870:	4b5a      	ldr	r3, [pc, #360]	; (80019dc <ProcessCommands+0x7c4>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
								if (cmd_flag && retransition)
 8001876:	e189      	b.n	8001b8c <ProcessCommands+0x974>
						 	 	 	 	 }
	}

	//Handle the case of an unknown command
	else if (!(command == power_off || stop || valve_check || lox_fill || lox_chill || pressurizing || lox_pre_fill || ignition ||start_handler \
 8001878:	4b4f      	ldr	r3, [pc, #316]	; (80019b8 <ProcessCommands+0x7a0>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b5b      	ldr	r3, [pc, #364]	; (80019ec <ProcessCommands+0x7d4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	f000 80e7 	beq.w	8001a54 <ProcessCommands+0x83c>
 8001886:	4b53      	ldr	r3, [pc, #332]	; (80019d4 <ProcessCommands+0x7bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f040 80e2 	bne.w	8001a54 <ProcessCommands+0x83c>
 8001890:	4b4e      	ldr	r3, [pc, #312]	; (80019cc <ProcessCommands+0x7b4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	f040 80dd 	bne.w	8001a54 <ProcessCommands+0x83c>
 800189a:	4b49      	ldr	r3, [pc, #292]	; (80019c0 <ProcessCommands+0x7a8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f040 80d8 	bne.w	8001a54 <ProcessCommands+0x83c>
 80018a4:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <ProcessCommands+0x7ac>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f040 80d3 	bne.w	8001a54 <ProcessCommands+0x83c>
 80018ae:	4b48      	ldr	r3, [pc, #288]	; (80019d0 <ProcessCommands+0x7b8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f040 80ce 	bne.w	8001a54 <ProcessCommands+0x83c>
 80018b8:	4b40      	ldr	r3, [pc, #256]	; (80019bc <ProcessCommands+0x7a4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f040 80c9 	bne.w	8001a54 <ProcessCommands+0x83c>
 80018c2:	4b4b      	ldr	r3, [pc, #300]	; (80019f0 <ProcessCommands+0x7d8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f040 80c4 	bne.w	8001a54 <ProcessCommands+0x83c>
 80018cc:	4b42      	ldr	r3, [pc, #264]	; (80019d8 <ProcessCommands+0x7c0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f040 80bf 	bne.w	8001a54 <ProcessCommands+0x83c>
			|| cycle_valves || cycle_voff || IGON || IGOFF || SOV1ON || SOV1OFF || SOV2ON || SOV2OFF || SOV3ON || SOV3OFF || SOV4ON || SOV4OFF || SOV5ON || SOV5OFF ||\
 80018d6:	4b47      	ldr	r3, [pc, #284]	; (80019f4 <ProcessCommands+0x7dc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f040 80ba 	bne.w	8001a54 <ProcessCommands+0x83c>
 80018e0:	4b45      	ldr	r3, [pc, #276]	; (80019f8 <ProcessCommands+0x7e0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f040 80b5 	bne.w	8001a54 <ProcessCommands+0x83c>
 80018ea:	4b44      	ldr	r3, [pc, #272]	; (80019fc <ProcessCommands+0x7e4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 80b0 	bne.w	8001a54 <ProcessCommands+0x83c>
 80018f4:	4b42      	ldr	r3, [pc, #264]	; (8001a00 <ProcessCommands+0x7e8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f040 80ab 	bne.w	8001a54 <ProcessCommands+0x83c>
 80018fe:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <ProcessCommands+0x7ec>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 80a6 	bne.w	8001a54 <ProcessCommands+0x83c>
 8001908:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <ProcessCommands+0x7f0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	f040 80a1 	bne.w	8001a54 <ProcessCommands+0x83c>
 8001912:	4b3e      	ldr	r3, [pc, #248]	; (8001a0c <ProcessCommands+0x7f4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 809c 	bne.w	8001a54 <ProcessCommands+0x83c>
 800191c:	4b3c      	ldr	r3, [pc, #240]	; (8001a10 <ProcessCommands+0x7f8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	f040 8097 	bne.w	8001a54 <ProcessCommands+0x83c>
 8001926:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <ProcessCommands+0x7fc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	f040 8092 	bne.w	8001a54 <ProcessCommands+0x83c>
 8001930:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <ProcessCommands+0x800>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	f040 808d 	bne.w	8001a54 <ProcessCommands+0x83c>
 800193a:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <ProcessCommands+0x804>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f040 8088 	bne.w	8001a54 <ProcessCommands+0x83c>
 8001944:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <ProcessCommands+0x808>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	f040 8083 	bne.w	8001a54 <ProcessCommands+0x83c>
 800194e:	4b35      	ldr	r3, [pc, #212]	; (8001a24 <ProcessCommands+0x80c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d17e      	bne.n	8001a54 <ProcessCommands+0x83c>
 8001956:	4b34      	ldr	r3, [pc, #208]	; (8001a28 <ProcessCommands+0x810>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d17a      	bne.n	8001a54 <ProcessCommands+0x83c>
 800195e:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <ProcessCommands+0x814>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d176      	bne.n	8001a54 <ProcessCommands+0x83c>
			 SOV6ON || SOV6OFF || SOV7ON || SOV7OFF || SOV8ON || SOV8OFF || SOV9ON || SOV9OFF )){
 8001966:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <ProcessCommands+0x818>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d172      	bne.n	8001a54 <ProcessCommands+0x83c>
 800196e:	4b31      	ldr	r3, [pc, #196]	; (8001a34 <ProcessCommands+0x81c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d16e      	bne.n	8001a54 <ProcessCommands+0x83c>
 8001976:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <ProcessCommands+0x820>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d16a      	bne.n	8001a54 <ProcessCommands+0x83c>
 800197e:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <ProcessCommands+0x824>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d166      	bne.n	8001a54 <ProcessCommands+0x83c>
 8001986:	4b2e      	ldr	r3, [pc, #184]	; (8001a40 <ProcessCommands+0x828>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d162      	bne.n	8001a54 <ProcessCommands+0x83c>
 800198e:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <ProcessCommands+0x82c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d15e      	bne.n	8001a54 <ProcessCommands+0x83c>
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <ProcessCommands+0x830>)
 8001998:	681b      	ldr	r3, [r3, #0]
	else if (!(command == power_off || stop || valve_check || lox_fill || lox_chill || pressurizing || lox_pre_fill || ignition ||start_handler \
 800199a:	2b00      	cmp	r3, #0
 800199c:	d15a      	bne.n	8001a54 <ProcessCommands+0x83c>

		if (inv_flag){
 800199e:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <ProcessCommands+0x834>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 80f3 	beq.w	8001b8e <ProcessCommands+0x976>
		UART_SendMessage(&huart2, " Invalid command !...\n");
 80019a8:	4929      	ldr	r1, [pc, #164]	; (8001a50 <ProcessCommands+0x838>)
 80019aa:	480f      	ldr	r0, [pc, #60]	; (80019e8 <ProcessCommands+0x7d0>)
 80019ac:	f7ff fa82 	bl	8000eb4 <UART_SendMessage>
		 inv_flag = FALSE;
 80019b0:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <ProcessCommands+0x834>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
		if (inv_flag){
 80019b6:	e0ea      	b.n	8001b8e <ProcessCommands+0x976>
 80019b8:	200001b0 	.word	0x200001b0
 80019bc:	20000018 	.word	0x20000018
 80019c0:	20000010 	.word	0x20000010
 80019c4:	20000014 	.word	0x20000014
 80019c8:	20000020 	.word	0x20000020
 80019cc:	2000000c 	.word	0x2000000c
 80019d0:	2000001c 	.word	0x2000001c
 80019d4:	20000008 	.word	0x20000008
 80019d8:	20000028 	.word	0x20000028
 80019dc:	20003120 	.word	0x20003120
 80019e0:	200032a4 	.word	0x200032a4
 80019e4:	08006a18 	.word	0x08006a18
 80019e8:	20003320 	.word	0x20003320
 80019ec:	20000004 	.word	0x20000004
 80019f0:	20000024 	.word	0x20000024
 80019f4:	20000034 	.word	0x20000034
 80019f8:	20000038 	.word	0x20000038
 80019fc:	2000003c 	.word	0x2000003c
 8001a00:	20000040 	.word	0x20000040
 8001a04:	20000044 	.word	0x20000044
 8001a08:	20000048 	.word	0x20000048
 8001a0c:	2000004c 	.word	0x2000004c
 8001a10:	20000050 	.word	0x20000050
 8001a14:	20000054 	.word	0x20000054
 8001a18:	20000058 	.word	0x20000058
 8001a1c:	2000005c 	.word	0x2000005c
 8001a20:	20000060 	.word	0x20000060
 8001a24:	20000064 	.word	0x20000064
 8001a28:	20000068 	.word	0x20000068
 8001a2c:	2000006c 	.word	0x2000006c
 8001a30:	20000070 	.word	0x20000070
 8001a34:	20000074 	.word	0x20000074
 8001a38:	20000078 	.word	0x20000078
 8001a3c:	2000007c 	.word	0x2000007c
 8001a40:	20000080 	.word	0x20000080
 8001a44:	20000084 	.word	0x20000084
 8001a48:	20000088 	.word	0x20000088
 8001a4c:	20003114 	.word	0x20003114
 8001a50:	08006a58 	.word	0x08006a58
		}

	}

	//Handle the case of commands outside valve check state
	else if (command == valve_status || command == cycle_valves ||command == cycle_voff ||command == IGON ||command ==IGOFF \
 8001a54:	4b50      	ldr	r3, [pc, #320]	; (8001b98 <ProcessCommands+0x980>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b50      	ldr	r3, [pc, #320]	; (8001b9c <ProcessCommands+0x984>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f000 8084 	beq.w	8001b6a <ProcessCommands+0x952>
 8001a62:	4b4d      	ldr	r3, [pc, #308]	; (8001b98 <ProcessCommands+0x980>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4b4e      	ldr	r3, [pc, #312]	; (8001ba0 <ProcessCommands+0x988>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d07d      	beq.n	8001b6a <ProcessCommands+0x952>
 8001a6e:	4b4a      	ldr	r3, [pc, #296]	; (8001b98 <ProcessCommands+0x980>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <ProcessCommands+0x98c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d077      	beq.n	8001b6a <ProcessCommands+0x952>
 8001a7a:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <ProcessCommands+0x980>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ba8 <ProcessCommands+0x990>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d071      	beq.n	8001b6a <ProcessCommands+0x952>
 8001a86:	4b44      	ldr	r3, [pc, #272]	; (8001b98 <ProcessCommands+0x980>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b48      	ldr	r3, [pc, #288]	; (8001bac <ProcessCommands+0x994>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d06b      	beq.n	8001b6a <ProcessCommands+0x952>
			||command == SOV1ON ||command == SOV1OFF ||command == SOV2ON ||command == SOV2OFF || command ==SOV3ON \
 8001a92:	4b41      	ldr	r3, [pc, #260]	; (8001b98 <ProcessCommands+0x980>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b46      	ldr	r3, [pc, #280]	; (8001bb0 <ProcessCommands+0x998>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d065      	beq.n	8001b6a <ProcessCommands+0x952>
 8001a9e:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <ProcessCommands+0x980>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b44      	ldr	r3, [pc, #272]	; (8001bb4 <ProcessCommands+0x99c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d05f      	beq.n	8001b6a <ProcessCommands+0x952>
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <ProcessCommands+0x980>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4b42      	ldr	r3, [pc, #264]	; (8001bb8 <ProcessCommands+0x9a0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d059      	beq.n	8001b6a <ProcessCommands+0x952>
 8001ab6:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <ProcessCommands+0x980>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b40      	ldr	r3, [pc, #256]	; (8001bbc <ProcessCommands+0x9a4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d053      	beq.n	8001b6a <ProcessCommands+0x952>
 8001ac2:	4b35      	ldr	r3, [pc, #212]	; (8001b98 <ProcessCommands+0x980>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4b3e      	ldr	r3, [pc, #248]	; (8001bc0 <ProcessCommands+0x9a8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d04d      	beq.n	8001b6a <ProcessCommands+0x952>
			||command ==SOV3OFF ||command == SOV4ON ||command == SOV4OFF ||command == SOV5ON ||command ==SOV5OFF \
 8001ace:	4b32      	ldr	r3, [pc, #200]	; (8001b98 <ProcessCommands+0x980>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	4b3c      	ldr	r3, [pc, #240]	; (8001bc4 <ProcessCommands+0x9ac>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d047      	beq.n	8001b6a <ProcessCommands+0x952>
 8001ada:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <ProcessCommands+0x980>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b3a      	ldr	r3, [pc, #232]	; (8001bc8 <ProcessCommands+0x9b0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d041      	beq.n	8001b6a <ProcessCommands+0x952>
 8001ae6:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <ProcessCommands+0x980>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <ProcessCommands+0x9b4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d03b      	beq.n	8001b6a <ProcessCommands+0x952>
 8001af2:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <ProcessCommands+0x980>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <ProcessCommands+0x9b8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d035      	beq.n	8001b6a <ProcessCommands+0x952>
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <ProcessCommands+0x980>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <ProcessCommands+0x9bc>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d02f      	beq.n	8001b6a <ProcessCommands+0x952>
			||command ==SOV6ON ||command == SOV6OFF ||command == SOV7ON ||command == SOV7OFF ||command == SOV8ON \
 8001b0a:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <ProcessCommands+0x980>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4b32      	ldr	r3, [pc, #200]	; (8001bd8 <ProcessCommands+0x9c0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d029      	beq.n	8001b6a <ProcessCommands+0x952>
 8001b16:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <ProcessCommands+0x980>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <ProcessCommands+0x9c4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d023      	beq.n	8001b6a <ProcessCommands+0x952>
 8001b22:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <ProcessCommands+0x980>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <ProcessCommands+0x9c8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d01d      	beq.n	8001b6a <ProcessCommands+0x952>
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <ProcessCommands+0x980>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <ProcessCommands+0x9cc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d017      	beq.n	8001b6a <ProcessCommands+0x952>
 8001b3a:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <ProcessCommands+0x980>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <ProcessCommands+0x9d0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d011      	beq.n	8001b6a <ProcessCommands+0x952>
			||command ==SOV8OFF || command ==SOV9ON || command ==SOV9OFF){
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <ProcessCommands+0x980>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4b28      	ldr	r3, [pc, #160]	; (8001bec <ProcessCommands+0x9d4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d00b      	beq.n	8001b6a <ProcessCommands+0x952>
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <ProcessCommands+0x980>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <ProcessCommands+0x9d8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d005      	beq.n	8001b6a <ProcessCommands+0x952>
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <ProcessCommands+0x980>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <ProcessCommands+0x9dc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d111      	bne.n	8001b8e <ProcessCommands+0x976>

			if (cmd_flag && !(ctrl->currentState == VALVE_CHECK)){
 8001b6a:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <ProcessCommands+0x9e0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00d      	beq.n	8001b8e <ProcessCommands+0x976>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d008      	beq.n	8001b8e <ProcessCommands+0x976>
				UART_SendMessage(&huart2, " This command is only valid under the valve check state...\n");
 8001b7c:	491f      	ldr	r1, [pc, #124]	; (8001bfc <ProcessCommands+0x9e4>)
 8001b7e:	4820      	ldr	r0, [pc, #128]	; (8001c00 <ProcessCommands+0x9e8>)
 8001b80:	f7ff f998 	bl	8000eb4 <UART_SendMessage>
				cmd_flag = FALSE;
 8001b84:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <ProcessCommands+0x9e0>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	e000      	b.n	8001b8e <ProcessCommands+0x976>
								if (cmd_flag && retransition)
 8001b8c:	bf00      	nop
			}

	}


		return success;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200001b0 	.word	0x200001b0
 8001b9c:	20000030 	.word	0x20000030
 8001ba0:	20000034 	.word	0x20000034
 8001ba4:	20000038 	.word	0x20000038
 8001ba8:	2000003c 	.word	0x2000003c
 8001bac:	20000040 	.word	0x20000040
 8001bb0:	20000044 	.word	0x20000044
 8001bb4:	20000048 	.word	0x20000048
 8001bb8:	2000004c 	.word	0x2000004c
 8001bbc:	20000050 	.word	0x20000050
 8001bc0:	20000054 	.word	0x20000054
 8001bc4:	20000058 	.word	0x20000058
 8001bc8:	2000005c 	.word	0x2000005c
 8001bcc:	20000060 	.word	0x20000060
 8001bd0:	20000064 	.word	0x20000064
 8001bd4:	20000068 	.word	0x20000068
 8001bd8:	2000006c 	.word	0x2000006c
 8001bdc:	20000070 	.word	0x20000070
 8001be0:	20000074 	.word	0x20000074
 8001be4:	20000078 	.word	0x20000078
 8001be8:	2000007c 	.word	0x2000007c
 8001bec:	20000080 	.word	0x20000080
 8001bf0:	20000084 	.word	0x20000084
 8001bf4:	20000088 	.word	0x20000088
 8001bf8:	20003120 	.word	0x20003120
 8001bfc:	08006a70 	.word	0x08006a70
 8001c00:	20003320 	.word	0x20003320

08001c04 <splitValues>:

//Function to separate sensor values
uint32_t splitValues(char *marionette_data, char separated[10][20])
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
	int n=0,j=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
	//Initialize the storage 2d array to 0
	for(int a=0; a<10;a ++){
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	e017      	b.n	8001c4c <splitValues+0x48>
		for(int b=0; b<20; b++){
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	e00e      	b.n	8001c40 <splitValues+0x3c>
			separated[a][b] = 0;
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	441a      	add	r2, r3
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4413      	add	r3, r2
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
		for(int b=0; b<20; b++){
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	2b13      	cmp	r3, #19
 8001c44:	dded      	ble.n	8001c22 <splitValues+0x1e>
	for(int a=0; a<10;a ++){
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2b09      	cmp	r3, #9
 8001c50:	dde4      	ble.n	8001c1c <splitValues+0x18>
		}
	}

	for(int i=0;TRUE;i++)// Process the whole marionette data packet
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
	{
		if(marionette_data[i]!=' '){
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b20      	cmp	r3, #32
 8001c60:	d010      	beq.n	8001c84 <splitValues+0x80>
			separated[n][j++]=marionette_data[i];
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	18d1      	adds	r1, r2, r3
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	461a      	mov	r2, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	441a      	add	r2, r3
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	1c58      	adds	r0, r3, #1
 8001c7c:	61b8      	str	r0, [r7, #24]
 8001c7e:	7809      	ldrb	r1, [r1, #0]
 8001c80:	54d1      	strb	r1, [r2, r3]
 8001c82:	e011      	b.n	8001ca8 <splitValues+0xa4>
		}
		else{// sensor value processed
			separated[n][j++]='\0';//insert NULL
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	461a      	mov	r2, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	441a      	add	r2, r3
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	1c59      	adds	r1, r3, #1
 8001c98:	61b9      	str	r1, [r7, #24]
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	54d1      	strb	r1, [r2, r3]
			n++; // increase by one for every sensor value
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	61fb      	str	r3, [r7, #28]
			j=0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]
		}
		if(marionette_data[i]=='\0')
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <splitValues+0xb8>
	for(int i=0;TRUE;i++)// Process the whole marionette data packet
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	60fb      	str	r3, [r7, #12]
		if(marionette_data[i]!=' '){
 8001cba:	e7cc      	b.n	8001c56 <splitValues+0x52>
		    break;
 8001cbc:	bf00      	nop
	}
	// n + 1 will give you how many items in the data you want to split when there is a space.
	return n+1;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3301      	adds	r3, #1
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	; 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <NominalValueCheck>:
// Function in charge of determining that the Sensor Values are Nominal.
void NominalValueCheck(struct StateVars *ctrl, char marionette[]){
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b0d0      	sub	sp, #320	; 0x140
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	6018      	str	r0, [r3, #0]
 8001cda:	463b      	mov	r3, r7
 8001cdc:	6019      	str	r1, [r3, #0]

		uint32_t amount, counter, sensor_value = 0; 	//number of hex and counter of valves.
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		char arr[10][20] = {0}; 						//to hold the separated sensor values.
 8001ce4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ce8:	22c8      	movs	r2, #200	; 0xc8
 8001cea:	2100      	movs	r1, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f004 fa3d 	bl	800616c <memset>
	    char notice[100] = {0}; 						//for the output message.
 8001cf2:	f107 0308 	add.w	r3, r7, #8
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	2364      	movs	r3, #100	; 0x64
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	f004 fa35 	bl	800616c <memset>

        //amount holds the amount of sensor values.
	    //this helps to know how many sensor values need to be processed.
		amount = splitValues(marionette,arr);
 8001d02:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001d06:	463b      	mov	r3, r7
 8001d08:	4611      	mov	r1, r2
 8001d0a:	6818      	ldr	r0, [r3, #0]
 8001d0c:	f7ff ff7a 	bl	8001c04 <splitValues>
 8001d10:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134

		//Check for valid marionette data packet key (3F99)
		if (hexadecimalTouint32(arr[0]) == marionette_cmd){
 8001d14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fa2b 	bl	8001174 <hexadecimalTouint32>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <NominalValueCheck+0xf8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d13c      	bne.n	8001da2 <NominalValueCheck+0xd2>
            //If the arr[0] contains the key then a sensor value will start at arr[1]
			for(int i=1; i<=amount; i++){
 8001d28:	2301      	movs	r3, #1
 8001d2a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001d2e:	e031      	b.n	8001d94 <NominalValueCheck+0xc4>
				sensor_value = hexadecimalTouint32(arr[i]);
 8001d30:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8001d34:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fa16 	bl	8001174 <hexadecimalTouint32>
 8001d48:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138

			// Check if the sensor value is in the nominal range
			if ( sensor_value <= 99 && sensor_value >= 0){
 8001d4c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001d50:	2b63      	cmp	r3, #99	; 0x63
 8001d52:	d91a      	bls.n	8001d8a <NominalValueCheck+0xba>
					// UART_SendMessage(&huart2,"%s\n\r",notice);
	            	// counter ++;
				}
			//If the sensor value is not in the nominal range.
	        else {
	        	init_time = HAL_GetTick();; //Get time.
 8001d54:	f002 f846 	bl	8003de4 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <NominalValueCheck+0xfc>)
 8001d5c:	601a      	str	r2, [r3, #0]

	        	//Issue a Warning Message.
	            sprintf(notice, "\nWARNING: Sensor %d value = %s is outside nominal range...",i, arr[i]);
 8001d5e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8001d62:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f107 0008 	add.w	r0, r7, #8
 8001d74:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001d78:	4915      	ldr	r1, [pc, #84]	; (8001dd0 <NominalValueCheck+0x100>)
 8001d7a:	f004 f9ff 	bl	800617c <siprintf>
	            // Ok send the warning message
	            UART_SendMessage(&huart2, notice);
 8001d7e:	f107 0308 	add.w	r3, r7, #8
 8001d82:	4619      	mov	r1, r3
 8001d84:	4813      	ldr	r0, [pc, #76]	; (8001dd4 <NominalValueCheck+0x104>)
 8001d86:	f7ff f895 	bl	8000eb4 <UART_SendMessage>
			for(int i=1; i<=amount; i++){
 8001d8a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001d94:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d98:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d2c7      	bcs.n	8001d30 <NominalValueCheck+0x60>
                // Ok send the warning message
                UART_SendMessage(&huart2, notice);

			}

}//end of NominalValueCheck()
 8001da0:	e00d      	b.n	8001dbe <NominalValueCheck+0xee>
                sprintf(notice, "\nWARNING: Marionette data packet key is not correct. The key used: %s..", arr[0]);
 8001da2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001da6:	f107 0308 	add.w	r3, r7, #8
 8001daa:	490b      	ldr	r1, [pc, #44]	; (8001dd8 <NominalValueCheck+0x108>)
 8001dac:	4618      	mov	r0, r3
 8001dae:	f004 f9e5 	bl	800617c <siprintf>
                UART_SendMessage(&huart2, notice);
 8001db2:	f107 0308 	add.w	r3, r7, #8
 8001db6:	4619      	mov	r1, r3
 8001db8:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <NominalValueCheck+0x104>)
 8001dba:	f7ff f87b 	bl	8000eb4 <UART_SendMessage>
}//end of NominalValueCheck()
 8001dbe:	bf00      	nop
 8001dc0:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	2000008c 	.word	0x2000008c
 8001dcc:	200033a0 	.word	0x200033a0
 8001dd0:	08006aac 	.word	0x08006aac
 8001dd4:	20003320 	.word	0x20003320
 8001dd8:	08006ae8 	.word	0x08006ae8

08001ddc <Get_State_Disagree_Error_Msg>:

// Function to Double check that we are transitioning to the correct state
void Get_State_Disagree_Error_Msg(char *errorMessage, enum StateName expectedState, \
			enum StateName passedState)
{
 8001ddc:	b5b0      	push	{r4, r5, r7, lr}
 8001dde:	b0a2      	sub	sp, #136	; 0x88
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	70fb      	strb	r3, [r7, #3]
 8001de8:	4613      	mov	r3, r2
 8001dea:	70bb      	strb	r3, [r7, #2]
	char state_disagree[VALVE_STATE_BUFFER_SIZE] = "ERROR: Expected State, Passed State Disagree. ";
 8001dec:	4b34      	ldr	r3, [pc, #208]	; (8001ec0 <Get_State_Disagree_Error_Msg+0xe4>)
 8001dee:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001df2:	461d      	mov	r5, r3
 8001df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e00:	c407      	stmia	r4!, {r0, r1, r2}
 8001e02:	8023      	strh	r3, [r4, #0]
 8001e04:	3402      	adds	r4, #2
 8001e06:	0c1b      	lsrs	r3, r3, #16
 8001e08:	7023      	strb	r3, [r4, #0]
 8001e0a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001e0e:	2231      	movs	r2, #49	; 0x31
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f004 f9aa 	bl	800616c <memset>
	char temp[32];
	strcat(state_disagree, "Expected: ");
 8001e18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe f9d7 	bl	80001d0 <strlen>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4925      	ldr	r1, [pc, #148]	; (8001ec4 <Get_State_Disagree_Error_Msg+0xe8>)
 8001e2e:	461a      	mov	r2, r3
 8001e30:	460b      	mov	r3, r1
 8001e32:	cb03      	ldmia	r3!, {r0, r1}
 8001e34:	6010      	str	r0, [r2, #0]
 8001e36:	6051      	str	r1, [r2, #4]
 8001e38:	8819      	ldrh	r1, [r3, #0]
 8001e3a:	789b      	ldrb	r3, [r3, #2]
 8001e3c:	8111      	strh	r1, [r2, #8]
 8001e3e:	7293      	strb	r3, [r2, #10]
	sprintf(temp, "%d", expectedState);
 8001e40:	78fa      	ldrb	r2, [r7, #3]
 8001e42:	f107 0308 	add.w	r3, r7, #8
 8001e46:	4920      	ldr	r1, [pc, #128]	; (8001ec8 <Get_State_Disagree_Error_Msg+0xec>)
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f004 f997 	bl	800617c <siprintf>
	strcat(state_disagree, temp);
 8001e4e:	f107 0208 	add.w	r2, r7, #8
 8001e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f004 f9af 	bl	80061bc <strcat>
	strcat(state_disagree,"Passed: ");
 8001e5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe f9b4 	bl	80001d0 <strlen>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e70:	4413      	add	r3, r2
 8001e72:	4916      	ldr	r1, [pc, #88]	; (8001ecc <Get_State_Disagree_Error_Msg+0xf0>)
 8001e74:	461a      	mov	r2, r3
 8001e76:	460b      	mov	r3, r1
 8001e78:	cb03      	ldmia	r3!, {r0, r1}
 8001e7a:	6010      	str	r0, [r2, #0]
 8001e7c:	6051      	str	r1, [r2, #4]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	7213      	strb	r3, [r2, #8]
	sprintf(temp, "%d", passedState);
 8001e82:	78ba      	ldrb	r2, [r7, #2]
 8001e84:	f107 0308 	add.w	r3, r7, #8
 8001e88:	490f      	ldr	r1, [pc, #60]	; (8001ec8 <Get_State_Disagree_Error_Msg+0xec>)
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f004 f976 	bl	800617c <siprintf>
	strcat(state_disagree, temp);
 8001e90:	f107 0208 	add.w	r2, r7, #8
 8001e94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f004 f98e 	bl	80061bc <strcat>
	memset(errorMessage, '\0', VALVE_STATE_BUFFER_SIZE);
 8001ea0:	2260      	movs	r2, #96	; 0x60
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f004 f961 	bl	800616c <memset>
	strcpy(errorMessage, state_disagree);
 8001eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eae:	4619      	mov	r1, r3
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f004 f992 	bl	80061da <strcpy>
}
 8001eb6:	bf00      	nop
 8001eb8:	3788      	adds	r7, #136	; 0x88
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	08006b4c 	.word	0x08006b4c
 8001ec4:	08006b30 	.word	0x08006b30
 8001ec8:	08006b3c 	.word	0x08006b3c
 8001ecc:	08006b40 	.word	0x08006b40

08001ed0 <Get_Invalid_State_Error_Msg>:

// Function to let the usr know which state transition is expected and which one is trying to transition being invalid.
void Get_Invalid_State_Error_Msg(char *errorMessage, enum StateName state, enum StateName lastState)
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b0a3      	sub	sp, #140	; 0x8c
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	70fb      	strb	r3, [r7, #3]
 8001edc:	4613      	mov	r3, r2
 8001ede:	70bb      	strb	r3, [r7, #2]
	char state_invalid[VALVE_STATE_BUFFER_SIZE] = "Invalid State: ";
 8001ee0:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <Get_Invalid_State_Error_Msg+0xac>)
 8001ee2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001ee6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ee8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001eec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ef0:	2250      	movs	r2, #80	; 0x50
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f004 f939 	bl	800616c <memset>
	char temp[32];
	sprintf(temp, " %d ",state);
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	f107 0308 	add.w	r3, r7, #8
 8001f00:	491f      	ldr	r1, [pc, #124]	; (8001f80 <Get_Invalid_State_Error_Msg+0xb0>)
 8001f02:	4618      	mov	r0, r3
 8001f04:	f004 f93a 	bl	800617c <siprintf>
	strcat(state_invalid, temp);
 8001f08:	f107 0208 	add.w	r2, r7, #8
 8001f0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f004 f952 	bl	80061bc <strcat>
	strcat(state_invalid, ", lastState: ");
 8001f18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe f957 	bl	80001d0 <strlen>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461a      	mov	r2, r3
 8001f26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4a15      	ldr	r2, [pc, #84]	; (8001f84 <Get_Invalid_State_Error_Msg+0xb4>)
 8001f2e:	461c      	mov	r4, r3
 8001f30:	4613      	mov	r3, r2
 8001f32:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001f34:	6020      	str	r0, [r4, #0]
 8001f36:	6061      	str	r1, [r4, #4]
 8001f38:	60a2      	str	r2, [r4, #8]
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	81a3      	strh	r3, [r4, #12]
	sprintf(temp, " %d \n\n", lastState);
 8001f3e:	78ba      	ldrb	r2, [r7, #2]
 8001f40:	f107 0308 	add.w	r3, r7, #8
 8001f44:	4910      	ldr	r1, [pc, #64]	; (8001f88 <Get_Invalid_State_Error_Msg+0xb8>)
 8001f46:	4618      	mov	r0, r3
 8001f48:	f004 f918 	bl	800617c <siprintf>
	strcat(state_invalid, temp);
 8001f4c:	f107 0208 	add.w	r2, r7, #8
 8001f50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f54:	4611      	mov	r1, r2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f004 f930 	bl	80061bc <strcat>
	memset(errorMessage, '\0', VALVE_STATE_BUFFER_SIZE);
 8001f5c:	2260      	movs	r2, #96	; 0x60
 8001f5e:	2100      	movs	r1, #0
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f004 f903 	bl	800616c <memset>
	strcpy(errorMessage, state_invalid);
 8001f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f004 f934 	bl	80061da <strcpy>
}
 8001f72:	bf00      	nop
 8001f74:	378c      	adds	r7, #140	; 0x8c
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd90      	pop	{r4, r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	08006bcc 	.word	0x08006bcc
 8001f80:	08006bac 	.word	0x08006bac
 8001f84:	08006bb4 	.word	0x08006bb4
 8001f88:	08006bc4 	.word	0x08006bc4

08001f8c <OxidizerStart>:
#include "messages.h"
#include "utilities.h"
#include "ring_buffer.h"


uint32_t OxidizerStart(struct StateVars *ctrl){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

	uint32_t success = FALSE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]

	ctrl->valveConfiguration = StateConfiguration();
 8001f98:	f000 fe2e 	bl	8002bf8 <StateConfiguration>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV1 	\
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2223      	movs	r2, #35	; 0x23
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV6);

	


	uint32_t TIMEOUT = 200;// .2 second time out
 8001fa8:	23c8      	movs	r3, #200	; 0xc8
 8001faa:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fde4 	bl	8002b80 <VerifyState>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d05a      	beq.n	8002074 <OxidizerStart+0xe8>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 fddb 	bl	8002b80 <VerifyState>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d051      	beq.n	8002074 <OxidizerStart+0xe8>
    {
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d03d      	beq.n	800205a <OxidizerStart+0xce>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  1  |   1   |  0  |   0  |   0  |   1  |   0   |  0  |  0  |  0

    		StateStatus(ctrl);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fd84 	bl	8002aec <StateStatus>
    		//nominal = NominalValueCheck(ctrl, Rx_Buffer);
    		ringBufferRead();
 8001fe4:	f000 f9f2 	bl	80023cc <ringBufferRead>

    		uint32_t now = HAL_GetTick();
 8001fe8:	f001 fefc 	bl	8003de4 <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d003      	beq.n	8002006 <OxidizerStart+0x7a>
    	    {
    			success = StateInitialize(ctrl);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 ff4c 	bl	8002e9c <StateInitialize>
 8002004:	6178      	str	r0, [r7, #20]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	429a      	cmp	r2, r3
 8002010:	bf0c      	ite	eq
 8002012:	2301      	moveq	r3, #1
 8002014:	2300      	movne	r3, #0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	617b      	str	r3, [r7, #20]



    		if(now - ctrl->timeStarted > TIMEOUT && success && nominal)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	429a      	cmp	r2, r3
 8002026:	d20a      	bcs.n	800203e <OxidizerStart+0xb2>
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <OxidizerStart+0xb2>
 800202e:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <OxidizerStart+0x114>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <OxidizerStart+0xb2>
    		{
        		ctrl->currentState = FIRING;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2209      	movs	r2, #9
 800203a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}

    		// Increment state counter
			ctrl->stateCounter++;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002050:	d11f      	bne.n	8002092 <OxidizerStart+0x106>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 8002058:	e01b      	b.n	8002092 <OxidizerStart+0x106>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, OXIDIZER_START, ctrl->currentState);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002060:	461a      	mov	r2, r3
 8002062:	2108      	movs	r1, #8
 8002064:	480f      	ldr	r0, [pc, #60]	; (80020a4 <OxidizerStart+0x118>)
 8002066:	f7ff feb9 	bl	8001ddc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2, Tx_Buffer);
 800206a:	490e      	ldr	r1, [pc, #56]	; (80020a4 <OxidizerStart+0x118>)
 800206c:	480e      	ldr	r0, [pc, #56]	; (80020a8 <OxidizerStart+0x11c>)
 800206e:	f7fe ff21 	bl	8000eb4 <UART_SendMessage>
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 8002072:	e00e      	b.n	8002092 <OxidizerStart+0x106>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002080:	461a      	mov	r2, r3
 8002082:	4808      	ldr	r0, [pc, #32]	; (80020a4 <OxidizerStart+0x118>)
 8002084:	f7ff ff24 	bl	8001ed0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8002088:	4906      	ldr	r1, [pc, #24]	; (80020a4 <OxidizerStart+0x118>)
 800208a:	4807      	ldr	r0, [pc, #28]	; (80020a8 <OxidizerStart+0x11c>)
 800208c:	f7fe ff12 	bl	8000eb4 <UART_SendMessage>
 8002090:	e000      	b.n	8002094 <OxidizerStart+0x108>
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 8002092:	bf00      	nop
    }
	return success;
 8002094:	697b      	ldr	r3, [r7, #20]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2000019c 	.word	0x2000019c
 80020a4:	200001bc 	.word	0x200001bc
 80020a8:	20003320 	.word	0x20003320

080020ac <Pressurize>:
#include "pressurize.h"
#include <messages.h>
#include "ring_buffer.h"


uint32_t Pressurize(struct StateVars *ctrl){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]

	ctrl->valveConfiguration = StateConfiguration();
 80020b8:	f000 fd9e 	bl	8002bf8 <StateConfiguration>
 80020bc:	4602      	mov	r2, r0
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget = ((uint16_t)SOV1 	\
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2203      	movs	r2, #3
 80020c6:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV2);

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 fd56 	bl	8002b80 <VerifyState>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d03e      	beq.n	8002158 <Pressurize+0xac>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 fd4d 	bl	8002b80 <VerifyState>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d035      	beq.n	8002158 <Pressurize+0xac>
    {
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020f2:	f003 0306 	and.w	r3, r3, #6
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d121      	bne.n	800213e <Pressurize+0x92>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8    SOV9   IG1
    		//|  1  |   1  |   0  |   0  |   0  |   0  |   0  |   0  |   0   |  0

    		StateStatus(ctrl);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fcf6 	bl	8002aec <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800210c:	429a      	cmp	r2, r3
 800210e:	d003      	beq.n	8002118 <Pressurize+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fec3 	bl	8002e9c <StateInitialize>
 8002116:	60f8      	str	r0, [r7, #12]
    	    }

    		ProcessCommands(ctrl);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff f87d 	bl	8001218 <ProcessCommands>

    		//Check the nominal value
			//NominalValueCheck(ctrl, Rx_Buffer);
    		ringBufferRead();
 800211e:	f000 f955 	bl	80023cc <ringBufferRead>

    		// Increment state counter
			ctrl->stateCounter++;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002134:	d11f      	bne.n	8002176 <Pressurize+0xca>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 800213c:	e01b      	b.n	8002176 <Pressurize+0xca>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, PRESSURIZE, ctrl->currentState);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002144:	461a      	mov	r2, r3
 8002146:	2106      	movs	r1, #6
 8002148:	480e      	ldr	r0, [pc, #56]	; (8002184 <Pressurize+0xd8>)
 800214a:	f7ff fe47 	bl	8001ddc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 800214e:	490d      	ldr	r1, [pc, #52]	; (8002184 <Pressurize+0xd8>)
 8002150:	480d      	ldr	r0, [pc, #52]	; (8002188 <Pressurize+0xdc>)
 8002152:	f7fe feaf 	bl	8000eb4 <UART_SendMessage>
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 8002156:	e00e      	b.n	8002176 <Pressurize+0xca>
    	}
    }else{
    	    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002164:	461a      	mov	r2, r3
 8002166:	4807      	ldr	r0, [pc, #28]	; (8002184 <Pressurize+0xd8>)
 8002168:	f7ff feb2 	bl	8001ed0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 800216c:	4905      	ldr	r1, [pc, #20]	; (8002184 <Pressurize+0xd8>)
 800216e:	4806      	ldr	r0, [pc, #24]	; (8002188 <Pressurize+0xdc>)
 8002170:	f7fe fea0 	bl	8000eb4 <UART_SendMessage>
 8002174:	e000      	b.n	8002178 <Pressurize+0xcc>
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 8002176:	bf00      	nop
    }
	return success;
 8002178:	68fb      	ldr	r3, [r7, #12]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200001bc 	.word	0x200001bc
 8002188:	20003320 	.word	0x20003320

0800218c <Purge>:
#include "messages.h"
#include "utilities.h"
#include "ring_buffer.h"


uint32_t Purge(struct StateVars *ctrl){
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]

	ctrl->valveConfiguration = StateConfiguration();
 8002198:	f000 fd2e 	bl	8002bf8 <StateConfiguration>
 800219c:	4602      	mov	r2, r0
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV3  \
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021a8:	631a      	str	r2, [r3, #48]	; 0x30
			  |(uint16_t)SOV9);


	uint32_t TIMEOUT = 3000; // 3 second time out
 80021aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80021ae:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fce2 	bl	8002b80 <VerifyState>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d05a      	beq.n	8002278 <Purge+0xec>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fcd9 	bl	8002b80 <VerifyState>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d051      	beq.n	8002278 <Purge+0xec>
    {
    	if((ctrl->currentState & PURGE) == PURGE){
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021da:	f003 030a 	and.w	r3, r3, #10
 80021de:	2b0a      	cmp	r3, #10
 80021e0:	d13d      	bne.n	800225e <Purge+0xd2>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  0  |   0  |   1  |   0  |   0  |   0  |   0  |   0  |  1  |  0

    		StateStatus(ctrl);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 fc82 	bl	8002aec <StateStatus>
    		//nominal = NominalValueCheck(ctrl, Rx_Buffer);
    		ringBufferRead();
 80021e8:	f000 f8f0 	bl	80023cc <ringBufferRead>


    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d003      	beq.n	8002204 <Purge+0x78>
    	    {
    			success = StateInitialize(ctrl);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 fe4d 	bl	8002e9c <StateInitialize>
 8002202:	6178      	str	r0, [r7, #20]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	429a      	cmp	r2, r3
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	617b      	str	r3, [r7, #20]


			uint32_t now = HAL_GetTick();
 8002218:	f001 fde4 	bl	8003de4 <HAL_GetTick>
 800221c:	60f8      	str	r0, [r7, #12]

    		if(now - ctrl->timeStarted > TIMEOUT && success && nominal)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	429a      	cmp	r2, r3
 800222a:	d20a      	bcs.n	8002242 <Purge+0xb6>
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <Purge+0xb6>
 8002232:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <Purge+0x118>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <Purge+0xb6>
    		{
        		ctrl->currentState= SAFETY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2205      	movs	r2, #5
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}

    		// Increment state counter
			ctrl->stateCounter++;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002254:	d11f      	bne.n	8002296 <Purge+0x10a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & PURGE) == PURGE){
 800225c:	e01b      	b.n	8002296 <Purge+0x10a>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, PURGE, ctrl->currentState);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002264:	461a      	mov	r2, r3
 8002266:	210a      	movs	r1, #10
 8002268:	480f      	ldr	r0, [pc, #60]	; (80022a8 <Purge+0x11c>)
 800226a:	f7ff fdb7 	bl	8001ddc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 800226e:	490e      	ldr	r1, [pc, #56]	; (80022a8 <Purge+0x11c>)
 8002270:	480e      	ldr	r0, [pc, #56]	; (80022ac <Purge+0x120>)
 8002272:	f7fe fe1f 	bl	8000eb4 <UART_SendMessage>
    	if((ctrl->currentState & PURGE) == PURGE){
 8002276:	e00e      	b.n	8002296 <Purge+0x10a>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002284:	461a      	mov	r2, r3
 8002286:	4808      	ldr	r0, [pc, #32]	; (80022a8 <Purge+0x11c>)
 8002288:	f7ff fe22 	bl	8001ed0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 800228c:	4906      	ldr	r1, [pc, #24]	; (80022a8 <Purge+0x11c>)
 800228e:	4807      	ldr	r0, [pc, #28]	; (80022ac <Purge+0x120>)
 8002290:	f7fe fe10 	bl	8000eb4 <UART_SendMessage>
 8002294:	e000      	b.n	8002298 <Purge+0x10c>
    	if((ctrl->currentState & PURGE) == PURGE){
 8002296:	bf00      	nop
    }
	return success;
 8002298:	697b      	ldr	r3, [r7, #20]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	2000019c 	.word	0x2000019c
 80022a8:	200001bc 	.word	0x200001bc
 80022ac:	20003320 	.word	0x20003320

080022b0 <ringBuffer>:
#include "ring_buffer.h" // include the header file
#include "messages.h"

void ringBuffer(char data []){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
//First store the marionette data in a ring buffer FIFO style
//If is the first time using the buffer Initialize it
	 if (circular==0) {
 80022b8:	4b3f      	ldr	r3, [pc, #252]	; (80023b8 <ringBuffer+0x108>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d11e      	bne.n	80022fe <ringBuffer+0x4e>

		 for (int i=0;i<120;i++){ // i signifys the y position
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	e015      	b.n	80022f2 <ringBuffer+0x42>
			 for (int j = 0; j<100; j ++){// j signifies the x position
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	e00c      	b.n	80022e6 <ringBuffer+0x36>

				 circularBuffer[i][j]= 0;
 80022cc:	4a3b      	ldr	r2, [pc, #236]	; (80023bc <ringBuffer+0x10c>)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2164      	movs	r1, #100	; 0x64
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	441a      	add	r2, r3
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4413      	add	r3, r2
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
			 for (int j = 0; j<100; j ++){// j signifies the x position
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	3301      	adds	r3, #1
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	2b63      	cmp	r3, #99	; 0x63
 80022ea:	ddef      	ble.n	80022cc <ringBuffer+0x1c>
		 for (int i=0;i<120;i++){ // i signifys the y position
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	3301      	adds	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b77      	cmp	r3, #119	; 0x77
 80022f6:	dde6      	ble.n	80022c6 <ringBuffer+0x16>
			 }
		 }
		 //The 2D array is initialized !
		 circular = 1;
 80022f8:	4b2f      	ldr	r3, [pc, #188]	; (80023b8 <ringBuffer+0x108>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]
	 }

	 //Circular Buffer FULL
	 if (bufferLength == SIZE_OF_BUFFER){ // Case where the circular buffer is full
 80022fe:	4b30      	ldr	r3, [pc, #192]	; (80023c0 <ringBuffer+0x110>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	4b30      	ldr	r3, [pc, #192]	; (80023c4 <ringBuffer+0x114>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d106      	bne.n	8002318 <ringBuffer+0x68>
		 bufferLength = 0;
 800230a:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <ringBuffer+0x110>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
		 writeIndex = 0;
 8002310:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <ringBuffer+0x118>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
		 writeIndex++;

		 if (writeIndex == 99){writeIndex = 0;}
	 }

}
 8002316:	e04a      	b.n	80023ae <ringBuffer+0xfe>
	 else if (bufferLength != SIZE_OF_BUFFER){
 8002318:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <ringBuffer+0x110>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <ringBuffer+0x114>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d044      	beq.n	80023ae <ringBuffer+0xfe>
		 for (int i = 0; i < 100; i++){
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	e02d      	b.n	8002386 <ringBuffer+0xd6>
			 circularBuffer[writeIndex][i] = data[i];
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	441a      	add	r2, r3
 8002330:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <ringBuffer+0x118>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	7810      	ldrb	r0, [r2, #0]
 8002336:	4a21      	ldr	r2, [pc, #132]	; (80023bc <ringBuffer+0x10c>)
 8002338:	2164      	movs	r1, #100	; 0x64
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	441a      	add	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4413      	add	r3, r2
 8002344:	4602      	mov	r2, r0
 8002346:	701a      	strb	r2, [r3, #0]
		 if (strlen(data) == i){
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7fd ff41 	bl	80001d0 <strlen>
 800234e:	4602      	mov	r2, r0
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	429a      	cmp	r2, r3
 8002354:	d114      	bne.n	8002380 <ringBuffer+0xd0>
			 for(int j = i+1; j <= 100; j++ ){
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	3301      	adds	r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	e00d      	b.n	800237a <ringBuffer+0xca>
				 circularBuffer[writeIndex][j] = 0;
 800235e:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <ringBuffer+0x118>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a16      	ldr	r2, [pc, #88]	; (80023bc <ringBuffer+0x10c>)
 8002364:	2164      	movs	r1, #100	; 0x64
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	441a      	add	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4413      	add	r3, r2
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
			 for(int j = i+1; j <= 100; j++ ){
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	3301      	adds	r3, #1
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b64      	cmp	r3, #100	; 0x64
 800237e:	ddee      	ble.n	800235e <ringBuffer+0xae>
		 for (int i = 0; i < 100; i++){
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	3301      	adds	r3, #1
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b63      	cmp	r3, #99	; 0x63
 800238a:	ddce      	ble.n	800232a <ringBuffer+0x7a>
		 bufferLength ++;
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <ringBuffer+0x110>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	3301      	adds	r3, #1
 8002392:	4a0b      	ldr	r2, [pc, #44]	; (80023c0 <ringBuffer+0x110>)
 8002394:	6013      	str	r3, [r2, #0]
		 writeIndex++;
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <ringBuffer+0x118>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	3301      	adds	r3, #1
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <ringBuffer+0x118>)
 800239e:	6013      	str	r3, [r2, #0]
		 if (writeIndex == 99){writeIndex = 0;}
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <ringBuffer+0x118>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b63      	cmp	r3, #99	; 0x63
 80023a6:	d102      	bne.n	80023ae <ringBuffer+0xfe>
 80023a8:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <ringBuffer+0x118>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20003110 	.word	0x20003110
 80023bc:	2000022c 	.word	0x2000022c
 80023c0:	20000190 	.word	0x20000190
 80023c4:	20000090 	.word	0x20000090
 80023c8:	20003124 	.word	0x20003124

080023cc <ringBufferRead>:
// One alternative to check the marionette values from withing the each states ( Create a function read and call it )
// Otherwise leave read inside the ring buffer function and handling the marionettes values will be done first!
void ringBufferRead(){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
	int counter = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
	    //check if the circular buffer is empty
	    // Initialize it to zero
	     if(bufferLength == 0 && initOnceFlag == TRUE){
 80023d6:	4b3c      	ldr	r3, [pc, #240]	; (80024c8 <ringBufferRead+0xfc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d123      	bne.n	8002426 <ringBufferRead+0x5a>
 80023de:	4b3b      	ldr	r3, [pc, #236]	; (80024cc <ringBufferRead+0x100>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d11f      	bne.n	8002426 <ringBufferRead+0x5a>

	    	 for (int i=0;i<120;i++){ // rows
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	e015      	b.n	8002418 <ringBufferRead+0x4c>
	    	 			 for (int j = 0; j<100; j ++){// columns
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	e00c      	b.n	800240c <ringBufferRead+0x40>

	    	 				 circularBuffer[i][j]= 0;
 80023f2:	4a37      	ldr	r2, [pc, #220]	; (80024d0 <ringBufferRead+0x104>)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	2164      	movs	r1, #100	; 0x64
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	441a      	add	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4413      	add	r3, r2
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
	    	 			 for (int j = 0; j<100; j ++){// columns
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	3301      	adds	r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b63      	cmp	r3, #99	; 0x63
 8002410:	ddef      	ble.n	80023f2 <ringBufferRead+0x26>
	    	 for (int i=0;i<120;i++){ // rows
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	3301      	adds	r3, #1
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b77      	cmp	r3, #119	; 0x77
 800241c:	dde6      	ble.n	80023ec <ringBufferRead+0x20>
	    	 			 }

	    	 	 }
	    	 initOnceFlag = FALSE;
 800241e:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <ringBufferRead+0x100>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
			 if (readIndex == 99){readIndex = 0;}

       //Then service data packets
       NominalValueCheck(NULL, marionette_data);
    }
}
 8002424:	e04c      	b.n	80024c0 <ringBufferRead+0xf4>
	     else if(bufferLength <= SIZE_OF_BUFFER && bufferLength != 0){ // && circular_buffer_readFlag){
 8002426:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <ringBufferRead+0xfc>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <ringBufferRead+0x108>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d846      	bhi.n	80024c0 <ringBufferRead+0xf4>
 8002432:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <ringBufferRead+0xfc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d042      	beq.n	80024c0 <ringBufferRead+0xf4>
			 for(int j = 0; circularBuffer[readIndex][j] != '\0'; j++){
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	e004      	b.n	800244a <ringBufferRead+0x7e>
				 counter = j;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	617b      	str	r3, [r7, #20]
			 for(int j = 0; circularBuffer[readIndex][j] != '\0'; j++){
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	3301      	adds	r3, #1
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <ringBufferRead+0x10c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a20      	ldr	r2, [pc, #128]	; (80024d0 <ringBufferRead+0x104>)
 8002450:	2164      	movs	r1, #100	; 0x64
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	441a      	add	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4413      	add	r3, r2
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1ee      	bne.n	8002440 <ringBufferRead+0x74>
			 for (int i = 0; i < counter+1; i++){
 8002462:	2300      	movs	r3, #0
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	e011      	b.n	800248c <ringBufferRead+0xc0>
				 marionette_data[i] = circularBuffer[readIndex][i];
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <ringBufferRead+0x10c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a18      	ldr	r2, [pc, #96]	; (80024d0 <ringBufferRead+0x104>)
 800246e:	2164      	movs	r1, #100	; 0x64
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	441a      	add	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	7819      	ldrb	r1, [r3, #0]
 800247c:	4a17      	ldr	r2, [pc, #92]	; (80024dc <ringBufferRead+0x110>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	460a      	mov	r2, r1
 8002484:	701a      	strb	r2, [r3, #0]
			 for (int i = 0; i < counter+1; i++){
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3301      	adds	r3, #1
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	3301      	adds	r3, #1
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	429a      	cmp	r2, r3
 8002494:	dbe8      	blt.n	8002468 <ringBufferRead+0x9c>
			 bufferLength --;
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <ringBufferRead+0xfc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3b01      	subs	r3, #1
 800249c:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <ringBufferRead+0xfc>)
 800249e:	6013      	str	r3, [r2, #0]
			 readIndex ++;
 80024a0:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <ringBufferRead+0x10c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3301      	adds	r3, #1
 80024a6:	4a0c      	ldr	r2, [pc, #48]	; (80024d8 <ringBufferRead+0x10c>)
 80024a8:	6013      	str	r3, [r2, #0]
			 if (readIndex == 99){readIndex = 0;}
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <ringBufferRead+0x10c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b63      	cmp	r3, #99	; 0x63
 80024b0:	d102      	bne.n	80024b8 <ringBufferRead+0xec>
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <ringBufferRead+0x10c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
       NominalValueCheck(NULL, marionette_data);
 80024b8:	4908      	ldr	r1, [pc, #32]	; (80024dc <ringBufferRead+0x110>)
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7ff fc08 	bl	8001cd0 <NominalValueCheck>
}
 80024c0:	bf00      	nop
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000190 	.word	0x20000190
 80024cc:	200001a4 	.word	0x200001a4
 80024d0:	2000022c 	.word	0x2000022c
 80024d4:	20000090 	.word	0x20000090
 80024d8:	200033c4 	.word	0x200033c4
 80024dc:	200032a8 	.word	0x200032a8

080024e0 <Safety>:
#include "safety.h"
#include <messages.h>
#include "ring_buffer.h"


uint32_t Safety(struct StateVars *ctrl) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

	uint32_t success = FALSE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]

	ctrl->valveConfiguration = StateConfiguration();
 80024ec:	f000 fb84 	bl	8002bf8 <StateConfiguration>
 80024f0:	4602      	mov	r2, r0
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = (uint16_t) SOV4 | (uint16_t) SOV8;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2288      	movs	r2, #136	; 0x88
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30

	if (VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState)) {
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fb3c 	bl	8002b80 <VerifyState>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d048      	beq.n	80025a0 <Safety+0xc0>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002514:	4618      	mov	r0, r3
 8002516:	f000 fb33 	bl	8002b80 <VerifyState>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d03f      	beq.n	80025a0 <Safety+0xc0>
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002526:	f003 0305 	and.w	r3, r3, #5
 800252a:	2b05      	cmp	r3, #5
 800252c:	d12b      	bne.n	8002586 <Safety+0xa6>
			// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
			// | 0  |   0  |   0  |   1  |   0  |   0  |    0|    1  |  0  |  0

			StateStatus(ctrl);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fadc 	bl	8002aec <StateStatus>
			// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002540:	429a      	cmp	r2, r3
 8002542:	d003      	beq.n	800254c <Safety+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fca9 	bl	8002e9c <StateInitialize>
 800254a:	60f8      	str	r0, [r7, #12]
    	    }

            ProcessCommands(ctrl);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7fe fe63 	bl	8001218 <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	429a      	cmp	r2, r3
 800255c:	bf0c      	ite	eq
 800255e:	2301      	moveq	r3, #1
 8002560:	2300      	movne	r3, #0
 8002562:	b2db      	uxtb	r3, r3
 8002564:	60fb      	str	r3, [r7, #12]

			//NominalValueCheck(ctrl, Rx_Buffer);
			ringBufferRead();
 8002566:	f7ff ff31 	bl	80023cc <ringBufferRead>

			ctrl->stateCounter++;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257c:	d11f      	bne.n	80025be <Safety+0xde>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 8002584:	e01b      	b.n	80025be <Safety+0xde>

		} else {
			// Log Expected State != Passed State
			Get_State_Disagree_Error_Msg(Tx_Buffer, SAFETY, ctrl->currentState);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800258c:	461a      	mov	r2, r3
 800258e:	2105      	movs	r1, #5
 8002590:	480e      	ldr	r0, [pc, #56]	; (80025cc <Safety+0xec>)
 8002592:	f7ff fc23 	bl	8001ddc <Get_State_Disagree_Error_Msg>
			UART_SendMessage(&huart2,Tx_Buffer);
 8002596:	490d      	ldr	r1, [pc, #52]	; (80025cc <Safety+0xec>)
 8002598:	480d      	ldr	r0, [pc, #52]	; (80025d0 <Safety+0xf0>)
 800259a:	f7fe fc8b 	bl	8000eb4 <UART_SendMessage>
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 800259e:	e00e      	b.n	80025be <Safety+0xde>
		}
	} else {
		// Log Invalid State
		Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025ac:	461a      	mov	r2, r3
 80025ae:	4807      	ldr	r0, [pc, #28]	; (80025cc <Safety+0xec>)
 80025b0:	f7ff fc8e 	bl	8001ed0 <Get_Invalid_State_Error_Msg>
		UART_SendMessage(&huart2,Tx_Buffer);
 80025b4:	4905      	ldr	r1, [pc, #20]	; (80025cc <Safety+0xec>)
 80025b6:	4806      	ldr	r0, [pc, #24]	; (80025d0 <Safety+0xf0>)
 80025b8:	f7fe fc7c 	bl	8000eb4 <UART_SendMessage>
 80025bc:	e000      	b.n	80025c0 <Safety+0xe0>
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 80025be:	bf00      	nop
	}
	return success;
 80025c0:	68fb      	ldr	r3, [r7, #12]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	200001bc 	.word	0x200001bc
 80025d0:	20003320 	.word	0x20003320

080025d4 <StartHandler>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include <start_handler.h>
#include <messages.h>
#include "ring_buffer.h"

uint32_t StartHandler(struct StateVars *ctrl){
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]

	uint32_t success = FALSE;
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 80025e0:	f000 fb0a 	bl	8002bf8 <StateConfiguration>
 80025e4:	4602      	mov	r2, r0
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	62da      	str	r2, [r3, #44]	; 0x2c

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState)){
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 fac5 	bl	8002b80 <VerifyState>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d036      	beq.n	800266a <StartHandler+0x96>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fabc 	bl	8002b80 <VerifyState>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d02d      	beq.n	800266a <StartHandler+0x96>




    		// If this is the first time, initialize state
     		if(ctrl->currentState != ctrl->lastState)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800261a:	429a      	cmp	r2, r3
 800261c:	d006      	beq.n	800262c <StartHandler+0x58>
    	    {
     			ctrl->valveTarget  = !((uint16_t)SOV1 \
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
     			    					|(uint16_t)SOV6 \
     			    					|(uint16_t)SOV7 \
     			    					|(uint16_t)SOV8 \
     			    					|(uint16_t)SOV9 \
     									|(uint16_t)IG1 );
    	    	success = StateInitialize(ctrl);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fc39 	bl	8002e9c <StateInitialize>
 800262a:	60f8      	str	r0, [r7, #12]
    	    }

    		ProcessCommands(ctrl);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7fe fdf3 	bl	8001218 <ProcessCommands>

			success &= (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	429a      	cmp	r2, r3
 800263c:	d101      	bne.n	8002642 <StartHandler+0x6e>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <StartHandler+0x70>
 8002642:	2300      	movs	r3, #0
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4013      	ands	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

			//nomVal = NominalValueCheck(ctrl);
			//if (nomVal)
			// Read from ring Buffer and check nominal value
			ringBufferRead();
 800264a:	f7ff febf 	bl	80023cc <ringBufferRead>

    		// Increment state counter
			ctrl->stateCounter++;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d112      	bne.n	8002688 <StartHandler+0xb4>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & START_HANDLER) == START_HANDLER){
 8002668:	e00e      	b.n	8002688 <StartHandler+0xb4>
    		Get_State_Disagree_Error_Msg(Tx_Buffer, START_HANDLER, ctrl->currentState);
    		UART_SendMessage(&huart2,Tx_Buffer);
    	}
    }else{
    	    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002676:	461a      	mov	r2, r3
 8002678:	4806      	ldr	r0, [pc, #24]	; (8002694 <StartHandler+0xc0>)
 800267a:	f7ff fc29 	bl	8001ed0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 800267e:	4905      	ldr	r1, [pc, #20]	; (8002694 <StartHandler+0xc0>)
 8002680:	4805      	ldr	r0, [pc, #20]	; (8002698 <StartHandler+0xc4>)
 8002682:	f7fe fc17 	bl	8000eb4 <UART_SendMessage>
 8002686:	e000      	b.n	800268a <StartHandler+0xb6>
    	if((ctrl->currentState & START_HANDLER) == START_HANDLER){
 8002688:	bf00      	nop
    }
	return success;
 800268a:	68fb      	ldr	r3, [r7, #12]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	200001bc 	.word	0x200001bc
 8002698:	20003320 	.word	0x20003320

0800269c <StateMachine>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)

#include "state_machine.h"

void StateMachine(uint32_t control, struct StateVars *ctrl)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
	while(TRUE == control)
 80026a6:	e087      	b.n	80027b8 <StateMachine+0x11c>
	{
		if(VerifyState(ctrl->currentState))
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fa66 	bl	8002b80 <VerifyState>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d06c      	beq.n	8002794 <StateMachine+0xf8>
		{
			switch(ctrl->currentState)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c0:	2b0c      	cmp	r3, #12
 80026c2:	d861      	bhi.n	8002788 <StateMachine+0xec>
 80026c4:	a201      	add	r2, pc, #4	; (adr r2, 80026cc <StateMachine+0x30>)
 80026c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ca:	bf00      	nop
 80026cc:	08002701 	.word	0x08002701
 80026d0:	0800270d 	.word	0x0800270d
 80026d4:	08002717 	.word	0x08002717
 80026d8:	08002723 	.word	0x08002723
 80026dc:	0800272f 	.word	0x0800272f
 80026e0:	08002739 	.word	0x08002739
 80026e4:	08002743 	.word	0x08002743
 80026e8:	0800274d 	.word	0x0800274d
 80026ec:	08002757 	.word	0x08002757
 80026f0:	08002761 	.word	0x08002761
 80026f4:	0800276b 	.word	0x0800276b
 80026f8:	08002775 	.word	0x08002775
 80026fc:	0800277f 	.word	0x0800277f
			{
			    case START_HANDLER:
			    	control = StartHandler(ctrl);
 8002700:	6838      	ldr	r0, [r7, #0]
 8002702:	f7ff ff67 	bl	80025d4 <StartHandler>
 8002706:	4603      	mov	r3, r0
 8002708:	607b      	str	r3, [r7, #4]
			    	break;
 800270a:	e055      	b.n	80027b8 <StateMachine+0x11c>
				case VALVE_CHECK:
					control = ValveCheck(ctrl);
 800270c:	6838      	ldr	r0, [r7, #0]
 800270e:	f001 fa4b 	bl	8003ba8 <ValveCheck>
 8002712:	6078      	str	r0, [r7, #4]
					break;
 8002714:	e050      	b.n	80027b8 <StateMachine+0x11c>
				case LOX_PRE_FILL:
					control = LoxPreFill(ctrl);
 8002716:	6838      	ldr	r0, [r7, #0]
 8002718:	f7fe fb06 	bl	8000d28 <LoxPreFill>
 800271c:	4603      	mov	r3, r0
 800271e:	607b      	str	r3, [r7, #4]
					break;
 8002720:	e04a      	b.n	80027b8 <StateMachine+0x11c>
				case LOX_FILL:
					control = LoxFill(ctrl);
 8002722:	6838      	ldr	r0, [r7, #0]
 8002724:	f7fe fa86 	bl	8000c34 <LoxFill>
 8002728:	4603      	mov	r3, r0
 800272a:	607b      	str	r3, [r7, #4]
					break;
 800272c:	e044      	b.n	80027b8 <StateMachine+0x11c>
				case LOX_CHILL:
					control = LoxChill(ctrl);
 800272e:	6838      	ldr	r0, [r7, #0]
 8002730:	f7fe fa06 	bl	8000b40 <LoxChill>
 8002734:	6078      	str	r0, [r7, #4]
				    break;
 8002736:	e03f      	b.n	80027b8 <StateMachine+0x11c>
			    case SAFETY:
					control = Safety(ctrl);
 8002738:	6838      	ldr	r0, [r7, #0]
 800273a:	f7ff fed1 	bl	80024e0 <Safety>
 800273e:	6078      	str	r0, [r7, #4]
					break;
 8002740:	e03a      	b.n	80027b8 <StateMachine+0x11c>
				case PRESSURIZE:
					control = Pressurize(ctrl);
 8002742:	6838      	ldr	r0, [r7, #0]
 8002744:	f7ff fcb2 	bl	80020ac <Pressurize>
 8002748:	6078      	str	r0, [r7, #4]
					break;
 800274a:	e035      	b.n	80027b8 <StateMachine+0x11c>
				case IGNITION:
					control = Ignition(ctrl);
 800274c:	6838      	ldr	r0, [r7, #0]
 800274e:	f7fe f835 	bl	80007bc <Ignition>
 8002752:	6078      	str	r0, [r7, #4]
					break;
 8002754:	e030      	b.n	80027b8 <StateMachine+0x11c>
				case OXIDIZER_START:
					control = OxidizerStart(ctrl);
 8002756:	6838      	ldr	r0, [r7, #0]
 8002758:	f7ff fc18 	bl	8001f8c <OxidizerStart>
 800275c:	6078      	str	r0, [r7, #4]
					break;
 800275e:	e02b      	b.n	80027b8 <StateMachine+0x11c>
				case FIRING:
					control = Firing(ctrl);
 8002760:	6838      	ldr	r0, [r7, #0]
 8002762:	f7fd ff9b 	bl	800069c <Firing>
 8002766:	6078      	str	r0, [r7, #4]
					break;
 8002768:	e026      	b.n	80027b8 <StateMachine+0x11c>
				case PURGE:
					control = Purge(ctrl);
 800276a:	6838      	ldr	r0, [r7, #0]
 800276c:	f7ff fd0e 	bl	800218c <Purge>
 8002770:	6078      	str	r0, [r7, #4]
					break;
 8002772:	e021      	b.n	80027b8 <StateMachine+0x11c>
				case TURN_OFF:
					control = TurnOff(ctrl);
 8002774:	6838      	ldr	r0, [r7, #0]
 8002776:	f000 f941 	bl	80029fc <TurnOff>
 800277a:	6078      	str	r0, [r7, #4]
					break;
 800277c:	e01c      	b.n	80027b8 <StateMachine+0x11c>
				case AUTOMATIC_SHUTDOWN:
					control = AutomaticShutdown(ctrl);
 800277e:	6838      	ldr	r0, [r7, #0]
 8002780:	f7fd fefe 	bl	8000580 <AutomaticShutdown>
 8002784:	6078      	str	r0, [r7, #4]
					break;
 8002786:	e017      	b.n	80027b8 <StateMachine+0x11c>


				default:
					ctrl->currentState = AUTOMATIC_SHUTDOWN;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	220c      	movs	r2, #12
 800278c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
					break;
 8002790:	bf00      	nop
 8002792:	e011      	b.n	80027b8 <StateMachine+0x11c>
			}
		}else
		{
			ctrl->currentState = AUTOMATIC_SHUTDOWN;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	220c      	movs	r2, #12
 8002798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	    	// Log Invalid State
	    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027a8:	461a      	mov	r2, r3
 80027aa:	4807      	ldr	r0, [pc, #28]	; (80027c8 <StateMachine+0x12c>)
 80027ac:	f7ff fb90 	bl	8001ed0 <Get_Invalid_State_Error_Msg>
	    	UART_SendMessage(&huart2,Tx_Buffer);
 80027b0:	4905      	ldr	r1, [pc, #20]	; (80027c8 <StateMachine+0x12c>)
 80027b2:	4806      	ldr	r0, [pc, #24]	; (80027cc <StateMachine+0x130>)
 80027b4:	f7fe fb7e 	bl	8000eb4 <UART_SendMessage>
	while(TRUE == control)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	f43f af74 	beq.w	80026a8 <StateMachine+0xc>
			//ERROR HANDLE
		}
		// WD check
	}
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200001bc 	.word	0x200001bc
 80027cc:	20003320 	.word	0x20003320

080027d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <HAL_MspInit+0x44>)
 80027d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027da:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <HAL_MspInit+0x44>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6613      	str	r3, [r2, #96]	; 0x60
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <HAL_MspInit+0x44>)
 80027e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	607b      	str	r3, [r7, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <HAL_MspInit+0x44>)
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f2:	4a08      	ldr	r2, [pc, #32]	; (8002814 <HAL_MspInit+0x44>)
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f8:	6593      	str	r3, [r2, #88]	; 0x58
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_MspInit+0x44>)
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000

08002818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	; 0x28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1b      	ldr	r2, [pc, #108]	; (80028a4 <HAL_UART_MspInit+0x8c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d130      	bne.n	800289c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800283a:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <HAL_UART_MspInit+0x90>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	4a1a      	ldr	r2, [pc, #104]	; (80028a8 <HAL_UART_MspInit+0x90>)
 8002840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002844:	6593      	str	r3, [r2, #88]	; 0x58
 8002846:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <HAL_UART_MspInit+0x90>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <HAL_UART_MspInit+0x90>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	4a14      	ldr	r2, [pc, #80]	; (80028a8 <HAL_UART_MspInit+0x90>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <HAL_UART_MspInit+0x90>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800286a:	230c      	movs	r3, #12
 800286c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002876:	2303      	movs	r3, #3
 8002878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800287a:	2307      	movs	r3, #7
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287e:	f107 0314 	add.w	r3, r7, #20
 8002882:	4619      	mov	r1, r3
 8002884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002888:	f001 fc2c 	bl	80040e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	2100      	movs	r1, #0
 8002890:	2026      	movs	r0, #38	; 0x26
 8002892:	f001 fbb0 	bl	8003ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002896:	2026      	movs	r0, #38	; 0x26
 8002898:	f001 fbc9 	bl	800402e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800289c:	bf00      	nop
 800289e:	3728      	adds	r7, #40	; 0x28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40004400 	.word	0x40004400
 80028a8:	40021000 	.word	0x40021000

080028ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028b0:	e7fe      	b.n	80028b0 <NMI_Handler+0x4>

080028b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b6:	e7fe      	b.n	80028b6 <HardFault_Handler+0x4>

080028b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028bc:	e7fe      	b.n	80028bc <MemManage_Handler+0x4>

080028be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028c2:	e7fe      	b.n	80028c2 <BusFault_Handler+0x4>

080028c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c8:	e7fe      	b.n	80028c8 <UsageFault_Handler+0x4>

080028ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028f8:	f001 fa60 	bl	8003dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}

08002900 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002904:	4802      	ldr	r0, [pc, #8]	; (8002910 <USART2_IRQHandler+0x10>)
 8002906:	f002 fdbb 	bl	8005480 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20003320 	.word	0x20003320

08002914 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002918:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800291c:	f001 fdba 	bl	8004494 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	bd80      	pop	{r7, pc}

08002924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800292c:	4a14      	ldr	r2, [pc, #80]	; (8002980 <_sbrk+0x5c>)
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <_sbrk+0x60>)
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <_sbrk+0x64>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <_sbrk+0x64>)
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <_sbrk+0x68>)
 8002944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <_sbrk+0x64>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	429a      	cmp	r2, r3
 8002952:	d207      	bcs.n	8002964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002954:	f003 fbe0 	bl	8006118 <__errno>
 8002958:	4602      	mov	r2, r0
 800295a:	230c      	movs	r3, #12
 800295c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800295e:	f04f 33ff 	mov.w	r3, #4294967295
 8002962:	e009      	b.n	8002978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <_sbrk+0x64>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800296a:	4b07      	ldr	r3, [pc, #28]	; (8002988 <_sbrk+0x64>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	4a05      	ldr	r2, [pc, #20]	; (8002988 <_sbrk+0x64>)
 8002974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002976:	68fb      	ldr	r3, [r7, #12]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20018000 	.word	0x20018000
 8002984:	00000400 	.word	0x00000400
 8002988:	2000017c 	.word	0x2000017c
 800298c:	200033f0 	.word	0x200033f0

08002990 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002994:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <SystemInit+0x64>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	4a16      	ldr	r2, [pc, #88]	; (80029f4 <SystemInit+0x64>)
 800299c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <SystemInit+0x68>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <SystemInit+0x68>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <SystemInit+0x68>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <SystemInit+0x68>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <SystemInit+0x68>)
 80029bc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80029c0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80029c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <SystemInit+0x68>)
 80029c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029cc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <SystemInit+0x68>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <SystemInit+0x68>)
 80029d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <SystemInit+0x68>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <SystemInit+0x64>)
 80029e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029e6:	609a      	str	r2, [r3, #8]
#endif
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	e000ed00 	.word	0xe000ed00
 80029f8:	40021000 	.word	0x40021000

080029fc <TurnOff>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include <turnoff.h>
#include "ring_buffer.h"


uint32_t TurnOff(struct StateVars *ctrl){
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]

	ctrl->valveConfiguration = StateConfiguration();
 8002a08:	f000 f8f6 	bl	8002bf8 <StateConfiguration>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV4  \
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2288      	movs	r2, #136	; 0x88
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
				  |(uint16_t)SOV8);

     //Todo Do we want to set all the valves OFF instead ????

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 f8ae 	bl	8002b80 <VerifyState>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d046      	beq.n	8002ab8 <TurnOff+0xbc>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 f8a5 	bl	8002b80 <VerifyState>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d03d      	beq.n	8002ab8 <TurnOff+0xbc>
    {
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a42:	f003 030b 	and.w	r3, r3, #11
 8002a46:	2b0b      	cmp	r3, #11
 8002a48:	d129      	bne.n	8002a9e <TurnOff+0xa2>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8   SOV9  IG1
    		//|  0  |   0  |   0  |   1  |   0  |   0  |   0  |   1  |   0  | 0

    		StateStatus(ctrl);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f84e 	bl	8002aec <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d003      	beq.n	8002a68 <TurnOff+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fa1b 	bl	8002e9c <StateInitialize>
 8002a66:	60f8      	str	r0, [r7, #12]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	429a      	cmp	r2, r3
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	60fb      	str	r3, [r7, #12]

			//STOP ANY PROCEDURES
			ctrl->isStateMachineRunning = FALSE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	629a      	str	r2, [r3, #40]	; 0x28

    		// Increment state counter
			ctrl->stateCounter++;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d11f      	bne.n	8002ad6 <TurnOff+0xda>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 8002a9c:	e01b      	b.n	8002ad6 <TurnOff+0xda>

    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, TURN_OFF, ctrl->currentState);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	210b      	movs	r1, #11
 8002aa8:	480e      	ldr	r0, [pc, #56]	; (8002ae4 <TurnOff+0xe8>)
 8002aaa:	f7ff f997 	bl	8001ddc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8002aae:	490d      	ldr	r1, [pc, #52]	; (8002ae4 <TurnOff+0xe8>)
 8002ab0:	480d      	ldr	r0, [pc, #52]	; (8002ae8 <TurnOff+0xec>)
 8002ab2:	f7fe f9ff 	bl	8000eb4 <UART_SendMessage>
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 8002ab6:	e00e      	b.n	8002ad6 <TurnOff+0xda>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4807      	ldr	r0, [pc, #28]	; (8002ae4 <TurnOff+0xe8>)
 8002ac8:	f7ff fa02 	bl	8001ed0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 8002acc:	4905      	ldr	r1, [pc, #20]	; (8002ae4 <TurnOff+0xe8>)
 8002ace:	4806      	ldr	r0, [pc, #24]	; (8002ae8 <TurnOff+0xec>)
 8002ad0:	f7fe f9f0 	bl	8000eb4 <UART_SendMessage>
 8002ad4:	e000      	b.n	8002ad8 <TurnOff+0xdc>
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 8002ad6:	bf00      	nop
    }
 return 0; // end the program
 8002ad8:	2300      	movs	r3, #0

}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	200001bc 	.word	0x200001bc
 8002ae8:	20003320 	.word	0x20003320

08002aec <StateStatus>:
#include "utilities.h"
#include "messages.h"
#include "valve_check.h"

//Function that sends the current state status to the user
void StateStatus(struct StateVars *ctrl){
 8002aec:	b5b0      	push	{r4, r5, r7, lr}
 8002aee:	b090      	sub	sp, #64	; 0x40
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

     int state = ctrl->currentState;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002afa:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char* naming[] = { [0] = "State : Start Handler\n\r", [1] = "State : Valve Check\n\r" ,	\
 8002afc:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <StateStatus+0x84>)
 8002afe:	f107 0408 	add.w	r4, r7, #8
 8002b02:	461d      	mov	r5, r3
 8002b04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b10:	682b      	ldr	r3, [r5, #0]
 8002b12:	6023      	str	r3, [r4, #0]
		[2] = "State : Lox Pre Fill\n\r", [3] = "State : Lox Fill\n\r", [4] = "State : Lox Chill\n\r",	\
		[5] = "State : Safety\n\r", [6] = "State : Pressurize\n\r", [7] = "State : Ignition\n\r",	[8] = "\nState : Oxidizer Start\n\r",\
		[9] = "State : Firing\n\r", [10] = "State : Purge\n\r",	[11] = "State : Turn Off\n\r", [12] = "State : Automatic Shutdown\n\r"};

		if (ctrl->lastState  != ctrl->currentState){
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d00e      	beq.n	8002b42 <StateStatus+0x56>
			UART_SendMessage(&huart2, naming[state]);
 8002b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002b32:	4619      	mov	r1, r3
 8002b34:	480f      	ldr	r0, [pc, #60]	; (8002b74 <StateStatus+0x88>)
 8002b36:	f7fe f9bd 	bl	8000eb4 <UART_SendMessage>
			// Flag for the transitioning to the same state
			retransition = FALSE;
 8002b3a:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <StateStatus+0x8c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
		{
			UART_SendMessage(&huart2, naming[state]);
			status = FALSE;

		}
}// end of function
 8002b40:	e011      	b.n	8002b66 <StateStatus+0x7a>
		else if(status)
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <StateStatus+0x90>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <StateStatus+0x7a>
			UART_SendMessage(&huart2, naming[state]);
 8002b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002b52:	4413      	add	r3, r2
 8002b54:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4806      	ldr	r0, [pc, #24]	; (8002b74 <StateStatus+0x88>)
 8002b5c:	f7fe f9aa 	bl	8000eb4 <UART_SendMessage>
			status = FALSE;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <StateStatus+0x90>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
}// end of function
 8002b66:	bf00      	nop
 8002b68:	3740      	adds	r7, #64	; 0x40
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	08006d50 	.word	0x08006d50
 8002b74:	20003320 	.word	0x20003320
 8002b78:	200032a4 	.word	0x200032a4
 8002b7c:	200033d0 	.word	0x200033d0

08002b80 <VerifyState>:
 *  	success <uint32_t>: TRUE | FALSE | 1 | 0
 *
 *  Notes:
 */
uint32_t VerifyState(int state)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

	uint32_t success = FALSE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
    if(state <= TURN_OFF && state >= START_HANDLER)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b0b      	cmp	r3, #11
 8002b90:	dc27      	bgt.n	8002be2 <VerifyState+0x62>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	db24      	blt.n	8002be2 <VerifyState+0x62>
    {
    	success = TRUE;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
		switch(state)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b0c      	cmp	r3, #12
 8002ba0:	d81c      	bhi.n	8002bdc <VerifyState+0x5c>
 8002ba2:	a201      	add	r2, pc, #4	; (adr r2, 8002ba8 <VerifyState+0x28>)
 8002ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba8:	08002be7 	.word	0x08002be7
 8002bac:	08002be7 	.word	0x08002be7
 8002bb0:	08002be7 	.word	0x08002be7
 8002bb4:	08002be7 	.word	0x08002be7
 8002bb8:	08002be7 	.word	0x08002be7
 8002bbc:	08002be7 	.word	0x08002be7
 8002bc0:	08002be7 	.word	0x08002be7
 8002bc4:	08002be7 	.word	0x08002be7
 8002bc8:	08002be7 	.word	0x08002be7
 8002bcc:	08002be7 	.word	0x08002be7
 8002bd0:	08002be7 	.word	0x08002be7
 8002bd4:	08002be7 	.word	0x08002be7
 8002bd8:	08002be7 	.word	0x08002be7
				break;
			case TURN_OFF:
				break;

			default:
				success = FALSE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
				break;
 8002be0:	e002      	b.n	8002be8 <VerifyState+0x68>
		}
    }
 8002be2:	bf00      	nop
 8002be4:	e000      	b.n	8002be8 <VerifyState+0x68>
				break;
 8002be6:	bf00      	nop
	return success;
 8002be8:	68fb      	ldr	r3, [r7, #12]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop

08002bf8 <StateConfiguration>:

// EX- if vc = 0001 then 0001 | 0010 , vc = 0011


uint32_t StateConfiguration()
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
	uint32_t vc = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	607b      	str	r3, [r7, #4]
	//SOV1 - Fuel Pressure (PA_11)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin) << 0);
 8002c02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c0a:	f001 fc13 	bl	8004434 <HAL_GPIO_ReadPin>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	461a      	mov	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	607b      	str	r3, [r7, #4]

	//SOV2 - Lox Pressure (PA_12)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin) << 1);
 8002c18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c20:	f001 fc08 	bl	8004434 <HAL_GPIO_ReadPin>
 8002c24:	4603      	mov	r3, r0
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	461a      	mov	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	607b      	str	r3, [r7, #4]

	//SOV3 - Fuel Purge N2 (PC_7)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin) << 2);
 8002c30:	2180      	movs	r1, #128	; 0x80
 8002c32:	482e      	ldr	r0, [pc, #184]	; (8002cec <StateConfiguration+0xf4>)
 8002c34:	f001 fbfe 	bl	8004434 <HAL_GPIO_ReadPin>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	607b      	str	r3, [r7, #4]

	//SOV4 - Fuel Vent (PC_6)
	vc |= (uint32_t)(HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin) << 3);
 8002c44:	2140      	movs	r1, #64	; 0x40
 8002c46:	4829      	ldr	r0, [pc, #164]	; (8002cec <StateConfiguration+0xf4>)
 8002c48:	f001 fbf4 	bl	8004434 <HAL_GPIO_ReadPin>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	461a      	mov	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	607b      	str	r3, [r7, #4]

	//SOV5 - Fuel Main (PA_9)
	vc |= (uint32_t)(HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin) << 4);
 8002c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c60:	f001 fbe8 	bl	8004434 <HAL_GPIO_ReadPin>
 8002c64:	4603      	mov	r3, r0
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	461a      	mov	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	607b      	str	r3, [r7, #4]

	//SOV6 - Lox Main (PA_8)
	vc |= (uint32_t)(HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin) << 5);
 8002c70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c78:	f001 fbdc 	bl	8004434 <HAL_GPIO_ReadPin>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	015b      	lsls	r3, r3, #5
 8002c80:	461a      	mov	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	607b      	str	r3, [r7, #4]

	//SOV7 - Lox Fill (PB_15)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin) << 6);
 8002c88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c8c:	4818      	ldr	r0, [pc, #96]	; (8002cf0 <StateConfiguration+0xf8>)
 8002c8e:	f001 fbd1 	bl	8004434 <HAL_GPIO_ReadPin>
 8002c92:	4603      	mov	r3, r0
 8002c94:	019b      	lsls	r3, r3, #6
 8002c96:	461a      	mov	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	607b      	str	r3, [r7, #4]

	//SOV8 - Lox Vent (PB_10)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin) << 7);
 8002c9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ca2:	4813      	ldr	r0, [pc, #76]	; (8002cf0 <StateConfiguration+0xf8>)
 8002ca4:	f001 fbc6 	bl	8004434 <HAL_GPIO_ReadPin>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	01db      	lsls	r3, r3, #7
 8002cac:	461a      	mov	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	607b      	str	r3, [r7, #4]

	//SOV9 - Lox Purge (PB_13)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin) << 8);
 8002cb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cb8:	480d      	ldr	r0, [pc, #52]	; (8002cf0 <StateConfiguration+0xf8>)
 8002cba:	f001 fbbb 	bl	8004434 <HAL_GPIO_ReadPin>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	607b      	str	r3, [r7, #4]

	//IG1 - Igniter (PA_10)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 9);
 8002cca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cd2:	f001 fbaf 	bl	8004434 <HAL_GPIO_ReadPin>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	025b      	lsls	r3, r3, #9
 8002cda:	461a      	mov	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	607b      	str	r3, [r7, #4]

	return vc;
 8002ce2:	687b      	ldr	r3, [r7, #4]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	48000800 	.word	0x48000800
 8002cf0:	48000400 	.word	0x48000400

08002cf4 <ValveStateSetter>:
 *
 *  Notes:
 */

uint32_t ValveStateSetter(uint32_t vs)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
	//SOV1
	(vs & (uint32_t)SOV1) == (uint32_t)SOV1 \
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f003 0301 	and.w	r3, r3, #1
			? HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_RESET);
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <ValveStateSetter+0x26>
			? HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_SET) \
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d14:	f001 fba6 	bl	8004464 <HAL_GPIO_WritePin>
 8002d18:	e006      	b.n	8002d28 <ValveStateSetter+0x34>
			: HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_RESET);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d24:	f001 fb9e 	bl	8004464 <HAL_GPIO_WritePin>

	//SOV2
	(vs & (uint32_t)SOV2) == (uint32_t)SOV2 \
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
			? HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_RESET);
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <ValveStateSetter+0x4e>
			? HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_SET) \
 8002d32:	2201      	movs	r2, #1
 8002d34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d3c:	f001 fb92 	bl	8004464 <HAL_GPIO_WritePin>
 8002d40:	e006      	b.n	8002d50 <ValveStateSetter+0x5c>
			: HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_RESET);
 8002d42:	2200      	movs	r2, #0
 8002d44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d4c:	f001 fb8a 	bl	8004464 <HAL_GPIO_WritePin>

	//SOV3
	(vs & (uint32_t)SOV3) == (uint32_t)SOV3 \
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f003 0304 	and.w	r3, r3, #4
			? HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_RESET);
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d005      	beq.n	8002d66 <ValveStateSetter+0x72>
			? HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_SET) \
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	2180      	movs	r1, #128	; 0x80
 8002d5e:	484d      	ldr	r0, [pc, #308]	; (8002e94 <ValveStateSetter+0x1a0>)
 8002d60:	f001 fb80 	bl	8004464 <HAL_GPIO_WritePin>
 8002d64:	e004      	b.n	8002d70 <ValveStateSetter+0x7c>
			: HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_RESET);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2180      	movs	r1, #128	; 0x80
 8002d6a:	484a      	ldr	r0, [pc, #296]	; (8002e94 <ValveStateSetter+0x1a0>)
 8002d6c:	f001 fb7a 	bl	8004464 <HAL_GPIO_WritePin>

	//SOV4
	(vs & (uint32_t)SOV4) == (uint32_t)SOV4 \
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f003 0308 	and.w	r3, r3, #8
			? HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_RESET);
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d005      	beq.n	8002d86 <ValveStateSetter+0x92>
			? HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_SET) \
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	2140      	movs	r1, #64	; 0x40
 8002d7e:	4845      	ldr	r0, [pc, #276]	; (8002e94 <ValveStateSetter+0x1a0>)
 8002d80:	f001 fb70 	bl	8004464 <HAL_GPIO_WritePin>
 8002d84:	e004      	b.n	8002d90 <ValveStateSetter+0x9c>
			: HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_RESET);
 8002d86:	2200      	movs	r2, #0
 8002d88:	2140      	movs	r1, #64	; 0x40
 8002d8a:	4842      	ldr	r0, [pc, #264]	; (8002e94 <ValveStateSetter+0x1a0>)
 8002d8c:	f001 fb6a 	bl	8004464 <HAL_GPIO_WritePin>

	//SOV5
	(vs & (uint32_t)SOV5) == (uint32_t)SOV5 \
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f003 0310 	and.w	r3, r3, #16
			? HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_RESET);
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <ValveStateSetter+0xb6>
			? HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_SET) \
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002da4:	f001 fb5e 	bl	8004464 <HAL_GPIO_WritePin>
 8002da8:	e006      	b.n	8002db8 <ValveStateSetter+0xc4>
			: HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_RESET);
 8002daa:	2200      	movs	r2, #0
 8002dac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002db4:	f001 fb56 	bl	8004464 <HAL_GPIO_WritePin>

	//SOV6
	(vs & (uint32_t)SOV6) == (uint32_t)SOV6 \
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f003 0320 	and.w	r3, r3, #32
			? HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_RESET);
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d007      	beq.n	8002dd2 <ValveStateSetter+0xde>
			? HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_SET) \
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dcc:	f001 fb4a 	bl	8004464 <HAL_GPIO_WritePin>
 8002dd0:	e006      	b.n	8002de0 <ValveStateSetter+0xec>
			: HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_RESET);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ddc:	f001 fb42 	bl	8004464 <HAL_GPIO_WritePin>

	//SOV7
	(vs & (uint32_t)SOV7) == (uint32_t)SOV7 \
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
			? HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin ,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin,GPIO_PIN_RESET);
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d006      	beq.n	8002df8 <ValveStateSetter+0x104>
			? HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin ,GPIO_PIN_SET) \
 8002dea:	2201      	movs	r2, #1
 8002dec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002df0:	4829      	ldr	r0, [pc, #164]	; (8002e98 <ValveStateSetter+0x1a4>)
 8002df2:	f001 fb37 	bl	8004464 <HAL_GPIO_WritePin>
 8002df6:	e005      	b.n	8002e04 <ValveStateSetter+0x110>
			: HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin,GPIO_PIN_RESET);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dfe:	4826      	ldr	r0, [pc, #152]	; (8002e98 <ValveStateSetter+0x1a4>)
 8002e00:	f001 fb30 	bl	8004464 <HAL_GPIO_WritePin>

	//SOV8
	(vs & (uint32_t)SOV8) == (uint32_t)SOV8 \
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
			? HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_RESET);
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <ValveStateSetter+0x128>
			? HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_SET) \
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e14:	4820      	ldr	r0, [pc, #128]	; (8002e98 <ValveStateSetter+0x1a4>)
 8002e16:	f001 fb25 	bl	8004464 <HAL_GPIO_WritePin>
 8002e1a:	e005      	b.n	8002e28 <ValveStateSetter+0x134>
			: HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_RESET);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e22:	481d      	ldr	r0, [pc, #116]	; (8002e98 <ValveStateSetter+0x1a4>)
 8002e24:	f001 fb1e 	bl	8004464 <HAL_GPIO_WritePin>

	//SOV9
	(vs & (uint32_t)SOV9) == (uint32_t)SOV9 \
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
			? HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_RESET);
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d006      	beq.n	8002e40 <ValveStateSetter+0x14c>
			? HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_SET) \
 8002e32:	2201      	movs	r2, #1
 8002e34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e38:	4817      	ldr	r0, [pc, #92]	; (8002e98 <ValveStateSetter+0x1a4>)
 8002e3a:	f001 fb13 	bl	8004464 <HAL_GPIO_WritePin>
 8002e3e:	e005      	b.n	8002e4c <ValveStateSetter+0x158>
			: HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_RESET);
 8002e40:	2200      	movs	r2, #0
 8002e42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e46:	4814      	ldr	r0, [pc, #80]	; (8002e98 <ValveStateSetter+0x1a4>)
 8002e48:	f001 fb0c 	bl	8004464 <HAL_GPIO_WritePin>

	//IG1
	(vs & (uint32_t)IG1) == (uint32_t)IG1 \
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
			? HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <ValveStateSetter+0x172>
			? HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET) \
 8002e56:	2201      	movs	r2, #1
 8002e58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e60:	f001 fb00 	bl	8004464 <HAL_GPIO_WritePin>
 8002e64:	e006      	b.n	8002e74 <ValveStateSetter+0x180>
			: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
 8002e66:	2200      	movs	r2, #0
 8002e68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e70:	f001 faf8 	bl	8004464 <HAL_GPIO_WritePin>


	success = (vs == StateConfiguration() ? TRUE : FALSE);
 8002e74:	f7ff fec0 	bl	8002bf8 <StateConfiguration>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	60fb      	str	r3, [r7, #12]

	return success;
 8002e88:	68fb      	ldr	r3, [r7, #12]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	48000800 	.word	0x48000800
 8002e98:	48000400 	.word	0x48000400

08002e9c <StateInitialize>:
 *  success <uint32_t>: TRUE | FALSE | 1 | 0
 *
 *  Notes:
 */
uint32_t StateInitialize(struct StateVars *ctrl)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]
	// Reset state counter, log start
	ctrl->stateCounter = 0;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]
	ctrl->timeStarted = HAL_GetTick();;
 8002eae:	f000 ff99 	bl	8003de4 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	601a      	str	r2, [r3, #0]

	// Change State conditions
	ctrl->lastState = ctrl->currentState;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	// Set Valve States
	ValveStateSetter(ctrl->valveTarget);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff13 	bl	8002cf4 <ValveStateSetter>
	ctrl->valveConfiguration = StateConfiguration();
 8002ece:	f7ff fe93 	bl	8002bf8 <StateConfiguration>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	62da      	str	r2, [r3, #44]	; 0x2c

	///success = SendStatusMessage(ctrl);
	return success;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <ValveCheckCmd>:


//Function to handle individual valves (Part of the Valve check state)
void ValveCheckCmd(struct StateVars *ctrl){
 8002ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee6:	b08f      	sub	sp, #60	; 0x3c
 8002ee8:	af08      	add	r7, sp, #32
 8002eea:	60f8      	str	r0, [r7, #12]

	uint32_t success = TRUE;
 8002eec:	2301      	movs	r3, #1
 8002eee:	617b      	str	r3, [r7, #20]

    	   if (command == IGON){
 8002ef0:	4bae      	ldr	r3, [pc, #696]	; (80031ac <ValveCheckCmd+0x2c8>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4bae      	ldr	r3, [pc, #696]	; (80031b0 <ValveCheckCmd+0x2cc>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d137      	bne.n	8002f6c <ValveCheckCmd+0x88>
				if (cmd_flag && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8002efc:	4bad      	ldr	r3, [pc, #692]	; (80031b4 <ValveCheckCmd+0x2d0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01b      	beq.n	8002f3c <ValveCheckCmd+0x58>
 8002f04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f0c:	f001 fa92 	bl	8004434 <HAL_GPIO_ReadPin>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d112      	bne.n	8002f3c <ValveCheckCmd+0x58>
					valves_selected |= (uint16_t)IG1;
 8002f16:	4ba8      	ldr	r3, [pc, #672]	; (80031b8 <ValveCheckCmd+0x2d4>)
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	4ba5      	ldr	r3, [pc, #660]	; (80031b8 <ValveCheckCmd+0x2d4>)
 8002f22:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " Igniter is ON...\n");
 8002f24:	49a5      	ldr	r1, [pc, #660]	; (80031bc <ValveCheckCmd+0x2d8>)
 8002f26:	48a6      	ldr	r0, [pc, #664]	; (80031c0 <ValveCheckCmd+0x2dc>)
 8002f28:	f7fd ffc4 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 8002f2c:	4ba1      	ldr	r3, [pc, #644]	; (80031b4 <ValveCheckCmd+0x2d0>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
					ignit = 1;
 8002f32:	4ba4      	ldr	r3, [pc, #656]	; (80031c4 <ValveCheckCmd+0x2e0>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	f000 bddb 	b.w	8003af2 <ValveCheckCmd+0xc0e>
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 8002f3c:	4b9d      	ldr	r3, [pc, #628]	; (80031b4 <ValveCheckCmd+0x2d0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 85d6 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 8002f46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f4e:	f001 fa71 	bl	8004434 <HAL_GPIO_ReadPin>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 85cc 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
				{
					UART_SendMessage(&huart2, " Igniter is already ON...\n");
 8002f5a:	499b      	ldr	r1, [pc, #620]	; (80031c8 <ValveCheckCmd+0x2e4>)
 8002f5c:	4898      	ldr	r0, [pc, #608]	; (80031c0 <ValveCheckCmd+0x2dc>)
 8002f5e:	f7fd ffa9 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 8002f62:	4b94      	ldr	r3, [pc, #592]	; (80031b4 <ValveCheckCmd+0x2d0>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	f000 bdc3 	b.w	8003af2 <ValveCheckCmd+0xc0e>
				}
			}
			else if (command == IGOFF){
 8002f6c:	4b8f      	ldr	r3, [pc, #572]	; (80031ac <ValveCheckCmd+0x2c8>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b96      	ldr	r3, [pc, #600]	; (80031cc <ValveCheckCmd+0x2e8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d136      	bne.n	8002fe6 <ValveCheckCmd+0x102>
				if (cmd_flag && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8002f78:	4b8e      	ldr	r3, [pc, #568]	; (80031b4 <ValveCheckCmd+0x2d0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01a      	beq.n	8002fb6 <ValveCheckCmd+0xd2>
 8002f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f88:	f001 fa54 	bl	8004434 <HAL_GPIO_ReadPin>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d011      	beq.n	8002fb6 <ValveCheckCmd+0xd2>
					valves_selected &= 0xFF;
 8002f92:	4b89      	ldr	r3, [pc, #548]	; (80031b8 <ValveCheckCmd+0x2d4>)
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	4b87      	ldr	r3, [pc, #540]	; (80031b8 <ValveCheckCmd+0x2d4>)
 8002f9c:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " Igniter is OFF...\n");
 8002f9e:	498c      	ldr	r1, [pc, #560]	; (80031d0 <ValveCheckCmd+0x2ec>)
 8002fa0:	4887      	ldr	r0, [pc, #540]	; (80031c0 <ValveCheckCmd+0x2dc>)
 8002fa2:	f7fd ff87 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 8002fa6:	4b83      	ldr	r3, [pc, #524]	; (80031b4 <ValveCheckCmd+0x2d0>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
					ignit = 0;
 8002fac:	4b85      	ldr	r3, [pc, #532]	; (80031c4 <ValveCheckCmd+0x2e0>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	f000 bd9e 	b.w	8003af2 <ValveCheckCmd+0xc0e>

				}
				else if (cmd_flag && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8002fb6:	4b7f      	ldr	r3, [pc, #508]	; (80031b4 <ValveCheckCmd+0x2d0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8599 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 8002fc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fc8:	f001 fa34 	bl	8004434 <HAL_GPIO_ReadPin>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f040 858f 	bne.w	8003af2 <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " Igniter is already OFF...\n");
 8002fd4:	497f      	ldr	r1, [pc, #508]	; (80031d4 <ValveCheckCmd+0x2f0>)
 8002fd6:	487a      	ldr	r0, [pc, #488]	; (80031c0 <ValveCheckCmd+0x2dc>)
 8002fd8:	f7fd ff6c 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 8002fdc:	4b75      	ldr	r3, [pc, #468]	; (80031b4 <ValveCheckCmd+0x2d0>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	f000 bd86 	b.w	8003af2 <ValveCheckCmd+0xc0e>
				}

			}
			else if(command == SOV1ON){
 8002fe6:	4b71      	ldr	r3, [pc, #452]	; (80031ac <ValveCheckCmd+0x2c8>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4b7b      	ldr	r3, [pc, #492]	; (80031d8 <ValveCheckCmd+0x2f4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d137      	bne.n	8003062 <ValveCheckCmd+0x17e>
				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 8002ff2:	4b70      	ldr	r3, [pc, #448]	; (80031b4 <ValveCheckCmd+0x2d0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d01b      	beq.n	8003032 <ValveCheckCmd+0x14e>
 8002ffa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003002:	f001 fa17 	bl	8004434 <HAL_GPIO_ReadPin>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d112      	bne.n	8003032 <ValveCheckCmd+0x14e>
					valves_selected |= (uint16_t)SOV1;
 800300c:	4b6a      	ldr	r3, [pc, #424]	; (80031b8 <ValveCheckCmd+0x2d4>)
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	4b68      	ldr	r3, [pc, #416]	; (80031b8 <ValveCheckCmd+0x2d4>)
 8003018:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV1 is ON...\n");
 800301a:	4970      	ldr	r1, [pc, #448]	; (80031dc <ValveCheckCmd+0x2f8>)
 800301c:	4868      	ldr	r0, [pc, #416]	; (80031c0 <ValveCheckCmd+0x2dc>)
 800301e:	f7fd ff49 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 8003022:	4b64      	ldr	r3, [pc, #400]	; (80031b4 <ValveCheckCmd+0x2d0>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
					v1 =1;
 8003028:	4b6d      	ldr	r3, [pc, #436]	; (80031e0 <ValveCheckCmd+0x2fc>)
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	f000 bd60 	b.w	8003af2 <ValveCheckCmd+0xc0e>
				}
				else if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 8003032:	4b60      	ldr	r3, [pc, #384]	; (80031b4 <ValveCheckCmd+0x2d0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 855b 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 800303c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003044:	f001 f9f6 	bl	8004434 <HAL_GPIO_ReadPin>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 8551 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV1 is already ON...\n");
 8003050:	4964      	ldr	r1, [pc, #400]	; (80031e4 <ValveCheckCmd+0x300>)
 8003052:	485b      	ldr	r0, [pc, #364]	; (80031c0 <ValveCheckCmd+0x2dc>)
 8003054:	f7fd ff2e 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 8003058:	4b56      	ldr	r3, [pc, #344]	; (80031b4 <ValveCheckCmd+0x2d0>)
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	f000 bd48 	b.w	8003af2 <ValveCheckCmd+0xc0e>
				}
			}
			else if (command == SOV1OFF){
 8003062:	4b52      	ldr	r3, [pc, #328]	; (80031ac <ValveCheckCmd+0x2c8>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4b60      	ldr	r3, [pc, #384]	; (80031e8 <ValveCheckCmd+0x304>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d138      	bne.n	80030e0 <ValveCheckCmd+0x1fc>
				if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 800306e:	4b51      	ldr	r3, [pc, #324]	; (80031b4 <ValveCheckCmd+0x2d0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01c      	beq.n	80030b0 <ValveCheckCmd+0x1cc>
 8003076:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800307a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800307e:	f001 f9d9 	bl	8004434 <HAL_GPIO_ReadPin>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d013      	beq.n	80030b0 <ValveCheckCmd+0x1cc>
					valves_selected &= 0x3FE;
 8003088:	4b4b      	ldr	r3, [pc, #300]	; (80031b8 <ValveCheckCmd+0x2d4>)
 800308a:	881a      	ldrh	r2, [r3, #0]
 800308c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8003090:	4013      	ands	r3, r2
 8003092:	b29a      	uxth	r2, r3
 8003094:	4b48      	ldr	r3, [pc, #288]	; (80031b8 <ValveCheckCmd+0x2d4>)
 8003096:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV1 is OFF...\n");
 8003098:	4954      	ldr	r1, [pc, #336]	; (80031ec <ValveCheckCmd+0x308>)
 800309a:	4849      	ldr	r0, [pc, #292]	; (80031c0 <ValveCheckCmd+0x2dc>)
 800309c:	f7fd ff0a 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 80030a0:	4b44      	ldr	r3, [pc, #272]	; (80031b4 <ValveCheckCmd+0x2d0>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
					v1=0;
 80030a6:	4b4e      	ldr	r3, [pc, #312]	; (80031e0 <ValveCheckCmd+0x2fc>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	f000 bd21 	b.w	8003af2 <ValveCheckCmd+0xc0e>
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 80030b0:	4b40      	ldr	r3, [pc, #256]	; (80031b4 <ValveCheckCmd+0x2d0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 851c 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 80030ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030c2:	f001 f9b7 	bl	8004434 <HAL_GPIO_ReadPin>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f040 8512 	bne.w	8003af2 <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV1 is already OFF...\n");
 80030ce:	4948      	ldr	r1, [pc, #288]	; (80031f0 <ValveCheckCmd+0x30c>)
 80030d0:	483b      	ldr	r0, [pc, #236]	; (80031c0 <ValveCheckCmd+0x2dc>)
 80030d2:	f7fd feef 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 80030d6:	4b37      	ldr	r3, [pc, #220]	; (80031b4 <ValveCheckCmd+0x2d0>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	f000 bd09 	b.w	8003af2 <ValveCheckCmd+0xc0e>
				}
			}
			else if(command == SOV2ON){
 80030e0:	4b32      	ldr	r3, [pc, #200]	; (80031ac <ValveCheckCmd+0x2c8>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b43      	ldr	r3, [pc, #268]	; (80031f4 <ValveCheckCmd+0x310>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d137      	bne.n	800315c <ValveCheckCmd+0x278>
				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 80030ec:	4b31      	ldr	r3, [pc, #196]	; (80031b4 <ValveCheckCmd+0x2d0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01b      	beq.n	800312c <ValveCheckCmd+0x248>
 80030f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030fc:	f001 f99a 	bl	8004434 <HAL_GPIO_ReadPin>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d112      	bne.n	800312c <ValveCheckCmd+0x248>
					valves_selected |= (uint16_t)SOV2;
 8003106:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <ValveCheckCmd+0x2d4>)
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	f043 0302 	orr.w	r3, r3, #2
 800310e:	b29a      	uxth	r2, r3
 8003110:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <ValveCheckCmd+0x2d4>)
 8003112:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV2 is ON...\n");
 8003114:	4938      	ldr	r1, [pc, #224]	; (80031f8 <ValveCheckCmd+0x314>)
 8003116:	482a      	ldr	r0, [pc, #168]	; (80031c0 <ValveCheckCmd+0x2dc>)
 8003118:	f7fd fecc 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 800311c:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <ValveCheckCmd+0x2d0>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
					v2=1;
 8003122:	4b36      	ldr	r3, [pc, #216]	; (80031fc <ValveCheckCmd+0x318>)
 8003124:	2201      	movs	r2, #1
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	f000 bce3 	b.w	8003af2 <ValveCheckCmd+0xc0e>

				}
				else if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 800312c:	4b21      	ldr	r3, [pc, #132]	; (80031b4 <ValveCheckCmd+0x2d0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 84de 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 8003136:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800313a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800313e:	f001 f979 	bl	8004434 <HAL_GPIO_ReadPin>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 84d4 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV2 is already ON...\n");
 800314a:	492d      	ldr	r1, [pc, #180]	; (8003200 <ValveCheckCmd+0x31c>)
 800314c:	481c      	ldr	r0, [pc, #112]	; (80031c0 <ValveCheckCmd+0x2dc>)
 800314e:	f7fd feb1 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 8003152:	4b18      	ldr	r3, [pc, #96]	; (80031b4 <ValveCheckCmd+0x2d0>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	f000 bccb 	b.w	8003af2 <ValveCheckCmd+0xc0e>
				}

			}
			else if (command == SOV2OFF){
 800315c:	4b13      	ldr	r3, [pc, #76]	; (80031ac <ValveCheckCmd+0x2c8>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b28      	ldr	r3, [pc, #160]	; (8003204 <ValveCheckCmd+0x320>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d169      	bne.n	800323c <ValveCheckCmd+0x358>
				if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 8003168:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <ValveCheckCmd+0x2d0>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d04d      	beq.n	800320c <ValveCheckCmd+0x328>
 8003170:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003178:	f001 f95c 	bl	8004434 <HAL_GPIO_ReadPin>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d044      	beq.n	800320c <ValveCheckCmd+0x328>
					valves_selected &= 0x1FD;
 8003182:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <ValveCheckCmd+0x2d4>)
 8003184:	881a      	ldrh	r2, [r3, #0]
 8003186:	f240 13fd 	movw	r3, #509	; 0x1fd
 800318a:	4013      	ands	r3, r2
 800318c:	b29a      	uxth	r2, r3
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <ValveCheckCmd+0x2d4>)
 8003190:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV2 is OFF...\n");
 8003192:	491d      	ldr	r1, [pc, #116]	; (8003208 <ValveCheckCmd+0x324>)
 8003194:	480a      	ldr	r0, [pc, #40]	; (80031c0 <ValveCheckCmd+0x2dc>)
 8003196:	f7fd fe8d 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 800319a:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <ValveCheckCmd+0x2d0>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
					v2=0;
 80031a0:	4b16      	ldr	r3, [pc, #88]	; (80031fc <ValveCheckCmd+0x318>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	f000 bca4 	b.w	8003af2 <ValveCheckCmd+0xc0e>
 80031aa:	bf00      	nop
 80031ac:	200001b0 	.word	0x200001b0
 80031b0:	200000a4 	.word	0x200000a4
 80031b4:	20003120 	.word	0x20003120
 80031b8:	200033e4 	.word	0x200033e4
 80031bc:	08006d84 	.word	0x08006d84
 80031c0:	20003320 	.word	0x20003320
 80031c4:	2000310c 	.word	0x2000310c
 80031c8:	08006d98 	.word	0x08006d98
 80031cc:	200000a8 	.word	0x200000a8
 80031d0:	08006db4 	.word	0x08006db4
 80031d4:	08006dc8 	.word	0x08006dc8
 80031d8:	200000ac 	.word	0x200000ac
 80031dc:	08006de4 	.word	0x08006de4
 80031e0:	200001a0 	.word	0x200001a0
 80031e4:	08006df4 	.word	0x08006df4
 80031e8:	200000b0 	.word	0x200000b0
 80031ec:	08006e0c 	.word	0x08006e0c
 80031f0:	08006e20 	.word	0x08006e20
 80031f4:	200000b4 	.word	0x200000b4
 80031f8:	08006e3c 	.word	0x08006e3c
 80031fc:	20003228 	.word	0x20003228
 8003200:	08006e4c 	.word	0x08006e4c
 8003204:	200000b8 	.word	0x200000b8
 8003208:	08006e64 	.word	0x08006e64
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 800320c:	4b9b      	ldr	r3, [pc, #620]	; (800347c <ValveCheckCmd+0x598>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 846e 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 8003216:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800321a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800321e:	f001 f909 	bl	8004434 <HAL_GPIO_ReadPin>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	f040 8464 	bne.w	8003af2 <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV2 is already OFF...\n");
 800322a:	4995      	ldr	r1, [pc, #596]	; (8003480 <ValveCheckCmd+0x59c>)
 800322c:	4895      	ldr	r0, [pc, #596]	; (8003484 <ValveCheckCmd+0x5a0>)
 800322e:	f7fd fe41 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 8003232:	4b92      	ldr	r3, [pc, #584]	; (800347c <ValveCheckCmd+0x598>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	f000 bc5b 	b.w	8003af2 <ValveCheckCmd+0xc0e>
				}
			}
			else if(command == SOV3ON){
 800323c:	4b92      	ldr	r3, [pc, #584]	; (8003488 <ValveCheckCmd+0x5a4>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4b92      	ldr	r3, [pc, #584]	; (800348c <ValveCheckCmd+0x5a8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d133      	bne.n	80032b0 <ValveCheckCmd+0x3cc>
				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin))){
 8003248:	4b8c      	ldr	r3, [pc, #560]	; (800347c <ValveCheckCmd+0x598>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d019      	beq.n	8003284 <ValveCheckCmd+0x3a0>
 8003250:	2180      	movs	r1, #128	; 0x80
 8003252:	488f      	ldr	r0, [pc, #572]	; (8003490 <ValveCheckCmd+0x5ac>)
 8003254:	f001 f8ee 	bl	8004434 <HAL_GPIO_ReadPin>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d112      	bne.n	8003284 <ValveCheckCmd+0x3a0>
					valves_selected |= (uint16_t)SOV3;
 800325e:	4b8d      	ldr	r3, [pc, #564]	; (8003494 <ValveCheckCmd+0x5b0>)
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	f043 0304 	orr.w	r3, r3, #4
 8003266:	b29a      	uxth	r2, r3
 8003268:	4b8a      	ldr	r3, [pc, #552]	; (8003494 <ValveCheckCmd+0x5b0>)
 800326a:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV3 is ON...\n");
 800326c:	498a      	ldr	r1, [pc, #552]	; (8003498 <ValveCheckCmd+0x5b4>)
 800326e:	4885      	ldr	r0, [pc, #532]	; (8003484 <ValveCheckCmd+0x5a0>)
 8003270:	f7fd fe20 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 8003274:	4b81      	ldr	r3, [pc, #516]	; (800347c <ValveCheckCmd+0x598>)
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
					v3=1;
 800327a:	4b88      	ldr	r3, [pc, #544]	; (800349c <ValveCheckCmd+0x5b8>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f000 bc37 	b.w	8003af2 <ValveCheckCmd+0xc0e>
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin)){
 8003284:	4b7d      	ldr	r3, [pc, #500]	; (800347c <ValveCheckCmd+0x598>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 8432 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 800328e:	2180      	movs	r1, #128	; 0x80
 8003290:	487f      	ldr	r0, [pc, #508]	; (8003490 <ValveCheckCmd+0x5ac>)
 8003292:	f001 f8cf 	bl	8004434 <HAL_GPIO_ReadPin>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 842a 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV3 is already ON...\n");
 800329e:	4980      	ldr	r1, [pc, #512]	; (80034a0 <ValveCheckCmd+0x5bc>)
 80032a0:	4878      	ldr	r0, [pc, #480]	; (8003484 <ValveCheckCmd+0x5a0>)
 80032a2:	f7fd fe07 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 80032a6:	4b75      	ldr	r3, [pc, #468]	; (800347c <ValveCheckCmd+0x598>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	f000 bc21 	b.w	8003af2 <ValveCheckCmd+0xc0e>
				}
			}
			else if (command == SOV3OFF){
 80032b0:	4b75      	ldr	r3, [pc, #468]	; (8003488 <ValveCheckCmd+0x5a4>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b7b      	ldr	r3, [pc, #492]	; (80034a4 <ValveCheckCmd+0x5c0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d132      	bne.n	8003322 <ValveCheckCmd+0x43e>
				if (cmd_flag && HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin)){
 80032bc:	4b6f      	ldr	r3, [pc, #444]	; (800347c <ValveCheckCmd+0x598>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d019      	beq.n	80032f8 <ValveCheckCmd+0x414>
 80032c4:	2180      	movs	r1, #128	; 0x80
 80032c6:	4872      	ldr	r0, [pc, #456]	; (8003490 <ValveCheckCmd+0x5ac>)
 80032c8:	f001 f8b4 	bl	8004434 <HAL_GPIO_ReadPin>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d012      	beq.n	80032f8 <ValveCheckCmd+0x414>
					valves_selected &= 0x3FB;
 80032d2:	4b70      	ldr	r3, [pc, #448]	; (8003494 <ValveCheckCmd+0x5b0>)
 80032d4:	881a      	ldrh	r2, [r3, #0]
 80032d6:	f240 33fb 	movw	r3, #1019	; 0x3fb
 80032da:	4013      	ands	r3, r2
 80032dc:	b29a      	uxth	r2, r3
 80032de:	4b6d      	ldr	r3, [pc, #436]	; (8003494 <ValveCheckCmd+0x5b0>)
 80032e0:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV3 is OFF...\n");
 80032e2:	4971      	ldr	r1, [pc, #452]	; (80034a8 <ValveCheckCmd+0x5c4>)
 80032e4:	4867      	ldr	r0, [pc, #412]	; (8003484 <ValveCheckCmd+0x5a0>)
 80032e6:	f7fd fde5 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 80032ea:	4b64      	ldr	r3, [pc, #400]	; (800347c <ValveCheckCmd+0x598>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
					v3=0;
 80032f0:	4b6a      	ldr	r3, [pc, #424]	; (800349c <ValveCheckCmd+0x5b8>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	e3fc      	b.n	8003af2 <ValveCheckCmd+0xc0e>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin))) {
 80032f8:	4b60      	ldr	r3, [pc, #384]	; (800347c <ValveCheckCmd+0x598>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 83f8 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 8003302:	2180      	movs	r1, #128	; 0x80
 8003304:	4862      	ldr	r0, [pc, #392]	; (8003490 <ValveCheckCmd+0x5ac>)
 8003306:	f001 f895 	bl	8004434 <HAL_GPIO_ReadPin>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	f040 83f0 	bne.w	8003af2 <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV3 is already OFF...\n");
 8003312:	4966      	ldr	r1, [pc, #408]	; (80034ac <ValveCheckCmd+0x5c8>)
 8003314:	485b      	ldr	r0, [pc, #364]	; (8003484 <ValveCheckCmd+0x5a0>)
 8003316:	f7fd fdcd 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 800331a:	4b58      	ldr	r3, [pc, #352]	; (800347c <ValveCheckCmd+0x598>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	e3e7      	b.n	8003af2 <ValveCheckCmd+0xc0e>
				}
			}
			else if(command == SOV4ON){
 8003322:	4b59      	ldr	r3, [pc, #356]	; (8003488 <ValveCheckCmd+0x5a4>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	4b62      	ldr	r3, [pc, #392]	; (80034b0 <ValveCheckCmd+0x5cc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d131      	bne.n	8003392 <ValveCheckCmd+0x4ae>
				if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin))){
 800332e:	4b53      	ldr	r3, [pc, #332]	; (800347c <ValveCheckCmd+0x598>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d018      	beq.n	8003368 <ValveCheckCmd+0x484>
 8003336:	2140      	movs	r1, #64	; 0x40
 8003338:	4855      	ldr	r0, [pc, #340]	; (8003490 <ValveCheckCmd+0x5ac>)
 800333a:	f001 f87b 	bl	8004434 <HAL_GPIO_ReadPin>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d111      	bne.n	8003368 <ValveCheckCmd+0x484>
					valves_selected |= (uint16_t)SOV4;
 8003344:	4b53      	ldr	r3, [pc, #332]	; (8003494 <ValveCheckCmd+0x5b0>)
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	f043 0308 	orr.w	r3, r3, #8
 800334c:	b29a      	uxth	r2, r3
 800334e:	4b51      	ldr	r3, [pc, #324]	; (8003494 <ValveCheckCmd+0x5b0>)
 8003350:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV4 is ON...\n");
 8003352:	4958      	ldr	r1, [pc, #352]	; (80034b4 <ValveCheckCmd+0x5d0>)
 8003354:	484b      	ldr	r0, [pc, #300]	; (8003484 <ValveCheckCmd+0x5a0>)
 8003356:	f7fd fdad 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 800335a:	4b48      	ldr	r3, [pc, #288]	; (800347c <ValveCheckCmd+0x598>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
					v4=1;
 8003360:	4b55      	ldr	r3, [pc, #340]	; (80034b8 <ValveCheckCmd+0x5d4>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	e3c4      	b.n	8003af2 <ValveCheckCmd+0xc0e>

				}
				else if (cmd_flag && HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin)){
 8003368:	4b44      	ldr	r3, [pc, #272]	; (800347c <ValveCheckCmd+0x598>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 83c0 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 8003372:	2140      	movs	r1, #64	; 0x40
 8003374:	4846      	ldr	r0, [pc, #280]	; (8003490 <ValveCheckCmd+0x5ac>)
 8003376:	f001 f85d 	bl	8004434 <HAL_GPIO_ReadPin>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 83b8 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV4 is already ON...\n");
 8003382:	494e      	ldr	r1, [pc, #312]	; (80034bc <ValveCheckCmd+0x5d8>)
 8003384:	483f      	ldr	r0, [pc, #252]	; (8003484 <ValveCheckCmd+0x5a0>)
 8003386:	f7fd fd95 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 800338a:	4b3c      	ldr	r3, [pc, #240]	; (800347c <ValveCheckCmd+0x598>)
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	e3af      	b.n	8003af2 <ValveCheckCmd+0xc0e>
				}
			}
			else if (command == SOV4OFF){
 8003392:	4b3d      	ldr	r3, [pc, #244]	; (8003488 <ValveCheckCmd+0x5a4>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4b4a      	ldr	r3, [pc, #296]	; (80034c0 <ValveCheckCmd+0x5dc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d132      	bne.n	8003404 <ValveCheckCmd+0x520>


				if (cmd_flag && HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin)){
 800339e:	4b37      	ldr	r3, [pc, #220]	; (800347c <ValveCheckCmd+0x598>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d019      	beq.n	80033da <ValveCheckCmd+0x4f6>
 80033a6:	2140      	movs	r1, #64	; 0x40
 80033a8:	4839      	ldr	r0, [pc, #228]	; (8003490 <ValveCheckCmd+0x5ac>)
 80033aa:	f001 f843 	bl	8004434 <HAL_GPIO_ReadPin>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d012      	beq.n	80033da <ValveCheckCmd+0x4f6>
					valves_selected &= 0x3F7;
 80033b4:	4b37      	ldr	r3, [pc, #220]	; (8003494 <ValveCheckCmd+0x5b0>)
 80033b6:	881a      	ldrh	r2, [r3, #0]
 80033b8:	f240 33f7 	movw	r3, #1015	; 0x3f7
 80033bc:	4013      	ands	r3, r2
 80033be:	b29a      	uxth	r2, r3
 80033c0:	4b34      	ldr	r3, [pc, #208]	; (8003494 <ValveCheckCmd+0x5b0>)
 80033c2:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV4 is OFF...\n");
 80033c4:	493f      	ldr	r1, [pc, #252]	; (80034c4 <ValveCheckCmd+0x5e0>)
 80033c6:	482f      	ldr	r0, [pc, #188]	; (8003484 <ValveCheckCmd+0x5a0>)
 80033c8:	f7fd fd74 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 80033cc:	4b2b      	ldr	r3, [pc, #172]	; (800347c <ValveCheckCmd+0x598>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
					v4=0;
 80033d2:	4b39      	ldr	r3, [pc, #228]	; (80034b8 <ValveCheckCmd+0x5d4>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	e38b      	b.n	8003af2 <ValveCheckCmd+0xc0e>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin))){
 80033da:	4b28      	ldr	r3, [pc, #160]	; (800347c <ValveCheckCmd+0x598>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 8387 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 80033e4:	2140      	movs	r1, #64	; 0x40
 80033e6:	482a      	ldr	r0, [pc, #168]	; (8003490 <ValveCheckCmd+0x5ac>)
 80033e8:	f001 f824 	bl	8004434 <HAL_GPIO_ReadPin>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 837f 	bne.w	8003af2 <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV4 is already OFF...\n");
 80033f4:	4934      	ldr	r1, [pc, #208]	; (80034c8 <ValveCheckCmd+0x5e4>)
 80033f6:	4823      	ldr	r0, [pc, #140]	; (8003484 <ValveCheckCmd+0x5a0>)
 80033f8:	f7fd fd5c 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 80033fc:	4b1f      	ldr	r3, [pc, #124]	; (800347c <ValveCheckCmd+0x598>)
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	e376      	b.n	8003af2 <ValveCheckCmd+0xc0e>
				}
			}
			else if(command == SOV5ON){
 8003404:	4b20      	ldr	r3, [pc, #128]	; (8003488 <ValveCheckCmd+0x5a4>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b30      	ldr	r3, [pc, #192]	; (80034cc <ValveCheckCmd+0x5e8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d165      	bne.n	80034dc <ValveCheckCmd+0x5f8>
				if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin))){
 8003410:	4b1a      	ldr	r3, [pc, #104]	; (800347c <ValveCheckCmd+0x598>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01a      	beq.n	800344e <ValveCheckCmd+0x56a>
 8003418:	f44f 7100 	mov.w	r1, #512	; 0x200
 800341c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003420:	f001 f808 	bl	8004434 <HAL_GPIO_ReadPin>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d111      	bne.n	800344e <ValveCheckCmd+0x56a>
					valves_selected |= (uint16_t)SOV5;
 800342a:	4b1a      	ldr	r3, [pc, #104]	; (8003494 <ValveCheckCmd+0x5b0>)
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	f043 0310 	orr.w	r3, r3, #16
 8003432:	b29a      	uxth	r2, r3
 8003434:	4b17      	ldr	r3, [pc, #92]	; (8003494 <ValveCheckCmd+0x5b0>)
 8003436:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV5 is ON...\n");
 8003438:	4925      	ldr	r1, [pc, #148]	; (80034d0 <ValveCheckCmd+0x5ec>)
 800343a:	4812      	ldr	r0, [pc, #72]	; (8003484 <ValveCheckCmd+0x5a0>)
 800343c:	f7fd fd3a 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 8003440:	4b0e      	ldr	r3, [pc, #56]	; (800347c <ValveCheckCmd+0x598>)
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
					v5=1;
 8003446:	4b23      	ldr	r3, [pc, #140]	; (80034d4 <ValveCheckCmd+0x5f0>)
 8003448:	2201      	movs	r2, #1
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	e351      	b.n	8003af2 <ValveCheckCmd+0xc0e>
				}
				else if(cmd_flag && HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin)){
 800344e:	4b0b      	ldr	r3, [pc, #44]	; (800347c <ValveCheckCmd+0x598>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 834d 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 8003458:	f44f 7100 	mov.w	r1, #512	; 0x200
 800345c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003460:	f000 ffe8 	bl	8004434 <HAL_GPIO_ReadPin>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8343 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV5 is already ON...\n");
 800346c:	491a      	ldr	r1, [pc, #104]	; (80034d8 <ValveCheckCmd+0x5f4>)
 800346e:	4805      	ldr	r0, [pc, #20]	; (8003484 <ValveCheckCmd+0x5a0>)
 8003470:	f7fd fd20 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 8003474:	4b01      	ldr	r3, [pc, #4]	; (800347c <ValveCheckCmd+0x598>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	e33a      	b.n	8003af2 <ValveCheckCmd+0xc0e>
 800347c:	20003120 	.word	0x20003120
 8003480:	08006e78 	.word	0x08006e78
 8003484:	20003320 	.word	0x20003320
 8003488:	200001b0 	.word	0x200001b0
 800348c:	200000bc 	.word	0x200000bc
 8003490:	48000800 	.word	0x48000800
 8003494:	200033e4 	.word	0x200033e4
 8003498:	08006e94 	.word	0x08006e94
 800349c:	20000224 	.word	0x20000224
 80034a0:	08006ea4 	.word	0x08006ea4
 80034a4:	200000c0 	.word	0x200000c0
 80034a8:	08006ebc 	.word	0x08006ebc
 80034ac:	08006ed0 	.word	0x08006ed0
 80034b0:	200000c4 	.word	0x200000c4
 80034b4:	08006eec 	.word	0x08006eec
 80034b8:	200033d8 	.word	0x200033d8
 80034bc:	08006efc 	.word	0x08006efc
 80034c0:	200000c8 	.word	0x200000c8
 80034c4:	08006f14 	.word	0x08006f14
 80034c8:	08006f28 	.word	0x08006f28
 80034cc:	200000cc 	.word	0x200000cc
 80034d0:	08006f44 	.word	0x08006f44
 80034d4:	20003298 	.word	0x20003298
 80034d8:	08006f54 	.word	0x08006f54
				}
			}
			else if (command == SOV5OFF){
 80034dc:	4ba7      	ldr	r3, [pc, #668]	; (800377c <ValveCheckCmd+0x898>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4ba7      	ldr	r3, [pc, #668]	; (8003780 <ValveCheckCmd+0x89c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d136      	bne.n	8003556 <ValveCheckCmd+0x672>


				if (cmd_flag && HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin)){
 80034e8:	4ba6      	ldr	r3, [pc, #664]	; (8003784 <ValveCheckCmd+0x8a0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01b      	beq.n	8003528 <ValveCheckCmd+0x644>
 80034f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034f8:	f000 ff9c 	bl	8004434 <HAL_GPIO_ReadPin>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d012      	beq.n	8003528 <ValveCheckCmd+0x644>
					valves_selected &= 0x3EF;
 8003502:	4ba1      	ldr	r3, [pc, #644]	; (8003788 <ValveCheckCmd+0x8a4>)
 8003504:	881a      	ldrh	r2, [r3, #0]
 8003506:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800350a:	4013      	ands	r3, r2
 800350c:	b29a      	uxth	r2, r3
 800350e:	4b9e      	ldr	r3, [pc, #632]	; (8003788 <ValveCheckCmd+0x8a4>)
 8003510:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV5 is OFF...\n");
 8003512:	499e      	ldr	r1, [pc, #632]	; (800378c <ValveCheckCmd+0x8a8>)
 8003514:	489e      	ldr	r0, [pc, #632]	; (8003790 <ValveCheckCmd+0x8ac>)
 8003516:	f7fd fccd 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 800351a:	4b9a      	ldr	r3, [pc, #616]	; (8003784 <ValveCheckCmd+0x8a0>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
					v5=0;
 8003520:	4b9c      	ldr	r3, [pc, #624]	; (8003794 <ValveCheckCmd+0x8b0>)
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	e2e4      	b.n	8003af2 <ValveCheckCmd+0xc0e>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin))) {
 8003528:	4b96      	ldr	r3, [pc, #600]	; (8003784 <ValveCheckCmd+0x8a0>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 82e0 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 8003532:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800353a:	f000 ff7b 	bl	8004434 <HAL_GPIO_ReadPin>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	f040 82d6 	bne.w	8003af2 <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV5 is already OFF...\n");
 8003546:	4994      	ldr	r1, [pc, #592]	; (8003798 <ValveCheckCmd+0x8b4>)
 8003548:	4891      	ldr	r0, [pc, #580]	; (8003790 <ValveCheckCmd+0x8ac>)
 800354a:	f7fd fcb3 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 800354e:	4b8d      	ldr	r3, [pc, #564]	; (8003784 <ValveCheckCmd+0x8a0>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	e2cd      	b.n	8003af2 <ValveCheckCmd+0xc0e>
				}
			}
			else if(command == SOV6ON){
 8003556:	4b89      	ldr	r3, [pc, #548]	; (800377c <ValveCheckCmd+0x898>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	4b90      	ldr	r3, [pc, #576]	; (800379c <ValveCheckCmd+0x8b8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d135      	bne.n	80035ce <ValveCheckCmd+0x6ea>
				if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin))){
 8003562:	4b88      	ldr	r3, [pc, #544]	; (8003784 <ValveCheckCmd+0x8a0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d01a      	beq.n	80035a0 <ValveCheckCmd+0x6bc>
 800356a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800356e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003572:	f000 ff5f 	bl	8004434 <HAL_GPIO_ReadPin>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d111      	bne.n	80035a0 <ValveCheckCmd+0x6bc>
				valves_selected |= (uint16_t)SOV6;
 800357c:	4b82      	ldr	r3, [pc, #520]	; (8003788 <ValveCheckCmd+0x8a4>)
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	f043 0320 	orr.w	r3, r3, #32
 8003584:	b29a      	uxth	r2, r3
 8003586:	4b80      	ldr	r3, [pc, #512]	; (8003788 <ValveCheckCmd+0x8a4>)
 8003588:	801a      	strh	r2, [r3, #0]
				UART_SendMessage(&huart2, " SOV6 is ON...\n");
 800358a:	4985      	ldr	r1, [pc, #532]	; (80037a0 <ValveCheckCmd+0x8bc>)
 800358c:	4880      	ldr	r0, [pc, #512]	; (8003790 <ValveCheckCmd+0x8ac>)
 800358e:	f7fd fc91 	bl	8000eb4 <UART_SendMessage>
				cmd_flag = FALSE;
 8003592:	4b7c      	ldr	r3, [pc, #496]	; (8003784 <ValveCheckCmd+0x8a0>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
				v6=1;
 8003598:	4b82      	ldr	r3, [pc, #520]	; (80037a4 <ValveCheckCmd+0x8c0>)
 800359a:	2201      	movs	r2, #1
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	e2a8      	b.n	8003af2 <ValveCheckCmd+0xc0e>

				}
				else if (cmd_flag && HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin)){
 80035a0:	4b78      	ldr	r3, [pc, #480]	; (8003784 <ValveCheckCmd+0x8a0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 82a4 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 80035aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035b2:	f000 ff3f 	bl	8004434 <HAL_GPIO_ReadPin>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 829a 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV6 is already ON...\n");
 80035be:	497a      	ldr	r1, [pc, #488]	; (80037a8 <ValveCheckCmd+0x8c4>)
 80035c0:	4873      	ldr	r0, [pc, #460]	; (8003790 <ValveCheckCmd+0x8ac>)
 80035c2:	f7fd fc77 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 80035c6:	4b6f      	ldr	r3, [pc, #444]	; (8003784 <ValveCheckCmd+0x8a0>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	e291      	b.n	8003af2 <ValveCheckCmd+0xc0e>
				}
			}
			else if (command == SOV6OFF){
 80035ce:	4b6b      	ldr	r3, [pc, #428]	; (800377c <ValveCheckCmd+0x898>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4b76      	ldr	r3, [pc, #472]	; (80037ac <ValveCheckCmd+0x8c8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d136      	bne.n	8003648 <ValveCheckCmd+0x764>

				if (cmd_flag && HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin)){
 80035da:	4b6a      	ldr	r3, [pc, #424]	; (8003784 <ValveCheckCmd+0x8a0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01b      	beq.n	800361a <ValveCheckCmd+0x736>
 80035e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035ea:	f000 ff23 	bl	8004434 <HAL_GPIO_ReadPin>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d012      	beq.n	800361a <ValveCheckCmd+0x736>
					valves_selected &= 0x3DF;
 80035f4:	4b64      	ldr	r3, [pc, #400]	; (8003788 <ValveCheckCmd+0x8a4>)
 80035f6:	881a      	ldrh	r2, [r3, #0]
 80035f8:	f240 33df 	movw	r3, #991	; 0x3df
 80035fc:	4013      	ands	r3, r2
 80035fe:	b29a      	uxth	r2, r3
 8003600:	4b61      	ldr	r3, [pc, #388]	; (8003788 <ValveCheckCmd+0x8a4>)
 8003602:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV6 is OFF...\n");
 8003604:	496a      	ldr	r1, [pc, #424]	; (80037b0 <ValveCheckCmd+0x8cc>)
 8003606:	4862      	ldr	r0, [pc, #392]	; (8003790 <ValveCheckCmd+0x8ac>)
 8003608:	f7fd fc54 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 800360c:	4b5d      	ldr	r3, [pc, #372]	; (8003784 <ValveCheckCmd+0x8a0>)
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
					v6=0;
 8003612:	4b64      	ldr	r3, [pc, #400]	; (80037a4 <ValveCheckCmd+0x8c0>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e26b      	b.n	8003af2 <ValveCheckCmd+0xc0e>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin))){
 800361a:	4b5a      	ldr	r3, [pc, #360]	; (8003784 <ValveCheckCmd+0x8a0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 8267 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 8003624:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800362c:	f000 ff02 	bl	8004434 <HAL_GPIO_ReadPin>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	f040 825d 	bne.w	8003af2 <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV6 is already OFF...\n");
 8003638:	495e      	ldr	r1, [pc, #376]	; (80037b4 <ValveCheckCmd+0x8d0>)
 800363a:	4855      	ldr	r0, [pc, #340]	; (8003790 <ValveCheckCmd+0x8ac>)
 800363c:	f7fd fc3a 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 8003640:	4b50      	ldr	r3, [pc, #320]	; (8003784 <ValveCheckCmd+0x8a0>)
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	e254      	b.n	8003af2 <ValveCheckCmd+0xc0e>
				}
			}
			else if(command == SOV7ON){
 8003648:	4b4c      	ldr	r3, [pc, #304]	; (800377c <ValveCheckCmd+0x898>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	4b5a      	ldr	r3, [pc, #360]	; (80037b8 <ValveCheckCmd+0x8d4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d133      	bne.n	80036bc <ValveCheckCmd+0x7d8>


				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin))){
 8003654:	4b4b      	ldr	r3, [pc, #300]	; (8003784 <ValveCheckCmd+0x8a0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d019      	beq.n	8003690 <ValveCheckCmd+0x7ac>
 800365c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003660:	4856      	ldr	r0, [pc, #344]	; (80037bc <ValveCheckCmd+0x8d8>)
 8003662:	f000 fee7 	bl	8004434 <HAL_GPIO_ReadPin>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d111      	bne.n	8003690 <ValveCheckCmd+0x7ac>
					valves_selected |= (uint16_t)SOV7;
 800366c:	4b46      	ldr	r3, [pc, #280]	; (8003788 <ValveCheckCmd+0x8a4>)
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003674:	b29a      	uxth	r2, r3
 8003676:	4b44      	ldr	r3, [pc, #272]	; (8003788 <ValveCheckCmd+0x8a4>)
 8003678:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV7 is ON...\n");
 800367a:	4951      	ldr	r1, [pc, #324]	; (80037c0 <ValveCheckCmd+0x8dc>)
 800367c:	4844      	ldr	r0, [pc, #272]	; (8003790 <ValveCheckCmd+0x8ac>)
 800367e:	f7fd fc19 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 8003682:	4b40      	ldr	r3, [pc, #256]	; (8003784 <ValveCheckCmd+0x8a0>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
					v7=1;
 8003688:	4b4e      	ldr	r3, [pc, #312]	; (80037c4 <ValveCheckCmd+0x8e0>)
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e230      	b.n	8003af2 <ValveCheckCmd+0xc0e>
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin)){
 8003690:	4b3c      	ldr	r3, [pc, #240]	; (8003784 <ValveCheckCmd+0x8a0>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 822c 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 800369a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800369e:	4847      	ldr	r0, [pc, #284]	; (80037bc <ValveCheckCmd+0x8d8>)
 80036a0:	f000 fec8 	bl	8004434 <HAL_GPIO_ReadPin>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 8223 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV7 is already ON...\n");
 80036ac:	4946      	ldr	r1, [pc, #280]	; (80037c8 <ValveCheckCmd+0x8e4>)
 80036ae:	4838      	ldr	r0, [pc, #224]	; (8003790 <ValveCheckCmd+0x8ac>)
 80036b0:	f7fd fc00 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 80036b4:	4b33      	ldr	r3, [pc, #204]	; (8003784 <ValveCheckCmd+0x8a0>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	e21a      	b.n	8003af2 <ValveCheckCmd+0xc0e>
				}
			}
			else if (command == SOV7OFF){
 80036bc:	4b2f      	ldr	r3, [pc, #188]	; (800377c <ValveCheckCmd+0x898>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b42      	ldr	r3, [pc, #264]	; (80037cc <ValveCheckCmd+0x8e8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d134      	bne.n	8003732 <ValveCheckCmd+0x84e>


				if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin)){
 80036c8:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <ValveCheckCmd+0x8a0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01a      	beq.n	8003706 <ValveCheckCmd+0x822>
 80036d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036d4:	4839      	ldr	r0, [pc, #228]	; (80037bc <ValveCheckCmd+0x8d8>)
 80036d6:	f000 fead 	bl	8004434 <HAL_GPIO_ReadPin>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d012      	beq.n	8003706 <ValveCheckCmd+0x822>

					valves_selected &= 0x3BF;
 80036e0:	4b29      	ldr	r3, [pc, #164]	; (8003788 <ValveCheckCmd+0x8a4>)
 80036e2:	881a      	ldrh	r2, [r3, #0]
 80036e4:	f240 33bf 	movw	r3, #959	; 0x3bf
 80036e8:	4013      	ands	r3, r2
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	4b26      	ldr	r3, [pc, #152]	; (8003788 <ValveCheckCmd+0x8a4>)
 80036ee:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV7 is OFF...\n");
 80036f0:	4937      	ldr	r1, [pc, #220]	; (80037d0 <ValveCheckCmd+0x8ec>)
 80036f2:	4827      	ldr	r0, [pc, #156]	; (8003790 <ValveCheckCmd+0x8ac>)
 80036f4:	f7fd fbde 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 80036f8:	4b22      	ldr	r3, [pc, #136]	; (8003784 <ValveCheckCmd+0x8a0>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
					v7=0;
 80036fe:	4b31      	ldr	r3, [pc, #196]	; (80037c4 <ValveCheckCmd+0x8e0>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	e1f5      	b.n	8003af2 <ValveCheckCmd+0xc0e>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin))) {
 8003706:	4b1f      	ldr	r3, [pc, #124]	; (8003784 <ValveCheckCmd+0x8a0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 81f1 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 8003710:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003714:	4829      	ldr	r0, [pc, #164]	; (80037bc <ValveCheckCmd+0x8d8>)
 8003716:	f000 fe8d 	bl	8004434 <HAL_GPIO_ReadPin>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	f040 81e8 	bne.w	8003af2 <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV7 is already OFF...\n");
 8003722:	492c      	ldr	r1, [pc, #176]	; (80037d4 <ValveCheckCmd+0x8f0>)
 8003724:	481a      	ldr	r0, [pc, #104]	; (8003790 <ValveCheckCmd+0x8ac>)
 8003726:	f7fd fbc5 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 800372a:	4b16      	ldr	r3, [pc, #88]	; (8003784 <ValveCheckCmd+0x8a0>)
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e1df      	b.n	8003af2 <ValveCheckCmd+0xc0e>
				}
			}
			else if(command == SOV8ON){
 8003732:	4b12      	ldr	r3, [pc, #72]	; (800377c <ValveCheckCmd+0x898>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4b28      	ldr	r3, [pc, #160]	; (80037d8 <ValveCheckCmd+0x8f4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d168      	bne.n	8003810 <ValveCheckCmd+0x92c>


				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin))){
 800373e:	4b11      	ldr	r3, [pc, #68]	; (8003784 <ValveCheckCmd+0x8a0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d04e      	beq.n	80037e4 <ValveCheckCmd+0x900>
 8003746:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800374a:	481c      	ldr	r0, [pc, #112]	; (80037bc <ValveCheckCmd+0x8d8>)
 800374c:	f000 fe72 	bl	8004434 <HAL_GPIO_ReadPin>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d146      	bne.n	80037e4 <ValveCheckCmd+0x900>
					valves_selected |= (uint16_t)SOV8;
 8003756:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <ValveCheckCmd+0x8a4>)
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800375e:	b29a      	uxth	r2, r3
 8003760:	4b09      	ldr	r3, [pc, #36]	; (8003788 <ValveCheckCmd+0x8a4>)
 8003762:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV8 is ON...\n");
 8003764:	491d      	ldr	r1, [pc, #116]	; (80037dc <ValveCheckCmd+0x8f8>)
 8003766:	480a      	ldr	r0, [pc, #40]	; (8003790 <ValveCheckCmd+0x8ac>)
 8003768:	f7fd fba4 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <ValveCheckCmd+0x8a0>)
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
					v8=1;
 8003772:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <ValveCheckCmd+0x8fc>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	e1bb      	b.n	8003af2 <ValveCheckCmd+0xc0e>
 800377a:	bf00      	nop
 800377c:	200001b0 	.word	0x200001b0
 8003780:	200000d0 	.word	0x200000d0
 8003784:	20003120 	.word	0x20003120
 8003788:	200033e4 	.word	0x200033e4
 800378c:	08006f6c 	.word	0x08006f6c
 8003790:	20003320 	.word	0x20003320
 8003794:	20003298 	.word	0x20003298
 8003798:	08006f80 	.word	0x08006f80
 800379c:	200000d4 	.word	0x200000d4
 80037a0:	08006f9c 	.word	0x08006f9c
 80037a4:	20000198 	.word	0x20000198
 80037a8:	08006fac 	.word	0x08006fac
 80037ac:	200000d8 	.word	0x200000d8
 80037b0:	08006fc4 	.word	0x08006fc4
 80037b4:	08006fd8 	.word	0x08006fd8
 80037b8:	200000dc 	.word	0x200000dc
 80037bc:	48000400 	.word	0x48000400
 80037c0:	08006ff4 	.word	0x08006ff4
 80037c4:	200001b8 	.word	0x200001b8
 80037c8:	08007004 	.word	0x08007004
 80037cc:	200000e0 	.word	0x200000e0
 80037d0:	0800701c 	.word	0x0800701c
 80037d4:	08007030 	.word	0x08007030
 80037d8:	200000e4 	.word	0x200000e4
 80037dc:	0800704c 	.word	0x0800704c
 80037e0:	200033d4 	.word	0x200033d4
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin)){
 80037e4:	4b98      	ldr	r3, [pc, #608]	; (8003a48 <ValveCheckCmd+0xb64>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8182 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 80037ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037f2:	4896      	ldr	r0, [pc, #600]	; (8003a4c <ValveCheckCmd+0xb68>)
 80037f4:	f000 fe1e 	bl	8004434 <HAL_GPIO_ReadPin>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 8179 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV8 is already ON...\n");
 8003800:	4993      	ldr	r1, [pc, #588]	; (8003a50 <ValveCheckCmd+0xb6c>)
 8003802:	4894      	ldr	r0, [pc, #592]	; (8003a54 <ValveCheckCmd+0xb70>)
 8003804:	f7fd fb56 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 8003808:	4b8f      	ldr	r3, [pc, #572]	; (8003a48 <ValveCheckCmd+0xb64>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e170      	b.n	8003af2 <ValveCheckCmd+0xc0e>
				}
			}
			else if (command == SOV8OFF){
 8003810:	4b91      	ldr	r3, [pc, #580]	; (8003a58 <ValveCheckCmd+0xb74>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4b91      	ldr	r3, [pc, #580]	; (8003a5c <ValveCheckCmd+0xb78>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d134      	bne.n	8003886 <ValveCheckCmd+0x9a2>

				if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin)){
 800381c:	4b8a      	ldr	r3, [pc, #552]	; (8003a48 <ValveCheckCmd+0xb64>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01a      	beq.n	800385a <ValveCheckCmd+0x976>
 8003824:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003828:	4888      	ldr	r0, [pc, #544]	; (8003a4c <ValveCheckCmd+0xb68>)
 800382a:	f000 fe03 	bl	8004434 <HAL_GPIO_ReadPin>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d012      	beq.n	800385a <ValveCheckCmd+0x976>
					valves_selected &= 0X37F;
 8003834:	4b8a      	ldr	r3, [pc, #552]	; (8003a60 <ValveCheckCmd+0xb7c>)
 8003836:	881a      	ldrh	r2, [r3, #0]
 8003838:	f240 337f 	movw	r3, #895	; 0x37f
 800383c:	4013      	ands	r3, r2
 800383e:	b29a      	uxth	r2, r3
 8003840:	4b87      	ldr	r3, [pc, #540]	; (8003a60 <ValveCheckCmd+0xb7c>)
 8003842:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV8 is OFF...\n");
 8003844:	4987      	ldr	r1, [pc, #540]	; (8003a64 <ValveCheckCmd+0xb80>)
 8003846:	4883      	ldr	r0, [pc, #524]	; (8003a54 <ValveCheckCmd+0xb70>)
 8003848:	f7fd fb34 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 800384c:	4b7e      	ldr	r3, [pc, #504]	; (8003a48 <ValveCheckCmd+0xb64>)
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
					v8=0;
 8003852:	4b85      	ldr	r3, [pc, #532]	; (8003a68 <ValveCheckCmd+0xb84>)
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	e14b      	b.n	8003af2 <ValveCheckCmd+0xc0e>
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin))){
 800385a:	4b7b      	ldr	r3, [pc, #492]	; (8003a48 <ValveCheckCmd+0xb64>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 8147 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 8003864:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003868:	4878      	ldr	r0, [pc, #480]	; (8003a4c <ValveCheckCmd+0xb68>)
 800386a:	f000 fde3 	bl	8004434 <HAL_GPIO_ReadPin>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	f040 813e 	bne.w	8003af2 <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV8 is already OFF...\n");
 8003876:	497d      	ldr	r1, [pc, #500]	; (8003a6c <ValveCheckCmd+0xb88>)
 8003878:	4876      	ldr	r0, [pc, #472]	; (8003a54 <ValveCheckCmd+0xb70>)
 800387a:	f7fd fb1b 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 800387e:	4b72      	ldr	r3, [pc, #456]	; (8003a48 <ValveCheckCmd+0xb64>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	e135      	b.n	8003af2 <ValveCheckCmd+0xc0e>
				}
			}
			else if(command == SOV9ON){
 8003886:	4b74      	ldr	r3, [pc, #464]	; (8003a58 <ValveCheckCmd+0xb74>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4b79      	ldr	r3, [pc, #484]	; (8003a70 <ValveCheckCmd+0xb8c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d133      	bne.n	80038fa <ValveCheckCmd+0xa16>


				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin))){
 8003892:	4b6d      	ldr	r3, [pc, #436]	; (8003a48 <ValveCheckCmd+0xb64>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d019      	beq.n	80038ce <ValveCheckCmd+0x9ea>
 800389a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800389e:	486b      	ldr	r0, [pc, #428]	; (8003a4c <ValveCheckCmd+0xb68>)
 80038a0:	f000 fdc8 	bl	8004434 <HAL_GPIO_ReadPin>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d111      	bne.n	80038ce <ValveCheckCmd+0x9ea>
					valves_selected |= (uint16_t)SOV9;
 80038aa:	4b6d      	ldr	r3, [pc, #436]	; (8003a60 <ValveCheckCmd+0xb7c>)
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	4b6a      	ldr	r3, [pc, #424]	; (8003a60 <ValveCheckCmd+0xb7c>)
 80038b6:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV9 is ON...\n");
 80038b8:	496e      	ldr	r1, [pc, #440]	; (8003a74 <ValveCheckCmd+0xb90>)
 80038ba:	4866      	ldr	r0, [pc, #408]	; (8003a54 <ValveCheckCmd+0xb70>)
 80038bc:	f7fd fafa 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 80038c0:	4b61      	ldr	r3, [pc, #388]	; (8003a48 <ValveCheckCmd+0xb64>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
					v9=1;
 80038c6:	4b6c      	ldr	r3, [pc, #432]	; (8003a78 <ValveCheckCmd+0xb94>)
 80038c8:	2201      	movs	r2, #1
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	e111      	b.n	8003af2 <ValveCheckCmd+0xc0e>
				}
				else if(cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin)){
 80038ce:	4b5e      	ldr	r3, [pc, #376]	; (8003a48 <ValveCheckCmd+0xb64>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 810d 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 80038d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038dc:	485b      	ldr	r0, [pc, #364]	; (8003a4c <ValveCheckCmd+0xb68>)
 80038de:	f000 fda9 	bl	8004434 <HAL_GPIO_ReadPin>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8104 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV9 is already ON...\n");
 80038ea:	4964      	ldr	r1, [pc, #400]	; (8003a7c <ValveCheckCmd+0xb98>)
 80038ec:	4859      	ldr	r0, [pc, #356]	; (8003a54 <ValveCheckCmd+0xb70>)
 80038ee:	f7fd fae1 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 80038f2:	4b55      	ldr	r3, [pc, #340]	; (8003a48 <ValveCheckCmd+0xb64>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	e0fb      	b.n	8003af2 <ValveCheckCmd+0xc0e>

				}
			}
			else if (command == SOV9OFF){
 80038fa:	4b57      	ldr	r3, [pc, #348]	; (8003a58 <ValveCheckCmd+0xb74>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4b60      	ldr	r3, [pc, #384]	; (8003a80 <ValveCheckCmd+0xb9c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d134      	bne.n	8003970 <ValveCheckCmd+0xa8c>


				if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin)){
 8003906:	4b50      	ldr	r3, [pc, #320]	; (8003a48 <ValveCheckCmd+0xb64>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01a      	beq.n	8003944 <ValveCheckCmd+0xa60>
 800390e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003912:	484e      	ldr	r0, [pc, #312]	; (8003a4c <ValveCheckCmd+0xb68>)
 8003914:	f000 fd8e 	bl	8004434 <HAL_GPIO_ReadPin>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d012      	beq.n	8003944 <ValveCheckCmd+0xa60>
					valves_selected &= 0X2FF;
 800391e:	4b50      	ldr	r3, [pc, #320]	; (8003a60 <ValveCheckCmd+0xb7c>)
 8003920:	881a      	ldrh	r2, [r3, #0]
 8003922:	f240 23ff 	movw	r3, #767	; 0x2ff
 8003926:	4013      	ands	r3, r2
 8003928:	b29a      	uxth	r2, r3
 800392a:	4b4d      	ldr	r3, [pc, #308]	; (8003a60 <ValveCheckCmd+0xb7c>)
 800392c:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV9 is OFF...\n");
 800392e:	4955      	ldr	r1, [pc, #340]	; (8003a84 <ValveCheckCmd+0xba0>)
 8003930:	4848      	ldr	r0, [pc, #288]	; (8003a54 <ValveCheckCmd+0xb70>)
 8003932:	f7fd fabf 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 8003936:	4b44      	ldr	r3, [pc, #272]	; (8003a48 <ValveCheckCmd+0xb64>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
					v9=0;
 800393c:	4b4e      	ldr	r3, [pc, #312]	; (8003a78 <ValveCheckCmd+0xb94>)
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	e0d6      	b.n	8003af2 <ValveCheckCmd+0xc0e>
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin))){
 8003944:	4b40      	ldr	r3, [pc, #256]	; (8003a48 <ValveCheckCmd+0xb64>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80d2 	beq.w	8003af2 <ValveCheckCmd+0xc0e>
 800394e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003952:	483e      	ldr	r0, [pc, #248]	; (8003a4c <ValveCheckCmd+0xb68>)
 8003954:	f000 fd6e 	bl	8004434 <HAL_GPIO_ReadPin>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	f040 80c9 	bne.w	8003af2 <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV9 is already OFF...\n");
 8003960:	4949      	ldr	r1, [pc, #292]	; (8003a88 <ValveCheckCmd+0xba4>)
 8003962:	483c      	ldr	r0, [pc, #240]	; (8003a54 <ValveCheckCmd+0xb70>)
 8003964:	f7fd faa6 	bl	8000eb4 <UART_SendMessage>
					cmd_flag = FALSE;
 8003968:	4b37      	ldr	r3, [pc, #220]	; (8003a48 <ValveCheckCmd+0xb64>)
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	e0c0      	b.n	8003af2 <ValveCheckCmd+0xc0e>
				}
			}
			else if (command == valve_status && cmd_flag){
 8003970:	4b39      	ldr	r3, [pc, #228]	; (8003a58 <ValveCheckCmd+0xb74>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b45      	ldr	r3, [pc, #276]	; (8003a8c <ValveCheckCmd+0xba8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d13c      	bne.n	80039f6 <ValveCheckCmd+0xb12>
 800397c:	4b32      	ldr	r3, [pc, #200]	; (8003a48 <ValveCheckCmd+0xb64>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d038      	beq.n	80039f6 <ValveCheckCmd+0xb12>

				 int len = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	613b      	str	r3, [r7, #16]
				  sprintf(buffer,"\n*** Valves and Igniters Status ***\r\n\n SOV1: %d\r\n"
 8003988:	4b41      	ldr	r3, [pc, #260]	; (8003a90 <ValveCheckCmd+0xbac>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	4b41      	ldr	r3, [pc, #260]	; (8003a94 <ValveCheckCmd+0xbb0>)
 8003990:	6819      	ldr	r1, [r3, #0]
 8003992:	6079      	str	r1, [r7, #4]
 8003994:	4b40      	ldr	r3, [pc, #256]	; (8003a98 <ValveCheckCmd+0xbb4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a40      	ldr	r2, [pc, #256]	; (8003a9c <ValveCheckCmd+0xbb8>)
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	4940      	ldr	r1, [pc, #256]	; (8003aa0 <ValveCheckCmd+0xbbc>)
 800399e:	6809      	ldr	r1, [r1, #0]
 80039a0:	4840      	ldr	r0, [pc, #256]	; (8003aa4 <ValveCheckCmd+0xbc0>)
 80039a2:	6800      	ldr	r0, [r0, #0]
 80039a4:	6038      	str	r0, [r7, #0]
 80039a6:	4c40      	ldr	r4, [pc, #256]	; (8003aa8 <ValveCheckCmd+0xbc4>)
 80039a8:	6824      	ldr	r4, [r4, #0]
 80039aa:	4d2f      	ldr	r5, [pc, #188]	; (8003a68 <ValveCheckCmd+0xb84>)
 80039ac:	682d      	ldr	r5, [r5, #0]
 80039ae:	4e32      	ldr	r6, [pc, #200]	; (8003a78 <ValveCheckCmd+0xb94>)
 80039b0:	6836      	ldr	r6, [r6, #0]
 80039b2:	483e      	ldr	r0, [pc, #248]	; (8003aac <ValveCheckCmd+0xbc8>)
 80039b4:	6800      	ldr	r0, [r0, #0]
 80039b6:	9007      	str	r0, [sp, #28]
 80039b8:	9606      	str	r6, [sp, #24]
 80039ba:	9505      	str	r5, [sp, #20]
 80039bc:	9404      	str	r4, [sp, #16]
 80039be:	6838      	ldr	r0, [r7, #0]
 80039c0:	9003      	str	r0, [sp, #12]
 80039c2:	9102      	str	r1, [sp, #8]
 80039c4:	9201      	str	r2, [sp, #4]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	4938      	ldr	r1, [pc, #224]	; (8003ab0 <ValveCheckCmd+0xbcc>)
 80039ce:	4839      	ldr	r0, [pc, #228]	; (8003ab4 <ValveCheckCmd+0xbd0>)
 80039d0:	f002 fbd4 	bl	800617c <siprintf>
						                   " SOV2: %d\r\n SOV3: %d\r\n SOV4: %d\r\n SOV5: %d\r\n SOV6: %d\r\n"
						                   " SOV7: %d\r\n SOV8: %d\r\n SOV9: %d\r\n IG:   %d\r\n",v1, v2, v3,\
										   v4,v5,v6,v7,v8,v9,ignit);
				  len =strlen(buffer);
 80039d4:	4837      	ldr	r0, [pc, #220]	; (8003ab4 <ValveCheckCmd+0xbd0>)
 80039d6:	f7fc fbfb 	bl	80001d0 <strlen>
 80039da:	4603      	mov	r3, r0
 80039dc:	613b      	str	r3, [r7, #16]
				  HAL_UART_Transmit(&huart2, buffer, len, 1000);
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039e6:	4933      	ldr	r1, [pc, #204]	; (8003ab4 <ValveCheckCmd+0xbd0>)
 80039e8:	481a      	ldr	r0, [pc, #104]	; (8003a54 <ValveCheckCmd+0xb70>)
 80039ea:	f001 fc13 	bl	8005214 <HAL_UART_Transmit>
				  cmd_flag = FALSE;
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <ValveCheckCmd+0xb64>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
			else if (command == valve_status && cmd_flag){
 80039f4:	e07d      	b.n	8003af2 <ValveCheckCmd+0xc0e>
			}
            /*********************************************/
            // Auto cycling valves
			else if (command == cycle_valves && cmd_flag ){
 80039f6:	4b18      	ldr	r3, [pc, #96]	; (8003a58 <ValveCheckCmd+0xb74>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4b2f      	ldr	r3, [pc, #188]	; (8003ab8 <ValveCheckCmd+0xbd4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d15e      	bne.n	8003ac0 <ValveCheckCmd+0xbdc>
 8003a02:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <ValveCheckCmd+0xb64>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d05a      	beq.n	8003ac0 <ValveCheckCmd+0xbdc>
				    UART_SendMessage(&huart2, " Auto cycling valves...\n");
 8003a0a:	492c      	ldr	r1, [pc, #176]	; (8003abc <ValveCheckCmd+0xbd8>)
 8003a0c:	4811      	ldr	r0, [pc, #68]	; (8003a54 <ValveCheckCmd+0xb70>)
 8003a0e:	f7fd fa51 	bl	8000eb4 <UART_SendMessage>
			    	cmd_flag = FALSE;
 8003a12:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <ValveCheckCmd+0xb64>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]

                 //Set all the valves off before starting
			    	valves_selected = 0;
 8003a18:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <ValveCheckCmd+0xb7c>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	801a      	strh	r2, [r3, #0]
			    	ctrl->valveTarget  = valves_selected;
 8003a1e:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <ValveCheckCmd+0xb7c>)
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30

			    	while(command == cycle_valves){
 8003a28:	e006      	b.n	8003a38 <ValveCheckCmd+0xb54>
			    			success &= CycleValves(ctrl);
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f884 	bl	8003b38 <CycleValves>
 8003a30:	4602      	mov	r2, r0
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	4013      	ands	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
			    	while(command == cycle_valves){
 8003a38:	4b07      	ldr	r3, [pc, #28]	; (8003a58 <ValveCheckCmd+0xb74>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <ValveCheckCmd+0xbd4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d0f2      	beq.n	8003a2a <ValveCheckCmd+0xb46>
			else if (command == cycle_valves && cmd_flag ){
 8003a44:	e055      	b.n	8003af2 <ValveCheckCmd+0xc0e>
 8003a46:	bf00      	nop
 8003a48:	20003120 	.word	0x20003120
 8003a4c:	48000400 	.word	0x48000400
 8003a50:	0800705c 	.word	0x0800705c
 8003a54:	20003320 	.word	0x20003320
 8003a58:	200001b0 	.word	0x200001b0
 8003a5c:	200000e8 	.word	0x200000e8
 8003a60:	200033e4 	.word	0x200033e4
 8003a64:	08007074 	.word	0x08007074
 8003a68:	200033d4 	.word	0x200033d4
 8003a6c:	08007088 	.word	0x08007088
 8003a70:	200000ec 	.word	0x200000ec
 8003a74:	080070a4 	.word	0x080070a4
 8003a78:	200001b4 	.word	0x200001b4
 8003a7c:	080070b4 	.word	0x080070b4
 8003a80:	200000f0 	.word	0x200000f0
 8003a84:	080070cc 	.word	0x080070cc
 8003a88:	080070e0 	.word	0x080070e0
 8003a8c:	20000098 	.word	0x20000098
 8003a90:	200001a0 	.word	0x200001a0
 8003a94:	20003228 	.word	0x20003228
 8003a98:	20000224 	.word	0x20000224
 8003a9c:	200033d8 	.word	0x200033d8
 8003aa0:	20003298 	.word	0x20003298
 8003aa4:	20000198 	.word	0x20000198
 8003aa8:	200001b8 	.word	0x200001b8
 8003aac:	2000310c 	.word	0x2000310c
 8003ab0:	080070fc 	.word	0x080070fc
 8003ab4:	20003128 	.word	0x20003128
 8003ab8:	2000009c 	.word	0x2000009c
 8003abc:	08007194 	.word	0x08007194
			    		}// end of while loop
			}


			else if(command == cycle_voff && cmd_flag){
 8003ac0:	4b17      	ldr	r3, [pc, #92]	; (8003b20 <ValveCheckCmd+0xc3c>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <ValveCheckCmd+0xc40>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d112      	bne.n	8003af2 <ValveCheckCmd+0xc0e>
 8003acc:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <ValveCheckCmd+0xc44>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00e      	beq.n	8003af2 <ValveCheckCmd+0xc0e>
			    		//Set all the valves off before starting
			    		valves_selected = 0;
 8003ad4:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <ValveCheckCmd+0xc48>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	801a      	strh	r2, [r3, #0]
			    		ctrl->valveTarget  = valves_selected;
 8003ada:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <ValveCheckCmd+0xc48>)
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
			    		UART_SendMessage(&huart2, " Auto cycling valves OFF...\n");
 8003ae4:	4912      	ldr	r1, [pc, #72]	; (8003b30 <ValveCheckCmd+0xc4c>)
 8003ae6:	4813      	ldr	r0, [pc, #76]	; (8003b34 <ValveCheckCmd+0xc50>)
 8003ae8:	f7fd f9e4 	bl	8000eb4 <UART_SendMessage>
			    		cmd_flag = FALSE;
 8003aec:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <ValveCheckCmd+0xc44>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
			   } // end of else if for cycle_valves
            /*************************************************************/

    	   // Set valves
			ctrl->valveTarget = valves_selected;
 8003af2:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <ValveCheckCmd+0xc48>)
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	631a      	str	r2, [r3, #48]	; 0x30
			success &= ValveStateSetter(ctrl->valveTarget);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff f8f7 	bl	8002cf4 <ValveStateSetter>
 8003b06:	4602      	mov	r2, r0
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]
			ctrl->valveConfiguration = StateConfiguration();
 8003b0e:	f7ff f873 	bl	8002bf8 <StateConfiguration>
 8003b12:	4602      	mov	r2, r0
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003b18:	bf00      	nop
 8003b1a:	371c      	adds	r7, #28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b20:	200001b0 	.word	0x200001b0
 8003b24:	200000a0 	.word	0x200000a0
 8003b28:	20003120 	.word	0x20003120
 8003b2c:	200033e4 	.word	0x200033e4
 8003b30:	080071b0 	.word	0x080071b0
 8003b34:	20003320 	.word	0x20003320

08003b38 <CycleValves>:

uint32_t CycleValves(struct StateVars *ctrl)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
	uint32_t success = TRUE;
 8003b40:	2301      	movs	r3, #1
 8003b42:	60fb      	str	r3, [r7, #12]
	HAL_Delay(900);
 8003b44:	f44f 7061 	mov.w	r0, #900	; 0x384
 8003b48:	f000 f958 	bl	8003dfc <HAL_Delay>

	if(ctrl->valveTarget == 0)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d103      	bne.n	8003b5c <CycleValves+0x24>
	{
		ctrl->valveTarget = 0x1;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30
 8003b5a:	e012      	b.n	8003b82 <CycleValves+0x4a>
	}
	else if (ctrl->valveTarget <=512){
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b64:	d805      	bhi.n	8003b72 <CycleValves+0x3a>

		ctrl->valveTarget *= 2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	005a      	lsls	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b70:	e007      	b.n	8003b82 <CycleValves+0x4a>
	}
	else if (ctrl->valveTarget > 512){
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7a:	d902      	bls.n	8003b82 <CycleValves+0x4a>
		ctrl->valveTarget = 0 ;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	631a      	str	r2, [r3, #48]	; 0x30
	}


	success &= ValveStateSetter(ctrl->valveTarget);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff f8b4 	bl	8002cf4 <ValveStateSetter>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4013      	ands	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 8003b94:	f7ff f830 	bl	8002bf8 <StateConfiguration>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	else if (!( HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin)){
		 UART_SendMessage(&huart2, " SOV1 OFF...\n");
	}
	else if ().....*/
	return success;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <ValveCheck>:
#include <messages.h>
#include "ring_buffer.h"


uint32_t ValveCheck(struct StateVars *ctrl)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
	uint32_t success = TRUE;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	60fb      	str	r3, [r7, #12]
	// Configure the Valves depending in the State.
	ctrl->valveConfiguration = StateConfiguration();
 8003bb4:	f7ff f820 	bl	8002bf8 <StateConfiguration>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	62da      	str	r2, [r3, #44]	; 0x2c


    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fe ffdb 	bl	8002b80 <VerifyState>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d053      	beq.n	8003c78 <ValveCheck+0xd0>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe ffd2 	bl	8002b80 <VerifyState>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d04a      	beq.n	8003c78 <ValveCheck+0xd0>
    {
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d036      	beq.n	8003c5e <ValveCheck+0xb6>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8   SOV9  IG1
    		//|  01 |  01  |  01  |   01  |  01  |  01 |  01  |  01  |  01 |  01 |

    		StateStatus(ctrl);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fe ff7b 	bl	8002aec <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d009      	beq.n	8003c1a <ValveCheck+0x72>
    	    {
    			//Start by setting all the valves OFF
    			ctrl->valveTarget  = !((uint16_t)SOV1 \
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30
    					|(uint16_t)SOV6 \
    					|(uint16_t)SOV7 \
    					|(uint16_t)SOV8 \
    					|(uint16_t)SOV9 \
						|(uint16_t)IG1);
    		    valves_selected = 0;
 8003c0c:	4b25      	ldr	r3, [pc, #148]	; (8003ca4 <ValveCheck+0xfc>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	801a      	strh	r2, [r3, #0]
    			success = StateInitialize(ctrl);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff f942 	bl	8002e9c <StateInitialize>
 8003c18:	60f8      	str	r0, [r7, #12]
    	    }
    		// Process a Marionette Data Packet
    		ringBufferRead();
 8003c1a:	f7fe fbd7 	bl	80023cc <ringBufferRead>

    		// Check for command changes
    		ProcessCommands(ctrl);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fd fafa 	bl	8001218 <ProcessCommands>

    		// Function to handle individual valves.
    		ValveCheckCmd(ctrl);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff f95d 	bl	8002ee4 <ValveCheckCmd>

    		//If the Valve configuration is the same as the ValveTarget set success as 1 for TRUE or 0 FALSE
    		success &= (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d101      	bne.n	8003c3a <ValveCheck+0x92>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <ValveCheck+0x94>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]

    		// Increment state counter // Testing Purposes
			ctrl->stateCounter++;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c54:	d11f      	bne.n	8003c96 <ValveCheck+0xee>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 8003c5c:	e01b      	b.n	8003c96 <ValveCheck+0xee>
    	}else{
    		// If current State dosn't match the expected current State
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, VALVE_CHECK, ctrl->currentState);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c64:	461a      	mov	r2, r3
 8003c66:	2101      	movs	r1, #1
 8003c68:	480f      	ldr	r0, [pc, #60]	; (8003ca8 <ValveCheck+0x100>)
 8003c6a:	f7fe f8b7 	bl	8001ddc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8003c6e:	490e      	ldr	r1, [pc, #56]	; (8003ca8 <ValveCheck+0x100>)
 8003c70:	480e      	ldr	r0, [pc, #56]	; (8003cac <ValveCheck+0x104>)
 8003c72:	f7fd f91f 	bl	8000eb4 <UART_SendMessage>
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 8003c76:	e00e      	b.n	8003c96 <ValveCheck+0xee>
    	}
    }else{

    	// If current State and Last State dosnt match the expected states.
    	// Log Invalid State and let the user know.
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c84:	461a      	mov	r2, r3
 8003c86:	4808      	ldr	r0, [pc, #32]	; (8003ca8 <ValveCheck+0x100>)
 8003c88:	f7fe f922 	bl	8001ed0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8003c8c:	4906      	ldr	r1, [pc, #24]	; (8003ca8 <ValveCheck+0x100>)
 8003c8e:	4807      	ldr	r0, [pc, #28]	; (8003cac <ValveCheck+0x104>)
 8003c90:	f7fd f910 	bl	8000eb4 <UART_SendMessage>
 8003c94:	e000      	b.n	8003c98 <ValveCheck+0xf0>
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 8003c96:	bf00      	nop
    }
	return success;
 8003c98:	68fb      	ldr	r3, [r7, #12]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200033e4 	.word	0x200033e4
 8003ca8:	200001bc 	.word	0x200001bc
 8003cac:	20003320 	.word	0x20003320

08003cb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ce8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003cb4:	f7fe fe6c 	bl	8002990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003cb8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003cba:	e003      	b.n	8003cc4 <LoopCopyDataInit>

08003cbc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003cbe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003cc0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003cc2:	3104      	adds	r1, #4

08003cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003cc4:	480a      	ldr	r0, [pc, #40]	; (8003cf0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003cc8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003cca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003ccc:	d3f6      	bcc.n	8003cbc <CopyDataInit>
	ldr	r2, =_sbss
 8003cce:	4a0a      	ldr	r2, [pc, #40]	; (8003cf8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003cd0:	e002      	b.n	8003cd8 <LoopFillZerobss>

08003cd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003cd2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003cd4:	f842 3b04 	str.w	r3, [r2], #4

08003cd8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003cd8:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <LoopForever+0x16>)
	cmp	r2, r3
 8003cda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003cdc:	d3f9      	bcc.n	8003cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003cde:	f002 fa21 	bl	8006124 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ce2:	f7fd f89d 	bl	8000e20 <main>

08003ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8003ce6:	e7fe      	b.n	8003ce6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003ce8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003cec:	0800725c 	.word	0x0800725c
	ldr	r0, =_sdata
 8003cf0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003cf4:	20000160 	.word	0x20000160
	ldr	r2, =_sbss
 8003cf8:	20000160 	.word	0x20000160
	ldr	r3, = _ebss
 8003cfc:	200033f0 	.word	0x200033f0

08003d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d00:	e7fe      	b.n	8003d00 <ADC1_2_IRQHandler>
	...

08003d04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <HAL_Init+0x3c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a0b      	ldr	r2, [pc, #44]	; (8003d40 <HAL_Init+0x3c>)
 8003d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d1a:	2003      	movs	r0, #3
 8003d1c:	f000 f960 	bl	8003fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d20:	2000      	movs	r0, #0
 8003d22:	f000 f80f 	bl	8003d44 <HAL_InitTick>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	71fb      	strb	r3, [r7, #7]
 8003d30:	e001      	b.n	8003d36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d32:	f7fe fd4d 	bl	80027d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d36:	79fb      	ldrb	r3, [r7, #7]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40022000 	.word	0x40022000

08003d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003d50:	4b17      	ldr	r3, [pc, #92]	; (8003db0 <HAL_InitTick+0x6c>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d023      	beq.n	8003da0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003d58:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <HAL_InitTick+0x70>)
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <HAL_InitTick+0x6c>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	4619      	mov	r1, r3
 8003d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 f96b 	bl	800404a <HAL_SYSTICK_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10f      	bne.n	8003d9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b0f      	cmp	r3, #15
 8003d7e:	d809      	bhi.n	8003d94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d80:	2200      	movs	r2, #0
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	f04f 30ff 	mov.w	r0, #4294967295
 8003d88:	f000 f935 	bl	8003ff6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d8c:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <HAL_InitTick+0x74>)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	e007      	b.n	8003da4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
 8003d98:	e004      	b.n	8003da4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	73fb      	strb	r3, [r7, #15]
 8003d9e:	e001      	b.n	8003da4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	200000f8 	.word	0x200000f8
 8003db4:	20000094 	.word	0x20000094
 8003db8:	200000f4 	.word	0x200000f4

08003dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003dc0:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <HAL_IncTick+0x20>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <HAL_IncTick+0x24>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4413      	add	r3, r2
 8003dcc:	4a04      	ldr	r2, [pc, #16]	; (8003de0 <HAL_IncTick+0x24>)
 8003dce:	6013      	str	r3, [r2, #0]
}
 8003dd0:	bf00      	nop
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	200000f8 	.word	0x200000f8
 8003de0:	200033e8 	.word	0x200033e8

08003de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  return uwTick;
 8003de8:	4b03      	ldr	r3, [pc, #12]	; (8003df8 <HAL_GetTick+0x14>)
 8003dea:	681b      	ldr	r3, [r3, #0]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	200033e8 	.word	0x200033e8

08003dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e04:	f7ff ffee 	bl	8003de4 <HAL_GetTick>
 8003e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e14:	d005      	beq.n	8003e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <HAL_Delay+0x40>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e22:	bf00      	nop
 8003e24:	f7ff ffde 	bl	8003de4 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d8f7      	bhi.n	8003e24 <HAL_Delay+0x28>
  {
  }
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	200000f8 	.word	0x200000f8

08003e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e50:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <__NVIC_SetPriorityGrouping+0x44>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e72:	4a04      	ldr	r2, [pc, #16]	; (8003e84 <__NVIC_SetPriorityGrouping+0x44>)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	60d3      	str	r3, [r2, #12]
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	e000ed00 	.word	0xe000ed00

08003e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e8c:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	0a1b      	lsrs	r3, r3, #8
 8003e92:	f003 0307 	and.w	r3, r3, #7
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	e000ed00 	.word	0xe000ed00

08003ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	db0b      	blt.n	8003ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	f003 021f 	and.w	r2, r3, #31
 8003ebc:	4907      	ldr	r1, [pc, #28]	; (8003edc <__NVIC_EnableIRQ+0x38>)
 8003ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	2001      	movs	r0, #1
 8003ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8003eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	e000e100 	.word	0xe000e100

08003ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	6039      	str	r1, [r7, #0]
 8003eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	db0a      	blt.n	8003f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	490c      	ldr	r1, [pc, #48]	; (8003f2c <__NVIC_SetPriority+0x4c>)
 8003efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efe:	0112      	lsls	r2, r2, #4
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	440b      	add	r3, r1
 8003f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f08:	e00a      	b.n	8003f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	4908      	ldr	r1, [pc, #32]	; (8003f30 <__NVIC_SetPriority+0x50>)
 8003f10:	79fb      	ldrb	r3, [r7, #7]
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	3b04      	subs	r3, #4
 8003f18:	0112      	lsls	r2, r2, #4
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	761a      	strb	r2, [r3, #24]
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	e000e100 	.word	0xe000e100
 8003f30:	e000ed00 	.word	0xe000ed00

08003f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b089      	sub	sp, #36	; 0x24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f1c3 0307 	rsb	r3, r3, #7
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	bf28      	it	cs
 8003f52:	2304      	movcs	r3, #4
 8003f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	2b06      	cmp	r3, #6
 8003f5c:	d902      	bls.n	8003f64 <NVIC_EncodePriority+0x30>
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	3b03      	subs	r3, #3
 8003f62:	e000      	b.n	8003f66 <NVIC_EncodePriority+0x32>
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f68:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	43da      	mvns	r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	401a      	ands	r2, r3
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	fa01 f303 	lsl.w	r3, r1, r3
 8003f86:	43d9      	mvns	r1, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f8c:	4313      	orrs	r3, r2
         );
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3724      	adds	r7, #36	; 0x24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
	...

08003f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fac:	d301      	bcc.n	8003fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e00f      	b.n	8003fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <SysTick_Config+0x40>)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fba:	210f      	movs	r1, #15
 8003fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc0:	f7ff ff8e 	bl	8003ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fc4:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <SysTick_Config+0x40>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fca:	4b04      	ldr	r3, [pc, #16]	; (8003fdc <SysTick_Config+0x40>)
 8003fcc:	2207      	movs	r2, #7
 8003fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	e000e010 	.word	0xe000e010

08003fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff ff29 	bl	8003e40 <__NVIC_SetPriorityGrouping>
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b086      	sub	sp, #24
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	607a      	str	r2, [r7, #4]
 8004002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004008:	f7ff ff3e 	bl	8003e88 <__NVIC_GetPriorityGrouping>
 800400c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	6978      	ldr	r0, [r7, #20]
 8004014:	f7ff ff8e 	bl	8003f34 <NVIC_EncodePriority>
 8004018:	4602      	mov	r2, r0
 800401a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800401e:	4611      	mov	r1, r2
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ff5d 	bl	8003ee0 <__NVIC_SetPriority>
}
 8004026:	bf00      	nop
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	4603      	mov	r3, r0
 8004036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff ff31 	bl	8003ea4 <__NVIC_EnableIRQ>
}
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff ffa2 	bl	8003f9c <SysTick_Config>
 8004058:	4603      	mov	r3, r0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d005      	beq.n	8004086 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2204      	movs	r2, #4
 800407e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	73fb      	strb	r3, [r7, #15]
 8004084:	e029      	b.n	80040da <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 020e 	bic.w	r2, r2, #14
 8004094:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0201 	bic.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	f003 021c 	and.w	r2, r3, #28
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	2101      	movs	r1, #1
 80040b4:	fa01 f202 	lsl.w	r2, r1, r2
 80040b8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	4798      	blx	r3
    }
  }
  return status;
 80040da:	7bfb      	ldrb	r3, [r7, #15]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040f2:	e17f      	b.n	80043f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	2101      	movs	r1, #1
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	4013      	ands	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 8171 	beq.w	80043ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d00b      	beq.n	800412c <HAL_GPIO_Init+0x48>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d007      	beq.n	800412c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004120:	2b11      	cmp	r3, #17
 8004122:	d003      	beq.n	800412c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b12      	cmp	r3, #18
 800412a:	d130      	bne.n	800418e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	2203      	movs	r2, #3
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	43db      	mvns	r3, r3
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4013      	ands	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	4313      	orrs	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004162:	2201      	movs	r2, #1
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43db      	mvns	r3, r3
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4013      	ands	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	091b      	lsrs	r3, r3, #4
 8004178:	f003 0201 	and.w	r2, r3, #1
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	2b03      	cmp	r3, #3
 8004198:	d118      	bne.n	80041cc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80041a0:	2201      	movs	r2, #1
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	43db      	mvns	r3, r3
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4013      	ands	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	08db      	lsrs	r3, r3, #3
 80041b6:	f003 0201 	and.w	r2, r3, #1
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	2203      	movs	r2, #3
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4013      	ands	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d003      	beq.n	800420c <HAL_GPIO_Init+0x128>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b12      	cmp	r3, #18
 800420a:	d123      	bne.n	8004254 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	08da      	lsrs	r2, r3, #3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3208      	adds	r2, #8
 8004214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004218:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	220f      	movs	r2, #15
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4013      	ands	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	08da      	lsrs	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3208      	adds	r2, #8
 800424e:	6939      	ldr	r1, [r7, #16]
 8004250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	2203      	movs	r2, #3
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	43db      	mvns	r3, r3
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4013      	ands	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 0203 	and.w	r2, r3, #3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80ac 	beq.w	80043ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004296:	4b5e      	ldr	r3, [pc, #376]	; (8004410 <HAL_GPIO_Init+0x32c>)
 8004298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429a:	4a5d      	ldr	r2, [pc, #372]	; (8004410 <HAL_GPIO_Init+0x32c>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	6613      	str	r3, [r2, #96]	; 0x60
 80042a2:	4b5b      	ldr	r3, [pc, #364]	; (8004410 <HAL_GPIO_Init+0x32c>)
 80042a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	60bb      	str	r3, [r7, #8]
 80042ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042ae:	4a59      	ldr	r2, [pc, #356]	; (8004414 <HAL_GPIO_Init+0x330>)
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	089b      	lsrs	r3, r3, #2
 80042b4:	3302      	adds	r3, #2
 80042b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	220f      	movs	r2, #15
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4013      	ands	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042d8:	d025      	beq.n	8004326 <HAL_GPIO_Init+0x242>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a4e      	ldr	r2, [pc, #312]	; (8004418 <HAL_GPIO_Init+0x334>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d01f      	beq.n	8004322 <HAL_GPIO_Init+0x23e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a4d      	ldr	r2, [pc, #308]	; (800441c <HAL_GPIO_Init+0x338>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d019      	beq.n	800431e <HAL_GPIO_Init+0x23a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a4c      	ldr	r2, [pc, #304]	; (8004420 <HAL_GPIO_Init+0x33c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d013      	beq.n	800431a <HAL_GPIO_Init+0x236>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a4b      	ldr	r2, [pc, #300]	; (8004424 <HAL_GPIO_Init+0x340>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00d      	beq.n	8004316 <HAL_GPIO_Init+0x232>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a4a      	ldr	r2, [pc, #296]	; (8004428 <HAL_GPIO_Init+0x344>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d007      	beq.n	8004312 <HAL_GPIO_Init+0x22e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a49      	ldr	r2, [pc, #292]	; (800442c <HAL_GPIO_Init+0x348>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d101      	bne.n	800430e <HAL_GPIO_Init+0x22a>
 800430a:	2306      	movs	r3, #6
 800430c:	e00c      	b.n	8004328 <HAL_GPIO_Init+0x244>
 800430e:	2307      	movs	r3, #7
 8004310:	e00a      	b.n	8004328 <HAL_GPIO_Init+0x244>
 8004312:	2305      	movs	r3, #5
 8004314:	e008      	b.n	8004328 <HAL_GPIO_Init+0x244>
 8004316:	2304      	movs	r3, #4
 8004318:	e006      	b.n	8004328 <HAL_GPIO_Init+0x244>
 800431a:	2303      	movs	r3, #3
 800431c:	e004      	b.n	8004328 <HAL_GPIO_Init+0x244>
 800431e:	2302      	movs	r3, #2
 8004320:	e002      	b.n	8004328 <HAL_GPIO_Init+0x244>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <HAL_GPIO_Init+0x244>
 8004326:	2300      	movs	r3, #0
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	f002 0203 	and.w	r2, r2, #3
 800432e:	0092      	lsls	r2, r2, #2
 8004330:	4093      	lsls	r3, r2
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004338:	4936      	ldr	r1, [pc, #216]	; (8004414 <HAL_GPIO_Init+0x330>)
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	089b      	lsrs	r3, r3, #2
 800433e:	3302      	adds	r3, #2
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004346:	4b3a      	ldr	r3, [pc, #232]	; (8004430 <HAL_GPIO_Init+0x34c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	43db      	mvns	r3, r3
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4013      	ands	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800436a:	4a31      	ldr	r2, [pc, #196]	; (8004430 <HAL_GPIO_Init+0x34c>)
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004370:	4b2f      	ldr	r3, [pc, #188]	; (8004430 <HAL_GPIO_Init+0x34c>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	43db      	mvns	r3, r3
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4013      	ands	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004394:	4a26      	ldr	r2, [pc, #152]	; (8004430 <HAL_GPIO_Init+0x34c>)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800439a:	4b25      	ldr	r3, [pc, #148]	; (8004430 <HAL_GPIO_Init+0x34c>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	43db      	mvns	r3, r3
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4013      	ands	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043be:	4a1c      	ldr	r2, [pc, #112]	; (8004430 <HAL_GPIO_Init+0x34c>)
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80043c4:	4b1a      	ldr	r3, [pc, #104]	; (8004430 <HAL_GPIO_Init+0x34c>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	43db      	mvns	r3, r3
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4013      	ands	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043e8:	4a11      	ldr	r2, [pc, #68]	; (8004430 <HAL_GPIO_Init+0x34c>)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	3301      	adds	r3, #1
 80043f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	fa22 f303 	lsr.w	r3, r2, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f47f ae78 	bne.w	80040f4 <HAL_GPIO_Init+0x10>
  }
}
 8004404:	bf00      	nop
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	40021000 	.word	0x40021000
 8004414:	40010000 	.word	0x40010000
 8004418:	48000400 	.word	0x48000400
 800441c:	48000800 	.word	0x48000800
 8004420:	48000c00 	.word	0x48000c00
 8004424:	48001000 	.word	0x48001000
 8004428:	48001400 	.word	0x48001400
 800442c:	48001800 	.word	0x48001800
 8004430:	40010400 	.word	0x40010400

08004434 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	887b      	ldrh	r3, [r7, #2]
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800444c:	2301      	movs	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
 8004450:	e001      	b.n	8004456 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004452:	2300      	movs	r3, #0
 8004454:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004456:	7bfb      	ldrb	r3, [r7, #15]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	807b      	strh	r3, [r7, #2]
 8004470:	4613      	mov	r3, r2
 8004472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004474:	787b      	ldrb	r3, [r7, #1]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800447a:	887a      	ldrh	r2, [r7, #2]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004480:	e002      	b.n	8004488 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004482:	887a      	ldrh	r2, [r7, #2]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800449e:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	88fb      	ldrh	r3, [r7, #6]
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d006      	beq.n	80044b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044aa:	4a05      	ldr	r2, [pc, #20]	; (80044c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044ac:	88fb      	ldrh	r3, [r7, #6]
 80044ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 f806 	bl	80044c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80044b8:	bf00      	nop
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40010400 	.word	0x40010400

080044c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	4603      	mov	r3, r0
 80044cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
	...

080044dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80044e0:	4b04      	ldr	r3, [pc, #16]	; (80044f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40007000 	.word	0x40007000

080044f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004506:	d130      	bne.n	800456a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004508:	4b23      	ldr	r3, [pc, #140]	; (8004598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004514:	d038      	beq.n	8004588 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004516:	4b20      	ldr	r3, [pc, #128]	; (8004598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800451e:	4a1e      	ldr	r2, [pc, #120]	; (8004598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004520:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004524:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004526:	4b1d      	ldr	r3, [pc, #116]	; (800459c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2232      	movs	r2, #50	; 0x32
 800452c:	fb02 f303 	mul.w	r3, r2, r3
 8004530:	4a1b      	ldr	r2, [pc, #108]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	0c9b      	lsrs	r3, r3, #18
 8004538:	3301      	adds	r3, #1
 800453a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800453c:	e002      	b.n	8004544 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3b01      	subs	r3, #1
 8004542:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004544:	4b14      	ldr	r3, [pc, #80]	; (8004598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800454c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004550:	d102      	bne.n	8004558 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f2      	bne.n	800453e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004558:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004564:	d110      	bne.n	8004588 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e00f      	b.n	800458a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004576:	d007      	beq.n	8004588 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004578:	4b07      	ldr	r3, [pc, #28]	; (8004598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004580:	4a05      	ldr	r2, [pc, #20]	; (8004598 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004586:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40007000 	.word	0x40007000
 800459c:	20000094 	.word	0x20000094
 80045a0:	431bde83 	.word	0x431bde83

080045a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e3d4      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045b6:	4ba1      	ldr	r3, [pc, #644]	; (800483c <HAL_RCC_OscConfig+0x298>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 030c 	and.w	r3, r3, #12
 80045be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045c0:	4b9e      	ldr	r3, [pc, #632]	; (800483c <HAL_RCC_OscConfig+0x298>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 80e4 	beq.w	80047a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d007      	beq.n	80045ee <HAL_RCC_OscConfig+0x4a>
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b0c      	cmp	r3, #12
 80045e2:	f040 808b 	bne.w	80046fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	f040 8087 	bne.w	80046fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045ee:	4b93      	ldr	r3, [pc, #588]	; (800483c <HAL_RCC_OscConfig+0x298>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <HAL_RCC_OscConfig+0x62>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e3ac      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1a      	ldr	r2, [r3, #32]
 800460a:	4b8c      	ldr	r3, [pc, #560]	; (800483c <HAL_RCC_OscConfig+0x298>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d004      	beq.n	8004620 <HAL_RCC_OscConfig+0x7c>
 8004616:	4b89      	ldr	r3, [pc, #548]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800461e:	e005      	b.n	800462c <HAL_RCC_OscConfig+0x88>
 8004620:	4b86      	ldr	r3, [pc, #536]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004626:	091b      	lsrs	r3, r3, #4
 8004628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800462c:	4293      	cmp	r3, r2
 800462e:	d223      	bcs.n	8004678 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fd3f 	bl	80050b8 <RCC_SetFlashLatencyFromMSIRange>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e38d      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004644:	4b7d      	ldr	r3, [pc, #500]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a7c      	ldr	r2, [pc, #496]	; (800483c <HAL_RCC_OscConfig+0x298>)
 800464a:	f043 0308 	orr.w	r3, r3, #8
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	4b7a      	ldr	r3, [pc, #488]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	4977      	ldr	r1, [pc, #476]	; (800483c <HAL_RCC_OscConfig+0x298>)
 800465e:	4313      	orrs	r3, r2
 8004660:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004662:	4b76      	ldr	r3, [pc, #472]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	4972      	ldr	r1, [pc, #456]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004672:	4313      	orrs	r3, r2
 8004674:	604b      	str	r3, [r1, #4]
 8004676:	e025      	b.n	80046c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004678:	4b70      	ldr	r3, [pc, #448]	; (800483c <HAL_RCC_OscConfig+0x298>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a6f      	ldr	r2, [pc, #444]	; (800483c <HAL_RCC_OscConfig+0x298>)
 800467e:	f043 0308 	orr.w	r3, r3, #8
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	4b6d      	ldr	r3, [pc, #436]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	496a      	ldr	r1, [pc, #424]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004692:	4313      	orrs	r3, r2
 8004694:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004696:	4b69      	ldr	r3, [pc, #420]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	021b      	lsls	r3, r3, #8
 80046a4:	4965      	ldr	r1, [pc, #404]	; (800483c <HAL_RCC_OscConfig+0x298>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d109      	bne.n	80046c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fcff 	bl	80050b8 <RCC_SetFlashLatencyFromMSIRange>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e34d      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046c4:	f000 fc36 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 80046c8:	4601      	mov	r1, r0
 80046ca:	4b5c      	ldr	r3, [pc, #368]	; (800483c <HAL_RCC_OscConfig+0x298>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	091b      	lsrs	r3, r3, #4
 80046d0:	f003 030f 	and.w	r3, r3, #15
 80046d4:	4a5a      	ldr	r2, [pc, #360]	; (8004840 <HAL_RCC_OscConfig+0x29c>)
 80046d6:	5cd3      	ldrb	r3, [r2, r3]
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	fa21 f303 	lsr.w	r3, r1, r3
 80046e0:	4a58      	ldr	r2, [pc, #352]	; (8004844 <HAL_RCC_OscConfig+0x2a0>)
 80046e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80046e4:	4b58      	ldr	r3, [pc, #352]	; (8004848 <HAL_RCC_OscConfig+0x2a4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff fb2b 	bl	8003d44 <HAL_InitTick>
 80046ee:	4603      	mov	r3, r0
 80046f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d052      	beq.n	800479e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	e331      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d032      	beq.n	800476a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004704:	4b4d      	ldr	r3, [pc, #308]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a4c      	ldr	r2, [pc, #304]	; (800483c <HAL_RCC_OscConfig+0x298>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004710:	f7ff fb68 	bl	8003de4 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004718:	f7ff fb64 	bl	8003de4 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e31a      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800472a:	4b44      	ldr	r3, [pc, #272]	; (800483c <HAL_RCC_OscConfig+0x298>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004736:	4b41      	ldr	r3, [pc, #260]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a40      	ldr	r2, [pc, #256]	; (800483c <HAL_RCC_OscConfig+0x298>)
 800473c:	f043 0308 	orr.w	r3, r3, #8
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	4b3e      	ldr	r3, [pc, #248]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	493b      	ldr	r1, [pc, #236]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004750:	4313      	orrs	r3, r2
 8004752:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004754:	4b39      	ldr	r3, [pc, #228]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	4936      	ldr	r1, [pc, #216]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004764:	4313      	orrs	r3, r2
 8004766:	604b      	str	r3, [r1, #4]
 8004768:	e01a      	b.n	80047a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800476a:	4b34      	ldr	r3, [pc, #208]	; (800483c <HAL_RCC_OscConfig+0x298>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a33      	ldr	r2, [pc, #204]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004770:	f023 0301 	bic.w	r3, r3, #1
 8004774:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004776:	f7ff fb35 	bl	8003de4 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800477e:	f7ff fb31 	bl	8003de4 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e2e7      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004790:	4b2a      	ldr	r3, [pc, #168]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f0      	bne.n	800477e <HAL_RCC_OscConfig+0x1da>
 800479c:	e000      	b.n	80047a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800479e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d074      	beq.n	8004896 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d005      	beq.n	80047be <HAL_RCC_OscConfig+0x21a>
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b0c      	cmp	r3, #12
 80047b6:	d10e      	bne.n	80047d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d10b      	bne.n	80047d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047be:	4b1f      	ldr	r3, [pc, #124]	; (800483c <HAL_RCC_OscConfig+0x298>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d064      	beq.n	8004894 <HAL_RCC_OscConfig+0x2f0>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d160      	bne.n	8004894 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e2c4      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047de:	d106      	bne.n	80047ee <HAL_RCC_OscConfig+0x24a>
 80047e0:	4b16      	ldr	r3, [pc, #88]	; (800483c <HAL_RCC_OscConfig+0x298>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a15      	ldr	r2, [pc, #84]	; (800483c <HAL_RCC_OscConfig+0x298>)
 80047e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	e01d      	b.n	800482a <HAL_RCC_OscConfig+0x286>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047f6:	d10c      	bne.n	8004812 <HAL_RCC_OscConfig+0x26e>
 80047f8:	4b10      	ldr	r3, [pc, #64]	; (800483c <HAL_RCC_OscConfig+0x298>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a0f      	ldr	r2, [pc, #60]	; (800483c <HAL_RCC_OscConfig+0x298>)
 80047fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	4b0d      	ldr	r3, [pc, #52]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a0c      	ldr	r2, [pc, #48]	; (800483c <HAL_RCC_OscConfig+0x298>)
 800480a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	e00b      	b.n	800482a <HAL_RCC_OscConfig+0x286>
 8004812:	4b0a      	ldr	r3, [pc, #40]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a09      	ldr	r2, [pc, #36]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	4b07      	ldr	r3, [pc, #28]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a06      	ldr	r2, [pc, #24]	; (800483c <HAL_RCC_OscConfig+0x298>)
 8004824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004828:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d01c      	beq.n	800486c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004832:	f7ff fad7 	bl	8003de4 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004838:	e011      	b.n	800485e <HAL_RCC_OscConfig+0x2ba>
 800483a:	bf00      	nop
 800483c:	40021000 	.word	0x40021000
 8004840:	080071d0 	.word	0x080071d0
 8004844:	20000094 	.word	0x20000094
 8004848:	200000f4 	.word	0x200000f4
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800484c:	f7ff faca 	bl	8003de4 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b64      	cmp	r3, #100	; 0x64
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e280      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800485e:	4baf      	ldr	r3, [pc, #700]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0x2a8>
 800486a:	e014      	b.n	8004896 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7ff faba 	bl	8003de4 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004874:	f7ff fab6 	bl	8003de4 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b64      	cmp	r3, #100	; 0x64
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e26c      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004886:	4ba5      	ldr	r3, [pc, #660]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x2d0>
 8004892:	e000      	b.n	8004896 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d060      	beq.n	8004964 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d005      	beq.n	80048b4 <HAL_RCC_OscConfig+0x310>
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b0c      	cmp	r3, #12
 80048ac:	d119      	bne.n	80048e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d116      	bne.n	80048e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048b4:	4b99      	ldr	r3, [pc, #612]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_RCC_OscConfig+0x328>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e249      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048cc:	4b93      	ldr	r3, [pc, #588]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	061b      	lsls	r3, r3, #24
 80048da:	4990      	ldr	r1, [pc, #576]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048e0:	e040      	b.n	8004964 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d023      	beq.n	8004932 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048ea:	4b8c      	ldr	r3, [pc, #560]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a8b      	ldr	r2, [pc, #556]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 80048f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f6:	f7ff fa75 	bl	8003de4 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048fe:	f7ff fa71 	bl	8003de4 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e227      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004910:	4b82      	ldr	r3, [pc, #520]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491c:	4b7f      	ldr	r3, [pc, #508]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	061b      	lsls	r3, r3, #24
 800492a:	497c      	ldr	r1, [pc, #496]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 800492c:	4313      	orrs	r3, r2
 800492e:	604b      	str	r3, [r1, #4]
 8004930:	e018      	b.n	8004964 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004932:	4b7a      	ldr	r3, [pc, #488]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a79      	ldr	r2, [pc, #484]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800493c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493e:	f7ff fa51 	bl	8003de4 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004946:	f7ff fa4d 	bl	8003de4 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e203      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004958:	4b70      	ldr	r3, [pc, #448]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1f0      	bne.n	8004946 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b00      	cmp	r3, #0
 800496e:	d03c      	beq.n	80049ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01c      	beq.n	80049b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004978:	4b68      	ldr	r3, [pc, #416]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 800497a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800497e:	4a67      	ldr	r2, [pc, #412]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004988:	f7ff fa2c 	bl	8003de4 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004990:	f7ff fa28 	bl	8003de4 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e1de      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049a2:	4b5e      	ldr	r3, [pc, #376]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 80049a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0ef      	beq.n	8004990 <HAL_RCC_OscConfig+0x3ec>
 80049b0:	e01b      	b.n	80049ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049b2:	4b5a      	ldr	r3, [pc, #360]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 80049b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b8:	4a58      	ldr	r2, [pc, #352]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c2:	f7ff fa0f 	bl	8003de4 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ca:	f7ff fa0b 	bl	8003de4 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e1c1      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049dc:	4b4f      	ldr	r3, [pc, #316]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 80049de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1ef      	bne.n	80049ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 80a6 	beq.w	8004b44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049f8:	2300      	movs	r3, #0
 80049fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80049fc:	4b47      	ldr	r3, [pc, #284]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 80049fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10d      	bne.n	8004a24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a08:	4b44      	ldr	r3, [pc, #272]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0c:	4a43      	ldr	r2, [pc, #268]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a12:	6593      	str	r3, [r2, #88]	; 0x58
 8004a14:	4b41      	ldr	r3, [pc, #260]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a20:	2301      	movs	r3, #1
 8004a22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a24:	4b3e      	ldr	r3, [pc, #248]	; (8004b20 <HAL_RCC_OscConfig+0x57c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d118      	bne.n	8004a62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a30:	4b3b      	ldr	r3, [pc, #236]	; (8004b20 <HAL_RCC_OscConfig+0x57c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a3a      	ldr	r2, [pc, #232]	; (8004b20 <HAL_RCC_OscConfig+0x57c>)
 8004a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a3c:	f7ff f9d2 	bl	8003de4 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a44:	f7ff f9ce 	bl	8003de4 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e184      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a56:	4b32      	ldr	r3, [pc, #200]	; (8004b20 <HAL_RCC_OscConfig+0x57c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d108      	bne.n	8004a7c <HAL_RCC_OscConfig+0x4d8>
 8004a6a:	4b2c      	ldr	r3, [pc, #176]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a70:	4a2a      	ldr	r2, [pc, #168]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004a72:	f043 0301 	orr.w	r3, r3, #1
 8004a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a7a:	e024      	b.n	8004ac6 <HAL_RCC_OscConfig+0x522>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b05      	cmp	r3, #5
 8004a82:	d110      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x502>
 8004a84:	4b25      	ldr	r3, [pc, #148]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8a:	4a24      	ldr	r2, [pc, #144]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004a8c:	f043 0304 	orr.w	r3, r3, #4
 8004a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a94:	4b21      	ldr	r3, [pc, #132]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9a:	4a20      	ldr	r2, [pc, #128]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aa4:	e00f      	b.n	8004ac6 <HAL_RCC_OscConfig+0x522>
 8004aa6:	4b1d      	ldr	r3, [pc, #116]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aac:	4a1b      	ldr	r2, [pc, #108]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004aae:	f023 0301 	bic.w	r3, r3, #1
 8004ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ab6:	4b19      	ldr	r3, [pc, #100]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abc:	4a17      	ldr	r2, [pc, #92]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004abe:	f023 0304 	bic.w	r3, r3, #4
 8004ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d016      	beq.n	8004afc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ace:	f7ff f989 	bl	8003de4 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ad4:	e00a      	b.n	8004aec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad6:	f7ff f985 	bl	8003de4 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e139      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aec:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <HAL_RCC_OscConfig+0x578>)
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0ed      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x532>
 8004afa:	e01a      	b.n	8004b32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afc:	f7ff f972 	bl	8003de4 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b02:	e00f      	b.n	8004b24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b04:	f7ff f96e 	bl	8003de4 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d906      	bls.n	8004b24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e122      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
 8004b1a:	bf00      	nop
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b24:	4b90      	ldr	r3, [pc, #576]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e8      	bne.n	8004b04 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b32:	7ffb      	ldrb	r3, [r7, #31]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d105      	bne.n	8004b44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b38:	4b8b      	ldr	r3, [pc, #556]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3c:	4a8a      	ldr	r2, [pc, #552]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b42:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8108 	beq.w	8004d5e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	f040 80d0 	bne.w	8004cf8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b58:	4b83      	ldr	r3, [pc, #524]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f003 0203 	and.w	r2, r3, #3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d130      	bne.n	8004bce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	3b01      	subs	r3, #1
 8004b78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d127      	bne.n	8004bce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d11f      	bne.n	8004bce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b98:	2a07      	cmp	r2, #7
 8004b9a:	bf14      	ite	ne
 8004b9c:	2201      	movne	r2, #1
 8004b9e:	2200      	moveq	r2, #0
 8004ba0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d113      	bne.n	8004bce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb0:	085b      	lsrs	r3, r3, #1
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d109      	bne.n	8004bce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	085b      	lsrs	r3, r3, #1
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d06e      	beq.n	8004cac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b0c      	cmp	r3, #12
 8004bd2:	d069      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004bd4:	4b64      	ldr	r3, [pc, #400]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d105      	bne.n	8004bec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004be0:	4b61      	ldr	r3, [pc, #388]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0b7      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004bf0:	4b5d      	ldr	r3, [pc, #372]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a5c      	ldr	r2, [pc, #368]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bfa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bfc:	f7ff f8f2 	bl	8003de4 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c04:	f7ff f8ee 	bl	8003de4 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e0a4      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c16:	4b54      	ldr	r3, [pc, #336]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c22:	4b51      	ldr	r3, [pc, #324]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	4b51      	ldr	r3, [pc, #324]	; (8004d6c <HAL_RCC_OscConfig+0x7c8>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c32:	3a01      	subs	r2, #1
 8004c34:	0112      	lsls	r2, r2, #4
 8004c36:	4311      	orrs	r1, r2
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c3c:	0212      	lsls	r2, r2, #8
 8004c3e:	4311      	orrs	r1, r2
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c44:	0852      	lsrs	r2, r2, #1
 8004c46:	3a01      	subs	r2, #1
 8004c48:	0552      	lsls	r2, r2, #21
 8004c4a:	4311      	orrs	r1, r2
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c50:	0852      	lsrs	r2, r2, #1
 8004c52:	3a01      	subs	r2, #1
 8004c54:	0652      	lsls	r2, r2, #25
 8004c56:	4311      	orrs	r1, r2
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c5c:	0912      	lsrs	r2, r2, #4
 8004c5e:	0452      	lsls	r2, r2, #17
 8004c60:	430a      	orrs	r2, r1
 8004c62:	4941      	ldr	r1, [pc, #260]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c68:	4b3f      	ldr	r3, [pc, #252]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a3e      	ldr	r2, [pc, #248]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c74:	4b3c      	ldr	r3, [pc, #240]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4a3b      	ldr	r2, [pc, #236]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c80:	f7ff f8b0 	bl	8003de4 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c88:	f7ff f8ac 	bl	8003de4 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e062      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c9a:	4b33      	ldr	r3, [pc, #204]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ca6:	e05a      	b.n	8004d5e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e059      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cac:	4b2e      	ldr	r3, [pc, #184]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d152      	bne.n	8004d5e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004cb8:	4b2b      	ldr	r3, [pc, #172]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a2a      	ldr	r2, [pc, #168]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cc4:	4b28      	ldr	r3, [pc, #160]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	4a27      	ldr	r2, [pc, #156]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cd0:	f7ff f888 	bl	8003de4 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd8:	f7ff f884 	bl	8003de4 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e03a      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cea:	4b1f      	ldr	r3, [pc, #124]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0f0      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x734>
 8004cf6:	e032      	b.n	8004d5e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	2b0c      	cmp	r3, #12
 8004cfc:	d02d      	beq.n	8004d5a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfe:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a19      	ldr	r2, [pc, #100]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004d04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d08:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004d0a:	4b17      	ldr	r3, [pc, #92]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d105      	bne.n	8004d22 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004d16:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	4a13      	ldr	r2, [pc, #76]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004d1c:	f023 0303 	bic.w	r3, r3, #3
 8004d20:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d22:	4b11      	ldr	r3, [pc, #68]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	4a10      	ldr	r2, [pc, #64]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004d28:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d30:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d32:	f7ff f857 	bl	8003de4 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d3a:	f7ff f853 	bl	8003de4 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e009      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <HAL_RCC_OscConfig+0x7c4>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1f0      	bne.n	8004d3a <HAL_RCC_OscConfig+0x796>
 8004d58:	e001      	b.n	8004d5e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3720      	adds	r7, #32
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	f99d808c 	.word	0xf99d808c

08004d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0c8      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d84:	4b66      	ldr	r3, [pc, #408]	; (8004f20 <HAL_RCC_ClockConfig+0x1b0>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d910      	bls.n	8004db4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d92:	4b63      	ldr	r3, [pc, #396]	; (8004f20 <HAL_RCC_ClockConfig+0x1b0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f023 0207 	bic.w	r2, r3, #7
 8004d9a:	4961      	ldr	r1, [pc, #388]	; (8004f20 <HAL_RCC_ClockConfig+0x1b0>)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da2:	4b5f      	ldr	r3, [pc, #380]	; (8004f20 <HAL_RCC_ClockConfig+0x1b0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d001      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0b0      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d04c      	beq.n	8004e5a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d107      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc8:	4b56      	ldr	r3, [pc, #344]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d121      	bne.n	8004e18 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e09e      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d107      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004de0:	4b50      	ldr	r3, [pc, #320]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d115      	bne.n	8004e18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e092      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d107      	bne.n	8004e08 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004df8:	4b4a      	ldr	r3, [pc, #296]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e086      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e08:	4b46      	ldr	r3, [pc, #280]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e07e      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e18:	4b42      	ldr	r3, [pc, #264]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f023 0203 	bic.w	r2, r3, #3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	493f      	ldr	r1, [pc, #252]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e2a:	f7fe ffdb 	bl	8003de4 <HAL_GetTick>
 8004e2e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e30:	e00a      	b.n	8004e48 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e32:	f7fe ffd7 	bl	8003de4 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e066      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e48:	4b36      	ldr	r3, [pc, #216]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 020c 	and.w	r2, r3, #12
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d1eb      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d008      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e66:	4b2f      	ldr	r3, [pc, #188]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	492c      	ldr	r1, [pc, #176]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e78:	4b29      	ldr	r3, [pc, #164]	; (8004f20 <HAL_RCC_ClockConfig+0x1b0>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d210      	bcs.n	8004ea8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e86:	4b26      	ldr	r3, [pc, #152]	; (8004f20 <HAL_RCC_ClockConfig+0x1b0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f023 0207 	bic.w	r2, r3, #7
 8004e8e:	4924      	ldr	r1, [pc, #144]	; (8004f20 <HAL_RCC_ClockConfig+0x1b0>)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e96:	4b22      	ldr	r3, [pc, #136]	; (8004f20 <HAL_RCC_ClockConfig+0x1b0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d001      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e036      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eb4:	4b1b      	ldr	r3, [pc, #108]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4918      	ldr	r1, [pc, #96]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d009      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ed2:	4b14      	ldr	r3, [pc, #80]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	4910      	ldr	r1, [pc, #64]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ee6:	f000 f825 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 8004eea:	4601      	mov	r1, r0
 8004eec:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	091b      	lsrs	r3, r3, #4
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	4a0c      	ldr	r2, [pc, #48]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef8:	5cd3      	ldrb	r3, [r2, r3]
 8004efa:	f003 031f 	and.w	r3, r3, #31
 8004efe:	fa21 f303 	lsr.w	r3, r1, r3
 8004f02:	4a0a      	ldr	r2, [pc, #40]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f06:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <HAL_RCC_ClockConfig+0x1c0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fe ff1a 	bl	8003d44 <HAL_InitTick>
 8004f10:	4603      	mov	r3, r0
 8004f12:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f14:	7afb      	ldrb	r3, [r7, #11]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40022000 	.word	0x40022000
 8004f24:	40021000 	.word	0x40021000
 8004f28:	080071d0 	.word	0x080071d0
 8004f2c:	20000094 	.word	0x20000094
 8004f30:	200000f4 	.word	0x200000f4

08004f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b089      	sub	sp, #36	; 0x24
 8004f38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f42:	4b3d      	ldr	r3, [pc, #244]	; (8005038 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 030c 	and.w	r3, r3, #12
 8004f4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f4c:	4b3a      	ldr	r3, [pc, #232]	; (8005038 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0303 	and.w	r3, r3, #3
 8004f54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_RCC_GetSysClockFreq+0x34>
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	2b0c      	cmp	r3, #12
 8004f60:	d121      	bne.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d11e      	bne.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f68:	4b33      	ldr	r3, [pc, #204]	; (8005038 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d107      	bne.n	8004f84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f74:	4b30      	ldr	r3, [pc, #192]	; (8005038 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f7a:	0a1b      	lsrs	r3, r3, #8
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	61fb      	str	r3, [r7, #28]
 8004f82:	e005      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f84:	4b2c      	ldr	r3, [pc, #176]	; (8005038 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	091b      	lsrs	r3, r3, #4
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f90:	4a2a      	ldr	r2, [pc, #168]	; (800503c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10d      	bne.n	8004fbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fa4:	e00a      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2b04      	cmp	r3, #4
 8004faa:	d102      	bne.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fac:	4b24      	ldr	r3, [pc, #144]	; (8005040 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fae:	61bb      	str	r3, [r7, #24]
 8004fb0:	e004      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d101      	bne.n	8004fbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fb8:	4b22      	ldr	r3, [pc, #136]	; (8005044 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	2b0c      	cmp	r3, #12
 8004fc0:	d133      	bne.n	800502a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fc2:	4b1d      	ldr	r3, [pc, #116]	; (8005038 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d002      	beq.n	8004fd8 <HAL_RCC_GetSysClockFreq+0xa4>
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d003      	beq.n	8004fde <HAL_RCC_GetSysClockFreq+0xaa>
 8004fd6:	e005      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004fd8:	4b19      	ldr	r3, [pc, #100]	; (8005040 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fda:	617b      	str	r3, [r7, #20]
      break;
 8004fdc:	e005      	b.n	8004fea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004fde:	4b19      	ldr	r3, [pc, #100]	; (8005044 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fe0:	617b      	str	r3, [r7, #20]
      break;
 8004fe2:	e002      	b.n	8004fea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	617b      	str	r3, [r7, #20]
      break;
 8004fe8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fea:	4b13      	ldr	r3, [pc, #76]	; (8005038 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	091b      	lsrs	r3, r3, #4
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ff8:	4b0f      	ldr	r3, [pc, #60]	; (8005038 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	0a1b      	lsrs	r3, r3, #8
 8004ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	fb02 f203 	mul.w	r2, r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	fbb2 f3f3 	udiv	r3, r2, r3
 800500e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005010:	4b09      	ldr	r3, [pc, #36]	; (8005038 <HAL_RCC_GetSysClockFreq+0x104>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	0e5b      	lsrs	r3, r3, #25
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	3301      	adds	r3, #1
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	fbb2 f3f3 	udiv	r3, r2, r3
 8005028:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800502a:	69bb      	ldr	r3, [r7, #24]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3724      	adds	r7, #36	; 0x24
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	40021000 	.word	0x40021000
 800503c:	080071e8 	.word	0x080071e8
 8005040:	00f42400 	.word	0x00f42400
 8005044:	007a1200 	.word	0x007a1200

08005048 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800504c:	4b03      	ldr	r3, [pc, #12]	; (800505c <HAL_RCC_GetHCLKFreq+0x14>)
 800504e:	681b      	ldr	r3, [r3, #0]
}
 8005050:	4618      	mov	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	20000094 	.word	0x20000094

08005060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005064:	f7ff fff0 	bl	8005048 <HAL_RCC_GetHCLKFreq>
 8005068:	4601      	mov	r1, r0
 800506a:	4b06      	ldr	r3, [pc, #24]	; (8005084 <HAL_RCC_GetPCLK1Freq+0x24>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	0a1b      	lsrs	r3, r3, #8
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	4a04      	ldr	r2, [pc, #16]	; (8005088 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005076:	5cd3      	ldrb	r3, [r2, r3]
 8005078:	f003 031f 	and.w	r3, r3, #31
 800507c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005080:	4618      	mov	r0, r3
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40021000 	.word	0x40021000
 8005088:	080071e0 	.word	0x080071e0

0800508c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005090:	f7ff ffda 	bl	8005048 <HAL_RCC_GetHCLKFreq>
 8005094:	4601      	mov	r1, r0
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	0adb      	lsrs	r3, r3, #11
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	4a04      	ldr	r2, [pc, #16]	; (80050b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80050a2:	5cd3      	ldrb	r3, [r2, r3]
 80050a4:	f003 031f 	and.w	r3, r3, #31
 80050a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40021000 	.word	0x40021000
 80050b4:	080071e0 	.word	0x080071e0

080050b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050c0:	2300      	movs	r3, #0
 80050c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050c4:	4b2a      	ldr	r3, [pc, #168]	; (8005170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050d0:	f7ff fa04 	bl	80044dc <HAL_PWREx_GetVoltageRange>
 80050d4:	6178      	str	r0, [r7, #20]
 80050d6:	e014      	b.n	8005102 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050d8:	4b25      	ldr	r3, [pc, #148]	; (8005170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050dc:	4a24      	ldr	r2, [pc, #144]	; (8005170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e2:	6593      	str	r3, [r2, #88]	; 0x58
 80050e4:	4b22      	ldr	r3, [pc, #136]	; (8005170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050f0:	f7ff f9f4 	bl	80044dc <HAL_PWREx_GetVoltageRange>
 80050f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050f6:	4b1e      	ldr	r3, [pc, #120]	; (8005170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fa:	4a1d      	ldr	r2, [pc, #116]	; (8005170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005100:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005108:	d10b      	bne.n	8005122 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b80      	cmp	r3, #128	; 0x80
 800510e:	d919      	bls.n	8005144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2ba0      	cmp	r3, #160	; 0xa0
 8005114:	d902      	bls.n	800511c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005116:	2302      	movs	r3, #2
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	e013      	b.n	8005144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800511c:	2301      	movs	r3, #1
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	e010      	b.n	8005144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b80      	cmp	r3, #128	; 0x80
 8005126:	d902      	bls.n	800512e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005128:	2303      	movs	r3, #3
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	e00a      	b.n	8005144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b80      	cmp	r3, #128	; 0x80
 8005132:	d102      	bne.n	800513a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005134:	2302      	movs	r3, #2
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	e004      	b.n	8005144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b70      	cmp	r3, #112	; 0x70
 800513e:	d101      	bne.n	8005144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005140:	2301      	movs	r3, #1
 8005142:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005144:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f023 0207 	bic.w	r2, r3, #7
 800514c:	4909      	ldr	r1, [pc, #36]	; (8005174 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005154:	4b07      	ldr	r3, [pc, #28]	; (8005174 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	429a      	cmp	r2, r3
 8005160:	d001      	beq.n	8005166 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40021000 	.word	0x40021000
 8005174:	40022000 	.word	0x40022000

08005178 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e040      	b.n	800520c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fd fb3c 	bl	8002818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2224      	movs	r2, #36	; 0x24
 80051a4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0201 	bic.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fabe 	bl	8005738 <UART_SetConfig>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d101      	bne.n	80051c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e022      	b.n	800520c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fd3c 	bl	8005c4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fdc3 	bl	8005d90 <UART_CheckIdleState>
 800520a:	4603      	mov	r3, r0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08a      	sub	sp, #40	; 0x28
 8005218:	af02      	add	r7, sp, #8
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	603b      	str	r3, [r7, #0]
 8005220:	4613      	mov	r3, r2
 8005222:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005228:	2b20      	cmp	r3, #32
 800522a:	f040 8081 	bne.w	8005330 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_UART_Transmit+0x26>
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e079      	b.n	8005332 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_UART_Transmit+0x38>
 8005248:	2302      	movs	r3, #2
 800524a:	e072      	b.n	8005332 <HAL_UART_Transmit+0x11e>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2221      	movs	r2, #33	; 0x21
 800525e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005260:	f7fe fdc0 	bl	8003de4 <HAL_GetTick>
 8005264:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	88fa      	ldrh	r2, [r7, #6]
 800526a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	88fa      	ldrh	r2, [r7, #6]
 8005272:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800527e:	d108      	bne.n	8005292 <HAL_UART_Transmit+0x7e>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d104      	bne.n	8005292 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005288:	2300      	movs	r3, #0
 800528a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	61bb      	str	r3, [r7, #24]
 8005290:	e003      	b.n	800529a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005296:	2300      	movs	r3, #0
 8005298:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80052a2:	e02d      	b.n	8005300 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2200      	movs	r2, #0
 80052ac:	2180      	movs	r1, #128	; 0x80
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 fdb3 	bl	8005e1a <UART_WaitOnFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e039      	b.n	8005332 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10b      	bne.n	80052dc <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	881a      	ldrh	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052d0:	b292      	uxth	r2, r2
 80052d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	3302      	adds	r3, #2
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	e008      	b.n	80052ee <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	781a      	ldrb	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	b292      	uxth	r2, r2
 80052e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	3301      	adds	r3, #1
 80052ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1cb      	bne.n	80052a4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2200      	movs	r2, #0
 8005314:	2140      	movs	r1, #64	; 0x40
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 fd7f 	bl	8005e1a <UART_WaitOnFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e005      	b.n	8005332 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2220      	movs	r2, #32
 800532a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800532c:	2300      	movs	r3, #0
 800532e:	e000      	b.n	8005332 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005330:	2302      	movs	r3, #2
  }
}
 8005332:	4618      	mov	r0, r3
 8005334:	3720      	adds	r7, #32
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	4613      	mov	r3, r2
 8005348:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800534e:	2b20      	cmp	r3, #32
 8005350:	f040 808a 	bne.w	8005468 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_UART_Receive_IT+0x24>
 800535a:	88fb      	ldrh	r3, [r7, #6]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e082      	b.n	800546a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800536a:	2b01      	cmp	r3, #1
 800536c:	d101      	bne.n	8005372 <HAL_UART_Receive_IT+0x36>
 800536e:	2302      	movs	r3, #2
 8005370:	e07b      	b.n	800546a <HAL_UART_Receive_IT+0x12e>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	88fa      	ldrh	r2, [r7, #6]
 8005384:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	88fa      	ldrh	r2, [r7, #6]
 800538c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539e:	d10e      	bne.n	80053be <HAL_UART_Receive_IT+0x82>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d105      	bne.n	80053b4 <HAL_UART_Receive_IT+0x78>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80053ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053b2:	e02d      	b.n	8005410 <HAL_UART_Receive_IT+0xd4>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	22ff      	movs	r2, #255	; 0xff
 80053b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053bc:	e028      	b.n	8005410 <HAL_UART_Receive_IT+0xd4>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10d      	bne.n	80053e2 <HAL_UART_Receive_IT+0xa6>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d104      	bne.n	80053d8 <HAL_UART_Receive_IT+0x9c>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	22ff      	movs	r2, #255	; 0xff
 80053d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053d6:	e01b      	b.n	8005410 <HAL_UART_Receive_IT+0xd4>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	227f      	movs	r2, #127	; 0x7f
 80053dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053e0:	e016      	b.n	8005410 <HAL_UART_Receive_IT+0xd4>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053ea:	d10d      	bne.n	8005408 <HAL_UART_Receive_IT+0xcc>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d104      	bne.n	80053fe <HAL_UART_Receive_IT+0xc2>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	227f      	movs	r2, #127	; 0x7f
 80053f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053fc:	e008      	b.n	8005410 <HAL_UART_Receive_IT+0xd4>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	223f      	movs	r2, #63	; 0x3f
 8005402:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005406:	e003      	b.n	8005410 <HAL_UART_Receive_IT+0xd4>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2222      	movs	r2, #34	; 0x22
 800541a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0201 	orr.w	r2, r2, #1
 800542a:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005434:	d107      	bne.n	8005446 <HAL_UART_Receive_IT+0x10a>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d103      	bne.n	8005446 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a0d      	ldr	r2, [pc, #52]	; (8005478 <HAL_UART_Receive_IT+0x13c>)
 8005442:	661a      	str	r2, [r3, #96]	; 0x60
 8005444:	e002      	b.n	800544c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4a0c      	ldr	r2, [pc, #48]	; (800547c <HAL_UART_Receive_IT+0x140>)
 800544a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005462:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005464:	2300      	movs	r3, #0
 8005466:	e000      	b.n	800546a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8005468:	2302      	movs	r3, #2
  }
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	08006059 	.word	0x08006059
 800547c:	08005faf 	.word	0x08005faf

08005480 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b088      	sub	sp, #32
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80054a6:	4013      	ands	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d113      	bne.n	80054d8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f003 0320 	and.w	r3, r3, #32
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00e      	beq.n	80054d8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d009      	beq.n	80054d8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 8114 	beq.w	80056f6 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	4798      	blx	r3
      }
      return;
 80054d6:	e10e      	b.n	80056f6 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 80d6 	beq.w	800568c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d105      	bne.n	80054f6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	4b86      	ldr	r3, [pc, #536]	; (8005708 <HAL_UART_IRQHandler+0x288>)
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 80cb 	beq.w	800568c <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00e      	beq.n	800551e <HAL_UART_IRQHandler+0x9e>
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005506:	2b00      	cmp	r3, #0
 8005508:	d009      	beq.n	800551e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2201      	movs	r2, #1
 8005510:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005516:	f043 0201 	orr.w	r2, r3, #1
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00e      	beq.n	8005546 <HAL_UART_IRQHandler+0xc6>
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2202      	movs	r2, #2
 8005538:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800553e:	f043 0204 	orr.w	r2, r3, #4
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00e      	beq.n	800556e <HAL_UART_IRQHandler+0xee>
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d009      	beq.n	800556e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2204      	movs	r2, #4
 8005560:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005566:	f043 0202 	orr.w	r2, r3, #2
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	2b00      	cmp	r3, #0
 8005576:	d013      	beq.n	80055a0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d104      	bne.n	800558c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005588:	2b00      	cmp	r3, #0
 800558a:	d009      	beq.n	80055a0 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2208      	movs	r2, #8
 8005592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005598:	f043 0208 	orr.w	r2, r3, #8
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00f      	beq.n	80055ca <HAL_UART_IRQHandler+0x14a>
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055c2:	f043 0220 	orr.w	r2, r3, #32
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 8093 	beq.w	80056fa <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	f003 0320 	and.w	r3, r3, #32
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00c      	beq.n	80055f8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d007      	beq.n	80055f8 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055fc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005608:	2b40      	cmp	r3, #64	; 0x40
 800560a:	d004      	beq.n	8005616 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005612:	2b00      	cmp	r3, #0
 8005614:	d031      	beq.n	800567a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fc7a 	bl	8005f10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005626:	2b40      	cmp	r3, #64	; 0x40
 8005628:	d123      	bne.n	8005672 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005638:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800563e:	2b00      	cmp	r3, #0
 8005640:	d013      	beq.n	800566a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005646:	4a31      	ldr	r2, [pc, #196]	; (800570c <HAL_UART_IRQHandler+0x28c>)
 8005648:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800564e:	4618      	mov	r0, r3
 8005650:	f7fe fd07 	bl	8004062 <HAL_DMA_Abort_IT>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d016      	beq.n	8005688 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005664:	4610      	mov	r0, r2
 8005666:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005668:	e00e      	b.n	8005688 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f85a 	bl	8005724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005670:	e00a      	b.n	8005688 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f856 	bl	8005724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005678:	e006      	b.n	8005688 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f852 	bl	8005724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005686:	e038      	b.n	80056fa <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005688:	bf00      	nop
    return;
 800568a:	e036      	b.n	80056fa <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00d      	beq.n	80056b2 <HAL_UART_IRQHandler+0x232>
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d008      	beq.n	80056b2 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80056a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fd29 	bl	8006102 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056b0:	e026      	b.n	8005700 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00d      	beq.n	80056d8 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d008      	beq.n	80056d8 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d017      	beq.n	80056fe <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	4798      	blx	r3
    }
    return;
 80056d6:	e012      	b.n	80056fe <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00e      	beq.n	8005700 <HAL_UART_IRQHandler+0x280>
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d009      	beq.n	8005700 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fc45 	bl	8005f7c <UART_EndTransmit_IT>
    return;
 80056f2:	bf00      	nop
 80056f4:	e004      	b.n	8005700 <HAL_UART_IRQHandler+0x280>
      return;
 80056f6:	bf00      	nop
 80056f8:	e002      	b.n	8005700 <HAL_UART_IRQHandler+0x280>
    return;
 80056fa:	bf00      	nop
 80056fc:	e000      	b.n	8005700 <HAL_UART_IRQHandler+0x280>
    return;
 80056fe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005700:	3720      	adds	r7, #32
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	04000120 	.word	0x04000120
 800570c:	08005f51 	.word	0x08005f51

08005710 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005738:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800573c:	b088      	sub	sp, #32
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	4313      	orrs	r3, r2
 800575c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	4bac      	ldr	r3, [pc, #688]	; (8005a18 <UART_SetConfig+0x2e0>)
 8005766:	4013      	ands	r3, r2
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6812      	ldr	r2, [r2, #0]
 800576c:	69f9      	ldr	r1, [r7, #28]
 800576e:	430b      	orrs	r3, r1
 8005770:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4aa2      	ldr	r2, [pc, #648]	; (8005a1c <UART_SetConfig+0x2e4>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d004      	beq.n	80057a2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	69fa      	ldr	r2, [r7, #28]
 800579e:	4313      	orrs	r3, r2
 80057a0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	69fa      	ldr	r2, [r7, #28]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a99      	ldr	r2, [pc, #612]	; (8005a20 <UART_SetConfig+0x2e8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d121      	bne.n	8005804 <UART_SetConfig+0xcc>
 80057c0:	4b98      	ldr	r3, [pc, #608]	; (8005a24 <UART_SetConfig+0x2ec>)
 80057c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d816      	bhi.n	80057fc <UART_SetConfig+0xc4>
 80057ce:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <UART_SetConfig+0x9c>)
 80057d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d4:	080057e5 	.word	0x080057e5
 80057d8:	080057f1 	.word	0x080057f1
 80057dc:	080057eb 	.word	0x080057eb
 80057e0:	080057f7 	.word	0x080057f7
 80057e4:	2301      	movs	r3, #1
 80057e6:	76fb      	strb	r3, [r7, #27]
 80057e8:	e0e8      	b.n	80059bc <UART_SetConfig+0x284>
 80057ea:	2302      	movs	r3, #2
 80057ec:	76fb      	strb	r3, [r7, #27]
 80057ee:	e0e5      	b.n	80059bc <UART_SetConfig+0x284>
 80057f0:	2304      	movs	r3, #4
 80057f2:	76fb      	strb	r3, [r7, #27]
 80057f4:	e0e2      	b.n	80059bc <UART_SetConfig+0x284>
 80057f6:	2308      	movs	r3, #8
 80057f8:	76fb      	strb	r3, [r7, #27]
 80057fa:	e0df      	b.n	80059bc <UART_SetConfig+0x284>
 80057fc:	2310      	movs	r3, #16
 80057fe:	76fb      	strb	r3, [r7, #27]
 8005800:	bf00      	nop
 8005802:	e0db      	b.n	80059bc <UART_SetConfig+0x284>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a87      	ldr	r2, [pc, #540]	; (8005a28 <UART_SetConfig+0x2f0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d134      	bne.n	8005878 <UART_SetConfig+0x140>
 800580e:	4b85      	ldr	r3, [pc, #532]	; (8005a24 <UART_SetConfig+0x2ec>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005814:	f003 030c 	and.w	r3, r3, #12
 8005818:	2b0c      	cmp	r3, #12
 800581a:	d829      	bhi.n	8005870 <UART_SetConfig+0x138>
 800581c:	a201      	add	r2, pc, #4	; (adr r2, 8005824 <UART_SetConfig+0xec>)
 800581e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005822:	bf00      	nop
 8005824:	08005859 	.word	0x08005859
 8005828:	08005871 	.word	0x08005871
 800582c:	08005871 	.word	0x08005871
 8005830:	08005871 	.word	0x08005871
 8005834:	08005865 	.word	0x08005865
 8005838:	08005871 	.word	0x08005871
 800583c:	08005871 	.word	0x08005871
 8005840:	08005871 	.word	0x08005871
 8005844:	0800585f 	.word	0x0800585f
 8005848:	08005871 	.word	0x08005871
 800584c:	08005871 	.word	0x08005871
 8005850:	08005871 	.word	0x08005871
 8005854:	0800586b 	.word	0x0800586b
 8005858:	2300      	movs	r3, #0
 800585a:	76fb      	strb	r3, [r7, #27]
 800585c:	e0ae      	b.n	80059bc <UART_SetConfig+0x284>
 800585e:	2302      	movs	r3, #2
 8005860:	76fb      	strb	r3, [r7, #27]
 8005862:	e0ab      	b.n	80059bc <UART_SetConfig+0x284>
 8005864:	2304      	movs	r3, #4
 8005866:	76fb      	strb	r3, [r7, #27]
 8005868:	e0a8      	b.n	80059bc <UART_SetConfig+0x284>
 800586a:	2308      	movs	r3, #8
 800586c:	76fb      	strb	r3, [r7, #27]
 800586e:	e0a5      	b.n	80059bc <UART_SetConfig+0x284>
 8005870:	2310      	movs	r3, #16
 8005872:	76fb      	strb	r3, [r7, #27]
 8005874:	bf00      	nop
 8005876:	e0a1      	b.n	80059bc <UART_SetConfig+0x284>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a6b      	ldr	r2, [pc, #428]	; (8005a2c <UART_SetConfig+0x2f4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d120      	bne.n	80058c4 <UART_SetConfig+0x18c>
 8005882:	4b68      	ldr	r3, [pc, #416]	; (8005a24 <UART_SetConfig+0x2ec>)
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005888:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800588c:	2b10      	cmp	r3, #16
 800588e:	d00f      	beq.n	80058b0 <UART_SetConfig+0x178>
 8005890:	2b10      	cmp	r3, #16
 8005892:	d802      	bhi.n	800589a <UART_SetConfig+0x162>
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <UART_SetConfig+0x16c>
 8005898:	e010      	b.n	80058bc <UART_SetConfig+0x184>
 800589a:	2b20      	cmp	r3, #32
 800589c:	d005      	beq.n	80058aa <UART_SetConfig+0x172>
 800589e:	2b30      	cmp	r3, #48	; 0x30
 80058a0:	d009      	beq.n	80058b6 <UART_SetConfig+0x17e>
 80058a2:	e00b      	b.n	80058bc <UART_SetConfig+0x184>
 80058a4:	2300      	movs	r3, #0
 80058a6:	76fb      	strb	r3, [r7, #27]
 80058a8:	e088      	b.n	80059bc <UART_SetConfig+0x284>
 80058aa:	2302      	movs	r3, #2
 80058ac:	76fb      	strb	r3, [r7, #27]
 80058ae:	e085      	b.n	80059bc <UART_SetConfig+0x284>
 80058b0:	2304      	movs	r3, #4
 80058b2:	76fb      	strb	r3, [r7, #27]
 80058b4:	e082      	b.n	80059bc <UART_SetConfig+0x284>
 80058b6:	2308      	movs	r3, #8
 80058b8:	76fb      	strb	r3, [r7, #27]
 80058ba:	e07f      	b.n	80059bc <UART_SetConfig+0x284>
 80058bc:	2310      	movs	r3, #16
 80058be:	76fb      	strb	r3, [r7, #27]
 80058c0:	bf00      	nop
 80058c2:	e07b      	b.n	80059bc <UART_SetConfig+0x284>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a59      	ldr	r2, [pc, #356]	; (8005a30 <UART_SetConfig+0x2f8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d120      	bne.n	8005910 <UART_SetConfig+0x1d8>
 80058ce:	4b55      	ldr	r3, [pc, #340]	; (8005a24 <UART_SetConfig+0x2ec>)
 80058d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058d8:	2b40      	cmp	r3, #64	; 0x40
 80058da:	d00f      	beq.n	80058fc <UART_SetConfig+0x1c4>
 80058dc:	2b40      	cmp	r3, #64	; 0x40
 80058de:	d802      	bhi.n	80058e6 <UART_SetConfig+0x1ae>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <UART_SetConfig+0x1b8>
 80058e4:	e010      	b.n	8005908 <UART_SetConfig+0x1d0>
 80058e6:	2b80      	cmp	r3, #128	; 0x80
 80058e8:	d005      	beq.n	80058f6 <UART_SetConfig+0x1be>
 80058ea:	2bc0      	cmp	r3, #192	; 0xc0
 80058ec:	d009      	beq.n	8005902 <UART_SetConfig+0x1ca>
 80058ee:	e00b      	b.n	8005908 <UART_SetConfig+0x1d0>
 80058f0:	2300      	movs	r3, #0
 80058f2:	76fb      	strb	r3, [r7, #27]
 80058f4:	e062      	b.n	80059bc <UART_SetConfig+0x284>
 80058f6:	2302      	movs	r3, #2
 80058f8:	76fb      	strb	r3, [r7, #27]
 80058fa:	e05f      	b.n	80059bc <UART_SetConfig+0x284>
 80058fc:	2304      	movs	r3, #4
 80058fe:	76fb      	strb	r3, [r7, #27]
 8005900:	e05c      	b.n	80059bc <UART_SetConfig+0x284>
 8005902:	2308      	movs	r3, #8
 8005904:	76fb      	strb	r3, [r7, #27]
 8005906:	e059      	b.n	80059bc <UART_SetConfig+0x284>
 8005908:	2310      	movs	r3, #16
 800590a:	76fb      	strb	r3, [r7, #27]
 800590c:	bf00      	nop
 800590e:	e055      	b.n	80059bc <UART_SetConfig+0x284>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a47      	ldr	r2, [pc, #284]	; (8005a34 <UART_SetConfig+0x2fc>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d124      	bne.n	8005964 <UART_SetConfig+0x22c>
 800591a:	4b42      	ldr	r3, [pc, #264]	; (8005a24 <UART_SetConfig+0x2ec>)
 800591c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005928:	d012      	beq.n	8005950 <UART_SetConfig+0x218>
 800592a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800592e:	d802      	bhi.n	8005936 <UART_SetConfig+0x1fe>
 8005930:	2b00      	cmp	r3, #0
 8005932:	d007      	beq.n	8005944 <UART_SetConfig+0x20c>
 8005934:	e012      	b.n	800595c <UART_SetConfig+0x224>
 8005936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800593a:	d006      	beq.n	800594a <UART_SetConfig+0x212>
 800593c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005940:	d009      	beq.n	8005956 <UART_SetConfig+0x21e>
 8005942:	e00b      	b.n	800595c <UART_SetConfig+0x224>
 8005944:	2300      	movs	r3, #0
 8005946:	76fb      	strb	r3, [r7, #27]
 8005948:	e038      	b.n	80059bc <UART_SetConfig+0x284>
 800594a:	2302      	movs	r3, #2
 800594c:	76fb      	strb	r3, [r7, #27]
 800594e:	e035      	b.n	80059bc <UART_SetConfig+0x284>
 8005950:	2304      	movs	r3, #4
 8005952:	76fb      	strb	r3, [r7, #27]
 8005954:	e032      	b.n	80059bc <UART_SetConfig+0x284>
 8005956:	2308      	movs	r3, #8
 8005958:	76fb      	strb	r3, [r7, #27]
 800595a:	e02f      	b.n	80059bc <UART_SetConfig+0x284>
 800595c:	2310      	movs	r3, #16
 800595e:	76fb      	strb	r3, [r7, #27]
 8005960:	bf00      	nop
 8005962:	e02b      	b.n	80059bc <UART_SetConfig+0x284>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a2c      	ldr	r2, [pc, #176]	; (8005a1c <UART_SetConfig+0x2e4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d124      	bne.n	80059b8 <UART_SetConfig+0x280>
 800596e:	4b2d      	ldr	r3, [pc, #180]	; (8005a24 <UART_SetConfig+0x2ec>)
 8005970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005974:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800597c:	d012      	beq.n	80059a4 <UART_SetConfig+0x26c>
 800597e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005982:	d802      	bhi.n	800598a <UART_SetConfig+0x252>
 8005984:	2b00      	cmp	r3, #0
 8005986:	d007      	beq.n	8005998 <UART_SetConfig+0x260>
 8005988:	e012      	b.n	80059b0 <UART_SetConfig+0x278>
 800598a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800598e:	d006      	beq.n	800599e <UART_SetConfig+0x266>
 8005990:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005994:	d009      	beq.n	80059aa <UART_SetConfig+0x272>
 8005996:	e00b      	b.n	80059b0 <UART_SetConfig+0x278>
 8005998:	2300      	movs	r3, #0
 800599a:	76fb      	strb	r3, [r7, #27]
 800599c:	e00e      	b.n	80059bc <UART_SetConfig+0x284>
 800599e:	2302      	movs	r3, #2
 80059a0:	76fb      	strb	r3, [r7, #27]
 80059a2:	e00b      	b.n	80059bc <UART_SetConfig+0x284>
 80059a4:	2304      	movs	r3, #4
 80059a6:	76fb      	strb	r3, [r7, #27]
 80059a8:	e008      	b.n	80059bc <UART_SetConfig+0x284>
 80059aa:	2308      	movs	r3, #8
 80059ac:	76fb      	strb	r3, [r7, #27]
 80059ae:	e005      	b.n	80059bc <UART_SetConfig+0x284>
 80059b0:	2310      	movs	r3, #16
 80059b2:	76fb      	strb	r3, [r7, #27]
 80059b4:	bf00      	nop
 80059b6:	e001      	b.n	80059bc <UART_SetConfig+0x284>
 80059b8:	2310      	movs	r3, #16
 80059ba:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a16      	ldr	r2, [pc, #88]	; (8005a1c <UART_SetConfig+0x2e4>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	f040 8087 	bne.w	8005ad6 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059c8:	7efb      	ldrb	r3, [r7, #27]
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d836      	bhi.n	8005a3c <UART_SetConfig+0x304>
 80059ce:	a201      	add	r2, pc, #4	; (adr r2, 80059d4 <UART_SetConfig+0x29c>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	080059f9 	.word	0x080059f9
 80059d8:	08005a3d 	.word	0x08005a3d
 80059dc:	08005a01 	.word	0x08005a01
 80059e0:	08005a3d 	.word	0x08005a3d
 80059e4:	08005a07 	.word	0x08005a07
 80059e8:	08005a3d 	.word	0x08005a3d
 80059ec:	08005a3d 	.word	0x08005a3d
 80059f0:	08005a3d 	.word	0x08005a3d
 80059f4:	08005a0f 	.word	0x08005a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059f8:	f7ff fb32 	bl	8005060 <HAL_RCC_GetPCLK1Freq>
 80059fc:	6178      	str	r0, [r7, #20]
        break;
 80059fe:	e022      	b.n	8005a46 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a00:	4b0d      	ldr	r3, [pc, #52]	; (8005a38 <UART_SetConfig+0x300>)
 8005a02:	617b      	str	r3, [r7, #20]
        break;
 8005a04:	e01f      	b.n	8005a46 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a06:	f7ff fa95 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 8005a0a:	6178      	str	r0, [r7, #20]
        break;
 8005a0c:	e01b      	b.n	8005a46 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a12:	617b      	str	r3, [r7, #20]
        break;
 8005a14:	e017      	b.n	8005a46 <UART_SetConfig+0x30e>
 8005a16:	bf00      	nop
 8005a18:	efff69f3 	.word	0xefff69f3
 8005a1c:	40008000 	.word	0x40008000
 8005a20:	40013800 	.word	0x40013800
 8005a24:	40021000 	.word	0x40021000
 8005a28:	40004400 	.word	0x40004400
 8005a2c:	40004800 	.word	0x40004800
 8005a30:	40004c00 	.word	0x40004c00
 8005a34:	40005000 	.word	0x40005000
 8005a38:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	76bb      	strb	r3, [r7, #26]
        break;
 8005a44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 80f1 	beq.w	8005c30 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	4613      	mov	r3, r2
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	4413      	add	r3, r2
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d305      	bcc.n	8005a6a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d902      	bls.n	8005a70 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	76bb      	strb	r3, [r7, #26]
 8005a6e:	e0df      	b.n	8005c30 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	4619      	mov	r1, r3
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	f04f 0300 	mov.w	r3, #0
 8005a7c:	f04f 0400 	mov.w	r4, #0
 8005a80:	0214      	lsls	r4, r2, #8
 8005a82:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005a86:	020b      	lsls	r3, r1, #8
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6852      	ldr	r2, [r2, #4]
 8005a8c:	0852      	lsrs	r2, r2, #1
 8005a8e:	4611      	mov	r1, r2
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	eb13 0b01 	adds.w	fp, r3, r1
 8005a98:	eb44 0c02 	adc.w	ip, r4, r2
 8005a9c:	4658      	mov	r0, fp
 8005a9e:	4661      	mov	r1, ip
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f04f 0400 	mov.w	r4, #0
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	4623      	mov	r3, r4
 8005aac:	f7fa fbe8 	bl	8000280 <__aeabi_uldivmod>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005abc:	d308      	bcc.n	8005ad0 <UART_SetConfig+0x398>
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ac4:	d204      	bcs.n	8005ad0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	60da      	str	r2, [r3, #12]
 8005ace:	e0af      	b.n	8005c30 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	76bb      	strb	r3, [r7, #26]
 8005ad4:	e0ac      	b.n	8005c30 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ade:	d15b      	bne.n	8005b98 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005ae0:	7efb      	ldrb	r3, [r7, #27]
 8005ae2:	2b08      	cmp	r3, #8
 8005ae4:	d827      	bhi.n	8005b36 <UART_SetConfig+0x3fe>
 8005ae6:	a201      	add	r2, pc, #4	; (adr r2, 8005aec <UART_SetConfig+0x3b4>)
 8005ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aec:	08005b11 	.word	0x08005b11
 8005af0:	08005b19 	.word	0x08005b19
 8005af4:	08005b21 	.word	0x08005b21
 8005af8:	08005b37 	.word	0x08005b37
 8005afc:	08005b27 	.word	0x08005b27
 8005b00:	08005b37 	.word	0x08005b37
 8005b04:	08005b37 	.word	0x08005b37
 8005b08:	08005b37 	.word	0x08005b37
 8005b0c:	08005b2f 	.word	0x08005b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b10:	f7ff faa6 	bl	8005060 <HAL_RCC_GetPCLK1Freq>
 8005b14:	6178      	str	r0, [r7, #20]
        break;
 8005b16:	e013      	b.n	8005b40 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b18:	f7ff fab8 	bl	800508c <HAL_RCC_GetPCLK2Freq>
 8005b1c:	6178      	str	r0, [r7, #20]
        break;
 8005b1e:	e00f      	b.n	8005b40 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b20:	4b49      	ldr	r3, [pc, #292]	; (8005c48 <UART_SetConfig+0x510>)
 8005b22:	617b      	str	r3, [r7, #20]
        break;
 8005b24:	e00c      	b.n	8005b40 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b26:	f7ff fa05 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 8005b2a:	6178      	str	r0, [r7, #20]
        break;
 8005b2c:	e008      	b.n	8005b40 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b32:	617b      	str	r3, [r7, #20]
        break;
 8005b34:	e004      	b.n	8005b40 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	76bb      	strb	r3, [r7, #26]
        break;
 8005b3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d074      	beq.n	8005c30 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	005a      	lsls	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	085b      	lsrs	r3, r3, #1
 8005b50:	441a      	add	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2b0f      	cmp	r3, #15
 8005b62:	d916      	bls.n	8005b92 <UART_SetConfig+0x45a>
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b6a:	d212      	bcs.n	8005b92 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	f023 030f 	bic.w	r3, r3, #15
 8005b74:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	085b      	lsrs	r3, r3, #1
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	89fb      	ldrh	r3, [r7, #14]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	89fa      	ldrh	r2, [r7, #14]
 8005b8e:	60da      	str	r2, [r3, #12]
 8005b90:	e04e      	b.n	8005c30 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	76bb      	strb	r3, [r7, #26]
 8005b96:	e04b      	b.n	8005c30 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b98:	7efb      	ldrb	r3, [r7, #27]
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d827      	bhi.n	8005bee <UART_SetConfig+0x4b6>
 8005b9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <UART_SetConfig+0x46c>)
 8005ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba4:	08005bc9 	.word	0x08005bc9
 8005ba8:	08005bd1 	.word	0x08005bd1
 8005bac:	08005bd9 	.word	0x08005bd9
 8005bb0:	08005bef 	.word	0x08005bef
 8005bb4:	08005bdf 	.word	0x08005bdf
 8005bb8:	08005bef 	.word	0x08005bef
 8005bbc:	08005bef 	.word	0x08005bef
 8005bc0:	08005bef 	.word	0x08005bef
 8005bc4:	08005be7 	.word	0x08005be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bc8:	f7ff fa4a 	bl	8005060 <HAL_RCC_GetPCLK1Freq>
 8005bcc:	6178      	str	r0, [r7, #20]
        break;
 8005bce:	e013      	b.n	8005bf8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bd0:	f7ff fa5c 	bl	800508c <HAL_RCC_GetPCLK2Freq>
 8005bd4:	6178      	str	r0, [r7, #20]
        break;
 8005bd6:	e00f      	b.n	8005bf8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bd8:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <UART_SetConfig+0x510>)
 8005bda:	617b      	str	r3, [r7, #20]
        break;
 8005bdc:	e00c      	b.n	8005bf8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bde:	f7ff f9a9 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 8005be2:	6178      	str	r0, [r7, #20]
        break;
 8005be4:	e008      	b.n	8005bf8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bea:	617b      	str	r3, [r7, #20]
        break;
 8005bec:	e004      	b.n	8005bf8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	76bb      	strb	r3, [r7, #26]
        break;
 8005bf6:	bf00      	nop
    }

    if (pclk != 0U)
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d018      	beq.n	8005c30 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	085a      	lsrs	r2, r3, #1
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	441a      	add	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2b0f      	cmp	r3, #15
 8005c18:	d908      	bls.n	8005c2c <UART_SetConfig+0x4f4>
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c20:	d204      	bcs.n	8005c2c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	60da      	str	r2, [r3, #12]
 8005c2a:	e001      	b.n	8005c30 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005c3c:	7ebb      	ldrb	r3, [r7, #26]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005c48:	00f42400 	.word	0x00f42400

08005c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00a      	beq.n	8005c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	f003 0308 	and.w	r3, r3, #8
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	f003 0310 	and.w	r3, r3, #16
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d01a      	beq.n	8005d62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d4a:	d10a      	bne.n	8005d62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	605a      	str	r2, [r3, #4]
  }
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005d9e:	f7fe f821 	bl	8003de4 <HAL_GetTick>
 8005da2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	2b08      	cmp	r3, #8
 8005db0:	d10e      	bne.n	8005dd0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005db2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f82a 	bl	8005e1a <UART_WaitOnFlagUntilTimeout>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e020      	b.n	8005e12 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0304 	and.w	r3, r3, #4
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	d10e      	bne.n	8005dfc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dde:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f814 	bl	8005e1a <UART_WaitOnFlagUntilTimeout>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e00a      	b.n	8005e12 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2220      	movs	r2, #32
 8005e06:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b084      	sub	sp, #16
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	603b      	str	r3, [r7, #0]
 8005e26:	4613      	mov	r3, r2
 8005e28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e2a:	e05d      	b.n	8005ee8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e32:	d059      	beq.n	8005ee8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e34:	f7fd ffd6 	bl	8003de4 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d302      	bcc.n	8005e4a <UART_WaitOnFlagUntilTimeout+0x30>
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d11b      	bne.n	8005e82 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e58:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0201 	bic.w	r2, r2, #1
 8005e68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2220      	movs	r2, #32
 8005e74:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e042      	b.n	8005f08 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d02b      	beq.n	8005ee8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e9e:	d123      	bne.n	8005ee8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ea8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005eb8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0201 	bic.w	r2, r2, #1
 8005ec8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e00f      	b.n	8005f08 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69da      	ldr	r2, [r3, #28]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	bf0c      	ite	eq
 8005ef8:	2301      	moveq	r3, #1
 8005efa:	2300      	movne	r3, #0
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	461a      	mov	r2, r3
 8005f00:	79fb      	ldrb	r3, [r7, #7]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d092      	beq.n	8005e2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f26:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0201 	bic.w	r2, r2, #1
 8005f36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f7ff fbd8 	bl	8005724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f74:	bf00      	nop
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f92:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff fbb5 	bl	8005710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fa6:	bf00      	nop
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fbc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fc2:	2b22      	cmp	r3, #34	; 0x22
 8005fc4:	d13a      	bne.n	800603c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005fcc:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005fce:	89bb      	ldrh	r3, [r7, #12]
 8005fd0:	b2d9      	uxtb	r1, r3
 8005fd2:	89fb      	ldrh	r3, [r7, #14]
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fda:	400a      	ands	r2, r1
 8005fdc:	b2d2      	uxtb	r2, r2
 8005fde:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe4:	1c5a      	adds	r2, r3, #1
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006002:	b29b      	uxth	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d123      	bne.n	8006050 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006016:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0201 	bic.w	r2, r2, #1
 8006026:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2220      	movs	r2, #32
 800602c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7fa ff5f 	bl	8000ef8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800603a:	e009      	b.n	8006050 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	8b1b      	ldrh	r3, [r3, #24]
 8006042:	b29a      	uxth	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f042 0208 	orr.w	r2, r2, #8
 800604c:	b292      	uxth	r2, r2
 800604e:	831a      	strh	r2, [r3, #24]
}
 8006050:	bf00      	nop
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006066:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800606c:	2b22      	cmp	r3, #34	; 0x22
 800606e:	d13a      	bne.n	80060e6 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006076:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800607e:	89ba      	ldrh	r2, [r7, #12]
 8006080:	89fb      	ldrh	r3, [r7, #14]
 8006082:	4013      	ands	r3, r2
 8006084:	b29a      	uxth	r2, r3
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608e:	1c9a      	adds	r2, r3, #2
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d123      	bne.n	80060fa <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80060c0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 0201 	bic.w	r2, r2, #1
 80060d0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2220      	movs	r2, #32
 80060d6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7fa ff0a 	bl	8000ef8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060e4:	e009      	b.n	80060fa <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	8b1b      	ldrh	r3, [r3, #24]
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0208 	orr.w	r2, r2, #8
 80060f6:	b292      	uxth	r2, r2
 80060f8:	831a      	strh	r2, [r3, #24]
}
 80060fa:	bf00      	nop
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
	...

08006118 <__errno>:
 8006118:	4b01      	ldr	r3, [pc, #4]	; (8006120 <__errno+0x8>)
 800611a:	6818      	ldr	r0, [r3, #0]
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	200000fc 	.word	0x200000fc

08006124 <__libc_init_array>:
 8006124:	b570      	push	{r4, r5, r6, lr}
 8006126:	4e0d      	ldr	r6, [pc, #52]	; (800615c <__libc_init_array+0x38>)
 8006128:	4c0d      	ldr	r4, [pc, #52]	; (8006160 <__libc_init_array+0x3c>)
 800612a:	1ba4      	subs	r4, r4, r6
 800612c:	10a4      	asrs	r4, r4, #2
 800612e:	2500      	movs	r5, #0
 8006130:	42a5      	cmp	r5, r4
 8006132:	d109      	bne.n	8006148 <__libc_init_array+0x24>
 8006134:	4e0b      	ldr	r6, [pc, #44]	; (8006164 <__libc_init_array+0x40>)
 8006136:	4c0c      	ldr	r4, [pc, #48]	; (8006168 <__libc_init_array+0x44>)
 8006138:	f000 fc3e 	bl	80069b8 <_init>
 800613c:	1ba4      	subs	r4, r4, r6
 800613e:	10a4      	asrs	r4, r4, #2
 8006140:	2500      	movs	r5, #0
 8006142:	42a5      	cmp	r5, r4
 8006144:	d105      	bne.n	8006152 <__libc_init_array+0x2e>
 8006146:	bd70      	pop	{r4, r5, r6, pc}
 8006148:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800614c:	4798      	blx	r3
 800614e:	3501      	adds	r5, #1
 8006150:	e7ee      	b.n	8006130 <__libc_init_array+0xc>
 8006152:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006156:	4798      	blx	r3
 8006158:	3501      	adds	r5, #1
 800615a:	e7f2      	b.n	8006142 <__libc_init_array+0x1e>
 800615c:	08007254 	.word	0x08007254
 8006160:	08007254 	.word	0x08007254
 8006164:	08007254 	.word	0x08007254
 8006168:	08007258 	.word	0x08007258

0800616c <memset>:
 800616c:	4402      	add	r2, r0
 800616e:	4603      	mov	r3, r0
 8006170:	4293      	cmp	r3, r2
 8006172:	d100      	bne.n	8006176 <memset+0xa>
 8006174:	4770      	bx	lr
 8006176:	f803 1b01 	strb.w	r1, [r3], #1
 800617a:	e7f9      	b.n	8006170 <memset+0x4>

0800617c <siprintf>:
 800617c:	b40e      	push	{r1, r2, r3}
 800617e:	b500      	push	{lr}
 8006180:	b09c      	sub	sp, #112	; 0x70
 8006182:	ab1d      	add	r3, sp, #116	; 0x74
 8006184:	9002      	str	r0, [sp, #8]
 8006186:	9006      	str	r0, [sp, #24]
 8006188:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800618c:	4809      	ldr	r0, [pc, #36]	; (80061b4 <siprintf+0x38>)
 800618e:	9107      	str	r1, [sp, #28]
 8006190:	9104      	str	r1, [sp, #16]
 8006192:	4909      	ldr	r1, [pc, #36]	; (80061b8 <siprintf+0x3c>)
 8006194:	f853 2b04 	ldr.w	r2, [r3], #4
 8006198:	9105      	str	r1, [sp, #20]
 800619a:	6800      	ldr	r0, [r0, #0]
 800619c:	9301      	str	r3, [sp, #4]
 800619e:	a902      	add	r1, sp, #8
 80061a0:	f000 f87e 	bl	80062a0 <_svfiprintf_r>
 80061a4:	9b02      	ldr	r3, [sp, #8]
 80061a6:	2200      	movs	r2, #0
 80061a8:	701a      	strb	r2, [r3, #0]
 80061aa:	b01c      	add	sp, #112	; 0x70
 80061ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80061b0:	b003      	add	sp, #12
 80061b2:	4770      	bx	lr
 80061b4:	200000fc 	.word	0x200000fc
 80061b8:	ffff0208 	.word	0xffff0208

080061bc <strcat>:
 80061bc:	b510      	push	{r4, lr}
 80061be:	4603      	mov	r3, r0
 80061c0:	781a      	ldrb	r2, [r3, #0]
 80061c2:	1c5c      	adds	r4, r3, #1
 80061c4:	b93a      	cbnz	r2, 80061d6 <strcat+0x1a>
 80061c6:	3b01      	subs	r3, #1
 80061c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061d0:	2a00      	cmp	r2, #0
 80061d2:	d1f9      	bne.n	80061c8 <strcat+0xc>
 80061d4:	bd10      	pop	{r4, pc}
 80061d6:	4623      	mov	r3, r4
 80061d8:	e7f2      	b.n	80061c0 <strcat+0x4>

080061da <strcpy>:
 80061da:	4603      	mov	r3, r0
 80061dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061e0:	f803 2b01 	strb.w	r2, [r3], #1
 80061e4:	2a00      	cmp	r2, #0
 80061e6:	d1f9      	bne.n	80061dc <strcpy+0x2>
 80061e8:	4770      	bx	lr

080061ea <__ssputs_r>:
 80061ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ee:	688e      	ldr	r6, [r1, #8]
 80061f0:	429e      	cmp	r6, r3
 80061f2:	4682      	mov	sl, r0
 80061f4:	460c      	mov	r4, r1
 80061f6:	4690      	mov	r8, r2
 80061f8:	4699      	mov	r9, r3
 80061fa:	d837      	bhi.n	800626c <__ssputs_r+0x82>
 80061fc:	898a      	ldrh	r2, [r1, #12]
 80061fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006202:	d031      	beq.n	8006268 <__ssputs_r+0x7e>
 8006204:	6825      	ldr	r5, [r4, #0]
 8006206:	6909      	ldr	r1, [r1, #16]
 8006208:	1a6f      	subs	r7, r5, r1
 800620a:	6965      	ldr	r5, [r4, #20]
 800620c:	2302      	movs	r3, #2
 800620e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006212:	fb95 f5f3 	sdiv	r5, r5, r3
 8006216:	f109 0301 	add.w	r3, r9, #1
 800621a:	443b      	add	r3, r7
 800621c:	429d      	cmp	r5, r3
 800621e:	bf38      	it	cc
 8006220:	461d      	movcc	r5, r3
 8006222:	0553      	lsls	r3, r2, #21
 8006224:	d530      	bpl.n	8006288 <__ssputs_r+0x9e>
 8006226:	4629      	mov	r1, r5
 8006228:	f000 fb2c 	bl	8006884 <_malloc_r>
 800622c:	4606      	mov	r6, r0
 800622e:	b950      	cbnz	r0, 8006246 <__ssputs_r+0x5c>
 8006230:	230c      	movs	r3, #12
 8006232:	f8ca 3000 	str.w	r3, [sl]
 8006236:	89a3      	ldrh	r3, [r4, #12]
 8006238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800623c:	81a3      	strh	r3, [r4, #12]
 800623e:	f04f 30ff 	mov.w	r0, #4294967295
 8006242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006246:	463a      	mov	r2, r7
 8006248:	6921      	ldr	r1, [r4, #16]
 800624a:	f000 faa9 	bl	80067a0 <memcpy>
 800624e:	89a3      	ldrh	r3, [r4, #12]
 8006250:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006258:	81a3      	strh	r3, [r4, #12]
 800625a:	6126      	str	r6, [r4, #16]
 800625c:	6165      	str	r5, [r4, #20]
 800625e:	443e      	add	r6, r7
 8006260:	1bed      	subs	r5, r5, r7
 8006262:	6026      	str	r6, [r4, #0]
 8006264:	60a5      	str	r5, [r4, #8]
 8006266:	464e      	mov	r6, r9
 8006268:	454e      	cmp	r6, r9
 800626a:	d900      	bls.n	800626e <__ssputs_r+0x84>
 800626c:	464e      	mov	r6, r9
 800626e:	4632      	mov	r2, r6
 8006270:	4641      	mov	r1, r8
 8006272:	6820      	ldr	r0, [r4, #0]
 8006274:	f000 fa9f 	bl	80067b6 <memmove>
 8006278:	68a3      	ldr	r3, [r4, #8]
 800627a:	1b9b      	subs	r3, r3, r6
 800627c:	60a3      	str	r3, [r4, #8]
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	441e      	add	r6, r3
 8006282:	6026      	str	r6, [r4, #0]
 8006284:	2000      	movs	r0, #0
 8006286:	e7dc      	b.n	8006242 <__ssputs_r+0x58>
 8006288:	462a      	mov	r2, r5
 800628a:	f000 fb55 	bl	8006938 <_realloc_r>
 800628e:	4606      	mov	r6, r0
 8006290:	2800      	cmp	r0, #0
 8006292:	d1e2      	bne.n	800625a <__ssputs_r+0x70>
 8006294:	6921      	ldr	r1, [r4, #16]
 8006296:	4650      	mov	r0, sl
 8006298:	f000 faa6 	bl	80067e8 <_free_r>
 800629c:	e7c8      	b.n	8006230 <__ssputs_r+0x46>
	...

080062a0 <_svfiprintf_r>:
 80062a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a4:	461d      	mov	r5, r3
 80062a6:	898b      	ldrh	r3, [r1, #12]
 80062a8:	061f      	lsls	r7, r3, #24
 80062aa:	b09d      	sub	sp, #116	; 0x74
 80062ac:	4680      	mov	r8, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	4616      	mov	r6, r2
 80062b2:	d50f      	bpl.n	80062d4 <_svfiprintf_r+0x34>
 80062b4:	690b      	ldr	r3, [r1, #16]
 80062b6:	b96b      	cbnz	r3, 80062d4 <_svfiprintf_r+0x34>
 80062b8:	2140      	movs	r1, #64	; 0x40
 80062ba:	f000 fae3 	bl	8006884 <_malloc_r>
 80062be:	6020      	str	r0, [r4, #0]
 80062c0:	6120      	str	r0, [r4, #16]
 80062c2:	b928      	cbnz	r0, 80062d0 <_svfiprintf_r+0x30>
 80062c4:	230c      	movs	r3, #12
 80062c6:	f8c8 3000 	str.w	r3, [r8]
 80062ca:	f04f 30ff 	mov.w	r0, #4294967295
 80062ce:	e0c8      	b.n	8006462 <_svfiprintf_r+0x1c2>
 80062d0:	2340      	movs	r3, #64	; 0x40
 80062d2:	6163      	str	r3, [r4, #20]
 80062d4:	2300      	movs	r3, #0
 80062d6:	9309      	str	r3, [sp, #36]	; 0x24
 80062d8:	2320      	movs	r3, #32
 80062da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062de:	2330      	movs	r3, #48	; 0x30
 80062e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062e4:	9503      	str	r5, [sp, #12]
 80062e6:	f04f 0b01 	mov.w	fp, #1
 80062ea:	4637      	mov	r7, r6
 80062ec:	463d      	mov	r5, r7
 80062ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80062f2:	b10b      	cbz	r3, 80062f8 <_svfiprintf_r+0x58>
 80062f4:	2b25      	cmp	r3, #37	; 0x25
 80062f6:	d13e      	bne.n	8006376 <_svfiprintf_r+0xd6>
 80062f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80062fc:	d00b      	beq.n	8006316 <_svfiprintf_r+0x76>
 80062fe:	4653      	mov	r3, sl
 8006300:	4632      	mov	r2, r6
 8006302:	4621      	mov	r1, r4
 8006304:	4640      	mov	r0, r8
 8006306:	f7ff ff70 	bl	80061ea <__ssputs_r>
 800630a:	3001      	adds	r0, #1
 800630c:	f000 80a4 	beq.w	8006458 <_svfiprintf_r+0x1b8>
 8006310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006312:	4453      	add	r3, sl
 8006314:	9309      	str	r3, [sp, #36]	; 0x24
 8006316:	783b      	ldrb	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 809d 	beq.w	8006458 <_svfiprintf_r+0x1b8>
 800631e:	2300      	movs	r3, #0
 8006320:	f04f 32ff 	mov.w	r2, #4294967295
 8006324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006328:	9304      	str	r3, [sp, #16]
 800632a:	9307      	str	r3, [sp, #28]
 800632c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006330:	931a      	str	r3, [sp, #104]	; 0x68
 8006332:	462f      	mov	r7, r5
 8006334:	2205      	movs	r2, #5
 8006336:	f817 1b01 	ldrb.w	r1, [r7], #1
 800633a:	4850      	ldr	r0, [pc, #320]	; (800647c <_svfiprintf_r+0x1dc>)
 800633c:	f7f9 ff50 	bl	80001e0 <memchr>
 8006340:	9b04      	ldr	r3, [sp, #16]
 8006342:	b9d0      	cbnz	r0, 800637a <_svfiprintf_r+0xda>
 8006344:	06d9      	lsls	r1, r3, #27
 8006346:	bf44      	itt	mi
 8006348:	2220      	movmi	r2, #32
 800634a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800634e:	071a      	lsls	r2, r3, #28
 8006350:	bf44      	itt	mi
 8006352:	222b      	movmi	r2, #43	; 0x2b
 8006354:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006358:	782a      	ldrb	r2, [r5, #0]
 800635a:	2a2a      	cmp	r2, #42	; 0x2a
 800635c:	d015      	beq.n	800638a <_svfiprintf_r+0xea>
 800635e:	9a07      	ldr	r2, [sp, #28]
 8006360:	462f      	mov	r7, r5
 8006362:	2000      	movs	r0, #0
 8006364:	250a      	movs	r5, #10
 8006366:	4639      	mov	r1, r7
 8006368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800636c:	3b30      	subs	r3, #48	; 0x30
 800636e:	2b09      	cmp	r3, #9
 8006370:	d94d      	bls.n	800640e <_svfiprintf_r+0x16e>
 8006372:	b1b8      	cbz	r0, 80063a4 <_svfiprintf_r+0x104>
 8006374:	e00f      	b.n	8006396 <_svfiprintf_r+0xf6>
 8006376:	462f      	mov	r7, r5
 8006378:	e7b8      	b.n	80062ec <_svfiprintf_r+0x4c>
 800637a:	4a40      	ldr	r2, [pc, #256]	; (800647c <_svfiprintf_r+0x1dc>)
 800637c:	1a80      	subs	r0, r0, r2
 800637e:	fa0b f000 	lsl.w	r0, fp, r0
 8006382:	4318      	orrs	r0, r3
 8006384:	9004      	str	r0, [sp, #16]
 8006386:	463d      	mov	r5, r7
 8006388:	e7d3      	b.n	8006332 <_svfiprintf_r+0x92>
 800638a:	9a03      	ldr	r2, [sp, #12]
 800638c:	1d11      	adds	r1, r2, #4
 800638e:	6812      	ldr	r2, [r2, #0]
 8006390:	9103      	str	r1, [sp, #12]
 8006392:	2a00      	cmp	r2, #0
 8006394:	db01      	blt.n	800639a <_svfiprintf_r+0xfa>
 8006396:	9207      	str	r2, [sp, #28]
 8006398:	e004      	b.n	80063a4 <_svfiprintf_r+0x104>
 800639a:	4252      	negs	r2, r2
 800639c:	f043 0302 	orr.w	r3, r3, #2
 80063a0:	9207      	str	r2, [sp, #28]
 80063a2:	9304      	str	r3, [sp, #16]
 80063a4:	783b      	ldrb	r3, [r7, #0]
 80063a6:	2b2e      	cmp	r3, #46	; 0x2e
 80063a8:	d10c      	bne.n	80063c4 <_svfiprintf_r+0x124>
 80063aa:	787b      	ldrb	r3, [r7, #1]
 80063ac:	2b2a      	cmp	r3, #42	; 0x2a
 80063ae:	d133      	bne.n	8006418 <_svfiprintf_r+0x178>
 80063b0:	9b03      	ldr	r3, [sp, #12]
 80063b2:	1d1a      	adds	r2, r3, #4
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	9203      	str	r2, [sp, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	bfb8      	it	lt
 80063bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80063c0:	3702      	adds	r7, #2
 80063c2:	9305      	str	r3, [sp, #20]
 80063c4:	4d2e      	ldr	r5, [pc, #184]	; (8006480 <_svfiprintf_r+0x1e0>)
 80063c6:	7839      	ldrb	r1, [r7, #0]
 80063c8:	2203      	movs	r2, #3
 80063ca:	4628      	mov	r0, r5
 80063cc:	f7f9 ff08 	bl	80001e0 <memchr>
 80063d0:	b138      	cbz	r0, 80063e2 <_svfiprintf_r+0x142>
 80063d2:	2340      	movs	r3, #64	; 0x40
 80063d4:	1b40      	subs	r0, r0, r5
 80063d6:	fa03 f000 	lsl.w	r0, r3, r0
 80063da:	9b04      	ldr	r3, [sp, #16]
 80063dc:	4303      	orrs	r3, r0
 80063de:	3701      	adds	r7, #1
 80063e0:	9304      	str	r3, [sp, #16]
 80063e2:	7839      	ldrb	r1, [r7, #0]
 80063e4:	4827      	ldr	r0, [pc, #156]	; (8006484 <_svfiprintf_r+0x1e4>)
 80063e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063ea:	2206      	movs	r2, #6
 80063ec:	1c7e      	adds	r6, r7, #1
 80063ee:	f7f9 fef7 	bl	80001e0 <memchr>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d038      	beq.n	8006468 <_svfiprintf_r+0x1c8>
 80063f6:	4b24      	ldr	r3, [pc, #144]	; (8006488 <_svfiprintf_r+0x1e8>)
 80063f8:	bb13      	cbnz	r3, 8006440 <_svfiprintf_r+0x1a0>
 80063fa:	9b03      	ldr	r3, [sp, #12]
 80063fc:	3307      	adds	r3, #7
 80063fe:	f023 0307 	bic.w	r3, r3, #7
 8006402:	3308      	adds	r3, #8
 8006404:	9303      	str	r3, [sp, #12]
 8006406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006408:	444b      	add	r3, r9
 800640a:	9309      	str	r3, [sp, #36]	; 0x24
 800640c:	e76d      	b.n	80062ea <_svfiprintf_r+0x4a>
 800640e:	fb05 3202 	mla	r2, r5, r2, r3
 8006412:	2001      	movs	r0, #1
 8006414:	460f      	mov	r7, r1
 8006416:	e7a6      	b.n	8006366 <_svfiprintf_r+0xc6>
 8006418:	2300      	movs	r3, #0
 800641a:	3701      	adds	r7, #1
 800641c:	9305      	str	r3, [sp, #20]
 800641e:	4619      	mov	r1, r3
 8006420:	250a      	movs	r5, #10
 8006422:	4638      	mov	r0, r7
 8006424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006428:	3a30      	subs	r2, #48	; 0x30
 800642a:	2a09      	cmp	r2, #9
 800642c:	d903      	bls.n	8006436 <_svfiprintf_r+0x196>
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0c8      	beq.n	80063c4 <_svfiprintf_r+0x124>
 8006432:	9105      	str	r1, [sp, #20]
 8006434:	e7c6      	b.n	80063c4 <_svfiprintf_r+0x124>
 8006436:	fb05 2101 	mla	r1, r5, r1, r2
 800643a:	2301      	movs	r3, #1
 800643c:	4607      	mov	r7, r0
 800643e:	e7f0      	b.n	8006422 <_svfiprintf_r+0x182>
 8006440:	ab03      	add	r3, sp, #12
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	4622      	mov	r2, r4
 8006446:	4b11      	ldr	r3, [pc, #68]	; (800648c <_svfiprintf_r+0x1ec>)
 8006448:	a904      	add	r1, sp, #16
 800644a:	4640      	mov	r0, r8
 800644c:	f3af 8000 	nop.w
 8006450:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006454:	4681      	mov	r9, r0
 8006456:	d1d6      	bne.n	8006406 <_svfiprintf_r+0x166>
 8006458:	89a3      	ldrh	r3, [r4, #12]
 800645a:	065b      	lsls	r3, r3, #25
 800645c:	f53f af35 	bmi.w	80062ca <_svfiprintf_r+0x2a>
 8006460:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006462:	b01d      	add	sp, #116	; 0x74
 8006464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006468:	ab03      	add	r3, sp, #12
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	4622      	mov	r2, r4
 800646e:	4b07      	ldr	r3, [pc, #28]	; (800648c <_svfiprintf_r+0x1ec>)
 8006470:	a904      	add	r1, sp, #16
 8006472:	4640      	mov	r0, r8
 8006474:	f000 f882 	bl	800657c <_printf_i>
 8006478:	e7ea      	b.n	8006450 <_svfiprintf_r+0x1b0>
 800647a:	bf00      	nop
 800647c:	08007218 	.word	0x08007218
 8006480:	0800721e 	.word	0x0800721e
 8006484:	08007222 	.word	0x08007222
 8006488:	00000000 	.word	0x00000000
 800648c:	080061eb 	.word	0x080061eb

08006490 <_printf_common>:
 8006490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006494:	4691      	mov	r9, r2
 8006496:	461f      	mov	r7, r3
 8006498:	688a      	ldr	r2, [r1, #8]
 800649a:	690b      	ldr	r3, [r1, #16]
 800649c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064a0:	4293      	cmp	r3, r2
 80064a2:	bfb8      	it	lt
 80064a4:	4613      	movlt	r3, r2
 80064a6:	f8c9 3000 	str.w	r3, [r9]
 80064aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064ae:	4606      	mov	r6, r0
 80064b0:	460c      	mov	r4, r1
 80064b2:	b112      	cbz	r2, 80064ba <_printf_common+0x2a>
 80064b4:	3301      	adds	r3, #1
 80064b6:	f8c9 3000 	str.w	r3, [r9]
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	0699      	lsls	r1, r3, #26
 80064be:	bf42      	ittt	mi
 80064c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80064c4:	3302      	addmi	r3, #2
 80064c6:	f8c9 3000 	strmi.w	r3, [r9]
 80064ca:	6825      	ldr	r5, [r4, #0]
 80064cc:	f015 0506 	ands.w	r5, r5, #6
 80064d0:	d107      	bne.n	80064e2 <_printf_common+0x52>
 80064d2:	f104 0a19 	add.w	sl, r4, #25
 80064d6:	68e3      	ldr	r3, [r4, #12]
 80064d8:	f8d9 2000 	ldr.w	r2, [r9]
 80064dc:	1a9b      	subs	r3, r3, r2
 80064de:	42ab      	cmp	r3, r5
 80064e0:	dc28      	bgt.n	8006534 <_printf_common+0xa4>
 80064e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80064e6:	6822      	ldr	r2, [r4, #0]
 80064e8:	3300      	adds	r3, #0
 80064ea:	bf18      	it	ne
 80064ec:	2301      	movne	r3, #1
 80064ee:	0692      	lsls	r2, r2, #26
 80064f0:	d42d      	bmi.n	800654e <_printf_common+0xbe>
 80064f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064f6:	4639      	mov	r1, r7
 80064f8:	4630      	mov	r0, r6
 80064fa:	47c0      	blx	r8
 80064fc:	3001      	adds	r0, #1
 80064fe:	d020      	beq.n	8006542 <_printf_common+0xb2>
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	68e5      	ldr	r5, [r4, #12]
 8006504:	f8d9 2000 	ldr.w	r2, [r9]
 8006508:	f003 0306 	and.w	r3, r3, #6
 800650c:	2b04      	cmp	r3, #4
 800650e:	bf08      	it	eq
 8006510:	1aad      	subeq	r5, r5, r2
 8006512:	68a3      	ldr	r3, [r4, #8]
 8006514:	6922      	ldr	r2, [r4, #16]
 8006516:	bf0c      	ite	eq
 8006518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800651c:	2500      	movne	r5, #0
 800651e:	4293      	cmp	r3, r2
 8006520:	bfc4      	itt	gt
 8006522:	1a9b      	subgt	r3, r3, r2
 8006524:	18ed      	addgt	r5, r5, r3
 8006526:	f04f 0900 	mov.w	r9, #0
 800652a:	341a      	adds	r4, #26
 800652c:	454d      	cmp	r5, r9
 800652e:	d11a      	bne.n	8006566 <_printf_common+0xd6>
 8006530:	2000      	movs	r0, #0
 8006532:	e008      	b.n	8006546 <_printf_common+0xb6>
 8006534:	2301      	movs	r3, #1
 8006536:	4652      	mov	r2, sl
 8006538:	4639      	mov	r1, r7
 800653a:	4630      	mov	r0, r6
 800653c:	47c0      	blx	r8
 800653e:	3001      	adds	r0, #1
 8006540:	d103      	bne.n	800654a <_printf_common+0xba>
 8006542:	f04f 30ff 	mov.w	r0, #4294967295
 8006546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654a:	3501      	adds	r5, #1
 800654c:	e7c3      	b.n	80064d6 <_printf_common+0x46>
 800654e:	18e1      	adds	r1, r4, r3
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	2030      	movs	r0, #48	; 0x30
 8006554:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006558:	4422      	add	r2, r4
 800655a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800655e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006562:	3302      	adds	r3, #2
 8006564:	e7c5      	b.n	80064f2 <_printf_common+0x62>
 8006566:	2301      	movs	r3, #1
 8006568:	4622      	mov	r2, r4
 800656a:	4639      	mov	r1, r7
 800656c:	4630      	mov	r0, r6
 800656e:	47c0      	blx	r8
 8006570:	3001      	adds	r0, #1
 8006572:	d0e6      	beq.n	8006542 <_printf_common+0xb2>
 8006574:	f109 0901 	add.w	r9, r9, #1
 8006578:	e7d8      	b.n	800652c <_printf_common+0x9c>
	...

0800657c <_printf_i>:
 800657c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006580:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006584:	460c      	mov	r4, r1
 8006586:	7e09      	ldrb	r1, [r1, #24]
 8006588:	b085      	sub	sp, #20
 800658a:	296e      	cmp	r1, #110	; 0x6e
 800658c:	4617      	mov	r7, r2
 800658e:	4606      	mov	r6, r0
 8006590:	4698      	mov	r8, r3
 8006592:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006594:	f000 80b3 	beq.w	80066fe <_printf_i+0x182>
 8006598:	d822      	bhi.n	80065e0 <_printf_i+0x64>
 800659a:	2963      	cmp	r1, #99	; 0x63
 800659c:	d036      	beq.n	800660c <_printf_i+0x90>
 800659e:	d80a      	bhi.n	80065b6 <_printf_i+0x3a>
 80065a0:	2900      	cmp	r1, #0
 80065a2:	f000 80b9 	beq.w	8006718 <_printf_i+0x19c>
 80065a6:	2958      	cmp	r1, #88	; 0x58
 80065a8:	f000 8083 	beq.w	80066b2 <_printf_i+0x136>
 80065ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80065b4:	e032      	b.n	800661c <_printf_i+0xa0>
 80065b6:	2964      	cmp	r1, #100	; 0x64
 80065b8:	d001      	beq.n	80065be <_printf_i+0x42>
 80065ba:	2969      	cmp	r1, #105	; 0x69
 80065bc:	d1f6      	bne.n	80065ac <_printf_i+0x30>
 80065be:	6820      	ldr	r0, [r4, #0]
 80065c0:	6813      	ldr	r3, [r2, #0]
 80065c2:	0605      	lsls	r5, r0, #24
 80065c4:	f103 0104 	add.w	r1, r3, #4
 80065c8:	d52a      	bpl.n	8006620 <_printf_i+0xa4>
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6011      	str	r1, [r2, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	da03      	bge.n	80065da <_printf_i+0x5e>
 80065d2:	222d      	movs	r2, #45	; 0x2d
 80065d4:	425b      	negs	r3, r3
 80065d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80065da:	486f      	ldr	r0, [pc, #444]	; (8006798 <_printf_i+0x21c>)
 80065dc:	220a      	movs	r2, #10
 80065de:	e039      	b.n	8006654 <_printf_i+0xd8>
 80065e0:	2973      	cmp	r1, #115	; 0x73
 80065e2:	f000 809d 	beq.w	8006720 <_printf_i+0x1a4>
 80065e6:	d808      	bhi.n	80065fa <_printf_i+0x7e>
 80065e8:	296f      	cmp	r1, #111	; 0x6f
 80065ea:	d020      	beq.n	800662e <_printf_i+0xb2>
 80065ec:	2970      	cmp	r1, #112	; 0x70
 80065ee:	d1dd      	bne.n	80065ac <_printf_i+0x30>
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	f043 0320 	orr.w	r3, r3, #32
 80065f6:	6023      	str	r3, [r4, #0]
 80065f8:	e003      	b.n	8006602 <_printf_i+0x86>
 80065fa:	2975      	cmp	r1, #117	; 0x75
 80065fc:	d017      	beq.n	800662e <_printf_i+0xb2>
 80065fe:	2978      	cmp	r1, #120	; 0x78
 8006600:	d1d4      	bne.n	80065ac <_printf_i+0x30>
 8006602:	2378      	movs	r3, #120	; 0x78
 8006604:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006608:	4864      	ldr	r0, [pc, #400]	; (800679c <_printf_i+0x220>)
 800660a:	e055      	b.n	80066b8 <_printf_i+0x13c>
 800660c:	6813      	ldr	r3, [r2, #0]
 800660e:	1d19      	adds	r1, r3, #4
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6011      	str	r1, [r2, #0]
 8006614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800661c:	2301      	movs	r3, #1
 800661e:	e08c      	b.n	800673a <_printf_i+0x1be>
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6011      	str	r1, [r2, #0]
 8006624:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006628:	bf18      	it	ne
 800662a:	b21b      	sxthne	r3, r3
 800662c:	e7cf      	b.n	80065ce <_printf_i+0x52>
 800662e:	6813      	ldr	r3, [r2, #0]
 8006630:	6825      	ldr	r5, [r4, #0]
 8006632:	1d18      	adds	r0, r3, #4
 8006634:	6010      	str	r0, [r2, #0]
 8006636:	0628      	lsls	r0, r5, #24
 8006638:	d501      	bpl.n	800663e <_printf_i+0xc2>
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	e002      	b.n	8006644 <_printf_i+0xc8>
 800663e:	0668      	lsls	r0, r5, #25
 8006640:	d5fb      	bpl.n	800663a <_printf_i+0xbe>
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	4854      	ldr	r0, [pc, #336]	; (8006798 <_printf_i+0x21c>)
 8006646:	296f      	cmp	r1, #111	; 0x6f
 8006648:	bf14      	ite	ne
 800664a:	220a      	movne	r2, #10
 800664c:	2208      	moveq	r2, #8
 800664e:	2100      	movs	r1, #0
 8006650:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006654:	6865      	ldr	r5, [r4, #4]
 8006656:	60a5      	str	r5, [r4, #8]
 8006658:	2d00      	cmp	r5, #0
 800665a:	f2c0 8095 	blt.w	8006788 <_printf_i+0x20c>
 800665e:	6821      	ldr	r1, [r4, #0]
 8006660:	f021 0104 	bic.w	r1, r1, #4
 8006664:	6021      	str	r1, [r4, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d13d      	bne.n	80066e6 <_printf_i+0x16a>
 800666a:	2d00      	cmp	r5, #0
 800666c:	f040 808e 	bne.w	800678c <_printf_i+0x210>
 8006670:	4665      	mov	r5, ip
 8006672:	2a08      	cmp	r2, #8
 8006674:	d10b      	bne.n	800668e <_printf_i+0x112>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	07db      	lsls	r3, r3, #31
 800667a:	d508      	bpl.n	800668e <_printf_i+0x112>
 800667c:	6923      	ldr	r3, [r4, #16]
 800667e:	6862      	ldr	r2, [r4, #4]
 8006680:	429a      	cmp	r2, r3
 8006682:	bfde      	ittt	le
 8006684:	2330      	movle	r3, #48	; 0x30
 8006686:	f805 3c01 	strble.w	r3, [r5, #-1]
 800668a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800668e:	ebac 0305 	sub.w	r3, ip, r5
 8006692:	6123      	str	r3, [r4, #16]
 8006694:	f8cd 8000 	str.w	r8, [sp]
 8006698:	463b      	mov	r3, r7
 800669a:	aa03      	add	r2, sp, #12
 800669c:	4621      	mov	r1, r4
 800669e:	4630      	mov	r0, r6
 80066a0:	f7ff fef6 	bl	8006490 <_printf_common>
 80066a4:	3001      	adds	r0, #1
 80066a6:	d14d      	bne.n	8006744 <_printf_i+0x1c8>
 80066a8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ac:	b005      	add	sp, #20
 80066ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066b2:	4839      	ldr	r0, [pc, #228]	; (8006798 <_printf_i+0x21c>)
 80066b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80066b8:	6813      	ldr	r3, [r2, #0]
 80066ba:	6821      	ldr	r1, [r4, #0]
 80066bc:	1d1d      	adds	r5, r3, #4
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6015      	str	r5, [r2, #0]
 80066c2:	060a      	lsls	r2, r1, #24
 80066c4:	d50b      	bpl.n	80066de <_printf_i+0x162>
 80066c6:	07ca      	lsls	r2, r1, #31
 80066c8:	bf44      	itt	mi
 80066ca:	f041 0120 	orrmi.w	r1, r1, #32
 80066ce:	6021      	strmi	r1, [r4, #0]
 80066d0:	b91b      	cbnz	r3, 80066da <_printf_i+0x15e>
 80066d2:	6822      	ldr	r2, [r4, #0]
 80066d4:	f022 0220 	bic.w	r2, r2, #32
 80066d8:	6022      	str	r2, [r4, #0]
 80066da:	2210      	movs	r2, #16
 80066dc:	e7b7      	b.n	800664e <_printf_i+0xd2>
 80066de:	064d      	lsls	r5, r1, #25
 80066e0:	bf48      	it	mi
 80066e2:	b29b      	uxthmi	r3, r3
 80066e4:	e7ef      	b.n	80066c6 <_printf_i+0x14a>
 80066e6:	4665      	mov	r5, ip
 80066e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80066ec:	fb02 3311 	mls	r3, r2, r1, r3
 80066f0:	5cc3      	ldrb	r3, [r0, r3]
 80066f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80066f6:	460b      	mov	r3, r1
 80066f8:	2900      	cmp	r1, #0
 80066fa:	d1f5      	bne.n	80066e8 <_printf_i+0x16c>
 80066fc:	e7b9      	b.n	8006672 <_printf_i+0xf6>
 80066fe:	6813      	ldr	r3, [r2, #0]
 8006700:	6825      	ldr	r5, [r4, #0]
 8006702:	6961      	ldr	r1, [r4, #20]
 8006704:	1d18      	adds	r0, r3, #4
 8006706:	6010      	str	r0, [r2, #0]
 8006708:	0628      	lsls	r0, r5, #24
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	d501      	bpl.n	8006712 <_printf_i+0x196>
 800670e:	6019      	str	r1, [r3, #0]
 8006710:	e002      	b.n	8006718 <_printf_i+0x19c>
 8006712:	066a      	lsls	r2, r5, #25
 8006714:	d5fb      	bpl.n	800670e <_printf_i+0x192>
 8006716:	8019      	strh	r1, [r3, #0]
 8006718:	2300      	movs	r3, #0
 800671a:	6123      	str	r3, [r4, #16]
 800671c:	4665      	mov	r5, ip
 800671e:	e7b9      	b.n	8006694 <_printf_i+0x118>
 8006720:	6813      	ldr	r3, [r2, #0]
 8006722:	1d19      	adds	r1, r3, #4
 8006724:	6011      	str	r1, [r2, #0]
 8006726:	681d      	ldr	r5, [r3, #0]
 8006728:	6862      	ldr	r2, [r4, #4]
 800672a:	2100      	movs	r1, #0
 800672c:	4628      	mov	r0, r5
 800672e:	f7f9 fd57 	bl	80001e0 <memchr>
 8006732:	b108      	cbz	r0, 8006738 <_printf_i+0x1bc>
 8006734:	1b40      	subs	r0, r0, r5
 8006736:	6060      	str	r0, [r4, #4]
 8006738:	6863      	ldr	r3, [r4, #4]
 800673a:	6123      	str	r3, [r4, #16]
 800673c:	2300      	movs	r3, #0
 800673e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006742:	e7a7      	b.n	8006694 <_printf_i+0x118>
 8006744:	6923      	ldr	r3, [r4, #16]
 8006746:	462a      	mov	r2, r5
 8006748:	4639      	mov	r1, r7
 800674a:	4630      	mov	r0, r6
 800674c:	47c0      	blx	r8
 800674e:	3001      	adds	r0, #1
 8006750:	d0aa      	beq.n	80066a8 <_printf_i+0x12c>
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	079b      	lsls	r3, r3, #30
 8006756:	d413      	bmi.n	8006780 <_printf_i+0x204>
 8006758:	68e0      	ldr	r0, [r4, #12]
 800675a:	9b03      	ldr	r3, [sp, #12]
 800675c:	4298      	cmp	r0, r3
 800675e:	bfb8      	it	lt
 8006760:	4618      	movlt	r0, r3
 8006762:	e7a3      	b.n	80066ac <_printf_i+0x130>
 8006764:	2301      	movs	r3, #1
 8006766:	464a      	mov	r2, r9
 8006768:	4639      	mov	r1, r7
 800676a:	4630      	mov	r0, r6
 800676c:	47c0      	blx	r8
 800676e:	3001      	adds	r0, #1
 8006770:	d09a      	beq.n	80066a8 <_printf_i+0x12c>
 8006772:	3501      	adds	r5, #1
 8006774:	68e3      	ldr	r3, [r4, #12]
 8006776:	9a03      	ldr	r2, [sp, #12]
 8006778:	1a9b      	subs	r3, r3, r2
 800677a:	42ab      	cmp	r3, r5
 800677c:	dcf2      	bgt.n	8006764 <_printf_i+0x1e8>
 800677e:	e7eb      	b.n	8006758 <_printf_i+0x1dc>
 8006780:	2500      	movs	r5, #0
 8006782:	f104 0919 	add.w	r9, r4, #25
 8006786:	e7f5      	b.n	8006774 <_printf_i+0x1f8>
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1ac      	bne.n	80066e6 <_printf_i+0x16a>
 800678c:	7803      	ldrb	r3, [r0, #0]
 800678e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006792:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006796:	e76c      	b.n	8006672 <_printf_i+0xf6>
 8006798:	08007229 	.word	0x08007229
 800679c:	0800723a 	.word	0x0800723a

080067a0 <memcpy>:
 80067a0:	b510      	push	{r4, lr}
 80067a2:	1e43      	subs	r3, r0, #1
 80067a4:	440a      	add	r2, r1
 80067a6:	4291      	cmp	r1, r2
 80067a8:	d100      	bne.n	80067ac <memcpy+0xc>
 80067aa:	bd10      	pop	{r4, pc}
 80067ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067b4:	e7f7      	b.n	80067a6 <memcpy+0x6>

080067b6 <memmove>:
 80067b6:	4288      	cmp	r0, r1
 80067b8:	b510      	push	{r4, lr}
 80067ba:	eb01 0302 	add.w	r3, r1, r2
 80067be:	d807      	bhi.n	80067d0 <memmove+0x1a>
 80067c0:	1e42      	subs	r2, r0, #1
 80067c2:	4299      	cmp	r1, r3
 80067c4:	d00a      	beq.n	80067dc <memmove+0x26>
 80067c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ca:	f802 4f01 	strb.w	r4, [r2, #1]!
 80067ce:	e7f8      	b.n	80067c2 <memmove+0xc>
 80067d0:	4283      	cmp	r3, r0
 80067d2:	d9f5      	bls.n	80067c0 <memmove+0xa>
 80067d4:	1881      	adds	r1, r0, r2
 80067d6:	1ad2      	subs	r2, r2, r3
 80067d8:	42d3      	cmn	r3, r2
 80067da:	d100      	bne.n	80067de <memmove+0x28>
 80067dc:	bd10      	pop	{r4, pc}
 80067de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80067e6:	e7f7      	b.n	80067d8 <memmove+0x22>

080067e8 <_free_r>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	4605      	mov	r5, r0
 80067ec:	2900      	cmp	r1, #0
 80067ee:	d045      	beq.n	800687c <_free_r+0x94>
 80067f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067f4:	1f0c      	subs	r4, r1, #4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	bfb8      	it	lt
 80067fa:	18e4      	addlt	r4, r4, r3
 80067fc:	f000 f8d2 	bl	80069a4 <__malloc_lock>
 8006800:	4a1f      	ldr	r2, [pc, #124]	; (8006880 <_free_r+0x98>)
 8006802:	6813      	ldr	r3, [r2, #0]
 8006804:	4610      	mov	r0, r2
 8006806:	b933      	cbnz	r3, 8006816 <_free_r+0x2e>
 8006808:	6063      	str	r3, [r4, #4]
 800680a:	6014      	str	r4, [r2, #0]
 800680c:	4628      	mov	r0, r5
 800680e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006812:	f000 b8c8 	b.w	80069a6 <__malloc_unlock>
 8006816:	42a3      	cmp	r3, r4
 8006818:	d90c      	bls.n	8006834 <_free_r+0x4c>
 800681a:	6821      	ldr	r1, [r4, #0]
 800681c:	1862      	adds	r2, r4, r1
 800681e:	4293      	cmp	r3, r2
 8006820:	bf04      	itt	eq
 8006822:	681a      	ldreq	r2, [r3, #0]
 8006824:	685b      	ldreq	r3, [r3, #4]
 8006826:	6063      	str	r3, [r4, #4]
 8006828:	bf04      	itt	eq
 800682a:	1852      	addeq	r2, r2, r1
 800682c:	6022      	streq	r2, [r4, #0]
 800682e:	6004      	str	r4, [r0, #0]
 8006830:	e7ec      	b.n	800680c <_free_r+0x24>
 8006832:	4613      	mov	r3, r2
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	b10a      	cbz	r2, 800683c <_free_r+0x54>
 8006838:	42a2      	cmp	r2, r4
 800683a:	d9fa      	bls.n	8006832 <_free_r+0x4a>
 800683c:	6819      	ldr	r1, [r3, #0]
 800683e:	1858      	adds	r0, r3, r1
 8006840:	42a0      	cmp	r0, r4
 8006842:	d10b      	bne.n	800685c <_free_r+0x74>
 8006844:	6820      	ldr	r0, [r4, #0]
 8006846:	4401      	add	r1, r0
 8006848:	1858      	adds	r0, r3, r1
 800684a:	4282      	cmp	r2, r0
 800684c:	6019      	str	r1, [r3, #0]
 800684e:	d1dd      	bne.n	800680c <_free_r+0x24>
 8006850:	6810      	ldr	r0, [r2, #0]
 8006852:	6852      	ldr	r2, [r2, #4]
 8006854:	605a      	str	r2, [r3, #4]
 8006856:	4401      	add	r1, r0
 8006858:	6019      	str	r1, [r3, #0]
 800685a:	e7d7      	b.n	800680c <_free_r+0x24>
 800685c:	d902      	bls.n	8006864 <_free_r+0x7c>
 800685e:	230c      	movs	r3, #12
 8006860:	602b      	str	r3, [r5, #0]
 8006862:	e7d3      	b.n	800680c <_free_r+0x24>
 8006864:	6820      	ldr	r0, [r4, #0]
 8006866:	1821      	adds	r1, r4, r0
 8006868:	428a      	cmp	r2, r1
 800686a:	bf04      	itt	eq
 800686c:	6811      	ldreq	r1, [r2, #0]
 800686e:	6852      	ldreq	r2, [r2, #4]
 8006870:	6062      	str	r2, [r4, #4]
 8006872:	bf04      	itt	eq
 8006874:	1809      	addeq	r1, r1, r0
 8006876:	6021      	streq	r1, [r4, #0]
 8006878:	605c      	str	r4, [r3, #4]
 800687a:	e7c7      	b.n	800680c <_free_r+0x24>
 800687c:	bd38      	pop	{r3, r4, r5, pc}
 800687e:	bf00      	nop
 8006880:	20000180 	.word	0x20000180

08006884 <_malloc_r>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	1ccd      	adds	r5, r1, #3
 8006888:	f025 0503 	bic.w	r5, r5, #3
 800688c:	3508      	adds	r5, #8
 800688e:	2d0c      	cmp	r5, #12
 8006890:	bf38      	it	cc
 8006892:	250c      	movcc	r5, #12
 8006894:	2d00      	cmp	r5, #0
 8006896:	4606      	mov	r6, r0
 8006898:	db01      	blt.n	800689e <_malloc_r+0x1a>
 800689a:	42a9      	cmp	r1, r5
 800689c:	d903      	bls.n	80068a6 <_malloc_r+0x22>
 800689e:	230c      	movs	r3, #12
 80068a0:	6033      	str	r3, [r6, #0]
 80068a2:	2000      	movs	r0, #0
 80068a4:	bd70      	pop	{r4, r5, r6, pc}
 80068a6:	f000 f87d 	bl	80069a4 <__malloc_lock>
 80068aa:	4a21      	ldr	r2, [pc, #132]	; (8006930 <_malloc_r+0xac>)
 80068ac:	6814      	ldr	r4, [r2, #0]
 80068ae:	4621      	mov	r1, r4
 80068b0:	b991      	cbnz	r1, 80068d8 <_malloc_r+0x54>
 80068b2:	4c20      	ldr	r4, [pc, #128]	; (8006934 <_malloc_r+0xb0>)
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	b91b      	cbnz	r3, 80068c0 <_malloc_r+0x3c>
 80068b8:	4630      	mov	r0, r6
 80068ba:	f000 f863 	bl	8006984 <_sbrk_r>
 80068be:	6020      	str	r0, [r4, #0]
 80068c0:	4629      	mov	r1, r5
 80068c2:	4630      	mov	r0, r6
 80068c4:	f000 f85e 	bl	8006984 <_sbrk_r>
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	d124      	bne.n	8006916 <_malloc_r+0x92>
 80068cc:	230c      	movs	r3, #12
 80068ce:	6033      	str	r3, [r6, #0]
 80068d0:	4630      	mov	r0, r6
 80068d2:	f000 f868 	bl	80069a6 <__malloc_unlock>
 80068d6:	e7e4      	b.n	80068a2 <_malloc_r+0x1e>
 80068d8:	680b      	ldr	r3, [r1, #0]
 80068da:	1b5b      	subs	r3, r3, r5
 80068dc:	d418      	bmi.n	8006910 <_malloc_r+0x8c>
 80068de:	2b0b      	cmp	r3, #11
 80068e0:	d90f      	bls.n	8006902 <_malloc_r+0x7e>
 80068e2:	600b      	str	r3, [r1, #0]
 80068e4:	50cd      	str	r5, [r1, r3]
 80068e6:	18cc      	adds	r4, r1, r3
 80068e8:	4630      	mov	r0, r6
 80068ea:	f000 f85c 	bl	80069a6 <__malloc_unlock>
 80068ee:	f104 000b 	add.w	r0, r4, #11
 80068f2:	1d23      	adds	r3, r4, #4
 80068f4:	f020 0007 	bic.w	r0, r0, #7
 80068f8:	1ac3      	subs	r3, r0, r3
 80068fa:	d0d3      	beq.n	80068a4 <_malloc_r+0x20>
 80068fc:	425a      	negs	r2, r3
 80068fe:	50e2      	str	r2, [r4, r3]
 8006900:	e7d0      	b.n	80068a4 <_malloc_r+0x20>
 8006902:	428c      	cmp	r4, r1
 8006904:	684b      	ldr	r3, [r1, #4]
 8006906:	bf16      	itet	ne
 8006908:	6063      	strne	r3, [r4, #4]
 800690a:	6013      	streq	r3, [r2, #0]
 800690c:	460c      	movne	r4, r1
 800690e:	e7eb      	b.n	80068e8 <_malloc_r+0x64>
 8006910:	460c      	mov	r4, r1
 8006912:	6849      	ldr	r1, [r1, #4]
 8006914:	e7cc      	b.n	80068b0 <_malloc_r+0x2c>
 8006916:	1cc4      	adds	r4, r0, #3
 8006918:	f024 0403 	bic.w	r4, r4, #3
 800691c:	42a0      	cmp	r0, r4
 800691e:	d005      	beq.n	800692c <_malloc_r+0xa8>
 8006920:	1a21      	subs	r1, r4, r0
 8006922:	4630      	mov	r0, r6
 8006924:	f000 f82e 	bl	8006984 <_sbrk_r>
 8006928:	3001      	adds	r0, #1
 800692a:	d0cf      	beq.n	80068cc <_malloc_r+0x48>
 800692c:	6025      	str	r5, [r4, #0]
 800692e:	e7db      	b.n	80068e8 <_malloc_r+0x64>
 8006930:	20000180 	.word	0x20000180
 8006934:	20000184 	.word	0x20000184

08006938 <_realloc_r>:
 8006938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693a:	4607      	mov	r7, r0
 800693c:	4614      	mov	r4, r2
 800693e:	460e      	mov	r6, r1
 8006940:	b921      	cbnz	r1, 800694c <_realloc_r+0x14>
 8006942:	4611      	mov	r1, r2
 8006944:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006948:	f7ff bf9c 	b.w	8006884 <_malloc_r>
 800694c:	b922      	cbnz	r2, 8006958 <_realloc_r+0x20>
 800694e:	f7ff ff4b 	bl	80067e8 <_free_r>
 8006952:	4625      	mov	r5, r4
 8006954:	4628      	mov	r0, r5
 8006956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006958:	f000 f826 	bl	80069a8 <_malloc_usable_size_r>
 800695c:	42a0      	cmp	r0, r4
 800695e:	d20f      	bcs.n	8006980 <_realloc_r+0x48>
 8006960:	4621      	mov	r1, r4
 8006962:	4638      	mov	r0, r7
 8006964:	f7ff ff8e 	bl	8006884 <_malloc_r>
 8006968:	4605      	mov	r5, r0
 800696a:	2800      	cmp	r0, #0
 800696c:	d0f2      	beq.n	8006954 <_realloc_r+0x1c>
 800696e:	4631      	mov	r1, r6
 8006970:	4622      	mov	r2, r4
 8006972:	f7ff ff15 	bl	80067a0 <memcpy>
 8006976:	4631      	mov	r1, r6
 8006978:	4638      	mov	r0, r7
 800697a:	f7ff ff35 	bl	80067e8 <_free_r>
 800697e:	e7e9      	b.n	8006954 <_realloc_r+0x1c>
 8006980:	4635      	mov	r5, r6
 8006982:	e7e7      	b.n	8006954 <_realloc_r+0x1c>

08006984 <_sbrk_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4c06      	ldr	r4, [pc, #24]	; (80069a0 <_sbrk_r+0x1c>)
 8006988:	2300      	movs	r3, #0
 800698a:	4605      	mov	r5, r0
 800698c:	4608      	mov	r0, r1
 800698e:	6023      	str	r3, [r4, #0]
 8006990:	f7fb ffc8 	bl	8002924 <_sbrk>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d102      	bne.n	800699e <_sbrk_r+0x1a>
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	b103      	cbz	r3, 800699e <_sbrk_r+0x1a>
 800699c:	602b      	str	r3, [r5, #0]
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	200033ec 	.word	0x200033ec

080069a4 <__malloc_lock>:
 80069a4:	4770      	bx	lr

080069a6 <__malloc_unlock>:
 80069a6:	4770      	bx	lr

080069a8 <_malloc_usable_size_r>:
 80069a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069ac:	1f18      	subs	r0, r3, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bfbc      	itt	lt
 80069b2:	580b      	ldrlt	r3, [r1, r0]
 80069b4:	18c0      	addlt	r0, r0, r3
 80069b6:	4770      	bx	lr

080069b8 <_init>:
 80069b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ba:	bf00      	nop
 80069bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069be:	bc08      	pop	{r3}
 80069c0:	469e      	mov	lr, r3
 80069c2:	4770      	bx	lr

080069c4 <_fini>:
 80069c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c6:	bf00      	nop
 80069c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ca:	bc08      	pop	{r3}
 80069cc:	469e      	mov	lr, r3
 80069ce:	4770      	bx	lr

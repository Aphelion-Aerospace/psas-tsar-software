
Actuator-Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055dc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  08005698  08005698  00015698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d04  08005d04  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005d04  08005d04  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d04  08005d04  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d04  08005d04  00015d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d08  08005d08  00015d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000070  08005d7c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08005d7c  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026928  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000043f1  00000000  00000000  000469c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  0004adb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e8  00000000  00000000  0004b9d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d841  00000000  00000000  0004c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015f47  00000000  00000000  00069c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009bed0  00000000  00000000  0007fb48  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011ba18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e8  00000000  00000000  0011ba94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005680 	.word	0x08005680

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08005680 	.word	0x08005680

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000232:	1dfb      	adds	r3, r7, #7
 8000234:	2200      	movs	r2, #0
 8000236:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000238:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <HAL_Init+0x3c>)
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <HAL_Init+0x3c>)
 800023e:	2180      	movs	r1, #128	; 0x80
 8000240:	0049      	lsls	r1, r1, #1
 8000242:	430a      	orrs	r2, r1
 8000244:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f810 	bl	800026c <HAL_InitTick>
 800024c:	1e03      	subs	r3, r0, #0
 800024e:	d003      	beq.n	8000258 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000250:	1dfb      	adds	r3, r7, #7
 8000252:	2201      	movs	r2, #1
 8000254:	701a      	strb	r2, [r3, #0]
 8000256:	e001      	b.n	800025c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000258:	f004 fa02 	bl	8004660 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800025c:	1dfb      	adds	r3, r7, #7
 800025e:	781b      	ldrb	r3, [r3, #0]
}
 8000260:	0018      	movs	r0, r3
 8000262:	46bd      	mov	sp, r7
 8000264:	b002      	add	sp, #8
 8000266:	bd80      	pop	{r7, pc}
 8000268:	40022000 	.word	0x40022000

0800026c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800026c:	b590      	push	{r4, r7, lr}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000274:	230f      	movs	r3, #15
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	2200      	movs	r2, #0
 800027a:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 800027c:	4b1d      	ldr	r3, [pc, #116]	; (80002f4 <HAL_InitTick+0x88>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d02b      	beq.n	80002dc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000284:	4b1c      	ldr	r3, [pc, #112]	; (80002f8 <HAL_InitTick+0x8c>)
 8000286:	681c      	ldr	r4, [r3, #0]
 8000288:	4b1a      	ldr	r3, [pc, #104]	; (80002f4 <HAL_InitTick+0x88>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	0019      	movs	r1, r3
 800028e:	23fa      	movs	r3, #250	; 0xfa
 8000290:	0098      	lsls	r0, r3, #2
 8000292:	f7ff ff3f 	bl	8000114 <__udivsi3>
 8000296:	0003      	movs	r3, r0
 8000298:	0019      	movs	r1, r3
 800029a:	0020      	movs	r0, r4
 800029c:	f7ff ff3a 	bl	8000114 <__udivsi3>
 80002a0:	0003      	movs	r3, r0
 80002a2:	0018      	movs	r0, r3
 80002a4:	f001 f8d7 	bl	8001456 <HAL_SYSTICK_Config>
 80002a8:	1e03      	subs	r3, r0, #0
 80002aa:	d112      	bne.n	80002d2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b03      	cmp	r3, #3
 80002b0:	d80a      	bhi.n	80002c8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002b2:	6879      	ldr	r1, [r7, #4]
 80002b4:	2301      	movs	r3, #1
 80002b6:	425b      	negs	r3, r3
 80002b8:	2200      	movs	r2, #0
 80002ba:	0018      	movs	r0, r3
 80002bc:	f001 f8b6 	bl	800142c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80002c0:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <HAL_InitTick+0x90>)
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	e00d      	b.n	80002e4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80002c8:	230f      	movs	r3, #15
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	2201      	movs	r2, #1
 80002ce:	701a      	strb	r2, [r3, #0]
 80002d0:	e008      	b.n	80002e4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80002d2:	230f      	movs	r3, #15
 80002d4:	18fb      	adds	r3, r7, r3
 80002d6:	2201      	movs	r2, #1
 80002d8:	701a      	strb	r2, [r3, #0]
 80002da:	e003      	b.n	80002e4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002dc:	230f      	movs	r3, #15
 80002de:	18fb      	adds	r3, r7, r3
 80002e0:	2201      	movs	r2, #1
 80002e2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80002e4:	230f      	movs	r3, #15
 80002e6:	18fb      	adds	r3, r7, r3
 80002e8:	781b      	ldrb	r3, [r3, #0]
}
 80002ea:	0018      	movs	r0, r3
 80002ec:	46bd      	mov	sp, r7
 80002ee:	b005      	add	sp, #20
 80002f0:	bd90      	pop	{r4, r7, pc}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	20000004 	.word	0x20000004
 80002f8:	20000008 	.word	0x20000008
 80002fc:	20000000 	.word	0x20000000

08000300 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000304:	4b04      	ldr	r3, [pc, #16]	; (8000318 <HAL_IncTick+0x18>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	4b04      	ldr	r3, [pc, #16]	; (800031c <HAL_IncTick+0x1c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	18d2      	adds	r2, r2, r3
 800030e:	4b02      	ldr	r3, [pc, #8]	; (8000318 <HAL_IncTick+0x18>)
 8000310:	601a      	str	r2, [r3, #0]
}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000098 	.word	0x20000098
 800031c:	20000004 	.word	0x20000004

08000320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  return uwTick;
 8000324:	4b02      	ldr	r3, [pc, #8]	; (8000330 <HAL_GetTick+0x10>)
 8000326:	681b      	ldr	r3, [r3, #0]
}
 8000328:	0018      	movs	r0, r3
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	20000098 	.word	0x20000098

08000334 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a05      	ldr	r2, [pc, #20]	; (8000358 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000344:	401a      	ands	r2, r3
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	431a      	orrs	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	601a      	str	r2, [r3, #0]
}
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	46bd      	mov	sp, r7
 8000352:	b002      	add	sp, #8
 8000354:	bd80      	pop	{r7, pc}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	fe3fffff 	.word	0xfe3fffff

0800035c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	23e0      	movs	r3, #224	; 0xe0
 800036a:	045b      	lsls	r3, r3, #17
 800036c:	4013      	ands	r3, r2
}
 800036e:	0018      	movs	r0, r3
 8000370:	46bd      	mov	sp, r7
 8000372:	b002      	add	sp, #8
 8000374:	bd80      	pop	{r7, pc}

08000376 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 8000376:	b580      	push	{r7, lr}
 8000378:	b084      	sub	sp, #16
 800037a:	af00      	add	r7, sp, #0
 800037c:	60f8      	str	r0, [r7, #12]
 800037e:	60b9      	str	r1, [r7, #8]
 8000380:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	68ba      	ldr	r2, [r7, #8]
 8000388:	2104      	movs	r1, #4
 800038a:	400a      	ands	r2, r1
 800038c:	2107      	movs	r1, #7
 800038e:	4091      	lsls	r1, r2
 8000390:	000a      	movs	r2, r1
 8000392:	43d2      	mvns	r2, r2
 8000394:	401a      	ands	r2, r3
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	2104      	movs	r1, #4
 800039a:	400b      	ands	r3, r1
 800039c:	6879      	ldr	r1, [r7, #4]
 800039e:	4099      	lsls	r1, r3
 80003a0:	000b      	movs	r3, r1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b004      	add	sp, #16
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	60f8      	str	r0, [r7, #12]
 80003b8:	60b9      	str	r1, [r7, #8]
 80003ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c0:	68ba      	ldr	r2, [r7, #8]
 80003c2:	211f      	movs	r1, #31
 80003c4:	400a      	ands	r2, r1
 80003c6:	210f      	movs	r1, #15
 80003c8:	4091      	lsls	r1, r2
 80003ca:	000a      	movs	r2, r1
 80003cc:	43d2      	mvns	r2, r2
 80003ce:	401a      	ands	r2, r3
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	0e9b      	lsrs	r3, r3, #26
 80003d4:	210f      	movs	r1, #15
 80003d6:	4019      	ands	r1, r3
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	201f      	movs	r0, #31
 80003dc:	4003      	ands	r3, r0
 80003de:	4099      	lsls	r1, r3
 80003e0:	000b      	movs	r3, r1
 80003e2:	431a      	orrs	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80003e8:	46c0      	nop			; (mov r8, r8)
 80003ea:	46bd      	mov	sp, r7
 80003ec:	b004      	add	sp, #16
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	035b      	lsls	r3, r3, #13
 8000402:	0b5b      	lsrs	r3, r3, #13
 8000404:	431a      	orrs	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	629a      	str	r2, [r3, #40]	; 0x28
}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	b002      	add	sp, #8
 8000410:	bd80      	pop	{r7, pc}

08000412 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
 800041a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000420:	683a      	ldr	r2, [r7, #0]
 8000422:	0352      	lsls	r2, r2, #13
 8000424:	0b52      	lsrs	r2, r2, #13
 8000426:	43d2      	mvns	r2, r2
 8000428:	401a      	ands	r2, r3
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b002      	add	sp, #8
 8000434:	bd80      	pop	{r7, pc}
	...

08000438 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	60b9      	str	r1, [r7, #8]
 8000442:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	68ba      	ldr	r2, [r7, #8]
 800044a:	0212      	lsls	r2, r2, #8
 800044c:	43d2      	mvns	r2, r2
 800044e:	401a      	ands	r2, r3
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	021b      	lsls	r3, r3, #8
 8000454:	6879      	ldr	r1, [r7, #4]
 8000456:	400b      	ands	r3, r1
 8000458:	4904      	ldr	r1, [pc, #16]	; (800046c <LL_ADC_SetChannelSamplingTime+0x34>)
 800045a:	400b      	ands	r3, r1
 800045c:	431a      	orrs	r2, r3
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	b004      	add	sp, #16
 8000468:	bd80      	pop	{r7, pc}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	07ffff00 	.word	0x07ffff00

08000470 <LL_ADC_SetAnalogWDMonitChannels>:
  *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG
  *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8000470:	b590      	push	{r4, r7, lr}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  register __IO uint32_t *preg;
  
  if(AWDy == LL_ADC_AWD1)
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	4a10      	ldr	r2, [pc, #64]	; (80004c0 <LL_ADC_SetAnalogWDMonitChannels+0x50>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d103      	bne.n	800048c <LL_ADC_SetAnalogWDMonitChannels+0x1c>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	330c      	adds	r3, #12
 8000488:	001c      	movs	r4, r3
 800048a:	e009      	b.n	80004a0 <LL_ADC_SetAnalogWDMonitChannels+0x30>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL));
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	33a0      	adds	r3, #160	; 0xa0
 8000490:	0019      	movs	r1, r3
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	0d5b      	lsrs	r3, r3, #21
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	2204      	movs	r2, #4
 800049a:	4013      	ands	r3, r2
 800049c:	18cb      	adds	r3, r1, r3
 800049e:	001c      	movs	r4, r3
  }
  
  MODIFY_REG(*preg,
 80004a0:	6823      	ldr	r3, [r4, #0]
 80004a2:	68ba      	ldr	r2, [r7, #8]
 80004a4:	4907      	ldr	r1, [pc, #28]	; (80004c4 <LL_ADC_SetAnalogWDMonitChannels+0x54>)
 80004a6:	400a      	ands	r2, r1
 80004a8:	43d2      	mvns	r2, r2
 80004aa:	401a      	ands	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	68b9      	ldr	r1, [r7, #8]
 80004b0:	400b      	ands	r3, r1
 80004b2:	4313      	orrs	r3, r2
 80004b4:	6023      	str	r3, [r4, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b005      	add	sp, #20
 80004bc:	bd90      	pop	{r4, r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	7cc00000 	.word	0x7cc00000
 80004c4:	7cc7ffff 	.word	0x7cc7ffff

080004c8 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
 80004d4:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)) >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS)) + ((ADC_AWD_CR3_REGOFFSET & AWDy) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL)));
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	3320      	adds	r3, #32
 80004da:	0018      	movs	r0, r3
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	0d1b      	lsrs	r3, r3, #20
 80004e0:	2203      	movs	r2, #3
 80004e2:	401a      	ands	r2, r3
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	0d5b      	lsrs	r3, r3, #21
 80004e8:	2101      	movs	r1, #1
 80004ea:	400b      	ands	r3, r1
 80004ec:	18d3      	adds	r3, r2, r3
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	18c3      	adds	r3, r0, r3
 80004f2:	001c      	movs	r4, r3
  
  MODIFY_REG(*preg,
 80004f4:	6823      	ldr	r3, [r4, #0]
 80004f6:	4a06      	ldr	r2, [pc, #24]	; (8000510 <LL_ADC_ConfigAnalogWDThresholds+0x48>)
 80004f8:	401a      	ands	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	0419      	lsls	r1, r3, #16
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	430b      	orrs	r3, r1
 8000502:	4313      	orrs	r3, r2
 8000504:	6023      	str	r3, [r4, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b005      	add	sp, #20
 800050c:	bd90      	pop	{r4, r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	f000f000 	.word	0xf000f000

08000514 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	4a05      	ldr	r2, [pc, #20]	; (8000538 <LL_ADC_EnableInternalRegulator+0x24>)
 8000522:	4013      	ands	r3, r2
 8000524:	2280      	movs	r2, #128	; 0x80
 8000526:	0552      	lsls	r2, r2, #21
 8000528:	431a      	orrs	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b002      	add	sp, #8
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	6fffffe8 	.word	0x6fffffe8

0800053c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	689a      	ldr	r2, [r3, #8]
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	055b      	lsls	r3, r3, #21
 800054c:	401a      	ands	r2, r3
 800054e:	2380      	movs	r3, #128	; 0x80
 8000550:	055b      	lsls	r3, r3, #21
 8000552:	429a      	cmp	r2, r3
 8000554:	d101      	bne.n	800055a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000556:	2301      	movs	r3, #1
 8000558:	e000      	b.n	800055c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800055a:	2300      	movs	r3, #0
}
 800055c:	0018      	movs	r0, r3
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	2201      	movs	r2, #1
 8000572:	4013      	ands	r3, r2
 8000574:	2b01      	cmp	r3, #1
 8000576:	d101      	bne.n	800057c <LL_ADC_IsEnabled+0x18>
 8000578:	2301      	movs	r3, #1
 800057a:	e000      	b.n	800057e <LL_ADC_IsEnabled+0x1a>
 800057c:	2300      	movs	r3, #0
}
 800057e:	0018      	movs	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	b002      	add	sp, #8
 8000584:	bd80      	pop	{r7, pc}

08000586 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	2204      	movs	r2, #4
 8000594:	4013      	ands	r3, r2
 8000596:	2b04      	cmp	r3, #4
 8000598:	d101      	bne.n	800059e <LL_ADC_REG_IsConversionOngoing+0x18>
 800059a:	2301      	movs	r3, #1
 800059c:	e000      	b.n	80005a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800059e:	2300      	movs	r3, #0
}
 80005a0:	0018      	movs	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b002      	add	sp, #8
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	601a      	str	r2, [r3, #0]
}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b002      	add	sp, #8
 80005bc:	bd80      	pop	{r7, pc}

080005be <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b082      	sub	sp, #8
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	0052      	lsls	r2, r2, #1
 80005cc:	601a      	str	r2, [r3, #0]
}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b002      	add	sp, #8
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2280      	movs	r2, #128	; 0x80
 80005e2:	0092      	lsls	r2, r2, #2
 80005e4:	601a      	str	r2, [r3, #0]
}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b002      	add	sp, #8
 80005ec:	bd80      	pop	{r7, pc}

080005ee <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	431a      	orrs	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	605a      	str	r2, [r3, #4]
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b002      	add	sp, #8
 8000608:	bd80      	pop	{r7, pc}

0800060a <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b082      	sub	sp, #8
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	2280      	movs	r2, #128	; 0x80
 8000618:	0052      	lsls	r2, r2, #1
 800061a:	431a      	orrs	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	605a      	str	r2, [r3, #4]
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b002      	add	sp, #8
 8000626:	bd80      	pop	{r7, pc}

08000628 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	0092      	lsls	r2, r2, #2
 8000638:	431a      	orrs	r2, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	605a      	str	r2, [r3, #4]
}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	b002      	add	sp, #8
 8000644:	bd80      	pop	{r7, pc}

08000646 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	4393      	bics	r3, r2
 8000656:	001a      	movs	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	605a      	str	r2, [r3, #4]
}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b002      	add	sp, #8
 8000662:	bd80      	pop	{r7, pc}

08000664 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	4a03      	ldr	r2, [pc, #12]	; (8000680 <LL_ADC_DisableIT_AWD2+0x1c>)
 8000672:	401a      	ands	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	605a      	str	r2, [r3, #4]
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	b002      	add	sp, #8
 800067e:	bd80      	pop	{r7, pc}
 8000680:	fffffeff 	.word	0xfffffeff

08000684 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	4a03      	ldr	r2, [pc, #12]	; (80006a0 <LL_ADC_DisableIT_AWD3+0x1c>)
 8000692:	401a      	ands	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	605a      	str	r2, [r3, #4]
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	b002      	add	sp, #8
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	fffffdff 	.word	0xfffffdff

080006a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006ac:	231f      	movs	r3, #31
 80006ae:	18fb      	adds	r3, r7, r3
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d101      	bne.n	80006ca <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
 80006c8:	e1aa      	b.n	8000a20 <HAL_ADC_Init+0x37c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d10a      	bne.n	80006e8 <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	0018      	movs	r0, r3
 80006d6:	f003 ffeb 	bl	80046b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2200      	movs	r2, #0
 80006de:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2254      	movs	r2, #84	; 0x54
 80006e4:	2100      	movs	r1, #0
 80006e6:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	0018      	movs	r0, r3
 80006ee:	f7ff ff25 	bl	800053c <LL_ADC_IsInternalRegulatorEnabled>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d114      	bne.n	8000720 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	0018      	movs	r0, r3
 80006fc:	f7ff ff0a 	bl	8000514 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000700:	4bc9      	ldr	r3, [pc, #804]	; (8000a28 <HAL_ADC_Init+0x384>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	49c9      	ldr	r1, [pc, #804]	; (8000a2c <HAL_ADC_Init+0x388>)
 8000706:	0018      	movs	r0, r3
 8000708:	f7ff fd04 	bl	8000114 <__udivsi3>
 800070c:	0003      	movs	r3, r0
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8000712:	e002      	b.n	800071a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	3b01      	subs	r3, #1
 8000718:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1f9      	bne.n	8000714 <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	0018      	movs	r0, r3
 8000726:	f7ff ff09 	bl	800053c <LL_ADC_IsInternalRegulatorEnabled>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d10f      	bne.n	800074e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000732:	2210      	movs	r2, #16
 8000734:	431a      	orrs	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800073e:	2201      	movs	r2, #1
 8000740:	431a      	orrs	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 8000746:	231f      	movs	r3, #31
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	0018      	movs	r0, r3
 8000754:	f7ff ff17 	bl	8000586 <LL_ADC_REG_IsConversionOngoing>
 8000758:	0003      	movs	r3, r0
 800075a:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000760:	2210      	movs	r2, #16
 8000762:	4013      	ands	r3, r2
 8000764:	d000      	beq.n	8000768 <HAL_ADC_Init+0xc4>
 8000766:	e14e      	b.n	8000a06 <HAL_ADC_Init+0x362>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d000      	beq.n	8000770 <HAL_ADC_Init+0xcc>
 800076e:	e14a      	b.n	8000a06 <HAL_ADC_Init+0x362>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000774:	4aae      	ldr	r2, [pc, #696]	; (8000a30 <HAL_ADC_Init+0x38c>)
 8000776:	4013      	ands	r3, r2
 8000778:	2202      	movs	r2, #2
 800077a:	431a      	orrs	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	0018      	movs	r0, r3
 8000786:	f7ff feed 	bl	8000564 <LL_ADC_IsEnabled>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d137      	bne.n	80007fe <HAL_ADC_Init+0x15a>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	2218      	movs	r2, #24
 8000796:	4393      	bics	r3, r2
 8000798:	0019      	movs	r1, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	689a      	ldr	r2, [r3, #8]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	430a      	orrs	r2, r1
 80007a4:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	691b      	ldr	r3, [r3, #16]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	0899      	lsrs	r1, r3, #2
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	0f9b      	lsrs	r3, r3, #30
 80007b6:	079a      	lsls	r2, r3, #30
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	430a      	orrs	r2, r1
 80007be:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	23c0      	movs	r3, #192	; 0xc0
 80007c6:	061b      	lsls	r3, r3, #24
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d018      	beq.n	80007fe <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	05db      	lsls	r3, r3, #23
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d012      	beq.n	80007fe <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	061b      	lsls	r3, r3, #24
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d00c      	beq.n	80007fe <HAL_ADC_Init+0x15a>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 80007e4:	4b93      	ldr	r3, [pc, #588]	; (8000a34 <HAL_ADC_Init+0x390>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a93      	ldr	r2, [pc, #588]	; (8000a38 <HAL_ADC_Init+0x394>)
 80007ea:	4013      	ands	r3, r2
 80007ec:	0019      	movs	r1, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	685a      	ldr	r2, [r3, #4]
 80007f2:	23f0      	movs	r3, #240	; 0xf0
 80007f4:	039b      	lsls	r3, r3, #14
 80007f6:	401a      	ands	r2, r3
 80007f8:	4b8e      	ldr	r3, [pc, #568]	; (8000a34 <HAL_ADC_Init+0x390>)
 80007fa:	430a      	orrs	r2, r1
 80007fc:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	7e1b      	ldrb	r3, [r3, #24]
 8000802:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	7e5b      	ldrb	r3, [r3, #25]
 8000808:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800080a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	7e9b      	ldrb	r3, [r3, #26]
 8000810:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000812:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <HAL_ADC_Init+0x17e>
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	015b      	lsls	r3, r3, #5
 8000820:	e000      	b.n	8000824 <HAL_ADC_Init+0x180>
 8000822:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000824:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800082a:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	691b      	ldr	r3, [r3, #16]
 8000830:	2b00      	cmp	r3, #0
 8000832:	da04      	bge.n	800083e <HAL_ADC_Init+0x19a>
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	691b      	ldr	r3, [r3, #16]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	085b      	lsrs	r3, r3, #1
 800083c:	e001      	b.n	8000842 <HAL_ADC_Init+0x19e>
 800083e:	2380      	movs	r3, #128	; 0x80
 8000840:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 8000842:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	212c      	movs	r1, #44	; 0x2c
 8000848:	5c5b      	ldrb	r3, [r3, r1]
 800084a:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 800084c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800084e:	69ba      	ldr	r2, [r7, #24]
 8000850:	4313      	orrs	r3, r2
 8000852:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2220      	movs	r2, #32
 8000858:	5c9b      	ldrb	r3, [r3, r2]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d115      	bne.n	800088a <HAL_ADC_Init+0x1e6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	7e9b      	ldrb	r3, [r3, #26]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d105      	bne.n	8000872 <HAL_ADC_Init+0x1ce>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	0252      	lsls	r2, r2, #9
 800086c:	4313      	orrs	r3, r2
 800086e:	61bb      	str	r3, [r7, #24]
 8000870:	e00b      	b.n	800088a <HAL_ADC_Init+0x1e6>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000876:	2220      	movs	r2, #32
 8000878:	431a      	orrs	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000882:	2201      	movs	r2, #1
 8000884:	431a      	orrs	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088e:	2b00      	cmp	r3, #0
 8000890:	d00a      	beq.n	80008a8 <HAL_ADC_Init+0x204>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000896:	23e0      	movs	r3, #224	; 0xe0
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80008a0:	4313      	orrs	r3, r2
 80008a2:	69ba      	ldr	r2, [r7, #24]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 80008b0:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 80008b6:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 80008bc:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 80008be:	697a      	ldr	r2, [r7, #20]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	223c      	movs	r2, #60	; 0x3c
 80008c8:	5c9b      	ldrb	r3, [r3, r2]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d103      	bne.n	80008d6 <HAL_ADC_Init+0x232>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	2201      	movs	r2, #1
 80008d2:	4313      	orrs	r3, r2
 80008d4:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	4a57      	ldr	r2, [pc, #348]	; (8000a3c <HAL_ADC_Init+0x398>)
 80008de:	4013      	ands	r3, r2
 80008e0:	0019      	movs	r1, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	69ba      	ldr	r2, [r7, #24]
 80008e8:	430a      	orrs	r2, r1
 80008ea:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	691b      	ldr	r3, [r3, #16]
 80008f2:	4a53      	ldr	r2, [pc, #332]	; (8000a40 <HAL_ADC_Init+0x39c>)
 80008f4:	4013      	ands	r3, r2
 80008f6:	0019      	movs	r1, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	430a      	orrs	r2, r1
 8000900:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6818      	ldr	r0, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800090a:	001a      	movs	r2, r3
 800090c:	2100      	movs	r1, #0
 800090e:	f7ff fd32 	bl	8000376 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6818      	ldr	r0, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800091a:	494a      	ldr	r1, [pc, #296]	; (8000a44 <HAL_ADC_Init+0x3a0>)
 800091c:	001a      	movs	r2, r3
 800091e:	f7ff fd2a 	bl	8000376 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	691b      	ldr	r3, [r3, #16]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d109      	bne.n	800093e <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2110      	movs	r1, #16
 8000936:	4249      	negs	r1, r1
 8000938:	430a      	orrs	r2, r1
 800093a:	629a      	str	r2, [r3, #40]	; 0x28
 800093c:	e03c      	b.n	80009b8 <HAL_ADC_Init+0x314>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	691a      	ldr	r2, [r3, #16]
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	039b      	lsls	r3, r3, #14
 8000946:	429a      	cmp	r2, r3
 8000948:	d136      	bne.n	80009b8 <HAL_ADC_Init+0x314>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	e00c      	b.n	800096a <HAL_ADC_Init+0x2c6>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	40da      	lsrs	r2, r3
 800095a:	0013      	movs	r3, r2
 800095c:	220f      	movs	r2, #15
 800095e:	4013      	ands	r3, r2
 8000960:	2b0f      	cmp	r3, #15
 8000962:	d006      	beq.n	8000972 <HAL_ADC_Init+0x2ce>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	3301      	adds	r3, #1
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	2b07      	cmp	r3, #7
 800096e:	d9ef      	bls.n	8000950 <HAL_ADC_Init+0x2ac>
 8000970:	e000      	b.n	8000974 <HAL_ADC_Init+0x2d0>
        {
          break;
 8000972:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d109      	bne.n	800098e <HAL_ADC_Init+0x2ea>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2110      	movs	r1, #16
 8000986:	4249      	negs	r1, r1
 8000988:	430a      	orrs	r2, r1
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
 800098c:	e014      	b.n	80009b8 <HAL_ADC_Init+0x314>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	69db      	ldr	r3, [r3, #28]
 8000998:	4a2b      	ldr	r2, [pc, #172]	; (8000a48 <HAL_ADC_Init+0x3a4>)
 800099a:	4694      	mov	ip, r2
 800099c:	4463      	add	r3, ip
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	221c      	movs	r2, #28
 80009a2:	4013      	ands	r3, r2
 80009a4:	2210      	movs	r2, #16
 80009a6:	4252      	negs	r2, r2
 80009a8:	409a      	lsls	r2, r3
 80009aa:	0011      	movs	r1, r2
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	430a      	orrs	r2, r1
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	4a23      	ldr	r2, [pc, #140]	; (8000a4c <HAL_ADC_Init+0x3a8>)
 80009c0:	4013      	ands	r3, r2
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d10b      	bne.n	80009e0 <HAL_ADC_Init+0x33c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d2:	2203      	movs	r2, #3
 80009d4:	4393      	bics	r3, r2
 80009d6:	2201      	movs	r2, #1
 80009d8:	431a      	orrs	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80009de:	e01c      	b.n	8000a1a <HAL_ADC_Init+0x376>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e4:	2212      	movs	r2, #18
 80009e6:	4393      	bics	r3, r2
 80009e8:	2210      	movs	r2, #16
 80009ea:	431a      	orrs	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009f4:	2201      	movs	r2, #1
 80009f6:	431a      	orrs	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 80009fc:	231f      	movs	r3, #31
 80009fe:	18fb      	adds	r3, r7, r3
 8000a00:	2201      	movs	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000a04:	e009      	b.n	8000a1a <HAL_ADC_Init+0x376>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	2210      	movs	r2, #16
 8000a0c:	431a      	orrs	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8000a12:	231f      	movs	r3, #31
 8000a14:	18fb      	adds	r3, r7, r3
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a1a:	231f      	movs	r3, #31
 8000a1c:	18fb      	adds	r3, r7, r3
 8000a1e:	781b      	ldrb	r3, [r3, #0]
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b008      	add	sp, #32
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	00030d40 	.word	0x00030d40
 8000a30:	fffffefd 	.word	0xfffffefd
 8000a34:	40012708 	.word	0x40012708
 8000a38:	ffc3ffff 	.word	0xffc3ffff
 8000a3c:	fffe0219 	.word	0xfffe0219
 8000a40:	dffffc02 	.word	0xdffffc02
 8000a44:	07ffff04 	.word	0x07ffff04
 8000a48:	3fffffff 	.word	0x3fffffff
 8000a4c:	833fffe7 	.word	0x833fffe7

08000a50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a5a:	2317      	movs	r3, #23
 8000a5c:	18fb      	adds	r3, r7, r3
 8000a5e:	2200      	movs	r2, #0
 8000a60:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2254      	movs	r2, #84	; 0x54
 8000a6a:	5c9b      	ldrb	r3, [r3, r2]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d101      	bne.n	8000a74 <HAL_ADC_ConfigChannel+0x24>
 8000a70:	2302      	movs	r3, #2
 8000a72:	e1bc      	b.n	8000dee <HAL_ADC_ConfigChannel+0x39e>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2254      	movs	r2, #84	; 0x54
 8000a78:	2101      	movs	r1, #1
 8000a7a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	0018      	movs	r0, r3
 8000a82:	f7ff fd80 	bl	8000586 <LL_ADC_REG_IsConversionOngoing>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d000      	beq.n	8000a8c <HAL_ADC_ConfigChannel+0x3c>
 8000a8a:	e19f      	b.n	8000dcc <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d100      	bne.n	8000a96 <HAL_ADC_ConfigChannel+0x46>
 8000a94:	e13e      	b.n	8000d14 <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	691a      	ldr	r2, [r3, #16]
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	061b      	lsls	r3, r3, #24
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d004      	beq.n	8000aac <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8000aa6:	4abf      	ldr	r2, [pc, #764]	; (8000da4 <HAL_ADC_ConfigChannel+0x354>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d108      	bne.n	8000abe <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	0010      	movs	r0, r2
 8000ab8:	f7ff fc9a 	bl	80003f0 <LL_ADC_REG_SetSequencerChAdd>
 8000abc:	e0c9      	b.n	8000c52 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	211f      	movs	r1, #31
 8000ac8:	400b      	ands	r3, r1
 8000aca:	210f      	movs	r1, #15
 8000acc:	4099      	lsls	r1, r3
 8000ace:	000b      	movs	r3, r1
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	035b      	lsls	r3, r3, #13
 8000adc:	0b5b      	lsrs	r3, r3, #13
 8000ade:	d105      	bne.n	8000aec <HAL_ADC_ConfigChannel+0x9c>
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	0e9b      	lsrs	r3, r3, #26
 8000ae6:	221f      	movs	r2, #31
 8000ae8:	4013      	ands	r3, r2
 8000aea:	e098      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2201      	movs	r2, #1
 8000af2:	4013      	ands	r3, r2
 8000af4:	d000      	beq.n	8000af8 <HAL_ADC_ConfigChannel+0xa8>
 8000af6:	e091      	b.n	8000c1c <HAL_ADC_ConfigChannel+0x1cc>
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2202      	movs	r2, #2
 8000afe:	4013      	ands	r3, r2
 8000b00:	d000      	beq.n	8000b04 <HAL_ADC_ConfigChannel+0xb4>
 8000b02:	e089      	b.n	8000c18 <HAL_ADC_ConfigChannel+0x1c8>
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2204      	movs	r2, #4
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	d000      	beq.n	8000b10 <HAL_ADC_ConfigChannel+0xc0>
 8000b0e:	e081      	b.n	8000c14 <HAL_ADC_ConfigChannel+0x1c4>
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2208      	movs	r2, #8
 8000b16:	4013      	ands	r3, r2
 8000b18:	d000      	beq.n	8000b1c <HAL_ADC_ConfigChannel+0xcc>
 8000b1a:	e079      	b.n	8000c10 <HAL_ADC_ConfigChannel+0x1c0>
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2210      	movs	r2, #16
 8000b22:	4013      	ands	r3, r2
 8000b24:	d000      	beq.n	8000b28 <HAL_ADC_ConfigChannel+0xd8>
 8000b26:	e071      	b.n	8000c0c <HAL_ADC_ConfigChannel+0x1bc>
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2220      	movs	r2, #32
 8000b2e:	4013      	ands	r3, r2
 8000b30:	d000      	beq.n	8000b34 <HAL_ADC_ConfigChannel+0xe4>
 8000b32:	e069      	b.n	8000c08 <HAL_ADC_ConfigChannel+0x1b8>
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2240      	movs	r2, #64	; 0x40
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	d000      	beq.n	8000b40 <HAL_ADC_ConfigChannel+0xf0>
 8000b3e:	e061      	b.n	8000c04 <HAL_ADC_ConfigChannel+0x1b4>
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2280      	movs	r2, #128	; 0x80
 8000b46:	4013      	ands	r3, r2
 8000b48:	d000      	beq.n	8000b4c <HAL_ADC_ConfigChannel+0xfc>
 8000b4a:	e059      	b.n	8000c00 <HAL_ADC_ConfigChannel+0x1b0>
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	4013      	ands	r3, r2
 8000b56:	d151      	bne.n	8000bfc <HAL_ADC_ConfigChannel+0x1ac>
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	4013      	ands	r3, r2
 8000b62:	d149      	bne.n	8000bf8 <HAL_ADC_ConfigChannel+0x1a8>
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	d141      	bne.n	8000bf4 <HAL_ADC_ConfigChannel+0x1a4>
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	011b      	lsls	r3, r3, #4
 8000b78:	4013      	ands	r3, r2
 8000b7a:	d139      	bne.n	8000bf0 <HAL_ADC_ConfigChannel+0x1a0>
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	015b      	lsls	r3, r3, #5
 8000b84:	4013      	ands	r3, r2
 8000b86:	d131      	bne.n	8000bec <HAL_ADC_ConfigChannel+0x19c>
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	019b      	lsls	r3, r3, #6
 8000b90:	4013      	ands	r3, r2
 8000b92:	d129      	bne.n	8000be8 <HAL_ADC_ConfigChannel+0x198>
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	01db      	lsls	r3, r3, #7
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	d121      	bne.n	8000be4 <HAL_ADC_ConfigChannel+0x194>
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	021b      	lsls	r3, r3, #8
 8000ba8:	4013      	ands	r3, r2
 8000baa:	d119      	bne.n	8000be0 <HAL_ADC_ConfigChannel+0x190>
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	025b      	lsls	r3, r3, #9
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	d111      	bne.n	8000bdc <HAL_ADC_ConfigChannel+0x18c>
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	029b      	lsls	r3, r3, #10
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	d109      	bne.n	8000bd8 <HAL_ADC_ConfigChannel+0x188>
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	02db      	lsls	r3, r3, #11
 8000bcc:	4013      	ands	r3, r2
 8000bce:	d001      	beq.n	8000bd4 <HAL_ADC_ConfigChannel+0x184>
 8000bd0:	2312      	movs	r3, #18
 8000bd2:	e024      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e022      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000bd8:	2311      	movs	r3, #17
 8000bda:	e020      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000bdc:	2310      	movs	r3, #16
 8000bde:	e01e      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000be0:	230f      	movs	r3, #15
 8000be2:	e01c      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000be4:	230e      	movs	r3, #14
 8000be6:	e01a      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000be8:	230d      	movs	r3, #13
 8000bea:	e018      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000bec:	230c      	movs	r3, #12
 8000bee:	e016      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000bf0:	230b      	movs	r3, #11
 8000bf2:	e014      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000bf4:	230a      	movs	r3, #10
 8000bf6:	e012      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000bf8:	2309      	movs	r3, #9
 8000bfa:	e010      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	e00e      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000c00:	2307      	movs	r3, #7
 8000c02:	e00c      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000c04:	2306      	movs	r3, #6
 8000c06:	e00a      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000c08:	2305      	movs	r3, #5
 8000c0a:	e008      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	e006      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000c10:	2303      	movs	r3, #3
 8000c12:	e004      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000c14:	2302      	movs	r3, #2
 8000c16:	e002      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e000      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1ce>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	6852      	ldr	r2, [r2, #4]
 8000c22:	201f      	movs	r0, #31
 8000c24:	4002      	ands	r2, r0
 8000c26:	4093      	lsls	r3, r2
 8000c28:	000a      	movs	r2, r1
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	089b      	lsrs	r3, r3, #2
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69db      	ldr	r3, [r3, #28]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d808      	bhi.n	8000c52 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6818      	ldr	r0, [r3, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	6859      	ldr	r1, [r3, #4]
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	f7ff fbaf 	bl	80003b0 <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6818      	ldr	r0, [r3, #0]
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	6819      	ldr	r1, [r3, #0]
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	001a      	movs	r2, r3
 8000c60:	f7ff fbea 	bl	8000438 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db00      	blt.n	8000c6e <HAL_ADC_ConfigChannel+0x21e>
 8000c6c:	e0b8      	b.n	8000de0 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000c6e:	4b4e      	ldr	r3, [pc, #312]	; (8000da8 <HAL_ADC_ConfigChannel+0x358>)
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff fb73 	bl	800035c <LL_ADC_GetCommonPathInternalCh>
 8000c76:	0003      	movs	r3, r0
 8000c78:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a4b      	ldr	r2, [pc, #300]	; (8000dac <HAL_ADC_ConfigChannel+0x35c>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d11d      	bne.n	8000cc0 <HAL_ADC_ConfigChannel+0x270>
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	2380      	movs	r3, #128	; 0x80
 8000c88:	041b      	lsls	r3, r3, #16
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	d118      	bne.n	8000cc0 <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	2280      	movs	r2, #128	; 0x80
 8000c92:	0412      	lsls	r2, r2, #16
 8000c94:	4313      	orrs	r3, r2
 8000c96:	4a44      	ldr	r2, [pc, #272]	; (8000da8 <HAL_ADC_ConfigChannel+0x358>)
 8000c98:	0019      	movs	r1, r3
 8000c9a:	0010      	movs	r0, r2
 8000c9c:	f7ff fb4a 	bl	8000334 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000ca0:	4b43      	ldr	r3, [pc, #268]	; (8000db0 <HAL_ADC_ConfigChannel+0x360>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4943      	ldr	r1, [pc, #268]	; (8000db4 <HAL_ADC_ConfigChannel+0x364>)
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f7ff fa34 	bl	8000114 <__udivsi3>
 8000cac:	0003      	movs	r3, r0
 8000cae:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8000cb0:	e002      	b.n	8000cb8 <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f9      	bne.n	8000cb2 <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000cbe:	e08f      	b.n	8000de0 <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a3c      	ldr	r2, [pc, #240]	; (8000db8 <HAL_ADC_ConfigChannel+0x368>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d10e      	bne.n	8000ce8 <HAL_ADC_ConfigChannel+0x298>
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	045b      	lsls	r3, r3, #17
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	d109      	bne.n	8000ce8 <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	2280      	movs	r2, #128	; 0x80
 8000cd8:	0452      	lsls	r2, r2, #17
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	4a32      	ldr	r2, [pc, #200]	; (8000da8 <HAL_ADC_ConfigChannel+0x358>)
 8000cde:	0019      	movs	r1, r3
 8000ce0:	0010      	movs	r0, r2
 8000ce2:	f7ff fb27 	bl	8000334 <LL_ADC_SetCommonPathInternalCh>
 8000ce6:	e07b      	b.n	8000de0 <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a33      	ldr	r2, [pc, #204]	; (8000dbc <HAL_ADC_ConfigChannel+0x36c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d000      	beq.n	8000cf4 <HAL_ADC_ConfigChannel+0x2a4>
 8000cf2:	e075      	b.n	8000de0 <HAL_ADC_ConfigChannel+0x390>
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	03db      	lsls	r3, r3, #15
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	d000      	beq.n	8000d00 <HAL_ADC_ConfigChannel+0x2b0>
 8000cfe:	e06f      	b.n	8000de0 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	2280      	movs	r2, #128	; 0x80
 8000d04:	03d2      	lsls	r2, r2, #15
 8000d06:	4313      	orrs	r3, r2
 8000d08:	4a27      	ldr	r2, [pc, #156]	; (8000da8 <HAL_ADC_ConfigChannel+0x358>)
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	0010      	movs	r0, r2
 8000d0e:	f7ff fb11 	bl	8000334 <LL_ADC_SetCommonPathInternalCh>
 8000d12:	e065      	b.n	8000de0 <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	691a      	ldr	r2, [r3, #16]
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	061b      	lsls	r3, r3, #24
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d004      	beq.n	8000d2a <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8000d24:	4a1f      	ldr	r2, [pc, #124]	; (8000da4 <HAL_ADC_ConfigChannel+0x354>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d107      	bne.n	8000d3a <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	0019      	movs	r1, r3
 8000d34:	0010      	movs	r0, r2
 8000d36:	f7ff fb6c 	bl	8000412 <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	da4e      	bge.n	8000de0 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_ADC_ConfigChannel+0x358>)
 8000d44:	0018      	movs	r0, r3
 8000d46:	f7ff fb09 	bl	800035c <LL_ADC_GetCommonPathInternalCh>
 8000d4a:	0003      	movs	r3, r0
 8000d4c:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a16      	ldr	r2, [pc, #88]	; (8000dac <HAL_ADC_ConfigChannel+0x35c>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d108      	bne.n	8000d6a <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	4a19      	ldr	r2, [pc, #100]	; (8000dc0 <HAL_ADC_ConfigChannel+0x370>)
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <HAL_ADC_ConfigChannel+0x358>)
 8000d60:	0019      	movs	r1, r3
 8000d62:	0010      	movs	r0, r2
 8000d64:	f7ff fae6 	bl	8000334 <LL_ADC_SetCommonPathInternalCh>
 8000d68:	e03a      	b.n	8000de0 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <HAL_ADC_ConfigChannel+0x368>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d108      	bne.n	8000d86 <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4a13      	ldr	r2, [pc, #76]	; (8000dc4 <HAL_ADC_ConfigChannel+0x374>)
 8000d78:	4013      	ands	r3, r2
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <HAL_ADC_ConfigChannel+0x358>)
 8000d7c:	0019      	movs	r1, r3
 8000d7e:	0010      	movs	r0, r2
 8000d80:	f7ff fad8 	bl	8000334 <LL_ADC_SetCommonPathInternalCh>
 8000d84:	e02c      	b.n	8000de0 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <HAL_ADC_ConfigChannel+0x36c>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d127      	bne.n	8000de0 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <HAL_ADC_ConfigChannel+0x378>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_ADC_ConfigChannel+0x358>)
 8000d98:	0019      	movs	r1, r3
 8000d9a:	0010      	movs	r0, r2
 8000d9c:	f7ff faca 	bl	8000334 <LL_ADC_SetCommonPathInternalCh>
 8000da0:	e01e      	b.n	8000de0 <HAL_ADC_ConfigChannel+0x390>
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	80000004 	.word	0x80000004
 8000da8:	40012708 	.word	0x40012708
 8000dac:	b0001000 	.word	0xb0001000
 8000db0:	20000008 	.word	0x20000008
 8000db4:	00030d40 	.word	0x00030d40
 8000db8:	b8004000 	.word	0xb8004000
 8000dbc:	b4002000 	.word	0xb4002000
 8000dc0:	ff7fffff 	.word	0xff7fffff
 8000dc4:	feffffff 	.word	0xfeffffff
 8000dc8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd0:	2220      	movs	r2, #32
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8000dd8:	2317      	movs	r3, #23
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2254      	movs	r2, #84	; 0x54
 8000de4:	2100      	movs	r1, #0
 8000de6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000de8:	2317      	movs	r3, #23
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	781b      	ldrb	r3, [r3, #0]
}
 8000dee:	0018      	movs	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b006      	add	sp, #24
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)

08000df8 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e02:	230f      	movs	r3, #15
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2254      	movs	r2, #84	; 0x54
 8000e0e:	5c9b      	ldrb	r3, [r3, r2]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d101      	bne.n	8000e18 <HAL_ADC_AnalogWDGConfig+0x20>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e269      	b.n	80012ec <HAL_ADC_AnalogWDGConfig+0x4f4>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2254      	movs	r2, #84	; 0x54
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	5499      	strb	r1, [r3, r2]
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC group regular:                                */
  /*  - Analog watchdog channels                                              */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff fbae 	bl	8000586 <LL_ADC_REG_IsConversionOngoing>
 8000e2a:	1e03      	subs	r3, r0, #0
 8000e2c:	d000      	beq.n	8000e30 <HAL_ADC_AnalogWDGConfig+0x38>
 8000e2e:	e22a      	b.n	8001286 <HAL_ADC_AnalogWDGConfig+0x48e>
  {
    /* Analog watchdog configuration */
    if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a93      	ldr	r2, [pc, #588]	; (8001084 <HAL_ADC_AnalogWDGConfig+0x28c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d142      	bne.n	8000ec0 <HAL_ADC_AnalogWDGConfig+0xc8>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels.                                                         */
      switch(AnalogWDGConfig->WatchdogMode)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2280      	movs	r2, #128	; 0x80
 8000e40:	0412      	lsls	r2, r2, #16
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d011      	beq.n	8000e6a <HAL_ADC_AnalogWDGConfig+0x72>
 8000e46:	22c0      	movs	r2, #192	; 0xc0
 8000e48:	0412      	lsls	r2, r2, #16
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d115      	bne.n	8000e7a <HAL_ADC_AnalogWDGConfig+0x82>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel, LL_ADC_GROUP_REGULAR));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6818      	ldr	r0, [r3, #0]
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	4a8c      	ldr	r2, [pc, #560]	; (8001088 <HAL_ADC_AnalogWDGConfig+0x290>)
 8000e58:	4013      	ands	r3, r2
 8000e5a:	22c0      	movs	r2, #192	; 0xc0
 8000e5c:	0412      	lsls	r2, r2, #16
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	4988      	ldr	r1, [pc, #544]	; (8001084 <HAL_ADC_AnalogWDGConfig+0x28c>)
 8000e62:	001a      	movs	r2, r3
 8000e64:	f7ff fb04 	bl	8000470 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8000e68:	e00f      	b.n	8000e8a <HAL_ADC_AnalogWDGConfig+0x92>
        
        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a87      	ldr	r2, [pc, #540]	; (800108c <HAL_ADC_AnalogWDGConfig+0x294>)
 8000e70:	4984      	ldr	r1, [pc, #528]	; (8001084 <HAL_ADC_AnalogWDGConfig+0x28c>)
 8000e72:	0018      	movs	r0, r3
 8000e74:	f7ff fafc 	bl	8000470 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8000e78:	e007      	b.n	8000e8a <HAL_ADC_AnalogWDGConfig+0x92>
        
        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4981      	ldr	r1, [pc, #516]	; (8001084 <HAL_ADC_AnalogWDGConfig+0x28c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	0018      	movs	r0, r3
 8000e84:	f7ff faf4 	bl	8000470 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8000e88:	46c0      	nop			; (mov r8, r8)
      }
      
      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8e:	4a80      	ldr	r2, [pc, #512]	; (8001090 <HAL_ADC_AnalogWDGConfig+0x298>)
 8000e90:	401a      	ands	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f7ff fb84 	bl	80005a8 <LL_ADC_ClearFlag_AWD1>
      
      /* Configure ADC analog watchdog interrupt */
      if(AnalogWDGConfig->ITMode == ENABLE)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	7b1b      	ldrb	r3, [r3, #12]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d105      	bne.n	8000eb4 <HAL_ADC_AnalogWDGConfig+0xbc>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff fb9e 	bl	80005ee <LL_ADC_EnableIT_AWD1>
 8000eb2:	e1e8      	b.n	8001286 <HAL_ADC_AnalogWDGConfig+0x48e>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f7ff fbc4 	bl	8000646 <LL_ADC_DisableIT_AWD1>
 8000ebe:	e1e2      	b.n	8001286 <HAL_ADC_AnalogWDGConfig+0x48e>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch(AnalogWDGConfig->WatchdogMode)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2280      	movs	r2, #128	; 0x80
 8000ec6:	0412      	lsls	r2, r2, #16
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d100      	bne.n	8000ece <HAL_ADC_AnalogWDGConfig+0xd6>
 8000ecc:	e18f      	b.n	80011ee <HAL_ADC_AnalogWDGConfig+0x3f6>
 8000ece:	22c0      	movs	r2, #192	; 0xc0
 8000ed0:	0412      	lsls	r2, r2, #16
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d000      	beq.n	8000ed8 <HAL_ADC_AnalogWDGConfig+0xe0>
 8000ed6:	e193      	b.n	8001200 <HAL_ADC_AnalogWDGConfig+0x408>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a6d      	ldr	r2, [pc, #436]	; (8001094 <HAL_ADC_AnalogWDGConfig+0x29c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d000      	beq.n	8000ee4 <HAL_ADC_AnalogWDGConfig+0xec>
 8000ee2:	e0bc      	b.n	800105e <HAL_ADC_AnalogWDGConfig+0x266>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	22a0      	movs	r2, #160	; 0xa0
 8000eea:	5899      	ldr	r1, [r3, r2]
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	035b      	lsls	r3, r3, #13
 8000ef2:	0b5b      	lsrs	r3, r3, #13
 8000ef4:	d108      	bne.n	8000f08 <HAL_ADC_AnalogWDGConfig+0x110>
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	0e9b      	lsrs	r3, r3, #26
 8000efc:	221f      	movs	r2, #31
 8000efe:	4013      	ands	r3, r2
 8000f00:	2201      	movs	r2, #1
 8000f02:	409a      	lsls	r2, r3
 8000f04:	0013      	movs	r3, r2
 8000f06:	e0a4      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d000      	beq.n	8000f14 <HAL_ADC_AnalogWDGConfig+0x11c>
 8000f12:	e09d      	b.n	8001050 <HAL_ADC_AnalogWDGConfig+0x258>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	2202      	movs	r2, #2
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	d000      	beq.n	8000f20 <HAL_ADC_AnalogWDGConfig+0x128>
 8000f1e:	e095      	b.n	800104c <HAL_ADC_AnalogWDGConfig+0x254>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	2204      	movs	r2, #4
 8000f26:	4013      	ands	r3, r2
 8000f28:	d000      	beq.n	8000f2c <HAL_ADC_AnalogWDGConfig+0x134>
 8000f2a:	e08d      	b.n	8001048 <HAL_ADC_AnalogWDGConfig+0x250>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	2208      	movs	r2, #8
 8000f32:	4013      	ands	r3, r2
 8000f34:	d000      	beq.n	8000f38 <HAL_ADC_AnalogWDGConfig+0x140>
 8000f36:	e085      	b.n	8001044 <HAL_ADC_AnalogWDGConfig+0x24c>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	2210      	movs	r2, #16
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d000      	beq.n	8000f44 <HAL_ADC_AnalogWDGConfig+0x14c>
 8000f42:	e07d      	b.n	8001040 <HAL_ADC_AnalogWDGConfig+0x248>
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	2220      	movs	r2, #32
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d000      	beq.n	8000f50 <HAL_ADC_AnalogWDGConfig+0x158>
 8000f4e:	e075      	b.n	800103c <HAL_ADC_AnalogWDGConfig+0x244>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	2240      	movs	r2, #64	; 0x40
 8000f56:	4013      	ands	r3, r2
 8000f58:	d000      	beq.n	8000f5c <HAL_ADC_AnalogWDGConfig+0x164>
 8000f5a:	e06d      	b.n	8001038 <HAL_ADC_AnalogWDGConfig+0x240>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	2280      	movs	r2, #128	; 0x80
 8000f62:	4013      	ands	r3, r2
 8000f64:	d000      	beq.n	8000f68 <HAL_ADC_AnalogWDGConfig+0x170>
 8000f66:	e065      	b.n	8001034 <HAL_ADC_AnalogWDGConfig+0x23c>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4013      	ands	r3, r2
 8000f72:	d000      	beq.n	8000f76 <HAL_ADC_AnalogWDGConfig+0x17e>
 8000f74:	e05b      	b.n	800102e <HAL_ADC_AnalogWDGConfig+0x236>
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d152      	bne.n	8001028 <HAL_ADC_AnalogWDGConfig+0x230>
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d149      	bne.n	8001022 <HAL_ADC_AnalogWDGConfig+0x22a>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	011b      	lsls	r3, r3, #4
 8000f96:	4013      	ands	r3, r2
 8000f98:	d140      	bne.n	800101c <HAL_ADC_AnalogWDGConfig+0x224>
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	015b      	lsls	r3, r3, #5
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d137      	bne.n	8001016 <HAL_ADC_AnalogWDGConfig+0x21e>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	019b      	lsls	r3, r3, #6
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d12e      	bne.n	8001010 <HAL_ADC_AnalogWDGConfig+0x218>
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	01db      	lsls	r3, r3, #7
 8000fba:	4013      	ands	r3, r2
 8000fbc:	d125      	bne.n	800100a <HAL_ADC_AnalogWDGConfig+0x212>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d11c      	bne.n	8001004 <HAL_ADC_AnalogWDGConfig+0x20c>
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	025b      	lsls	r3, r3, #9
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d113      	bne.n	8000ffe <HAL_ADC_AnalogWDGConfig+0x206>
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	029b      	lsls	r3, r3, #10
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d10a      	bne.n	8000ff8 <HAL_ADC_AnalogWDGConfig+0x200>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	02db      	lsls	r3, r3, #11
 8000fea:	4013      	ands	r3, r2
 8000fec:	d002      	beq.n	8000ff4 <HAL_ADC_AnalogWDGConfig+0x1fc>
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	02db      	lsls	r3, r3, #11
 8000ff2:	e02e      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e02c      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	029b      	lsls	r3, r3, #10
 8000ffc:	e029      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	025b      	lsls	r3, r3, #9
 8001002:	e026      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	e023      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	01db      	lsls	r3, r3, #7
 800100e:	e020      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	019b      	lsls	r3, r3, #6
 8001014:	e01d      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	015b      	lsls	r3, r3, #5
 800101a:	e01a      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	e017      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	e014      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	e011      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 800102e:	2380      	movs	r3, #128	; 0x80
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	e00e      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	e00c      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001038:	2340      	movs	r3, #64	; 0x40
 800103a:	e00a      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 800103c:	2320      	movs	r3, #32
 800103e:	e008      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001040:	2310      	movs	r3, #16
 8001042:	e006      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001044:	2308      	movs	r3, #8
 8001046:	e004      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001048:	2304      	movs	r3, #4
 800104a:	e002      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 800104c:	2302      	movs	r3, #2
 800104e:	e000      	b.n	8001052 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001050:	2301      	movs	r3, #1
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	6812      	ldr	r2, [r2, #0]
 8001056:	430b      	orrs	r3, r1
 8001058:	21a0      	movs	r1, #160	; 0xa0
 800105a:	5053      	str	r3, [r2, r1]
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
          }
          break;
 800105c:	e0d9      	b.n	8001212 <HAL_ADC_AnalogWDGConfig+0x41a>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	22a4      	movs	r2, #164	; 0xa4
 8001064:	5899      	ldr	r1, [r3, r2]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	035b      	lsls	r3, r3, #13
 800106c:	0b5b      	lsrs	r3, r3, #13
 800106e:	d113      	bne.n	8001098 <HAL_ADC_AnalogWDGConfig+0x2a0>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	0e9b      	lsrs	r3, r3, #26
 8001076:	221f      	movs	r2, #31
 8001078:	4013      	ands	r3, r2
 800107a:	2201      	movs	r2, #1
 800107c:	409a      	lsls	r2, r3
 800107e:	0013      	movs	r3, r2
 8001080:	e0af      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	7cc00000 	.word	0x7cc00000
 8001088:	fc07ffff 	.word	0xfc07ffff
 800108c:	0087ffff 	.word	0x0087ffff
 8001090:	fffeffff 	.word	0xfffeffff
 8001094:	0017ffff 	.word	0x0017ffff
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	2201      	movs	r2, #1
 800109e:	4013      	ands	r3, r2
 80010a0:	d000      	beq.n	80010a4 <HAL_ADC_AnalogWDGConfig+0x2ac>
 80010a2:	e09d      	b.n	80011e0 <HAL_ADC_AnalogWDGConfig+0x3e8>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	2202      	movs	r2, #2
 80010aa:	4013      	ands	r3, r2
 80010ac:	d000      	beq.n	80010b0 <HAL_ADC_AnalogWDGConfig+0x2b8>
 80010ae:	e095      	b.n	80011dc <HAL_ADC_AnalogWDGConfig+0x3e4>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	2204      	movs	r2, #4
 80010b6:	4013      	ands	r3, r2
 80010b8:	d000      	beq.n	80010bc <HAL_ADC_AnalogWDGConfig+0x2c4>
 80010ba:	e08d      	b.n	80011d8 <HAL_ADC_AnalogWDGConfig+0x3e0>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	2208      	movs	r2, #8
 80010c2:	4013      	ands	r3, r2
 80010c4:	d000      	beq.n	80010c8 <HAL_ADC_AnalogWDGConfig+0x2d0>
 80010c6:	e085      	b.n	80011d4 <HAL_ADC_AnalogWDGConfig+0x3dc>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	2210      	movs	r2, #16
 80010ce:	4013      	ands	r3, r2
 80010d0:	d000      	beq.n	80010d4 <HAL_ADC_AnalogWDGConfig+0x2dc>
 80010d2:	e07d      	b.n	80011d0 <HAL_ADC_AnalogWDGConfig+0x3d8>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	2220      	movs	r2, #32
 80010da:	4013      	ands	r3, r2
 80010dc:	d000      	beq.n	80010e0 <HAL_ADC_AnalogWDGConfig+0x2e8>
 80010de:	e075      	b.n	80011cc <HAL_ADC_AnalogWDGConfig+0x3d4>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2240      	movs	r2, #64	; 0x40
 80010e6:	4013      	ands	r3, r2
 80010e8:	d000      	beq.n	80010ec <HAL_ADC_AnalogWDGConfig+0x2f4>
 80010ea:	e06d      	b.n	80011c8 <HAL_ADC_AnalogWDGConfig+0x3d0>
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	4013      	ands	r3, r2
 80010f4:	d000      	beq.n	80010f8 <HAL_ADC_AnalogWDGConfig+0x300>
 80010f6:	e065      	b.n	80011c4 <HAL_ADC_AnalogWDGConfig+0x3cc>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4013      	ands	r3, r2
 8001102:	d000      	beq.n	8001106 <HAL_ADC_AnalogWDGConfig+0x30e>
 8001104:	e05b      	b.n	80011be <HAL_ADC_AnalogWDGConfig+0x3c6>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4013      	ands	r3, r2
 8001110:	d152      	bne.n	80011b8 <HAL_ADC_AnalogWDGConfig+0x3c0>
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4013      	ands	r3, r2
 800111c:	d149      	bne.n	80011b2 <HAL_ADC_AnalogWDGConfig+0x3ba>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	4013      	ands	r3, r2
 8001128:	d140      	bne.n	80011ac <HAL_ADC_AnalogWDGConfig+0x3b4>
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	015b      	lsls	r3, r3, #5
 8001132:	4013      	ands	r3, r2
 8001134:	d137      	bne.n	80011a6 <HAL_ADC_AnalogWDGConfig+0x3ae>
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	019b      	lsls	r3, r3, #6
 800113e:	4013      	ands	r3, r2
 8001140:	d12e      	bne.n	80011a0 <HAL_ADC_AnalogWDGConfig+0x3a8>
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	01db      	lsls	r3, r3, #7
 800114a:	4013      	ands	r3, r2
 800114c:	d125      	bne.n	800119a <HAL_ADC_AnalogWDGConfig+0x3a2>
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	4013      	ands	r3, r2
 8001158:	d11c      	bne.n	8001194 <HAL_ADC_AnalogWDGConfig+0x39c>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	025b      	lsls	r3, r3, #9
 8001162:	4013      	ands	r3, r2
 8001164:	d113      	bne.n	800118e <HAL_ADC_AnalogWDGConfig+0x396>
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	029b      	lsls	r3, r3, #10
 800116e:	4013      	ands	r3, r2
 8001170:	d10a      	bne.n	8001188 <HAL_ADC_AnalogWDGConfig+0x390>
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	02db      	lsls	r3, r3, #11
 800117a:	4013      	ands	r3, r2
 800117c:	d002      	beq.n	8001184 <HAL_ADC_AnalogWDGConfig+0x38c>
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	02db      	lsls	r3, r3, #11
 8001182:	e02e      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001184:	2301      	movs	r3, #1
 8001186:	e02c      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	029b      	lsls	r3, r3, #10
 800118c:	e029      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 800118e:	2380      	movs	r3, #128	; 0x80
 8001190:	025b      	lsls	r3, r3, #9
 8001192:	e026      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	e023      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	01db      	lsls	r3, r3, #7
 800119e:	e020      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	019b      	lsls	r3, r3, #6
 80011a4:	e01d      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	015b      	lsls	r3, r3, #5
 80011aa:	e01a      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	e017      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	e014      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	e011      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	e00e      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	e00c      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011c8:	2340      	movs	r3, #64	; 0x40
 80011ca:	e00a      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011cc:	2320      	movs	r3, #32
 80011ce:	e008      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011d0:	2310      	movs	r3, #16
 80011d2:	e006      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011d4:	2308      	movs	r3, #8
 80011d6:	e004      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011d8:	2304      	movs	r3, #4
 80011da:	e002      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011dc:	2302      	movs	r3, #2
 80011de:	e000      	b.n	80011e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011e0:	2301      	movs	r3, #1
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6812      	ldr	r2, [r2, #0]
 80011e6:	430b      	orrs	r3, r1
 80011e8:	21a4      	movs	r1, #164	; 0xa4
 80011ea:	5053      	str	r3, [r2, r1]
          break;
 80011ec:	e011      	b.n	8001212 <HAL_ADC_AnalogWDGConfig+0x41a>
          
        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a3f      	ldr	r2, [pc, #252]	; (80012f4 <HAL_ADC_AnalogWDGConfig+0x4fc>)
 80011f8:	0019      	movs	r1, r3
 80011fa:	f7ff f939 	bl	8000470 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80011fe:	e008      	b.n	8001212 <HAL_ADC_AnalogWDGConfig+0x41a>
          
        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2200      	movs	r2, #0
 800120a:	0019      	movs	r1, r3
 800120c:	f7ff f930 	bl	8000470 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8001210:	46c0      	nop			; (mov r8, r8)
      }
      
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a38      	ldr	r2, [pc, #224]	; (80012f8 <HAL_ADC_AnalogWDGConfig+0x500>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d11a      	bne.n	8001252 <HAL_ADC_AnalogWDGConfig+0x45a>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001220:	4a36      	ldr	r2, [pc, #216]	; (80012fc <HAL_ADC_AnalogWDGConfig+0x504>)
 8001222:	401a      	ands	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	0018      	movs	r0, r3
 800122e:	f7ff f9c6 	bl	80005be <LL_ADC_ClearFlag_AWD2>
        
        /* Configure ADC analog watchdog interrupt */
        if(AnalogWDGConfig->ITMode == ENABLE)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	7b1b      	ldrb	r3, [r3, #12]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d105      	bne.n	8001246 <HAL_ADC_AnalogWDGConfig+0x44e>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	0018      	movs	r0, r3
 8001240:	f7ff f9e3 	bl	800060a <LL_ADC_EnableIT_AWD2>
 8001244:	e01f      	b.n	8001286 <HAL_ADC_AnalogWDGConfig+0x48e>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	0018      	movs	r0, r3
 800124c:	f7ff fa0a 	bl	8000664 <LL_ADC_DisableIT_AWD2>
 8001250:	e019      	b.n	8001286 <HAL_ADC_AnalogWDGConfig+0x48e>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001256:	4a2a      	ldr	r2, [pc, #168]	; (8001300 <HAL_ADC_AnalogWDGConfig+0x508>)
 8001258:	401a      	ands	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	0018      	movs	r0, r3
 8001264:	f7ff f9b7 	bl	80005d6 <LL_ADC_ClearFlag_AWD3>
        
        /* Configure ADC analog watchdog interrupt */
        if(AnalogWDGConfig->ITMode == ENABLE)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	7b1b      	ldrb	r3, [r3, #12]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d105      	bne.n	800127c <HAL_ADC_AnalogWDGConfig+0x484>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	0018      	movs	r0, r3
 8001276:	f7ff f9d7 	bl	8000628 <LL_ADC_EnableIT_AWD3>
 800127a:	e004      	b.n	8001286 <HAL_ADC_AnalogWDGConfig+0x48e>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	0018      	movs	r0, r3
 8001282:	f7ff f9ff 	bl	8000684 <LL_ADC_DisableIT_AWD3>
    }
    
  }
    
  /* Analog watchdog thresholds configuration */
  if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <HAL_ADC_AnalogWDGConfig+0x50c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d118      	bne.n	80012c2 <HAL_ADC_AnalogWDGConfig+0x4ca>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */ 
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	08db      	lsrs	r3, r3, #3
 800129c:	2103      	movs	r1, #3
 800129e:	400b      	ands	r3, r1
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	617b      	str	r3, [r7, #20]
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	695a      	ldr	r2, [r3, #20]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	08db      	lsrs	r3, r3, #3
 80012b4:	2103      	movs	r1, #3
 80012b6:	400b      	ands	r3, r1
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	409a      	lsls	r2, r3
 80012bc:	0013      	movs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	e005      	b.n	80012ce <HAL_ADC_AnalogWDGConfig+0x4d6>
  else
  {
    /* No need to shift the offset with respect to the selected ADC resolution: */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = AnalogWDGConfig->HighThreshold;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	617b      	str	r3, [r7, #20]
    tmpAWDLowThresholdShifted  = AnalogWDGConfig->LowThreshold;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	613b      	str	r3, [r7, #16]
  }
  
  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	6819      	ldr	r1, [r3, #0]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	f7ff f8f5 	bl	80004c8 <LL_ADC_ConfigAnalogWDThresholds>
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2254      	movs	r2, #84	; 0x54
 80012e2:	2100      	movs	r1, #0
 80012e4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80012e6:	230f      	movs	r3, #15
 80012e8:	18fb      	adds	r3, r7, r3
 80012ea:	781b      	ldrb	r3, [r3, #0]
}
 80012ec:	0018      	movs	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b006      	add	sp, #24
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	0087ffff 	.word	0x0087ffff
 80012f8:	0017ffff 	.word	0x0017ffff
 80012fc:	fffdffff 	.word	0xfffdffff
 8001300:	fffbffff 	.word	0xfffbffff
 8001304:	7cc00000 	.word	0x7cc00000

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	0002      	movs	r2, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b7f      	cmp	r3, #127	; 0x7f
 800131c:	d828      	bhi.n	8001370 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800131e:	4a2f      	ldr	r2, [pc, #188]	; (80013dc <__NVIC_SetPriority+0xd4>)
 8001320:	1dfb      	adds	r3, r7, #7
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b25b      	sxtb	r3, r3
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	33c0      	adds	r3, #192	; 0xc0
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	589b      	ldr	r3, [r3, r2]
 800132e:	1dfa      	adds	r2, r7, #7
 8001330:	7812      	ldrb	r2, [r2, #0]
 8001332:	0011      	movs	r1, r2
 8001334:	2203      	movs	r2, #3
 8001336:	400a      	ands	r2, r1
 8001338:	00d2      	lsls	r2, r2, #3
 800133a:	21ff      	movs	r1, #255	; 0xff
 800133c:	4091      	lsls	r1, r2
 800133e:	000a      	movs	r2, r1
 8001340:	43d2      	mvns	r2, r2
 8001342:	401a      	ands	r2, r3
 8001344:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	019b      	lsls	r3, r3, #6
 800134a:	22ff      	movs	r2, #255	; 0xff
 800134c:	401a      	ands	r2, r3
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	0018      	movs	r0, r3
 8001354:	2303      	movs	r3, #3
 8001356:	4003      	ands	r3, r0
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800135c:	481f      	ldr	r0, [pc, #124]	; (80013dc <__NVIC_SetPriority+0xd4>)
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b25b      	sxtb	r3, r3
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	430a      	orrs	r2, r1
 8001368:	33c0      	adds	r3, #192	; 0xc0
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800136e:	e031      	b.n	80013d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001370:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <__NVIC_SetPriority+0xd8>)
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	0019      	movs	r1, r3
 8001378:	230f      	movs	r3, #15
 800137a:	400b      	ands	r3, r1
 800137c:	3b08      	subs	r3, #8
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3306      	adds	r3, #6
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	18d3      	adds	r3, r2, r3
 8001386:	3304      	adds	r3, #4
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	1dfa      	adds	r2, r7, #7
 800138c:	7812      	ldrb	r2, [r2, #0]
 800138e:	0011      	movs	r1, r2
 8001390:	2203      	movs	r2, #3
 8001392:	400a      	ands	r2, r1
 8001394:	00d2      	lsls	r2, r2, #3
 8001396:	21ff      	movs	r1, #255	; 0xff
 8001398:	4091      	lsls	r1, r2
 800139a:	000a      	movs	r2, r1
 800139c:	43d2      	mvns	r2, r2
 800139e:	401a      	ands	r2, r3
 80013a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	019b      	lsls	r3, r3, #6
 80013a6:	22ff      	movs	r2, #255	; 0xff
 80013a8:	401a      	ands	r2, r3
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	0018      	movs	r0, r3
 80013b0:	2303      	movs	r3, #3
 80013b2:	4003      	ands	r3, r0
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013b8:	4809      	ldr	r0, [pc, #36]	; (80013e0 <__NVIC_SetPriority+0xd8>)
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	001c      	movs	r4, r3
 80013c0:	230f      	movs	r3, #15
 80013c2:	4023      	ands	r3, r4
 80013c4:	3b08      	subs	r3, #8
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	430a      	orrs	r2, r1
 80013ca:	3306      	adds	r3, #6
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	18c3      	adds	r3, r0, r3
 80013d0:	3304      	adds	r3, #4
 80013d2:	601a      	str	r2, [r3, #0]
}
 80013d4:	46c0      	nop			; (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b003      	add	sp, #12
 80013da:	bd90      	pop	{r4, r7, pc}
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	4a0c      	ldr	r2, [pc, #48]	; (8001424 <SysTick_Config+0x40>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d901      	bls.n	80013fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f6:	2301      	movs	r3, #1
 80013f8:	e010      	b.n	800141c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <SysTick_Config+0x44>)
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	3a01      	subs	r2, #1
 8001400:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001402:	2301      	movs	r3, #1
 8001404:	425b      	negs	r3, r3
 8001406:	2103      	movs	r1, #3
 8001408:	0018      	movs	r0, r3
 800140a:	f7ff ff7d 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <SysTick_Config+0x44>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <SysTick_Config+0x44>)
 8001416:	2207      	movs	r2, #7
 8001418:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800141a:	2300      	movs	r3, #0
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b002      	add	sp, #8
 8001422:	bd80      	pop	{r7, pc}
 8001424:	00ffffff 	.word	0x00ffffff
 8001428:	e000e010 	.word	0xe000e010

0800142c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	210f      	movs	r1, #15
 8001438:	187b      	adds	r3, r7, r1
 800143a:	1c02      	adds	r2, r0, #0
 800143c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	187b      	adds	r3, r7, r1
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b25b      	sxtb	r3, r3
 8001446:	0011      	movs	r1, r2
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff ff5d 	bl	8001308 <__NVIC_SetPriority>
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b004      	add	sp, #16
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff ffbf 	bl	80013e4 <SysTick_Config>
 8001466:	0003      	movs	r3, r0
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	b002      	add	sp, #8
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147e:	e147      	b.n	8001710 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4091      	lsls	r1, r2
 800148a:	000a      	movs	r2, r1
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d100      	bne.n	8001498 <HAL_GPIO_Init+0x28>
 8001496:	e138      	b.n	800170a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x38>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b12      	cmp	r3, #18
 80014a6:	d123      	bne.n	80014f0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	08da      	lsrs	r2, r3, #3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3208      	adds	r2, #8
 80014b0:	0092      	lsls	r2, r2, #2
 80014b2:	58d3      	ldr	r3, [r2, r3]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	2207      	movs	r2, #7
 80014ba:	4013      	ands	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	220f      	movs	r2, #15
 80014c0:	409a      	lsls	r2, r3
 80014c2:	0013      	movs	r3, r2
 80014c4:	43da      	mvns	r2, r3
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	691a      	ldr	r2, [r3, #16]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2107      	movs	r1, #7
 80014d4:	400b      	ands	r3, r1
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	409a      	lsls	r2, r3
 80014da:	0013      	movs	r3, r2
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	08da      	lsrs	r2, r3, #3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3208      	adds	r2, #8
 80014ea:	0092      	lsls	r2, r2, #2
 80014ec:	6939      	ldr	r1, [r7, #16]
 80014ee:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2203      	movs	r2, #3
 80014fc:	409a      	lsls	r2, r3
 80014fe:	0013      	movs	r3, r2
 8001500:	43da      	mvns	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2203      	movs	r2, #3
 800150e:	401a      	ands	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	409a      	lsls	r2, r3
 8001516:	0013      	movs	r3, r2
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d00b      	beq.n	8001544 <HAL_GPIO_Init+0xd4>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d007      	beq.n	8001544 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001538:	2b11      	cmp	r3, #17
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b12      	cmp	r3, #18
 8001542:	d130      	bne.n	80015a6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	2203      	movs	r2, #3
 8001550:	409a      	lsls	r2, r3
 8001552:	0013      	movs	r3, r2
 8001554:	43da      	mvns	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	409a      	lsls	r2, r3
 8001566:	0013      	movs	r3, r2
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800157a:	2201      	movs	r2, #1
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
 8001580:	0013      	movs	r3, r2
 8001582:	43da      	mvns	r2, r3
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	091b      	lsrs	r3, r3, #4
 8001590:	2201      	movs	r2, #1
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
 8001598:	0013      	movs	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	2203      	movs	r2, #3
 80015b2:	409a      	lsls	r2, r3
 80015b4:	0013      	movs	r3, r2
 80015b6:	43da      	mvns	r2, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	409a      	lsls	r2, r3
 80015c8:	0013      	movs	r3, r2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	055b      	lsls	r3, r3, #21
 80015de:	4013      	ands	r3, r2
 80015e0:	d100      	bne.n	80015e4 <HAL_GPIO_Init+0x174>
 80015e2:	e092      	b.n	800170a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80015e4:	4a50      	ldr	r2, [pc, #320]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3318      	adds	r3, #24
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	589b      	ldr	r3, [r3, r2]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2203      	movs	r2, #3
 80015f6:	4013      	ands	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	220f      	movs	r2, #15
 80015fc:	409a      	lsls	r2, r3
 80015fe:	0013      	movs	r3, r2
 8001600:	43da      	mvns	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	23a0      	movs	r3, #160	; 0xa0
 800160c:	05db      	lsls	r3, r3, #23
 800160e:	429a      	cmp	r2, r3
 8001610:	d013      	beq.n	800163a <HAL_GPIO_Init+0x1ca>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a45      	ldr	r2, [pc, #276]	; (800172c <HAL_GPIO_Init+0x2bc>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d00d      	beq.n	8001636 <HAL_GPIO_Init+0x1c6>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a44      	ldr	r2, [pc, #272]	; (8001730 <HAL_GPIO_Init+0x2c0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d007      	beq.n	8001632 <HAL_GPIO_Init+0x1c2>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a43      	ldr	r2, [pc, #268]	; (8001734 <HAL_GPIO_Init+0x2c4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d101      	bne.n	800162e <HAL_GPIO_Init+0x1be>
 800162a:	2303      	movs	r3, #3
 800162c:	e006      	b.n	800163c <HAL_GPIO_Init+0x1cc>
 800162e:	2305      	movs	r3, #5
 8001630:	e004      	b.n	800163c <HAL_GPIO_Init+0x1cc>
 8001632:	2302      	movs	r3, #2
 8001634:	e002      	b.n	800163c <HAL_GPIO_Init+0x1cc>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_GPIO_Init+0x1cc>
 800163a:	2300      	movs	r3, #0
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	2103      	movs	r1, #3
 8001640:	400a      	ands	r2, r1
 8001642:	00d2      	lsls	r2, r2, #3
 8001644:	4093      	lsls	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800164c:	4936      	ldr	r1, [pc, #216]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	3318      	adds	r3, #24
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800165a:	4a33      	ldr	r2, [pc, #204]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	58d3      	ldr	r3, [r2, r3]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	43da      	mvns	r2, r3
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	025b      	lsls	r3, r3, #9
 8001674:	4013      	ands	r3, r2
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001680:	4929      	ldr	r1, [pc, #164]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 8001682:	2280      	movs	r2, #128	; 0x80
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001688:	4a27      	ldr	r2, [pc, #156]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 800168a:	2384      	movs	r3, #132	; 0x84
 800168c:	58d3      	ldr	r3, [r2, r3]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	43da      	mvns	r2, r3
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	029b      	lsls	r3, r3, #10
 80016a2:	4013      	ands	r3, r2
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016ae:	491e      	ldr	r1, [pc, #120]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 80016b0:	2284      	movs	r2, #132	; 0x84
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	43da      	mvns	r2, r3
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	035b      	lsls	r3, r3, #13
 80016ce:	4013      	ands	r3, r2
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016da:	4b13      	ldr	r3, [pc, #76]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	43da      	mvns	r2, r3
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	039b      	lsls	r3, r3, #14
 80016f8:	4013      	ands	r3, r2
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <HAL_GPIO_Init+0x2b8>)
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	40da      	lsrs	r2, r3
 8001718:	1e13      	subs	r3, r2, #0
 800171a:	d000      	beq.n	800171e <HAL_GPIO_Init+0x2ae>
 800171c:	e6b0      	b.n	8001480 <HAL_GPIO_Init+0x10>
  }
}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	46bd      	mov	sp, r7
 8001722:	b006      	add	sp, #24
 8001724:	bd80      	pop	{r7, pc}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	40021800 	.word	0x40021800
 800172c:	50000400 	.word	0x50000400
 8001730:	50000800 	.word	0x50000800
 8001734:	50000c00 	.word	0x50000c00

08001738 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	000a      	movs	r2, r1
 8001742:	1cbb      	adds	r3, r7, #2
 8001744:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	1cba      	adds	r2, r7, #2
 800174c:	8812      	ldrh	r2, [r2, #0]
 800174e:	4013      	ands	r3, r2
 8001750:	d004      	beq.n	800175c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001752:	230f      	movs	r3, #15
 8001754:	18fb      	adds	r3, r7, r3
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
 800175a:	e003      	b.n	8001764 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800175c:	230f      	movs	r3, #15
 800175e:	18fb      	adds	r3, r7, r3
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001764:	230f      	movs	r3, #15
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	781b      	ldrb	r3, [r3, #0]
}
 800176a:	0018      	movs	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	b004      	add	sp, #16
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	0008      	movs	r0, r1
 800177c:	0011      	movs	r1, r2
 800177e:	1cbb      	adds	r3, r7, #2
 8001780:	1c02      	adds	r2, r0, #0
 8001782:	801a      	strh	r2, [r3, #0]
 8001784:	1c7b      	adds	r3, r7, #1
 8001786:	1c0a      	adds	r2, r1, #0
 8001788:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800178a:	1c7b      	adds	r3, r7, #1
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d004      	beq.n	800179c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001792:	1cbb      	adds	r3, r7, #2
 8001794:	881a      	ldrh	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800179a:	e003      	b.n	80017a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800179c:	1cbb      	adds	r3, r7, #2
 800179e:	881a      	ldrh	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b002      	add	sp, #8
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a19      	ldr	r2, [pc, #100]	; (8001820 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	0019      	movs	r1, r3
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d11f      	bne.n	8001810 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	0013      	movs	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	189b      	adds	r3, r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4912      	ldr	r1, [pc, #72]	; (8001828 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80017de:	0018      	movs	r0, r3
 80017e0:	f7fe fc98 	bl	8000114 <__udivsi3>
 80017e4:	0003      	movs	r3, r0
 80017e6:	3301      	adds	r3, #1
 80017e8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017ea:	e008      	b.n	80017fe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e001      	b.n	80017fe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e009      	b.n	8001812 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001800:	695a      	ldr	r2, [r3, #20]
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	401a      	ands	r2, r3
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	429a      	cmp	r2, r3
 800180e:	d0ed      	beq.n	80017ec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	0018      	movs	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	b004      	add	sp, #16
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	40007000 	.word	0x40007000
 8001820:	fffff9ff 	.word	0xfffff9ff
 8001824:	20000008 	.word	0x20000008
 8001828:	000f4240 	.word	0x000f4240

0800182c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e304      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2201      	movs	r2, #1
 8001844:	4013      	ands	r3, r2
 8001846:	d100      	bne.n	800184a <HAL_RCC_OscConfig+0x1e>
 8001848:	e07c      	b.n	8001944 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800184a:	4bc3      	ldr	r3, [pc, #780]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2238      	movs	r2, #56	; 0x38
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001854:	4bc0      	ldr	r3, [pc, #768]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2203      	movs	r2, #3
 800185a:	4013      	ands	r3, r2
 800185c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2b10      	cmp	r3, #16
 8001862:	d102      	bne.n	800186a <HAL_RCC_OscConfig+0x3e>
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2b03      	cmp	r3, #3
 8001868:	d002      	beq.n	8001870 <HAL_RCC_OscConfig+0x44>
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	2b08      	cmp	r3, #8
 800186e:	d10b      	bne.n	8001888 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	4bb9      	ldr	r3, [pc, #740]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	029b      	lsls	r3, r3, #10
 8001878:	4013      	ands	r3, r2
 800187a:	d062      	beq.n	8001942 <HAL_RCC_OscConfig+0x116>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d15e      	bne.n	8001942 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e2df      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	025b      	lsls	r3, r3, #9
 8001890:	429a      	cmp	r2, r3
 8001892:	d107      	bne.n	80018a4 <HAL_RCC_OscConfig+0x78>
 8001894:	4bb0      	ldr	r3, [pc, #704]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4baf      	ldr	r3, [pc, #700]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 800189a:	2180      	movs	r1, #128	; 0x80
 800189c:	0249      	lsls	r1, r1, #9
 800189e:	430a      	orrs	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	e020      	b.n	80018e6 <HAL_RCC_OscConfig+0xba>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	23a0      	movs	r3, #160	; 0xa0
 80018aa:	02db      	lsls	r3, r3, #11
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d10e      	bne.n	80018ce <HAL_RCC_OscConfig+0xa2>
 80018b0:	4ba9      	ldr	r3, [pc, #676]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4ba8      	ldr	r3, [pc, #672]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 80018b6:	2180      	movs	r1, #128	; 0x80
 80018b8:	02c9      	lsls	r1, r1, #11
 80018ba:	430a      	orrs	r2, r1
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	4ba6      	ldr	r3, [pc, #664]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4ba5      	ldr	r3, [pc, #660]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 80018c4:	2180      	movs	r1, #128	; 0x80
 80018c6:	0249      	lsls	r1, r1, #9
 80018c8:	430a      	orrs	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	e00b      	b.n	80018e6 <HAL_RCC_OscConfig+0xba>
 80018ce:	4ba2      	ldr	r3, [pc, #648]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4ba1      	ldr	r3, [pc, #644]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 80018d4:	49a1      	ldr	r1, [pc, #644]	; (8001b5c <HAL_RCC_OscConfig+0x330>)
 80018d6:	400a      	ands	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	4b9f      	ldr	r3, [pc, #636]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b9e      	ldr	r3, [pc, #632]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 80018e0:	499f      	ldr	r1, [pc, #636]	; (8001b60 <HAL_RCC_OscConfig+0x334>)
 80018e2:	400a      	ands	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d014      	beq.n	8001918 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ee:	f7fe fd17 	bl	8000320 <HAL_GetTick>
 80018f2:	0003      	movs	r3, r0
 80018f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f8:	f7fe fd12 	bl	8000320 <HAL_GetTick>
 80018fc:	0002      	movs	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	; 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e29e      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800190a:	4b93      	ldr	r3, [pc, #588]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	029b      	lsls	r3, r3, #10
 8001912:	4013      	ands	r3, r2
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0xcc>
 8001916:	e015      	b.n	8001944 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7fe fd02 	bl	8000320 <HAL_GetTick>
 800191c:	0003      	movs	r3, r0
 800191e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001922:	f7fe fcfd 	bl	8000320 <HAL_GetTick>
 8001926:	0002      	movs	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b64      	cmp	r3, #100	; 0x64
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e289      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001934:	4b88      	ldr	r3, [pc, #544]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	029b      	lsls	r3, r3, #10
 800193c:	4013      	ands	r3, r2
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0xf6>
 8001940:	e000      	b.n	8001944 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001942:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2202      	movs	r2, #2
 800194a:	4013      	ands	r3, r2
 800194c:	d100      	bne.n	8001950 <HAL_RCC_OscConfig+0x124>
 800194e:	e099      	b.n	8001a84 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001950:	4b81      	ldr	r3, [pc, #516]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2238      	movs	r2, #56	; 0x38
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800195a:	4b7f      	ldr	r3, [pc, #508]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2203      	movs	r2, #3
 8001960:	4013      	ands	r3, r2
 8001962:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2b10      	cmp	r3, #16
 8001968:	d102      	bne.n	8001970 <HAL_RCC_OscConfig+0x144>
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d002      	beq.n	8001976 <HAL_RCC_OscConfig+0x14a>
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d135      	bne.n	80019e2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001976:	4b78      	ldr	r3, [pc, #480]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4013      	ands	r3, r2
 8001980:	d005      	beq.n	800198e <HAL_RCC_OscConfig+0x162>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e25c      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198e:	4b72      	ldr	r3, [pc, #456]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4a74      	ldr	r2, [pc, #464]	; (8001b64 <HAL_RCC_OscConfig+0x338>)
 8001994:	4013      	ands	r3, r2
 8001996:	0019      	movs	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	021a      	lsls	r2, r3, #8
 800199e:	4b6e      	ldr	r3, [pc, #440]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 80019a0:	430a      	orrs	r2, r1
 80019a2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d112      	bne.n	80019d0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019aa:	4b6b      	ldr	r3, [pc, #428]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a6e      	ldr	r2, [pc, #440]	; (8001b68 <HAL_RCC_OscConfig+0x33c>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	0019      	movs	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	4b67      	ldr	r3, [pc, #412]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 80019ba:	430a      	orrs	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80019be:	4b66      	ldr	r3, [pc, #408]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	0adb      	lsrs	r3, r3, #11
 80019c4:	2207      	movs	r2, #7
 80019c6:	4013      	ands	r3, r2
 80019c8:	4a68      	ldr	r2, [pc, #416]	; (8001b6c <HAL_RCC_OscConfig+0x340>)
 80019ca:	40da      	lsrs	r2, r3
 80019cc:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <HAL_RCC_OscConfig+0x344>)
 80019ce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019d0:	4b68      	ldr	r3, [pc, #416]	; (8001b74 <HAL_RCC_OscConfig+0x348>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	0018      	movs	r0, r3
 80019d6:	f7fe fc49 	bl	800026c <HAL_InitTick>
 80019da:	1e03      	subs	r3, r0, #0
 80019dc:	d051      	beq.n	8001a82 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e232      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d030      	beq.n	8001a4c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019ea:	4b5b      	ldr	r3, [pc, #364]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a5e      	ldr	r2, [pc, #376]	; (8001b68 <HAL_RCC_OscConfig+0x33c>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	0019      	movs	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 80019fa:	430a      	orrs	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80019fe:	4b56      	ldr	r3, [pc, #344]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4b55      	ldr	r3, [pc, #340]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001a04:	2180      	movs	r1, #128	; 0x80
 8001a06:	0049      	lsls	r1, r1, #1
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7fe fc88 	bl	8000320 <HAL_GetTick>
 8001a10:	0003      	movs	r3, r0
 8001a12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a16:	f7fe fc83 	bl	8000320 <HAL_GetTick>
 8001a1a:	0002      	movs	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e20f      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a28:	4b4b      	ldr	r3, [pc, #300]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4013      	ands	r3, r2
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a34:	4b48      	ldr	r3, [pc, #288]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	4a4a      	ldr	r2, [pc, #296]	; (8001b64 <HAL_RCC_OscConfig+0x338>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	021a      	lsls	r2, r3, #8
 8001a44:	4b44      	ldr	r3, [pc, #272]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001a46:	430a      	orrs	r2, r1
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	e01b      	b.n	8001a84 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001a4c:	4b42      	ldr	r3, [pc, #264]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b41      	ldr	r3, [pc, #260]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	4949      	ldr	r1, [pc, #292]	; (8001b78 <HAL_RCC_OscConfig+0x34c>)
 8001a54:	400a      	ands	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7fe fc62 	bl	8000320 <HAL_GetTick>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a62:	f7fe fc5d 	bl	8000320 <HAL_GetTick>
 8001a66:	0002      	movs	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e1e9      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a74:	4b38      	ldr	r3, [pc, #224]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d1f0      	bne.n	8001a62 <HAL_RCC_OscConfig+0x236>
 8001a80:	e000      	b.n	8001a84 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a82:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2208      	movs	r2, #8
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d047      	beq.n	8001b1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001a8e:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2238      	movs	r2, #56	; 0x38
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b18      	cmp	r3, #24
 8001a98:	d10a      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a9a:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d03c      	beq.n	8001b1e <HAL_RCC_OscConfig+0x2f2>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d138      	bne.n	8001b1e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e1cb      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d019      	beq.n	8001aec <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001ab8:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001aba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001abc:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001abe:	2101      	movs	r1, #1
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7fe fc2c 	bl	8000320 <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ace:	f7fe fc27 	bl	8000320 <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e1b3      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d0f1      	beq.n	8001ace <HAL_RCC_OscConfig+0x2a2>
 8001aea:	e018      	b.n	8001b1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001aee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001af2:	2101      	movs	r1, #1
 8001af4:	438a      	bics	r2, r1
 8001af6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7fe fc12 	bl	8000320 <HAL_GetTick>
 8001afc:	0003      	movs	r3, r0
 8001afe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b02:	f7fe fc0d 	bl	8000320 <HAL_GetTick>
 8001b06:	0002      	movs	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e199      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b18:	2202      	movs	r2, #2
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d1f1      	bne.n	8001b02 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2204      	movs	r2, #4
 8001b24:	4013      	ands	r3, r2
 8001b26:	d100      	bne.n	8001b2a <HAL_RCC_OscConfig+0x2fe>
 8001b28:	e0c6      	b.n	8001cb8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2a:	231f      	movs	r3, #31
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2238      	movs	r2, #56	; 0x38
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b20      	cmp	r3, #32
 8001b3c:	d11e      	bne.n	8001b7c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_RCC_OscConfig+0x32c>)
 8001b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b42:	2202      	movs	r2, #2
 8001b44:	4013      	ands	r3, r2
 8001b46:	d100      	bne.n	8001b4a <HAL_RCC_OscConfig+0x31e>
 8001b48:	e0b6      	b.n	8001cb8 <HAL_RCC_OscConfig+0x48c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d000      	beq.n	8001b54 <HAL_RCC_OscConfig+0x328>
 8001b52:	e0b1      	b.n	8001cb8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e177      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	fffeffff 	.word	0xfffeffff
 8001b60:	fffbffff 	.word	0xfffbffff
 8001b64:	ffff80ff 	.word	0xffff80ff
 8001b68:	ffffc7ff 	.word	0xffffc7ff
 8001b6c:	00f42400 	.word	0x00f42400
 8001b70:	20000008 	.word	0x20000008
 8001b74:	20000000 	.word	0x20000000
 8001b78:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b7c:	4bb4      	ldr	r3, [pc, #720]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	055b      	lsls	r3, r3, #21
 8001b84:	4013      	ands	r3, r2
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_OscConfig+0x360>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x362>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d011      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	4baf      	ldr	r3, [pc, #700]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001b94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b96:	4bae      	ldr	r3, [pc, #696]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001b98:	2180      	movs	r1, #128	; 0x80
 8001b9a:	0549      	lsls	r1, r1, #21
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ba0:	4bab      	ldr	r3, [pc, #684]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001ba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	055b      	lsls	r3, r3, #21
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001bae:	231f      	movs	r3, #31
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb6:	4ba7      	ldr	r3, [pc, #668]	; (8001e54 <HAL_RCC_OscConfig+0x628>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d11a      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bc2:	4ba4      	ldr	r3, [pc, #656]	; (8001e54 <HAL_RCC_OscConfig+0x628>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4ba3      	ldr	r3, [pc, #652]	; (8001e54 <HAL_RCC_OscConfig+0x628>)
 8001bc8:	2180      	movs	r1, #128	; 0x80
 8001bca:	0049      	lsls	r1, r1, #1
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001bd0:	f7fe fba6 	bl	8000320 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bda:	f7fe fba1 	bl	8000320 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e12d      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bec:	4b99      	ldr	r3, [pc, #612]	; (8001e54 <HAL_RCC_OscConfig+0x628>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d106      	bne.n	8001c0e <HAL_RCC_OscConfig+0x3e2>
 8001c00:	4b93      	ldr	r3, [pc, #588]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001c02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c04:	4b92      	ldr	r3, [pc, #584]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001c06:	2101      	movs	r1, #1
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c0c:	e01c      	b.n	8001c48 <HAL_RCC_OscConfig+0x41c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x404>
 8001c16:	4b8e      	ldr	r3, [pc, #568]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001c18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c1a:	4b8d      	ldr	r3, [pc, #564]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001c1c:	2104      	movs	r1, #4
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c22:	4b8b      	ldr	r3, [pc, #556]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001c24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c26:	4b8a      	ldr	r3, [pc, #552]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001c28:	2101      	movs	r1, #1
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c2e:	e00b      	b.n	8001c48 <HAL_RCC_OscConfig+0x41c>
 8001c30:	4b87      	ldr	r3, [pc, #540]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001c32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c34:	4b86      	ldr	r3, [pc, #536]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001c36:	2101      	movs	r1, #1
 8001c38:	438a      	bics	r2, r1
 8001c3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c3c:	4b84      	ldr	r3, [pc, #528]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001c3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c40:	4b83      	ldr	r3, [pc, #524]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001c42:	2104      	movs	r1, #4
 8001c44:	438a      	bics	r2, r1
 8001c46:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d014      	beq.n	8001c7a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7fe fb66 	bl	8000320 <HAL_GetTick>
 8001c54:	0003      	movs	r3, r0
 8001c56:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c58:	e009      	b.n	8001c6e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7fe fb61 	bl	8000320 <HAL_GetTick>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	4a7c      	ldr	r2, [pc, #496]	; (8001e58 <HAL_RCC_OscConfig+0x62c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e0ec      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c6e:	4b78      	ldr	r3, [pc, #480]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c72:	2202      	movs	r2, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x42e>
 8001c78:	e013      	b.n	8001ca2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7a:	f7fe fb51 	bl	8000320 <HAL_GetTick>
 8001c7e:	0003      	movs	r3, r0
 8001c80:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c82:	e009      	b.n	8001c98 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c84:	f7fe fb4c 	bl	8000320 <HAL_GetTick>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	4a72      	ldr	r2, [pc, #456]	; (8001e58 <HAL_RCC_OscConfig+0x62c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e0d7      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c98:	4b6d      	ldr	r3, [pc, #436]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001ca2:	231f      	movs	r3, #31
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d105      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001cac:	4b68      	ldr	r3, [pc, #416]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cb0:	4b67      	ldr	r3, [pc, #412]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001cb2:	496a      	ldr	r1, [pc, #424]	; (8001e5c <HAL_RCC_OscConfig+0x630>)
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d100      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x496>
 8001cc0:	e0c1      	b.n	8001e46 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cc2:	4b63      	ldr	r3, [pc, #396]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2238      	movs	r2, #56	; 0x38
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b10      	cmp	r3, #16
 8001ccc:	d100      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x4a4>
 8001cce:	e081      	b.n	8001dd4 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d156      	bne.n	8001d86 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd8:	4b5d      	ldr	r3, [pc, #372]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b5c      	ldr	r3, [pc, #368]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001cde:	4960      	ldr	r1, [pc, #384]	; (8001e60 <HAL_RCC_OscConfig+0x634>)
 8001ce0:	400a      	ands	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7fe fb1c 	bl	8000320 <HAL_GetTick>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cee:	f7fe fb17 	bl	8000320 <HAL_GetTick>
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e0a3      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d00:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	049b      	lsls	r3, r3, #18
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d1f0      	bne.n	8001cee <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d0c:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4a54      	ldr	r2, [pc, #336]	; (8001e64 <HAL_RCC_OscConfig+0x638>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	0019      	movs	r1, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1a      	ldr	r2, [r3, #32]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	4b45      	ldr	r3, [pc, #276]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d40:	4b43      	ldr	r3, [pc, #268]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b42      	ldr	r3, [pc, #264]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001d46:	2180      	movs	r1, #128	; 0x80
 8001d48:	0449      	lsls	r1, r1, #17
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001d4e:	4b40      	ldr	r3, [pc, #256]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	4b3f      	ldr	r3, [pc, #252]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001d54:	2180      	movs	r1, #128	; 0x80
 8001d56:	0549      	lsls	r1, r1, #21
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f7fe fae0 	bl	8000320 <HAL_GetTick>
 8001d60:	0003      	movs	r3, r0
 8001d62:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d66:	f7fe fadb 	bl	8000320 <HAL_GetTick>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e067      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d78:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	049b      	lsls	r3, r3, #18
 8001d80:	4013      	ands	r3, r2
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x53a>
 8001d84:	e05f      	b.n	8001e46 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d86:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001d8c:	4934      	ldr	r1, [pc, #208]	; (8001e60 <HAL_RCC_OscConfig+0x634>)
 8001d8e:	400a      	ands	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001d92:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	4b2e      	ldr	r3, [pc, #184]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001d98:	2103      	movs	r1, #3
 8001d9a:	438a      	bics	r2, r1
 8001d9c:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001d9e:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001da4:	4930      	ldr	r1, [pc, #192]	; (8001e68 <HAL_RCC_OscConfig+0x63c>)
 8001da6:	400a      	ands	r2, r1
 8001da8:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001daa:	f7fe fab9 	bl	8000320 <HAL_GetTick>
 8001dae:	0003      	movs	r3, r0
 8001db0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db4:	f7fe fab4 	bl	8000320 <HAL_GetTick>
 8001db8:	0002      	movs	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e040      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc6:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	049b      	lsls	r3, r3, #18
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x588>
 8001dd2:	e038      	b.n	8001e46 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e033      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001de0:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_RCC_OscConfig+0x624>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2203      	movs	r2, #3
 8001dea:	401a      	ands	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d126      	bne.n	8001e42 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2270      	movs	r2, #112	; 0x70
 8001df8:	401a      	ands	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d11f      	bne.n	8001e42 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	23fe      	movs	r3, #254	; 0xfe
 8001e06:	01db      	lsls	r3, r3, #7
 8001e08:	401a      	ands	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0e:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d116      	bne.n	8001e42 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	23f8      	movs	r3, #248	; 0xf8
 8001e18:	039b      	lsls	r3, r3, #14
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d10e      	bne.n	8001e42 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	23e0      	movs	r3, #224	; 0xe0
 8001e28:	051b      	lsls	r3, r3, #20
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	0f5b      	lsrs	r3, r3, #29
 8001e38:	075a      	lsls	r2, r3, #29
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b008      	add	sp, #32
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40007000 	.word	0x40007000
 8001e58:	00001388 	.word	0x00001388
 8001e5c:	efffffff 	.word	0xefffffff
 8001e60:	feffffff 	.word	0xfeffffff
 8001e64:	11c1808c 	.word	0x11c1808c
 8001e68:	eefeffff 	.word	0xeefeffff

08001e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0e9      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4b76      	ldr	r3, [pc, #472]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2207      	movs	r2, #7
 8001e86:	4013      	ands	r3, r2
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d91e      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b73      	ldr	r3, [pc, #460]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2207      	movs	r2, #7
 8001e94:	4393      	bics	r3, r2
 8001e96:	0019      	movs	r1, r3
 8001e98:	4b70      	ldr	r3, [pc, #448]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ea0:	f7fe fa3e 	bl	8000320 <HAL_GetTick>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ea8:	e009      	b.n	8001ebe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eaa:	f7fe fa39 	bl	8000320 <HAL_GetTick>
 8001eae:	0002      	movs	r2, r0
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	4a6a      	ldr	r2, [pc, #424]	; (8002060 <HAL_RCC_ClockConfig+0x1f4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e0ca      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ebe:	4b67      	ldr	r3, [pc, #412]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2207      	movs	r2, #7
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d1ee      	bne.n	8001eaa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d015      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2204      	movs	r2, #4
 8001edc:	4013      	ands	r3, r2
 8001ede:	d006      	beq.n	8001eee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ee0:	4b60      	ldr	r3, [pc, #384]	; (8002064 <HAL_RCC_ClockConfig+0x1f8>)
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	4b5f      	ldr	r3, [pc, #380]	; (8002064 <HAL_RCC_ClockConfig+0x1f8>)
 8001ee6:	21e0      	movs	r1, #224	; 0xe0
 8001ee8:	01c9      	lsls	r1, r1, #7
 8001eea:	430a      	orrs	r2, r1
 8001eec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eee:	4b5d      	ldr	r3, [pc, #372]	; (8002064 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4a5d      	ldr	r2, [pc, #372]	; (8002068 <HAL_RCC_ClockConfig+0x1fc>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	4b59      	ldr	r3, [pc, #356]	; (8002064 <HAL_RCC_ClockConfig+0x1f8>)
 8001efe:	430a      	orrs	r2, r1
 8001f00:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2201      	movs	r2, #1
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d057      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d107      	bne.n	8001f24 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f14:	4b53      	ldr	r3, [pc, #332]	; (8002064 <HAL_RCC_ClockConfig+0x1f8>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	029b      	lsls	r3, r3, #10
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d12b      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e097      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2c:	4b4d      	ldr	r3, [pc, #308]	; (8002064 <HAL_RCC_ClockConfig+0x1f8>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	049b      	lsls	r3, r3, #18
 8001f34:	4013      	ands	r3, r2
 8001f36:	d11f      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e08b      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f44:	4b47      	ldr	r3, [pc, #284]	; (8002064 <HAL_RCC_ClockConfig+0x1f8>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d113      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e07f      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f5c:	4b41      	ldr	r3, [pc, #260]	; (8002064 <HAL_RCC_ClockConfig+0x1f8>)
 8001f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f60:	2202      	movs	r2, #2
 8001f62:	4013      	ands	r3, r2
 8001f64:	d108      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e074      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f6a:	4b3e      	ldr	r3, [pc, #248]	; (8002064 <HAL_RCC_ClockConfig+0x1f8>)
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4013      	ands	r3, r2
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e06d      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f78:	4b3a      	ldr	r3, [pc, #232]	; (8002064 <HAL_RCC_ClockConfig+0x1f8>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	4393      	bics	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	4b37      	ldr	r3, [pc, #220]	; (8002064 <HAL_RCC_ClockConfig+0x1f8>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f8c:	f7fe f9c8 	bl	8000320 <HAL_GetTick>
 8001f90:	0003      	movs	r3, r0
 8001f92:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f94:	e009      	b.n	8001faa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f96:	f7fe f9c3 	bl	8000320 <HAL_GetTick>
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	4a2f      	ldr	r2, [pc, #188]	; (8002060 <HAL_RCC_ClockConfig+0x1f4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e054      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <HAL_RCC_ClockConfig+0x1f8>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2238      	movs	r2, #56	; 0x38
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1ec      	bne.n	8001f96 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d21e      	bcs.n	8002008 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b24      	ldr	r3, [pc, #144]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2207      	movs	r2, #7
 8001fd0:	4393      	bics	r3, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	4b21      	ldr	r3, [pc, #132]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fdc:	f7fe f9a0 	bl	8000320 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fe4:	e009      	b.n	8001ffa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe6:	f7fe f99b 	bl	8000320 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	4a1b      	ldr	r2, [pc, #108]	; (8002060 <HAL_RCC_ClockConfig+0x1f4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e02c      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ffa:	4b18      	ldr	r3, [pc, #96]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2207      	movs	r2, #7
 8002000:	4013      	ands	r3, r2
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d1ee      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2204      	movs	r2, #4
 800200e:	4013      	ands	r3, r2
 8002010:	d009      	beq.n	8002026 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <HAL_RCC_ClockConfig+0x1f8>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	4a15      	ldr	r2, [pc, #84]	; (800206c <HAL_RCC_ClockConfig+0x200>)
 8002018:	4013      	ands	r3, r2
 800201a:	0019      	movs	r1, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	4b10      	ldr	r3, [pc, #64]	; (8002064 <HAL_RCC_ClockConfig+0x1f8>)
 8002022:	430a      	orrs	r2, r1
 8002024:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002026:	f000 f829 	bl	800207c <HAL_RCC_GetSysClockFreq>
 800202a:	0001      	movs	r1, r0
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <HAL_RCC_ClockConfig+0x1f8>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	220f      	movs	r2, #15
 8002034:	401a      	ands	r2, r3
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_RCC_ClockConfig+0x204>)
 8002038:	0092      	lsls	r2, r2, #2
 800203a:	58d3      	ldr	r3, [r2, r3]
 800203c:	221f      	movs	r2, #31
 800203e:	4013      	ands	r3, r2
 8002040:	000a      	movs	r2, r1
 8002042:	40da      	lsrs	r2, r3
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCC_ClockConfig+0x208>)
 8002046:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_RCC_ClockConfig+0x20c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	0018      	movs	r0, r3
 800204e:	f7fe f90d 	bl	800026c <HAL_InitTick>
 8002052:	0003      	movs	r3, r0
}
 8002054:	0018      	movs	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	b004      	add	sp, #16
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40022000 	.word	0x40022000
 8002060:	00001388 	.word	0x00001388
 8002064:	40021000 	.word	0x40021000
 8002068:	fffff0ff 	.word	0xfffff0ff
 800206c:	ffff8fff 	.word	0xffff8fff
 8002070:	08005c40 	.word	0x08005c40
 8002074:	20000008 	.word	0x20000008
 8002078:	20000000 	.word	0x20000000

0800207c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002082:	4b3c      	ldr	r3, [pc, #240]	; (8002174 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2238      	movs	r2, #56	; 0x38
 8002088:	4013      	ands	r3, r2
 800208a:	d10f      	bne.n	80020ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800208c:	4b39      	ldr	r3, [pc, #228]	; (8002174 <HAL_RCC_GetSysClockFreq+0xf8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	0adb      	lsrs	r3, r3, #11
 8002092:	2207      	movs	r2, #7
 8002094:	4013      	ands	r3, r2
 8002096:	2201      	movs	r2, #1
 8002098:	409a      	lsls	r2, r3
 800209a:	0013      	movs	r3, r2
 800209c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800209e:	6839      	ldr	r1, [r7, #0]
 80020a0:	4835      	ldr	r0, [pc, #212]	; (8002178 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020a2:	f7fe f837 	bl	8000114 <__udivsi3>
 80020a6:	0003      	movs	r3, r0
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	e05d      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80020ac:	4b31      	ldr	r3, [pc, #196]	; (8002174 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2238      	movs	r2, #56	; 0x38
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d102      	bne.n	80020be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020b8:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	e054      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80020be:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2238      	movs	r2, #56	; 0x38
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b10      	cmp	r3, #16
 80020c8:	d138      	bne.n	800213c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80020ca:	4b2a      	ldr	r3, [pc, #168]	; (8002174 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2203      	movs	r2, #3
 80020d0:	4013      	ands	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020d4:	4b27      	ldr	r3, [pc, #156]	; (8002174 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	2207      	movs	r2, #7
 80020dc:	4013      	ands	r3, r2
 80020de:	3301      	adds	r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d10d      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	4823      	ldr	r0, [pc, #140]	; (8002178 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020ec:	f7fe f812 	bl	8000114 <__udivsi3>
 80020f0:	0003      	movs	r3, r0
 80020f2:	0019      	movs	r1, r3
 80020f4:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	227f      	movs	r2, #127	; 0x7f
 80020fc:	4013      	ands	r3, r2
 80020fe:	434b      	muls	r3, r1
 8002100:	617b      	str	r3, [r7, #20]
        break;
 8002102:	e00d      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	481c      	ldr	r0, [pc, #112]	; (8002178 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002108:	f7fe f804 	bl	8000114 <__udivsi3>
 800210c:	0003      	movs	r3, r0
 800210e:	0019      	movs	r1, r3
 8002110:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	227f      	movs	r2, #127	; 0x7f
 8002118:	4013      	ands	r3, r2
 800211a:	434b      	muls	r3, r1
 800211c:	617b      	str	r3, [r7, #20]
        break;
 800211e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	0f5b      	lsrs	r3, r3, #29
 8002126:	2207      	movs	r2, #7
 8002128:	4013      	ands	r3, r2
 800212a:	3301      	adds	r3, #1
 800212c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	6978      	ldr	r0, [r7, #20]
 8002132:	f7fd ffef 	bl	8000114 <__udivsi3>
 8002136:	0003      	movs	r3, r0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	e015      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800213c:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <HAL_RCC_GetSysClockFreq+0xf8>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2238      	movs	r2, #56	; 0x38
 8002142:	4013      	ands	r3, r2
 8002144:	2b20      	cmp	r3, #32
 8002146:	d103      	bne.n	8002150 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	e00b      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2238      	movs	r2, #56	; 0x38
 8002156:	4013      	ands	r3, r2
 8002158:	2b18      	cmp	r3, #24
 800215a:	d103      	bne.n	8002164 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800215c:	23fa      	movs	r3, #250	; 0xfa
 800215e:	01db      	lsls	r3, r3, #7
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	e001      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002168:	693b      	ldr	r3, [r7, #16]
}
 800216a:	0018      	movs	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	b006      	add	sp, #24
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	40021000 	.word	0x40021000
 8002178:	00f42400 	.word	0x00f42400

0800217c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002184:	2313      	movs	r3, #19
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800218c:	2312      	movs	r3, #18
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	029b      	lsls	r3, r3, #10
 800219c:	4013      	ands	r3, r2
 800219e:	d100      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80021a0:	e0a4      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a2:	2311      	movs	r3, #17
 80021a4:	18fb      	adds	r3, r7, r3
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021aa:	4bc3      	ldr	r3, [pc, #780]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	055b      	lsls	r3, r3, #21
 80021b2:	4013      	ands	r3, r2
 80021b4:	d111      	bne.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b6:	4bc0      	ldr	r3, [pc, #768]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021ba:	4bbf      	ldr	r3, [pc, #764]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	0549      	lsls	r1, r1, #21
 80021c0:	430a      	orrs	r2, r1
 80021c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80021c4:	4bbc      	ldr	r3, [pc, #752]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	055b      	lsls	r3, r3, #21
 80021cc:	4013      	ands	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d2:	2311      	movs	r3, #17
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	2201      	movs	r2, #1
 80021d8:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021da:	4bb8      	ldr	r3, [pc, #736]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4bb7      	ldr	r3, [pc, #732]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021e0:	2180      	movs	r1, #128	; 0x80
 80021e2:	0049      	lsls	r1, r1, #1
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021e8:	f7fe f89a 	bl	8000320 <HAL_GetTick>
 80021ec:	0003      	movs	r3, r0
 80021ee:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021f0:	e00b      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f2:	f7fe f895 	bl	8000320 <HAL_GetTick>
 80021f6:	0002      	movs	r2, r0
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d904      	bls.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8002200:	2313      	movs	r3, #19
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	2203      	movs	r2, #3
 8002206:	701a      	strb	r2, [r3, #0]
        break;
 8002208:	e005      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800220a:	4bac      	ldr	r3, [pc, #688]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4013      	ands	r3, r2
 8002214:	d0ed      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8002216:	2313      	movs	r3, #19
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d154      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002220:	4ba5      	ldr	r3, [pc, #660]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002222:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002224:	23c0      	movs	r3, #192	; 0xc0
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4013      	ands	r3, r2
 800222a:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d019      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	429a      	cmp	r2, r3
 800223a:	d014      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800223c:	4b9e      	ldr	r3, [pc, #632]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	4a9f      	ldr	r2, [pc, #636]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002242:	4013      	ands	r3, r2
 8002244:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002246:	4b9c      	ldr	r3, [pc, #624]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002248:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800224a:	4b9b      	ldr	r3, [pc, #620]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800224c:	2180      	movs	r1, #128	; 0x80
 800224e:	0249      	lsls	r1, r1, #9
 8002250:	430a      	orrs	r2, r1
 8002252:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002254:	4b98      	ldr	r3, [pc, #608]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002256:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002258:	4b97      	ldr	r3, [pc, #604]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800225a:	499a      	ldr	r1, [pc, #616]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800225c:	400a      	ands	r2, r1
 800225e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002260:	4b95      	ldr	r3, [pc, #596]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2201      	movs	r2, #1
 800226a:	4013      	ands	r3, r2
 800226c:	d016      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226e:	f7fe f857 	bl	8000320 <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002276:	e00c      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002278:	f7fe f852 	bl	8000320 <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	4a91      	ldr	r2, [pc, #580]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d904      	bls.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8002288:	2313      	movs	r3, #19
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	2203      	movs	r2, #3
 800228e:	701a      	strb	r2, [r3, #0]
            break;
 8002290:	e004      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002292:	4b89      	ldr	r3, [pc, #548]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002296:	2202      	movs	r2, #2
 8002298:	4013      	ands	r3, r2
 800229a:	d0ed      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 800229c:	2313      	movs	r3, #19
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10a      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022a6:	4b84      	ldr	r3, [pc, #528]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022aa:	4a85      	ldr	r2, [pc, #532]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b4:	4b80      	ldr	r3, [pc, #512]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b6:	430a      	orrs	r2, r1
 80022b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80022ba:	e00c      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022bc:	2312      	movs	r3, #18
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	2213      	movs	r2, #19
 80022c2:	18ba      	adds	r2, r7, r2
 80022c4:	7812      	ldrb	r2, [r2, #0]
 80022c6:	701a      	strb	r2, [r3, #0]
 80022c8:	e005      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022ca:	2312      	movs	r3, #18
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	2213      	movs	r2, #19
 80022d0:	18ba      	adds	r2, r7, r2
 80022d2:	7812      	ldrb	r2, [r2, #0]
 80022d4:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022d6:	2311      	movs	r3, #17
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d105      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e0:	4b75      	ldr	r3, [pc, #468]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022e4:	4b74      	ldr	r3, [pc, #464]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022e6:	4979      	ldr	r1, [pc, #484]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80022e8:	400a      	ands	r2, r1
 80022ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2201      	movs	r2, #1
 80022f2:	4013      	ands	r3, r2
 80022f4:	d009      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022f6:	4b70      	ldr	r3, [pc, #448]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fa:	2203      	movs	r2, #3
 80022fc:	4393      	bics	r3, r2
 80022fe:	0019      	movs	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4b6c      	ldr	r3, [pc, #432]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002306:	430a      	orrs	r2, r1
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2202      	movs	r2, #2
 8002310:	4013      	ands	r3, r2
 8002312:	d009      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002314:	4b68      	ldr	r3, [pc, #416]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002318:	220c      	movs	r2, #12
 800231a:	4393      	bics	r3, r2
 800231c:	0019      	movs	r1, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	4b65      	ldr	r3, [pc, #404]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002324:	430a      	orrs	r2, r1
 8002326:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2220      	movs	r2, #32
 800232e:	4013      	ands	r3, r2
 8002330:	d009      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002332:	4b61      	ldr	r3, [pc, #388]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	4a66      	ldr	r2, [pc, #408]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002338:	4013      	ands	r3, r2
 800233a:	0019      	movs	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	4b5d      	ldr	r3, [pc, #372]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002342:	430a      	orrs	r2, r1
 8002344:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4013      	ands	r3, r2
 8002350:	d009      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002352:	4b59      	ldr	r3, [pc, #356]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002356:	4a5f      	ldr	r2, [pc, #380]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002358:	4013      	ands	r3, r2
 800235a:	0019      	movs	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699a      	ldr	r2, [r3, #24]
 8002360:	4b55      	ldr	r3, [pc, #340]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002362:	430a      	orrs	r2, r1
 8002364:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4013      	ands	r3, r2
 8002370:	d009      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002372:	4b51      	ldr	r3, [pc, #324]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	4a58      	ldr	r2, [pc, #352]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002378:	4013      	ands	r3, r2
 800237a:	0019      	movs	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69da      	ldr	r2, [r3, #28]
 8002380:	4b4d      	ldr	r3, [pc, #308]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002382:	430a      	orrs	r2, r1
 8002384:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2240      	movs	r2, #64	; 0x40
 800238c:	4013      	ands	r3, r2
 800238e:	d009      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002390:	4b49      	ldr	r3, [pc, #292]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002394:	4a51      	ldr	r2, [pc, #324]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002396:	4013      	ands	r3, r2
 8002398:	0019      	movs	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	4b46      	ldr	r3, [pc, #280]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a0:	430a      	orrs	r2, r1
 80023a2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	01db      	lsls	r3, r3, #7
 80023ac:	4013      	ands	r3, r2
 80023ae:	d015      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023b0:	4b41      	ldr	r3, [pc, #260]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	0899      	lsrs	r1, r3, #2
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1a      	ldr	r2, [r3, #32]
 80023bc:	4b3e      	ldr	r3, [pc, #248]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023be:	430a      	orrs	r2, r1
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1a      	ldr	r2, [r3, #32]
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	05db      	lsls	r3, r3, #23
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d106      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023ce:	4b3a      	ldr	r3, [pc, #232]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	4b39      	ldr	r3, [pc, #228]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023d4:	2180      	movs	r1, #128	; 0x80
 80023d6:	0249      	lsls	r1, r1, #9
 80023d8:	430a      	orrs	r2, r1
 80023da:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	031b      	lsls	r3, r3, #12
 80023e4:	4013      	ands	r3, r2
 80023e6:	d009      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023e8:	4b33      	ldr	r3, [pc, #204]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ec:	2240      	movs	r2, #64	; 0x40
 80023ee:	4393      	bics	r3, r2
 80023f0:	0019      	movs	r1, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023f6:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f8:	430a      	orrs	r2, r1
 80023fa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	039b      	lsls	r3, r3, #14
 8002404:	4013      	ands	r3, r2
 8002406:	d016      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002408:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800240a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240c:	4a34      	ldr	r2, [pc, #208]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800240e:	4013      	ands	r3, r2
 8002410:	0019      	movs	r1, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002416:	4b28      	ldr	r3, [pc, #160]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002418:	430a      	orrs	r2, r1
 800241a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	03db      	lsls	r3, r3, #15
 8002424:	429a      	cmp	r2, r3
 8002426:	d106      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002428:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	0449      	lsls	r1, r1, #17
 8002432:	430a      	orrs	r2, r1
 8002434:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	03db      	lsls	r3, r3, #15
 800243e:	4013      	ands	r3, r2
 8002440:	d016      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	4a27      	ldr	r2, [pc, #156]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002448:	4013      	ands	r3, r2
 800244a:	0019      	movs	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002450:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002452:	430a      	orrs	r2, r1
 8002454:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	045b      	lsls	r3, r3, #17
 800245e:	429a      	cmp	r2, r3
 8002460:	d106      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002468:	2180      	movs	r1, #128	; 0x80
 800246a:	0449      	lsls	r1, r1, #17
 800246c:	430a      	orrs	r2, r1
 800246e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	4013      	ands	r3, r2
 800247a:	d016      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800247e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002480:	4a19      	ldr	r2, [pc, #100]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002482:	4013      	ands	r3, r2
 8002484:	0019      	movs	r1, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800248c:	430a      	orrs	r2, r1
 800248e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	695a      	ldr	r2, [r3, #20]
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	01db      	lsls	r3, r3, #7
 8002498:	429a      	cmp	r2, r3
 800249a:	d106      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a2:	2180      	movs	r1, #128	; 0x80
 80024a4:	0249      	lsls	r1, r1, #9
 80024a6:	430a      	orrs	r2, r1
 80024a8:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 80024aa:	2312      	movs	r3, #18
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	781b      	ldrb	r3, [r3, #0]
}
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b006      	add	sp, #24
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40007000 	.word	0x40007000
 80024c0:	fffffcff 	.word	0xfffffcff
 80024c4:	fffeffff 	.word	0xfffeffff
 80024c8:	00001388 	.word	0x00001388
 80024cc:	efffffff 	.word	0xefffffff
 80024d0:	fffff3ff 	.word	0xfffff3ff
 80024d4:	fff3ffff 	.word	0xfff3ffff
 80024d8:	ffcfffff 	.word	0xffcfffff
 80024dc:	ffffcfff 	.word	0xffffcfff
 80024e0:	ffbfffff 	.word	0xffbfffff
 80024e4:	feffffff 	.word	0xfeffffff
 80024e8:	ffff3fff 	.word	0xffff3fff

080024ec <HAL_UART_Transmit_IT>:
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	1dbb      	adds	r3, r7, #6
 80024f8:	801a      	strh	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2280      	movs	r2, #128	; 0x80
 80024fe:	589b      	ldr	r3, [r3, r2]
 8002500:	2b20      	cmp	r3, #32
 8002502:	d000      	beq.n	8002506 <HAL_UART_Transmit_IT+0x1a>
 8002504:	e07f      	b.n	8002606 <HAL_UART_Transmit_IT+0x11a>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_UART_Transmit_IT+0x28>
 800250c:	1dbb      	adds	r3, r7, #6
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_UART_Transmit_IT+0x2c>
 8002514:	2301      	movs	r3, #1
 8002516:	e077      	b.n	8002608 <HAL_UART_Transmit_IT+0x11c>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	015b      	lsls	r3, r3, #5
 8002520:	429a      	cmp	r2, r3
 8002522:	d109      	bne.n	8002538 <HAL_UART_Transmit_IT+0x4c>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_UART_Transmit_IT+0x4c>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2201      	movs	r2, #1
 8002530:	4013      	ands	r3, r2
 8002532:	d001      	beq.n	8002538 <HAL_UART_Transmit_IT+0x4c>
 8002534:	2301      	movs	r3, #1
 8002536:	e067      	b.n	8002608 <HAL_UART_Transmit_IT+0x11c>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	227c      	movs	r2, #124	; 0x7c
 800253c:	5c9b      	ldrb	r3, [r3, r2]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_UART_Transmit_IT+0x5a>
 8002542:	2302      	movs	r3, #2
 8002544:	e060      	b.n	8002608 <HAL_UART_Transmit_IT+0x11c>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	227c      	movs	r2, #124	; 0x7c
 800254a:	2101      	movs	r1, #1
 800254c:	5499      	strb	r1, [r3, r2]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	651a      	str	r2, [r3, #80]	; 0x50
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1dba      	adds	r2, r7, #6
 8002558:	2154      	movs	r1, #84	; 0x54
 800255a:	8812      	ldrh	r2, [r2, #0]
 800255c:	525a      	strh	r2, [r3, r1]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1dba      	adds	r2, r7, #6
 8002562:	2156      	movs	r1, #86	; 0x56
 8002564:	8812      	ldrh	r2, [r2, #0]
 8002566:	525a      	strh	r2, [r3, r1]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	671a      	str	r2, [r3, #112]	; 0x70
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2288      	movs	r2, #136	; 0x88
 8002572:	2100      	movs	r1, #0
 8002574:	5099      	str	r1, [r3, r2]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2280      	movs	r2, #128	; 0x80
 800257a:	2121      	movs	r1, #33	; 0x21
 800257c:	5099      	str	r1, [r3, r2]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	059b      	lsls	r3, r3, #22
 8002586:	429a      	cmp	r2, r3
 8002588:	d11e      	bne.n	80025c8 <HAL_UART_Transmit_IT+0xdc>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	015b      	lsls	r3, r3, #5
 8002592:	429a      	cmp	r2, r3
 8002594:	d107      	bne.n	80025a6 <HAL_UART_Transmit_IT+0xba>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d103      	bne.n	80025a6 <HAL_UART_Transmit_IT+0xba>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <HAL_UART_Transmit_IT+0x124>)
 80025a2:	671a      	str	r2, [r3, #112]	; 0x70
 80025a4:	e002      	b.n	80025ac <HAL_UART_Transmit_IT+0xc0>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4a1a      	ldr	r2, [pc, #104]	; (8002614 <HAL_UART_Transmit_IT+0x128>)
 80025aa:	671a      	str	r2, [r3, #112]	; 0x70
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	227c      	movs	r2, #124	; 0x7c
 80025b0:	2100      	movs	r1, #0
 80025b2:	5499      	strb	r1, [r3, r2]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2180      	movs	r1, #128	; 0x80
 80025c0:	0409      	lsls	r1, r1, #16
 80025c2:	430a      	orrs	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	e01c      	b.n	8002602 <HAL_UART_Transmit_IT+0x116>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	015b      	lsls	r3, r3, #5
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d107      	bne.n	80025e4 <HAL_UART_Transmit_IT+0xf8>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d103      	bne.n	80025e4 <HAL_UART_Transmit_IT+0xf8>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4a0e      	ldr	r2, [pc, #56]	; (8002618 <HAL_UART_Transmit_IT+0x12c>)
 80025e0:	671a      	str	r2, [r3, #112]	; 0x70
 80025e2:	e002      	b.n	80025ea <HAL_UART_Transmit_IT+0xfe>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4a0d      	ldr	r2, [pc, #52]	; (800261c <HAL_UART_Transmit_IT+0x130>)
 80025e8:	671a      	str	r2, [r3, #112]	; 0x70
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	227c      	movs	r2, #124	; 0x7c
 80025ee:	2100      	movs	r1, #0
 80025f0:	5499      	strb	r1, [r3, r2]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2180      	movs	r1, #128	; 0x80
 80025fe:	430a      	orrs	r2, r1
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <HAL_UART_Transmit_IT+0x11c>
 8002606:	2302      	movs	r3, #2
 8002608:	0018      	movs	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	b004      	add	sp, #16
 800260e:	bd80      	pop	{r7, pc}
 8002610:	080027b5 	.word	0x080027b5
 8002614:	0800270d 	.word	0x0800270d
 8002618:	08002691 	.word	0x08002691
 800261c:	08002621 	.word	0x08002621

08002620 <UART_TxISR_8BIT>:
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2280      	movs	r2, #128	; 0x80
 800262c:	589b      	ldr	r3, [r3, r2]
 800262e:	2b21      	cmp	r3, #33	; 0x21
 8002630:	d12a      	bne.n	8002688 <UART_TxISR_8BIT+0x68>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2256      	movs	r2, #86	; 0x56
 8002636:	5a9b      	ldrh	r3, [r3, r2]
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d110      	bne.n	8002660 <UART_TxISR_8BIT+0x40>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2180      	movs	r1, #128	; 0x80
 800264a:	438a      	bics	r2, r1
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2140      	movs	r1, #64	; 0x40
 800265a:	430a      	orrs	r2, r1
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	e013      	b.n	8002688 <UART_TxISR_8BIT+0x68>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	651a      	str	r2, [r3, #80]	; 0x50
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2256      	movs	r2, #86	; 0x56
 800267a:	5a9b      	ldrh	r3, [r3, r2]
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b299      	uxth	r1, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2256      	movs	r2, #86	; 0x56
 8002686:	5299      	strh	r1, [r3, r2]
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	b002      	add	sp, #8
 800268e:	bd80      	pop	{r7, pc}

08002690 <UART_TxISR_16BIT>:
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2280      	movs	r2, #128	; 0x80
 800269c:	589b      	ldr	r3, [r3, r2]
 800269e:	2b21      	cmp	r3, #33	; 0x21
 80026a0:	d12f      	bne.n	8002702 <UART_TxISR_16BIT+0x72>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2256      	movs	r2, #86	; 0x56
 80026a6:	5a9b      	ldrh	r3, [r3, r2]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d110      	bne.n	80026d0 <UART_TxISR_16BIT+0x40>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	438a      	bics	r2, r1
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2140      	movs	r1, #64	; 0x40
 80026ca:	430a      	orrs	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	e018      	b.n	8002702 <UART_TxISR_16BIT+0x72>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	001a      	movs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	05d2      	lsls	r2, r2, #23
 80026e2:	0dd2      	lsrs	r2, r2, #23
 80026e4:	629a      	str	r2, [r3, #40]	; 0x28
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ea:	1c9a      	adds	r2, r3, #2
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	651a      	str	r2, [r3, #80]	; 0x50
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2256      	movs	r2, #86	; 0x56
 80026f4:	5a9b      	ldrh	r3, [r3, r2]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b299      	uxth	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2256      	movs	r2, #86	; 0x56
 8002700:	5299      	strh	r1, [r3, r2]
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	46bd      	mov	sp, r7
 8002706:	b004      	add	sp, #16
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <UART_TxISR_8BIT_FIFOEN>:
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2280      	movs	r2, #128	; 0x80
 8002718:	589b      	ldr	r3, [r3, r2]
 800271a:	2b21      	cmp	r3, #33	; 0x21
 800271c:	d143      	bne.n	80027a6 <UART_TxISR_8BIT_FIFOEN+0x9a>
 800271e:	230e      	movs	r3, #14
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	216a      	movs	r1, #106	; 0x6a
 8002726:	5a52      	ldrh	r2, [r2, r1]
 8002728:	801a      	strh	r2, [r3, #0]
 800272a:	e037      	b.n	800279c <UART_TxISR_8BIT_FIFOEN+0x90>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2256      	movs	r2, #86	; 0x56
 8002730:	5a9b      	ldrh	r3, [r3, r2]
 8002732:	b29b      	uxth	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d111      	bne.n	800275c <UART_TxISR_8BIT_FIFOEN+0x50>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	491b      	ldr	r1, [pc, #108]	; (80027b0 <UART_TxISR_8BIT_FIFOEN+0xa4>)
 8002744:	400a      	ands	r2, r1
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2140      	movs	r1, #64	; 0x40
 8002754:	430a      	orrs	r2, r1
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	e024      	b.n	80027a6 <UART_TxISR_8BIT_FIFOEN+0x9a>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	2280      	movs	r2, #128	; 0x80
 8002764:	4013      	ands	r3, r2
 8002766:	d013      	beq.n	8002790 <UART_TxISR_8BIT_FIFOEN+0x84>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800276c:	781a      	ldrb	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	629a      	str	r2, [r3, #40]	; 0x28
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	651a      	str	r2, [r3, #80]	; 0x50
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2256      	movs	r2, #86	; 0x56
 8002782:	5a9b      	ldrh	r3, [r3, r2]
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b299      	uxth	r1, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2256      	movs	r2, #86	; 0x56
 800278e:	5299      	strh	r1, [r3, r2]
 8002790:	210e      	movs	r1, #14
 8002792:	187b      	adds	r3, r7, r1
 8002794:	881a      	ldrh	r2, [r3, #0]
 8002796:	187b      	adds	r3, r7, r1
 8002798:	3a01      	subs	r2, #1
 800279a:	801a      	strh	r2, [r3, #0]
 800279c:	230e      	movs	r3, #14
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1c2      	bne.n	800272c <UART_TxISR_8BIT_FIFOEN+0x20>
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b004      	add	sp, #16
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	ff7fffff 	.word	0xff7fffff

080027b4 <UART_TxISR_16BIT_FIFOEN>:
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2280      	movs	r2, #128	; 0x80
 80027c0:	589b      	ldr	r3, [r3, r2]
 80027c2:	2b21      	cmp	r3, #33	; 0x21
 80027c4:	d148      	bne.n	8002858 <UART_TxISR_16BIT_FIFOEN+0xa4>
 80027c6:	230e      	movs	r3, #14
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	216a      	movs	r1, #106	; 0x6a
 80027ce:	5a52      	ldrh	r2, [r2, r1]
 80027d0:	801a      	strh	r2, [r3, #0]
 80027d2:	e03c      	b.n	800284e <UART_TxISR_16BIT_FIFOEN+0x9a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2256      	movs	r2, #86	; 0x56
 80027d8:	5a9b      	ldrh	r3, [r3, r2]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d111      	bne.n	8002804 <UART_TxISR_16BIT_FIFOEN+0x50>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	491d      	ldr	r1, [pc, #116]	; (8002860 <UART_TxISR_16BIT_FIFOEN+0xac>)
 80027ec:	400a      	ands	r2, r1
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2140      	movs	r1, #64	; 0x40
 80027fc:	430a      	orrs	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	46c0      	nop			; (mov r8, r8)
 8002802:	e029      	b.n	8002858 <UART_TxISR_16BIT_FIFOEN+0xa4>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	4013      	ands	r3, r2
 800280e:	d018      	beq.n	8002842 <UART_TxISR_16BIT_FIFOEN+0x8e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	001a      	movs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	05d2      	lsls	r2, r2, #23
 8002822:	0dd2      	lsrs	r2, r2, #23
 8002824:	629a      	str	r2, [r3, #40]	; 0x28
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282a:	1c9a      	adds	r2, r3, #2
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	651a      	str	r2, [r3, #80]	; 0x50
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2256      	movs	r2, #86	; 0x56
 8002834:	5a9b      	ldrh	r3, [r3, r2]
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b299      	uxth	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2256      	movs	r2, #86	; 0x56
 8002840:	5299      	strh	r1, [r3, r2]
 8002842:	210e      	movs	r1, #14
 8002844:	187b      	adds	r3, r7, r1
 8002846:	881a      	ldrh	r2, [r3, #0]
 8002848:	187b      	adds	r3, r7, r1
 800284a:	3a01      	subs	r2, #1
 800284c:	801a      	strh	r2, [r3, #0]
 800284e:	230e      	movs	r3, #14
 8002850:	18fb      	adds	r3, r7, r3
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1bd      	bne.n	80027d4 <UART_TxISR_16BIT_FIFOEN+0x20>
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	b004      	add	sp, #16
 800285e:	bd80      	pop	{r7, pc}
 8002860:	ff7fffff 	.word	0xff7fffff

08002864 <BurnFeedback>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "burn_feedback.h"

uint32_t BurnFeedback(enum StateName *statePtr, enum StateName *lastStatePtr)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b0c7      	sub	sp, #284	; 0x11c
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
	uint32_t success = FALSE;
 800286e:	2300      	movs	r3, #0
 8002870:	228a      	movs	r2, #138	; 0x8a
 8002872:	0052      	lsls	r2, r2, #1
 8002874:	18ba      	adds	r2, r7, r2
 8002876:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	2288      	movs	r2, #136	; 0x88
 800287c:	0052      	lsls	r2, r2, #1
 800287e:	18ba      	adds	r2, r7, r2
 8002880:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	2286      	movs	r2, #134	; 0x86
 8002886:	0052      	lsls	r2, r2, #1
 8002888:	18ba      	adds	r2, r7, r2
 800288a:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 800288c:	2308      	movs	r3, #8
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	2284      	movs	r2, #132	; 0x84
 8002892:	0052      	lsls	r2, r2, #1
 8002894:	18ba      	adds	r2, r7, r2
 8002896:	6013      	str	r3, [r2, #0]

    if(VerifyState(*statePtr) && VerifyState(*lastStatePtr))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	0018      	movs	r0, r3
 800289e:	f002 f84b 	bl	8004938 <VerifyState>
 80028a2:	1e03      	subs	r3, r0, #0
 80028a4:	d053      	beq.n	800294e <BurnFeedback+0xea>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	0018      	movs	r0, r3
 80028ac:	f002 f844 	bl	8004938 <VerifyState>
 80028b0:	1e03      	subs	r3, r0, #0
 80028b2:	d04c      	beq.n	800294e <BurnFeedback+0xea>
    {
    	if((*statePtr & BURN_FEEDBACK) == BURN_FEEDBACK){
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	001a      	movs	r2, r3
 80028ba:	2309      	movs	r3, #9
 80028bc:	4013      	ands	r3, r2
 80028be:	2b09      	cmp	r3, #9
 80028c0:	d133      	bne.n	800292a <BurnFeedback+0xc6>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 1 | 1 | 0 | 0 | 0 | 0 | 1 | 1
    		// Set Valve States
    		valve_target |= ((uint16_t)PV2 	\
 80028c2:	2486      	movs	r4, #134	; 0x86
 80028c4:	0064      	lsls	r4, r4, #1
 80028c6:	193b      	adds	r3, r7, r4
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	22c3      	movs	r2, #195	; 0xc3
 80028cc:	0052      	lsls	r2, r2, #1
 80028ce:	4313      	orrs	r3, r2
 80028d0:	193a      	adds	r2, r7, r4
 80028d2:	6013      	str	r3, [r2, #0]
    					 |(uint16_t)PV3 	\
    					 |(uint16_t)MV1 	\
						 |(uint16_t)MV2);
    		valve_configuration = StateConfiguration();
 80028d4:	f002 f854 	bl	8004980 <StateConfiguration>
 80028d8:	0003      	movs	r3, r0
 80028da:	2188      	movs	r1, #136	; 0x88
 80028dc:	0049      	lsls	r1, r1, #1
 80028de:	187a      	adds	r2, r7, r1
 80028e0:	6013      	str	r3, [r2, #0]
    		// Change State conditions
    		lastStatePtr = statePtr;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
    		*statePtr = BURN_FEEDBACK;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2209      	movs	r2, #9
 80028ea:	701a      	strb	r2, [r3, #0]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	193b      	adds	r3, r7, r4
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	425a      	negs	r2, r3
 80028f8:	4153      	adcs	r3, r2
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	228a      	movs	r2, #138	; 0x8a
 80028fe:	0052      	lsls	r2, r2, #1
 8002900:	18b8      	adds	r0, r7, r2
 8002902:	6003      	str	r3, [r0, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8002904:	18bb      	adds	r3, r7, r2
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	187b      	adds	r3, r7, r1
 800290a:	6819      	ldr	r1, [r3, #0]
 800290c:	2484      	movs	r4, #132	; 0x84
 800290e:	0064      	lsls	r4, r4, #1
 8002910:	193b      	adds	r3, r7, r4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	0018      	movs	r0, r3
 8002916:	f001 f8a7 	bl	8003a68 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 800291a:	193b      	adds	r3, r7, r4
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	4b19      	ldr	r3, [pc, #100]	; (8002984 <BurnFeedback+0x120>)
 8002920:	0011      	movs	r1, r2
 8002922:	0018      	movs	r0, r3
 8002924:	f002 f978 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & BURN_FEEDBACK) == BURN_FEEDBACK){
 8002928:	e023      	b.n	8002972 <BurnFeedback+0x10e>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, BURN_FEEDBACK, *statePtr);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	781a      	ldrb	r2, [r3, #0]
 800292e:	2484      	movs	r4, #132	; 0x84
 8002930:	0064      	lsls	r4, r4, #1
 8002932:	193b      	adds	r3, r7, r4
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2109      	movs	r1, #9
 8002938:	0018      	movs	r0, r3
 800293a:	f000 ff87 	bl	800384c <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 800293e:	193b      	adds	r3, r7, r4
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <BurnFeedback+0x120>)
 8002944:	0011      	movs	r1, r2
 8002946:	0018      	movs	r0, r3
 8002948:	f002 f966 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & BURN_FEEDBACK) == BURN_FEEDBACK){
 800294c:	e011      	b.n	8002972 <BurnFeedback+0x10e>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, *statePtr, *lastStatePtr);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7819      	ldrb	r1, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	781a      	ldrb	r2, [r3, #0]
 8002956:	2484      	movs	r4, #132	; 0x84
 8002958:	0064      	lsls	r4, r4, #1
 800295a:	193b      	adds	r3, r7, r4
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	0018      	movs	r0, r3
 8002960:	f001 f808 	bl	8003974 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8002964:	193b      	adds	r3, r7, r4
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <BurnFeedback+0x120>)
 800296a:	0011      	movs	r1, r2
 800296c:	0018      	movs	r0, r3
 800296e:	f002 f953 	bl	8004c18 <UART_SendMessage>
    }
	return success;
 8002972:	238a      	movs	r3, #138	; 0x8a
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	681b      	ldr	r3, [r3, #0]
}
 800297a:	0018      	movs	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	b047      	add	sp, #284	; 0x11c
 8002980:	bd90      	pop	{r4, r7, pc}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	2000009c 	.word	0x2000009c

08002988 <BurnInitiated>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "burn_initiated.h"

uint32_t BurnInitiated(enum StateName *statePtr, enum StateName *lastStatePtr)
{
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b0c7      	sub	sp, #284	; 0x11c
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
	uint32_t success = FALSE;
 8002992:	2300      	movs	r3, #0
 8002994:	228a      	movs	r2, #138	; 0x8a
 8002996:	0052      	lsls	r2, r2, #1
 8002998:	18ba      	adds	r2, r7, r2
 800299a:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	2288      	movs	r2, #136	; 0x88
 80029a0:	0052      	lsls	r2, r2, #1
 80029a2:	18ba      	adds	r2, r7, r2
 80029a4:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	2286      	movs	r2, #134	; 0x86
 80029aa:	0052      	lsls	r2, r2, #1
 80029ac:	18ba      	adds	r2, r7, r2
 80029ae:	6013      	str	r3, [r2, #0]
	char message[PRINT_BUFFER_SIZE];
	char *msgPtr = message;
 80029b0:	2308      	movs	r3, #8
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	2284      	movs	r2, #132	; 0x84
 80029b6:	0052      	lsls	r2, r2, #1
 80029b8:	18ba      	adds	r2, r7, r2
 80029ba:	6013      	str	r3, [r2, #0]

    if(VerifyState(*statePtr) && VerifyState(*lastStatePtr))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f001 ffb9 	bl	8004938 <VerifyState>
 80029c6:	1e03      	subs	r3, r0, #0
 80029c8:	d04d      	beq.n	8002a66 <BurnInitiated+0xde>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	0018      	movs	r0, r3
 80029d0:	f001 ffb2 	bl	8004938 <VerifyState>
 80029d4:	1e03      	subs	r3, r0, #0
 80029d6:	d046      	beq.n	8002a66 <BurnInitiated+0xde>
    {
    	if((*statePtr & BURN_INITIATED) == BURN_INITIATED){
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	001a      	movs	r2, r3
 80029de:	2308      	movs	r3, #8
 80029e0:	4013      	ands	r3, r2
 80029e2:	d02e      	beq.n	8002a42 <BurnInitiated+0xba>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 1|  1|  0|  0|  1| 1 | 1 | 1
    		// Set Valve States
    		valve_target |= ((uint16_t)PV2 	\
 80029e4:	2186      	movs	r1, #134	; 0x86
 80029e6:	0049      	lsls	r1, r1, #1
 80029e8:	187b      	adds	r3, r7, r1
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	22f3      	movs	r2, #243	; 0xf3
 80029ee:	0052      	lsls	r2, r2, #1
 80029f0:	4313      	orrs	r3, r2
 80029f2:	187a      	adds	r2, r7, r1
 80029f4:	6013      	str	r3, [r2, #0]
						 |(uint16_t)IV1 	\
						 |(uint16_t)IV2 	\
    					 |(uint16_t)MV1 	\
						 |(uint16_t)MV2);
    		// Change State conditions
    		lastStatePtr = statePtr;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
    		*statePtr =BURN_INITIATED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2208      	movs	r2, #8
 80029fe:	701a      	strb	r2, [r3, #0]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8002a00:	2088      	movs	r0, #136	; 0x88
 8002a02:	0040      	lsls	r0, r0, #1
 8002a04:	183b      	adds	r3, r7, r0
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	187b      	adds	r3, r7, r1
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	425a      	negs	r2, r3
 8002a10:	4153      	adcs	r3, r2
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	228a      	movs	r2, #138	; 0x8a
 8002a16:	0052      	lsls	r2, r2, #1
 8002a18:	18b9      	adds	r1, r7, r2
 8002a1a:	600b      	str	r3, [r1, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8002a1c:	18bb      	adds	r3, r7, r2
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	183b      	adds	r3, r7, r0
 8002a22:	6819      	ldr	r1, [r3, #0]
 8002a24:	2484      	movs	r4, #132	; 0x84
 8002a26:	0064      	lsls	r4, r4, #1
 8002a28:	193b      	adds	r3, r7, r4
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f001 f81b 	bl	8003a68 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8002a32:	193b      	adds	r3, r7, r4
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <BurnInitiated+0x114>)
 8002a38:	0011      	movs	r1, r2
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f002 f8ec 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & BURN_INITIATED) == BURN_INITIATED){
 8002a40:	e023      	b.n	8002a8a <BurnInitiated+0x102>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, BURN_INITIATED, *statePtr);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	781a      	ldrb	r2, [r3, #0]
 8002a46:	2484      	movs	r4, #132	; 0x84
 8002a48:	0064      	lsls	r4, r4, #1
 8002a4a:	193b      	adds	r3, r7, r4
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2108      	movs	r1, #8
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 fefb 	bl	800384c <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8002a56:	193b      	adds	r3, r7, r4
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <BurnInitiated+0x114>)
 8002a5c:	0011      	movs	r1, r2
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f002 f8da 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & BURN_INITIATED) == BURN_INITIATED){
 8002a64:	e011      	b.n	8002a8a <BurnInitiated+0x102>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, *statePtr, *lastStatePtr);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	7819      	ldrb	r1, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	781a      	ldrb	r2, [r3, #0]
 8002a6e:	2484      	movs	r4, #132	; 0x84
 8002a70:	0064      	lsls	r4, r4, #1
 8002a72:	193b      	adds	r3, r7, r4
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0018      	movs	r0, r3
 8002a78:	f000 ff7c 	bl	8003974 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8002a7c:	193b      	adds	r3, r7, r4
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <BurnInitiated+0x114>)
 8002a82:	0011      	movs	r1, r2
 8002a84:	0018      	movs	r0, r3
 8002a86:	f002 f8c7 	bl	8004c18 <UART_SendMessage>
    }
	return success;
 8002a8a:	238a      	movs	r3, #138	; 0x8a
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	681b      	ldr	r3, [r3, #0]
}
 8002a92:	0018      	movs	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b047      	add	sp, #284	; 0x11c
 8002a98:	bd90      	pop	{r4, r7, pc}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	2000009c 	.word	0x2000009c

08002aa0 <BurnTermination1>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "burn_termination_1.h"

uint32_t BurnTermination1(enum StateName *statePtr, enum StateName *lastStatePtr)
{
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b0c7      	sub	sp, #284	; 0x11c
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
	uint32_t success = FALSE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	228a      	movs	r2, #138	; 0x8a
 8002aae:	0052      	lsls	r2, r2, #1
 8002ab0:	18ba      	adds	r2, r7, r2
 8002ab2:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	2288      	movs	r2, #136	; 0x88
 8002ab8:	0052      	lsls	r2, r2, #1
 8002aba:	18ba      	adds	r2, r7, r2
 8002abc:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2286      	movs	r2, #134	; 0x86
 8002ac2:	0052      	lsls	r2, r2, #1
 8002ac4:	18ba      	adds	r2, r7, r2
 8002ac6:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8002ac8:	2308      	movs	r3, #8
 8002aca:	18fb      	adds	r3, r7, r3
 8002acc:	2284      	movs	r2, #132	; 0x84
 8002ace:	0052      	lsls	r2, r2, #1
 8002ad0:	18ba      	adds	r2, r7, r2
 8002ad2:	6013      	str	r3, [r2, #0]

    if(VerifyState(*statePtr) && VerifyState(*lastStatePtr))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f001 ff2d 	bl	8004938 <VerifyState>
 8002ade:	1e03      	subs	r3, r0, #0
 8002ae0:	d04e      	beq.n	8002b80 <BurnTermination1+0xe0>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f001 ff26 	bl	8004938 <VerifyState>
 8002aec:	1e03      	subs	r3, r0, #0
 8002aee:	d047      	beq.n	8002b80 <BurnTermination1+0xe0>
    {
    	if((*statePtr & BURN_TERMINATION_1) == BURN_TERMINATION_1){
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	001a      	movs	r2, r3
 8002af6:	230a      	movs	r3, #10
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b0a      	cmp	r3, #10
 8002afc:	d12e      	bne.n	8002b5c <BurnTermination1+0xbc>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 1|  1|  0|  0|  0|  0|  1| 10
    		// Set Valve States
    		valve_target |= ((uint16_t)PV2 	\
 8002afe:	2186      	movs	r1, #134	; 0x86
 8002b00:	0049      	lsls	r1, r1, #1
 8002b02:	187b      	adds	r3, r7, r1
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	22c3      	movs	r2, #195	; 0xc3
 8002b08:	0052      	lsls	r2, r2, #1
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	187a      	adds	r2, r7, r1
 8002b0e:	6013      	str	r3, [r2, #0]
    					 |(uint16_t)PV3 	\
    					 |(uint16_t)MV1 	\
						 |(uint16_t)MV2);

    		// Change State conditions
    		lastStatePtr = statePtr;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	603b      	str	r3, [r7, #0]
    		*statePtr =BURN_TERMINATION_1;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	220a      	movs	r2, #10
 8002b18:	701a      	strb	r2, [r3, #0]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8002b1a:	2088      	movs	r0, #136	; 0x88
 8002b1c:	0040      	lsls	r0, r0, #1
 8002b1e:	183b      	adds	r3, r7, r0
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	187b      	adds	r3, r7, r1
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	425a      	negs	r2, r3
 8002b2a:	4153      	adcs	r3, r2
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	228a      	movs	r2, #138	; 0x8a
 8002b30:	0052      	lsls	r2, r2, #1
 8002b32:	18b9      	adds	r1, r7, r2
 8002b34:	600b      	str	r3, [r1, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8002b36:	18bb      	adds	r3, r7, r2
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	183b      	adds	r3, r7, r0
 8002b3c:	6819      	ldr	r1, [r3, #0]
 8002b3e:	2484      	movs	r4, #132	; 0x84
 8002b40:	0064      	lsls	r4, r4, #1
 8002b42:	193b      	adds	r3, r7, r4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	0018      	movs	r0, r3
 8002b48:	f000 ff8e 	bl	8003a68 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8002b4c:	193b      	adds	r3, r7, r4
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <BurnTermination1+0x114>)
 8002b52:	0011      	movs	r1, r2
 8002b54:	0018      	movs	r0, r3
 8002b56:	f002 f85f 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & BURN_TERMINATION_1) == BURN_TERMINATION_1){
 8002b5a:	e023      	b.n	8002ba4 <BurnTermination1+0x104>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, BURN_TERMINATION_1, *statePtr);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	781a      	ldrb	r2, [r3, #0]
 8002b60:	2484      	movs	r4, #132	; 0x84
 8002b62:	0064      	lsls	r4, r4, #1
 8002b64:	193b      	adds	r3, r7, r4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	210a      	movs	r1, #10
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f000 fe6e 	bl	800384c <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8002b70:	193b      	adds	r3, r7, r4
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <BurnTermination1+0x114>)
 8002b76:	0011      	movs	r1, r2
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f002 f84d 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & BURN_TERMINATION_1) == BURN_TERMINATION_1){
 8002b7e:	e011      	b.n	8002ba4 <BurnTermination1+0x104>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, *statePtr, *lastStatePtr);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	7819      	ldrb	r1, [r3, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	781a      	ldrb	r2, [r3, #0]
 8002b88:	2484      	movs	r4, #132	; 0x84
 8002b8a:	0064      	lsls	r4, r4, #1
 8002b8c:	193b      	adds	r3, r7, r4
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f000 feef 	bl	8003974 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8002b96:	193b      	adds	r3, r7, r4
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <BurnTermination1+0x114>)
 8002b9c:	0011      	movs	r1, r2
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f002 f83a 	bl	8004c18 <UART_SendMessage>
    }
	return success;
 8002ba4:	238a      	movs	r3, #138	; 0x8a
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	681b      	ldr	r3, [r3, #0]
}
 8002bac:	0018      	movs	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b047      	add	sp, #284	; 0x11c
 8002bb2:	bd90      	pop	{r4, r7, pc}
 8002bb4:	2000009c 	.word	0x2000009c

08002bb8 <BurnTermination2>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "burn_termination_2.h"

uint32_t BurnTermination2(enum StateName *statePtr, enum StateName *lastStatePtr)
{
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b0c7      	sub	sp, #284	; 0x11c
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
	uint32_t success = FALSE;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	228a      	movs	r2, #138	; 0x8a
 8002bc6:	0052      	lsls	r2, r2, #1
 8002bc8:	18ba      	adds	r2, r7, r2
 8002bca:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	2288      	movs	r2, #136	; 0x88
 8002bd0:	0052      	lsls	r2, r2, #1
 8002bd2:	18ba      	adds	r2, r7, r2
 8002bd4:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	2286      	movs	r2, #134	; 0x86
 8002bda:	0052      	lsls	r2, r2, #1
 8002bdc:	18ba      	adds	r2, r7, r2
 8002bde:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8002be0:	2308      	movs	r3, #8
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	2284      	movs	r2, #132	; 0x84
 8002be6:	0052      	lsls	r2, r2, #1
 8002be8:	18ba      	adds	r2, r7, r2
 8002bea:	6013      	str	r3, [r2, #0]

    if(VerifyState(*statePtr) && VerifyState(*lastStatePtr))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f001 fea1 	bl	8004938 <VerifyState>
 8002bf6:	1e03      	subs	r3, r0, #0
 8002bf8:	d058      	beq.n	8002cac <BurnTermination2+0xf4>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f001 fe9a 	bl	8004938 <VerifyState>
 8002c04:	1e03      	subs	r3, r0, #0
 8002c06:	d051      	beq.n	8002cac <BurnTermination2+0xf4>
    {
    	if((*statePtr & BURN_TERMINATION_2) == BURN_TERMINATION_2){
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	001a      	movs	r2, r3
 8002c0e:	230b      	movs	r3, #11
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b0b      	cmp	r3, #11
 8002c14:	d138      	bne.n	8002c88 <BurnTermination2+0xd0>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 1| 1|  1|  1|  1|  0|  0| 10| 0
    		valve_target |= ((uint16_t)PV1 	\
 8002c16:	2486      	movs	r4, #134	; 0x86
 8002c18:	0064      	lsls	r4, r4, #1
 8002c1a:	193b      	adds	r3, r7, r4
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	229f      	movs	r2, #159	; 0x9f
 8002c20:	4313      	orrs	r3, r2
 8002c22:	193a      	adds	r2, r7, r4
 8002c24:	6013      	str	r3, [r2, #0]
						 |(uint16_t)PV3 	\
						 |(uint16_t)VV1 	\
    					 |(uint16_t)VV2 	\
						 |(uint16_t)MV1);
    		// Set Valve States
    		valve_target |= (uint16_t)VV1|(uint16_t)VV2;
 8002c26:	193b      	adds	r3, r7, r4
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2218      	movs	r2, #24
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	193a      	adds	r2, r7, r4
 8002c30:	6013      	str	r3, [r2, #0]

    		// Check valves
    		valve_configuration = StateConfiguration();
 8002c32:	f001 fea5 	bl	8004980 <StateConfiguration>
 8002c36:	0003      	movs	r3, r0
 8002c38:	2188      	movs	r1, #136	; 0x88
 8002c3a:	0049      	lsls	r1, r1, #1
 8002c3c:	187a      	adds	r2, r7, r1
 8002c3e:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		lastStatePtr = statePtr;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	603b      	str	r3, [r7, #0]
    		*statePtr =BURN_TERMINATION_2;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	220b      	movs	r2, #11
 8002c48:	701a      	strb	r2, [r3, #0]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8002c4a:	187b      	adds	r3, r7, r1
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	193b      	adds	r3, r7, r4
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	425a      	negs	r2, r3
 8002c56:	4153      	adcs	r3, r2
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	228a      	movs	r2, #138	; 0x8a
 8002c5c:	0052      	lsls	r2, r2, #1
 8002c5e:	18b8      	adds	r0, r7, r2
 8002c60:	6003      	str	r3, [r0, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8002c62:	18bb      	adds	r3, r7, r2
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	187b      	adds	r3, r7, r1
 8002c68:	6819      	ldr	r1, [r3, #0]
 8002c6a:	2484      	movs	r4, #132	; 0x84
 8002c6c:	0064      	lsls	r4, r4, #1
 8002c6e:	193b      	adds	r3, r7, r4
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 fef8 	bl	8003a68 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8002c78:	193b      	adds	r3, r7, r4
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <BurnTermination2+0x128>)
 8002c7e:	0011      	movs	r1, r2
 8002c80:	0018      	movs	r0, r3
 8002c82:	f001 ffc9 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & BURN_TERMINATION_2) == BURN_TERMINATION_2){
 8002c86:	e023      	b.n	8002cd0 <BurnTermination2+0x118>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, BURN_TERMINATION_2, *statePtr);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	2484      	movs	r4, #132	; 0x84
 8002c8e:	0064      	lsls	r4, r4, #1
 8002c90:	193b      	adds	r3, r7, r4
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	210b      	movs	r1, #11
 8002c96:	0018      	movs	r0, r3
 8002c98:	f000 fdd8 	bl	800384c <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8002c9c:	193b      	adds	r3, r7, r4
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <BurnTermination2+0x128>)
 8002ca2:	0011      	movs	r1, r2
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f001 ffb7 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & BURN_TERMINATION_2) == BURN_TERMINATION_2){
 8002caa:	e011      	b.n	8002cd0 <BurnTermination2+0x118>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, *statePtr, *lastStatePtr);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	7819      	ldrb	r1, [r3, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	781a      	ldrb	r2, [r3, #0]
 8002cb4:	2484      	movs	r4, #132	; 0x84
 8002cb6:	0064      	lsls	r4, r4, #1
 8002cb8:	193b      	adds	r3, r7, r4
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f000 fe59 	bl	8003974 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8002cc2:	193b      	adds	r3, r7, r4
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <BurnTermination2+0x128>)
 8002cc8:	0011      	movs	r1, r2
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f001 ffa4 	bl	8004c18 <UART_SendMessage>
    }
	return success;
 8002cd0:	238a      	movs	r3, #138	; 0x8a
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	681b      	ldr	r3, [r3, #0]
}
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b047      	add	sp, #284	; 0x11c
 8002cde:	bd90      	pop	{r4, r7, pc}
 8002ce0:	2000009c 	.word	0x2000009c

08002ce4 <BurnTermination3>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "burn_termination_3.h"

uint32_t BurnTermination3(enum StateName *statePtr, enum StateName *lastStatePtr)
{
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b0c7      	sub	sp, #284	; 0x11c
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
	uint32_t success = FALSE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	228a      	movs	r2, #138	; 0x8a
 8002cf2:	0052      	lsls	r2, r2, #1
 8002cf4:	18ba      	adds	r2, r7, r2
 8002cf6:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2288      	movs	r2, #136	; 0x88
 8002cfc:	0052      	lsls	r2, r2, #1
 8002cfe:	18ba      	adds	r2, r7, r2
 8002d00:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	2286      	movs	r2, #134	; 0x86
 8002d06:	0052      	lsls	r2, r2, #1
 8002d08:	18ba      	adds	r2, r7, r2
 8002d0a:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8002d0c:	2308      	movs	r3, #8
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	2284      	movs	r2, #132	; 0x84
 8002d12:	0052      	lsls	r2, r2, #1
 8002d14:	18ba      	adds	r2, r7, r2
 8002d16:	6013      	str	r3, [r2, #0]

    if(VerifyState(*statePtr) && VerifyState(*lastStatePtr))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f001 fe0b 	bl	8004938 <VerifyState>
 8002d22:	1e03      	subs	r3, r0, #0
 8002d24:	d04d      	beq.n	8002dc2 <BurnTermination3+0xde>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f001 fe04 	bl	8004938 <VerifyState>
 8002d30:	1e03      	subs	r3, r0, #0
 8002d32:	d046      	beq.n	8002dc2 <BurnTermination3+0xde>
    {
    	if((*statePtr & BURN_TERMINATION_3) == BURN_TERMINATION_3){
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	001a      	movs	r2, r3
 8002d3a:	230c      	movs	r3, #12
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	d12d      	bne.n	8002d9e <BurnTermination3+0xba>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 1| 0|  0|  1|  1|  0|  0|  0|  0
    		// Set Valve States
    		valve_target |= ((uint16_t)PV1 	\
 8002d42:	2186      	movs	r1, #134	; 0x86
 8002d44:	0049      	lsls	r1, r1, #1
 8002d46:	187b      	adds	r3, r7, r1
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2219      	movs	r2, #25
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	187a      	adds	r2, r7, r1
 8002d50:	6013      	str	r3, [r2, #0]
    					 |(uint16_t)VV1 	\
						 |(uint16_t)VV2);
    		// Timestamp and Log

    		// Change State conditions
    		lastStatePtr = statePtr;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	603b      	str	r3, [r7, #0]
    		*statePtr =BURN_TERMINATION_3;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	220c      	movs	r2, #12
 8002d5a:	701a      	strb	r2, [r3, #0]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8002d5c:	2088      	movs	r0, #136	; 0x88
 8002d5e:	0040      	lsls	r0, r0, #1
 8002d60:	183b      	adds	r3, r7, r0
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	187b      	adds	r3, r7, r1
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	425a      	negs	r2, r3
 8002d6c:	4153      	adcs	r3, r2
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	228a      	movs	r2, #138	; 0x8a
 8002d72:	0052      	lsls	r2, r2, #1
 8002d74:	18b9      	adds	r1, r7, r2
 8002d76:	600b      	str	r3, [r1, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8002d78:	18bb      	adds	r3, r7, r2
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	183b      	adds	r3, r7, r0
 8002d7e:	6819      	ldr	r1, [r3, #0]
 8002d80:	2484      	movs	r4, #132	; 0x84
 8002d82:	0064      	lsls	r4, r4, #1
 8002d84:	193b      	adds	r3, r7, r4
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 fe6d 	bl	8003a68 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8002d8e:	193b      	adds	r3, r7, r4
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <BurnTermination3+0x114>)
 8002d94:	0011      	movs	r1, r2
 8002d96:	0018      	movs	r0, r3
 8002d98:	f001 ff3e 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & BURN_TERMINATION_3) == BURN_TERMINATION_3){
 8002d9c:	e023      	b.n	8002de6 <BurnTermination3+0x102>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, BURN_TERMINATION_3, *statePtr);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	2484      	movs	r4, #132	; 0x84
 8002da4:	0064      	lsls	r4, r4, #1
 8002da6:	193b      	adds	r3, r7, r4
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	210c      	movs	r1, #12
 8002dac:	0018      	movs	r0, r3
 8002dae:	f000 fd4d 	bl	800384c <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8002db2:	193b      	adds	r3, r7, r4
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <BurnTermination3+0x114>)
 8002db8:	0011      	movs	r1, r2
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f001 ff2c 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & BURN_TERMINATION_3) == BURN_TERMINATION_3){
 8002dc0:	e011      	b.n	8002de6 <BurnTermination3+0x102>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, *statePtr, *lastStatePtr);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	7819      	ldrb	r1, [r3, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	781a      	ldrb	r2, [r3, #0]
 8002dca:	2484      	movs	r4, #132	; 0x84
 8002dcc:	0064      	lsls	r4, r4, #1
 8002dce:	193b      	adds	r3, r7, r4
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 fdce 	bl	8003974 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8002dd8:	193b      	adds	r3, r7, r4
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <BurnTermination3+0x114>)
 8002dde:	0011      	movs	r1, r2
 8002de0:	0018      	movs	r0, r3
 8002de2:	f001 ff19 	bl	8004c18 <UART_SendMessage>
    }
	return success;
 8002de6:	238a      	movs	r3, #138	; 0x8a
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	681b      	ldr	r3, [r3, #0]
}
 8002dee:	0018      	movs	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b047      	add	sp, #284	; 0x11c
 8002df4:	bd90      	pop	{r4, r7, pc}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	2000009c 	.word	0x2000009c

08002dfc <Failure>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "failure.h"

uint32_t Failure(enum StateName *statePtr, enum StateName *lastStatePtr)
{
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b0c7      	sub	sp, #284	; 0x11c
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
	uint32_t success = FALSE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	228a      	movs	r2, #138	; 0x8a
 8002e0a:	0052      	lsls	r2, r2, #1
 8002e0c:	18ba      	adds	r2, r7, r2
 8002e0e:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	2288      	movs	r2, #136	; 0x88
 8002e14:	0052      	lsls	r2, r2, #1
 8002e16:	18ba      	adds	r2, r7, r2
 8002e18:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	2286      	movs	r2, #134	; 0x86
 8002e1e:	0052      	lsls	r2, r2, #1
 8002e20:	18ba      	adds	r2, r7, r2
 8002e22:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8002e24:	2308      	movs	r3, #8
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	2284      	movs	r2, #132	; 0x84
 8002e2a:	0052      	lsls	r2, r2, #1
 8002e2c:	18ba      	adds	r2, r7, r2
 8002e2e:	6013      	str	r3, [r2, #0]

    if(VerifyState(*statePtr) && VerifyState(*lastStatePtr))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f001 fd7f 	bl	8004938 <VerifyState>
 8002e3a:	1e03      	subs	r3, r0, #0
 8002e3c:	d051      	beq.n	8002ee2 <Failure+0xe6>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	0018      	movs	r0, r3
 8002e44:	f001 fd78 	bl	8004938 <VerifyState>
 8002e48:	1e03      	subs	r3, r0, #0
 8002e4a:	d04a      	beq.n	8002ee2 <Failure+0xe6>
    {
    	if((*statePtr & FAILURE) == FAILURE){
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	001a      	movs	r2, r3
 8002e52:	2310      	movs	r3, #16
 8002e54:	4013      	ands	r3, r2
 8002e56:	d032      	beq.n	8002ebe <Failure+0xc2>
    		// TODO DEFINE BEHAVIOR ENTRY/EXIT
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 0|  0|  1|  1|  0|  0|  0|  0
    		// Set Valve States
    		valve_target |= ((uint16_t)VV1 	\
 8002e58:	2486      	movs	r4, #134	; 0x86
 8002e5a:	0064      	lsls	r4, r4, #1
 8002e5c:	193b      	adds	r3, r7, r4
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2218      	movs	r2, #24
 8002e62:	4313      	orrs	r3, r2
 8002e64:	193a      	adds	r2, r7, r4
 8002e66:	6013      	str	r3, [r2, #0]
						 |(uint16_t)VV2);

    		// Timestamp and Log
    		valve_configuration = StateConfiguration();
 8002e68:	f001 fd8a 	bl	8004980 <StateConfiguration>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	2188      	movs	r1, #136	; 0x88
 8002e70:	0049      	lsls	r1, r1, #1
 8002e72:	187a      	adds	r2, r7, r1
 8002e74:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		lastStatePtr = statePtr;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
    		*statePtr =FAILURE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	701a      	strb	r2, [r3, #0]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8002e80:	187b      	adds	r3, r7, r1
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	193b      	adds	r3, r7, r4
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	425a      	negs	r2, r3
 8002e8c:	4153      	adcs	r3, r2
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	228a      	movs	r2, #138	; 0x8a
 8002e92:	0052      	lsls	r2, r2, #1
 8002e94:	18b8      	adds	r0, r7, r2
 8002e96:	6003      	str	r3, [r0, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8002e98:	18bb      	adds	r3, r7, r2
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	187b      	adds	r3, r7, r1
 8002e9e:	6819      	ldr	r1, [r3, #0]
 8002ea0:	2484      	movs	r4, #132	; 0x84
 8002ea2:	0064      	lsls	r4, r4, #1
 8002ea4:	193b      	adds	r3, r7, r4
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f000 fddd 	bl	8003a68 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8002eae:	193b      	adds	r3, r7, r4
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <Failure+0x11c>)
 8002eb4:	0011      	movs	r1, r2
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f001 feae 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & FAILURE) == FAILURE){
 8002ebc:	e023      	b.n	8002f06 <Failure+0x10a>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, FAILURE, *statePtr);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	2484      	movs	r4, #132	; 0x84
 8002ec4:	0064      	lsls	r4, r4, #1
 8002ec6:	193b      	adds	r3, r7, r4
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2110      	movs	r1, #16
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f000 fcbd 	bl	800384c <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8002ed2:	193b      	adds	r3, r7, r4
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <Failure+0x11c>)
 8002ed8:	0011      	movs	r1, r2
 8002eda:	0018      	movs	r0, r3
 8002edc:	f001 fe9c 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & FAILURE) == FAILURE){
 8002ee0:	e011      	b.n	8002f06 <Failure+0x10a>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, *statePtr, *lastStatePtr);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	7819      	ldrb	r1, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	781a      	ldrb	r2, [r3, #0]
 8002eea:	2484      	movs	r4, #132	; 0x84
 8002eec:	0064      	lsls	r4, r4, #1
 8002eee:	193b      	adds	r3, r7, r4
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f000 fd3e 	bl	8003974 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8002ef8:	193b      	adds	r3, r7, r4
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <Failure+0x11c>)
 8002efe:	0011      	movs	r1, r2
 8002f00:	0018      	movs	r0, r3
 8002f02:	f001 fe89 	bl	8004c18 <UART_SendMessage>
    }
	return success;
 8002f06:	238a      	movs	r3, #138	; 0x8a
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	681b      	ldr	r3, [r3, #0]
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b047      	add	sp, #284	; 0x11c
 8002f14:	bd90      	pop	{r4, r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	2000009c 	.word	0x2000009c

08002f1c <Groundstation>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "groundstation.h"

uint32_t Groundstation(enum StateName *statePtr, enum StateName *lastStatePtr)
{
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b0c7      	sub	sp, #284	; 0x11c
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
	uint32_t success = FALSE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	228a      	movs	r2, #138	; 0x8a
 8002f2a:	0052      	lsls	r2, r2, #1
 8002f2c:	18ba      	adds	r2, r7, r2
 8002f2e:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	2288      	movs	r2, #136	; 0x88
 8002f34:	0052      	lsls	r2, r2, #1
 8002f36:	18ba      	adds	r2, r7, r2
 8002f38:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	2286      	movs	r2, #134	; 0x86
 8002f3e:	0052      	lsls	r2, r2, #1
 8002f40:	18ba      	adds	r2, r7, r2
 8002f42:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8002f44:	2308      	movs	r3, #8
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	2284      	movs	r2, #132	; 0x84
 8002f4a:	0052      	lsls	r2, r2, #1
 8002f4c:	18ba      	adds	r2, r7, r2
 8002f4e:	6013      	str	r3, [r2, #0]

    if(VerifyState(*statePtr) && VerifyState(*lastStatePtr))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	0018      	movs	r0, r3
 8002f56:	f001 fcef 	bl	8004938 <VerifyState>
 8002f5a:	1e03      	subs	r3, r0, #0
 8002f5c:	d052      	beq.n	8003004 <Groundstation+0xe8>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	0018      	movs	r0, r3
 8002f64:	f001 fce8 	bl	8004938 <VerifyState>
 8002f68:	1e03      	subs	r3, r0, #0
 8002f6a:	d04b      	beq.n	8003004 <Groundstation+0xe8>
    {
    	if((*statePtr & GROUNDSTATION) == GROUNDSTATION){
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	001a      	movs	r2, r3
 8002f72:	2311      	movs	r3, #17
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b11      	cmp	r3, #17
 8002f78:	d132      	bne.n	8002fe0 <Groundstation+0xc4>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 0|  0|  1|  1|  0|  0|  0|  0
    		// Set Valve States
    		valve_target |= ((uint16_t)VV1 	\
 8002f7a:	2486      	movs	r4, #134	; 0x86
 8002f7c:	0064      	lsls	r4, r4, #1
 8002f7e:	193b      	adds	r3, r7, r4
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2218      	movs	r2, #24
 8002f84:	4313      	orrs	r3, r2
 8002f86:	193a      	adds	r2, r7, r4
 8002f88:	6013      	str	r3, [r2, #0]
						 |(uint16_t)VV2);

    		// Timestamp and Log
    		valve_configuration = StateConfiguration();
 8002f8a:	f001 fcf9 	bl	8004980 <StateConfiguration>
 8002f8e:	0003      	movs	r3, r0
 8002f90:	2188      	movs	r1, #136	; 0x88
 8002f92:	0049      	lsls	r1, r1, #1
 8002f94:	187a      	adds	r2, r7, r1
 8002f96:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		lastStatePtr = statePtr;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	603b      	str	r3, [r7, #0]
    		*statePtr =GROUNDSTATION;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2211      	movs	r2, #17
 8002fa0:	701a      	strb	r2, [r3, #0]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8002fa2:	187b      	adds	r3, r7, r1
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	193b      	adds	r3, r7, r4
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	425a      	negs	r2, r3
 8002fae:	4153      	adcs	r3, r2
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	228a      	movs	r2, #138	; 0x8a
 8002fb4:	0052      	lsls	r2, r2, #1
 8002fb6:	18b8      	adds	r0, r7, r2
 8002fb8:	6003      	str	r3, [r0, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8002fba:	18bb      	adds	r3, r7, r2
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	187b      	adds	r3, r7, r1
 8002fc0:	6819      	ldr	r1, [r3, #0]
 8002fc2:	2484      	movs	r4, #132	; 0x84
 8002fc4:	0064      	lsls	r4, r4, #1
 8002fc6:	193b      	adds	r3, r7, r4
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f000 fd4c 	bl	8003a68 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8002fd0:	193b      	adds	r3, r7, r4
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b18      	ldr	r3, [pc, #96]	; (8003038 <Groundstation+0x11c>)
 8002fd6:	0011      	movs	r1, r2
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f001 fe1d 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & GROUNDSTATION) == GROUNDSTATION){
 8002fde:	e023      	b.n	8003028 <Groundstation+0x10c>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, GROUNDSTATION, *statePtr);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	781a      	ldrb	r2, [r3, #0]
 8002fe4:	2484      	movs	r4, #132	; 0x84
 8002fe6:	0064      	lsls	r4, r4, #1
 8002fe8:	193b      	adds	r3, r7, r4
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2111      	movs	r1, #17
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f000 fc2c 	bl	800384c <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8002ff4:	193b      	adds	r3, r7, r4
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <Groundstation+0x11c>)
 8002ffa:	0011      	movs	r1, r2
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f001 fe0b 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & GROUNDSTATION) == GROUNDSTATION){
 8003002:	e011      	b.n	8003028 <Groundstation+0x10c>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, *statePtr, *lastStatePtr);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	7819      	ldrb	r1, [r3, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	781a      	ldrb	r2, [r3, #0]
 800300c:	2484      	movs	r4, #132	; 0x84
 800300e:	0064      	lsls	r4, r4, #1
 8003010:	193b      	adds	r3, r7, r4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	0018      	movs	r0, r3
 8003016:	f000 fcad 	bl	8003974 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 800301a:	193b      	adds	r3, r7, r4
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <Groundstation+0x11c>)
 8003020:	0011      	movs	r1, r2
 8003022:	0018      	movs	r0, r3
 8003024:	f001 fdf8 	bl	8004c18 <UART_SendMessage>
    }
	return success;
 8003028:	238a      	movs	r3, #138	; 0x8a
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	0018      	movs	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	b047      	add	sp, #284	; 0x11c
 8003036:	bd90      	pop	{r4, r7, pc}
 8003038:	2000009c 	.word	0x2000009c

0800303c <Ignition>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "ignition.h"

uint32_t Ignition(enum StateName *statePtr, enum StateName *lastStatePtr)
{
 800303c:	b590      	push	{r4, r7, lr}
 800303e:	b0c7      	sub	sp, #284	; 0x11c
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
	uint32_t success = FALSE;
 8003046:	2300      	movs	r3, #0
 8003048:	228a      	movs	r2, #138	; 0x8a
 800304a:	0052      	lsls	r2, r2, #1
 800304c:	18ba      	adds	r2, r7, r2
 800304e:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	2288      	movs	r2, #136	; 0x88
 8003054:	0052      	lsls	r2, r2, #1
 8003056:	18ba      	adds	r2, r7, r2
 8003058:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 800305a:	2300      	movs	r3, #0
 800305c:	2286      	movs	r2, #134	; 0x86
 800305e:	0052      	lsls	r2, r2, #1
 8003060:	18ba      	adds	r2, r7, r2
 8003062:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8003064:	2308      	movs	r3, #8
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	2284      	movs	r2, #132	; 0x84
 800306a:	0052      	lsls	r2, r2, #1
 800306c:	18ba      	adds	r2, r7, r2
 800306e:	6013      	str	r3, [r2, #0]

    if(VerifyState(*statePtr) && VerifyState(*lastStatePtr))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	0018      	movs	r0, r3
 8003076:	f001 fc5f 	bl	8004938 <VerifyState>
 800307a:	1e03      	subs	r3, r0, #0
 800307c:	d052      	beq.n	8003124 <Ignition+0xe8>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	0018      	movs	r0, r3
 8003084:	f001 fc58 	bl	8004938 <VerifyState>
 8003088:	1e03      	subs	r3, r0, #0
 800308a:	d04b      	beq.n	8003124 <Ignition+0xe8>
    {
    	if((*statePtr & IGNITION) == IGNITION){
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	001a      	movs	r2, r3
 8003092:	2305      	movs	r3, #5
 8003094:	4013      	ands	r3, r2
 8003096:	2b05      	cmp	r3, #5
 8003098:	d132      	bne.n	8003100 <Ignition+0xc4>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 1|  1|  0|  0|  1|  1| 10| 0
    		// Set Valve States
    		valve_target |= ((uint16_t)PV2 	\
 800309a:	2486      	movs	r4, #134	; 0x86
 800309c:	0064      	lsls	r4, r4, #1
 800309e:	193b      	adds	r3, r7, r4
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	22e6      	movs	r2, #230	; 0xe6
 80030a4:	4313      	orrs	r3, r2
 80030a6:	193a      	adds	r2, r7, r4
 80030a8:	6013      	str	r3, [r2, #0]
    					 |(uint16_t)PV3 	\
						 |(uint16_t)IV1 	\
						 |(uint16_t)IV2 	\
						 |(uint16_t)MV1);
    		// Timestamp and Log
    		valve_configuration = StateConfiguration();
 80030aa:	f001 fc69 	bl	8004980 <StateConfiguration>
 80030ae:	0003      	movs	r3, r0
 80030b0:	2188      	movs	r1, #136	; 0x88
 80030b2:	0049      	lsls	r1, r1, #1
 80030b4:	187a      	adds	r2, r7, r1
 80030b6:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		lastStatePtr = statePtr;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	603b      	str	r3, [r7, #0]
    		*statePtr =IGNITION;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2205      	movs	r2, #5
 80030c0:	701a      	strb	r2, [r3, #0]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 80030c2:	187b      	adds	r3, r7, r1
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	193b      	adds	r3, r7, r4
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	425a      	negs	r2, r3
 80030ce:	4153      	adcs	r3, r2
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	228a      	movs	r2, #138	; 0x8a
 80030d4:	0052      	lsls	r2, r2, #1
 80030d6:	18b8      	adds	r0, r7, r2
 80030d8:	6003      	str	r3, [r0, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 80030da:	18bb      	adds	r3, r7, r2
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	187b      	adds	r3, r7, r1
 80030e0:	6819      	ldr	r1, [r3, #0]
 80030e2:	2484      	movs	r4, #132	; 0x84
 80030e4:	0064      	lsls	r4, r4, #1
 80030e6:	193b      	adds	r3, r7, r4
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	0018      	movs	r0, r3
 80030ec:	f000 fcbc 	bl	8003a68 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 80030f0:	193b      	adds	r3, r7, r4
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b18      	ldr	r3, [pc, #96]	; (8003158 <Ignition+0x11c>)
 80030f6:	0011      	movs	r1, r2
 80030f8:	0018      	movs	r0, r3
 80030fa:	f001 fd8d 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & IGNITION) == IGNITION){
 80030fe:	e023      	b.n	8003148 <Ignition+0x10c>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, IGNITION, *statePtr);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	781a      	ldrb	r2, [r3, #0]
 8003104:	2484      	movs	r4, #132	; 0x84
 8003106:	0064      	lsls	r4, r4, #1
 8003108:	193b      	adds	r3, r7, r4
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2105      	movs	r1, #5
 800310e:	0018      	movs	r0, r3
 8003110:	f000 fb9c 	bl	800384c <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1,msgPtr);
 8003114:	193b      	adds	r3, r7, r4
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <Ignition+0x11c>)
 800311a:	0011      	movs	r1, r2
 800311c:	0018      	movs	r0, r3
 800311e:	f001 fd7b 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & IGNITION) == IGNITION){
 8003122:	e011      	b.n	8003148 <Ignition+0x10c>

    	}
    }else{
    	    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, *statePtr, *lastStatePtr);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	7819      	ldrb	r1, [r3, #0]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	781a      	ldrb	r2, [r3, #0]
 800312c:	2484      	movs	r4, #132	; 0x84
 800312e:	0064      	lsls	r4, r4, #1
 8003130:	193b      	adds	r3, r7, r4
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	0018      	movs	r0, r3
 8003136:	f000 fc1d 	bl	8003974 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 800313a:	193b      	adds	r3, r7, r4
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	4b06      	ldr	r3, [pc, #24]	; (8003158 <Ignition+0x11c>)
 8003140:	0011      	movs	r1, r2
 8003142:	0018      	movs	r0, r3
 8003144:	f001 fd68 	bl	8004c18 <UART_SendMessage>
    }
	return success;
 8003148:	238a      	movs	r3, #138	; 0x8a
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	681b      	ldr	r3, [r3, #0]
}
 8003150:	0018      	movs	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	b047      	add	sp, #284	; 0x11c
 8003156:	bd90      	pop	{r4, r7, pc}
 8003158:	2000009c 	.word	0x2000009c

0800315c <SystemClock_Config>:
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b0a1      	sub	sp, #132	; 0x84
 8003160:	af00      	add	r7, sp, #0
 8003162:	2448      	movs	r4, #72	; 0x48
 8003164:	193b      	adds	r3, r7, r4
 8003166:	0018      	movs	r0, r3
 8003168:	2338      	movs	r3, #56	; 0x38
 800316a:	001a      	movs	r2, r3
 800316c:	2100      	movs	r1, #0
 800316e:	f001 fe6a 	bl	8004e46 <memset>
 8003172:	2338      	movs	r3, #56	; 0x38
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	0018      	movs	r0, r3
 8003178:	2310      	movs	r3, #16
 800317a:	001a      	movs	r2, r3
 800317c:	2100      	movs	r1, #0
 800317e:	f001 fe62 	bl	8004e46 <memset>
 8003182:	1d3b      	adds	r3, r7, #4
 8003184:	0018      	movs	r0, r3
 8003186:	2334      	movs	r3, #52	; 0x34
 8003188:	001a      	movs	r2, r3
 800318a:	2100      	movs	r1, #0
 800318c:	f001 fe5b 	bl	8004e46 <memset>
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	0018      	movs	r0, r3
 8003196:	f7fe fb09 	bl	80017ac <HAL_PWREx_ControlVoltageScaling>
 800319a:	193b      	adds	r3, r7, r4
 800319c:	2201      	movs	r2, #1
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	193b      	adds	r3, r7, r4
 80031a2:	2280      	movs	r2, #128	; 0x80
 80031a4:	0252      	lsls	r2, r2, #9
 80031a6:	605a      	str	r2, [r3, #4]
 80031a8:	0021      	movs	r1, r4
 80031aa:	187b      	adds	r3, r7, r1
 80031ac:	2202      	movs	r2, #2
 80031ae:	61da      	str	r2, [r3, #28]
 80031b0:	187b      	adds	r3, r7, r1
 80031b2:	2203      	movs	r2, #3
 80031b4:	621a      	str	r2, [r3, #32]
 80031b6:	187b      	adds	r3, r7, r1
 80031b8:	2200      	movs	r2, #0
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24
 80031bc:	187b      	adds	r3, r7, r1
 80031be:	2208      	movs	r2, #8
 80031c0:	629a      	str	r2, [r3, #40]	; 0x28
 80031c2:	187b      	adds	r3, r7, r1
 80031c4:	2280      	movs	r2, #128	; 0x80
 80031c6:	0292      	lsls	r2, r2, #10
 80031c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80031ca:	187b      	adds	r3, r7, r1
 80031cc:	2280      	movs	r2, #128	; 0x80
 80031ce:	0492      	lsls	r2, r2, #18
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
 80031d2:	187b      	adds	r3, r7, r1
 80031d4:	2280      	movs	r2, #128	; 0x80
 80031d6:	0592      	lsls	r2, r2, #22
 80031d8:	635a      	str	r2, [r3, #52]	; 0x34
 80031da:	187b      	adds	r3, r7, r1
 80031dc:	0018      	movs	r0, r3
 80031de:	f7fe fb25 	bl	800182c <HAL_RCC_OscConfig>
 80031e2:	1e03      	subs	r3, r0, #0
 80031e4:	d001      	beq.n	80031ea <SystemClock_Config+0x8e>
 80031e6:	f000 f9eb 	bl	80035c0 <Error_Handler>
 80031ea:	2138      	movs	r1, #56	; 0x38
 80031ec:	187b      	adds	r3, r7, r1
 80031ee:	2207      	movs	r2, #7
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	187b      	adds	r3, r7, r1
 80031f4:	2202      	movs	r2, #2
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	2200      	movs	r2, #0
 80031fc:	609a      	str	r2, [r3, #8]
 80031fe:	187b      	adds	r3, r7, r1
 8003200:	2200      	movs	r2, #0
 8003202:	60da      	str	r2, [r3, #12]
 8003204:	187b      	adds	r3, r7, r1
 8003206:	2102      	movs	r1, #2
 8003208:	0018      	movs	r0, r3
 800320a:	f7fe fe2f 	bl	8001e6c <HAL_RCC_ClockConfig>
 800320e:	1e03      	subs	r3, r0, #0
 8003210:	d001      	beq.n	8003216 <SystemClock_Config+0xba>
 8003212:	f000 f9d5 	bl	80035c0 <Error_Handler>
 8003216:	1d3b      	adds	r3, r7, #4
 8003218:	4a09      	ldr	r2, [pc, #36]	; (8003240 <SystemClock_Config+0xe4>)
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	1d3b      	adds	r3, r7, #4
 800321e:	2200      	movs	r2, #0
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	2200      	movs	r2, #0
 8003226:	621a      	str	r2, [r3, #32]
 8003228:	1d3b      	adds	r3, r7, #4
 800322a:	0018      	movs	r0, r3
 800322c:	f7fe ffa6 	bl	800217c <HAL_RCCEx_PeriphCLKConfig>
 8003230:	1e03      	subs	r3, r0, #0
 8003232:	d001      	beq.n	8003238 <SystemClock_Config+0xdc>
 8003234:	f000 f9c4 	bl	80035c0 <Error_Handler>
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b021      	add	sp, #132	; 0x84
 800323e:	bd90      	pop	{r4, r7, pc}
 8003240:	00004020 	.word	0x00004020

08003244 <MX_ADC1_Init>:
 8003244:	b580      	push	{r7, lr}
 8003246:	b08a      	sub	sp, #40	; 0x28
 8003248:	af00      	add	r7, sp, #0
 800324a:	2310      	movs	r3, #16
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	0018      	movs	r0, r3
 8003250:	2318      	movs	r3, #24
 8003252:	001a      	movs	r2, r3
 8003254:	2100      	movs	r1, #0
 8003256:	f001 fdf6 	bl	8004e46 <memset>
 800325a:	1d3b      	adds	r3, r7, #4
 800325c:	0018      	movs	r0, r3
 800325e:	230c      	movs	r3, #12
 8003260:	001a      	movs	r2, r3
 8003262:	2100      	movs	r1, #0
 8003264:	f001 fdef 	bl	8004e46 <memset>
 8003268:	4b3c      	ldr	r3, [pc, #240]	; (800335c <MX_ADC1_Init+0x118>)
 800326a:	4a3d      	ldr	r2, [pc, #244]	; (8003360 <MX_ADC1_Init+0x11c>)
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	4b3b      	ldr	r3, [pc, #236]	; (800335c <MX_ADC1_Init+0x118>)
 8003270:	2280      	movs	r2, #128	; 0x80
 8003272:	05d2      	lsls	r2, r2, #23
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	4b39      	ldr	r3, [pc, #228]	; (800335c <MX_ADC1_Init+0x118>)
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	4b37      	ldr	r3, [pc, #220]	; (800335c <MX_ADC1_Init+0x118>)
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	4b36      	ldr	r3, [pc, #216]	; (800335c <MX_ADC1_Init+0x118>)
 8003284:	2200      	movs	r2, #0
 8003286:	611a      	str	r2, [r3, #16]
 8003288:	4b34      	ldr	r3, [pc, #208]	; (800335c <MX_ADC1_Init+0x118>)
 800328a:	2204      	movs	r2, #4
 800328c:	615a      	str	r2, [r3, #20]
 800328e:	4b33      	ldr	r3, [pc, #204]	; (800335c <MX_ADC1_Init+0x118>)
 8003290:	2200      	movs	r2, #0
 8003292:	761a      	strb	r2, [r3, #24]
 8003294:	4b31      	ldr	r3, [pc, #196]	; (800335c <MX_ADC1_Init+0x118>)
 8003296:	2200      	movs	r2, #0
 8003298:	765a      	strb	r2, [r3, #25]
 800329a:	4b30      	ldr	r3, [pc, #192]	; (800335c <MX_ADC1_Init+0x118>)
 800329c:	2200      	movs	r2, #0
 800329e:	769a      	strb	r2, [r3, #26]
 80032a0:	4b2e      	ldr	r3, [pc, #184]	; (800335c <MX_ADC1_Init+0x118>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	61da      	str	r2, [r3, #28]
 80032a6:	4b2d      	ldr	r3, [pc, #180]	; (800335c <MX_ADC1_Init+0x118>)
 80032a8:	2220      	movs	r2, #32
 80032aa:	2100      	movs	r1, #0
 80032ac:	5499      	strb	r1, [r3, r2]
 80032ae:	4b2b      	ldr	r3, [pc, #172]	; (800335c <MX_ADC1_Init+0x118>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	625a      	str	r2, [r3, #36]	; 0x24
 80032b4:	4b29      	ldr	r3, [pc, #164]	; (800335c <MX_ADC1_Init+0x118>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	629a      	str	r2, [r3, #40]	; 0x28
 80032ba:	4b28      	ldr	r3, [pc, #160]	; (800335c <MX_ADC1_Init+0x118>)
 80032bc:	222c      	movs	r2, #44	; 0x2c
 80032be:	2100      	movs	r1, #0
 80032c0:	5499      	strb	r1, [r3, r2]
 80032c2:	4b26      	ldr	r3, [pc, #152]	; (800335c <MX_ADC1_Init+0x118>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
 80032c8:	4b24      	ldr	r3, [pc, #144]	; (800335c <MX_ADC1_Init+0x118>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	635a      	str	r2, [r3, #52]	; 0x34
 80032ce:	4b23      	ldr	r3, [pc, #140]	; (800335c <MX_ADC1_Init+0x118>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	639a      	str	r2, [r3, #56]	; 0x38
 80032d4:	4b21      	ldr	r3, [pc, #132]	; (800335c <MX_ADC1_Init+0x118>)
 80032d6:	223c      	movs	r2, #60	; 0x3c
 80032d8:	2100      	movs	r1, #0
 80032da:	5499      	strb	r1, [r3, r2]
 80032dc:	4b1f      	ldr	r3, [pc, #124]	; (800335c <MX_ADC1_Init+0x118>)
 80032de:	2200      	movs	r2, #0
 80032e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80032e2:	4b1e      	ldr	r3, [pc, #120]	; (800335c <MX_ADC1_Init+0x118>)
 80032e4:	0018      	movs	r0, r3
 80032e6:	f7fd f9dd 	bl	80006a4 <HAL_ADC_Init>
 80032ea:	1e03      	subs	r3, r0, #0
 80032ec:	d001      	beq.n	80032f2 <MX_ADC1_Init+0xae>
 80032ee:	f000 f967 	bl	80035c0 <Error_Handler>
 80032f2:	2110      	movs	r1, #16
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <MX_ADC1_Init+0x120>)
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	187b      	adds	r3, r7, r1
 80032fc:	22c0      	movs	r2, #192	; 0xc0
 80032fe:	0412      	lsls	r2, r2, #16
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	187b      	adds	r3, r7, r1
 8003304:	2201      	movs	r2, #1
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	187b      	adds	r3, r7, r1
 800330a:	2200      	movs	r2, #0
 800330c:	731a      	strb	r2, [r3, #12]
 800330e:	187b      	adds	r3, r7, r1
 8003310:	2200      	movs	r2, #0
 8003312:	611a      	str	r2, [r3, #16]
 8003314:	187b      	adds	r3, r7, r1
 8003316:	2200      	movs	r2, #0
 8003318:	615a      	str	r2, [r3, #20]
 800331a:	187a      	adds	r2, r7, r1
 800331c:	4b0f      	ldr	r3, [pc, #60]	; (800335c <MX_ADC1_Init+0x118>)
 800331e:	0011      	movs	r1, r2
 8003320:	0018      	movs	r0, r3
 8003322:	f7fd fd69 	bl	8000df8 <HAL_ADC_AnalogWDGConfig>
 8003326:	1e03      	subs	r3, r0, #0
 8003328:	d001      	beq.n	800332e <MX_ADC1_Init+0xea>
 800332a:	f000 f949 	bl	80035c0 <Error_Handler>
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	1d3b      	adds	r3, r7, #4
 8003336:	2200      	movs	r2, #0
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	1d3b      	adds	r3, r7, #4
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	1d3a      	adds	r2, r7, #4
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <MX_ADC1_Init+0x118>)
 8003344:	0011      	movs	r1, r2
 8003346:	0018      	movs	r0, r3
 8003348:	f7fd fb82 	bl	8000a50 <HAL_ADC_ConfigChannel>
 800334c:	1e03      	subs	r3, r0, #0
 800334e:	d001      	beq.n	8003354 <MX_ADC1_Init+0x110>
 8003350:	f000 f936 	bl	80035c0 <Error_Handler>
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b00a      	add	sp, #40	; 0x28
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000128 	.word	0x20000128
 8003360:	40012400 	.word	0x40012400
 8003364:	7cc00000 	.word	0x7cc00000

08003368 <MX_GPIO_Init>:
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b08b      	sub	sp, #44	; 0x2c
 800336c:	af00      	add	r7, sp, #0
 800336e:	2414      	movs	r4, #20
 8003370:	193b      	adds	r3, r7, r4
 8003372:	0018      	movs	r0, r3
 8003374:	2314      	movs	r3, #20
 8003376:	001a      	movs	r2, r3
 8003378:	2100      	movs	r1, #0
 800337a:	f001 fd64 	bl	8004e46 <memset>
 800337e:	4b88      	ldr	r3, [pc, #544]	; (80035a0 <MX_GPIO_Init+0x238>)
 8003380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003382:	4b87      	ldr	r3, [pc, #540]	; (80035a0 <MX_GPIO_Init+0x238>)
 8003384:	2104      	movs	r1, #4
 8003386:	430a      	orrs	r2, r1
 8003388:	635a      	str	r2, [r3, #52]	; 0x34
 800338a:	4b85      	ldr	r3, [pc, #532]	; (80035a0 <MX_GPIO_Init+0x238>)
 800338c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338e:	2204      	movs	r2, #4
 8003390:	4013      	ands	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4b82      	ldr	r3, [pc, #520]	; (80035a0 <MX_GPIO_Init+0x238>)
 8003398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800339a:	4b81      	ldr	r3, [pc, #516]	; (80035a0 <MX_GPIO_Init+0x238>)
 800339c:	2120      	movs	r1, #32
 800339e:	430a      	orrs	r2, r1
 80033a0:	635a      	str	r2, [r3, #52]	; 0x34
 80033a2:	4b7f      	ldr	r3, [pc, #508]	; (80035a0 <MX_GPIO_Init+0x238>)
 80033a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a6:	2220      	movs	r2, #32
 80033a8:	4013      	ands	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4b7c      	ldr	r3, [pc, #496]	; (80035a0 <MX_GPIO_Init+0x238>)
 80033b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b2:	4b7b      	ldr	r3, [pc, #492]	; (80035a0 <MX_GPIO_Init+0x238>)
 80033b4:	2101      	movs	r1, #1
 80033b6:	430a      	orrs	r2, r1
 80033b8:	635a      	str	r2, [r3, #52]	; 0x34
 80033ba:	4b79      	ldr	r3, [pc, #484]	; (80035a0 <MX_GPIO_Init+0x238>)
 80033bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033be:	2201      	movs	r2, #1
 80033c0:	4013      	ands	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4b76      	ldr	r3, [pc, #472]	; (80035a0 <MX_GPIO_Init+0x238>)
 80033c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ca:	4b75      	ldr	r3, [pc, #468]	; (80035a0 <MX_GPIO_Init+0x238>)
 80033cc:	2102      	movs	r1, #2
 80033ce:	430a      	orrs	r2, r1
 80033d0:	635a      	str	r2, [r3, #52]	; 0x34
 80033d2:	4b73      	ldr	r3, [pc, #460]	; (80035a0 <MX_GPIO_Init+0x238>)
 80033d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d6:	2202      	movs	r2, #2
 80033d8:	4013      	ands	r3, r2
 80033da:	607b      	str	r3, [r7, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4b70      	ldr	r3, [pc, #448]	; (80035a0 <MX_GPIO_Init+0x238>)
 80033e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e2:	4b6f      	ldr	r3, [pc, #444]	; (80035a0 <MX_GPIO_Init+0x238>)
 80033e4:	2108      	movs	r1, #8
 80033e6:	430a      	orrs	r2, r1
 80033e8:	635a      	str	r2, [r3, #52]	; 0x34
 80033ea:	4b6d      	ldr	r3, [pc, #436]	; (80035a0 <MX_GPIO_Init+0x238>)
 80033ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ee:	2208      	movs	r2, #8
 80033f0:	4013      	ands	r3, r2
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	23e0      	movs	r3, #224	; 0xe0
 80033f8:	021b      	lsls	r3, r3, #8
 80033fa:	486a      	ldr	r0, [pc, #424]	; (80035a4 <MX_GPIO_Init+0x23c>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	0019      	movs	r1, r3
 8003400:	f7fe f9b7 	bl	8001772 <HAL_GPIO_WritePin>
 8003404:	23e0      	movs	r3, #224	; 0xe0
 8003406:	00d9      	lsls	r1, r3, #3
 8003408:	23a0      	movs	r3, #160	; 0xa0
 800340a:	05db      	lsls	r3, r3, #23
 800340c:	2200      	movs	r2, #0
 800340e:	0018      	movs	r0, r3
 8003410:	f7fe f9af 	bl	8001772 <HAL_GPIO_WritePin>
 8003414:	4b64      	ldr	r3, [pc, #400]	; (80035a8 <MX_GPIO_Init+0x240>)
 8003416:	2200      	movs	r2, #0
 8003418:	21c0      	movs	r1, #192	; 0xc0
 800341a:	0018      	movs	r0, r3
 800341c:	f7fe f9a9 	bl	8001772 <HAL_GPIO_WritePin>
 8003420:	23c1      	movs	r3, #193	; 0xc1
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4861      	ldr	r0, [pc, #388]	; (80035ac <MX_GPIO_Init+0x244>)
 8003426:	2200      	movs	r2, #0
 8003428:	0019      	movs	r1, r3
 800342a:	f7fe f9a2 	bl	8001772 <HAL_GPIO_WritePin>
 800342e:	0021      	movs	r1, r4
 8003430:	187b      	adds	r3, r7, r1
 8003432:	4a5f      	ldr	r2, [pc, #380]	; (80035b0 <MX_GPIO_Init+0x248>)
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	187b      	adds	r3, r7, r1
 8003438:	2203      	movs	r2, #3
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	187b      	adds	r3, r7, r1
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
 8003442:	000c      	movs	r4, r1
 8003444:	187b      	adds	r3, r7, r1
 8003446:	4a58      	ldr	r2, [pc, #352]	; (80035a8 <MX_GPIO_Init+0x240>)
 8003448:	0019      	movs	r1, r3
 800344a:	0010      	movs	r0, r2
 800344c:	f7fe f810 	bl	8001470 <HAL_GPIO_Init>
 8003450:	0021      	movs	r1, r4
 8003452:	187b      	adds	r3, r7, r1
 8003454:	2204      	movs	r2, #4
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	187b      	adds	r3, r7, r1
 800345a:	2203      	movs	r2, #3
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	187b      	adds	r3, r7, r1
 8003460:	2200      	movs	r2, #0
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	000c      	movs	r4, r1
 8003466:	187b      	adds	r3, r7, r1
 8003468:	4a52      	ldr	r2, [pc, #328]	; (80035b4 <MX_GPIO_Init+0x24c>)
 800346a:	0019      	movs	r1, r3
 800346c:	0010      	movs	r0, r2
 800346e:	f7fd ffff 	bl	8001470 <HAL_GPIO_Init>
 8003472:	0021      	movs	r1, r4
 8003474:	187b      	adds	r3, r7, r1
 8003476:	4a50      	ldr	r2, [pc, #320]	; (80035b8 <MX_GPIO_Init+0x250>)
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	187b      	adds	r3, r7, r1
 800347c:	2203      	movs	r2, #3
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	187b      	adds	r3, r7, r1
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
 8003486:	000c      	movs	r4, r1
 8003488:	187b      	adds	r3, r7, r1
 800348a:	4a46      	ldr	r2, [pc, #280]	; (80035a4 <MX_GPIO_Init+0x23c>)
 800348c:	0019      	movs	r1, r3
 800348e:	0010      	movs	r0, r2
 8003490:	f7fd ffee 	bl	8001470 <HAL_GPIO_Init>
 8003494:	0021      	movs	r1, r4
 8003496:	187b      	adds	r3, r7, r1
 8003498:	22e0      	movs	r2, #224	; 0xe0
 800349a:	0212      	lsls	r2, r2, #8
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	187b      	adds	r3, r7, r1
 80034a0:	2201      	movs	r2, #1
 80034a2:	605a      	str	r2, [r3, #4]
 80034a4:	187b      	adds	r3, r7, r1
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	187b      	adds	r3, r7, r1
 80034ac:	2203      	movs	r2, #3
 80034ae:	60da      	str	r2, [r3, #12]
 80034b0:	000c      	movs	r4, r1
 80034b2:	187b      	adds	r3, r7, r1
 80034b4:	4a3b      	ldr	r2, [pc, #236]	; (80035a4 <MX_GPIO_Init+0x23c>)
 80034b6:	0019      	movs	r1, r3
 80034b8:	0010      	movs	r0, r2
 80034ba:	f7fd ffd9 	bl	8001470 <HAL_GPIO_Init>
 80034be:	0021      	movs	r1, r4
 80034c0:	187b      	adds	r3, r7, r1
 80034c2:	22e0      	movs	r2, #224	; 0xe0
 80034c4:	00d2      	lsls	r2, r2, #3
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	187b      	adds	r3, r7, r1
 80034ca:	2201      	movs	r2, #1
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	187b      	adds	r3, r7, r1
 80034d0:	2200      	movs	r2, #0
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	187b      	adds	r3, r7, r1
 80034d6:	2203      	movs	r2, #3
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	000c      	movs	r4, r1
 80034dc:	187a      	adds	r2, r7, r1
 80034de:	23a0      	movs	r3, #160	; 0xa0
 80034e0:	05db      	lsls	r3, r3, #23
 80034e2:	0011      	movs	r1, r2
 80034e4:	0018      	movs	r0, r3
 80034e6:	f7fd ffc3 	bl	8001470 <HAL_GPIO_Init>
 80034ea:	0021      	movs	r1, r4
 80034ec:	187b      	adds	r3, r7, r1
 80034ee:	22c0      	movs	r2, #192	; 0xc0
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	187b      	adds	r3, r7, r1
 80034f4:	2201      	movs	r2, #1
 80034f6:	605a      	str	r2, [r3, #4]
 80034f8:	187b      	adds	r3, r7, r1
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
 80034fe:	187b      	adds	r3, r7, r1
 8003500:	2203      	movs	r2, #3
 8003502:	60da      	str	r2, [r3, #12]
 8003504:	000c      	movs	r4, r1
 8003506:	187b      	adds	r3, r7, r1
 8003508:	4a27      	ldr	r2, [pc, #156]	; (80035a8 <MX_GPIO_Init+0x240>)
 800350a:	0019      	movs	r1, r3
 800350c:	0010      	movs	r0, r2
 800350e:	f7fd ffaf 	bl	8001470 <HAL_GPIO_Init>
 8003512:	0021      	movs	r1, r4
 8003514:	187b      	adds	r3, r7, r1
 8003516:	22c1      	movs	r2, #193	; 0xc1
 8003518:	0092      	lsls	r2, r2, #2
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	000c      	movs	r4, r1
 800351e:	193b      	adds	r3, r7, r4
 8003520:	2201      	movs	r2, #1
 8003522:	605a      	str	r2, [r3, #4]
 8003524:	193b      	adds	r3, r7, r4
 8003526:	2200      	movs	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
 800352a:	193b      	adds	r3, r7, r4
 800352c:	2203      	movs	r2, #3
 800352e:	60da      	str	r2, [r3, #12]
 8003530:	193b      	adds	r3, r7, r4
 8003532:	4a1e      	ldr	r2, [pc, #120]	; (80035ac <MX_GPIO_Init+0x244>)
 8003534:	0019      	movs	r1, r3
 8003536:	0010      	movs	r0, r2
 8003538:	f7fd ff9a 	bl	8001470 <HAL_GPIO_Init>
 800353c:	193b      	adds	r3, r7, r4
 800353e:	2298      	movs	r2, #152	; 0x98
 8003540:	0212      	lsls	r2, r2, #8
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	193b      	adds	r3, r7, r4
 8003546:	2203      	movs	r2, #3
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	193b      	adds	r3, r7, r4
 800354c:	2200      	movs	r2, #0
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	193a      	adds	r2, r7, r4
 8003552:	23a0      	movs	r3, #160	; 0xa0
 8003554:	05db      	lsls	r3, r3, #23
 8003556:	0011      	movs	r1, r2
 8003558:	0018      	movs	r0, r3
 800355a:	f7fd ff89 	bl	8001470 <HAL_GPIO_Init>
 800355e:	193b      	adds	r3, r7, r4
 8003560:	227b      	movs	r2, #123	; 0x7b
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	193b      	adds	r3, r7, r4
 8003566:	2203      	movs	r2, #3
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	193b      	adds	r3, r7, r4
 800356c:	2200      	movs	r2, #0
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	193b      	adds	r3, r7, r4
 8003572:	4a0e      	ldr	r2, [pc, #56]	; (80035ac <MX_GPIO_Init+0x244>)
 8003574:	0019      	movs	r1, r3
 8003576:	0010      	movs	r0, r2
 8003578:	f7fd ff7a 	bl	8001470 <HAL_GPIO_Init>
 800357c:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <MX_GPIO_Init+0x254>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <MX_GPIO_Init+0x254>)
 8003582:	2180      	movs	r1, #128	; 0x80
 8003584:	03c9      	lsls	r1, r1, #15
 8003586:	430a      	orrs	r2, r1
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <MX_GPIO_Init+0x254>)
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <MX_GPIO_Init+0x254>)
 8003590:	2180      	movs	r1, #128	; 0x80
 8003592:	0409      	lsls	r1, r1, #16
 8003594:	430a      	orrs	r2, r1
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	46c0      	nop			; (mov r8, r8)
 800359a:	46bd      	mov	sp, r7
 800359c:	b00b      	add	sp, #44	; 0x2c
 800359e:	bd90      	pop	{r4, r7, pc}
 80035a0:	40021000 	.word	0x40021000
 80035a4:	50000400 	.word	0x50000400
 80035a8:	50000800 	.word	0x50000800
 80035ac:	50000c00 	.word	0x50000c00
 80035b0:	00003f3c 	.word	0x00003f3c
 80035b4:	50001400 	.word	0x50001400
 80035b8:	00000fdc 	.word	0x00000fdc
 80035bc:	40010000 	.word	0x40010000

080035c0 <Error_Handler>:
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <LoxFill>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "lox_fill.h"

uint32_t LoxFill(enum StateName *statePtr, enum StateName *lastStatePtr)
{
 80035cc:	b590      	push	{r4, r7, lr}
 80035ce:	b0c7      	sub	sp, #284	; 0x11c
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
	uint32_t success = FALSE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	228a      	movs	r2, #138	; 0x8a
 80035da:	0052      	lsls	r2, r2, #1
 80035dc:	18ba      	adds	r2, r7, r2
 80035de:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	2288      	movs	r2, #136	; 0x88
 80035e4:	0052      	lsls	r2, r2, #1
 80035e6:	18ba      	adds	r2, r7, r2
 80035e8:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	2286      	movs	r2, #134	; 0x86
 80035ee:	0052      	lsls	r2, r2, #1
 80035f0:	18ba      	adds	r2, r7, r2
 80035f2:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 80035f4:	2308      	movs	r3, #8
 80035f6:	18fb      	adds	r3, r7, r3
 80035f8:	2284      	movs	r2, #132	; 0x84
 80035fa:	0052      	lsls	r2, r2, #1
 80035fc:	18ba      	adds	r2, r7, r2
 80035fe:	6013      	str	r3, [r2, #0]

    if(VerifyState(*statePtr) && VerifyState(*lastStatePtr))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	0018      	movs	r0, r3
 8003606:	f001 f997 	bl	8004938 <VerifyState>
 800360a:	1e03      	subs	r3, r0, #0
 800360c:	d052      	beq.n	80036b4 <LoxFill+0xe8>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	0018      	movs	r0, r3
 8003614:	f001 f990 	bl	8004938 <VerifyState>
 8003618:	1e03      	subs	r3, r0, #0
 800361a:	d04b      	beq.n	80036b4 <LoxFill+0xe8>
    {
    	if((*statePtr & LOX_FILL) == LOX_FILL){
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	001a      	movs	r2, r3
 8003622:	2301      	movs	r3, #1
 8003624:	4013      	ands	r3, r2
 8003626:	d033      	beq.n	8003690 <LoxFill+0xc4>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 1| 1 | 0 | 0 | 1 | 1 | 1 | 10
    		valve_target |= ((uint16_t)PV2	\
 8003628:	2486      	movs	r4, #134	; 0x86
 800362a:	0064      	lsls	r4, r4, #1
 800362c:	193b      	adds	r3, r7, r4
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	22f3      	movs	r2, #243	; 0xf3
 8003632:	0052      	lsls	r2, r2, #1
 8003634:	4313      	orrs	r3, r2
 8003636:	193a      	adds	r2, r7, r4
 8003638:	6013      	str	r3, [r2, #0]
						 |(uint16_t)IV1		\
						 |(uint16_t)IV2		\
						 |(uint16_t)MV1		\
						 |(uint16_t)MV2);

    		valve_configuration = StateConfiguration();
 800363a:	f001 f9a1 	bl	8004980 <StateConfiguration>
 800363e:	0003      	movs	r3, r0
 8003640:	2188      	movs	r1, #136	; 0x88
 8003642:	0049      	lsls	r1, r1, #1
 8003644:	187a      	adds	r2, r7, r1
 8003646:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		lastStatePtr = statePtr;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	603b      	str	r3, [r7, #0]
    		*statePtr =LOX_FILL;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	701a      	strb	r2, [r3, #0]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8003652:	187b      	adds	r3, r7, r1
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	193b      	adds	r3, r7, r4
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	425a      	negs	r2, r3
 800365e:	4153      	adcs	r3, r2
 8003660:	b2db      	uxtb	r3, r3
 8003662:	228a      	movs	r2, #138	; 0x8a
 8003664:	0052      	lsls	r2, r2, #1
 8003666:	18b8      	adds	r0, r7, r2
 8003668:	6003      	str	r3, [r0, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 800366a:	18bb      	adds	r3, r7, r2
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	187b      	adds	r3, r7, r1
 8003670:	6819      	ldr	r1, [r3, #0]
 8003672:	2484      	movs	r4, #132	; 0x84
 8003674:	0064      	lsls	r4, r4, #1
 8003676:	193b      	adds	r3, r7, r4
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	0018      	movs	r0, r3
 800367c:	f000 f9f4 	bl	8003a68 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8003680:	193b      	adds	r3, r7, r4
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <LoxFill+0x11c>)
 8003686:	0011      	movs	r1, r2
 8003688:	0018      	movs	r0, r3
 800368a:	f001 fac5 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & LOX_FILL) == LOX_FILL){
 800368e:	e023      	b.n	80036d8 <LoxFill+0x10c>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, LOX_FILL, *statePtr);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	781a      	ldrb	r2, [r3, #0]
 8003694:	2484      	movs	r4, #132	; 0x84
 8003696:	0064      	lsls	r4, r4, #1
 8003698:	193b      	adds	r3, r7, r4
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2101      	movs	r1, #1
 800369e:	0018      	movs	r0, r3
 80036a0:	f000 f8d4 	bl	800384c <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 80036a4:	193b      	adds	r3, r7, r4
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4b0f      	ldr	r3, [pc, #60]	; (80036e8 <LoxFill+0x11c>)
 80036aa:	0011      	movs	r1, r2
 80036ac:	0018      	movs	r0, r3
 80036ae:	f001 fab3 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & LOX_FILL) == LOX_FILL){
 80036b2:	e011      	b.n	80036d8 <LoxFill+0x10c>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, *statePtr, *lastStatePtr);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	7819      	ldrb	r1, [r3, #0]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	781a      	ldrb	r2, [r3, #0]
 80036bc:	2484      	movs	r4, #132	; 0x84
 80036be:	0064      	lsls	r4, r4, #1
 80036c0:	193b      	adds	r3, r7, r4
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	0018      	movs	r0, r3
 80036c6:	f000 f955 	bl	8003974 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 80036ca:	193b      	adds	r3, r7, r4
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <LoxFill+0x11c>)
 80036d0:	0011      	movs	r1, r2
 80036d2:	0018      	movs	r0, r3
 80036d4:	f001 faa0 	bl	8004c18 <UART_SendMessage>
    }
	return success;
 80036d8:	238a      	movs	r3, #138	; 0x8a
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	681b      	ldr	r3, [r3, #0]
}
 80036e0:	0018      	movs	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b047      	add	sp, #284	; 0x11c
 80036e6:	bd90      	pop	{r4, r7, pc}
 80036e8:	2000009c 	.word	0x2000009c

080036ec <LoxIntro>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "lox_intro.h"

uint32_t LoxIntro(enum StateName *statePtr, enum StateName *lastStatePtr)
{
 80036ec:	b590      	push	{r4, r7, lr}
 80036ee:	b0c7      	sub	sp, #284	; 0x11c
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
	uint32_t success = FALSE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	228a      	movs	r2, #138	; 0x8a
 80036fa:	0052      	lsls	r2, r2, #1
 80036fc:	18ba      	adds	r2, r7, r2
 80036fe:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	2288      	movs	r2, #136	; 0x88
 8003704:	0052      	lsls	r2, r2, #1
 8003706:	18ba      	adds	r2, r7, r2
 8003708:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	2286      	movs	r2, #134	; 0x86
 800370e:	0052      	lsls	r2, r2, #1
 8003710:	18ba      	adds	r2, r7, r2
 8003712:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8003714:	2308      	movs	r3, #8
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	2284      	movs	r2, #132	; 0x84
 800371a:	0052      	lsls	r2, r2, #1
 800371c:	18ba      	adds	r2, r7, r2
 800371e:	6013      	str	r3, [r2, #0]

    if(VerifyState(*statePtr) && VerifyState(*lastStatePtr))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	0018      	movs	r0, r3
 8003726:	f001 f907 	bl	8004938 <VerifyState>
 800372a:	1e03      	subs	r3, r0, #0
 800372c:	d053      	beq.n	80037d6 <LoxIntro+0xea>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	0018      	movs	r0, r3
 8003734:	f001 f900 	bl	8004938 <VerifyState>
 8003738:	1e03      	subs	r3, r0, #0
 800373a:	d04c      	beq.n	80037d6 <LoxIntro+0xea>
    {
    	if((*statePtr & LOX_INTRO) == LOX_INTRO){
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	001a      	movs	r2, r3
 8003742:	2306      	movs	r3, #6
 8003744:	4013      	ands	r3, r2
 8003746:	2b06      	cmp	r3, #6
 8003748:	d133      	bne.n	80037b2 <LoxIntro+0xc6>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 1|  1|  0|  0|  1|  1|  1| 10
    		// Set Valve States
    		valve_target |= ((uint16_t)PV2 	\
 800374a:	2486      	movs	r4, #134	; 0x86
 800374c:	0064      	lsls	r4, r4, #1
 800374e:	193b      	adds	r3, r7, r4
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	22f3      	movs	r2, #243	; 0xf3
 8003754:	0052      	lsls	r2, r2, #1
 8003756:	4313      	orrs	r3, r2
 8003758:	193a      	adds	r2, r7, r4
 800375a:	6013      	str	r3, [r2, #0]
						 |(uint16_t)IV1 	\
						 |(uint16_t)IV2 	\
    					 |(uint16_t)MV1 	\
						 |(uint16_t)MV2);
    		// Timestamp and Log
    		valve_configuration = StateConfiguration();
 800375c:	f001 f910 	bl	8004980 <StateConfiguration>
 8003760:	0003      	movs	r3, r0
 8003762:	2188      	movs	r1, #136	; 0x88
 8003764:	0049      	lsls	r1, r1, #1
 8003766:	187a      	adds	r2, r7, r1
 8003768:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		lastStatePtr = statePtr;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
    		*statePtr =LOX_INTRO;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2206      	movs	r2, #6
 8003772:	701a      	strb	r2, [r3, #0]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8003774:	187b      	adds	r3, r7, r1
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	193b      	adds	r3, r7, r4
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	425a      	negs	r2, r3
 8003780:	4153      	adcs	r3, r2
 8003782:	b2db      	uxtb	r3, r3
 8003784:	228a      	movs	r2, #138	; 0x8a
 8003786:	0052      	lsls	r2, r2, #1
 8003788:	18b8      	adds	r0, r7, r2
 800378a:	6003      	str	r3, [r0, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 800378c:	18bb      	adds	r3, r7, r2
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	187b      	adds	r3, r7, r1
 8003792:	6819      	ldr	r1, [r3, #0]
 8003794:	2484      	movs	r4, #132	; 0x84
 8003796:	0064      	lsls	r4, r4, #1
 8003798:	193b      	adds	r3, r7, r4
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	0018      	movs	r0, r3
 800379e:	f000 f963 	bl	8003a68 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 80037a2:	193b      	adds	r3, r7, r4
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	4b19      	ldr	r3, [pc, #100]	; (800380c <LoxIntro+0x120>)
 80037a8:	0011      	movs	r1, r2
 80037aa:	0018      	movs	r0, r3
 80037ac:	f001 fa34 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & LOX_INTRO) == LOX_INTRO){
 80037b0:	e023      	b.n	80037fa <LoxIntro+0x10e>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, LOX_INTRO, *statePtr);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	781a      	ldrb	r2, [r3, #0]
 80037b6:	2484      	movs	r4, #132	; 0x84
 80037b8:	0064      	lsls	r4, r4, #1
 80037ba:	193b      	adds	r3, r7, r4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2106      	movs	r1, #6
 80037c0:	0018      	movs	r0, r3
 80037c2:	f000 f843 	bl	800384c <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1,msgPtr);
 80037c6:	193b      	adds	r3, r7, r4
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4b10      	ldr	r3, [pc, #64]	; (800380c <LoxIntro+0x120>)
 80037cc:	0011      	movs	r1, r2
 80037ce:	0018      	movs	r0, r3
 80037d0:	f001 fa22 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & LOX_INTRO) == LOX_INTRO){
 80037d4:	e011      	b.n	80037fa <LoxIntro+0x10e>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, *statePtr, *lastStatePtr);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	7819      	ldrb	r1, [r3, #0]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	781a      	ldrb	r2, [r3, #0]
 80037de:	2484      	movs	r4, #132	; 0x84
 80037e0:	0064      	lsls	r4, r4, #1
 80037e2:	193b      	adds	r3, r7, r4
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f000 f8c4 	bl	8003974 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 80037ec:	193b      	adds	r3, r7, r4
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <LoxIntro+0x120>)
 80037f2:	0011      	movs	r1, r2
 80037f4:	0018      	movs	r0, r3
 80037f6:	f001 fa0f 	bl	8004c18 <UART_SendMessage>
    }
	return success;
 80037fa:	238a      	movs	r3, #138	; 0x8a
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	681b      	ldr	r3, [r3, #0]
}
 8003802:	0018      	movs	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	b047      	add	sp, #284	; 0x11c
 8003808:	bd90      	pop	{r4, r7, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	2000009c 	.word	0x2000009c

08003810 <main>:
#include "states_def.h"
#include "init.h"


int main(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b0c2      	sub	sp, #264	; 0x108
 8003814:	af00      	add	r7, sp, #0
  uint8_t serialRxBuffer[PRINT_BUFFER_SIZE];
  uint32_t isSafetyGreen = FALSE;
 8003816:	2300      	movs	r3, #0
 8003818:	1d7a      	adds	r2, r7, #5
 800381a:	32ff      	adds	r2, #255	; 0xff
 800381c:	6013      	str	r3, [r2, #0]
  uint32_t isProgramRunning = TRUE;
 800381e:	2301      	movs	r3, #1
 8003820:	1c7a      	adds	r2, r7, #1
 8003822:	32ff      	adds	r2, #255	; 0xff
 8003824:	6013      	str	r3, [r2, #0]
  HAL_Init();
 8003826:	f7fc fd01 	bl	800022c <HAL_Init>

  SystemClock_Config();
 800382a:	f7ff fc97 	bl	800315c <SystemClock_Config>
  //MX_WWDG_Init();
  MX_GPIO_Init();
 800382e:	f7ff fd9b 	bl	8003368 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003832:	f7ff fd07 	bl	8003244 <MX_ADC1_Init>
  //HAL_UART_Receive_IT(&hlpuart1,(uint8_t *)serialRxBuffer, 9);
  //HAL_UART_Transmit_IT(&hlpuart1,(uint8_t *)serialRxBuffer,9);

  while(1)
  {
	  StateMachine(isProgramRunning,SAFETY, isSafetyGreen);
 8003836:	1d7b      	adds	r3, r7, #5
 8003838:	33ff      	adds	r3, #255	; 0xff
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	1c7b      	adds	r3, r7, #1
 800383e:	33ff      	adds	r3, #255	; 0xff
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2113      	movs	r1, #19
 8003844:	0018      	movs	r0, r3
 8003846:	f000 fd5b 	bl	8004300 <StateMachine>
 800384a:	e7f4      	b.n	8003836 <main+0x26>

0800384c <Get_State_Disagree_Error_Msg>:
// Encode these messages in hex strings
// Add Parity/Checksum

void Get_State_Disagree_Error_Msg(char *errorMessage, enum StateName expectedState, \
			enum StateName passedState)
{
 800384c:	b5b0      	push	{r4, r5, r7, lr}
 800384e:	b0ca      	sub	sp, #296	; 0x128
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	0008      	movs	r0, r1
 8003856:	0011      	movs	r1, r2
 8003858:	4b3f      	ldr	r3, [pc, #252]	; (8003958 <Get_State_Disagree_Error_Msg+0x10c>)
 800385a:	2294      	movs	r2, #148	; 0x94
 800385c:	0052      	lsls	r2, r2, #1
 800385e:	4694      	mov	ip, r2
 8003860:	44bc      	add	ip, r7
 8003862:	4463      	add	r3, ip
 8003864:	1c02      	adds	r2, r0, #0
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	4b3c      	ldr	r3, [pc, #240]	; (800395c <Get_State_Disagree_Error_Msg+0x110>)
 800386a:	2294      	movs	r2, #148	; 0x94
 800386c:	0052      	lsls	r2, r2, #1
 800386e:	4694      	mov	ip, r2
 8003870:	44bc      	add	ip, r7
 8003872:	4463      	add	r3, ip
 8003874:	1c0a      	adds	r2, r1, #0
 8003876:	701a      	strb	r2, [r3, #0]
	char state_disagree[PRINT_BUFFER_SIZE] = "ERROR: Expected State, Passed State Disagree. ";
 8003878:	4b39      	ldr	r3, [pc, #228]	; (8003960 <Get_State_Disagree_Error_Msg+0x114>)
 800387a:	2294      	movs	r2, #148	; 0x94
 800387c:	0052      	lsls	r2, r2, #1
 800387e:	18ba      	adds	r2, r7, r2
 8003880:	18d1      	adds	r1, r2, r3
 8003882:	4a38      	ldr	r2, [pc, #224]	; (8003964 <Get_State_Disagree_Error_Msg+0x118>)
 8003884:	000b      	movs	r3, r1
 8003886:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003888:	c331      	stmia	r3!, {r0, r4, r5}
 800388a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800388c:	c331      	stmia	r3!, {r0, r4, r5}
 800388e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003890:	c331      	stmia	r3!, {r0, r4, r5}
 8003892:	ca11      	ldmia	r2!, {r0, r4}
 8003894:	c311      	stmia	r3!, {r0, r4}
 8003896:	8810      	ldrh	r0, [r2, #0]
 8003898:	8018      	strh	r0, [r3, #0]
 800389a:	7892      	ldrb	r2, [r2, #2]
 800389c:	709a      	strb	r2, [r3, #2]
 800389e:	232f      	movs	r3, #47	; 0x2f
 80038a0:	18cb      	adds	r3, r1, r3
 80038a2:	22d1      	movs	r2, #209	; 0xd1
 80038a4:	2100      	movs	r1, #0
 80038a6:	0018      	movs	r0, r3
 80038a8:	f001 facd 	bl	8004e46 <memset>
	char temp[32];
	strcat(state_disagree, "Expected: ");
 80038ac:	2428      	movs	r4, #40	; 0x28
 80038ae:	193b      	adds	r3, r7, r4
 80038b0:	0018      	movs	r0, r3
 80038b2:	f7fc fc27 	bl	8000104 <strlen>
 80038b6:	0003      	movs	r3, r0
 80038b8:	001a      	movs	r2, r3
 80038ba:	193b      	adds	r3, r7, r4
 80038bc:	189a      	adds	r2, r3, r2
 80038be:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <Get_State_Disagree_Error_Msg+0x11c>)
 80038c0:	0010      	movs	r0, r2
 80038c2:	0019      	movs	r1, r3
 80038c4:	230b      	movs	r3, #11
 80038c6:	001a      	movs	r2, r3
 80038c8:	f001 fab4 	bl	8004e34 <memcpy>
	sprintf(temp, "%d", expectedState);
 80038cc:	4b22      	ldr	r3, [pc, #136]	; (8003958 <Get_State_Disagree_Error_Msg+0x10c>)
 80038ce:	2294      	movs	r2, #148	; 0x94
 80038d0:	0052      	lsls	r2, r2, #1
 80038d2:	4694      	mov	ip, r2
 80038d4:	44bc      	add	ip, r7
 80038d6:	4463      	add	r3, ip
 80038d8:	781a      	ldrb	r2, [r3, #0]
 80038da:	4924      	ldr	r1, [pc, #144]	; (800396c <Get_State_Disagree_Error_Msg+0x120>)
 80038dc:	2508      	movs	r5, #8
 80038de:	197b      	adds	r3, r7, r5
 80038e0:	0018      	movs	r0, r3
 80038e2:	f001 fab9 	bl	8004e58 <siprintf>
	strcat(state_disagree, temp);
 80038e6:	197a      	adds	r2, r7, r5
 80038e8:	193b      	adds	r3, r7, r4
 80038ea:	0011      	movs	r1, r2
 80038ec:	0018      	movs	r0, r3
 80038ee:	f001 fad3 	bl	8004e98 <strcat>
	strcat(state_disagree,"Passed: ");
 80038f2:	193b      	adds	r3, r7, r4
 80038f4:	0018      	movs	r0, r3
 80038f6:	f7fc fc05 	bl	8000104 <strlen>
 80038fa:	0003      	movs	r3, r0
 80038fc:	001a      	movs	r2, r3
 80038fe:	193b      	adds	r3, r7, r4
 8003900:	189a      	adds	r2, r3, r2
 8003902:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <Get_State_Disagree_Error_Msg+0x124>)
 8003904:	0010      	movs	r0, r2
 8003906:	0019      	movs	r1, r3
 8003908:	2309      	movs	r3, #9
 800390a:	001a      	movs	r2, r3
 800390c:	f001 fa92 	bl	8004e34 <memcpy>
	sprintf(temp, "%d", passedState);
 8003910:	4b12      	ldr	r3, [pc, #72]	; (800395c <Get_State_Disagree_Error_Msg+0x110>)
 8003912:	2294      	movs	r2, #148	; 0x94
 8003914:	0052      	lsls	r2, r2, #1
 8003916:	4694      	mov	ip, r2
 8003918:	44bc      	add	ip, r7
 800391a:	4463      	add	r3, ip
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	4913      	ldr	r1, [pc, #76]	; (800396c <Get_State_Disagree_Error_Msg+0x120>)
 8003920:	197b      	adds	r3, r7, r5
 8003922:	0018      	movs	r0, r3
 8003924:	f001 fa98 	bl	8004e58 <siprintf>
	strcat(state_disagree, temp);
 8003928:	197a      	adds	r2, r7, r5
 800392a:	193b      	adds	r3, r7, r4
 800392c:	0011      	movs	r1, r2
 800392e:	0018      	movs	r0, r3
 8003930:	f001 fab2 	bl	8004e98 <strcat>
	memset(errorMessage, '\0', PRINT_BUFFER_SIZE);
 8003934:	2380      	movs	r3, #128	; 0x80
 8003936:	005a      	lsls	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2100      	movs	r1, #0
 800393c:	0018      	movs	r0, r3
 800393e:	f001 fa82 	bl	8004e46 <memset>
	strcpy(errorMessage, state_disagree);
 8003942:	193a      	adds	r2, r7, r4
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	0011      	movs	r1, r2
 8003948:	0018      	movs	r0, r3
 800394a:	f001 fab3 	bl	8004eb4 <strcpy>

}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	46bd      	mov	sp, r7
 8003952:	b04a      	add	sp, #296	; 0x128
 8003954:	bdb0      	pop	{r4, r5, r7, pc}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	fffffedb 	.word	0xfffffedb
 800395c:	fffffeda 	.word	0xfffffeda
 8003960:	ffffff00 	.word	0xffffff00
 8003964:	080056b4 	.word	0x080056b4
 8003968:	08005698 	.word	0x08005698
 800396c:	080056a4 	.word	0x080056a4
 8003970:	080056a8 	.word	0x080056a8

08003974 <Get_Invalid_State_Error_Msg>:

void Get_Invalid_State_Error_Msg(char *errorMessage, enum StateName state, enum StateName lastState)
{
 8003974:	b5b0      	push	{r4, r5, r7, lr}
 8003976:	b0ca      	sub	sp, #296	; 0x128
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	0008      	movs	r0, r1
 800397e:	0011      	movs	r1, r2
 8003980:	4b33      	ldr	r3, [pc, #204]	; (8003a50 <Get_Invalid_State_Error_Msg+0xdc>)
 8003982:	2294      	movs	r2, #148	; 0x94
 8003984:	0052      	lsls	r2, r2, #1
 8003986:	4694      	mov	ip, r2
 8003988:	44bc      	add	ip, r7
 800398a:	4463      	add	r3, ip
 800398c:	1c02      	adds	r2, r0, #0
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	4b30      	ldr	r3, [pc, #192]	; (8003a54 <Get_Invalid_State_Error_Msg+0xe0>)
 8003992:	2294      	movs	r2, #148	; 0x94
 8003994:	0052      	lsls	r2, r2, #1
 8003996:	4694      	mov	ip, r2
 8003998:	44bc      	add	ip, r7
 800399a:	4463      	add	r3, ip
 800399c:	1c0a      	adds	r2, r1, #0
 800399e:	701a      	strb	r2, [r3, #0]
	char state_invalid[PRINT_BUFFER_SIZE] = "Invalid State: ";
 80039a0:	4b2d      	ldr	r3, [pc, #180]	; (8003a58 <Get_Invalid_State_Error_Msg+0xe4>)
 80039a2:	2294      	movs	r2, #148	; 0x94
 80039a4:	0052      	lsls	r2, r2, #1
 80039a6:	18ba      	adds	r2, r7, r2
 80039a8:	18d1      	adds	r1, r2, r3
 80039aa:	4a2c      	ldr	r2, [pc, #176]	; (8003a5c <Get_Invalid_State_Error_Msg+0xe8>)
 80039ac:	000b      	movs	r3, r1
 80039ae:	ca31      	ldmia	r2!, {r0, r4, r5}
 80039b0:	c331      	stmia	r3!, {r0, r4, r5}
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	000b      	movs	r3, r1
 80039b8:	3310      	adds	r3, #16
 80039ba:	22f0      	movs	r2, #240	; 0xf0
 80039bc:	2100      	movs	r1, #0
 80039be:	0018      	movs	r0, r3
 80039c0:	f001 fa41 	bl	8004e46 <memset>
	char temp[32];
	sprintf(temp, "%d",state);
 80039c4:	4b22      	ldr	r3, [pc, #136]	; (8003a50 <Get_Invalid_State_Error_Msg+0xdc>)
 80039c6:	2294      	movs	r2, #148	; 0x94
 80039c8:	0052      	lsls	r2, r2, #1
 80039ca:	4694      	mov	ip, r2
 80039cc:	44bc      	add	ip, r7
 80039ce:	4463      	add	r3, ip
 80039d0:	781a      	ldrb	r2, [r3, #0]
 80039d2:	4923      	ldr	r1, [pc, #140]	; (8003a60 <Get_Invalid_State_Error_Msg+0xec>)
 80039d4:	2508      	movs	r5, #8
 80039d6:	197b      	adds	r3, r7, r5
 80039d8:	0018      	movs	r0, r3
 80039da:	f001 fa3d 	bl	8004e58 <siprintf>
	strcat(state_invalid, temp);
 80039de:	197a      	adds	r2, r7, r5
 80039e0:	2428      	movs	r4, #40	; 0x28
 80039e2:	193b      	adds	r3, r7, r4
 80039e4:	0011      	movs	r1, r2
 80039e6:	0018      	movs	r0, r3
 80039e8:	f001 fa56 	bl	8004e98 <strcat>
	strcat(state_invalid, ", lastState: ");
 80039ec:	193b      	adds	r3, r7, r4
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7fc fb88 	bl	8000104 <strlen>
 80039f4:	0003      	movs	r3, r0
 80039f6:	001a      	movs	r2, r3
 80039f8:	193b      	adds	r3, r7, r4
 80039fa:	189a      	adds	r2, r3, r2
 80039fc:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <Get_Invalid_State_Error_Msg+0xf0>)
 80039fe:	0010      	movs	r0, r2
 8003a00:	0019      	movs	r1, r3
 8003a02:	230e      	movs	r3, #14
 8003a04:	001a      	movs	r2, r3
 8003a06:	f001 fa15 	bl	8004e34 <memcpy>
	sprintf(temp, "%d", lastState);
 8003a0a:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <Get_Invalid_State_Error_Msg+0xe0>)
 8003a0c:	2294      	movs	r2, #148	; 0x94
 8003a0e:	0052      	lsls	r2, r2, #1
 8003a10:	4694      	mov	ip, r2
 8003a12:	44bc      	add	ip, r7
 8003a14:	4463      	add	r3, ip
 8003a16:	781a      	ldrb	r2, [r3, #0]
 8003a18:	4911      	ldr	r1, [pc, #68]	; (8003a60 <Get_Invalid_State_Error_Msg+0xec>)
 8003a1a:	197b      	adds	r3, r7, r5
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f001 fa1b 	bl	8004e58 <siprintf>
	strcat(state_invalid, temp);
 8003a22:	197a      	adds	r2, r7, r5
 8003a24:	193b      	adds	r3, r7, r4
 8003a26:	0011      	movs	r1, r2
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f001 fa35 	bl	8004e98 <strcat>
	memset(errorMessage, '\0', PRINT_BUFFER_SIZE);
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	005a      	lsls	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2100      	movs	r1, #0
 8003a36:	0018      	movs	r0, r3
 8003a38:	f001 fa05 	bl	8004e46 <memset>
	strcpy(errorMessage, state_invalid);
 8003a3c:	193a      	adds	r2, r7, r4
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	0011      	movs	r1, r2
 8003a42:	0018      	movs	r0, r3
 8003a44:	f001 fa36 	bl	8004eb4 <strcpy>
}
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b04a      	add	sp, #296	; 0x128
 8003a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a50:	fffffedb 	.word	0xfffffedb
 8003a54:	fffffeda 	.word	0xfffffeda
 8003a58:	ffffff00 	.word	0xffffff00
 8003a5c:	080057c4 	.word	0x080057c4
 8003a60:	080056a4 	.word	0x080056a4
 8003a64:	080057b4 	.word	0x080057b4

08003a68 <Get_Valve_State_Status_Msg>:

void Get_Valve_State_Status_Msg(char *statusMessage, uint32_t valveConfiguration, uint32_t success)
{
 8003a68:	b5b0      	push	{r4, r5, r7, lr}
 8003a6a:	b0cc      	sub	sp, #304	; 0x130
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
	char valve_state[PRINT_BUFFER_SIZE] = "Valve Configuration: ";
 8003a74:	4b26      	ldr	r3, [pc, #152]	; (8003b10 <Get_Valve_State_Status_Msg+0xa8>)
 8003a76:	2298      	movs	r2, #152	; 0x98
 8003a78:	0052      	lsls	r2, r2, #1
 8003a7a:	18ba      	adds	r2, r7, r2
 8003a7c:	18d1      	adds	r1, r2, r3
 8003a7e:	4a25      	ldr	r2, [pc, #148]	; (8003b14 <Get_Valve_State_Status_Msg+0xac>)
 8003a80:	000b      	movs	r3, r1
 8003a82:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003a84:	c331      	stmia	r3!, {r0, r4, r5}
 8003a86:	ca11      	ldmia	r2!, {r0, r4}
 8003a88:	c311      	stmia	r3!, {r0, r4}
 8003a8a:	8812      	ldrh	r2, [r2, #0]
 8003a8c:	801a      	strh	r2, [r3, #0]
 8003a8e:	2316      	movs	r3, #22
 8003a90:	18cb      	adds	r3, r1, r3
 8003a92:	22ea      	movs	r2, #234	; 0xea
 8003a94:	2100      	movs	r1, #0
 8003a96:	0018      	movs	r0, r3
 8003a98:	f001 f9d5 	bl	8004e46 <memset>
	char temp[32];
	sprintf(temp, "%03x", (int)valveConfiguration);
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	491e      	ldr	r1, [pc, #120]	; (8003b18 <Get_Valve_State_Status_Msg+0xb0>)
 8003aa0:	2410      	movs	r4, #16
 8003aa2:	193b      	adds	r3, r7, r4
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f001 f9d7 	bl	8004e58 <siprintf>
	strcat(valve_state, temp);
 8003aaa:	193a      	adds	r2, r7, r4
 8003aac:	2430      	movs	r4, #48	; 0x30
 8003aae:	193b      	adds	r3, r7, r4
 8003ab0:	0011      	movs	r1, r2
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f001 f9f0 	bl	8004e98 <strcat>
	strcat(valve_state, ", Success: ");
 8003ab8:	193b      	adds	r3, r7, r4
 8003aba:	0018      	movs	r0, r3
 8003abc:	f7fc fb22 	bl	8000104 <strlen>
 8003ac0:	0003      	movs	r3, r0
 8003ac2:	001a      	movs	r2, r3
 8003ac4:	193b      	adds	r3, r7, r4
 8003ac6:	189a      	adds	r2, r3, r2
 8003ac8:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <Get_Valve_State_Status_Msg+0xb4>)
 8003aca:	0010      	movs	r0, r2
 8003acc:	0019      	movs	r1, r3
 8003ace:	230c      	movs	r3, #12
 8003ad0:	001a      	movs	r2, r3
 8003ad2:	f001 f9af 	bl	8004e34 <memcpy>
	strcat(valve_state, (success > 0 ? "True." : "False."));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <Get_Valve_State_Status_Msg+0x78>
 8003adc:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <Get_Valve_State_Status_Msg+0xb8>)
 8003ade:	e000      	b.n	8003ae2 <Get_Valve_State_Status_Msg+0x7a>
 8003ae0:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <Get_Valve_State_Status_Msg+0xbc>)
 8003ae2:	2430      	movs	r4, #48	; 0x30
 8003ae4:	193a      	adds	r2, r7, r4
 8003ae6:	0019      	movs	r1, r3
 8003ae8:	0010      	movs	r0, r2
 8003aea:	f001 f9d5 	bl	8004e98 <strcat>
	memset(statusMessage, '\0', PRINT_BUFFER_SIZE);
 8003aee:	2380      	movs	r3, #128	; 0x80
 8003af0:	005a      	lsls	r2, r3, #1
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2100      	movs	r1, #0
 8003af6:	0018      	movs	r0, r3
 8003af8:	f001 f9a5 	bl	8004e46 <memset>
	strcpy(statusMessage, valve_state);
 8003afc:	193a      	adds	r2, r7, r4
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	0011      	movs	r1, r2
 8003b02:	0018      	movs	r0, r3
 8003b04:	f001 f9d6 	bl	8004eb4 <strcpy>
}
 8003b08:	46c0      	nop			; (mov r8, r8)
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b04c      	add	sp, #304	; 0x130
 8003b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b10:	ffffff00 	.word	0xffffff00
 8003b14:	080058e8 	.word	0x080058e8
 8003b18:	080058c4 	.word	0x080058c4
 8003b1c:	080058cc 	.word	0x080058cc
 8003b20:	080058d8 	.word	0x080058d8
 8003b24:	080058e0 	.word	0x080058e0

08003b28 <PostFire>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "post_fire.h"

uint32_t PostFire(enum StateName *statePtr, enum StateName *lastStatePtr)
{
 8003b28:	b590      	push	{r4, r7, lr}
 8003b2a:	b0c7      	sub	sp, #284	; 0x11c
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
	uint32_t success = FALSE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	228a      	movs	r2, #138	; 0x8a
 8003b36:	0052      	lsls	r2, r2, #1
 8003b38:	18ba      	adds	r2, r7, r2
 8003b3a:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	2288      	movs	r2, #136	; 0x88
 8003b40:	0052      	lsls	r2, r2, #1
 8003b42:	18ba      	adds	r2, r7, r2
 8003b44:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	2286      	movs	r2, #134	; 0x86
 8003b4a:	0052      	lsls	r2, r2, #1
 8003b4c:	18ba      	adds	r2, r7, r2
 8003b4e:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8003b50:	2308      	movs	r3, #8
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	2284      	movs	r2, #132	; 0x84
 8003b56:	0052      	lsls	r2, r2, #1
 8003b58:	18ba      	adds	r2, r7, r2
 8003b5a:	6013      	str	r3, [r2, #0]
    if(VerifyState(*statePtr) && VerifyState(*lastStatePtr))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 fee9 	bl	8004938 <VerifyState>
 8003b66:	1e03      	subs	r3, r0, #0
 8003b68:	d052      	beq.n	8003c10 <PostFire+0xe8>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f000 fee2 	bl	8004938 <VerifyState>
 8003b74:	1e03      	subs	r3, r0, #0
 8003b76:	d04b      	beq.n	8003c10 <PostFire+0xe8>
    {
    	if((*statePtr & POST_FIRE) == POST_FIRE){
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	001a      	movs	r2, r3
 8003b7e:	230e      	movs	r3, #14
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b0e      	cmp	r3, #14
 8003b84:	d132      	bne.n	8003bec <PostFire+0xc4>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 0|  0|  1|  1|  0|  0|  0|  0

    		// Set Valve States
    		valve_target |= ((uint16_t)VV1 	\
 8003b86:	2486      	movs	r4, #134	; 0x86
 8003b88:	0064      	lsls	r4, r4, #1
 8003b8a:	193b      	adds	r3, r7, r4
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2218      	movs	r2, #24
 8003b90:	4313      	orrs	r3, r2
 8003b92:	193a      	adds	r2, r7, r4
 8003b94:	6013      	str	r3, [r2, #0]
						 |(uint16_t)VV2);
    		// Timestamp and Log
    		valve_configuration = StateConfiguration();
 8003b96:	f000 fef3 	bl	8004980 <StateConfiguration>
 8003b9a:	0003      	movs	r3, r0
 8003b9c:	2188      	movs	r1, #136	; 0x88
 8003b9e:	0049      	lsls	r1, r1, #1
 8003ba0:	187a      	adds	r2, r7, r1
 8003ba2:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		lastStatePtr = statePtr;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	603b      	str	r3, [r7, #0]
    		*statePtr =POST_FIRE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	220e      	movs	r2, #14
 8003bac:	701a      	strb	r2, [r3, #0]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8003bae:	187b      	adds	r3, r7, r1
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	193b      	adds	r3, r7, r4
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	425a      	negs	r2, r3
 8003bba:	4153      	adcs	r3, r2
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	228a      	movs	r2, #138	; 0x8a
 8003bc0:	0052      	lsls	r2, r2, #1
 8003bc2:	18b8      	adds	r0, r7, r2
 8003bc4:	6003      	str	r3, [r0, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8003bc6:	18bb      	adds	r3, r7, r2
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	187b      	adds	r3, r7, r1
 8003bcc:	6819      	ldr	r1, [r3, #0]
 8003bce:	2484      	movs	r4, #132	; 0x84
 8003bd0:	0064      	lsls	r4, r4, #1
 8003bd2:	193b      	adds	r3, r7, r4
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f7ff ff46 	bl	8003a68 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8003bdc:	193b      	adds	r3, r7, r4
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	4b18      	ldr	r3, [pc, #96]	; (8003c44 <PostFire+0x11c>)
 8003be2:	0011      	movs	r1, r2
 8003be4:	0018      	movs	r0, r3
 8003be6:	f001 f817 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & POST_FIRE) == POST_FIRE){
 8003bea:	e023      	b.n	8003c34 <PostFire+0x10c>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, POST_FIRE, *statePtr);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	781a      	ldrb	r2, [r3, #0]
 8003bf0:	2484      	movs	r4, #132	; 0x84
 8003bf2:	0064      	lsls	r4, r4, #1
 8003bf4:	193b      	adds	r3, r7, r4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	210e      	movs	r1, #14
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f7ff fe26 	bl	800384c <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1,msgPtr);
 8003c00:	193b      	adds	r3, r7, r4
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <PostFire+0x11c>)
 8003c06:	0011      	movs	r1, r2
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f001 f805 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & POST_FIRE) == POST_FIRE){
 8003c0e:	e011      	b.n	8003c34 <PostFire+0x10c>

    	}
    }else{
    	    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, *statePtr, *lastStatePtr);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	7819      	ldrb	r1, [r3, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	781a      	ldrb	r2, [r3, #0]
 8003c18:	2484      	movs	r4, #132	; 0x84
 8003c1a:	0064      	lsls	r4, r4, #1
 8003c1c:	193b      	adds	r3, r7, r4
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	0018      	movs	r0, r3
 8003c22:	f7ff fea7 	bl	8003974 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8003c26:	193b      	adds	r3, r7, r4
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <PostFire+0x11c>)
 8003c2c:	0011      	movs	r1, r2
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f000 fff2 	bl	8004c18 <UART_SendMessage>
    }
	return success;
 8003c34:	238a      	movs	r3, #138	; 0x8a
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	681b      	ldr	r3, [r3, #0]
}
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b047      	add	sp, #284	; 0x11c
 8003c42:	bd90      	pop	{r4, r7, pc}
 8003c44:	2000009c 	.word	0x2000009c

08003c48 <PreChill>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "pre_chill.h"

uint32_t PreChill(enum StateName *statePtr, enum StateName *lastStatePtr)
{
 8003c48:	b590      	push	{r4, r7, lr}
 8003c4a:	b0c7      	sub	sp, #284	; 0x11c
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
	uint32_t success = FALSE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	228a      	movs	r2, #138	; 0x8a
 8003c56:	0052      	lsls	r2, r2, #1
 8003c58:	18ba      	adds	r2, r7, r2
 8003c5a:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2288      	movs	r2, #136	; 0x88
 8003c60:	0052      	lsls	r2, r2, #1
 8003c62:	18ba      	adds	r2, r7, r2
 8003c64:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8003c66:	2300      	movs	r3, #0
 8003c68:	2286      	movs	r2, #134	; 0x86
 8003c6a:	0052      	lsls	r2, r2, #1
 8003c6c:	18ba      	adds	r2, r7, r2
 8003c6e:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8003c70:	2308      	movs	r3, #8
 8003c72:	18fb      	adds	r3, r7, r3
 8003c74:	2284      	movs	r2, #132	; 0x84
 8003c76:	0052      	lsls	r2, r2, #1
 8003c78:	18ba      	adds	r2, r7, r2
 8003c7a:	6013      	str	r3, [r2, #0]

    if(VerifyState(*statePtr) && VerifyState(*lastStatePtr))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	0018      	movs	r0, r3
 8003c82:	f000 fe59 	bl	8004938 <VerifyState>
 8003c86:	1e03      	subs	r3, r0, #0
 8003c88:	d051      	beq.n	8003d2e <PreChill+0xe6>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f000 fe52 	bl	8004938 <VerifyState>
 8003c94:	1e03      	subs	r3, r0, #0
 8003c96:	d04a      	beq.n	8003d2e <PreChill+0xe6>
    {
    	if((*statePtr & PRE_CHILL) == PRE_CHILL){
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	001a      	movs	r2, r3
 8003c9e:	2304      	movs	r3, #4
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d032      	beq.n	8003d0a <PreChill+0xc2>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 1|  1|  0|  0|  0|  0| 10|  0

    		// Set Valve States
    		valve_target |= ((uint16_t)PV2 	\
 8003ca4:	2486      	movs	r4, #134	; 0x86
 8003ca6:	0064      	lsls	r4, r4, #1
 8003ca8:	193b      	adds	r3, r7, r4
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2286      	movs	r2, #134	; 0x86
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	193a      	adds	r2, r7, r4
 8003cb2:	6013      	str	r3, [r2, #0]
    					 |(uint16_t)PV3 	\
						 |(uint16_t)MV1);
    		// Timestamp and Log
    		valve_configuration = StateConfiguration();
 8003cb4:	f000 fe64 	bl	8004980 <StateConfiguration>
 8003cb8:	0003      	movs	r3, r0
 8003cba:	2188      	movs	r1, #136	; 0x88
 8003cbc:	0049      	lsls	r1, r1, #1
 8003cbe:	187a      	adds	r2, r7, r1
 8003cc0:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		lastStatePtr = statePtr;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
    		*statePtr =PRE_CHILL;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2204      	movs	r2, #4
 8003cca:	701a      	strb	r2, [r3, #0]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8003ccc:	187b      	adds	r3, r7, r1
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	193b      	adds	r3, r7, r4
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	425a      	negs	r2, r3
 8003cd8:	4153      	adcs	r3, r2
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	228a      	movs	r2, #138	; 0x8a
 8003cde:	0052      	lsls	r2, r2, #1
 8003ce0:	18b8      	adds	r0, r7, r2
 8003ce2:	6003      	str	r3, [r0, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8003ce4:	18bb      	adds	r3, r7, r2
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	187b      	adds	r3, r7, r1
 8003cea:	6819      	ldr	r1, [r3, #0]
 8003cec:	2484      	movs	r4, #132	; 0x84
 8003cee:	0064      	lsls	r4, r4, #1
 8003cf0:	193b      	adds	r3, r7, r4
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f7ff feb7 	bl	8003a68 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8003cfa:	193b      	adds	r3, r7, r4
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <PreChill+0x11c>)
 8003d00:	0011      	movs	r1, r2
 8003d02:	0018      	movs	r0, r3
 8003d04:	f000 ff88 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & PRE_CHILL) == PRE_CHILL){
 8003d08:	e023      	b.n	8003d52 <PreChill+0x10a>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, PRE_CHILL, *statePtr);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	781a      	ldrb	r2, [r3, #0]
 8003d0e:	2484      	movs	r4, #132	; 0x84
 8003d10:	0064      	lsls	r4, r4, #1
 8003d12:	193b      	adds	r3, r7, r4
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2104      	movs	r1, #4
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f7ff fd97 	bl	800384c <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1,msgPtr);
 8003d1e:	193b      	adds	r3, r7, r4
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <PreChill+0x11c>)
 8003d24:	0011      	movs	r1, r2
 8003d26:	0018      	movs	r0, r3
 8003d28:	f000 ff76 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & PRE_CHILL) == PRE_CHILL){
 8003d2c:	e011      	b.n	8003d52 <PreChill+0x10a>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, *statePtr, *lastStatePtr);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	7819      	ldrb	r1, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781a      	ldrb	r2, [r3, #0]
 8003d36:	2484      	movs	r4, #132	; 0x84
 8003d38:	0064      	lsls	r4, r4, #1
 8003d3a:	193b      	adds	r3, r7, r4
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f7ff fe18 	bl	8003974 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8003d44:	193b      	adds	r3, r7, r4
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <PreChill+0x11c>)
 8003d4a:	0011      	movs	r1, r2
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f000 ff63 	bl	8004c18 <UART_SendMessage>
    }
	return success;
 8003d52:	238a      	movs	r3, #138	; 0x8a
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	681b      	ldr	r3, [r3, #0]
}
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b047      	add	sp, #284	; 0x11c
 8003d60:	bd90      	pop	{r4, r7, pc}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	2000009c 	.word	0x2000009c

08003d68 <Purge>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "purge.h"

uint32_t Purge(enum StateName *statePtr, enum StateName *lastStatePtr)
{
 8003d68:	b590      	push	{r4, r7, lr}
 8003d6a:	b0c7      	sub	sp, #284	; 0x11c
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
	uint32_t success = FALSE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	228a      	movs	r2, #138	; 0x8a
 8003d76:	0052      	lsls	r2, r2, #1
 8003d78:	18ba      	adds	r2, r7, r2
 8003d7a:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	2288      	movs	r2, #136	; 0x88
 8003d80:	0052      	lsls	r2, r2, #1
 8003d82:	18ba      	adds	r2, r7, r2
 8003d84:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	2286      	movs	r2, #134	; 0x86
 8003d8a:	0052      	lsls	r2, r2, #1
 8003d8c:	18ba      	adds	r2, r7, r2
 8003d8e:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8003d90:	2308      	movs	r3, #8
 8003d92:	18fb      	adds	r3, r7, r3
 8003d94:	2284      	movs	r2, #132	; 0x84
 8003d96:	0052      	lsls	r2, r2, #1
 8003d98:	18ba      	adds	r2, r7, r2
 8003d9a:	6013      	str	r3, [r2, #0]

    if(VerifyState(*statePtr) && VerifyState(*lastStatePtr))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f000 fdc9 	bl	8004938 <VerifyState>
 8003da6:	1e03      	subs	r3, r0, #0
 8003da8:	d052      	beq.n	8003e50 <Purge+0xe8>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	0018      	movs	r0, r3
 8003db0:	f000 fdc2 	bl	8004938 <VerifyState>
 8003db4:	1e03      	subs	r3, r0, #0
 8003db6:	d04b      	beq.n	8003e50 <Purge+0xe8>
    {
    	if((*statePtr & PURGE) == PURGE){
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	001a      	movs	r2, r3
 8003dbe:	230d      	movs	r3, #13
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b0d      	cmp	r3, #13
 8003dc4:	d132      	bne.n	8003e2c <Purge+0xc4>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 1| 0|  0|  1|  1|  0|  0|  0|  0
    		// Set Valve States
    		valve_target |= ((uint16_t)PV1 	\
 8003dc6:	2486      	movs	r4, #134	; 0x86
 8003dc8:	0064      	lsls	r4, r4, #1
 8003dca:	193b      	adds	r3, r7, r4
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2219      	movs	r2, #25
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	193a      	adds	r2, r7, r4
 8003dd4:	6013      	str	r3, [r2, #0]
    					 |(uint16_t)VV1 	\
						 |(uint16_t)VV2);
    		// Timestamp and Log
    		valve_configuration = StateConfiguration();
 8003dd6:	f000 fdd3 	bl	8004980 <StateConfiguration>
 8003dda:	0003      	movs	r3, r0
 8003ddc:	2188      	movs	r1, #136	; 0x88
 8003dde:	0049      	lsls	r1, r1, #1
 8003de0:	187a      	adds	r2, r7, r1
 8003de2:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		lastStatePtr = statePtr;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	603b      	str	r3, [r7, #0]
    		*statePtr =PURGE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	220d      	movs	r2, #13
 8003dec:	701a      	strb	r2, [r3, #0]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8003dee:	187b      	adds	r3, r7, r1
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	193b      	adds	r3, r7, r4
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	425a      	negs	r2, r3
 8003dfa:	4153      	adcs	r3, r2
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	228a      	movs	r2, #138	; 0x8a
 8003e00:	0052      	lsls	r2, r2, #1
 8003e02:	18b8      	adds	r0, r7, r2
 8003e04:	6003      	str	r3, [r0, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8003e06:	18bb      	adds	r3, r7, r2
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	187b      	adds	r3, r7, r1
 8003e0c:	6819      	ldr	r1, [r3, #0]
 8003e0e:	2484      	movs	r4, #132	; 0x84
 8003e10:	0064      	lsls	r4, r4, #1
 8003e12:	193b      	adds	r3, r7, r4
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	0018      	movs	r0, r3
 8003e18:	f7ff fe26 	bl	8003a68 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8003e1c:	193b      	adds	r3, r7, r4
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4b18      	ldr	r3, [pc, #96]	; (8003e84 <Purge+0x11c>)
 8003e22:	0011      	movs	r1, r2
 8003e24:	0018      	movs	r0, r3
 8003e26:	f000 fef7 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & PURGE) == PURGE){
 8003e2a:	e023      	b.n	8003e74 <Purge+0x10c>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, PURGE, *statePtr);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	781a      	ldrb	r2, [r3, #0]
 8003e30:	2484      	movs	r4, #132	; 0x84
 8003e32:	0064      	lsls	r4, r4, #1
 8003e34:	193b      	adds	r3, r7, r4
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	210d      	movs	r1, #13
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f7ff fd06 	bl	800384c <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1,msgPtr);
 8003e40:	193b      	adds	r3, r7, r4
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <Purge+0x11c>)
 8003e46:	0011      	movs	r1, r2
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f000 fee5 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & PURGE) == PURGE){
 8003e4e:	e011      	b.n	8003e74 <Purge+0x10c>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, *statePtr, *lastStatePtr);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	7819      	ldrb	r1, [r3, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	781a      	ldrb	r2, [r3, #0]
 8003e58:	2484      	movs	r4, #132	; 0x84
 8003e5a:	0064      	lsls	r4, r4, #1
 8003e5c:	193b      	adds	r3, r7, r4
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	0018      	movs	r0, r3
 8003e62:	f7ff fd87 	bl	8003974 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8003e66:	193b      	adds	r3, r7, r4
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <Purge+0x11c>)
 8003e6c:	0011      	movs	r1, r2
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f000 fed2 	bl	8004c18 <UART_SendMessage>
    }
	return success;
 8003e74:	238a      	movs	r3, #138	; 0x8a
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	18fb      	adds	r3, r7, r3
 8003e7a:	681b      	ldr	r3, [r3, #0]
}
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b047      	add	sp, #284	; 0x11c
 8003e82:	bd90      	pop	{r4, r7, pc}
 8003e84:	2000009c 	.word	0x2000009c

08003e88 <SafeApproach>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "safe_approach.h"

uint32_t SafeApproach(enum StateName *statePtr, enum StateName *lastStatePtr)
{
 8003e88:	b590      	push	{r4, r7, lr}
 8003e8a:	b0c7      	sub	sp, #284	; 0x11c
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
	uint32_t success = FALSE;
 8003e92:	2300      	movs	r3, #0
 8003e94:	228a      	movs	r2, #138	; 0x8a
 8003e96:	0052      	lsls	r2, r2, #1
 8003e98:	18ba      	adds	r2, r7, r2
 8003e9a:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	2288      	movs	r2, #136	; 0x88
 8003ea0:	0052      	lsls	r2, r2, #1
 8003ea2:	18ba      	adds	r2, r7, r2
 8003ea4:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	2286      	movs	r2, #134	; 0x86
 8003eaa:	0052      	lsls	r2, r2, #1
 8003eac:	18ba      	adds	r2, r7, r2
 8003eae:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8003eb0:	2308      	movs	r3, #8
 8003eb2:	18fb      	adds	r3, r7, r3
 8003eb4:	2284      	movs	r2, #132	; 0x84
 8003eb6:	0052      	lsls	r2, r2, #1
 8003eb8:	18ba      	adds	r2, r7, r2
 8003eba:	6013      	str	r3, [r2, #0]

    if(VerifyState(*statePtr) && VerifyState(*lastStatePtr))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f000 fd39 	bl	8004938 <VerifyState>
 8003ec6:	1e03      	subs	r3, r0, #0
 8003ec8:	d052      	beq.n	8003f70 <SafeApproach+0xe8>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f000 fd32 	bl	8004938 <VerifyState>
 8003ed4:	1e03      	subs	r3, r0, #0
 8003ed6:	d04b      	beq.n	8003f70 <SafeApproach+0xe8>
    {
    	if((*statePtr & SAFE_APPROACH) == SAFE_APPROACH){
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	001a      	movs	r2, r3
 8003ede:	230f      	movs	r3, #15
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b0f      	cmp	r3, #15
 8003ee4:	d132      	bne.n	8003f4c <SafeApproach+0xc4>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0	| 0	| 0	| 1 | 1	| 0	| 0	| 0	| 0
    		// Set Valve States
    		valve_target |= ((uint16_t)VV1 	\
 8003ee6:	2486      	movs	r4, #134	; 0x86
 8003ee8:	0064      	lsls	r4, r4, #1
 8003eea:	193b      	adds	r3, r7, r4
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2218      	movs	r2, #24
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	193a      	adds	r2, r7, r4
 8003ef4:	6013      	str	r3, [r2, #0]
						 |(uint16_t)VV2);

    		// Timestamp and Log
    		valve_configuration = StateConfiguration();
 8003ef6:	f000 fd43 	bl	8004980 <StateConfiguration>
 8003efa:	0003      	movs	r3, r0
 8003efc:	2188      	movs	r1, #136	; 0x88
 8003efe:	0049      	lsls	r1, r1, #1
 8003f00:	187a      	adds	r2, r7, r1
 8003f02:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		lastStatePtr = statePtr;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	603b      	str	r3, [r7, #0]
    		*statePtr =SAFE_APPROACH;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	220f      	movs	r2, #15
 8003f0c:	701a      	strb	r2, [r3, #0]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8003f0e:	187b      	adds	r3, r7, r1
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	193b      	adds	r3, r7, r4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	425a      	negs	r2, r3
 8003f1a:	4153      	adcs	r3, r2
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	228a      	movs	r2, #138	; 0x8a
 8003f20:	0052      	lsls	r2, r2, #1
 8003f22:	18b8      	adds	r0, r7, r2
 8003f24:	6003      	str	r3, [r0, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8003f26:	18bb      	adds	r3, r7, r2
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	187b      	adds	r3, r7, r1
 8003f2c:	6819      	ldr	r1, [r3, #0]
 8003f2e:	2484      	movs	r4, #132	; 0x84
 8003f30:	0064      	lsls	r4, r4, #1
 8003f32:	193b      	adds	r3, r7, r4
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	0018      	movs	r0, r3
 8003f38:	f7ff fd96 	bl	8003a68 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8003f3c:	193b      	adds	r3, r7, r4
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4b18      	ldr	r3, [pc, #96]	; (8003fa4 <SafeApproach+0x11c>)
 8003f42:	0011      	movs	r1, r2
 8003f44:	0018      	movs	r0, r3
 8003f46:	f000 fe67 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & SAFE_APPROACH) == SAFE_APPROACH){
 8003f4a:	e023      	b.n	8003f94 <SafeApproach+0x10c>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, SAFE_APPROACH, *statePtr);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	781a      	ldrb	r2, [r3, #0]
 8003f50:	2484      	movs	r4, #132	; 0x84
 8003f52:	0064      	lsls	r4, r4, #1
 8003f54:	193b      	adds	r3, r7, r4
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	210f      	movs	r1, #15
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f7ff fc76 	bl	800384c <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1,msgPtr);
 8003f60:	193b      	adds	r3, r7, r4
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <SafeApproach+0x11c>)
 8003f66:	0011      	movs	r1, r2
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f000 fe55 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & SAFE_APPROACH) == SAFE_APPROACH){
 8003f6e:	e011      	b.n	8003f94 <SafeApproach+0x10c>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, *statePtr, *lastStatePtr);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	7819      	ldrb	r1, [r3, #0]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	781a      	ldrb	r2, [r3, #0]
 8003f78:	2484      	movs	r4, #132	; 0x84
 8003f7a:	0064      	lsls	r4, r4, #1
 8003f7c:	193b      	adds	r3, r7, r4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	0018      	movs	r0, r3
 8003f82:	f7ff fcf7 	bl	8003974 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8003f86:	193b      	adds	r3, r7, r4
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <SafeApproach+0x11c>)
 8003f8c:	0011      	movs	r1, r2
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f000 fe42 	bl	8004c18 <UART_SendMessage>
    }
	return success;
 8003f94:	238a      	movs	r3, #138	; 0x8a
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	18fb      	adds	r3, r7, r3
 8003f9a:	681b      	ldr	r3, [r3, #0]
}
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b047      	add	sp, #284	; 0x11c
 8003fa2:	bd90      	pop	{r4, r7, pc}
 8003fa4:	2000009c 	.word	0x2000009c

08003fa8 <Safety>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "safety.h"

uint32_t Safety(enum StateName *statePtr, enum StateName *lastStatePtr, uint32_t isSafetyGreen)
{
 8003fa8:	b590      	push	{r4, r7, lr}
 8003faa:	b0c9      	sub	sp, #292	; 0x124
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
	uint32_t success = FALSE;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	228e      	movs	r2, #142	; 0x8e
 8003fb8:	0052      	lsls	r2, r2, #1
 8003fba:	18ba      	adds	r2, r7, r2
 8003fbc:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	228c      	movs	r2, #140	; 0x8c
 8003fc2:	0052      	lsls	r2, r2, #1
 8003fc4:	18ba      	adds	r2, r7, r2
 8003fc6:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	228a      	movs	r2, #138	; 0x8a
 8003fcc:	0052      	lsls	r2, r2, #1
 8003fce:	18ba      	adds	r2, r7, r2
 8003fd0:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8003fd2:	2310      	movs	r3, #16
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	2288      	movs	r2, #136	; 0x88
 8003fd8:	0052      	lsls	r2, r2, #1
 8003fda:	18ba      	adds	r2, r7, r2
 8003fdc:	6013      	str	r3, [r2, #0]


    if(VerifyState(*statePtr) && VerifyState(*lastStatePtr))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	f000 fca8 	bl	8004938 <VerifyState>
 8003fe8:	1e03      	subs	r3, r0, #0
 8003fea:	d063      	beq.n	80040b4 <Safety+0x10c>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f000 fca1 	bl	8004938 <VerifyState>
 8003ff6:	1e03      	subs	r3, r0, #0
 8003ff8:	d05c      	beq.n	80040b4 <Safety+0x10c>
    {
    	if((*statePtr & SAFETY) == SAFETY){
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	001a      	movs	r2, r3
 8004000:	2313      	movs	r3, #19
 8004002:	4013      	ands	r3, r2
 8004004:	2b13      	cmp	r3, #19
 8004006:	d143      	bne.n	8004090 <Safety+0xe8>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0|  0|  0| 1|  1|  0|  0|  0|   0
    		// Set Valve States
    		valve_target |= (uint16_t)VV1|(uint16_t)VV2;
 8004008:	248a      	movs	r4, #138	; 0x8a
 800400a:	0064      	lsls	r4, r4, #1
 800400c:	193b      	adds	r3, r7, r4
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2218      	movs	r2, #24
 8004012:	4313      	orrs	r3, r2
 8004014:	193a      	adds	r2, r7, r4
 8004016:	6013      	str	r3, [r2, #0]
    		ValveStateSetter(valve_target);
 8004018:	193b      	adds	r3, r7, r4
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	0018      	movs	r0, r3
 800401e:	f000 fd33 	bl	8004a88 <ValveStateSetter>
    		valve_configuration = StateConfiguration();
 8004022:	f000 fcad 	bl	8004980 <StateConfiguration>
 8004026:	0003      	movs	r3, r0
 8004028:	218c      	movs	r1, #140	; 0x8c
 800402a:	0049      	lsls	r1, r1, #1
 800402c:	187a      	adds	r2, r7, r1
 800402e:	6013      	str	r3, [r2, #0]
    		lastStatePtr = statePtr;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	60bb      	str	r3, [r7, #8]
    		*statePtr =SAFETY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2213      	movs	r2, #19
 8004038:	701a      	strb	r2, [r3, #0]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 800403a:	187b      	adds	r3, r7, r1
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	193b      	adds	r3, r7, r4
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	425a      	negs	r2, r3
 8004046:	4153      	adcs	r3, r2
 8004048:	b2db      	uxtb	r3, r3
 800404a:	228e      	movs	r2, #142	; 0x8e
 800404c:	0052      	lsls	r2, r2, #1
 800404e:	18b8      	adds	r0, r7, r2
 8004050:	6003      	str	r3, [r0, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8004052:	18bb      	adds	r3, r7, r2
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	187b      	adds	r3, r7, r1
 8004058:	6819      	ldr	r1, [r3, #0]
 800405a:	2488      	movs	r4, #136	; 0x88
 800405c:	0064      	lsls	r4, r4, #1
 800405e:	193b      	adds	r3, r7, r4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	0018      	movs	r0, r3
 8004064:	f7ff fd00 	bl	8003a68 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8004068:	193b      	adds	r3, r7, r4
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	4b1f      	ldr	r3, [pc, #124]	; (80040ec <Safety+0x144>)
 800406e:	0011      	movs	r1, r2
 8004070:	0018      	movs	r0, r3
 8004072:	f000 fdd1 	bl	8004c18 <UART_SendMessage>
    		if(isSafetyGreen && success)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d02e      	beq.n	80040da <Safety+0x132>
 800407c:	238e      	movs	r3, #142	; 0x8e
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	18fb      	adds	r3, r7, r3
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d028      	beq.n	80040da <Safety+0x132>
    		{
    			// Check for Safety Green
    			*statePtr =SETUP_OPS;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	701a      	strb	r2, [r3, #0]
    	if((*statePtr & SAFETY) == SAFETY){
 800408e:	e024      	b.n	80040da <Safety+0x132>
    		}
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, SAFETY, *statePtr);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	781a      	ldrb	r2, [r3, #0]
 8004094:	2488      	movs	r4, #136	; 0x88
 8004096:	0064      	lsls	r4, r4, #1
 8004098:	193b      	adds	r3, r7, r4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2113      	movs	r1, #19
 800409e:	0018      	movs	r0, r3
 80040a0:	f7ff fbd4 	bl	800384c <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 80040a4:	193b      	adds	r3, r7, r4
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	4b10      	ldr	r3, [pc, #64]	; (80040ec <Safety+0x144>)
 80040aa:	0011      	movs	r1, r2
 80040ac:	0018      	movs	r0, r3
 80040ae:	f000 fdb3 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & SAFETY) == SAFETY){
 80040b2:	e012      	b.n	80040da <Safety+0x132>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, *statePtr, *lastStatePtr);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	7819      	ldrb	r1, [r3, #0]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	781a      	ldrb	r2, [r3, #0]
 80040bc:	2488      	movs	r4, #136	; 0x88
 80040be:	0064      	lsls	r4, r4, #1
 80040c0:	193b      	adds	r3, r7, r4
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	0018      	movs	r0, r3
 80040c6:	f7ff fc55 	bl	8003974 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 80040ca:	193b      	adds	r3, r7, r4
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4b07      	ldr	r3, [pc, #28]	; (80040ec <Safety+0x144>)
 80040d0:	0011      	movs	r1, r2
 80040d2:	0018      	movs	r0, r3
 80040d4:	f000 fda0 	bl	8004c18 <UART_SendMessage>
 80040d8:	e000      	b.n	80040dc <Safety+0x134>
    	if((*statePtr & SAFETY) == SAFETY){
 80040da:	46c0      	nop			; (mov r8, r8)
    }
	return success;
 80040dc:	238e      	movs	r3, #142	; 0x8e
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	681b      	ldr	r3, [r3, #0]
}
 80040e4:	0018      	movs	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b049      	add	sp, #292	; 0x124
 80040ea:	bd90      	pop	{r4, r7, pc}
 80040ec:	2000009c 	.word	0x2000009c

080040f0 <SetupOps>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "setup_ops.h"

uint32_t SetupOps(enum StateName *statePtr, enum StateName *lastStatePtr)
{
 80040f0:	b590      	push	{r4, r7, lr}
 80040f2:	b0c7      	sub	sp, #284	; 0x11c
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
	uint32_t success = FALSE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	228a      	movs	r2, #138	; 0x8a
 80040fe:	0052      	lsls	r2, r2, #1
 8004100:	18ba      	adds	r2, r7, r2
 8004102:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	2288      	movs	r2, #136	; 0x88
 8004108:	0052      	lsls	r2, r2, #1
 800410a:	18ba      	adds	r2, r7, r2
 800410c:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 800410e:	2300      	movs	r3, #0
 8004110:	2286      	movs	r2, #134	; 0x86
 8004112:	0052      	lsls	r2, r2, #1
 8004114:	18ba      	adds	r2, r7, r2
 8004116:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8004118:	2308      	movs	r3, #8
 800411a:	18fb      	adds	r3, r7, r3
 800411c:	2284      	movs	r2, #132	; 0x84
 800411e:	0052      	lsls	r2, r2, #1
 8004120:	18ba      	adds	r2, r7, r2
 8004122:	6013      	str	r3, [r2, #0]

    if(VerifyState(*statePtr) && VerifyState(*lastStatePtr))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	0018      	movs	r0, r3
 800412a:	f000 fc05 	bl	8004938 <VerifyState>
 800412e:	1e03      	subs	r3, r0, #0
 8004130:	d039      	beq.n	80041a6 <SetupOps+0xb6>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	0018      	movs	r0, r3
 8004138:	f000 fbfe 	bl	8004938 <VerifyState>
 800413c:	1e03      	subs	r3, r0, #0
 800413e:	d032      	beq.n	80041a6 <SetupOps+0xb6>
    	if((*statePtr & SETUP_OPS) == SETUP_OPS){
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// 11 |11 |11 |11 |11 |11 |11 |11 |11

    		// Set Valve States
    		valve_target |= ((uint16_t)VV1 	\
 8004140:	2486      	movs	r4, #134	; 0x86
 8004142:	0064      	lsls	r4, r4, #1
 8004144:	193b      	adds	r3, r7, r4
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2218      	movs	r2, #24
 800414a:	4313      	orrs	r3, r2
 800414c:	193a      	adds	r2, r7, r4
 800414e:	6013      	str	r3, [r2, #0]
						 |(uint16_t)VV2);
    		// Timestamp and Log
    		valve_configuration = StateConfiguration();
 8004150:	f000 fc16 	bl	8004980 <StateConfiguration>
 8004154:	0003      	movs	r3, r0
 8004156:	2188      	movs	r1, #136	; 0x88
 8004158:	0049      	lsls	r1, r1, #1
 800415a:	187a      	adds	r2, r7, r1
 800415c:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		lastStatePtr = statePtr;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
    		*statePtr =SETUP_OPS;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	701a      	strb	r2, [r3, #0]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8004168:	187b      	adds	r3, r7, r1
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	193b      	adds	r3, r7, r4
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	425a      	negs	r2, r3
 8004174:	4153      	adcs	r3, r2
 8004176:	b2db      	uxtb	r3, r3
 8004178:	228a      	movs	r2, #138	; 0x8a
 800417a:	0052      	lsls	r2, r2, #1
 800417c:	18b8      	adds	r0, r7, r2
 800417e:	6003      	str	r3, [r0, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 8004180:	18bb      	adds	r3, r7, r2
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	187b      	adds	r3, r7, r1
 8004186:	6819      	ldr	r1, [r3, #0]
 8004188:	2484      	movs	r4, #132	; 0x84
 800418a:	0064      	lsls	r4, r4, #1
 800418c:	193b      	adds	r3, r7, r4
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	0018      	movs	r0, r3
 8004192:	f7ff fc69 	bl	8003a68 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8004196:	193b      	adds	r3, r7, r4
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	4b10      	ldr	r3, [pc, #64]	; (80041dc <SetupOps+0xec>)
 800419c:	0011      	movs	r1, r2
 800419e:	0018      	movs	r0, r3
 80041a0:	f000 fd3a 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & SETUP_OPS) == SETUP_OPS){
 80041a4:	e011      	b.n	80041ca <SetupOps+0xda>
    		UART_SendMessage(&hlpuart1,msgPtr);

    	}
    }else{
    	    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, *statePtr, *lastStatePtr);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	7819      	ldrb	r1, [r3, #0]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	2484      	movs	r4, #132	; 0x84
 80041b0:	0064      	lsls	r4, r4, #1
 80041b2:	193b      	adds	r3, r7, r4
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	0018      	movs	r0, r3
 80041b8:	f7ff fbdc 	bl	8003974 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 80041bc:	193b      	adds	r3, r7, r4
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	4b06      	ldr	r3, [pc, #24]	; (80041dc <SetupOps+0xec>)
 80041c2:	0011      	movs	r1, r2
 80041c4:	0018      	movs	r0, r3
 80041c6:	f000 fd27 	bl	8004c18 <UART_SendMessage>
    }
	return success;
 80041ca:	238a      	movs	r3, #138	; 0x8a
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	681b      	ldr	r3, [r3, #0]
}
 80041d2:	0018      	movs	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b047      	add	sp, #284	; 0x11c
 80041d8:	bd90      	pop	{r4, r7, pc}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	2000009c 	.word	0x2000009c

080041e0 <SiteClear>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "site_clear.h"

uint32_t SiteClear(enum StateName *statePtr, enum StateName *lastStatePtr)
{
 80041e0:	b590      	push	{r4, r7, lr}
 80041e2:	b0c7      	sub	sp, #284	; 0x11c
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
	uint32_t success = FALSE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	228a      	movs	r2, #138	; 0x8a
 80041ee:	0052      	lsls	r2, r2, #1
 80041f0:	18ba      	adds	r2, r7, r2
 80041f2:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	2288      	movs	r2, #136	; 0x88
 80041f8:	0052      	lsls	r2, r2, #1
 80041fa:	18ba      	adds	r2, r7, r2
 80041fc:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	2286      	movs	r2, #134	; 0x86
 8004202:	0052      	lsls	r2, r2, #1
 8004204:	18ba      	adds	r2, r7, r2
 8004206:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8004208:	2308      	movs	r3, #8
 800420a:	18fb      	adds	r3, r7, r3
 800420c:	2284      	movs	r2, #132	; 0x84
 800420e:	0052      	lsls	r2, r2, #1
 8004210:	18ba      	adds	r2, r7, r2
 8004212:	6013      	str	r3, [r2, #0]

    if(VerifyState(*statePtr) && VerifyState(*lastStatePtr))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	0018      	movs	r0, r3
 800421a:	f000 fb8d 	bl	8004938 <VerifyState>
 800421e:	1e03      	subs	r3, r0, #0
 8004220:	d051      	beq.n	80042c6 <SiteClear+0xe6>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	0018      	movs	r0, r3
 8004228:	f000 fb86 	bl	8004938 <VerifyState>
 800422c:	1e03      	subs	r3, r0, #0
 800422e:	d04a      	beq.n	80042c6 <SiteClear+0xe6>
    {
    	if((*statePtr & SITE_CLEAR_AND_START_UP) == SITE_CLEAR_AND_START_UP){
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	001a      	movs	r2, r3
 8004236:	2302      	movs	r3, #2
 8004238:	4013      	ands	r3, r2
 800423a:	d032      	beq.n	80042a2 <SiteClear+0xc2>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 0|  0|  1|  1|  0|  0|  0|  0
    		// Set Valve States
    		valve_target |= ((uint16_t)VV1 	\
 800423c:	2486      	movs	r4, #134	; 0x86
 800423e:	0064      	lsls	r4, r4, #1
 8004240:	193b      	adds	r3, r7, r4
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2218      	movs	r2, #24
 8004246:	4313      	orrs	r3, r2
 8004248:	193a      	adds	r2, r7, r4
 800424a:	6013      	str	r3, [r2, #0]
						 |(uint16_t)VV2);
    		// Timestamp and Log
    		valve_configuration = StateConfiguration();
 800424c:	f000 fb98 	bl	8004980 <StateConfiguration>
 8004250:	0003      	movs	r3, r0
 8004252:	2188      	movs	r1, #136	; 0x88
 8004254:	0049      	lsls	r1, r1, #1
 8004256:	187a      	adds	r2, r7, r1
 8004258:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		lastStatePtr = statePtr;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
    		*statePtr =SITE_CLEAR_AND_START_UP;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2202      	movs	r2, #2
 8004262:	701a      	strb	r2, [r3, #0]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 8004264:	187b      	adds	r3, r7, r1
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	193b      	adds	r3, r7, r4
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	425a      	negs	r2, r3
 8004270:	4153      	adcs	r3, r2
 8004272:	b2db      	uxtb	r3, r3
 8004274:	228a      	movs	r2, #138	; 0x8a
 8004276:	0052      	lsls	r2, r2, #1
 8004278:	18b8      	adds	r0, r7, r2
 800427a:	6003      	str	r3, [r0, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 800427c:	18bb      	adds	r3, r7, r2
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	187b      	adds	r3, r7, r1
 8004282:	6819      	ldr	r1, [r3, #0]
 8004284:	2484      	movs	r4, #132	; 0x84
 8004286:	0064      	lsls	r4, r4, #1
 8004288:	193b      	adds	r3, r7, r4
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	0018      	movs	r0, r3
 800428e:	f7ff fbeb 	bl	8003a68 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 8004292:	193b      	adds	r3, r7, r4
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4b19      	ldr	r3, [pc, #100]	; (80042fc <SiteClear+0x11c>)
 8004298:	0011      	movs	r1, r2
 800429a:	0018      	movs	r0, r3
 800429c:	f000 fcbc 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & SITE_CLEAR_AND_START_UP) == SITE_CLEAR_AND_START_UP){
 80042a0:	e023      	b.n	80042ea <SiteClear+0x10a>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, SITE_CLEAR_AND_START_UP, *statePtr);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	781a      	ldrb	r2, [r3, #0]
 80042a6:	2484      	movs	r4, #132	; 0x84
 80042a8:	0064      	lsls	r4, r4, #1
 80042aa:	193b      	adds	r3, r7, r4
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2102      	movs	r1, #2
 80042b0:	0018      	movs	r0, r3
 80042b2:	f7ff facb 	bl	800384c <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1,msgPtr);
 80042b6:	193b      	adds	r3, r7, r4
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4b10      	ldr	r3, [pc, #64]	; (80042fc <SiteClear+0x11c>)
 80042bc:	0011      	movs	r1, r2
 80042be:	0018      	movs	r0, r3
 80042c0:	f000 fcaa 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & SITE_CLEAR_AND_START_UP) == SITE_CLEAR_AND_START_UP){
 80042c4:	e011      	b.n	80042ea <SiteClear+0x10a>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, *statePtr, *lastStatePtr);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	7819      	ldrb	r1, [r3, #0]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	781a      	ldrb	r2, [r3, #0]
 80042ce:	2484      	movs	r4, #132	; 0x84
 80042d0:	0064      	lsls	r4, r4, #1
 80042d2:	193b      	adds	r3, r7, r4
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	0018      	movs	r0, r3
 80042d8:	f7ff fb4c 	bl	8003974 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 80042dc:	193b      	adds	r3, r7, r4
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4b06      	ldr	r3, [pc, #24]	; (80042fc <SiteClear+0x11c>)
 80042e2:	0011      	movs	r1, r2
 80042e4:	0018      	movs	r0, r3
 80042e6:	f000 fc97 	bl	8004c18 <UART_SendMessage>
    }
	return success;
 80042ea:	238a      	movs	r3, #138	; 0x8a
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	18fb      	adds	r3, r7, r3
 80042f0:	681b      	ldr	r3, [r3, #0]
}
 80042f2:	0018      	movs	r0, r3
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b047      	add	sp, #284	; 0x11c
 80042f8:	bd90      	pop	{r4, r7, pc}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	2000009c 	.word	0x2000009c

08004300 <StateMachine>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)

#include "state_machine.h"

void StateMachine(uint32_t control, enum StateName Incoming, uint32_t isSafetyGreen)
{
 8004300:	b590      	push	{r4, r7, lr}
 8004302:	b0cb      	sub	sp, #300	; 0x12c
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	607a      	str	r2, [r7, #4]
 800430a:	4bca      	ldr	r3, [pc, #808]	; (8004634 <StateMachine+0x334>)
 800430c:	2294      	movs	r2, #148	; 0x94
 800430e:	0052      	lsls	r2, r2, #1
 8004310:	4694      	mov	ip, r2
 8004312:	44bc      	add	ip, r7
 8004314:	4463      	add	r3, ip
 8004316:	1c0a      	adds	r2, r1, #0
 8004318:	701a      	strb	r2, [r3, #0]
	enum StateName _state = Incoming;
 800431a:	2118      	movs	r1, #24
 800431c:	31ff      	adds	r1, #255	; 0xff
 800431e:	187b      	adds	r3, r7, r1
 8004320:	4ac4      	ldr	r2, [pc, #784]	; (8004634 <StateMachine+0x334>)
 8004322:	2094      	movs	r0, #148	; 0x94
 8004324:	0040      	lsls	r0, r0, #1
 8004326:	4684      	mov	ip, r0
 8004328:	44bc      	add	ip, r7
 800432a:	4462      	add	r2, ip
 800432c:	7812      	ldrb	r2, [r2, #0]
 800432e:	701a      	strb	r2, [r3, #0]
	enum StateName _lastState = Incoming;
 8004330:	208b      	movs	r0, #139	; 0x8b
 8004332:	0040      	lsls	r0, r0, #1
 8004334:	183b      	adds	r3, r7, r0
 8004336:	4abf      	ldr	r2, [pc, #764]	; (8004634 <StateMachine+0x334>)
 8004338:	2494      	movs	r4, #148	; 0x94
 800433a:	0064      	lsls	r4, r4, #1
 800433c:	46a4      	mov	ip, r4
 800433e:	44bc      	add	ip, r7
 8004340:	4462      	add	r2, ip
 8004342:	7812      	ldrb	r2, [r2, #0]
 8004344:	701a      	strb	r2, [r3, #0]
	enum StateName *statePtr;
	enum StateName *lastStatePtr;

	statePtr = &_state;
 8004346:	187b      	adds	r3, r7, r1
 8004348:	2292      	movs	r2, #146	; 0x92
 800434a:	0052      	lsls	r2, r2, #1
 800434c:	18ba      	adds	r2, r7, r2
 800434e:	6013      	str	r3, [r2, #0]
	lastStatePtr = &_lastState;
 8004350:	183b      	adds	r3, r7, r0
 8004352:	2290      	movs	r2, #144	; 0x90
 8004354:	0052      	lsls	r2, r2, #1
 8004356:	18ba      	adds	r2, r7, r2
 8004358:	6013      	str	r3, [r2, #0]

	uint32_t success = FALSE;
 800435a:	2300      	movs	r3, #0
 800435c:	228e      	movs	r2, #142	; 0x8e
 800435e:	0052      	lsls	r2, r2, #1
 8004360:	18ba      	adds	r2, r7, r2
 8004362:	6013      	str	r3, [r2, #0]
	//enum StateName _nextState = Incoming;
	while(TRUE == control)
 8004364:	e15e      	b.n	8004624 <StateMachine+0x324>
	{
		if(VerifyState(_state))
 8004366:	2318      	movs	r3, #24
 8004368:	33ff      	adds	r3, #255	; 0xff
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	0018      	movs	r0, r3
 8004370:	f000 fae2 	bl	8004938 <VerifyState>
 8004374:	1e03      	subs	r3, r0, #0
 8004376:	d100      	bne.n	800437a <StateMachine+0x7a>
 8004378:	e135      	b.n	80045e6 <StateMachine+0x2e6>
		{
			_lastState = _state;
 800437a:	2118      	movs	r1, #24
 800437c:	31ff      	adds	r1, #255	; 0xff
 800437e:	187b      	adds	r3, r7, r1
 8004380:	781a      	ldrb	r2, [r3, #0]
 8004382:	238b      	movs	r3, #139	; 0x8b
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	18fb      	adds	r3, r7, r3
 8004388:	701a      	strb	r2, [r3, #0]
			switch(_state)
 800438a:	187b      	adds	r3, r7, r1
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b13      	cmp	r3, #19
 8004390:	d900      	bls.n	8004394 <StateMachine+0x94>
 8004392:	e121      	b.n	80045d8 <StateMachine+0x2d8>
 8004394:	009a      	lsls	r2, r3, #2
 8004396:	4ba8      	ldr	r3, [pc, #672]	; (8004638 <StateMachine+0x338>)
 8004398:	18d3      	adds	r3, r2, r3
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	469f      	mov	pc, r3
			{
				case SETUP_OPS:
					control = SetupOps(statePtr, lastStatePtr);
 800439e:	2390      	movs	r3, #144	; 0x90
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	18fb      	adds	r3, r7, r3
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	2392      	movs	r3, #146	; 0x92
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	0011      	movs	r1, r2
 80043b0:	0018      	movs	r0, r3
 80043b2:	f7ff fe9d 	bl	80040f0 <SetupOps>
 80043b6:	0003      	movs	r3, r0
 80043b8:	60fb      	str	r3, [r7, #12]
					break;
 80043ba:	e133      	b.n	8004624 <StateMachine+0x324>
				case LOX_FILL:
					control = LoxFill(statePtr,lastStatePtr);
 80043bc:	2390      	movs	r3, #144	; 0x90
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	18fb      	adds	r3, r7, r3
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	2392      	movs	r3, #146	; 0x92
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	18fb      	adds	r3, r7, r3
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	0011      	movs	r1, r2
 80043ce:	0018      	movs	r0, r3
 80043d0:	f7ff f8fc 	bl	80035cc <LoxFill>
 80043d4:	0003      	movs	r3, r0
 80043d6:	60fb      	str	r3, [r7, #12]
					break;
 80043d8:	e124      	b.n	8004624 <StateMachine+0x324>
				case SITE_CLEAR_AND_START_UP:
					control = SiteClear(statePtr,lastStatePtr);
 80043da:	2390      	movs	r3, #144	; 0x90
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	2392      	movs	r3, #146	; 0x92
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	0011      	movs	r1, r2
 80043ec:	0018      	movs	r0, r3
 80043ee:	f7ff fef7 	bl	80041e0 <SiteClear>
 80043f2:	0003      	movs	r3, r0
 80043f4:	60fb      	str	r3, [r7, #12]
					break;
 80043f6:	e115      	b.n	8004624 <StateMachine+0x324>
				case PRESSURIZATION:
					control = SiteClear(statePtr,lastStatePtr);
 80043f8:	2390      	movs	r3, #144	; 0x90
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	18fb      	adds	r3, r7, r3
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	2392      	movs	r3, #146	; 0x92
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	0011      	movs	r1, r2
 800440a:	0018      	movs	r0, r3
 800440c:	f7ff fee8 	bl	80041e0 <SiteClear>
 8004410:	0003      	movs	r3, r0
 8004412:	60fb      	str	r3, [r7, #12]
					break;
 8004414:	e106      	b.n	8004624 <StateMachine+0x324>
				case PRE_CHILL:
					control = PreChill(statePtr,lastStatePtr);
 8004416:	2390      	movs	r3, #144	; 0x90
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	18fb      	adds	r3, r7, r3
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	2392      	movs	r3, #146	; 0x92
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	0011      	movs	r1, r2
 8004428:	0018      	movs	r0, r3
 800442a:	f7ff fc0d 	bl	8003c48 <PreChill>
 800442e:	0003      	movs	r3, r0
 8004430:	60fb      	str	r3, [r7, #12]
					break;
 8004432:	e0f7      	b.n	8004624 <StateMachine+0x324>
				case IGNITION:
					control = Ignition(statePtr,lastStatePtr);
 8004434:	2390      	movs	r3, #144	; 0x90
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	2392      	movs	r3, #146	; 0x92
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	18fb      	adds	r3, r7, r3
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	0011      	movs	r1, r2
 8004446:	0018      	movs	r0, r3
 8004448:	f7fe fdf8 	bl	800303c <Ignition>
 800444c:	0003      	movs	r3, r0
 800444e:	60fb      	str	r3, [r7, #12]
					break;
 8004450:	e0e8      	b.n	8004624 <StateMachine+0x324>
				case LOX_INTRO:
					control = LoxIntro(statePtr,lastStatePtr);
 8004452:	2390      	movs	r3, #144	; 0x90
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	2392      	movs	r3, #146	; 0x92
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	18fb      	adds	r3, r7, r3
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0011      	movs	r1, r2
 8004464:	0018      	movs	r0, r3
 8004466:	f7ff f941 	bl	80036ec <LoxIntro>
 800446a:	0003      	movs	r3, r0
 800446c:	60fb      	str	r3, [r7, #12]
					break;
 800446e:	e0d9      	b.n	8004624 <StateMachine+0x324>
				case BURN_INITIATED:
					control = BurnInitiated(statePtr, lastStatePtr);
 8004470:	2390      	movs	r3, #144	; 0x90
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	2392      	movs	r3, #146	; 0x92
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	18fb      	adds	r3, r7, r3
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	0011      	movs	r1, r2
 8004482:	0018      	movs	r0, r3
 8004484:	f7fe fa80 	bl	8002988 <BurnInitiated>
 8004488:	0003      	movs	r3, r0
 800448a:	60fb      	str	r3, [r7, #12]
					break;
 800448c:	e0ca      	b.n	8004624 <StateMachine+0x324>
				case BURN_FEEDBACK:
					control = BurnFeedback(statePtr,lastStatePtr);
 800448e:	2390      	movs	r3, #144	; 0x90
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	18fb      	adds	r3, r7, r3
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	2392      	movs	r3, #146	; 0x92
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	18fb      	adds	r3, r7, r3
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	0011      	movs	r1, r2
 80044a0:	0018      	movs	r0, r3
 80044a2:	f7fe f9df 	bl	8002864 <BurnFeedback>
 80044a6:	0003      	movs	r3, r0
 80044a8:	60fb      	str	r3, [r7, #12]
					break;
 80044aa:	e0bb      	b.n	8004624 <StateMachine+0x324>
				case BURN_TERMINATION_1:
					control = BurnTermination1(statePtr,lastStatePtr);
 80044ac:	2390      	movs	r3, #144	; 0x90
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	18fb      	adds	r3, r7, r3
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	2392      	movs	r3, #146	; 0x92
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	18fb      	adds	r3, r7, r3
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	0011      	movs	r1, r2
 80044be:	0018      	movs	r0, r3
 80044c0:	f7fe faee 	bl	8002aa0 <BurnTermination1>
 80044c4:	0003      	movs	r3, r0
 80044c6:	60fb      	str	r3, [r7, #12]
					break;
 80044c8:	e0ac      	b.n	8004624 <StateMachine+0x324>
				case BURN_TERMINATION_2:
					control = BurnTermination2(statePtr,lastStatePtr);
 80044ca:	2390      	movs	r3, #144	; 0x90
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	18fb      	adds	r3, r7, r3
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	2392      	movs	r3, #146	; 0x92
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	18fb      	adds	r3, r7, r3
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	0011      	movs	r1, r2
 80044dc:	0018      	movs	r0, r3
 80044de:	f7fe fb6b 	bl	8002bb8 <BurnTermination2>
 80044e2:	0003      	movs	r3, r0
 80044e4:	60fb      	str	r3, [r7, #12]
					break;
 80044e6:	e09d      	b.n	8004624 <StateMachine+0x324>
				case BURN_TERMINATION_3:
					control = BurnTermination3(statePtr,lastStatePtr);
 80044e8:	2390      	movs	r3, #144	; 0x90
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	18fb      	adds	r3, r7, r3
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	2392      	movs	r3, #146	; 0x92
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	0011      	movs	r1, r2
 80044fa:	0018      	movs	r0, r3
 80044fc:	f7fe fbf2 	bl	8002ce4 <BurnTermination3>
 8004500:	0003      	movs	r3, r0
 8004502:	60fb      	str	r3, [r7, #12]
					break;
 8004504:	e08e      	b.n	8004624 <StateMachine+0x324>
				case PURGE:
					control = Purge(statePtr,lastStatePtr);
 8004506:	2390      	movs	r3, #144	; 0x90
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	18fb      	adds	r3, r7, r3
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	2392      	movs	r3, #146	; 0x92
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	18fb      	adds	r3, r7, r3
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	0011      	movs	r1, r2
 8004518:	0018      	movs	r0, r3
 800451a:	f7ff fc25 	bl	8003d68 <Purge>
 800451e:	0003      	movs	r3, r0
 8004520:	60fb      	str	r3, [r7, #12]
					break;
 8004522:	e07f      	b.n	8004624 <StateMachine+0x324>
				case POST_FIRE:
					control = PostFire(statePtr,lastStatePtr);
 8004524:	2390      	movs	r3, #144	; 0x90
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	18fb      	adds	r3, r7, r3
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	2392      	movs	r3, #146	; 0x92
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	0011      	movs	r1, r2
 8004536:	0018      	movs	r0, r3
 8004538:	f7ff faf6 	bl	8003b28 <PostFire>
 800453c:	0003      	movs	r3, r0
 800453e:	60fb      	str	r3, [r7, #12]
					break;
 8004540:	e070      	b.n	8004624 <StateMachine+0x324>
				case SAFE_APPROACH:
					control = SafeApproach(statePtr,lastStatePtr);
 8004542:	2390      	movs	r3, #144	; 0x90
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	2392      	movs	r3, #146	; 0x92
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	18fb      	adds	r3, r7, r3
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	0011      	movs	r1, r2
 8004554:	0018      	movs	r0, r3
 8004556:	f7ff fc97 	bl	8003e88 <SafeApproach>
 800455a:	0003      	movs	r3, r0
 800455c:	60fb      	str	r3, [r7, #12]
					break;
 800455e:	e061      	b.n	8004624 <StateMachine+0x324>
				case FAILURE:
					control = Failure(statePtr,lastStatePtr);
 8004560:	2390      	movs	r3, #144	; 0x90
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	18fb      	adds	r3, r7, r3
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	2392      	movs	r3, #146	; 0x92
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	18fb      	adds	r3, r7, r3
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	0011      	movs	r1, r2
 8004572:	0018      	movs	r0, r3
 8004574:	f7fe fc42 	bl	8002dfc <Failure>
 8004578:	0003      	movs	r3, r0
 800457a:	60fb      	str	r3, [r7, #12]
					break;
 800457c:	e052      	b.n	8004624 <StateMachine+0x324>
				case GROUNDSTATION:
					control = Groundstation(statePtr,lastStatePtr);
 800457e:	2390      	movs	r3, #144	; 0x90
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	2392      	movs	r3, #146	; 0x92
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	18fb      	adds	r3, r7, r3
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	0011      	movs	r1, r2
 8004590:	0018      	movs	r0, r3
 8004592:	f7fe fcc3 	bl	8002f1c <Groundstation>
 8004596:	0003      	movs	r3, r0
 8004598:	60fb      	str	r3, [r7, #12]
					break;
 800459a:	e043      	b.n	8004624 <StateMachine+0x324>
				case TEST:
					control = Test(statePtr,lastStatePtr);
 800459c:	2390      	movs	r3, #144	; 0x90
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	18fb      	adds	r3, r7, r3
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	2392      	movs	r3, #146	; 0x92
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	18fb      	adds	r3, r7, r3
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	0011      	movs	r1, r2
 80045ae:	0018      	movs	r0, r3
 80045b0:	f000 f932 	bl	8004818 <Test>
 80045b4:	0003      	movs	r3, r0
 80045b6:	60fb      	str	r3, [r7, #12]
					break;
 80045b8:	e034      	b.n	8004624 <StateMachine+0x324>
				case SAFETY:
					control = Safety(statePtr,lastStatePtr,isSafetyGreen);
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	2390      	movs	r3, #144	; 0x90
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	18fb      	adds	r3, r7, r3
 80045c2:	6819      	ldr	r1, [r3, #0]
 80045c4:	2392      	movs	r3, #146	; 0x92
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	0018      	movs	r0, r3
 80045ce:	f7ff fceb 	bl	8003fa8 <Safety>
 80045d2:	0003      	movs	r3, r0
 80045d4:	60fb      	str	r3, [r7, #12]
					break;
 80045d6:	e025      	b.n	8004624 <StateMachine+0x324>

				default:
					_state = FAILURE;
 80045d8:	2318      	movs	r3, #24
 80045da:	33ff      	adds	r3, #255	; 0xff
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	2210      	movs	r2, #16
 80045e0:	701a      	strb	r2, [r3, #0]
					break;
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	e01e      	b.n	8004624 <StateMachine+0x324>
			}
		}else
		{
			char message[PRINT_BUFFER_SIZE];
			char *msgPtr = message;
 80045e6:	2314      	movs	r3, #20
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	208c      	movs	r0, #140	; 0x8c
 80045ec:	0040      	lsls	r0, r0, #1
 80045ee:	183a      	adds	r2, r7, r0
 80045f0:	6013      	str	r3, [r2, #0]
			_state = FAILURE;
 80045f2:	2118      	movs	r1, #24
 80045f4:	31ff      	adds	r1, #255	; 0xff
 80045f6:	187b      	adds	r3, r7, r1
 80045f8:	2210      	movs	r2, #16
 80045fa:	701a      	strb	r2, [r3, #0]
	    	// Log Invalid State
	    	Get_Invalid_State_Error_Msg(msgPtr, _state, _lastState);
 80045fc:	187b      	adds	r3, r7, r1
 80045fe:	7819      	ldrb	r1, [r3, #0]
 8004600:	238b      	movs	r3, #139	; 0x8b
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	18fb      	adds	r3, r7, r3
 8004606:	781a      	ldrb	r2, [r3, #0]
 8004608:	0004      	movs	r4, r0
 800460a:	183b      	adds	r3, r7, r0
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	0018      	movs	r0, r3
 8004610:	f7ff f9b0 	bl	8003974 <Get_Invalid_State_Error_Msg>
	    	UART_SendMessage(&hlpuart1, msgPtr);
 8004614:	0020      	movs	r0, r4
 8004616:	183b      	adds	r3, r7, r0
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b08      	ldr	r3, [pc, #32]	; (800463c <StateMachine+0x33c>)
 800461c:	0011      	movs	r1, r2
 800461e:	0018      	movs	r0, r3
 8004620:	f000 fafa 	bl	8004c18 <UART_SendMessage>
	while(TRUE == control)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d100      	bne.n	800462c <StateMachine+0x32c>
 800462a:	e69c      	b.n	8004366 <StateMachine+0x66>
			//ERROR HANDLE
		}
		// WD check
	}
}
 800462c:	46c0      	nop			; (mov r8, r8)
 800462e:	46bd      	mov	sp, r7
 8004630:	b04b      	add	sp, #300	; 0x12c
 8004632:	bd90      	pop	{r4, r7, pc}
 8004634:	fffffee3 	.word	0xfffffee3
 8004638:	08005bf0 	.word	0x08005bf0
 800463c:	2000009c 	.word	0x2000009c

08004640 <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 8004648:	4b04      	ldr	r3, [pc, #16]	; (800465c <LL_SYSCFG_DisableDBATT+0x1c>)
 800464a:	6819      	ldr	r1, [r3, #0]
 800464c:	4b03      	ldr	r3, [pc, #12]	; (800465c <LL_SYSCFG_DisableDBATT+0x1c>)
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	430a      	orrs	r2, r1
 8004652:	601a      	str	r2, [r3, #0]
}
 8004654:	46c0      	nop			; (mov r8, r8)
 8004656:	46bd      	mov	sp, r7
 8004658:	b002      	add	sp, #8
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40010000 	.word	0x40010000

08004660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004666:	4b11      	ldr	r3, [pc, #68]	; (80046ac <HAL_MspInit+0x4c>)
 8004668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800466a:	4b10      	ldr	r3, [pc, #64]	; (80046ac <HAL_MspInit+0x4c>)
 800466c:	2101      	movs	r1, #1
 800466e:	430a      	orrs	r2, r1
 8004670:	641a      	str	r2, [r3, #64]	; 0x40
 8004672:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <HAL_MspInit+0x4c>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	2201      	movs	r2, #1
 8004678:	4013      	ands	r3, r2
 800467a:	607b      	str	r3, [r7, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800467e:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <HAL_MspInit+0x4c>)
 8004680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004682:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <HAL_MspInit+0x4c>)
 8004684:	2180      	movs	r1, #128	; 0x80
 8004686:	0549      	lsls	r1, r1, #21
 8004688:	430a      	orrs	r2, r1
 800468a:	63da      	str	r2, [r3, #60]	; 0x3c
 800468c:	4b07      	ldr	r3, [pc, #28]	; (80046ac <HAL_MspInit+0x4c>)
 800468e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004690:	2380      	movs	r3, #128	; 0x80
 8004692:	055b      	lsls	r3, r3, #21
 8004694:	4013      	ands	r3, r2
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 800469a:	23c0      	movs	r3, #192	; 0xc0
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	0018      	movs	r0, r3
 80046a0:	f7ff ffce 	bl	8004640 <LL_SYSCFG_DisableDBATT>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046a4:	46c0      	nop			; (mov r8, r8)
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b002      	add	sp, #8
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40021000 	.word	0x40021000

080046b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80046b0:	b590      	push	{r4, r7, lr}
 80046b2:	b08b      	sub	sp, #44	; 0x2c
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b8:	2314      	movs	r3, #20
 80046ba:	18fb      	adds	r3, r7, r3
 80046bc:	0018      	movs	r0, r3
 80046be:	2314      	movs	r3, #20
 80046c0:	001a      	movs	r2, r3
 80046c2:	2100      	movs	r1, #0
 80046c4:	f000 fbbf 	bl	8004e46 <memset>
  if(hadc->Instance==ADC1)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a26      	ldr	r2, [pc, #152]	; (8004768 <HAL_ADC_MspInit+0xb8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d145      	bne.n	800475e <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80046d2:	4b26      	ldr	r3, [pc, #152]	; (800476c <HAL_ADC_MspInit+0xbc>)
 80046d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046d6:	4b25      	ldr	r3, [pc, #148]	; (800476c <HAL_ADC_MspInit+0xbc>)
 80046d8:	2180      	movs	r1, #128	; 0x80
 80046da:	0349      	lsls	r1, r1, #13
 80046dc:	430a      	orrs	r2, r1
 80046de:	641a      	str	r2, [r3, #64]	; 0x40
 80046e0:	4b22      	ldr	r3, [pc, #136]	; (800476c <HAL_ADC_MspInit+0xbc>)
 80046e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	035b      	lsls	r3, r3, #13
 80046e8:	4013      	ands	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ee:	4b1f      	ldr	r3, [pc, #124]	; (800476c <HAL_ADC_MspInit+0xbc>)
 80046f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046f2:	4b1e      	ldr	r3, [pc, #120]	; (800476c <HAL_ADC_MspInit+0xbc>)
 80046f4:	2101      	movs	r1, #1
 80046f6:	430a      	orrs	r2, r1
 80046f8:	635a      	str	r2, [r3, #52]	; 0x34
 80046fa:	4b1c      	ldr	r3, [pc, #112]	; (800476c <HAL_ADC_MspInit+0xbc>)
 80046fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fe:	2201      	movs	r2, #1
 8004700:	4013      	ands	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004706:	4b19      	ldr	r3, [pc, #100]	; (800476c <HAL_ADC_MspInit+0xbc>)
 8004708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800470a:	4b18      	ldr	r3, [pc, #96]	; (800476c <HAL_ADC_MspInit+0xbc>)
 800470c:	2102      	movs	r1, #2
 800470e:	430a      	orrs	r2, r1
 8004710:	635a      	str	r2, [r3, #52]	; 0x34
 8004712:	4b16      	ldr	r3, [pc, #88]	; (800476c <HAL_ADC_MspInit+0xbc>)
 8004714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004716:	2202      	movs	r2, #2
 8004718:	4013      	ands	r3, r2
 800471a:	60bb      	str	r3, [r7, #8]
 800471c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800471e:	2414      	movs	r4, #20
 8004720:	193b      	adds	r3, r7, r4
 8004722:	22ff      	movs	r2, #255	; 0xff
 8004724:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004726:	193b      	adds	r3, r7, r4
 8004728:	2203      	movs	r2, #3
 800472a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472c:	193b      	adds	r3, r7, r4
 800472e:	2200      	movs	r2, #0
 8004730:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004732:	193a      	adds	r2, r7, r4
 8004734:	23a0      	movs	r3, #160	; 0xa0
 8004736:	05db      	lsls	r3, r3, #23
 8004738:	0011      	movs	r1, r2
 800473a:	0018      	movs	r0, r3
 800473c:	f7fc fe98 	bl	8001470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004740:	193b      	adds	r3, r7, r4
 8004742:	2203      	movs	r2, #3
 8004744:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004746:	193b      	adds	r3, r7, r4
 8004748:	2203      	movs	r2, #3
 800474a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474c:	193b      	adds	r3, r7, r4
 800474e:	2200      	movs	r2, #0
 8004750:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004752:	193b      	adds	r3, r7, r4
 8004754:	4a06      	ldr	r2, [pc, #24]	; (8004770 <HAL_ADC_MspInit+0xc0>)
 8004756:	0019      	movs	r1, r3
 8004758:	0010      	movs	r0, r2
 800475a:	f7fc fe89 	bl	8001470 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	46bd      	mov	sp, r7
 8004762:	b00b      	add	sp, #44	; 0x2c
 8004764:	bd90      	pop	{r4, r7, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	40012400 	.word	0x40012400
 800476c:	40021000 	.word	0x40021000
 8004770:	50000400 	.word	0x50000400

08004774 <NMI_Handler>:
/*           Cortex-M0+ Processor Interruption and Exception Handlers          */ 
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HardFault_Handler>:
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
 800477e:	b580      	push	{r7, lr}
 8004780:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
 8004782:	e7fe      	b.n	8004782 <HardFault_Handler+0x4>

08004784 <SVC_Handler>:
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVC_IRQn 0 */

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
 8004788:	46c0      	nop			; (mov r8, r8)
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800478e:	b580      	push	{r7, lr}
 8004790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <SysTick_Handler>:
}

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
 800479c:	f7fb fdb0 	bl	8000300 <HAL_IncTick>
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
 80047a0:	46c0      	nop			; (mov r8, r8)
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <_sbrk>:
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	4b11      	ldr	r3, [pc, #68]	; (80047f8 <_sbrk+0x50>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d102      	bne.n	80047be <_sbrk+0x16>
 80047b8:	4b0f      	ldr	r3, [pc, #60]	; (80047f8 <_sbrk+0x50>)
 80047ba:	4a10      	ldr	r2, [pc, #64]	; (80047fc <_sbrk+0x54>)
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <_sbrk+0x50>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <_sbrk+0x50>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	18d3      	adds	r3, r2, r3
 80047cc:	466a      	mov	r2, sp
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d907      	bls.n	80047e2 <_sbrk+0x3a>
 80047d2:	f000 fb05 	bl	8004de0 <__errno>
 80047d6:	0003      	movs	r3, r0
 80047d8:	220c      	movs	r2, #12
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	2301      	movs	r3, #1
 80047de:	425b      	negs	r3, r3
 80047e0:	e006      	b.n	80047f0 <_sbrk+0x48>
 80047e2:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <_sbrk+0x50>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	18d2      	adds	r2, r2, r3
 80047ea:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <_sbrk+0x50>)
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	0018      	movs	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b004      	add	sp, #16
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	2000008c 	.word	0x2000008c
 80047fc:	200001a8 	.word	0x200001a8

08004800 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004804:	4b03      	ldr	r3, [pc, #12]	; (8004814 <SystemInit+0x14>)
 8004806:	2280      	movs	r2, #128	; 0x80
 8004808:	0512      	lsls	r2, r2, #20
 800480a:	609a      	str	r2, [r3, #8]
#endif
}
 800480c:	46c0      	nop			; (mov r8, r8)
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	e000ed00 	.word	0xe000ed00

08004818 <Test>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "test.h"

uint32_t Test(enum StateName *statePtr, enum StateName *lastStatePtr)
{
 8004818:	b590      	push	{r4, r7, lr}
 800481a:	b0c7      	sub	sp, #284	; 0x11c
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
	uint32_t success = FALSE;
 8004822:	2300      	movs	r3, #0
 8004824:	228a      	movs	r2, #138	; 0x8a
 8004826:	0052      	lsls	r2, r2, #1
 8004828:	18ba      	adds	r2, r7, r2
 800482a:	6013      	str	r3, [r2, #0]
	uint32_t valve_configuration = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	2288      	movs	r2, #136	; 0x88
 8004830:	0052      	lsls	r2, r2, #1
 8004832:	18ba      	adds	r2, r7, r2
 8004834:	6013      	str	r3, [r2, #0]
	uint32_t valve_target = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	2286      	movs	r2, #134	; 0x86
 800483a:	0052      	lsls	r2, r2, #1
 800483c:	18ba      	adds	r2, r7, r2
 800483e:	6013      	str	r3, [r2, #0]
	char message[256];
	char *msgPtr = message;
 8004840:	2308      	movs	r3, #8
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	2284      	movs	r2, #132	; 0x84
 8004846:	0052      	lsls	r2, r2, #1
 8004848:	18ba      	adds	r2, r7, r2
 800484a:	6013      	str	r3, [r2, #0]

    if(VerifyState(*statePtr) && VerifyState(*lastStatePtr))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	0018      	movs	r0, r3
 8004852:	f000 f871 	bl	8004938 <VerifyState>
 8004856:	1e03      	subs	r3, r0, #0
 8004858:	d052      	beq.n	8004900 <Test+0xe8>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	0018      	movs	r0, r3
 8004860:	f000 f86a 	bl	8004938 <VerifyState>
 8004864:	1e03      	subs	r3, r0, #0
 8004866:	d04b      	beq.n	8004900 <Test+0xe8>
    {
    	if((*statePtr & TEST) == TEST){
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	001a      	movs	r2, r3
 800486e:	2312      	movs	r3, #18
 8004870:	4013      	ands	r3, r2
 8004872:	2b12      	cmp	r3, #18
 8004874:	d132      	bne.n	80048dc <Test+0xc4>
    		// PV1 PV2 PV3 VV1 VV2 IV1 IV2 MV1 MV2
    		// | 0| 0|  0|  1|  1|  0|  0|  0|  0
    		// Set Valve States
    		valve_target |= ((uint16_t)VV1 	\
 8004876:	2486      	movs	r4, #134	; 0x86
 8004878:	0064      	lsls	r4, r4, #1
 800487a:	193b      	adds	r3, r7, r4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2218      	movs	r2, #24
 8004880:	4313      	orrs	r3, r2
 8004882:	193a      	adds	r2, r7, r4
 8004884:	6013      	str	r3, [r2, #0]
						 |(uint16_t)VV2);
    		// Timestamp and Log
    		valve_configuration = StateConfiguration();
 8004886:	f000 f87b 	bl	8004980 <StateConfiguration>
 800488a:	0003      	movs	r3, r0
 800488c:	2188      	movs	r1, #136	; 0x88
 800488e:	0049      	lsls	r1, r1, #1
 8004890:	187a      	adds	r2, r7, r1
 8004892:	6013      	str	r3, [r2, #0]

    		// Change State conditions
    		lastStatePtr = statePtr;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	603b      	str	r3, [r7, #0]
    		*statePtr =TEST;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2212      	movs	r2, #18
 800489c:	701a      	strb	r2, [r3, #0]
    		success = (valve_configuration == valve_target ? TRUE : FALSE);
 800489e:	187b      	adds	r3, r7, r1
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	193b      	adds	r3, r7, r4
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	425a      	negs	r2, r3
 80048aa:	4153      	adcs	r3, r2
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	228a      	movs	r2, #138	; 0x8a
 80048b0:	0052      	lsls	r2, r2, #1
 80048b2:	18b8      	adds	r0, r7, r2
 80048b4:	6003      	str	r3, [r0, #0]
    		// Create Message and Transmit
    		Get_Valve_State_Status_Msg(msgPtr,valve_configuration,success);
 80048b6:	18bb      	adds	r3, r7, r2
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	187b      	adds	r3, r7, r1
 80048bc:	6819      	ldr	r1, [r3, #0]
 80048be:	2484      	movs	r4, #132	; 0x84
 80048c0:	0064      	lsls	r4, r4, #1
 80048c2:	193b      	adds	r3, r7, r4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	0018      	movs	r0, r3
 80048c8:	f7ff f8ce 	bl	8003a68 <Get_Valve_State_Status_Msg>
    		UART_SendMessage(&hlpuart1, msgPtr);
 80048cc:	193b      	adds	r3, r7, r4
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	4b18      	ldr	r3, [pc, #96]	; (8004934 <Test+0x11c>)
 80048d2:	0011      	movs	r1, r2
 80048d4:	0018      	movs	r0, r3
 80048d6:	f000 f99f 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & TEST) == TEST){
 80048da:	e023      	b.n	8004924 <Test+0x10c>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(msgPtr, TEST, *statePtr);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	781a      	ldrb	r2, [r3, #0]
 80048e0:	2484      	movs	r4, #132	; 0x84
 80048e2:	0064      	lsls	r4, r4, #1
 80048e4:	193b      	adds	r3, r7, r4
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2112      	movs	r1, #18
 80048ea:	0018      	movs	r0, r3
 80048ec:	f7fe ffae 	bl	800384c <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&hlpuart1,msgPtr);
 80048f0:	193b      	adds	r3, r7, r4
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	4b0f      	ldr	r3, [pc, #60]	; (8004934 <Test+0x11c>)
 80048f6:	0011      	movs	r1, r2
 80048f8:	0018      	movs	r0, r3
 80048fa:	f000 f98d 	bl	8004c18 <UART_SendMessage>
    	if((*statePtr & TEST) == TEST){
 80048fe:	e011      	b.n	8004924 <Test+0x10c>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(msgPtr, *statePtr, *lastStatePtr);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	7819      	ldrb	r1, [r3, #0]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781a      	ldrb	r2, [r3, #0]
 8004908:	2484      	movs	r4, #132	; 0x84
 800490a:	0064      	lsls	r4, r4, #1
 800490c:	193b      	adds	r3, r7, r4
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	0018      	movs	r0, r3
 8004912:	f7ff f82f 	bl	8003974 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&hlpuart1, msgPtr);
 8004916:	193b      	adds	r3, r7, r4
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	4b06      	ldr	r3, [pc, #24]	; (8004934 <Test+0x11c>)
 800491c:	0011      	movs	r1, r2
 800491e:	0018      	movs	r0, r3
 8004920:	f000 f97a 	bl	8004c18 <UART_SendMessage>
    }
	return success;
 8004924:	238a      	movs	r3, #138	; 0x8a
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	681b      	ldr	r3, [r3, #0]
}
 800492c:	0018      	movs	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	b047      	add	sp, #284	; 0x11c
 8004932:	bd90      	pop	{r4, r7, pc}
 8004934:	2000009c 	.word	0x2000009c

08004938 <VerifyState>:
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b13      	cmp	r3, #19
 8004948:	dc10      	bgt.n	800496c <VerifyState+0x34>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	db0d      	blt.n	800496c <VerifyState+0x34>
 8004950:	2301      	movs	r3, #1
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b13      	cmp	r3, #19
 8004958:	d805      	bhi.n	8004966 <VerifyState+0x2e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	009a      	lsls	r2, r3, #2
 800495e:	4b07      	ldr	r3, [pc, #28]	; (800497c <VerifyState+0x44>)
 8004960:	18d3      	adds	r3, r2, r3
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	469f      	mov	pc, r3
 8004966:	2300      	movs	r3, #0
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	e002      	b.n	8004972 <VerifyState+0x3a>
 800496c:	46c0      	nop			; (mov r8, r8)
 800496e:	e000      	b.n	8004972 <VerifyState+0x3a>
 8004970:	46c0      	nop			; (mov r8, r8)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	0018      	movs	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	b004      	add	sp, #16
 800497a:	bd80      	pop	{r7, pc}
 800497c:	08005c80 	.word	0x08005c80

08004980 <StateConfiguration>:
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	2300      	movs	r3, #0
 8004988:	607b      	str	r3, [r7, #4]
 800498a:	2380      	movs	r3, #128	; 0x80
 800498c:	005a      	lsls	r2, r3, #1
 800498e:	23a0      	movs	r3, #160	; 0xa0
 8004990:	05db      	lsls	r3, r3, #23
 8004992:	0011      	movs	r1, r2
 8004994:	0018      	movs	r0, r3
 8004996:	f7fc fecf 	bl	8001738 <HAL_GPIO_ReadPin>
 800499a:	0003      	movs	r3, r0
 800499c:	001a      	movs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	607b      	str	r3, [r7, #4]
 80049a4:	2380      	movs	r3, #128	; 0x80
 80049a6:	009a      	lsls	r2, r3, #2
 80049a8:	23a0      	movs	r3, #160	; 0xa0
 80049aa:	05db      	lsls	r3, r3, #23
 80049ac:	0011      	movs	r1, r2
 80049ae:	0018      	movs	r0, r3
 80049b0:	f7fc fec2 	bl	8001738 <HAL_GPIO_ReadPin>
 80049b4:	0003      	movs	r3, r0
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	001a      	movs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4313      	orrs	r3, r2
 80049be:	607b      	str	r3, [r7, #4]
 80049c0:	2380      	movs	r3, #128	; 0x80
 80049c2:	00da      	lsls	r2, r3, #3
 80049c4:	23a0      	movs	r3, #160	; 0xa0
 80049c6:	05db      	lsls	r3, r3, #23
 80049c8:	0011      	movs	r1, r2
 80049ca:	0018      	movs	r0, r3
 80049cc:	f7fc feb4 	bl	8001738 <HAL_GPIO_ReadPin>
 80049d0:	0003      	movs	r3, r0
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	001a      	movs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4313      	orrs	r3, r2
 80049da:	607b      	str	r3, [r7, #4]
 80049dc:	2380      	movs	r3, #128	; 0x80
 80049de:	019b      	lsls	r3, r3, #6
 80049e0:	4a27      	ldr	r2, [pc, #156]	; (8004a80 <StateConfiguration+0x100>)
 80049e2:	0019      	movs	r1, r3
 80049e4:	0010      	movs	r0, r2
 80049e6:	f7fc fea7 	bl	8001738 <HAL_GPIO_ReadPin>
 80049ea:	0003      	movs	r3, r0
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	001a      	movs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	607b      	str	r3, [r7, #4]
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	01db      	lsls	r3, r3, #7
 80049fa:	4a21      	ldr	r2, [pc, #132]	; (8004a80 <StateConfiguration+0x100>)
 80049fc:	0019      	movs	r1, r3
 80049fe:	0010      	movs	r0, r2
 8004a00:	f7fc fe9a 	bl	8001738 <HAL_GPIO_ReadPin>
 8004a04:	0003      	movs	r3, r0
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	001a      	movs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	607b      	str	r3, [r7, #4]
 8004a10:	2380      	movs	r3, #128	; 0x80
 8004a12:	021b      	lsls	r3, r3, #8
 8004a14:	4a1a      	ldr	r2, [pc, #104]	; (8004a80 <StateConfiguration+0x100>)
 8004a16:	0019      	movs	r1, r3
 8004a18:	0010      	movs	r0, r2
 8004a1a:	f7fc fe8d 	bl	8001738 <HAL_GPIO_ReadPin>
 8004a1e:	0003      	movs	r3, r0
 8004a20:	015b      	lsls	r3, r3, #5
 8004a22:	001a      	movs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	607b      	str	r3, [r7, #4]
 8004a2a:	2380      	movs	r3, #128	; 0x80
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	4a15      	ldr	r2, [pc, #84]	; (8004a84 <StateConfiguration+0x104>)
 8004a30:	0019      	movs	r1, r3
 8004a32:	0010      	movs	r0, r2
 8004a34:	f7fc fe80 	bl	8001738 <HAL_GPIO_ReadPin>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	019b      	lsls	r3, r3, #6
 8004a3c:	001a      	movs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	607b      	str	r3, [r7, #4]
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4a0e      	ldr	r2, [pc, #56]	; (8004a84 <StateConfiguration+0x104>)
 8004a4a:	0019      	movs	r1, r3
 8004a4c:	0010      	movs	r0, r2
 8004a4e:	f7fc fe73 	bl	8001738 <HAL_GPIO_ReadPin>
 8004a52:	0003      	movs	r3, r0
 8004a54:	01db      	lsls	r3, r3, #7
 8004a56:	001a      	movs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <StateConfiguration+0x104>)
 8004a60:	2104      	movs	r1, #4
 8004a62:	0018      	movs	r0, r3
 8004a64:	f7fc fe68 	bl	8001738 <HAL_GPIO_ReadPin>
 8004a68:	0003      	movs	r3, r0
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	001a      	movs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	607b      	str	r3, [r7, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	0018      	movs	r0, r3
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b002      	add	sp, #8
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	50000400 	.word	0x50000400
 8004a84:	50000c00 	.word	0x50000c00

08004a88 <ValveStateSetter>:
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	2300      	movs	r3, #0
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d008      	beq.n	8004aae <ValveStateSetter+0x26>
 8004a9c:	2380      	movs	r3, #128	; 0x80
 8004a9e:	0059      	lsls	r1, r3, #1
 8004aa0:	23a0      	movs	r3, #160	; 0xa0
 8004aa2:	05db      	lsls	r3, r3, #23
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f7fc fe63 	bl	8001772 <HAL_GPIO_WritePin>
 8004aac:	e007      	b.n	8004abe <ValveStateSetter+0x36>
 8004aae:	2380      	movs	r3, #128	; 0x80
 8004ab0:	0059      	lsls	r1, r3, #1
 8004ab2:	23a0      	movs	r3, #160	; 0xa0
 8004ab4:	05db      	lsls	r3, r3, #23
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f7fc fe5a 	bl	8001772 <HAL_GPIO_WritePin>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d008      	beq.n	8004ad8 <ValveStateSetter+0x50>
 8004ac6:	2380      	movs	r3, #128	; 0x80
 8004ac8:	0099      	lsls	r1, r3, #2
 8004aca:	23a0      	movs	r3, #160	; 0xa0
 8004acc:	05db      	lsls	r3, r3, #23
 8004ace:	2201      	movs	r2, #1
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f7fc fe4e 	bl	8001772 <HAL_GPIO_WritePin>
 8004ad6:	e007      	b.n	8004ae8 <ValveStateSetter+0x60>
 8004ad8:	2380      	movs	r3, #128	; 0x80
 8004ada:	0099      	lsls	r1, r3, #2
 8004adc:	23a0      	movs	r3, #160	; 0xa0
 8004ade:	05db      	lsls	r3, r3, #23
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	f7fc fe45 	bl	8001772 <HAL_GPIO_WritePin>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2204      	movs	r2, #4
 8004aec:	4013      	ands	r3, r2
 8004aee:	d008      	beq.n	8004b02 <ValveStateSetter+0x7a>
 8004af0:	2380      	movs	r3, #128	; 0x80
 8004af2:	00d9      	lsls	r1, r3, #3
 8004af4:	23a0      	movs	r3, #160	; 0xa0
 8004af6:	05db      	lsls	r3, r3, #23
 8004af8:	2201      	movs	r2, #1
 8004afa:	0018      	movs	r0, r3
 8004afc:	f7fc fe39 	bl	8001772 <HAL_GPIO_WritePin>
 8004b00:	e007      	b.n	8004b12 <ValveStateSetter+0x8a>
 8004b02:	2380      	movs	r3, #128	; 0x80
 8004b04:	00d9      	lsls	r1, r3, #3
 8004b06:	23a0      	movs	r3, #160	; 0xa0
 8004b08:	05db      	lsls	r3, r3, #23
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f7fc fe30 	bl	8001772 <HAL_GPIO_WritePin>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2208      	movs	r2, #8
 8004b16:	4013      	ands	r3, r2
 8004b18:	d007      	beq.n	8004b2a <ValveStateSetter+0xa2>
 8004b1a:	2380      	movs	r3, #128	; 0x80
 8004b1c:	019b      	lsls	r3, r3, #6
 8004b1e:	483c      	ldr	r0, [pc, #240]	; (8004c10 <ValveStateSetter+0x188>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	0019      	movs	r1, r3
 8004b24:	f7fc fe25 	bl	8001772 <HAL_GPIO_WritePin>
 8004b28:	e006      	b.n	8004b38 <ValveStateSetter+0xb0>
 8004b2a:	2380      	movs	r3, #128	; 0x80
 8004b2c:	019b      	lsls	r3, r3, #6
 8004b2e:	4838      	ldr	r0, [pc, #224]	; (8004c10 <ValveStateSetter+0x188>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	0019      	movs	r1, r3
 8004b34:	f7fc fe1d 	bl	8001772 <HAL_GPIO_WritePin>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2210      	movs	r2, #16
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	d007      	beq.n	8004b50 <ValveStateSetter+0xc8>
 8004b40:	2380      	movs	r3, #128	; 0x80
 8004b42:	01db      	lsls	r3, r3, #7
 8004b44:	4832      	ldr	r0, [pc, #200]	; (8004c10 <ValveStateSetter+0x188>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	0019      	movs	r1, r3
 8004b4a:	f7fc fe12 	bl	8001772 <HAL_GPIO_WritePin>
 8004b4e:	e006      	b.n	8004b5e <ValveStateSetter+0xd6>
 8004b50:	2380      	movs	r3, #128	; 0x80
 8004b52:	01db      	lsls	r3, r3, #7
 8004b54:	482e      	ldr	r0, [pc, #184]	; (8004c10 <ValveStateSetter+0x188>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	0019      	movs	r1, r3
 8004b5a:	f7fc fe0a 	bl	8001772 <HAL_GPIO_WritePin>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	4013      	ands	r3, r2
 8004b64:	d007      	beq.n	8004b76 <ValveStateSetter+0xee>
 8004b66:	2380      	movs	r3, #128	; 0x80
 8004b68:	021b      	lsls	r3, r3, #8
 8004b6a:	4829      	ldr	r0, [pc, #164]	; (8004c10 <ValveStateSetter+0x188>)
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	0019      	movs	r1, r3
 8004b70:	f7fc fdff 	bl	8001772 <HAL_GPIO_WritePin>
 8004b74:	e006      	b.n	8004b84 <ValveStateSetter+0xfc>
 8004b76:	2380      	movs	r3, #128	; 0x80
 8004b78:	021b      	lsls	r3, r3, #8
 8004b7a:	4825      	ldr	r0, [pc, #148]	; (8004c10 <ValveStateSetter+0x188>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	0019      	movs	r1, r3
 8004b80:	f7fc fdf7 	bl	8001772 <HAL_GPIO_WritePin>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2240      	movs	r2, #64	; 0x40
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d007      	beq.n	8004b9c <ValveStateSetter+0x114>
 8004b8c:	2380      	movs	r3, #128	; 0x80
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	4820      	ldr	r0, [pc, #128]	; (8004c14 <ValveStateSetter+0x18c>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	0019      	movs	r1, r3
 8004b96:	f7fc fdec 	bl	8001772 <HAL_GPIO_WritePin>
 8004b9a:	e006      	b.n	8004baa <ValveStateSetter+0x122>
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	481c      	ldr	r0, [pc, #112]	; (8004c14 <ValveStateSetter+0x18c>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	f7fc fde4 	bl	8001772 <HAL_GPIO_WritePin>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2280      	movs	r2, #128	; 0x80
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d007      	beq.n	8004bc2 <ValveStateSetter+0x13a>
 8004bb2:	2380      	movs	r3, #128	; 0x80
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4817      	ldr	r0, [pc, #92]	; (8004c14 <ValveStateSetter+0x18c>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	0019      	movs	r1, r3
 8004bbc:	f7fc fdd9 	bl	8001772 <HAL_GPIO_WritePin>
 8004bc0:	e006      	b.n	8004bd0 <ValveStateSetter+0x148>
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4813      	ldr	r0, [pc, #76]	; (8004c14 <ValveStateSetter+0x18c>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	0019      	movs	r1, r3
 8004bcc:	f7fc fdd1 	bl	8001772 <HAL_GPIO_WritePin>
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	2380      	movs	r3, #128	; 0x80
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d006      	beq.n	8004be8 <ValveStateSetter+0x160>
 8004bda:	4b0e      	ldr	r3, [pc, #56]	; (8004c14 <ValveStateSetter+0x18c>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	2104      	movs	r1, #4
 8004be0:	0018      	movs	r0, r3
 8004be2:	f7fc fdc6 	bl	8001772 <HAL_GPIO_WritePin>
 8004be6:	e005      	b.n	8004bf4 <ValveStateSetter+0x16c>
 8004be8:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <ValveStateSetter+0x18c>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	2104      	movs	r1, #4
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f7fc fdbf 	bl	8001772 <HAL_GPIO_WritePin>
 8004bf4:	f7ff fec4 	bl	8004980 <StateConfiguration>
 8004bf8:	0002      	movs	r2, r0
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	1a9b      	subs	r3, r3, r2
 8004bfe:	425a      	negs	r2, r3
 8004c00:	4153      	adcs	r3, r2
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	0018      	movs	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	b004      	add	sp, #16
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	50000400 	.word	0x50000400
 8004c14:	50000c00 	.word	0x50000c00

08004c18 <UART_SendMessage>:
 8004c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c1a:	4c55      	ldr	r4, [pc, #340]	; (8004d70 <UART_SendMessage+0x158>)
 8004c1c:	44a5      	add	sp, r4
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	6039      	str	r1, [r7, #0]
 8004c24:	2300      	movs	r3, #0
 8004c26:	25c6      	movs	r5, #198	; 0xc6
 8004c28:	00ad      	lsls	r5, r5, #2
 8004c2a:	197a      	adds	r2, r7, r5
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	f7fb fb77 	bl	8000320 <HAL_GetTick>
 8004c32:	0003      	movs	r3, r0
 8004c34:	24c5      	movs	r4, #197	; 0xc5
 8004c36:	00a4      	lsls	r4, r4, #2
 8004c38:	193a      	adds	r2, r7, r4
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	22c7      	movs	r2, #199	; 0xc7
 8004c40:	0092      	lsls	r2, r2, #2
 8004c42:	18ba      	adds	r2, r7, r2
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	4b4b      	ldr	r3, [pc, #300]	; (8004d74 <UART_SendMessage+0x15c>)
 8004c48:	26c8      	movs	r6, #200	; 0xc8
 8004c4a:	00b6      	lsls	r6, r6, #2
 8004c4c:	19ba      	adds	r2, r7, r6
 8004c4e:	18d1      	adds	r1, r2, r3
 8004c50:	4a49      	ldr	r2, [pc, #292]	; (8004d78 <UART_SendMessage+0x160>)
 8004c52:	000b      	movs	r3, r1
 8004c54:	ca31      	ldmia	r2!, {r0, r4, r5}
 8004c56:	c331      	stmia	r3!, {r0, r4, r5}
 8004c58:	ca31      	ldmia	r2!, {r0, r4, r5}
 8004c5a:	c331      	stmia	r3!, {r0, r4, r5}
 8004c5c:	6812      	ldr	r2, [r2, #0]
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	000b      	movs	r3, r1
 8004c62:	331c      	adds	r3, #28
 8004c64:	22e4      	movs	r2, #228	; 0xe4
 8004c66:	2100      	movs	r1, #0
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f000 f8ec 	bl	8004e46 <memset>
 8004c6e:	4b43      	ldr	r3, [pc, #268]	; (8004d7c <UART_SendMessage+0x164>)
 8004c70:	19ba      	adds	r2, r7, r6
 8004c72:	18d1      	adds	r1, r2, r3
 8004c74:	4a42      	ldr	r2, [pc, #264]	; (8004d80 <UART_SendMessage+0x168>)
 8004c76:	000b      	movs	r3, r1
 8004c78:	ca31      	ldmia	r2!, {r0, r4, r5}
 8004c7a:	c331      	stmia	r3!, {r0, r4, r5}
 8004c7c:	ca31      	ldmia	r2!, {r0, r4, r5}
 8004c7e:	c331      	stmia	r3!, {r0, r4, r5}
 8004c80:	7812      	ldrb	r2, [r2, #0]
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	2319      	movs	r3, #25
 8004c86:	18cb      	adds	r3, r1, r3
 8004c88:	22e7      	movs	r2, #231	; 0xe7
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f000 f8da 	bl	8004e46 <memset>
 8004c92:	24c5      	movs	r4, #197	; 0xc5
 8004c94:	00a4      	lsls	r4, r4, #2
 8004c96:	193b      	adds	r3, r7, r4
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	493a      	ldr	r1, [pc, #232]	; (8004d84 <UART_SendMessage+0x16c>)
 8004c9c:	2486      	movs	r4, #134	; 0x86
 8004c9e:	0064      	lsls	r4, r4, #1
 8004ca0:	193b      	adds	r3, r7, r4
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f000 f8d8 	bl	8004e58 <siprintf>
 8004ca8:	193a      	adds	r2, r7, r4
 8004caa:	260c      	movs	r6, #12
 8004cac:	19bb      	adds	r3, r7, r6
 8004cae:	0011      	movs	r1, r2
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f000 f8f1 	bl	8004e98 <strcat>
 8004cb6:	19bb      	adds	r3, r7, r6
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f7fb fa23 	bl	8000104 <strlen>
 8004cbe:	0003      	movs	r3, r0
 8004cc0:	001a      	movs	r2, r3
 8004cc2:	19bb      	adds	r3, r7, r6
 8004cc4:	189a      	adds	r2, r3, r2
 8004cc6:	4b30      	ldr	r3, [pc, #192]	; (8004d88 <UART_SendMessage+0x170>)
 8004cc8:	0010      	movs	r0, r2
 8004cca:	0019      	movs	r1, r3
 8004ccc:	2304      	movs	r3, #4
 8004cce:	001a      	movs	r2, r3
 8004cd0:	f000 f8b0 	bl	8004e34 <memcpy>
 8004cd4:	193b      	adds	r3, r7, r4
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f7fb fa14 	bl	8000104 <strlen>
 8004cdc:	0004      	movs	r4, r0
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f7fb fa0f 	bl	8000104 <strlen>
 8004ce6:	0003      	movs	r3, r0
 8004ce8:	18e2      	adds	r2, r4, r3
 8004cea:	25c6      	movs	r5, #198	; 0xc6
 8004cec:	00ad      	lsls	r5, r5, #2
 8004cee:	197b      	adds	r3, r7, r5
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	18d3      	adds	r3, r2, r3
 8004cf4:	3303      	adds	r3, #3
 8004cf6:	197a      	adds	r2, r7, r5
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d01c      	beq.n	8004d3c <UART_SendMessage+0x124>
 8004d02:	23c6      	movs	r3, #198	; 0xc6
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	18fb      	adds	r3, r7, r3
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2bff      	cmp	r3, #255	; 0xff
 8004d0c:	d80c      	bhi.n	8004d28 <UART_SendMessage+0x110>
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	230c      	movs	r3, #12
 8004d12:	18fb      	adds	r3, r7, r3
 8004d14:	0011      	movs	r1, r2
 8004d16:	0018      	movs	r0, r3
 8004d18:	f000 f8be 	bl	8004e98 <strcat>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	22c7      	movs	r2, #199	; 0xc7
 8004d20:	0092      	lsls	r2, r2, #2
 8004d22:	18ba      	adds	r2, r7, r2
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	e012      	b.n	8004d4e <UART_SendMessage+0x136>
 8004d28:	2385      	movs	r3, #133	; 0x85
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	18fa      	adds	r2, r7, r3
 8004d2e:	230c      	movs	r3, #12
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	0011      	movs	r1, r2
 8004d34:	0018      	movs	r0, r3
 8004d36:	f000 f8af 	bl	8004e98 <strcat>
 8004d3a:	e008      	b.n	8004d4e <UART_SendMessage+0x136>
 8004d3c:	238a      	movs	r3, #138	; 0x8a
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	18fa      	adds	r2, r7, r3
 8004d42:	230c      	movs	r3, #12
 8004d44:	18fb      	adds	r3, r7, r3
 8004d46:	0011      	movs	r1, r2
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f000 f8a5 	bl	8004e98 <strcat>
 8004d4e:	230c      	movs	r3, #12
 8004d50:	18f9      	adds	r1, r7, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2209      	movs	r2, #9
 8004d56:	0018      	movs	r0, r3
 8004d58:	f7fd fbc8 	bl	80024ec <HAL_UART_Transmit_IT>
 8004d5c:	23c7      	movs	r3, #199	; 0xc7
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	18fb      	adds	r3, r7, r3
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	0018      	movs	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	23c9      	movs	r3, #201	; 0xc9
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	449d      	add	sp, r3
 8004d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d70:	fffffcdc 	.word	0xfffffcdc
 8004d74:	fffffef4 	.word	0xfffffef4
 8004d78:	080059f0 	.word	0x080059f0
 8004d7c:	fffffdf4 	.word	0xfffffdf4
 8004d80:	08005af0 	.word	0x08005af0
 8004d84:	080059e8 	.word	0x080059e8
 8004d88:	080059ec 	.word	0x080059ec

08004d8c <Reset_Handler>:
 8004d8c:	480d      	ldr	r0, [pc, #52]	; (8004dc4 <LoopForever+0x2>)
 8004d8e:	4685      	mov	sp, r0
 8004d90:	2100      	movs	r1, #0
 8004d92:	e003      	b.n	8004d9c <LoopCopyDataInit>

08004d94 <CopyDataInit>:
 8004d94:	4b0c      	ldr	r3, [pc, #48]	; (8004dc8 <LoopForever+0x6>)
 8004d96:	585b      	ldr	r3, [r3, r1]
 8004d98:	5043      	str	r3, [r0, r1]
 8004d9a:	3104      	adds	r1, #4

08004d9c <LoopCopyDataInit>:
 8004d9c:	480b      	ldr	r0, [pc, #44]	; (8004dcc <LoopForever+0xa>)
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <LoopForever+0xe>)
 8004da0:	1842      	adds	r2, r0, r1
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d3f6      	bcc.n	8004d94 <CopyDataInit>
 8004da6:	4a0b      	ldr	r2, [pc, #44]	; (8004dd4 <LoopForever+0x12>)
 8004da8:	e002      	b.n	8004db0 <LoopFillZerobss>

08004daa <FillZerobss>:
 8004daa:	2300      	movs	r3, #0
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	3204      	adds	r2, #4

08004db0 <LoopFillZerobss>:
 8004db0:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <LoopForever+0x16>)
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d3f9      	bcc.n	8004daa <FillZerobss>
 8004db6:	f7ff fd23 	bl	8004800 <SystemInit>
 8004dba:	f000 f817 	bl	8004dec <__libc_init_array>
 8004dbe:	f7fe fd27 	bl	8003810 <main>

08004dc2 <LoopForever>:
 8004dc2:	e7fe      	b.n	8004dc2 <LoopForever>
 8004dc4:	20009000 	.word	0x20009000
 8004dc8:	08005d0c 	.word	0x08005d0c
 8004dcc:	20000000 	.word	0x20000000
 8004dd0:	20000070 	.word	0x20000070
 8004dd4:	20000070 	.word	0x20000070
 8004dd8:	200001a4 	.word	0x200001a4

08004ddc <ADC1_COMP_IRQHandler>:
 8004ddc:	e7fe      	b.n	8004ddc <ADC1_COMP_IRQHandler>
	...

08004de0 <__errno>:
 8004de0:	4b01      	ldr	r3, [pc, #4]	; (8004de8 <__errno+0x8>)
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	4770      	bx	lr
 8004de6:	46c0      	nop			; (mov r8, r8)
 8004de8:	2000000c 	.word	0x2000000c

08004dec <__libc_init_array>:
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	2600      	movs	r6, #0
 8004df0:	4d0c      	ldr	r5, [pc, #48]	; (8004e24 <__libc_init_array+0x38>)
 8004df2:	4c0d      	ldr	r4, [pc, #52]	; (8004e28 <__libc_init_array+0x3c>)
 8004df4:	1b64      	subs	r4, r4, r5
 8004df6:	10a4      	asrs	r4, r4, #2
 8004df8:	42a6      	cmp	r6, r4
 8004dfa:	d109      	bne.n	8004e10 <__libc_init_array+0x24>
 8004dfc:	2600      	movs	r6, #0
 8004dfe:	f000 fc3f 	bl	8005680 <_init>
 8004e02:	4d0a      	ldr	r5, [pc, #40]	; (8004e2c <__libc_init_array+0x40>)
 8004e04:	4c0a      	ldr	r4, [pc, #40]	; (8004e30 <__libc_init_array+0x44>)
 8004e06:	1b64      	subs	r4, r4, r5
 8004e08:	10a4      	asrs	r4, r4, #2
 8004e0a:	42a6      	cmp	r6, r4
 8004e0c:	d105      	bne.n	8004e1a <__libc_init_array+0x2e>
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}
 8004e10:	00b3      	lsls	r3, r6, #2
 8004e12:	58eb      	ldr	r3, [r5, r3]
 8004e14:	4798      	blx	r3
 8004e16:	3601      	adds	r6, #1
 8004e18:	e7ee      	b.n	8004df8 <__libc_init_array+0xc>
 8004e1a:	00b3      	lsls	r3, r6, #2
 8004e1c:	58eb      	ldr	r3, [r5, r3]
 8004e1e:	4798      	blx	r3
 8004e20:	3601      	adds	r6, #1
 8004e22:	e7f2      	b.n	8004e0a <__libc_init_array+0x1e>
 8004e24:	08005d04 	.word	0x08005d04
 8004e28:	08005d04 	.word	0x08005d04
 8004e2c:	08005d04 	.word	0x08005d04
 8004e30:	08005d08 	.word	0x08005d08

08004e34 <memcpy>:
 8004e34:	2300      	movs	r3, #0
 8004e36:	b510      	push	{r4, lr}
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d100      	bne.n	8004e3e <memcpy+0xa>
 8004e3c:	bd10      	pop	{r4, pc}
 8004e3e:	5ccc      	ldrb	r4, [r1, r3]
 8004e40:	54c4      	strb	r4, [r0, r3]
 8004e42:	3301      	adds	r3, #1
 8004e44:	e7f8      	b.n	8004e38 <memcpy+0x4>

08004e46 <memset>:
 8004e46:	0003      	movs	r3, r0
 8004e48:	1812      	adds	r2, r2, r0
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d100      	bne.n	8004e50 <memset+0xa>
 8004e4e:	4770      	bx	lr
 8004e50:	7019      	strb	r1, [r3, #0]
 8004e52:	3301      	adds	r3, #1
 8004e54:	e7f9      	b.n	8004e4a <memset+0x4>
	...

08004e58 <siprintf>:
 8004e58:	b40e      	push	{r1, r2, r3}
 8004e5a:	b500      	push	{lr}
 8004e5c:	490b      	ldr	r1, [pc, #44]	; (8004e8c <siprintf+0x34>)
 8004e5e:	b09c      	sub	sp, #112	; 0x70
 8004e60:	ab1d      	add	r3, sp, #116	; 0x74
 8004e62:	9002      	str	r0, [sp, #8]
 8004e64:	9006      	str	r0, [sp, #24]
 8004e66:	9107      	str	r1, [sp, #28]
 8004e68:	9104      	str	r1, [sp, #16]
 8004e6a:	4809      	ldr	r0, [pc, #36]	; (8004e90 <siprintf+0x38>)
 8004e6c:	4909      	ldr	r1, [pc, #36]	; (8004e94 <siprintf+0x3c>)
 8004e6e:	cb04      	ldmia	r3!, {r2}
 8004e70:	9105      	str	r1, [sp, #20]
 8004e72:	6800      	ldr	r0, [r0, #0]
 8004e74:	a902      	add	r1, sp, #8
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	f000 f886 	bl	8004f88 <_svfiprintf_r>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	9a02      	ldr	r2, [sp, #8]
 8004e80:	7013      	strb	r3, [r2, #0]
 8004e82:	b01c      	add	sp, #112	; 0x70
 8004e84:	bc08      	pop	{r3}
 8004e86:	b003      	add	sp, #12
 8004e88:	4718      	bx	r3
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	7fffffff 	.word	0x7fffffff
 8004e90:	2000000c 	.word	0x2000000c
 8004e94:	ffff0208 	.word	0xffff0208

08004e98 <strcat>:
 8004e98:	0002      	movs	r2, r0
 8004e9a:	b510      	push	{r4, lr}
 8004e9c:	7813      	ldrb	r3, [r2, #0]
 8004e9e:	1c54      	adds	r4, r2, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d105      	bne.n	8004eb0 <strcat+0x18>
 8004ea4:	5ccc      	ldrb	r4, [r1, r3]
 8004ea6:	54d4      	strb	r4, [r2, r3]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	2c00      	cmp	r4, #0
 8004eac:	d1fa      	bne.n	8004ea4 <strcat+0xc>
 8004eae:	bd10      	pop	{r4, pc}
 8004eb0:	0022      	movs	r2, r4
 8004eb2:	e7f3      	b.n	8004e9c <strcat+0x4>

08004eb4 <strcpy>:
 8004eb4:	0003      	movs	r3, r0
 8004eb6:	780a      	ldrb	r2, [r1, #0]
 8004eb8:	3101      	adds	r1, #1
 8004eba:	701a      	strb	r2, [r3, #0]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	2a00      	cmp	r2, #0
 8004ec0:	d1f9      	bne.n	8004eb6 <strcpy+0x2>
 8004ec2:	4770      	bx	lr

08004ec4 <__ssputs_r>:
 8004ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ec6:	688e      	ldr	r6, [r1, #8]
 8004ec8:	b085      	sub	sp, #20
 8004eca:	0007      	movs	r7, r0
 8004ecc:	000c      	movs	r4, r1
 8004ece:	9203      	str	r2, [sp, #12]
 8004ed0:	9301      	str	r3, [sp, #4]
 8004ed2:	429e      	cmp	r6, r3
 8004ed4:	d83c      	bhi.n	8004f50 <__ssputs_r+0x8c>
 8004ed6:	2390      	movs	r3, #144	; 0x90
 8004ed8:	898a      	ldrh	r2, [r1, #12]
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	421a      	tst	r2, r3
 8004ede:	d034      	beq.n	8004f4a <__ssputs_r+0x86>
 8004ee0:	2503      	movs	r5, #3
 8004ee2:	6909      	ldr	r1, [r1, #16]
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	1a5b      	subs	r3, r3, r1
 8004ee8:	9302      	str	r3, [sp, #8]
 8004eea:	6963      	ldr	r3, [r4, #20]
 8004eec:	9802      	ldr	r0, [sp, #8]
 8004eee:	435d      	muls	r5, r3
 8004ef0:	0feb      	lsrs	r3, r5, #31
 8004ef2:	195d      	adds	r5, r3, r5
 8004ef4:	9b01      	ldr	r3, [sp, #4]
 8004ef6:	106d      	asrs	r5, r5, #1
 8004ef8:	3301      	adds	r3, #1
 8004efa:	181b      	adds	r3, r3, r0
 8004efc:	42ab      	cmp	r3, r5
 8004efe:	d900      	bls.n	8004f02 <__ssputs_r+0x3e>
 8004f00:	001d      	movs	r5, r3
 8004f02:	0553      	lsls	r3, r2, #21
 8004f04:	d532      	bpl.n	8004f6c <__ssputs_r+0xa8>
 8004f06:	0029      	movs	r1, r5
 8004f08:	0038      	movs	r0, r7
 8004f0a:	f000 fb19 	bl	8005540 <_malloc_r>
 8004f0e:	1e06      	subs	r6, r0, #0
 8004f10:	d109      	bne.n	8004f26 <__ssputs_r+0x62>
 8004f12:	230c      	movs	r3, #12
 8004f14:	603b      	str	r3, [r7, #0]
 8004f16:	2340      	movs	r3, #64	; 0x40
 8004f18:	2001      	movs	r0, #1
 8004f1a:	89a2      	ldrh	r2, [r4, #12]
 8004f1c:	4240      	negs	r0, r0
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	81a3      	strh	r3, [r4, #12]
 8004f22:	b005      	add	sp, #20
 8004f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f26:	9a02      	ldr	r2, [sp, #8]
 8004f28:	6921      	ldr	r1, [r4, #16]
 8004f2a:	f7ff ff83 	bl	8004e34 <memcpy>
 8004f2e:	89a3      	ldrh	r3, [r4, #12]
 8004f30:	4a14      	ldr	r2, [pc, #80]	; (8004f84 <__ssputs_r+0xc0>)
 8004f32:	401a      	ands	r2, r3
 8004f34:	2380      	movs	r3, #128	; 0x80
 8004f36:	4313      	orrs	r3, r2
 8004f38:	81a3      	strh	r3, [r4, #12]
 8004f3a:	9b02      	ldr	r3, [sp, #8]
 8004f3c:	6126      	str	r6, [r4, #16]
 8004f3e:	18f6      	adds	r6, r6, r3
 8004f40:	6026      	str	r6, [r4, #0]
 8004f42:	6165      	str	r5, [r4, #20]
 8004f44:	9e01      	ldr	r6, [sp, #4]
 8004f46:	1aed      	subs	r5, r5, r3
 8004f48:	60a5      	str	r5, [r4, #8]
 8004f4a:	9b01      	ldr	r3, [sp, #4]
 8004f4c:	429e      	cmp	r6, r3
 8004f4e:	d900      	bls.n	8004f52 <__ssputs_r+0x8e>
 8004f50:	9e01      	ldr	r6, [sp, #4]
 8004f52:	0032      	movs	r2, r6
 8004f54:	9903      	ldr	r1, [sp, #12]
 8004f56:	6820      	ldr	r0, [r4, #0]
 8004f58:	f000 fa95 	bl	8005486 <memmove>
 8004f5c:	68a3      	ldr	r3, [r4, #8]
 8004f5e:	2000      	movs	r0, #0
 8004f60:	1b9b      	subs	r3, r3, r6
 8004f62:	60a3      	str	r3, [r4, #8]
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	199e      	adds	r6, r3, r6
 8004f68:	6026      	str	r6, [r4, #0]
 8004f6a:	e7da      	b.n	8004f22 <__ssputs_r+0x5e>
 8004f6c:	002a      	movs	r2, r5
 8004f6e:	0038      	movs	r0, r7
 8004f70:	f000 fb44 	bl	80055fc <_realloc_r>
 8004f74:	1e06      	subs	r6, r0, #0
 8004f76:	d1e0      	bne.n	8004f3a <__ssputs_r+0x76>
 8004f78:	6921      	ldr	r1, [r4, #16]
 8004f7a:	0038      	movs	r0, r7
 8004f7c:	f000 fa96 	bl	80054ac <_free_r>
 8004f80:	e7c7      	b.n	8004f12 <__ssputs_r+0x4e>
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	fffffb7f 	.word	0xfffffb7f

08004f88 <_svfiprintf_r>:
 8004f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f8a:	b0a1      	sub	sp, #132	; 0x84
 8004f8c:	9003      	str	r0, [sp, #12]
 8004f8e:	001d      	movs	r5, r3
 8004f90:	898b      	ldrh	r3, [r1, #12]
 8004f92:	000f      	movs	r7, r1
 8004f94:	0016      	movs	r6, r2
 8004f96:	061b      	lsls	r3, r3, #24
 8004f98:	d511      	bpl.n	8004fbe <_svfiprintf_r+0x36>
 8004f9a:	690b      	ldr	r3, [r1, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10e      	bne.n	8004fbe <_svfiprintf_r+0x36>
 8004fa0:	2140      	movs	r1, #64	; 0x40
 8004fa2:	f000 facd 	bl	8005540 <_malloc_r>
 8004fa6:	6038      	str	r0, [r7, #0]
 8004fa8:	6138      	str	r0, [r7, #16]
 8004faa:	2800      	cmp	r0, #0
 8004fac:	d105      	bne.n	8004fba <_svfiprintf_r+0x32>
 8004fae:	230c      	movs	r3, #12
 8004fb0:	9a03      	ldr	r2, [sp, #12]
 8004fb2:	3801      	subs	r0, #1
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	b021      	add	sp, #132	; 0x84
 8004fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fba:	2340      	movs	r3, #64	; 0x40
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	ac08      	add	r4, sp, #32
 8004fc2:	6163      	str	r3, [r4, #20]
 8004fc4:	3320      	adds	r3, #32
 8004fc6:	7663      	strb	r3, [r4, #25]
 8004fc8:	3310      	adds	r3, #16
 8004fca:	76a3      	strb	r3, [r4, #26]
 8004fcc:	9507      	str	r5, [sp, #28]
 8004fce:	0035      	movs	r5, r6
 8004fd0:	782b      	ldrb	r3, [r5, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <_svfiprintf_r+0x52>
 8004fd6:	2b25      	cmp	r3, #37	; 0x25
 8004fd8:	d146      	bne.n	8005068 <_svfiprintf_r+0xe0>
 8004fda:	1bab      	subs	r3, r5, r6
 8004fdc:	9305      	str	r3, [sp, #20]
 8004fde:	d00c      	beq.n	8004ffa <_svfiprintf_r+0x72>
 8004fe0:	0032      	movs	r2, r6
 8004fe2:	0039      	movs	r1, r7
 8004fe4:	9803      	ldr	r0, [sp, #12]
 8004fe6:	f7ff ff6d 	bl	8004ec4 <__ssputs_r>
 8004fea:	1c43      	adds	r3, r0, #1
 8004fec:	d100      	bne.n	8004ff0 <_svfiprintf_r+0x68>
 8004fee:	e0ae      	b.n	800514e <_svfiprintf_r+0x1c6>
 8004ff0:	6962      	ldr	r2, [r4, #20]
 8004ff2:	9b05      	ldr	r3, [sp, #20]
 8004ff4:	4694      	mov	ip, r2
 8004ff6:	4463      	add	r3, ip
 8004ff8:	6163      	str	r3, [r4, #20]
 8004ffa:	782b      	ldrb	r3, [r5, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d100      	bne.n	8005002 <_svfiprintf_r+0x7a>
 8005000:	e0a5      	b.n	800514e <_svfiprintf_r+0x1c6>
 8005002:	2201      	movs	r2, #1
 8005004:	2300      	movs	r3, #0
 8005006:	4252      	negs	r2, r2
 8005008:	6062      	str	r2, [r4, #4]
 800500a:	a904      	add	r1, sp, #16
 800500c:	3254      	adds	r2, #84	; 0x54
 800500e:	1852      	adds	r2, r2, r1
 8005010:	1c6e      	adds	r6, r5, #1
 8005012:	6023      	str	r3, [r4, #0]
 8005014:	60e3      	str	r3, [r4, #12]
 8005016:	60a3      	str	r3, [r4, #8]
 8005018:	7013      	strb	r3, [r2, #0]
 800501a:	65a3      	str	r3, [r4, #88]	; 0x58
 800501c:	7831      	ldrb	r1, [r6, #0]
 800501e:	2205      	movs	r2, #5
 8005020:	4853      	ldr	r0, [pc, #332]	; (8005170 <_svfiprintf_r+0x1e8>)
 8005022:	f000 fa25 	bl	8005470 <memchr>
 8005026:	1c75      	adds	r5, r6, #1
 8005028:	2800      	cmp	r0, #0
 800502a:	d11f      	bne.n	800506c <_svfiprintf_r+0xe4>
 800502c:	6822      	ldr	r2, [r4, #0]
 800502e:	06d3      	lsls	r3, r2, #27
 8005030:	d504      	bpl.n	800503c <_svfiprintf_r+0xb4>
 8005032:	2353      	movs	r3, #83	; 0x53
 8005034:	a904      	add	r1, sp, #16
 8005036:	185b      	adds	r3, r3, r1
 8005038:	2120      	movs	r1, #32
 800503a:	7019      	strb	r1, [r3, #0]
 800503c:	0713      	lsls	r3, r2, #28
 800503e:	d504      	bpl.n	800504a <_svfiprintf_r+0xc2>
 8005040:	2353      	movs	r3, #83	; 0x53
 8005042:	a904      	add	r1, sp, #16
 8005044:	185b      	adds	r3, r3, r1
 8005046:	212b      	movs	r1, #43	; 0x2b
 8005048:	7019      	strb	r1, [r3, #0]
 800504a:	7833      	ldrb	r3, [r6, #0]
 800504c:	2b2a      	cmp	r3, #42	; 0x2a
 800504e:	d016      	beq.n	800507e <_svfiprintf_r+0xf6>
 8005050:	0035      	movs	r5, r6
 8005052:	2100      	movs	r1, #0
 8005054:	200a      	movs	r0, #10
 8005056:	68e3      	ldr	r3, [r4, #12]
 8005058:	782a      	ldrb	r2, [r5, #0]
 800505a:	1c6e      	adds	r6, r5, #1
 800505c:	3a30      	subs	r2, #48	; 0x30
 800505e:	2a09      	cmp	r2, #9
 8005060:	d94e      	bls.n	8005100 <_svfiprintf_r+0x178>
 8005062:	2900      	cmp	r1, #0
 8005064:	d018      	beq.n	8005098 <_svfiprintf_r+0x110>
 8005066:	e010      	b.n	800508a <_svfiprintf_r+0x102>
 8005068:	3501      	adds	r5, #1
 800506a:	e7b1      	b.n	8004fd0 <_svfiprintf_r+0x48>
 800506c:	4b40      	ldr	r3, [pc, #256]	; (8005170 <_svfiprintf_r+0x1e8>)
 800506e:	6822      	ldr	r2, [r4, #0]
 8005070:	1ac0      	subs	r0, r0, r3
 8005072:	2301      	movs	r3, #1
 8005074:	4083      	lsls	r3, r0
 8005076:	4313      	orrs	r3, r2
 8005078:	6023      	str	r3, [r4, #0]
 800507a:	002e      	movs	r6, r5
 800507c:	e7ce      	b.n	800501c <_svfiprintf_r+0x94>
 800507e:	9b07      	ldr	r3, [sp, #28]
 8005080:	1d19      	adds	r1, r3, #4
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	9107      	str	r1, [sp, #28]
 8005086:	2b00      	cmp	r3, #0
 8005088:	db01      	blt.n	800508e <_svfiprintf_r+0x106>
 800508a:	930b      	str	r3, [sp, #44]	; 0x2c
 800508c:	e004      	b.n	8005098 <_svfiprintf_r+0x110>
 800508e:	425b      	negs	r3, r3
 8005090:	60e3      	str	r3, [r4, #12]
 8005092:	2302      	movs	r3, #2
 8005094:	4313      	orrs	r3, r2
 8005096:	6023      	str	r3, [r4, #0]
 8005098:	782b      	ldrb	r3, [r5, #0]
 800509a:	2b2e      	cmp	r3, #46	; 0x2e
 800509c:	d10a      	bne.n	80050b4 <_svfiprintf_r+0x12c>
 800509e:	786b      	ldrb	r3, [r5, #1]
 80050a0:	2b2a      	cmp	r3, #42	; 0x2a
 80050a2:	d135      	bne.n	8005110 <_svfiprintf_r+0x188>
 80050a4:	9b07      	ldr	r3, [sp, #28]
 80050a6:	3502      	adds	r5, #2
 80050a8:	1d1a      	adds	r2, r3, #4
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	9207      	str	r2, [sp, #28]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	db2b      	blt.n	800510a <_svfiprintf_r+0x182>
 80050b2:	9309      	str	r3, [sp, #36]	; 0x24
 80050b4:	4e2f      	ldr	r6, [pc, #188]	; (8005174 <_svfiprintf_r+0x1ec>)
 80050b6:	7829      	ldrb	r1, [r5, #0]
 80050b8:	2203      	movs	r2, #3
 80050ba:	0030      	movs	r0, r6
 80050bc:	f000 f9d8 	bl	8005470 <memchr>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	d006      	beq.n	80050d2 <_svfiprintf_r+0x14a>
 80050c4:	2340      	movs	r3, #64	; 0x40
 80050c6:	1b80      	subs	r0, r0, r6
 80050c8:	4083      	lsls	r3, r0
 80050ca:	6822      	ldr	r2, [r4, #0]
 80050cc:	3501      	adds	r5, #1
 80050ce:	4313      	orrs	r3, r2
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	7829      	ldrb	r1, [r5, #0]
 80050d4:	2206      	movs	r2, #6
 80050d6:	4828      	ldr	r0, [pc, #160]	; (8005178 <_svfiprintf_r+0x1f0>)
 80050d8:	1c6e      	adds	r6, r5, #1
 80050da:	7621      	strb	r1, [r4, #24]
 80050dc:	f000 f9c8 	bl	8005470 <memchr>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d03c      	beq.n	800515e <_svfiprintf_r+0x1d6>
 80050e4:	4b25      	ldr	r3, [pc, #148]	; (800517c <_svfiprintf_r+0x1f4>)
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d125      	bne.n	8005136 <_svfiprintf_r+0x1ae>
 80050ea:	2207      	movs	r2, #7
 80050ec:	9b07      	ldr	r3, [sp, #28]
 80050ee:	3307      	adds	r3, #7
 80050f0:	4393      	bics	r3, r2
 80050f2:	3308      	adds	r3, #8
 80050f4:	9307      	str	r3, [sp, #28]
 80050f6:	6963      	ldr	r3, [r4, #20]
 80050f8:	9a04      	ldr	r2, [sp, #16]
 80050fa:	189b      	adds	r3, r3, r2
 80050fc:	6163      	str	r3, [r4, #20]
 80050fe:	e766      	b.n	8004fce <_svfiprintf_r+0x46>
 8005100:	4343      	muls	r3, r0
 8005102:	2101      	movs	r1, #1
 8005104:	189b      	adds	r3, r3, r2
 8005106:	0035      	movs	r5, r6
 8005108:	e7a6      	b.n	8005058 <_svfiprintf_r+0xd0>
 800510a:	2301      	movs	r3, #1
 800510c:	425b      	negs	r3, r3
 800510e:	e7d0      	b.n	80050b2 <_svfiprintf_r+0x12a>
 8005110:	2300      	movs	r3, #0
 8005112:	200a      	movs	r0, #10
 8005114:	001a      	movs	r2, r3
 8005116:	3501      	adds	r5, #1
 8005118:	6063      	str	r3, [r4, #4]
 800511a:	7829      	ldrb	r1, [r5, #0]
 800511c:	1c6e      	adds	r6, r5, #1
 800511e:	3930      	subs	r1, #48	; 0x30
 8005120:	2909      	cmp	r1, #9
 8005122:	d903      	bls.n	800512c <_svfiprintf_r+0x1a4>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0c5      	beq.n	80050b4 <_svfiprintf_r+0x12c>
 8005128:	9209      	str	r2, [sp, #36]	; 0x24
 800512a:	e7c3      	b.n	80050b4 <_svfiprintf_r+0x12c>
 800512c:	4342      	muls	r2, r0
 800512e:	2301      	movs	r3, #1
 8005130:	1852      	adds	r2, r2, r1
 8005132:	0035      	movs	r5, r6
 8005134:	e7f1      	b.n	800511a <_svfiprintf_r+0x192>
 8005136:	ab07      	add	r3, sp, #28
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	003a      	movs	r2, r7
 800513c:	4b10      	ldr	r3, [pc, #64]	; (8005180 <_svfiprintf_r+0x1f8>)
 800513e:	0021      	movs	r1, r4
 8005140:	9803      	ldr	r0, [sp, #12]
 8005142:	e000      	b.n	8005146 <_svfiprintf_r+0x1be>
 8005144:	bf00      	nop
 8005146:	9004      	str	r0, [sp, #16]
 8005148:	9b04      	ldr	r3, [sp, #16]
 800514a:	3301      	adds	r3, #1
 800514c:	d1d3      	bne.n	80050f6 <_svfiprintf_r+0x16e>
 800514e:	89bb      	ldrh	r3, [r7, #12]
 8005150:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005152:	065b      	lsls	r3, r3, #25
 8005154:	d400      	bmi.n	8005158 <_svfiprintf_r+0x1d0>
 8005156:	e72e      	b.n	8004fb6 <_svfiprintf_r+0x2e>
 8005158:	2001      	movs	r0, #1
 800515a:	4240      	negs	r0, r0
 800515c:	e72b      	b.n	8004fb6 <_svfiprintf_r+0x2e>
 800515e:	ab07      	add	r3, sp, #28
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	003a      	movs	r2, r7
 8005164:	4b06      	ldr	r3, [pc, #24]	; (8005180 <_svfiprintf_r+0x1f8>)
 8005166:	0021      	movs	r1, r4
 8005168:	9803      	ldr	r0, [sp, #12]
 800516a:	f000 f879 	bl	8005260 <_printf_i>
 800516e:	e7ea      	b.n	8005146 <_svfiprintf_r+0x1be>
 8005170:	08005cd0 	.word	0x08005cd0
 8005174:	08005cd6 	.word	0x08005cd6
 8005178:	08005cda 	.word	0x08005cda
 800517c:	00000000 	.word	0x00000000
 8005180:	08004ec5 	.word	0x08004ec5

08005184 <_printf_common>:
 8005184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005186:	0015      	movs	r5, r2
 8005188:	9301      	str	r3, [sp, #4]
 800518a:	688a      	ldr	r2, [r1, #8]
 800518c:	690b      	ldr	r3, [r1, #16]
 800518e:	9000      	str	r0, [sp, #0]
 8005190:	000c      	movs	r4, r1
 8005192:	4293      	cmp	r3, r2
 8005194:	da00      	bge.n	8005198 <_printf_common+0x14>
 8005196:	0013      	movs	r3, r2
 8005198:	0022      	movs	r2, r4
 800519a:	602b      	str	r3, [r5, #0]
 800519c:	3243      	adds	r2, #67	; 0x43
 800519e:	7812      	ldrb	r2, [r2, #0]
 80051a0:	2a00      	cmp	r2, #0
 80051a2:	d001      	beq.n	80051a8 <_printf_common+0x24>
 80051a4:	3301      	adds	r3, #1
 80051a6:	602b      	str	r3, [r5, #0]
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	069b      	lsls	r3, r3, #26
 80051ac:	d502      	bpl.n	80051b4 <_printf_common+0x30>
 80051ae:	682b      	ldr	r3, [r5, #0]
 80051b0:	3302      	adds	r3, #2
 80051b2:	602b      	str	r3, [r5, #0]
 80051b4:	2706      	movs	r7, #6
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	401f      	ands	r7, r3
 80051ba:	d027      	beq.n	800520c <_printf_common+0x88>
 80051bc:	0023      	movs	r3, r4
 80051be:	3343      	adds	r3, #67	; 0x43
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	1e5a      	subs	r2, r3, #1
 80051c4:	4193      	sbcs	r3, r2
 80051c6:	6822      	ldr	r2, [r4, #0]
 80051c8:	0692      	lsls	r2, r2, #26
 80051ca:	d430      	bmi.n	800522e <_printf_common+0xaa>
 80051cc:	0022      	movs	r2, r4
 80051ce:	9901      	ldr	r1, [sp, #4]
 80051d0:	3243      	adds	r2, #67	; 0x43
 80051d2:	9800      	ldr	r0, [sp, #0]
 80051d4:	9e08      	ldr	r6, [sp, #32]
 80051d6:	47b0      	blx	r6
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	d025      	beq.n	8005228 <_printf_common+0xa4>
 80051dc:	2306      	movs	r3, #6
 80051de:	6820      	ldr	r0, [r4, #0]
 80051e0:	682a      	ldr	r2, [r5, #0]
 80051e2:	68e1      	ldr	r1, [r4, #12]
 80051e4:	4003      	ands	r3, r0
 80051e6:	2500      	movs	r5, #0
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d103      	bne.n	80051f4 <_printf_common+0x70>
 80051ec:	1a8d      	subs	r5, r1, r2
 80051ee:	43eb      	mvns	r3, r5
 80051f0:	17db      	asrs	r3, r3, #31
 80051f2:	401d      	ands	r5, r3
 80051f4:	68a3      	ldr	r3, [r4, #8]
 80051f6:	6922      	ldr	r2, [r4, #16]
 80051f8:	4293      	cmp	r3, r2
 80051fa:	dd01      	ble.n	8005200 <_printf_common+0x7c>
 80051fc:	1a9b      	subs	r3, r3, r2
 80051fe:	18ed      	adds	r5, r5, r3
 8005200:	2700      	movs	r7, #0
 8005202:	42bd      	cmp	r5, r7
 8005204:	d120      	bne.n	8005248 <_printf_common+0xc4>
 8005206:	2000      	movs	r0, #0
 8005208:	e010      	b.n	800522c <_printf_common+0xa8>
 800520a:	3701      	adds	r7, #1
 800520c:	68e3      	ldr	r3, [r4, #12]
 800520e:	682a      	ldr	r2, [r5, #0]
 8005210:	1a9b      	subs	r3, r3, r2
 8005212:	42bb      	cmp	r3, r7
 8005214:	ddd2      	ble.n	80051bc <_printf_common+0x38>
 8005216:	0022      	movs	r2, r4
 8005218:	2301      	movs	r3, #1
 800521a:	3219      	adds	r2, #25
 800521c:	9901      	ldr	r1, [sp, #4]
 800521e:	9800      	ldr	r0, [sp, #0]
 8005220:	9e08      	ldr	r6, [sp, #32]
 8005222:	47b0      	blx	r6
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d1f0      	bne.n	800520a <_printf_common+0x86>
 8005228:	2001      	movs	r0, #1
 800522a:	4240      	negs	r0, r0
 800522c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800522e:	2030      	movs	r0, #48	; 0x30
 8005230:	18e1      	adds	r1, r4, r3
 8005232:	3143      	adds	r1, #67	; 0x43
 8005234:	7008      	strb	r0, [r1, #0]
 8005236:	0021      	movs	r1, r4
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	3145      	adds	r1, #69	; 0x45
 800523c:	7809      	ldrb	r1, [r1, #0]
 800523e:	18a2      	adds	r2, r4, r2
 8005240:	3243      	adds	r2, #67	; 0x43
 8005242:	3302      	adds	r3, #2
 8005244:	7011      	strb	r1, [r2, #0]
 8005246:	e7c1      	b.n	80051cc <_printf_common+0x48>
 8005248:	0022      	movs	r2, r4
 800524a:	2301      	movs	r3, #1
 800524c:	321a      	adds	r2, #26
 800524e:	9901      	ldr	r1, [sp, #4]
 8005250:	9800      	ldr	r0, [sp, #0]
 8005252:	9e08      	ldr	r6, [sp, #32]
 8005254:	47b0      	blx	r6
 8005256:	1c43      	adds	r3, r0, #1
 8005258:	d0e6      	beq.n	8005228 <_printf_common+0xa4>
 800525a:	3701      	adds	r7, #1
 800525c:	e7d1      	b.n	8005202 <_printf_common+0x7e>
	...

08005260 <_printf_i>:
 8005260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005262:	b089      	sub	sp, #36	; 0x24
 8005264:	9204      	str	r2, [sp, #16]
 8005266:	000a      	movs	r2, r1
 8005268:	3243      	adds	r2, #67	; 0x43
 800526a:	9305      	str	r3, [sp, #20]
 800526c:	9003      	str	r0, [sp, #12]
 800526e:	9202      	str	r2, [sp, #8]
 8005270:	7e0a      	ldrb	r2, [r1, #24]
 8005272:	000c      	movs	r4, r1
 8005274:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005276:	2a6e      	cmp	r2, #110	; 0x6e
 8005278:	d100      	bne.n	800527c <_printf_i+0x1c>
 800527a:	e086      	b.n	800538a <_printf_i+0x12a>
 800527c:	d81f      	bhi.n	80052be <_printf_i+0x5e>
 800527e:	2a63      	cmp	r2, #99	; 0x63
 8005280:	d033      	beq.n	80052ea <_printf_i+0x8a>
 8005282:	d808      	bhi.n	8005296 <_printf_i+0x36>
 8005284:	2a00      	cmp	r2, #0
 8005286:	d100      	bne.n	800528a <_printf_i+0x2a>
 8005288:	e08c      	b.n	80053a4 <_printf_i+0x144>
 800528a:	2a58      	cmp	r2, #88	; 0x58
 800528c:	d04d      	beq.n	800532a <_printf_i+0xca>
 800528e:	0025      	movs	r5, r4
 8005290:	3542      	adds	r5, #66	; 0x42
 8005292:	702a      	strb	r2, [r5, #0]
 8005294:	e030      	b.n	80052f8 <_printf_i+0x98>
 8005296:	2a64      	cmp	r2, #100	; 0x64
 8005298:	d001      	beq.n	800529e <_printf_i+0x3e>
 800529a:	2a69      	cmp	r2, #105	; 0x69
 800529c:	d1f7      	bne.n	800528e <_printf_i+0x2e>
 800529e:	6819      	ldr	r1, [r3, #0]
 80052a0:	6825      	ldr	r5, [r4, #0]
 80052a2:	1d0a      	adds	r2, r1, #4
 80052a4:	0628      	lsls	r0, r5, #24
 80052a6:	d529      	bpl.n	80052fc <_printf_i+0x9c>
 80052a8:	6808      	ldr	r0, [r1, #0]
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	2800      	cmp	r0, #0
 80052ae:	da03      	bge.n	80052b8 <_printf_i+0x58>
 80052b0:	232d      	movs	r3, #45	; 0x2d
 80052b2:	9a02      	ldr	r2, [sp, #8]
 80052b4:	4240      	negs	r0, r0
 80052b6:	7013      	strb	r3, [r2, #0]
 80052b8:	4e6b      	ldr	r6, [pc, #428]	; (8005468 <_printf_i+0x208>)
 80052ba:	270a      	movs	r7, #10
 80052bc:	e04f      	b.n	800535e <_printf_i+0xfe>
 80052be:	2a73      	cmp	r2, #115	; 0x73
 80052c0:	d074      	beq.n	80053ac <_printf_i+0x14c>
 80052c2:	d808      	bhi.n	80052d6 <_printf_i+0x76>
 80052c4:	2a6f      	cmp	r2, #111	; 0x6f
 80052c6:	d01f      	beq.n	8005308 <_printf_i+0xa8>
 80052c8:	2a70      	cmp	r2, #112	; 0x70
 80052ca:	d1e0      	bne.n	800528e <_printf_i+0x2e>
 80052cc:	2220      	movs	r2, #32
 80052ce:	6809      	ldr	r1, [r1, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	6022      	str	r2, [r4, #0]
 80052d4:	e003      	b.n	80052de <_printf_i+0x7e>
 80052d6:	2a75      	cmp	r2, #117	; 0x75
 80052d8:	d016      	beq.n	8005308 <_printf_i+0xa8>
 80052da:	2a78      	cmp	r2, #120	; 0x78
 80052dc:	d1d7      	bne.n	800528e <_printf_i+0x2e>
 80052de:	0022      	movs	r2, r4
 80052e0:	2178      	movs	r1, #120	; 0x78
 80052e2:	3245      	adds	r2, #69	; 0x45
 80052e4:	7011      	strb	r1, [r2, #0]
 80052e6:	4e61      	ldr	r6, [pc, #388]	; (800546c <_printf_i+0x20c>)
 80052e8:	e022      	b.n	8005330 <_printf_i+0xd0>
 80052ea:	0025      	movs	r5, r4
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	3542      	adds	r5, #66	; 0x42
 80052f0:	1d11      	adds	r1, r2, #4
 80052f2:	6019      	str	r1, [r3, #0]
 80052f4:	6813      	ldr	r3, [r2, #0]
 80052f6:	702b      	strb	r3, [r5, #0]
 80052f8:	2301      	movs	r3, #1
 80052fa:	e065      	b.n	80053c8 <_printf_i+0x168>
 80052fc:	6808      	ldr	r0, [r1, #0]
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	0669      	lsls	r1, r5, #25
 8005302:	d5d3      	bpl.n	80052ac <_printf_i+0x4c>
 8005304:	b200      	sxth	r0, r0
 8005306:	e7d1      	b.n	80052ac <_printf_i+0x4c>
 8005308:	6819      	ldr	r1, [r3, #0]
 800530a:	6825      	ldr	r5, [r4, #0]
 800530c:	1d08      	adds	r0, r1, #4
 800530e:	6018      	str	r0, [r3, #0]
 8005310:	6808      	ldr	r0, [r1, #0]
 8005312:	062e      	lsls	r6, r5, #24
 8005314:	d505      	bpl.n	8005322 <_printf_i+0xc2>
 8005316:	4e54      	ldr	r6, [pc, #336]	; (8005468 <_printf_i+0x208>)
 8005318:	2708      	movs	r7, #8
 800531a:	2a6f      	cmp	r2, #111	; 0x6f
 800531c:	d01b      	beq.n	8005356 <_printf_i+0xf6>
 800531e:	270a      	movs	r7, #10
 8005320:	e019      	b.n	8005356 <_printf_i+0xf6>
 8005322:	066d      	lsls	r5, r5, #25
 8005324:	d5f7      	bpl.n	8005316 <_printf_i+0xb6>
 8005326:	b280      	uxth	r0, r0
 8005328:	e7f5      	b.n	8005316 <_printf_i+0xb6>
 800532a:	3145      	adds	r1, #69	; 0x45
 800532c:	4e4e      	ldr	r6, [pc, #312]	; (8005468 <_printf_i+0x208>)
 800532e:	700a      	strb	r2, [r1, #0]
 8005330:	6818      	ldr	r0, [r3, #0]
 8005332:	6822      	ldr	r2, [r4, #0]
 8005334:	1d01      	adds	r1, r0, #4
 8005336:	6800      	ldr	r0, [r0, #0]
 8005338:	6019      	str	r1, [r3, #0]
 800533a:	0615      	lsls	r5, r2, #24
 800533c:	d521      	bpl.n	8005382 <_printf_i+0x122>
 800533e:	07d3      	lsls	r3, r2, #31
 8005340:	d502      	bpl.n	8005348 <_printf_i+0xe8>
 8005342:	2320      	movs	r3, #32
 8005344:	431a      	orrs	r2, r3
 8005346:	6022      	str	r2, [r4, #0]
 8005348:	2710      	movs	r7, #16
 800534a:	2800      	cmp	r0, #0
 800534c:	d103      	bne.n	8005356 <_printf_i+0xf6>
 800534e:	2320      	movs	r3, #32
 8005350:	6822      	ldr	r2, [r4, #0]
 8005352:	439a      	bics	r2, r3
 8005354:	6022      	str	r2, [r4, #0]
 8005356:	0023      	movs	r3, r4
 8005358:	2200      	movs	r2, #0
 800535a:	3343      	adds	r3, #67	; 0x43
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	6863      	ldr	r3, [r4, #4]
 8005360:	60a3      	str	r3, [r4, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	db58      	blt.n	8005418 <_printf_i+0x1b8>
 8005366:	2204      	movs	r2, #4
 8005368:	6821      	ldr	r1, [r4, #0]
 800536a:	4391      	bics	r1, r2
 800536c:	6021      	str	r1, [r4, #0]
 800536e:	2800      	cmp	r0, #0
 8005370:	d154      	bne.n	800541c <_printf_i+0x1bc>
 8005372:	9d02      	ldr	r5, [sp, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d05a      	beq.n	800542e <_printf_i+0x1ce>
 8005378:	0025      	movs	r5, r4
 800537a:	7833      	ldrb	r3, [r6, #0]
 800537c:	3542      	adds	r5, #66	; 0x42
 800537e:	702b      	strb	r3, [r5, #0]
 8005380:	e055      	b.n	800542e <_printf_i+0x1ce>
 8005382:	0655      	lsls	r5, r2, #25
 8005384:	d5db      	bpl.n	800533e <_printf_i+0xde>
 8005386:	b280      	uxth	r0, r0
 8005388:	e7d9      	b.n	800533e <_printf_i+0xde>
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	680d      	ldr	r5, [r1, #0]
 800538e:	1d10      	adds	r0, r2, #4
 8005390:	6949      	ldr	r1, [r1, #20]
 8005392:	6018      	str	r0, [r3, #0]
 8005394:	6813      	ldr	r3, [r2, #0]
 8005396:	062e      	lsls	r6, r5, #24
 8005398:	d501      	bpl.n	800539e <_printf_i+0x13e>
 800539a:	6019      	str	r1, [r3, #0]
 800539c:	e002      	b.n	80053a4 <_printf_i+0x144>
 800539e:	066d      	lsls	r5, r5, #25
 80053a0:	d5fb      	bpl.n	800539a <_printf_i+0x13a>
 80053a2:	8019      	strh	r1, [r3, #0]
 80053a4:	2300      	movs	r3, #0
 80053a6:	9d02      	ldr	r5, [sp, #8]
 80053a8:	6123      	str	r3, [r4, #16]
 80053aa:	e04f      	b.n	800544c <_printf_i+0x1ec>
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	1d11      	adds	r1, r2, #4
 80053b0:	6019      	str	r1, [r3, #0]
 80053b2:	6815      	ldr	r5, [r2, #0]
 80053b4:	2100      	movs	r1, #0
 80053b6:	6862      	ldr	r2, [r4, #4]
 80053b8:	0028      	movs	r0, r5
 80053ba:	f000 f859 	bl	8005470 <memchr>
 80053be:	2800      	cmp	r0, #0
 80053c0:	d001      	beq.n	80053c6 <_printf_i+0x166>
 80053c2:	1b40      	subs	r0, r0, r5
 80053c4:	6060      	str	r0, [r4, #4]
 80053c6:	6863      	ldr	r3, [r4, #4]
 80053c8:	6123      	str	r3, [r4, #16]
 80053ca:	2300      	movs	r3, #0
 80053cc:	9a02      	ldr	r2, [sp, #8]
 80053ce:	7013      	strb	r3, [r2, #0]
 80053d0:	e03c      	b.n	800544c <_printf_i+0x1ec>
 80053d2:	6923      	ldr	r3, [r4, #16]
 80053d4:	002a      	movs	r2, r5
 80053d6:	9904      	ldr	r1, [sp, #16]
 80053d8:	9803      	ldr	r0, [sp, #12]
 80053da:	9d05      	ldr	r5, [sp, #20]
 80053dc:	47a8      	blx	r5
 80053de:	1c43      	adds	r3, r0, #1
 80053e0:	d03e      	beq.n	8005460 <_printf_i+0x200>
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	079b      	lsls	r3, r3, #30
 80053e6:	d415      	bmi.n	8005414 <_printf_i+0x1b4>
 80053e8:	9b07      	ldr	r3, [sp, #28]
 80053ea:	68e0      	ldr	r0, [r4, #12]
 80053ec:	4298      	cmp	r0, r3
 80053ee:	da39      	bge.n	8005464 <_printf_i+0x204>
 80053f0:	0018      	movs	r0, r3
 80053f2:	e037      	b.n	8005464 <_printf_i+0x204>
 80053f4:	0022      	movs	r2, r4
 80053f6:	2301      	movs	r3, #1
 80053f8:	3219      	adds	r2, #25
 80053fa:	9904      	ldr	r1, [sp, #16]
 80053fc:	9803      	ldr	r0, [sp, #12]
 80053fe:	9e05      	ldr	r6, [sp, #20]
 8005400:	47b0      	blx	r6
 8005402:	1c43      	adds	r3, r0, #1
 8005404:	d02c      	beq.n	8005460 <_printf_i+0x200>
 8005406:	3501      	adds	r5, #1
 8005408:	68e3      	ldr	r3, [r4, #12]
 800540a:	9a07      	ldr	r2, [sp, #28]
 800540c:	1a9b      	subs	r3, r3, r2
 800540e:	42ab      	cmp	r3, r5
 8005410:	dcf0      	bgt.n	80053f4 <_printf_i+0x194>
 8005412:	e7e9      	b.n	80053e8 <_printf_i+0x188>
 8005414:	2500      	movs	r5, #0
 8005416:	e7f7      	b.n	8005408 <_printf_i+0x1a8>
 8005418:	2800      	cmp	r0, #0
 800541a:	d0ad      	beq.n	8005378 <_printf_i+0x118>
 800541c:	9d02      	ldr	r5, [sp, #8]
 800541e:	0039      	movs	r1, r7
 8005420:	f7fa fefe 	bl	8000220 <__aeabi_uidivmod>
 8005424:	5c73      	ldrb	r3, [r6, r1]
 8005426:	3d01      	subs	r5, #1
 8005428:	702b      	strb	r3, [r5, #0]
 800542a:	2800      	cmp	r0, #0
 800542c:	d1f7      	bne.n	800541e <_printf_i+0x1be>
 800542e:	2f08      	cmp	r7, #8
 8005430:	d109      	bne.n	8005446 <_printf_i+0x1e6>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	07db      	lsls	r3, r3, #31
 8005436:	d506      	bpl.n	8005446 <_printf_i+0x1e6>
 8005438:	6863      	ldr	r3, [r4, #4]
 800543a:	6922      	ldr	r2, [r4, #16]
 800543c:	4293      	cmp	r3, r2
 800543e:	dc02      	bgt.n	8005446 <_printf_i+0x1e6>
 8005440:	2330      	movs	r3, #48	; 0x30
 8005442:	3d01      	subs	r5, #1
 8005444:	702b      	strb	r3, [r5, #0]
 8005446:	9b02      	ldr	r3, [sp, #8]
 8005448:	1b5b      	subs	r3, r3, r5
 800544a:	6123      	str	r3, [r4, #16]
 800544c:	9b05      	ldr	r3, [sp, #20]
 800544e:	aa07      	add	r2, sp, #28
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	0021      	movs	r1, r4
 8005454:	9b04      	ldr	r3, [sp, #16]
 8005456:	9803      	ldr	r0, [sp, #12]
 8005458:	f7ff fe94 	bl	8005184 <_printf_common>
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d1b8      	bne.n	80053d2 <_printf_i+0x172>
 8005460:	2001      	movs	r0, #1
 8005462:	4240      	negs	r0, r0
 8005464:	b009      	add	sp, #36	; 0x24
 8005466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005468:	08005ce1 	.word	0x08005ce1
 800546c:	08005cf2 	.word	0x08005cf2

08005470 <memchr>:
 8005470:	b2c9      	uxtb	r1, r1
 8005472:	1882      	adds	r2, r0, r2
 8005474:	4290      	cmp	r0, r2
 8005476:	d101      	bne.n	800547c <memchr+0xc>
 8005478:	2000      	movs	r0, #0
 800547a:	4770      	bx	lr
 800547c:	7803      	ldrb	r3, [r0, #0]
 800547e:	428b      	cmp	r3, r1
 8005480:	d0fb      	beq.n	800547a <memchr+0xa>
 8005482:	3001      	adds	r0, #1
 8005484:	e7f6      	b.n	8005474 <memchr+0x4>

08005486 <memmove>:
 8005486:	b510      	push	{r4, lr}
 8005488:	4288      	cmp	r0, r1
 800548a:	d902      	bls.n	8005492 <memmove+0xc>
 800548c:	188b      	adds	r3, r1, r2
 800548e:	4298      	cmp	r0, r3
 8005490:	d303      	bcc.n	800549a <memmove+0x14>
 8005492:	2300      	movs	r3, #0
 8005494:	e007      	b.n	80054a6 <memmove+0x20>
 8005496:	5c8b      	ldrb	r3, [r1, r2]
 8005498:	5483      	strb	r3, [r0, r2]
 800549a:	3a01      	subs	r2, #1
 800549c:	d2fb      	bcs.n	8005496 <memmove+0x10>
 800549e:	bd10      	pop	{r4, pc}
 80054a0:	5ccc      	ldrb	r4, [r1, r3]
 80054a2:	54c4      	strb	r4, [r0, r3]
 80054a4:	3301      	adds	r3, #1
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d1fa      	bne.n	80054a0 <memmove+0x1a>
 80054aa:	e7f8      	b.n	800549e <memmove+0x18>

080054ac <_free_r>:
 80054ac:	b570      	push	{r4, r5, r6, lr}
 80054ae:	0005      	movs	r5, r0
 80054b0:	2900      	cmp	r1, #0
 80054b2:	d010      	beq.n	80054d6 <_free_r+0x2a>
 80054b4:	1f0c      	subs	r4, r1, #4
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	da00      	bge.n	80054be <_free_r+0x12>
 80054bc:	18e4      	adds	r4, r4, r3
 80054be:	0028      	movs	r0, r5
 80054c0:	f000 f8d4 	bl	800566c <__malloc_lock>
 80054c4:	4a1d      	ldr	r2, [pc, #116]	; (800553c <_free_r+0x90>)
 80054c6:	6813      	ldr	r3, [r2, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d105      	bne.n	80054d8 <_free_r+0x2c>
 80054cc:	6063      	str	r3, [r4, #4]
 80054ce:	6014      	str	r4, [r2, #0]
 80054d0:	0028      	movs	r0, r5
 80054d2:	f000 f8cc 	bl	800566e <__malloc_unlock>
 80054d6:	bd70      	pop	{r4, r5, r6, pc}
 80054d8:	42a3      	cmp	r3, r4
 80054da:	d909      	bls.n	80054f0 <_free_r+0x44>
 80054dc:	6821      	ldr	r1, [r4, #0]
 80054de:	1860      	adds	r0, r4, r1
 80054e0:	4283      	cmp	r3, r0
 80054e2:	d1f3      	bne.n	80054cc <_free_r+0x20>
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	1841      	adds	r1, r0, r1
 80054ea:	6021      	str	r1, [r4, #0]
 80054ec:	e7ee      	b.n	80054cc <_free_r+0x20>
 80054ee:	0013      	movs	r3, r2
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	2a00      	cmp	r2, #0
 80054f4:	d001      	beq.n	80054fa <_free_r+0x4e>
 80054f6:	42a2      	cmp	r2, r4
 80054f8:	d9f9      	bls.n	80054ee <_free_r+0x42>
 80054fa:	6819      	ldr	r1, [r3, #0]
 80054fc:	1858      	adds	r0, r3, r1
 80054fe:	42a0      	cmp	r0, r4
 8005500:	d10b      	bne.n	800551a <_free_r+0x6e>
 8005502:	6820      	ldr	r0, [r4, #0]
 8005504:	1809      	adds	r1, r1, r0
 8005506:	1858      	adds	r0, r3, r1
 8005508:	6019      	str	r1, [r3, #0]
 800550a:	4282      	cmp	r2, r0
 800550c:	d1e0      	bne.n	80054d0 <_free_r+0x24>
 800550e:	6810      	ldr	r0, [r2, #0]
 8005510:	6852      	ldr	r2, [r2, #4]
 8005512:	1841      	adds	r1, r0, r1
 8005514:	6019      	str	r1, [r3, #0]
 8005516:	605a      	str	r2, [r3, #4]
 8005518:	e7da      	b.n	80054d0 <_free_r+0x24>
 800551a:	42a0      	cmp	r0, r4
 800551c:	d902      	bls.n	8005524 <_free_r+0x78>
 800551e:	230c      	movs	r3, #12
 8005520:	602b      	str	r3, [r5, #0]
 8005522:	e7d5      	b.n	80054d0 <_free_r+0x24>
 8005524:	6821      	ldr	r1, [r4, #0]
 8005526:	1860      	adds	r0, r4, r1
 8005528:	4282      	cmp	r2, r0
 800552a:	d103      	bne.n	8005534 <_free_r+0x88>
 800552c:	6810      	ldr	r0, [r2, #0]
 800552e:	6852      	ldr	r2, [r2, #4]
 8005530:	1841      	adds	r1, r0, r1
 8005532:	6021      	str	r1, [r4, #0]
 8005534:	6062      	str	r2, [r4, #4]
 8005536:	605c      	str	r4, [r3, #4]
 8005538:	e7ca      	b.n	80054d0 <_free_r+0x24>
 800553a:	46c0      	nop			; (mov r8, r8)
 800553c:	20000090 	.word	0x20000090

08005540 <_malloc_r>:
 8005540:	2303      	movs	r3, #3
 8005542:	b570      	push	{r4, r5, r6, lr}
 8005544:	1ccd      	adds	r5, r1, #3
 8005546:	439d      	bics	r5, r3
 8005548:	3508      	adds	r5, #8
 800554a:	0006      	movs	r6, r0
 800554c:	2d0c      	cmp	r5, #12
 800554e:	d21e      	bcs.n	800558e <_malloc_r+0x4e>
 8005550:	250c      	movs	r5, #12
 8005552:	42a9      	cmp	r1, r5
 8005554:	d81d      	bhi.n	8005592 <_malloc_r+0x52>
 8005556:	0030      	movs	r0, r6
 8005558:	f000 f888 	bl	800566c <__malloc_lock>
 800555c:	4a25      	ldr	r2, [pc, #148]	; (80055f4 <_malloc_r+0xb4>)
 800555e:	6814      	ldr	r4, [r2, #0]
 8005560:	0021      	movs	r1, r4
 8005562:	2900      	cmp	r1, #0
 8005564:	d119      	bne.n	800559a <_malloc_r+0x5a>
 8005566:	4c24      	ldr	r4, [pc, #144]	; (80055f8 <_malloc_r+0xb8>)
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d103      	bne.n	8005576 <_malloc_r+0x36>
 800556e:	0030      	movs	r0, r6
 8005570:	f000 f86a 	bl	8005648 <_sbrk_r>
 8005574:	6020      	str	r0, [r4, #0]
 8005576:	0029      	movs	r1, r5
 8005578:	0030      	movs	r0, r6
 800557a:	f000 f865 	bl	8005648 <_sbrk_r>
 800557e:	1c43      	adds	r3, r0, #1
 8005580:	d12b      	bne.n	80055da <_malloc_r+0x9a>
 8005582:	230c      	movs	r3, #12
 8005584:	0030      	movs	r0, r6
 8005586:	6033      	str	r3, [r6, #0]
 8005588:	f000 f871 	bl	800566e <__malloc_unlock>
 800558c:	e003      	b.n	8005596 <_malloc_r+0x56>
 800558e:	2d00      	cmp	r5, #0
 8005590:	dadf      	bge.n	8005552 <_malloc_r+0x12>
 8005592:	230c      	movs	r3, #12
 8005594:	6033      	str	r3, [r6, #0]
 8005596:	2000      	movs	r0, #0
 8005598:	bd70      	pop	{r4, r5, r6, pc}
 800559a:	680b      	ldr	r3, [r1, #0]
 800559c:	1b5b      	subs	r3, r3, r5
 800559e:	d419      	bmi.n	80055d4 <_malloc_r+0x94>
 80055a0:	2b0b      	cmp	r3, #11
 80055a2:	d903      	bls.n	80055ac <_malloc_r+0x6c>
 80055a4:	600b      	str	r3, [r1, #0]
 80055a6:	18cc      	adds	r4, r1, r3
 80055a8:	6025      	str	r5, [r4, #0]
 80055aa:	e003      	b.n	80055b4 <_malloc_r+0x74>
 80055ac:	684b      	ldr	r3, [r1, #4]
 80055ae:	428c      	cmp	r4, r1
 80055b0:	d10d      	bne.n	80055ce <_malloc_r+0x8e>
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	0030      	movs	r0, r6
 80055b6:	f000 f85a 	bl	800566e <__malloc_unlock>
 80055ba:	0020      	movs	r0, r4
 80055bc:	2207      	movs	r2, #7
 80055be:	300b      	adds	r0, #11
 80055c0:	1d23      	adds	r3, r4, #4
 80055c2:	4390      	bics	r0, r2
 80055c4:	1ac3      	subs	r3, r0, r3
 80055c6:	d0e7      	beq.n	8005598 <_malloc_r+0x58>
 80055c8:	425a      	negs	r2, r3
 80055ca:	50e2      	str	r2, [r4, r3]
 80055cc:	e7e4      	b.n	8005598 <_malloc_r+0x58>
 80055ce:	6063      	str	r3, [r4, #4]
 80055d0:	000c      	movs	r4, r1
 80055d2:	e7ef      	b.n	80055b4 <_malloc_r+0x74>
 80055d4:	000c      	movs	r4, r1
 80055d6:	6849      	ldr	r1, [r1, #4]
 80055d8:	e7c3      	b.n	8005562 <_malloc_r+0x22>
 80055da:	2303      	movs	r3, #3
 80055dc:	1cc4      	adds	r4, r0, #3
 80055de:	439c      	bics	r4, r3
 80055e0:	42a0      	cmp	r0, r4
 80055e2:	d0e1      	beq.n	80055a8 <_malloc_r+0x68>
 80055e4:	1a21      	subs	r1, r4, r0
 80055e6:	0030      	movs	r0, r6
 80055e8:	f000 f82e 	bl	8005648 <_sbrk_r>
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	d1db      	bne.n	80055a8 <_malloc_r+0x68>
 80055f0:	e7c7      	b.n	8005582 <_malloc_r+0x42>
 80055f2:	46c0      	nop			; (mov r8, r8)
 80055f4:	20000090 	.word	0x20000090
 80055f8:	20000094 	.word	0x20000094

080055fc <_realloc_r>:
 80055fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fe:	0007      	movs	r7, r0
 8005600:	000d      	movs	r5, r1
 8005602:	0016      	movs	r6, r2
 8005604:	2900      	cmp	r1, #0
 8005606:	d105      	bne.n	8005614 <_realloc_r+0x18>
 8005608:	0011      	movs	r1, r2
 800560a:	f7ff ff99 	bl	8005540 <_malloc_r>
 800560e:	0004      	movs	r4, r0
 8005610:	0020      	movs	r0, r4
 8005612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005614:	2a00      	cmp	r2, #0
 8005616:	d103      	bne.n	8005620 <_realloc_r+0x24>
 8005618:	f7ff ff48 	bl	80054ac <_free_r>
 800561c:	0034      	movs	r4, r6
 800561e:	e7f7      	b.n	8005610 <_realloc_r+0x14>
 8005620:	f000 f826 	bl	8005670 <_malloc_usable_size_r>
 8005624:	002c      	movs	r4, r5
 8005626:	42b0      	cmp	r0, r6
 8005628:	d2f2      	bcs.n	8005610 <_realloc_r+0x14>
 800562a:	0031      	movs	r1, r6
 800562c:	0038      	movs	r0, r7
 800562e:	f7ff ff87 	bl	8005540 <_malloc_r>
 8005632:	1e04      	subs	r4, r0, #0
 8005634:	d0ec      	beq.n	8005610 <_realloc_r+0x14>
 8005636:	0029      	movs	r1, r5
 8005638:	0032      	movs	r2, r6
 800563a:	f7ff fbfb 	bl	8004e34 <memcpy>
 800563e:	0029      	movs	r1, r5
 8005640:	0038      	movs	r0, r7
 8005642:	f7ff ff33 	bl	80054ac <_free_r>
 8005646:	e7e3      	b.n	8005610 <_realloc_r+0x14>

08005648 <_sbrk_r>:
 8005648:	2300      	movs	r3, #0
 800564a:	b570      	push	{r4, r5, r6, lr}
 800564c:	4c06      	ldr	r4, [pc, #24]	; (8005668 <_sbrk_r+0x20>)
 800564e:	0005      	movs	r5, r0
 8005650:	0008      	movs	r0, r1
 8005652:	6023      	str	r3, [r4, #0]
 8005654:	f7ff f8a8 	bl	80047a8 <_sbrk>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d103      	bne.n	8005664 <_sbrk_r+0x1c>
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d000      	beq.n	8005664 <_sbrk_r+0x1c>
 8005662:	602b      	str	r3, [r5, #0]
 8005664:	bd70      	pop	{r4, r5, r6, pc}
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	200001a0 	.word	0x200001a0

0800566c <__malloc_lock>:
 800566c:	4770      	bx	lr

0800566e <__malloc_unlock>:
 800566e:	4770      	bx	lr

08005670 <_malloc_usable_size_r>:
 8005670:	1f0b      	subs	r3, r1, #4
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	1f18      	subs	r0, r3, #4
 8005676:	2b00      	cmp	r3, #0
 8005678:	da01      	bge.n	800567e <_malloc_usable_size_r+0xe>
 800567a:	580b      	ldr	r3, [r1, r0]
 800567c:	18c0      	adds	r0, r0, r3
 800567e:	4770      	bx	lr

08005680 <_init>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005686:	bc08      	pop	{r3}
 8005688:	469e      	mov	lr, r3
 800568a:	4770      	bx	lr

0800568c <_fini>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005692:	bc08      	pop	{r3}
 8005694:	469e      	mov	lr, r3
 8005696:	4770      	bx	lr

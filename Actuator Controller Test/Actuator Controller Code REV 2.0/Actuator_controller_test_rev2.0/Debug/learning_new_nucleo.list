
learning_new_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08004bb0  08004bb0  00014bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dfc  08004dfc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08004dfc  08004dfc  00014dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e04  08004e04  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  200001dc  08004fe8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08004fe8  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b24e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b31  00000000  00000000  0002b45a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000980  00000000  00000000  0002cf90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000898  00000000  00000000  0002d910  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000255c6  00000000  00000000  0002e1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008315  00000000  00000000  0005376e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e74d2  00000000  00000000  0005ba83  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142f55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a50  00000000  00000000  00142fd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b98 	.word	0x08004b98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08004b98 	.word	0x08004b98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_UART_RxCpltCallback>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
//Interrupt callback routine
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    uint8_t i;
    if (huart->Instance == USART2)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a19      	ldr	r2, [pc, #100]	; (80005f4 <HAL_UART_RxCpltCallback+0x74>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d12b      	bne.n	80005ea <HAL_UART_RxCpltCallback+0x6a>
        {
        if (Rx_indx==0) {for (i=0;i<100;i++) Rx_Buffer[i]=0;}   //clear Rx_Buffer before receiving new data
 8000592:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <HAL_UART_RxCpltCallback+0x78>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d10c      	bne.n	80005b4 <HAL_UART_RxCpltCallback+0x34>
 800059a:	2300      	movs	r3, #0
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	e006      	b.n	80005ae <HAL_UART_RxCpltCallback+0x2e>
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	4a16      	ldr	r2, [pc, #88]	; (80005fc <HAL_UART_RxCpltCallback+0x7c>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	54d1      	strb	r1, [r2, r3]
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	3301      	adds	r3, #1
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	2b63      	cmp	r3, #99	; 0x63
 80005b2:	d9f5      	bls.n	80005a0 <HAL_UART_RxCpltCallback+0x20>

        if (Rx_data[0] != 13) //if received data different from ascii 13 (enter)
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <HAL_UART_RxCpltCallback+0x80>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b0d      	cmp	r3, #13
 80005ba:	d00b      	beq.n	80005d4 <HAL_UART_RxCpltCallback+0x54>
            {
            Rx_Buffer[Rx_indx++]=Rx_data[0];    //add data to Rx_Buffer
 80005bc:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <HAL_UART_RxCpltCallback+0x78>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	1c5a      	adds	r2, r3, #1
 80005c2:	b2d1      	uxtb	r1, r2
 80005c4:	4a0c      	ldr	r2, [pc, #48]	; (80005f8 <HAL_UART_RxCpltCallback+0x78>)
 80005c6:	7011      	strb	r1, [r2, #0]
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <HAL_UART_RxCpltCallback+0x80>)
 80005cc:	7819      	ldrb	r1, [r3, #0]
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <HAL_UART_RxCpltCallback+0x7c>)
 80005d0:	5499      	strb	r1, [r3, r2]
 80005d2:	e005      	b.n	80005e0 <HAL_UART_RxCpltCallback+0x60>
            }
        else            //if received data = 13
            {
            Rx_indx=0;
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <HAL_UART_RxCpltCallback+0x78>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
            Transfer_cplt = 1;//transfer complete, data is ready to read
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <HAL_UART_RxCpltCallback+0x84>)
 80005dc:	2201      	movs	r2, #1
 80005de:	701a      	strb	r2, [r3, #0]
            }

        HAL_UART_Receive_IT(&huart2, Rx_data, 1);   //activate UART receive interrupt every time
 80005e0:	2201      	movs	r2, #1
 80005e2:	4907      	ldr	r1, [pc, #28]	; (8000600 <HAL_UART_RxCpltCallback+0x80>)
 80005e4:	4808      	ldr	r0, [pc, #32]	; (8000608 <HAL_UART_RxCpltCallback+0x88>)
 80005e6:	f002 fef7 	bl	80033d8 <HAL_UART_Receive_IT>
        }

}
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40004400 	.word	0x40004400
 80005f8:	20000231 	.word	0x20000231
 80005fc:	200002a0 	.word	0x200002a0
 8000600:	20000234 	.word	0x20000234
 8000604:	20000230 	.word	0x20000230
 8000608:	20000368 	.word	0x20000368

0800060c <Tx_serial>:
// Transmit function
void Tx_serial(Tx_buffer)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	  sprintf(buffer, Tx_buffer);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4619      	mov	r1, r3
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <Tx_serial+0x40>)
 800061a:	f003 fe01 	bl	8004220 <siprintf>
	  len =strlen(buffer);
 800061e:	480b      	ldr	r0, [pc, #44]	; (800064c <Tx_serial+0x40>)
 8000620:	f7ff fdd6 	bl	80001d0 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <Tx_serial+0x44>)
 800062a:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, buffer, len, 1000);
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <Tx_serial+0x44>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	b29a      	uxth	r2, r3
 8000632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000636:	4905      	ldr	r1, [pc, #20]	; (800064c <Tx_serial+0x40>)
 8000638:	4806      	ldr	r0, [pc, #24]	; (8000654 <Tx_serial+0x48>)
 800063a:	f002 fe39 	bl	80032b0 <HAL_UART_Transmit>
	  Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <Tx_serial+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]

}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000023c 	.word	0x2000023c
 8000650:	200003e8 	.word	0x200003e8
 8000654:	20000368 	.word	0x20000368
 8000658:	20000230 	.word	0x20000230

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065e:	b08f      	sub	sp, #60	; 0x3c
 8000660:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000662:	f000 ff33 	bl	80014cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000666:	f000 fcb9 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066a:	f000 fd5d 	bl	8001128 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800066e:	f000 fd2b 	bl	80010c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2,Rx_data, 1); // Asserts UART Interrupt every time 1 byte is received.
 8000672:	2201      	movs	r2, #1
 8000674:	49d0      	ldr	r1, [pc, #832]	; (80009b8 <main+0x35c>)
 8000676:	48d1      	ldr	r0, [pc, #836]	; (80009bc <main+0x360>)
 8000678:	f002 feae 	bl	80033d8 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (Transfer_cplt)
 800067c:	4bd0      	ldr	r3, [pc, #832]	; (80009c0 <main+0x364>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	f000 8481 	beq.w	8000f88 <main+0x92c>
	      {
	     	 command = atoi(Rx_Buffer);
 8000686:	48cf      	ldr	r0, [pc, #828]	; (80009c4 <main+0x368>)
 8000688:	f003 fd93 	bl	80041b2 <atoi>
 800068c:	4602      	mov	r2, r0
 800068e:	4bce      	ldr	r3, [pc, #824]	; (80009c8 <main+0x36c>)
 8000690:	601a      	str	r2, [r3, #0]

	     	 switch (command){
 8000692:	4bcd      	ldr	r3, [pc, #820]	; (80009c8 <main+0x36c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	3b01      	subs	r3, #1
 8000698:	2b17      	cmp	r3, #23
 800069a:	f200 8470 	bhi.w	8000f7e <main+0x922>
 800069e:	a201      	add	r2, pc, #4	; (adr r2, 80006a4 <main+0x48>)
 80006a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a4:	08000705 	.word	0x08000705
 80006a8:	0800075d 	.word	0x0800075d
 80006ac:	080007b3 	.word	0x080007b3
 80006b0:	08000809 	.word	0x08000809
 80006b4:	0800085f 	.word	0x0800085f
 80006b8:	080008b5 	.word	0x080008b5
 80006bc:	0800090b 	.word	0x0800090b
 80006c0:	08000961 	.word	0x08000961
 80006c4:	080009dd 	.word	0x080009dd
 80006c8:	08000a33 	.word	0x08000a33
 80006cc:	08000a89 	.word	0x08000a89
 80006d0:	08000ad7 	.word	0x08000ad7
 80006d4:	08000b25 	.word	0x08000b25
 80006d8:	08000b73 	.word	0x08000b73
 80006dc:	08000bc1 	.word	0x08000bc1
 80006e0:	08000c07 	.word	0x08000c07
 80006e4:	08000c4d 	.word	0x08000c4d
 80006e8:	08000c93 	.word	0x08000c93
 80006ec:	08000cf5 	.word	0x08000cf5
 80006f0:	08000d43 	.word	0x08000d43
 80006f4:	08000d91 	.word	0x08000d91
 80006f8:	08000ddf 	.word	0x08000ddf
 80006fc:	08000e2d 	.word	0x08000e2d
 8000700:	08000eab 	.word	0x08000eab
	     	 	 case 1:
	     	 		//Turn ON           //For testing with LD2
	     	 			     	 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070e:	f001 fa6b 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 	  //Checking if the GPIO pin is high in case of errors
	     	 			     	 	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET)
 8000712:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071a:	f001 fa4d 	bl	8001bb8 <HAL_GPIO_ReadPin>
 800071e:	4603      	mov	r3, r0
 8000720:	2b01      	cmp	r3, #1
 8000722:	d103      	bne.n	800072c <main+0xd0>
	     	 			     	 	  	  {
	     	 			     	 	  	     	 //Tx_serial("Valve SOV1 is ON..\r\n");
	     	 			     	 	  	     	 sov1 = 1;
 8000724:	4ba9      	ldr	r3, [pc, #676]	; (80009cc <main+0x370>)
 8000726:	2201      	movs	r2, #1
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	e012      	b.n	8000752 <main+0xf6>
	     	 			     	 	  	   }
	     	 			     	 	  	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_RESET)
 800072c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000734:	f001 fa40 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d109      	bne.n	8000752 <main+0xf6>
	     	 			     	 	  	{
	     	 			     	 	  	    // GPIO pin was low reattempting to set high
	     	 			     	 	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000748:	f001 fa4e 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 	  	    sov1 = 1;
 800074c:	4b9f      	ldr	r3, [pc, #636]	; (80009cc <main+0x370>)
 800074e:	2201      	movs	r2, #1
 8000750:	601a      	str	r2, [r3, #0]
	     	 			     	 	  	}




	     	 	    Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 8000752:	4b9b      	ldr	r3, [pc, #620]	; (80009c0 <main+0x364>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
	     	 		break;
 8000758:	f000 bc17 	b.w	8000f8a <main+0x92e>

	     	 	 case 2:
	     	 		 //Turn OFF
	     	 			     	 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000766:	f001 fa3f 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 		//Checking if the GPIO pin is high
	     	 			     	 	    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET)
 800076a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800076e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000772:	f001 fa21 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000776:	4603      	mov	r3, r0
 8000778:	2b01      	cmp	r3, #1
 800077a:	d10a      	bne.n	8000792 <main+0x136>
	     	 			     	 	    {
	     	 			     	 	    	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000786:	f001 fa2f 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 			      sov1 = 0;
 800078a:	4b90      	ldr	r3, [pc, #576]	; (80009cc <main+0x370>)
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	e00b      	b.n	80007aa <main+0x14e>
	     	 			     	 	     }
	     	 			     	 	    else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_RESET)
 8000792:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079a:	f001 fa0d 	bl	8001bb8 <HAL_GPIO_ReadPin>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d102      	bne.n	80007aa <main+0x14e>
	     	 			     	 		{
	     	 			     	 			  sov1 = 0;
 80007a4:	4b89      	ldr	r3, [pc, #548]	; (80009cc <main+0x370>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]

	     	 			     	 		}

	     	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 80007aa:	4b85      	ldr	r3, [pc, #532]	; (80009c0 <main+0x364>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
	     	 		break;
 80007b0:	e3eb      	b.n	8000f8a <main+0x92e>
	     	 	 case 3:
	     	 		//Turn ON
	     	 			     	 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007bc:	f001 fa14 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 	  //Checking if the GPIO pin is high in case of errors
	     	 			     	 	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET)
 80007c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c8:	f001 f9f6 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d103      	bne.n	80007da <main+0x17e>
	     	 			     	 	  	  {
	     	 			     	 	  	     	 //Tx_serial("Valve SOV1 is ON..\r\n");
	     	 			     	 	  	     	 sov2 = 1;
 80007d2:	4b7f      	ldr	r3, [pc, #508]	; (80009d0 <main+0x374>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	e012      	b.n	8000800 <main+0x1a4>
	     	 			     	 	  	   }
	     	 			     	 	  	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET)
 80007da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f001 f9e9 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d109      	bne.n	8000800 <main+0x1a4>
	     	 			     	 	  	{
	     	 			     	 	  	    // GPIO pin was low reattempting to set high
	     	 			     	 	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f6:	f001 f9f7 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 	  	    sov2 = 1;
 80007fa:	4b75      	ldr	r3, [pc, #468]	; (80009d0 <main+0x374>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	601a      	str	r2, [r3, #0]
	     	 			     	 	  	}


	     	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 8000800:	4b6f      	ldr	r3, [pc, #444]	; (80009c0 <main+0x364>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
	     	 		break;
 8000806:	e3c0      	b.n	8000f8a <main+0x92e>
	     	 	 case 4:
	     	 		 //Turn OFF
	     	 			     	 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800080e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000812:	f001 f9e9 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 		//Checking if the GPIO pin is high
	     	 			     	 	    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET)
 8000816:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800081a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081e:	f001 f9cb 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000822:	4603      	mov	r3, r0
 8000824:	2b01      	cmp	r3, #1
 8000826:	d10a      	bne.n	800083e <main+0x1e2>
	     	 			     	 	    {
	     	 			     	 	    	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800082e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000832:	f001 f9d9 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 			      sov2 = 0;
 8000836:	4b66      	ldr	r3, [pc, #408]	; (80009d0 <main+0x374>)
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	e00b      	b.n	8000856 <main+0x1fa>
	     	 			     	 	     }
	     	 			     	 	    else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET)
 800083e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000846:	f001 f9b7 	bl	8001bb8 <HAL_GPIO_ReadPin>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d102      	bne.n	8000856 <main+0x1fa>
	     	 			     	 		{
	     	 			     	 			  sov2 = 0;
 8000850:	4b5f      	ldr	r3, [pc, #380]	; (80009d0 <main+0x374>)
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]

	     	 			     	 		}

	     	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 8000856:	4b5a      	ldr	r3, [pc, #360]	; (80009c0 <main+0x364>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
	     	 		break;
 800085c:	e395      	b.n	8000f8a <main+0x92e>
	     	 	 case 5:
	     	 		                    //Turn ON
	     	 			     	 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800085e:	2201      	movs	r2, #1
 8000860:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000868:	f001 f9be 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 	  //Checking if the GPIO pin is high in case of errors
	     	 			     	 	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET)
 800086c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000874:	f001 f9a0 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000878:	4603      	mov	r3, r0
 800087a:	2b01      	cmp	r3, #1
 800087c:	d103      	bne.n	8000886 <main+0x22a>
	     	 			     	 	  	  {
	     	 			     	 	  	     	 //Tx_serial("Valve SOV1 is ON..\r\n");
	     	 			     	 	  	     	 sov3 = 1;
 800087e:	4b55      	ldr	r3, [pc, #340]	; (80009d4 <main+0x378>)
 8000880:	2201      	movs	r2, #1
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	e012      	b.n	80008ac <main+0x250>
	     	 			     	 	  	   }
	     	 			     	 	  	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_RESET)
 8000886:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088e:	f001 f993 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d109      	bne.n	80008ac <main+0x250>
	     	 			     	 	  	{
	     	 			     	 	  	    // GPIO pin was low reattempting to set high
	     	 			     	 	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a2:	f001 f9a1 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 	  	    sov3 = 1;
 80008a6:	4b4b      	ldr	r3, [pc, #300]	; (80009d4 <main+0x378>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	601a      	str	r2, [r3, #0]
	     	 			     	 	  	}


	     	 		Transfer_cplt=0;
 80008ac:	4b44      	ldr	r3, [pc, #272]	; (80009c0 <main+0x364>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
	     	 		break;
 80008b2:	e36a      	b.n	8000f8a <main+0x92e>
	     	 	 case 6:
	     	 		                     //Turn OFF
	     	 			     	 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f001 f993 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 		//Checking if the GPIO pin is high
	     	 			     	 		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET)
 80008c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ca:	f001 f975 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d10a      	bne.n	80008ea <main+0x28e>
	     	 			     	 		{
	     	 			     	 			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008de:	f001 f983 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 			 sov3 = 0;
 80008e2:	4b3c      	ldr	r3, [pc, #240]	; (80009d4 <main+0x378>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	e00b      	b.n	8000902 <main+0x2a6>
	     	 			     	 		}
	     	 			     	 		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_RESET)
 80008ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f2:	f001 f961 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d102      	bne.n	8000902 <main+0x2a6>
	     	 			     	 		{
	     	 			     	 			  sov3 = 0;
 80008fc:	4b35      	ldr	r3, [pc, #212]	; (80009d4 <main+0x378>)
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]

	     	 			     	 		}
	     	 		Transfer_cplt=0;
 8000902:	4b2f      	ldr	r3, [pc, #188]	; (80009c0 <main+0x364>)
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
	     	 		break;
 8000908:	e33f      	b.n	8000f8a <main+0x92e>
	     	 	 case 7:
	     	 		                   //Turn ON
	     	 			     	 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000914:	f001 f968 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 		//Checking if the GPIO pin is high in case of errors
	     	 			     	 		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET)
 8000918:	f44f 7100 	mov.w	r1, #512	; 0x200
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f001 f94a 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000924:	4603      	mov	r3, r0
 8000926:	2b01      	cmp	r3, #1
 8000928:	d103      	bne.n	8000932 <main+0x2d6>
	     	 			     	 			{
	     	 			     	 			     	 sov4 = 1;
 800092a:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <main+0x37c>)
 800092c:	2201      	movs	r2, #1
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	e012      	b.n	8000958 <main+0x2fc>
	     	 			     	 			 }
	     	 			     	 		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET)
 8000932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093a:	f001 f93d 	bl	8001bb8 <HAL_GPIO_ReadPin>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d109      	bne.n	8000958 <main+0x2fc>
	     	 			     	 			  {
	     	 			     	 			      // GPIO pin was low reattempting to set high
	     	 			     	 			     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094e:	f001 f94b 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 			     sov4 = 1;
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <main+0x37c>)
 8000954:	2201      	movs	r2, #1
 8000956:	601a      	str	r2, [r3, #0]
	     	 			     	 			    }
	     	    	Transfer_cplt=0;
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <main+0x364>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
	     	    	 break;
 800095e:	e314      	b.n	8000f8a <main+0x92e>
	     	 	 case 8:
	     	 		                     //Turn OFF
	     	 			     	 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096a:	f001 f93d 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 		//Checking if the GPIO pin is high
	     	 			     	 		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET)
 800096e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000976:	f001 f91f 	bl	8001bb8 <HAL_GPIO_ReadPin>
 800097a:	4603      	mov	r3, r0
 800097c:	2b01      	cmp	r3, #1
 800097e:	d10a      	bne.n	8000996 <main+0x33a>
	     	 			     	 		{
	     	 			     	 			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098a:	f001 f92d 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 			 sov4 = 0;
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <main+0x37c>)
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	e00b      	b.n	80009ae <main+0x352>
	     	 			     	 		}
	     	 			     	 		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET)
 8000996:	f44f 7100 	mov.w	r1, #512	; 0x200
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f001 f90b 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <main+0x352>
	     	 			     	 		{
	     	 			     	 			  sov4 = 0;
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <main+0x37c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]

	     	 			     	 		}


	     	    	 Transfer_cplt=0;
 80009ae:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <main+0x364>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
	     	    	 break;
 80009b4:	e2e9      	b.n	8000f8a <main+0x92e>
 80009b6:	bf00      	nop
 80009b8:	20000234 	.word	0x20000234
 80009bc:	20000368 	.word	0x20000368
 80009c0:	20000230 	.word	0x20000230
 80009c4:	200002a0 	.word	0x200002a0
 80009c8:	20000238 	.word	0x20000238
 80009cc:	200001f8 	.word	0x200001f8
 80009d0:	200001fc 	.word	0x200001fc
 80009d4:	20000200 	.word	0x20000200
 80009d8:	20000204 	.word	0x20000204
	     	 	 case 9:
	     	 		//Turn ON
	     	 			     	 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f001 f8ff 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 	  //Checking if the GPIO pin is high in case of errors
	     	 			     	 	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET)
 80009ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f2:	f001 f8e1 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d103      	bne.n	8000a04 <main+0x3a8>
	     	 			     	 	  	  {
	     	 			     	 	  	     	 //Tx_serial("Valve SOV1 is ON..\r\n");
	     	 			     	 	  	     	 sov5 = 1;
 80009fc:	4bb6      	ldr	r3, [pc, #728]	; (8000cd8 <main+0x67c>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	e012      	b.n	8000a2a <main+0x3ce>
	     	 			     	 	  	   }
	     	 			     	 	  	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET)
 8000a04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f001 f8d4 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d109      	bne.n	8000a2a <main+0x3ce>
	     	 			     	 	  	{
	     	 			     	 	  	    // GPIO pin was low reattempting to set high
	     	 			     	 	  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a20:	f001 f8e2 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 	  	    sov5 = 1;
 8000a24:	4bac      	ldr	r3, [pc, #688]	; (8000cd8 <main+0x67c>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	601a      	str	r2, [r3, #0]
	     	 			     	 	  	}

	     	    	 Transfer_cplt=0;
 8000a2a:	4bac      	ldr	r3, [pc, #688]	; (8000cdc <main+0x680>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
	     	    	 break;
 8000a30:	e2ab      	b.n	8000f8a <main+0x92e>
	     	 	 case 10:
	     	 		 //Turn OFF
	     	 			     	 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3c:	f001 f8d4 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 		//Checking if the GPIO pin is high
	     	 			     	 	    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET)
 8000a40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a48:	f001 f8b6 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d10a      	bne.n	8000a68 <main+0x40c>
	     	 			     	 	    {
	     	 			     	 	    	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f001 f8c4 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 			      sov5 = 0;
 8000a60:	4b9d      	ldr	r3, [pc, #628]	; (8000cd8 <main+0x67c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	e00b      	b.n	8000a80 <main+0x424>
	     	 			     	 	     }
	     	 			     	 	    else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET)
 8000a68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a70:	f001 f8a2 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <main+0x424>
	     	 			     	 		{
	     	 			     	 			  sov5 = 0;
 8000a7a:	4b97      	ldr	r3, [pc, #604]	; (8000cd8 <main+0x67c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]

	     	 			     	 		}
	     	 		Transfer_cplt=0;
 8000a80:	4b96      	ldr	r3, [pc, #600]	; (8000cdc <main+0x680>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
	     	 		break;
 8000a86:	e280      	b.n	8000f8a <main+0x92e>
	     	 	 case 11:
	     	 		//Turn ON
	     	 			     	 		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8e:	4894      	ldr	r0, [pc, #592]	; (8000ce0 <main+0x684>)
 8000a90:	f001 f8aa 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 	  //Checking if the GPIO pin is high in case of errors
	     	 			     	 	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_SET)
 8000a94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a98:	4891      	ldr	r0, [pc, #580]	; (8000ce0 <main+0x684>)
 8000a9a:	f001 f88d 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d103      	bne.n	8000aac <main+0x450>
	     	 			     	 	  	  {
	     	 			     	 	  	     	 //Tx_serial("Valve SOV1 is ON..\r\n");
	     	 			     	 	  	     	 sov6 = 1;
 8000aa4:	4b8f      	ldr	r3, [pc, #572]	; (8000ce4 <main+0x688>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	e010      	b.n	8000ace <main+0x472>
	     	 			     	 	  	   }
	     	 			     	 	  	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET)
 8000aac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab0:	488b      	ldr	r0, [pc, #556]	; (8000ce0 <main+0x684>)
 8000ab2:	f001 f881 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d108      	bne.n	8000ace <main+0x472>
	     	 			     	 	  	{
	     	 			     	 	  	    // GPIO pin was low reattempting to set high
	     	 			     	 	  	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac2:	4887      	ldr	r0, [pc, #540]	; (8000ce0 <main+0x684>)
 8000ac4:	f001 f890 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 	  	    sov6 = 1;
 8000ac8:	4b86      	ldr	r3, [pc, #536]	; (8000ce4 <main+0x688>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	601a      	str	r2, [r3, #0]
	     	 			     	 	  	}

	     	 		Transfer_cplt=0;
 8000ace:	4b83      	ldr	r3, [pc, #524]	; (8000cdc <main+0x680>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
	     	 		break;
 8000ad4:	e259      	b.n	8000f8a <main+0x92e>
	     	 	 case 12:
	     	 		 //Turn OFF
	     	 			     	 		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000adc:	4880      	ldr	r0, [pc, #512]	; (8000ce0 <main+0x684>)
 8000ade:	f001 f883 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 		//Checking if the GPIO pin is high
	     	 			     	 	    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_SET)
 8000ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae6:	487e      	ldr	r0, [pc, #504]	; (8000ce0 <main+0x684>)
 8000ae8:	f001 f866 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d109      	bne.n	8000b06 <main+0x4aa>
	     	 			     	 	    {
	     	 			     	 	    	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af8:	4879      	ldr	r0, [pc, #484]	; (8000ce0 <main+0x684>)
 8000afa:	f001 f875 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 			      sov6 = 0;
 8000afe:	4b79      	ldr	r3, [pc, #484]	; (8000ce4 <main+0x688>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	e00a      	b.n	8000b1c <main+0x4c0>
	     	 			     	 	     }
	     	 			     	 	    else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET)
 8000b06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b0a:	4875      	ldr	r0, [pc, #468]	; (8000ce0 <main+0x684>)
 8000b0c:	f001 f854 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d102      	bne.n	8000b1c <main+0x4c0>
	     	 			     	 		{
	     	 			     	 			  sov6 = 0;
 8000b16:	4b73      	ldr	r3, [pc, #460]	; (8000ce4 <main+0x688>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]

	     	 			     	 		}
	     	 	     Transfer_cplt=0;
 8000b1c:	4b6f      	ldr	r3, [pc, #444]	; (8000cdc <main+0x680>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
	     	 		 break;
 8000b22:	e232      	b.n	8000f8a <main+0x92e>
	     	 	 case 13:
	     	 		//Turn ON
	     	 			     	 		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2a:	486d      	ldr	r0, [pc, #436]	; (8000ce0 <main+0x684>)
 8000b2c:	f001 f85c 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 	  //Checking if the GPIO pin is high in case of errors
	     	 			     	 	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_SET)
 8000b30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b34:	486a      	ldr	r0, [pc, #424]	; (8000ce0 <main+0x684>)
 8000b36:	f001 f83f 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d103      	bne.n	8000b48 <main+0x4ec>
	     	 			     	 	  	  {
	     	 			     	 	  	     	 //Tx_serial("Valve SOV1 is ON..\r\n");
	     	 			     	 	  	     	 sov7 = 1;
 8000b40:	4b69      	ldr	r3, [pc, #420]	; (8000ce8 <main+0x68c>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	e010      	b.n	8000b6a <main+0x50e>
	     	 			     	 	  	   }
	     	 			     	 	  	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_RESET)
 8000b48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4c:	4864      	ldr	r0, [pc, #400]	; (8000ce0 <main+0x684>)
 8000b4e:	f001 f833 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d108      	bne.n	8000b6a <main+0x50e>
	     	 			     	 	  	{
	     	 			     	 	  	    // GPIO pin was low reattempting to set high
	     	 			     	 	  	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5e:	4860      	ldr	r0, [pc, #384]	; (8000ce0 <main+0x684>)
 8000b60:	f001 f842 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 	  	    sov7 = 1;
 8000b64:	4b60      	ldr	r3, [pc, #384]	; (8000ce8 <main+0x68c>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
	     	 			     	 	  	}

	     	 		Transfer_cplt=0;
 8000b6a:	4b5c      	ldr	r3, [pc, #368]	; (8000cdc <main+0x680>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
	     	 		break;
 8000b70:	e20b      	b.n	8000f8a <main+0x92e>
	     	 	 case 14:
	     	 		 //Turn OFF
	     	 			     	 		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b78:	4859      	ldr	r0, [pc, #356]	; (8000ce0 <main+0x684>)
 8000b7a:	f001 f835 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 		//Checking if the GPIO pin is high
	     	 			     	 	    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_SET)
 8000b7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b82:	4857      	ldr	r0, [pc, #348]	; (8000ce0 <main+0x684>)
 8000b84:	f001 f818 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d109      	bne.n	8000ba2 <main+0x546>
	     	 			     	 	    {
	     	 			     	 	    	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b94:	4852      	ldr	r0, [pc, #328]	; (8000ce0 <main+0x684>)
 8000b96:	f001 f827 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 			      sov7 = 0;
 8000b9a:	4b53      	ldr	r3, [pc, #332]	; (8000ce8 <main+0x68c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	e00a      	b.n	8000bb8 <main+0x55c>
	     	 			     	 	     }
	     	 			     	 	    else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_RESET)
 8000ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba6:	484e      	ldr	r0, [pc, #312]	; (8000ce0 <main+0x684>)
 8000ba8:	f001 f806 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d102      	bne.n	8000bb8 <main+0x55c>
	     	 			     	 		{
	     	 			     	 			  sov7 = 0;
 8000bb2:	4b4d      	ldr	r3, [pc, #308]	; (8000ce8 <main+0x68c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]

	     	 			     	 		}
	     	 		Transfer_cplt=0;
 8000bb8:	4b48      	ldr	r3, [pc, #288]	; (8000cdc <main+0x680>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
	     	 		break;
 8000bbe:	e1e4      	b.n	8000f8a <main+0x92e>
	     	 	 case 15:
	     	 		//Turn ON
	     	 			     	 		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2180      	movs	r1, #128	; 0x80
 8000bc4:	4846      	ldr	r0, [pc, #280]	; (8000ce0 <main+0x684>)
 8000bc6:	f001 f80f 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 	  //Checking if the GPIO pin is high in case of errors
	     	 			     	 	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET)
 8000bca:	2180      	movs	r1, #128	; 0x80
 8000bcc:	4844      	ldr	r0, [pc, #272]	; (8000ce0 <main+0x684>)
 8000bce:	f000 fff3 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d103      	bne.n	8000be0 <main+0x584>
	     	 			     	 	  	  {
	     	 			     	 	  	     	 //Tx_serial("Valve SOV1 is ON..\r\n");
	     	 			     	 	  	     	 sov8 = 1;
 8000bd8:	4b44      	ldr	r3, [pc, #272]	; (8000cec <main+0x690>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	e00e      	b.n	8000bfe <main+0x5a2>
	     	 			     	 	  	   }
	     	 			     	 	  	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_RESET)
 8000be0:	2180      	movs	r1, #128	; 0x80
 8000be2:	483f      	ldr	r0, [pc, #252]	; (8000ce0 <main+0x684>)
 8000be4:	f000 ffe8 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d107      	bne.n	8000bfe <main+0x5a2>
	     	 			     	 	  	{
	     	 			     	 	  	    // GPIO pin was low reattempting to set high
	     	 			     	 	  	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	483b      	ldr	r0, [pc, #236]	; (8000ce0 <main+0x684>)
 8000bf4:	f000 fff8 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 	  	    sov8 = 1;
 8000bf8:	4b3c      	ldr	r3, [pc, #240]	; (8000cec <main+0x690>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	601a      	str	r2, [r3, #0]
	     	 			     	 	  	}

	     	 		Transfer_cplt=0;
 8000bfe:	4b37      	ldr	r3, [pc, #220]	; (8000cdc <main+0x680>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
	     	 		break;
 8000c04:	e1c1      	b.n	8000f8a <main+0x92e>
	     	 	 case 16:
	     	 		 //Turn OFF
	     	 			     	 		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	4835      	ldr	r0, [pc, #212]	; (8000ce0 <main+0x684>)
 8000c0c:	f000 ffec 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 		//Checking if the GPIO pin is high
	     	 			     	 	    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET)
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	4833      	ldr	r0, [pc, #204]	; (8000ce0 <main+0x684>)
 8000c14:	f000 ffd0 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d108      	bne.n	8000c30 <main+0x5d4>
	     	 			     	 	    {
	     	 			     	 	    	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2180      	movs	r1, #128	; 0x80
 8000c22:	482f      	ldr	r0, [pc, #188]	; (8000ce0 <main+0x684>)
 8000c24:	f000 ffe0 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 			      sov8 = 0;
 8000c28:	4b30      	ldr	r3, [pc, #192]	; (8000cec <main+0x690>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	e009      	b.n	8000c44 <main+0x5e8>
	     	 			     	 	     }
	     	 			     	 	    else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_RESET)
 8000c30:	2180      	movs	r1, #128	; 0x80
 8000c32:	482b      	ldr	r0, [pc, #172]	; (8000ce0 <main+0x684>)
 8000c34:	f000 ffc0 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d102      	bne.n	8000c44 <main+0x5e8>
	     	 			     	 		{
	     	 			     	 			  sov8 = 0;
 8000c3e:	4b2b      	ldr	r3, [pc, #172]	; (8000cec <main+0x690>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]

	     	 			     	 		}
	     	 		Transfer_cplt=0;
 8000c44:	4b25      	ldr	r3, [pc, #148]	; (8000cdc <main+0x680>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
	     	 		break;
 8000c4a:	e19e      	b.n	8000f8a <main+0x92e>
	     	 	 case 17:
	     	 		//Turn ON
	     	 			     	 		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2140      	movs	r1, #64	; 0x40
 8000c50:	4823      	ldr	r0, [pc, #140]	; (8000ce0 <main+0x684>)
 8000c52:	f000 ffc9 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 	  //Checking if the GPIO pin is high in case of errors
	     	 			     	 	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET)
 8000c56:	2140      	movs	r1, #64	; 0x40
 8000c58:	4821      	ldr	r0, [pc, #132]	; (8000ce0 <main+0x684>)
 8000c5a:	f000 ffad 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d103      	bne.n	8000c6c <main+0x610>
	     	 			     	 	  	  {
	     	 			     	 	  	     	 //Tx_serial("Valve SOV1 is ON..\r\n");
	     	 			     	 	  	     	 sov9 = 1;
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <main+0x694>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	e00e      	b.n	8000c8a <main+0x62e>
	     	 			     	 	  	   }
	     	 			     	 	  	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET)
 8000c6c:	2140      	movs	r1, #64	; 0x40
 8000c6e:	481c      	ldr	r0, [pc, #112]	; (8000ce0 <main+0x684>)
 8000c70:	f000 ffa2 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d107      	bne.n	8000c8a <main+0x62e>
	     	 			     	 	  	{
	     	 			     	 	  	    // GPIO pin was low reattempting to set high
	     	 			     	 	  	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2140      	movs	r1, #64	; 0x40
 8000c7e:	4818      	ldr	r0, [pc, #96]	; (8000ce0 <main+0x684>)
 8000c80:	f000 ffb2 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 	  	    sov9 = 1;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <main+0x694>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]
	     	 			     	 	  	}

	     	 		Transfer_cplt=0;
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <main+0x680>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
	     	 		break;
 8000c90:	e17b      	b.n	8000f8a <main+0x92e>
	     	 	 case 18:
	     	 		 //Turn OFF
	     	 			     	 		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2140      	movs	r1, #64	; 0x40
 8000c96:	4812      	ldr	r0, [pc, #72]	; (8000ce0 <main+0x684>)
 8000c98:	f000 ffa6 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 		//Checking if the GPIO pin is high
	     	 			     	 	    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET)
 8000c9c:	2140      	movs	r1, #64	; 0x40
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <main+0x684>)
 8000ca0:	f000 ff8a 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d108      	bne.n	8000cbc <main+0x660>
	     	 			     	 	    {
	     	 			     	 	    	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2140      	movs	r1, #64	; 0x40
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <main+0x684>)
 8000cb0:	f000 ff9a 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 			      sov9 = 0;
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <main+0x694>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	e009      	b.n	8000cd0 <main+0x674>
	     	 			     	 	     }
	     	 			     	 	    else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET)
 8000cbc:	2140      	movs	r1, #64	; 0x40
 8000cbe:	4808      	ldr	r0, [pc, #32]	; (8000ce0 <main+0x684>)
 8000cc0:	f000 ff7a 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d102      	bne.n	8000cd0 <main+0x674>
	     	 			     	 		{
	     	 			     	 			  sov9 = 0;
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <main+0x694>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]

	     	 			     	 		}
	     	 		Transfer_cplt=0;
 8000cd0:	4b02      	ldr	r3, [pc, #8]	; (8000cdc <main+0x680>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
	     	 		break;
 8000cd6:	e158      	b.n	8000f8a <main+0x92e>
 8000cd8:	20000208 	.word	0x20000208
 8000cdc:	20000230 	.word	0x20000230
 8000ce0:	48000800 	.word	0x48000800
 8000ce4:	2000020c 	.word	0x2000020c
 8000ce8:	20000210 	.word	0x20000210
 8000cec:	20000214 	.word	0x20000214
 8000cf0:	20000218 	.word	0x20000218
	     	 	 case 19:
	     	 		//Turn ON
	     	 			     	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cfa:	48a5      	ldr	r0, [pc, #660]	; (8000f90 <main+0x934>)
 8000cfc:	f000 ff74 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 	  //Checking if the GPIO pin is high in case of errors
	     	 			     	 	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET)
 8000d00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d04:	48a2      	ldr	r0, [pc, #648]	; (8000f90 <main+0x934>)
 8000d06:	f000 ff57 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d103      	bne.n	8000d18 <main+0x6bc>
	     	 			     	 	  	  {
	     	 			     	 	  	     	 //Tx_serial("Valve SOV1 is ON..\r\n");
	     	 			     	 	  	     	 ig1 = 1;
 8000d10:	4ba0      	ldr	r3, [pc, #640]	; (8000f94 <main+0x938>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	e010      	b.n	8000d3a <main+0x6de>
	     	 			     	 	  	   }
	     	 			     	 	  	else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET)
 8000d18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d1c:	489c      	ldr	r0, [pc, #624]	; (8000f90 <main+0x934>)
 8000d1e:	f000 ff4b 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d108      	bne.n	8000d3a <main+0x6de>
	     	 			     	 	  	{
	     	 			     	 	  	    // GPIO pin was low reattempting to set high
	     	 			     	 	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d2e:	4898      	ldr	r0, [pc, #608]	; (8000f90 <main+0x934>)
 8000d30:	f000 ff5a 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 	  	    ig1 = 1;
 8000d34:	4b97      	ldr	r3, [pc, #604]	; (8000f94 <main+0x938>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	601a      	str	r2, [r3, #0]
	     	 			     	 	  	}

	     	    	Transfer_cplt=0;
 8000d3a:	4b97      	ldr	r3, [pc, #604]	; (8000f98 <main+0x93c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
	     	    	 break;
 8000d40:	e123      	b.n	8000f8a <main+0x92e>
	     	 	 case 20:
	     	 		 //Turn OFF
	     	 			     	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d48:	4891      	ldr	r0, [pc, #580]	; (8000f90 <main+0x934>)
 8000d4a:	f000 ff4d 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 		//Checking if the GPIO pin is high
	     	 			     	 	    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET)
 8000d4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d52:	488f      	ldr	r0, [pc, #572]	; (8000f90 <main+0x934>)
 8000d54:	f000 ff30 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d109      	bne.n	8000d72 <main+0x716>
	     	 			     	 	    {
	     	 			     	 	    	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d64:	488a      	ldr	r0, [pc, #552]	; (8000f90 <main+0x934>)
 8000d66:	f000 ff3f 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 			      ig1 = 0;
 8000d6a:	4b8a      	ldr	r3, [pc, #552]	; (8000f94 <main+0x938>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	e00a      	b.n	8000d88 <main+0x72c>
	     	 			     	 	     }
	     	 			     	 	    else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET)
 8000d72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d76:	4886      	ldr	r0, [pc, #536]	; (8000f90 <main+0x934>)
 8000d78:	f000 ff1e 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d102      	bne.n	8000d88 <main+0x72c>
	     	 			     	 		{
	     	 			     	 			  ig1 = 0;
 8000d82:	4b84      	ldr	r3, [pc, #528]	; (8000f94 <main+0x938>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]

	     	 			     	 		}
	     	    	Transfer_cplt=0;
 8000d88:	4b83      	ldr	r3, [pc, #524]	; (8000f98 <main+0x93c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
	     	    	 break;
 8000d8e:	e0fc      	b.n	8000f8a <main+0x92e>


	     	 	 case 21:
	     	 		//Turn ON
	     	 			     	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d96:	487e      	ldr	r0, [pc, #504]	; (8000f90 <main+0x934>)
 8000d98:	f000 ff26 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 	  //Checking if the GPIO pin is high in case of errors
	     	 			     	 	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET)
 8000d9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da0:	487b      	ldr	r0, [pc, #492]	; (8000f90 <main+0x934>)
 8000da2:	f000 ff09 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d103      	bne.n	8000db4 <main+0x758>
	     	 			     	 	  	  {
	     	 			     	 	  	     	 //Tx_serial("Valve SOV1 is ON..\r\n");
	     	 			     	 	  	     	 ig2 = 1;
 8000dac:	4b7b      	ldr	r3, [pc, #492]	; (8000f9c <main+0x940>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	e010      	b.n	8000dd6 <main+0x77a>
	     	 			     	 	  	   }
	     	 			     	 	  	else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET)
 8000db4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000db8:	4875      	ldr	r0, [pc, #468]	; (8000f90 <main+0x934>)
 8000dba:	f000 fefd 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d108      	bne.n	8000dd6 <main+0x77a>
	     	 			     	 	  	{
	     	 			     	 	  	    // GPIO pin was low reattempting to set high
	     	 			     	 	  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dca:	4871      	ldr	r0, [pc, #452]	; (8000f90 <main+0x934>)
 8000dcc:	f000 ff0c 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 	  	    ig2 = 1;
 8000dd0:	4b72      	ldr	r3, [pc, #456]	; (8000f9c <main+0x940>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	601a      	str	r2, [r3, #0]
	     	 			     	 	  	}

	     	    	Transfer_cplt=0;
 8000dd6:	4b70      	ldr	r3, [pc, #448]	; (8000f98 <main+0x93c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
	     	    	 break;
 8000ddc:	e0d5      	b.n	8000f8a <main+0x92e>
	     	 	 case 22:
	     	 		 //Turn OFF
	     	 			     	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de4:	486a      	ldr	r0, [pc, #424]	; (8000f90 <main+0x934>)
 8000de6:	f000 feff 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 			     	 		//Checking if the GPIO pin is high
	     	 			     	 	    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET)
 8000dea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dee:	4868      	ldr	r0, [pc, #416]	; (8000f90 <main+0x934>)
 8000df0:	f000 fee2 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d109      	bne.n	8000e0e <main+0x7b2>
	     	 			     	 	    {
	     	 			     	 	    	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e00:	4863      	ldr	r0, [pc, #396]	; (8000f90 <main+0x934>)
 8000e02:	f000 fef1 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 			     	 			      ig2 = 0;
 8000e06:	4b65      	ldr	r3, [pc, #404]	; (8000f9c <main+0x940>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	e00a      	b.n	8000e24 <main+0x7c8>
	     	 			     	 	     }
	     	 			     	 	    else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET)
 8000e0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e12:	485f      	ldr	r0, [pc, #380]	; (8000f90 <main+0x934>)
 8000e14:	f000 fed0 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d102      	bne.n	8000e24 <main+0x7c8>
	     	 			     	 		{
	     	 			     	 			  ig2 = 0;
 8000e1e:	4b5f      	ldr	r3, [pc, #380]	; (8000f9c <main+0x940>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]

	     	 			     	 		}
	     	    	Transfer_cplt=0;
 8000e24:	4b5c      	ldr	r3, [pc, #368]	; (8000f98 <main+0x93c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
	     	    	 break;
 8000e2a:	e0ae      	b.n	8000f8a <main+0x92e>



	     	 	 case 23:
	     	 		// Status
	     	 		sprintf(buffer,"\n*** Valves and Igniters Status ***\r\n\n SOV1: %d\r\n SOV2: %d\r\n SOV3: %d\r\n SOV4: %d\r\n SOV5: %d\r\n SOV6: %d\r\n SOV7: %d\r\n SOV8: %d\r\n SOV9: %d\r\n IG1:  %d\r\n IG2:  %d\r\n", sov1, sov2, sov3, sov4, sov5, sov6, sov7, sov8, sov9, ig1, ig2);
 8000e2c:	4b5c      	ldr	r3, [pc, #368]	; (8000fa0 <main+0x944>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b5c      	ldr	r3, [pc, #368]	; (8000fa4 <main+0x948>)
 8000e34:	6819      	ldr	r1, [r3, #0]
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	4b5b      	ldr	r3, [pc, #364]	; (8000fa8 <main+0x94c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a5b      	ldr	r2, [pc, #364]	; (8000fac <main+0x950>)
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	495b      	ldr	r1, [pc, #364]	; (8000fb0 <main+0x954>)
 8000e42:	6809      	ldr	r1, [r1, #0]
 8000e44:	485b      	ldr	r0, [pc, #364]	; (8000fb4 <main+0x958>)
 8000e46:	6800      	ldr	r0, [r0, #0]
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	4c5b      	ldr	r4, [pc, #364]	; (8000fb8 <main+0x95c>)
 8000e4c:	6824      	ldr	r4, [r4, #0]
 8000e4e:	4d5b      	ldr	r5, [pc, #364]	; (8000fbc <main+0x960>)
 8000e50:	682d      	ldr	r5, [r5, #0]
 8000e52:	4e5b      	ldr	r6, [pc, #364]	; (8000fc0 <main+0x964>)
 8000e54:	6836      	ldr	r6, [r6, #0]
 8000e56:	484f      	ldr	r0, [pc, #316]	; (8000f94 <main+0x938>)
 8000e58:	6800      	ldr	r0, [r0, #0]
 8000e5a:	6038      	str	r0, [r7, #0]
 8000e5c:	484f      	ldr	r0, [pc, #316]	; (8000f9c <main+0x940>)
 8000e5e:	6800      	ldr	r0, [r0, #0]
 8000e60:	9008      	str	r0, [sp, #32]
 8000e62:	6838      	ldr	r0, [r7, #0]
 8000e64:	9007      	str	r0, [sp, #28]
 8000e66:	9606      	str	r6, [sp, #24]
 8000e68:	9505      	str	r5, [sp, #20]
 8000e6a:	9404      	str	r4, [sp, #16]
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	9003      	str	r0, [sp, #12]
 8000e70:	9102      	str	r1, [sp, #8]
 8000e72:	9201      	str	r2, [sp, #4]
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	4952      	ldr	r1, [pc, #328]	; (8000fc4 <main+0x968>)
 8000e7c:	4852      	ldr	r0, [pc, #328]	; (8000fc8 <main+0x96c>)
 8000e7e:	f003 f9cf 	bl	8004220 <siprintf>
	     	 		len =strlen(buffer);
 8000e82:	4851      	ldr	r0, [pc, #324]	; (8000fc8 <main+0x96c>)
 8000e84:	f7ff f9a4 	bl	80001d0 <strlen>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b4f      	ldr	r3, [pc, #316]	; (8000fcc <main+0x970>)
 8000e8e:	601a      	str	r2, [r3, #0]
	     	 		HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8000e90:	4b4e      	ldr	r3, [pc, #312]	; (8000fcc <main+0x970>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	494b      	ldr	r1, [pc, #300]	; (8000fc8 <main+0x96c>)
 8000e9c:	484c      	ldr	r0, [pc, #304]	; (8000fd0 <main+0x974>)
 8000e9e:	f002 fa07 	bl	80032b0 <HAL_UART_Transmit>

	     	 		//HAL_Delay(600);

	     	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 8000ea2:	4b3d      	ldr	r3, [pc, #244]	; (8000f98 <main+0x93c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
	     	 		break;
 8000ea8:	e06f      	b.n	8000f8a <main+0x92e>

	     	 	 case 24:
	                 //Exiting the python script means turning off all the valves and igniters
	     	 		sov1 = 0, sov2= 0, sov3= 0, sov4= 0, sov5= 0, sov6= 0, sov7= 0, sov8= 0,sov9= 0, ig1= 0, ig2 =0;
 8000eaa:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <main+0x944>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	4b3c      	ldr	r3, [pc, #240]	; (8000fa4 <main+0x948>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	4b3c      	ldr	r3, [pc, #240]	; (8000fa8 <main+0x94c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	4b3b      	ldr	r3, [pc, #236]	; (8000fac <main+0x950>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	4b3b      	ldr	r3, [pc, #236]	; (8000fb0 <main+0x954>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	4b3a      	ldr	r3, [pc, #232]	; (8000fb4 <main+0x958>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	4b3a      	ldr	r3, [pc, #232]	; (8000fb8 <main+0x95c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	4b39      	ldr	r3, [pc, #228]	; (8000fbc <main+0x960>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <main+0x964>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <main+0x938>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <main+0x940>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]

	     	 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef6:	f000 fe77 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f04:	f000 fe70 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f12:	f000 fe69 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f000 fe62 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2e:	f000 fe5b 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f38:	4826      	ldr	r0, [pc, #152]	; (8000fd4 <main+0x978>)
 8000f3a:	f000 fe55 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f44:	4823      	ldr	r0, [pc, #140]	; (8000fd4 <main+0x978>)
 8000f46:	f000 fe4f 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2180      	movs	r1, #128	; 0x80
 8000f4e:	4821      	ldr	r0, [pc, #132]	; (8000fd4 <main+0x978>)
 8000f50:	f000 fe4a 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2140      	movs	r1, #64	; 0x40
 8000f58:	481e      	ldr	r0, [pc, #120]	; (8000fd4 <main+0x978>)
 8000f5a:	f000 fe45 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f64:	480a      	ldr	r0, [pc, #40]	; (8000f90 <main+0x934>)
 8000f66:	f000 fe3f 	bl	8001be8 <HAL_GPIO_WritePin>
	     	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f70:	4807      	ldr	r0, [pc, #28]	; (8000f90 <main+0x934>)
 8000f72:	f000 fe39 	bl	8001be8 <HAL_GPIO_WritePin>

	     	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <main+0x93c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
	     	 		//After setting the status we can proceed to turn low all the GPIOs used.
	     	 	    break;
 8000f7c:	e005      	b.n	8000f8a <main+0x92e>

	     	 	 default:
	     	 		Tx_serial("Please enter a valid command...\r\n");
 8000f7e:	4816      	ldr	r0, [pc, #88]	; (8000fd8 <main+0x97c>)
 8000f80:	f7ff fb44 	bl	800060c <Tx_serial>
 8000f84:	f7ff bb7a 	b.w	800067c <main+0x20>

	     	 }

	         }// end of if(Transfer_cplt)
 8000f88:	bf00      	nop
	  if (Transfer_cplt)
 8000f8a:	f7ff bb77 	b.w	800067c <main+0x20>
 8000f8e:	bf00      	nop
 8000f90:	48000400 	.word	0x48000400
 8000f94:	2000021c 	.word	0x2000021c
 8000f98:	20000230 	.word	0x20000230
 8000f9c:	20000220 	.word	0x20000220
 8000fa0:	200001f8 	.word	0x200001f8
 8000fa4:	200001fc 	.word	0x200001fc
 8000fa8:	20000200 	.word	0x20000200
 8000fac:	20000204 	.word	0x20000204
 8000fb0:	20000208 	.word	0x20000208
 8000fb4:	2000020c 	.word	0x2000020c
 8000fb8:	20000210 	.word	0x20000210
 8000fbc:	20000214 	.word	0x20000214
 8000fc0:	20000218 	.word	0x20000218
 8000fc4:	08004bb0 	.word	0x08004bb0
 8000fc8:	2000023c 	.word	0x2000023c
 8000fcc:	200003e8 	.word	0x200003e8
 8000fd0:	20000368 	.word	0x20000368
 8000fd4:	48000800 	.word	0x48000800
 8000fd8:	08004c50 	.word	0x08004c50

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b0b8      	sub	sp, #224	; 0xe0
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fe6:	2244      	movs	r2, #68	; 0x44
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f003 f910 	bl	8004210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001000:	463b      	mov	r3, r7
 8001002:	2288      	movs	r2, #136	; 0x88
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f003 f902 	bl	8004210 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800100c:	2302      	movs	r3, #2
 800100e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001016:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800101a:	2310      	movs	r3, #16
 800101c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001020:	2302      	movs	r3, #2
 8001022:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001026:	2302      	movs	r3, #2
 8001028:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800102c:	2301      	movs	r3, #1
 800102e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001032:	230a      	movs	r3, #10
 8001034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001038:	2307      	movs	r3, #7
 800103a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800103e:	2302      	movs	r3, #2
 8001040:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001044:	2302      	movs	r3, #2
 8001046:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fe46 	bl	8001ce0 <HAL_RCC_OscConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800105a:	f000 f8fb 	bl	8001254 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105e:	230f      	movs	r3, #15
 8001060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001064:	2303      	movs	r3, #3
 8001066:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800107c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001080:	2104      	movs	r1, #4
 8001082:	4618      	mov	r0, r3
 8001084:	f001 fa12 	bl	80024ac <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800108e:	f000 f8e1 	bl	8001254 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001092:	2302      	movs	r3, #2
 8001094:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001096:	2300      	movs	r3, #0
 8001098:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109a:	463b      	mov	r3, r7
 800109c:	4618      	mov	r0, r3
 800109e:	f001 fc09 	bl	80028b4 <HAL_RCCEx_PeriphCLKConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80010a8:	f000 f8d4 	bl	8001254 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010b0:	f000 fdc0 	bl	8001c34 <HAL_PWREx_ControlVoltageScaling>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80010ba:	f000 f8cb 	bl	8001254 <Error_Handler>
  }
}
 80010be:	bf00      	nop
 80010c0:	37e0      	adds	r7, #224	; 0xe0
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010ce:	4a15      	ldr	r2, [pc, #84]	; (8001124 <MX_USART2_UART_Init+0x5c>)
 80010d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010ee:	220c      	movs	r2, #12
 80010f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <MX_USART2_UART_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_USART2_UART_Init+0x58>)
 8001106:	2200      	movs	r2, #0
 8001108:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_USART2_UART_Init+0x58>)
 800110c:	f002 f882 	bl	8003214 <HAL_UART_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001116:	f000 f89d 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000368 	.word	0x20000368
 8001124:	40004400 	.word	0x40004400

08001128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	4b41      	ldr	r3, [pc, #260]	; (8001244 <MX_GPIO_Init+0x11c>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a40      	ldr	r2, [pc, #256]	; (8001244 <MX_GPIO_Init+0x11c>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b3e      	ldr	r3, [pc, #248]	; (8001244 <MX_GPIO_Init+0x11c>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001156:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <MX_GPIO_Init+0x11c>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a3a      	ldr	r2, [pc, #232]	; (8001244 <MX_GPIO_Init+0x11c>)
 800115c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b38      	ldr	r3, [pc, #224]	; (8001244 <MX_GPIO_Init+0x11c>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b35      	ldr	r3, [pc, #212]	; (8001244 <MX_GPIO_Init+0x11c>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4a34      	ldr	r2, [pc, #208]	; (8001244 <MX_GPIO_Init+0x11c>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4b32      	ldr	r3, [pc, #200]	; (8001244 <MX_GPIO_Init+0x11c>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <MX_GPIO_Init+0x11c>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a2e      	ldr	r2, [pc, #184]	; (8001244 <MX_GPIO_Init+0x11c>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b2c      	ldr	r3, [pc, #176]	; (8001244 <MX_GPIO_Init+0x11c>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SOV5_Pin|SOV4_Pin|SOV3_Pin
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 51f9 	mov.w	r1, #7968	; 0x1f20
 80011a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a8:	f000 fd1e 	bl	8001be8 <HAL_GPIO_WritePin>
                          |SOV2_Pin|SOV1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IG2_Pin|IG1_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80011b2:	4825      	ldr	r0, [pc, #148]	; (8001248 <MX_GPIO_Init+0x120>)
 80011b4:	f000 fd18 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SOV9_Pin|SOV8_Pin|SOV7_Pin|SOV6_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80011be:	4823      	ldr	r0, [pc, #140]	; (800124c <MX_GPIO_Init+0x124>)
 80011c0:	f000 fd12 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <MX_GPIO_Init+0x128>)
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	481c      	ldr	r0, [pc, #112]	; (800124c <MX_GPIO_Init+0x124>)
 80011da:	f000 fb45 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SOV5_Pin SOV4_Pin SOV3_Pin
                           SOV2_Pin SOV1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SOV5_Pin|SOV4_Pin|SOV3_Pin
 80011de:	f44f 53f9 	mov.w	r3, #7968	; 0x1f20
 80011e2:	617b      	str	r3, [r7, #20]
                          |SOV2_Pin|SOV1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fa:	f000 fb35 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pins : IG2_Pin IG1_Pin */
  GPIO_InitStruct.Pin = IG2_Pin|IG1_Pin;
 80011fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <MX_GPIO_Init+0x120>)
 8001218:	f000 fb26 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pins : SOV9_Pin SOV8_Pin SOV7_Pin SOV6_Pin */
  GPIO_InitStruct.Pin = SOV9_Pin|SOV8_Pin|SOV7_Pin|SOV6_Pin;
 800121c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_GPIO_Init+0x124>)
 8001236:	f000 fb17 	bl	8001868 <HAL_GPIO_Init>

}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	; 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000
 8001248:	48000400 	.word	0x48000400
 800124c:	48000800 	.word	0x48000800
 8001250:	10210000 	.word	0x10210000

08001254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001258:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800125a:	e7fe      	b.n	800125a <Error_Handler+0x6>

0800125c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_MspInit+0x44>)
 8001264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <HAL_MspInit+0x44>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6613      	str	r3, [r2, #96]	; 0x60
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_MspInit+0x44>)
 8001270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_MspInit+0x44>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <HAL_MspInit+0x44>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	6593      	str	r3, [r2, #88]	; 0x58
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_MspInit+0x44>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000

080012a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <HAL_UART_MspInit+0x8c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d130      	bne.n	8001328 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <HAL_UART_MspInit+0x90>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ca:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <HAL_UART_MspInit+0x90>)
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d0:	6593      	str	r3, [r2, #88]	; 0x58
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_UART_MspInit+0x90>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_UART_MspInit+0x90>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	4a14      	ldr	r2, [pc, #80]	; (8001334 <HAL_UART_MspInit+0x90>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_UART_MspInit+0x90>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012f6:	230c      	movs	r3, #12
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001306:	2307      	movs	r3, #7
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001314:	f000 faa8 	bl	8001868 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	2100      	movs	r1, #0
 800131c:	2026      	movs	r0, #38	; 0x26
 800131e:	f000 fa2c 	bl	800177a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001322:	2026      	movs	r0, #38	; 0x26
 8001324:	f000 fa45 	bl	80017b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001328:	bf00      	nop
 800132a:	3728      	adds	r7, #40	; 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40004400 	.word	0x40004400
 8001334:	40021000 	.word	0x40021000

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800133c:	e7fe      	b.n	800133c <NMI_Handler+0x4>

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler+0x4>

08001356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001384:	f000 f8fe 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <USART2_IRQHandler+0x10>)
 8001392:	f002 f8c3 	bl	800351c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000368 	.word	0x20000368

080013a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a8:	4a14      	ldr	r2, [pc, #80]	; (80013fc <_sbrk+0x5c>)
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <_sbrk+0x60>)
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <_sbrk+0x64>)
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <_sbrk+0x68>)
 80013c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d207      	bcs.n	80013e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d0:	f002 fef4 	bl	80041bc <__errno>
 80013d4:	4602      	mov	r2, r0
 80013d6:	230c      	movs	r3, #12
 80013d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	e009      	b.n	80013f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <_sbrk+0x64>)
 80013f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20018000 	.word	0x20018000
 8001400:	00000400 	.word	0x00000400
 8001404:	20000224 	.word	0x20000224
 8001408:	200003f8 	.word	0x200003f8

0800140c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <SystemInit+0x64>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001416:	4a16      	ldr	r2, [pc, #88]	; (8001470 <SystemInit+0x64>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <SystemInit+0x68>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a13      	ldr	r2, [pc, #76]	; (8001474 <SystemInit+0x68>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <SystemInit+0x68>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <SystemInit+0x68>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <SystemInit+0x68>)
 8001438:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800143c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001440:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <SystemInit+0x68>)
 8001444:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001448:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <SystemInit+0x68>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <SystemInit+0x68>)
 8001450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001454:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <SystemInit+0x68>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <SystemInit+0x64>)
 800145e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001462:	609a      	str	r2, [r3, #8]
#endif
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00
 8001474:	40021000 	.word	0x40021000

08001478 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800147c:	f7ff ffc6 	bl	800140c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001480:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001482:	e003      	b.n	800148c <LoopCopyDataInit>

08001484 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001486:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001488:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800148a:	3104      	adds	r1, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800148c:	480a      	ldr	r0, [pc, #40]	; (80014b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001490:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001492:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001494:	d3f6      	bcc.n	8001484 <CopyDataInit>
	ldr	r2, =_sbss
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001498:	e002      	b.n	80014a0 <LoopFillZerobss>

0800149a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800149a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800149c:	f842 3b04 	str.w	r3, [r2], #4

080014a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <LoopForever+0x16>)
	cmp	r2, r3
 80014a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014a4:	d3f9      	bcc.n	800149a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a6:	f002 fe8f 	bl	80041c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014aa:	f7ff f8d7 	bl	800065c <main>

080014ae <LoopForever>:

LoopForever:
    b LoopForever
 80014ae:	e7fe      	b.n	80014ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014b0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80014b4:	08004e0c 	.word	0x08004e0c
	ldr	r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014bc:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 80014c0:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 80014c4:	200003f4 	.word	0x200003f4

080014c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC1_2_IRQHandler>
	...

080014cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_Init+0x3c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <HAL_Init+0x3c>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e2:	2003      	movs	r0, #3
 80014e4:	f000 f93e 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e8:	2000      	movs	r0, #0
 80014ea:	f000 f80f 	bl	800150c <HAL_InitTick>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	71fb      	strb	r3, [r7, #7]
 80014f8:	e001      	b.n	80014fe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014fa:	f7ff feaf 	bl	800125c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40022000 	.word	0x40022000

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <HAL_InitTick+0x6c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d023      	beq.n	8001568 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_InitTick+0x70>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_InitTick+0x6c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f949 	bl	80017ce <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10f      	bne.n	8001562 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b0f      	cmp	r3, #15
 8001546:	d809      	bhi.n	800155c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001548:	2200      	movs	r2, #0
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f000 f913 	bl	800177a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001554:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <HAL_InitTick+0x74>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e007      	b.n	800156c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e004      	b.n	800156c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	73fb      	strb	r3, [r7, #15]
 8001566:	e001      	b.n	800156c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000008 	.word	0x20000008
 800157c:	20000000 	.word	0x20000000
 8001580:	20000004 	.word	0x20000004

08001584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x20>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x24>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_IncTick+0x24>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000008 	.word	0x20000008
 80015a8:	200003ec 	.word	0x200003ec

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_GetTick+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	200003ec 	.word	0x200003ec

080015c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e0:	4013      	ands	r3, r2
 80015e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	60d3      	str	r3, [r2, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <__NVIC_GetPriorityGrouping+0x18>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	f003 0307 	and.w	r3, r3, #7
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	2b00      	cmp	r3, #0
 8001638:	db0b      	blt.n	8001652 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	f003 021f 	and.w	r2, r3, #31
 8001640:	4907      	ldr	r1, [pc, #28]	; (8001660 <__NVIC_EnableIRQ+0x38>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	095b      	lsrs	r3, r3, #5
 8001648:	2001      	movs	r0, #1
 800164a:	fa00 f202 	lsl.w	r2, r0, r2
 800164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000e100 	.word	0xe000e100

08001664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	2b00      	cmp	r3, #0
 8001676:	db0a      	blt.n	800168e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	b2da      	uxtb	r2, r3
 800167c:	490c      	ldr	r1, [pc, #48]	; (80016b0 <__NVIC_SetPriority+0x4c>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	0112      	lsls	r2, r2, #4
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	440b      	add	r3, r1
 8001688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800168c:	e00a      	b.n	80016a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4908      	ldr	r1, [pc, #32]	; (80016b4 <__NVIC_SetPriority+0x50>)
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	3b04      	subs	r3, #4
 800169c:	0112      	lsls	r2, r2, #4
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	440b      	add	r3, r1
 80016a2:	761a      	strb	r2, [r3, #24]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000e100 	.word	0xe000e100
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f1c3 0307 	rsb	r3, r3, #7
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	bf28      	it	cs
 80016d6:	2304      	movcs	r3, #4
 80016d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3304      	adds	r3, #4
 80016de:	2b06      	cmp	r3, #6
 80016e0:	d902      	bls.n	80016e8 <NVIC_EncodePriority+0x30>
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3b03      	subs	r3, #3
 80016e6:	e000      	b.n	80016ea <NVIC_EncodePriority+0x32>
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43da      	mvns	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	401a      	ands	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001700:	f04f 31ff 	mov.w	r1, #4294967295
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	43d9      	mvns	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	4313      	orrs	r3, r2
         );
}
 8001712:	4618      	mov	r0, r3
 8001714:	3724      	adds	r7, #36	; 0x24
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001730:	d301      	bcc.n	8001736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001732:	2301      	movs	r3, #1
 8001734:	e00f      	b.n	8001756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <SysTick_Config+0x40>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173e:	210f      	movs	r1, #15
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f7ff ff8e 	bl	8001664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <SysTick_Config+0x40>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <SysTick_Config+0x40>)
 8001750:	2207      	movs	r2, #7
 8001752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	e000e010 	.word	0xe000e010

08001764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff29 	bl	80015c4 <__NVIC_SetPriorityGrouping>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800178c:	f7ff ff3e 	bl	800160c <__NVIC_GetPriorityGrouping>
 8001790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	6978      	ldr	r0, [r7, #20]
 8001798:	f7ff ff8e 	bl	80016b8 <NVIC_EncodePriority>
 800179c:	4602      	mov	r2, r0
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff5d 	bl	8001664 <__NVIC_SetPriority>
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff31 	bl	8001628 <__NVIC_EnableIRQ>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ffa2 	bl	8001720 <SysTick_Config>
 80017dc:	4603      	mov	r3, r0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d005      	beq.n	800180a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2204      	movs	r2, #4
 8001802:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	e029      	b.n	800185e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 020e 	bic.w	r2, r2, #14
 8001818:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0201 	bic.w	r2, r2, #1
 8001828:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f003 021c 	and.w	r2, r3, #28
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	2101      	movs	r1, #1
 8001838:	fa01 f202 	lsl.w	r2, r1, r2
 800183c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	4798      	blx	r3
    }
  }
  return status;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001876:	e17f      	b.n	8001b78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2101      	movs	r1, #1
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	4013      	ands	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8171 	beq.w	8001b72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d00b      	beq.n	80018b0 <HAL_GPIO_Init+0x48>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d007      	beq.n	80018b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018a4:	2b11      	cmp	r3, #17
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b12      	cmp	r3, #18
 80018ae:	d130      	bne.n	8001912 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	2203      	movs	r2, #3
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018e6:	2201      	movs	r2, #1
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	091b      	lsrs	r3, r3, #4
 80018fc:	f003 0201 	and.w	r2, r3, #1
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b03      	cmp	r3, #3
 800191c:	d118      	bne.n	8001950 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001924:	2201      	movs	r2, #1
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	08db      	lsrs	r3, r3, #3
 800193a:	f003 0201 	and.w	r2, r3, #1
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2203      	movs	r2, #3
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x128>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b12      	cmp	r3, #18
 800198e:	d123      	bne.n	80019d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	220f      	movs	r2, #15
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	08da      	lsrs	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3208      	adds	r2, #8
 80019d2:	6939      	ldr	r1, [r7, #16]
 80019d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80ac 	beq.w	8001b72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	4b5e      	ldr	r3, [pc, #376]	; (8001b94 <HAL_GPIO_Init+0x32c>)
 8001a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1e:	4a5d      	ldr	r2, [pc, #372]	; (8001b94 <HAL_GPIO_Init+0x32c>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6613      	str	r3, [r2, #96]	; 0x60
 8001a26:	4b5b      	ldr	r3, [pc, #364]	; (8001b94 <HAL_GPIO_Init+0x32c>)
 8001a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a32:	4a59      	ldr	r2, [pc, #356]	; (8001b98 <HAL_GPIO_Init+0x330>)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a5c:	d025      	beq.n	8001aaa <HAL_GPIO_Init+0x242>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4e      	ldr	r2, [pc, #312]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d01f      	beq.n	8001aa6 <HAL_GPIO_Init+0x23e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4d      	ldr	r2, [pc, #308]	; (8001ba0 <HAL_GPIO_Init+0x338>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d019      	beq.n	8001aa2 <HAL_GPIO_Init+0x23a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4c      	ldr	r2, [pc, #304]	; (8001ba4 <HAL_GPIO_Init+0x33c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d013      	beq.n	8001a9e <HAL_GPIO_Init+0x236>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4b      	ldr	r2, [pc, #300]	; (8001ba8 <HAL_GPIO_Init+0x340>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d00d      	beq.n	8001a9a <HAL_GPIO_Init+0x232>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4a      	ldr	r2, [pc, #296]	; (8001bac <HAL_GPIO_Init+0x344>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d007      	beq.n	8001a96 <HAL_GPIO_Init+0x22e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a49      	ldr	r2, [pc, #292]	; (8001bb0 <HAL_GPIO_Init+0x348>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d101      	bne.n	8001a92 <HAL_GPIO_Init+0x22a>
 8001a8e:	2306      	movs	r3, #6
 8001a90:	e00c      	b.n	8001aac <HAL_GPIO_Init+0x244>
 8001a92:	2307      	movs	r3, #7
 8001a94:	e00a      	b.n	8001aac <HAL_GPIO_Init+0x244>
 8001a96:	2305      	movs	r3, #5
 8001a98:	e008      	b.n	8001aac <HAL_GPIO_Init+0x244>
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x244>
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e004      	b.n	8001aac <HAL_GPIO_Init+0x244>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_Init+0x244>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_GPIO_Init+0x244>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	f002 0203 	and.w	r2, r2, #3
 8001ab2:	0092      	lsls	r2, r2, #2
 8001ab4:	4093      	lsls	r3, r2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001abc:	4936      	ldr	r1, [pc, #216]	; (8001b98 <HAL_GPIO_Init+0x330>)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001aca:	4b3a      	ldr	r3, [pc, #232]	; (8001bb4 <HAL_GPIO_Init+0x34c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aee:	4a31      	ldr	r2, [pc, #196]	; (8001bb4 <HAL_GPIO_Init+0x34c>)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001af4:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <HAL_GPIO_Init+0x34c>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b18:	4a26      	ldr	r2, [pc, #152]	; (8001bb4 <HAL_GPIO_Init+0x34c>)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <HAL_GPIO_Init+0x34c>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b42:	4a1c      	ldr	r2, [pc, #112]	; (8001bb4 <HAL_GPIO_Init+0x34c>)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <HAL_GPIO_Init+0x34c>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b6c:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <HAL_GPIO_Init+0x34c>)
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3301      	adds	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f47f ae78 	bne.w	8001878 <HAL_GPIO_Init+0x10>
  }
}
 8001b88:	bf00      	nop
 8001b8a:	371c      	adds	r7, #28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40010000 	.word	0x40010000
 8001b9c:	48000400 	.word	0x48000400
 8001ba0:	48000800 	.word	0x48000800
 8001ba4:	48000c00 	.word	0x48000c00
 8001ba8:	48001000 	.word	0x48001000
 8001bac:	48001400 	.word	0x48001400
 8001bb0:	48001800 	.word	0x48001800
 8001bb4:	40010400 	.word	0x40010400

08001bb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	887b      	ldrh	r3, [r7, #2]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
 8001bd4:	e001      	b.n	8001bda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf8:	787b      	ldrb	r3, [r7, #1]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40007000 	.word	0x40007000

08001c34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c42:	d130      	bne.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c44:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c50:	d038      	beq.n	8001cc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c5a:	4a1e      	ldr	r2, [pc, #120]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2232      	movs	r2, #50	; 0x32
 8001c68:	fb02 f303 	mul.w	r3, r2, r3
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	0c9b      	lsrs	r3, r3, #18
 8001c74:	3301      	adds	r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c78:	e002      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c8c:	d102      	bne.n	8001c94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f2      	bne.n	8001c7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca0:	d110      	bne.n	8001cc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e00f      	b.n	8001cc6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb2:	d007      	beq.n	8001cc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cbc:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	431bde83 	.word	0x431bde83

08001ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e3d4      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf2:	4ba1      	ldr	r3, [pc, #644]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cfc:	4b9e      	ldr	r3, [pc, #632]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80e4 	beq.w	8001edc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d007      	beq.n	8001d2a <HAL_RCC_OscConfig+0x4a>
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	f040 808b 	bne.w	8001e38 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	f040 8087 	bne.w	8001e38 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d2a:	4b93      	ldr	r3, [pc, #588]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_RCC_OscConfig+0x62>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e3ac      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a1a      	ldr	r2, [r3, #32]
 8001d46:	4b8c      	ldr	r3, [pc, #560]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d004      	beq.n	8001d5c <HAL_RCC_OscConfig+0x7c>
 8001d52:	4b89      	ldr	r3, [pc, #548]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d5a:	e005      	b.n	8001d68 <HAL_RCC_OscConfig+0x88>
 8001d5c:	4b86      	ldr	r3, [pc, #536]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d223      	bcs.n	8001db4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 fd3f 	bl	80027f4 <RCC_SetFlashLatencyFromMSIRange>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e38d      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d80:	4b7d      	ldr	r3, [pc, #500]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a7c      	ldr	r2, [pc, #496]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001d86:	f043 0308 	orr.w	r3, r3, #8
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b7a      	ldr	r3, [pc, #488]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4977      	ldr	r1, [pc, #476]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d9e:	4b76      	ldr	r3, [pc, #472]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	4972      	ldr	r1, [pc, #456]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
 8001db2:	e025      	b.n	8001e00 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001db4:	4b70      	ldr	r3, [pc, #448]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a6f      	ldr	r2, [pc, #444]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001dba:	f043 0308 	orr.w	r3, r3, #8
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b6d      	ldr	r3, [pc, #436]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	496a      	ldr	r1, [pc, #424]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd2:	4b69      	ldr	r3, [pc, #420]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	4965      	ldr	r1, [pc, #404]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d109      	bne.n	8001e00 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 fcff 	bl	80027f4 <RCC_SetFlashLatencyFromMSIRange>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e34d      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e00:	f000 fc36 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 8001e04:	4601      	mov	r1, r0
 8001e06:	4b5c      	ldr	r3, [pc, #368]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	4a5a      	ldr	r2, [pc, #360]	; (8001f7c <HAL_RCC_OscConfig+0x29c>)
 8001e12:	5cd3      	ldrb	r3, [r2, r3]
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	fa21 f303 	lsr.w	r3, r1, r3
 8001e1c:	4a58      	ldr	r2, [pc, #352]	; (8001f80 <HAL_RCC_OscConfig+0x2a0>)
 8001e1e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e20:	4b58      	ldr	r3, [pc, #352]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fb71 	bl	800150c <HAL_InitTick>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d052      	beq.n	8001eda <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	e331      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d032      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e40:	4b4d      	ldr	r3, [pc, #308]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a4c      	ldr	r2, [pc, #304]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e4c:	f7ff fbae 	bl	80015ac <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e54:	f7ff fbaa 	bl	80015ac <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e31a      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e66:	4b44      	ldr	r3, [pc, #272]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e72:	4b41      	ldr	r3, [pc, #260]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a40      	ldr	r2, [pc, #256]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001e78:	f043 0308 	orr.w	r3, r3, #8
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	4b3e      	ldr	r3, [pc, #248]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	493b      	ldr	r1, [pc, #236]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e90:	4b39      	ldr	r3, [pc, #228]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	4936      	ldr	r1, [pc, #216]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
 8001ea4:	e01a      	b.n	8001edc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ea6:	4b34      	ldr	r3, [pc, #208]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a33      	ldr	r2, [pc, #204]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eb2:	f7ff fb7b 	bl	80015ac <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eba:	f7ff fb77 	bl	80015ac <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e2e7      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f0      	bne.n	8001eba <HAL_RCC_OscConfig+0x1da>
 8001ed8:	e000      	b.n	8001edc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eda:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d074      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d005      	beq.n	8001efa <HAL_RCC_OscConfig+0x21a>
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	2b0c      	cmp	r3, #12
 8001ef2:	d10e      	bne.n	8001f12 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d10b      	bne.n	8001f12 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efa:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d064      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x2f0>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d160      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e2c4      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x24a>
 8001f1c:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a15      	ldr	r2, [pc, #84]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	e01d      	b.n	8001f66 <HAL_RCC_OscConfig+0x286>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f32:	d10c      	bne.n	8001f4e <HAL_RCC_OscConfig+0x26e>
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001f3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	e00b      	b.n	8001f66 <HAL_RCC_OscConfig+0x286>
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a09      	ldr	r2, [pc, #36]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a06      	ldr	r2, [pc, #24]	; (8001f78 <HAL_RCC_OscConfig+0x298>)
 8001f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f64:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d01c      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6e:	f7ff fb1d 	bl	80015ac <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f74:	e011      	b.n	8001f9a <HAL_RCC_OscConfig+0x2ba>
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	08004c74 	.word	0x08004c74
 8001f80:	20000000 	.word	0x20000000
 8001f84:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f88:	f7ff fb10 	bl	80015ac <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	; 0x64
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e280      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f9a:	4baf      	ldr	r3, [pc, #700]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0x2a8>
 8001fa6:	e014      	b.n	8001fd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa8:	f7ff fb00 	bl	80015ac <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb0:	f7ff fafc 	bl	80015ac <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	; 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e26c      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fc2:	4ba5      	ldr	r3, [pc, #660]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x2d0>
 8001fce:	e000      	b.n	8001fd2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d060      	beq.n	80020a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x310>
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	2b0c      	cmp	r3, #12
 8001fe8:	d119      	bne.n	800201e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d116      	bne.n	800201e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ff0:	4b99      	ldr	r3, [pc, #612]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_OscConfig+0x328>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e249      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002008:	4b93      	ldr	r3, [pc, #588]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	061b      	lsls	r3, r3, #24
 8002016:	4990      	ldr	r1, [pc, #576]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 8002018:	4313      	orrs	r3, r2
 800201a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800201c:	e040      	b.n	80020a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d023      	beq.n	800206e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002026:	4b8c      	ldr	r3, [pc, #560]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a8b      	ldr	r2, [pc, #556]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7ff fabb 	bl	80015ac <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203a:	f7ff fab7 	bl	80015ac <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e227      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800204c:	4b82      	ldr	r3, [pc, #520]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002058:	4b7f      	ldr	r3, [pc, #508]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	061b      	lsls	r3, r3, #24
 8002066:	497c      	ldr	r1, [pc, #496]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
 800206c:	e018      	b.n	80020a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206e:	4b7a      	ldr	r3, [pc, #488]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a79      	ldr	r2, [pc, #484]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 8002074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207a:	f7ff fa97 	bl	80015ac <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002082:	f7ff fa93 	bl	80015ac <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e203      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002094:	4b70      	ldr	r3, [pc, #448]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f0      	bne.n	8002082 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d03c      	beq.n	8002126 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d01c      	beq.n	80020ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b4:	4b68      	ldr	r3, [pc, #416]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 80020b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ba:	4a67      	ldr	r2, [pc, #412]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c4:	f7ff fa72 	bl	80015ac <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020cc:	f7ff fa6e 	bl	80015ac <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e1de      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020de:	4b5e      	ldr	r3, [pc, #376]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 80020e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0ef      	beq.n	80020cc <HAL_RCC_OscConfig+0x3ec>
 80020ec:	e01b      	b.n	8002126 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ee:	4b5a      	ldr	r3, [pc, #360]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 80020f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f4:	4a58      	ldr	r2, [pc, #352]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 80020f6:	f023 0301 	bic.w	r3, r3, #1
 80020fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fe:	f7ff fa55 	bl	80015ac <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002106:	f7ff fa51 	bl	80015ac <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e1c1      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002118:	4b4f      	ldr	r3, [pc, #316]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 800211a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1ef      	bne.n	8002106 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 80a6 	beq.w	8002280 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002134:	2300      	movs	r3, #0
 8002136:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002138:	4b47      	ldr	r3, [pc, #284]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10d      	bne.n	8002160 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002144:	4b44      	ldr	r3, [pc, #272]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	4a43      	ldr	r2, [pc, #268]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 800214a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214e:	6593      	str	r3, [r2, #88]	; 0x58
 8002150:	4b41      	ldr	r3, [pc, #260]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800215c:	2301      	movs	r3, #1
 800215e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002160:	4b3e      	ldr	r3, [pc, #248]	; (800225c <HAL_RCC_OscConfig+0x57c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d118      	bne.n	800219e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800216c:	4b3b      	ldr	r3, [pc, #236]	; (800225c <HAL_RCC_OscConfig+0x57c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a3a      	ldr	r2, [pc, #232]	; (800225c <HAL_RCC_OscConfig+0x57c>)
 8002172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002176:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002178:	f7ff fa18 	bl	80015ac <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002180:	f7ff fa14 	bl	80015ac <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e184      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002192:	4b32      	ldr	r3, [pc, #200]	; (800225c <HAL_RCC_OscConfig+0x57c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d108      	bne.n	80021b8 <HAL_RCC_OscConfig+0x4d8>
 80021a6:	4b2c      	ldr	r3, [pc, #176]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ac:	4a2a      	ldr	r2, [pc, #168]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021b6:	e024      	b.n	8002202 <HAL_RCC_OscConfig+0x522>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b05      	cmp	r3, #5
 80021be:	d110      	bne.n	80021e2 <HAL_RCC_OscConfig+0x502>
 80021c0:	4b25      	ldr	r3, [pc, #148]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 80021c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c6:	4a24      	ldr	r2, [pc, #144]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 80021c8:	f043 0304 	orr.w	r3, r3, #4
 80021cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021d0:	4b21      	ldr	r3, [pc, #132]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d6:	4a20      	ldr	r2, [pc, #128]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021e0:	e00f      	b.n	8002202 <HAL_RCC_OscConfig+0x522>
 80021e2:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e8:	4a1b      	ldr	r2, [pc, #108]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 80021ea:	f023 0301 	bic.w	r3, r3, #1
 80021ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021f2:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f8:	4a17      	ldr	r2, [pc, #92]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 80021fa:	f023 0304 	bic.w	r3, r3, #4
 80021fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d016      	beq.n	8002238 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220a:	f7ff f9cf 	bl	80015ac <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7ff f9cb 	bl	80015ac <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e139      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_RCC_OscConfig+0x578>)
 800222a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0ed      	beq.n	8002212 <HAL_RCC_OscConfig+0x532>
 8002236:	e01a      	b.n	800226e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002238:	f7ff f9b8 	bl	80015ac <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800223e:	e00f      	b.n	8002260 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002240:	f7ff f9b4 	bl	80015ac <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f241 3288 	movw	r2, #5000	; 0x1388
 800224e:	4293      	cmp	r3, r2
 8002250:	d906      	bls.n	8002260 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e122      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002260:	4b90      	ldr	r3, [pc, #576]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 8002262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1e8      	bne.n	8002240 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800226e:	7ffb      	ldrb	r3, [r7, #31]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d105      	bne.n	8002280 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002274:	4b8b      	ldr	r3, [pc, #556]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 8002276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002278:	4a8a      	ldr	r2, [pc, #552]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 800227a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800227e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 8108 	beq.w	800249a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	2b02      	cmp	r3, #2
 8002290:	f040 80d0 	bne.w	8002434 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002294:	4b83      	ldr	r3, [pc, #524]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f003 0203 	and.w	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d130      	bne.n	800230a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	3b01      	subs	r3, #1
 80022b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d127      	bne.n	800230a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d11f      	bne.n	800230a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022d4:	2a07      	cmp	r2, #7
 80022d6:	bf14      	ite	ne
 80022d8:	2201      	movne	r2, #1
 80022da:	2200      	moveq	r2, #0
 80022dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022de:	4293      	cmp	r3, r2
 80022e0:	d113      	bne.n	800230a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ec:	085b      	lsrs	r3, r3, #1
 80022ee:	3b01      	subs	r3, #1
 80022f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d109      	bne.n	800230a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	085b      	lsrs	r3, r3, #1
 8002302:	3b01      	subs	r3, #1
 8002304:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d06e      	beq.n	80023e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	2b0c      	cmp	r3, #12
 800230e:	d069      	beq.n	80023e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002310:	4b64      	ldr	r3, [pc, #400]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800231c:	4b61      	ldr	r3, [pc, #388]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0b7      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800232c:	4b5d      	ldr	r3, [pc, #372]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a5c      	ldr	r2, [pc, #368]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 8002332:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002336:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002338:	f7ff f938 	bl	80015ac <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002340:	f7ff f934 	bl	80015ac <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e0a4      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002352:	4b54      	ldr	r3, [pc, #336]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800235e:	4b51      	ldr	r3, [pc, #324]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	4b51      	ldr	r3, [pc, #324]	; (80024a8 <HAL_RCC_OscConfig+0x7c8>)
 8002364:	4013      	ands	r3, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800236e:	3a01      	subs	r2, #1
 8002370:	0112      	lsls	r2, r2, #4
 8002372:	4311      	orrs	r1, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002378:	0212      	lsls	r2, r2, #8
 800237a:	4311      	orrs	r1, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002380:	0852      	lsrs	r2, r2, #1
 8002382:	3a01      	subs	r2, #1
 8002384:	0552      	lsls	r2, r2, #21
 8002386:	4311      	orrs	r1, r2
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800238c:	0852      	lsrs	r2, r2, #1
 800238e:	3a01      	subs	r2, #1
 8002390:	0652      	lsls	r2, r2, #25
 8002392:	4311      	orrs	r1, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002398:	0912      	lsrs	r2, r2, #4
 800239a:	0452      	lsls	r2, r2, #17
 800239c:	430a      	orrs	r2, r1
 800239e:	4941      	ldr	r1, [pc, #260]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023a4:	4b3f      	ldr	r3, [pc, #252]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a3e      	ldr	r2, [pc, #248]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 80023aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023b0:	4b3c      	ldr	r3, [pc, #240]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a3b      	ldr	r2, [pc, #236]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 80023b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023bc:	f7ff f8f6 	bl	80015ac <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c4:	f7ff f8f2 	bl	80015ac <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e062      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d6:	4b33      	ldr	r3, [pc, #204]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023e2:	e05a      	b.n	800249a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e059      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e8:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d152      	bne.n	800249a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023f4:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a2a      	ldr	r2, [pc, #168]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 80023fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002400:	4b28      	ldr	r3, [pc, #160]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4a27      	ldr	r2, [pc, #156]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 8002406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800240a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800240c:	f7ff f8ce 	bl	80015ac <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002414:	f7ff f8ca 	bl	80015ac <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e03a      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002426:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0x734>
 8002432:	e032      	b.n	800249a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d02d      	beq.n	8002496 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243a:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 8002440:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002444:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002446:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d105      	bne.n	800245e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	4a13      	ldr	r2, [pc, #76]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 8002458:	f023 0303 	bic.w	r3, r3, #3
 800245c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	4a10      	ldr	r2, [pc, #64]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 8002464:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246e:	f7ff f89d 	bl	80015ac <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002476:	f7ff f899 	bl	80015ac <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e009      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_RCC_OscConfig+0x7c4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f0      	bne.n	8002476 <HAL_RCC_OscConfig+0x796>
 8002494:	e001      	b.n	800249a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3720      	adds	r7, #32
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40021000 	.word	0x40021000
 80024a8:	f99d808c 	.word	0xf99d808c

080024ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0c8      	b.n	8002652 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c0:	4b66      	ldr	r3, [pc, #408]	; (800265c <HAL_RCC_ClockConfig+0x1b0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d910      	bls.n	80024f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_RCC_ClockConfig+0x1b0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 0207 	bic.w	r2, r3, #7
 80024d6:	4961      	ldr	r1, [pc, #388]	; (800265c <HAL_RCC_ClockConfig+0x1b0>)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b5f      	ldr	r3, [pc, #380]	; (800265c <HAL_RCC_ClockConfig+0x1b0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0b0      	b.n	8002652 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d04c      	beq.n	8002596 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b03      	cmp	r3, #3
 8002502:	d107      	bne.n	8002514 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002504:	4b56      	ldr	r3, [pc, #344]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d121      	bne.n	8002554 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e09e      	b.n	8002652 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d107      	bne.n	800252c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800251c:	4b50      	ldr	r3, [pc, #320]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d115      	bne.n	8002554 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e092      	b.n	8002652 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d107      	bne.n	8002544 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002534:	4b4a      	ldr	r3, [pc, #296]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d109      	bne.n	8002554 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e086      	b.n	8002652 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002544:	4b46      	ldr	r3, [pc, #280]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e07e      	b.n	8002652 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002554:	4b42      	ldr	r3, [pc, #264]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f023 0203 	bic.w	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	493f      	ldr	r1, [pc, #252]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002566:	f7ff f821 	bl	80015ac <HAL_GetTick>
 800256a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256c:	e00a      	b.n	8002584 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256e:	f7ff f81d 	bl	80015ac <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	; 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e066      	b.n	8002652 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002584:	4b36      	ldr	r3, [pc, #216]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 020c 	and.w	r2, r3, #12
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	429a      	cmp	r2, r3
 8002594:	d1eb      	bne.n	800256e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a2:	4b2f      	ldr	r3, [pc, #188]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	492c      	ldr	r1, [pc, #176]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025b4:	4b29      	ldr	r3, [pc, #164]	; (800265c <HAL_RCC_ClockConfig+0x1b0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d210      	bcs.n	80025e4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b26      	ldr	r3, [pc, #152]	; (800265c <HAL_RCC_ClockConfig+0x1b0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 0207 	bic.w	r2, r3, #7
 80025ca:	4924      	ldr	r1, [pc, #144]	; (800265c <HAL_RCC_ClockConfig+0x1b0>)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b22      	ldr	r3, [pc, #136]	; (800265c <HAL_RCC_ClockConfig+0x1b0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e036      	b.n	8002652 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4918      	ldr	r1, [pc, #96]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800260e:	4b14      	ldr	r3, [pc, #80]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4910      	ldr	r1, [pc, #64]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002622:	f000 f825 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 8002626:	4601      	mov	r1, r0
 8002628:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <HAL_RCC_ClockConfig+0x1b4>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 8002634:	5cd3      	ldrb	r3, [r2, r3]
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	fa21 f303 	lsr.w	r3, r1, r3
 800263e:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe ff60 	bl	800150c <HAL_InitTick>
 800264c:	4603      	mov	r3, r0
 800264e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002650:	7afb      	ldrb	r3, [r7, #11]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40022000 	.word	0x40022000
 8002660:	40021000 	.word	0x40021000
 8002664:	08004c74 	.word	0x08004c74
 8002668:	20000000 	.word	0x20000000
 800266c:	20000004 	.word	0x20000004

08002670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002670:	b480      	push	{r7}
 8002672:	b089      	sub	sp, #36	; 0x24
 8002674:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	2300      	movs	r3, #0
 800267c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800267e:	4b3d      	ldr	r3, [pc, #244]	; (8002774 <HAL_RCC_GetSysClockFreq+0x104>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002688:	4b3a      	ldr	r3, [pc, #232]	; (8002774 <HAL_RCC_GetSysClockFreq+0x104>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	2b0c      	cmp	r3, #12
 800269c:	d121      	bne.n	80026e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d11e      	bne.n	80026e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026a4:	4b33      	ldr	r3, [pc, #204]	; (8002774 <HAL_RCC_GetSysClockFreq+0x104>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d107      	bne.n	80026c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026b0:	4b30      	ldr	r3, [pc, #192]	; (8002774 <HAL_RCC_GetSysClockFreq+0x104>)
 80026b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	e005      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026c0:	4b2c      	ldr	r3, [pc, #176]	; (8002774 <HAL_RCC_GetSysClockFreq+0x104>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026cc:	4a2a      	ldr	r2, [pc, #168]	; (8002778 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10d      	bne.n	80026f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026e0:	e00a      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d102      	bne.n	80026ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026e8:	4b24      	ldr	r3, [pc, #144]	; (800277c <HAL_RCC_GetSysClockFreq+0x10c>)
 80026ea:	61bb      	str	r3, [r7, #24]
 80026ec:	e004      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d101      	bne.n	80026f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026f4:	4b22      	ldr	r3, [pc, #136]	; (8002780 <HAL_RCC_GetSysClockFreq+0x110>)
 80026f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d133      	bne.n	8002766 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026fe:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <HAL_RCC_GetSysClockFreq+0x104>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d002      	beq.n	8002714 <HAL_RCC_GetSysClockFreq+0xa4>
 800270e:	2b03      	cmp	r3, #3
 8002710:	d003      	beq.n	800271a <HAL_RCC_GetSysClockFreq+0xaa>
 8002712:	e005      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002716:	617b      	str	r3, [r7, #20]
      break;
 8002718:	e005      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800271a:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_RCC_GetSysClockFreq+0x110>)
 800271c:	617b      	str	r3, [r7, #20]
      break;
 800271e:	e002      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	617b      	str	r3, [r7, #20]
      break;
 8002724:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002726:	4b13      	ldr	r3, [pc, #76]	; (8002774 <HAL_RCC_GetSysClockFreq+0x104>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	3301      	adds	r3, #1
 8002732:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <HAL_RCC_GetSysClockFreq+0x104>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	fb02 f203 	mul.w	r2, r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	fbb2 f3f3 	udiv	r3, r2, r3
 800274a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_RCC_GetSysClockFreq+0x104>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	0e5b      	lsrs	r3, r3, #25
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	3301      	adds	r3, #1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002766:	69bb      	ldr	r3, [r7, #24]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3724      	adds	r7, #36	; 0x24
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	40021000 	.word	0x40021000
 8002778:	08004c8c 	.word	0x08004c8c
 800277c:	00f42400 	.word	0x00f42400
 8002780:	007a1200 	.word	0x007a1200

08002784 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002788:	4b03      	ldr	r3, [pc, #12]	; (8002798 <HAL_RCC_GetHCLKFreq+0x14>)
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000000 	.word	0x20000000

0800279c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027a0:	f7ff fff0 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027a4:	4601      	mov	r1, r0
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	0a1b      	lsrs	r3, r3, #8
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	f003 031f 	and.w	r3, r3, #31
 80027b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000
 80027c4:	08004c84 	.word	0x08004c84

080027c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027cc:	f7ff ffda 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027d0:	4601      	mov	r1, r0
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	0adb      	lsrs	r3, r3, #11
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027de:	5cd3      	ldrb	r3, [r2, r3]
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40021000 	.word	0x40021000
 80027f0:	08004c84 	.word	0x08004c84

080027f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002800:	4b2a      	ldr	r3, [pc, #168]	; (80028ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800280c:	f7ff fa04 	bl	8001c18 <HAL_PWREx_GetVoltageRange>
 8002810:	6178      	str	r0, [r7, #20]
 8002812:	e014      	b.n	800283e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002814:	4b25      	ldr	r3, [pc, #148]	; (80028ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	4a24      	ldr	r2, [pc, #144]	; (80028ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800281a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281e:	6593      	str	r3, [r2, #88]	; 0x58
 8002820:	4b22      	ldr	r3, [pc, #136]	; (80028ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800282c:	f7ff f9f4 	bl	8001c18 <HAL_PWREx_GetVoltageRange>
 8002830:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002832:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	4a1d      	ldr	r2, [pc, #116]	; (80028ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002844:	d10b      	bne.n	800285e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b80      	cmp	r3, #128	; 0x80
 800284a:	d919      	bls.n	8002880 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2ba0      	cmp	r3, #160	; 0xa0
 8002850:	d902      	bls.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002852:	2302      	movs	r3, #2
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	e013      	b.n	8002880 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002858:	2301      	movs	r3, #1
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	e010      	b.n	8002880 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b80      	cmp	r3, #128	; 0x80
 8002862:	d902      	bls.n	800286a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002864:	2303      	movs	r3, #3
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	e00a      	b.n	8002880 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b80      	cmp	r3, #128	; 0x80
 800286e:	d102      	bne.n	8002876 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002870:	2302      	movs	r3, #2
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	e004      	b.n	8002880 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b70      	cmp	r3, #112	; 0x70
 800287a:	d101      	bne.n	8002880 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800287c:	2301      	movs	r3, #1
 800287e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f023 0207 	bic.w	r2, r3, #7
 8002888:	4909      	ldr	r1, [pc, #36]	; (80028b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002890:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	429a      	cmp	r2, r3
 800289c:	d001      	beq.n	80028a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40022000 	.word	0x40022000

080028b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028bc:	2300      	movs	r3, #0
 80028be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028c0:	2300      	movs	r3, #0
 80028c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d03f      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028d8:	d01c      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80028da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028de:	d802      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00e      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80028e4:	e01f      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80028e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028ea:	d003      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80028ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028f0:	d01c      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80028f2:	e018      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028f4:	4b85      	ldr	r3, [pc, #532]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4a84      	ldr	r2, [pc, #528]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002900:	e015      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3304      	adds	r3, #4
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f000 fab9 	bl	8002e80 <RCCEx_PLLSAI1_Config>
 800290e:	4603      	mov	r3, r0
 8002910:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002912:	e00c      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3320      	adds	r3, #32
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fba0 	bl	8003060 <RCCEx_PLLSAI2_Config>
 8002920:	4603      	mov	r3, r0
 8002922:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002924:	e003      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	74fb      	strb	r3, [r7, #19]
      break;
 800292a:	e000      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800292c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800292e:	7cfb      	ldrb	r3, [r7, #19]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10b      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002934:	4b75      	ldr	r3, [pc, #468]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002942:	4972      	ldr	r1, [pc, #456]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800294a:	e001      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d03f      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002964:	d01c      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002966:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800296a:	d802      	bhi.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00e      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002970:	e01f      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002976:	d003      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002978:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800297c:	d01c      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800297e:	e018      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002980:	4b62      	ldr	r3, [pc, #392]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4a61      	ldr	r2, [pc, #388]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800298c:	e015      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3304      	adds	r3, #4
 8002992:	2100      	movs	r1, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fa73 	bl	8002e80 <RCCEx_PLLSAI1_Config>
 800299a:	4603      	mov	r3, r0
 800299c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800299e:	e00c      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3320      	adds	r3, #32
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fb5a 	bl	8003060 <RCCEx_PLLSAI2_Config>
 80029ac:	4603      	mov	r3, r0
 80029ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029b0:	e003      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	74fb      	strb	r3, [r7, #19]
      break;
 80029b6:	e000      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80029b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ba:	7cfb      	ldrb	r3, [r7, #19]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10b      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029c0:	4b52      	ldr	r3, [pc, #328]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ce:	494f      	ldr	r1, [pc, #316]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029d6:	e001      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80a0 	beq.w	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ea:	2300      	movs	r3, #0
 80029ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029ee:	4b47      	ldr	r3, [pc, #284]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80029fe:	2300      	movs	r3, #0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00d      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a04:	4b41      	ldr	r3, [pc, #260]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	4a40      	ldr	r2, [pc, #256]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a10:	4b3e      	ldr	r3, [pc, #248]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a20:	4b3b      	ldr	r3, [pc, #236]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a3a      	ldr	r2, [pc, #232]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a2c:	f7fe fdbe 	bl	80015ac <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a32:	e009      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a34:	f7fe fdba 	bl	80015ac <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d902      	bls.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	74fb      	strb	r3, [r7, #19]
        break;
 8002a46:	e005      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a48:	4b31      	ldr	r3, [pc, #196]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ef      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d15c      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a5a:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01f      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d019      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a78:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a84:	4b21      	ldr	r3, [pc, #132]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8a:	4a20      	ldr	r2, [pc, #128]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a94:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9a:	4a1c      	ldr	r2, [pc, #112]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002aa4:	4a19      	ldr	r2, [pc, #100]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d016      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab6:	f7fe fd79 	bl	80015ac <HAL_GetTick>
 8002aba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002abc:	e00b      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002abe:	f7fe fd75 	bl	80015ac <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d902      	bls.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	74fb      	strb	r3, [r7, #19]
            break;
 8002ad4:	e006      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0ec      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002ae4:	7cfb      	ldrb	r3, [r7, #19]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002afa:	4904      	ldr	r1, [pc, #16]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b02:	e009      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b04:	7cfb      	ldrb	r3, [r7, #19]
 8002b06:	74bb      	strb	r3, [r7, #18]
 8002b08:	e006      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b14:	7cfb      	ldrb	r3, [r7, #19]
 8002b16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b18:	7c7b      	ldrb	r3, [r7, #17]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d105      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1e:	4b9e      	ldr	r3, [pc, #632]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b22:	4a9d      	ldr	r2, [pc, #628]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b36:	4b98      	ldr	r3, [pc, #608]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3c:	f023 0203 	bic.w	r2, r3, #3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b44:	4994      	ldr	r1, [pc, #592]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b58:	4b8f      	ldr	r3, [pc, #572]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	f023 020c 	bic.w	r2, r3, #12
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	498c      	ldr	r1, [pc, #560]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b7a:	4b87      	ldr	r3, [pc, #540]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	4983      	ldr	r1, [pc, #524]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b9c:	4b7e      	ldr	r3, [pc, #504]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	497b      	ldr	r1, [pc, #492]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bbe:	4b76      	ldr	r3, [pc, #472]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bcc:	4972      	ldr	r1, [pc, #456]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002be0:	4b6d      	ldr	r3, [pc, #436]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bee:	496a      	ldr	r1, [pc, #424]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c02:	4b65      	ldr	r3, [pc, #404]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c10:	4961      	ldr	r1, [pc, #388]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c24:	4b5c      	ldr	r3, [pc, #368]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c32:	4959      	ldr	r1, [pc, #356]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c46:	4b54      	ldr	r3, [pc, #336]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c54:	4950      	ldr	r1, [pc, #320]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c68:	4b4b      	ldr	r3, [pc, #300]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c76:	4948      	ldr	r1, [pc, #288]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c8a:	4b43      	ldr	r3, [pc, #268]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c98:	493f      	ldr	r1, [pc, #252]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d028      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cac:	4b3a      	ldr	r3, [pc, #232]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cba:	4937      	ldr	r1, [pc, #220]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cca:	d106      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ccc:	4b32      	ldr	r3, [pc, #200]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4a31      	ldr	r2, [pc, #196]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cd6:	60d3      	str	r3, [r2, #12]
 8002cd8:	e011      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ce2:	d10c      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f8c8 	bl	8002e80 <RCCEx_PLLSAI1_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002cfa:	7cfb      	ldrb	r3, [r7, #19]
 8002cfc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d028      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d0a:	4b23      	ldr	r3, [pc, #140]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	491f      	ldr	r1, [pc, #124]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d28:	d106      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d2a:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	4a1a      	ldr	r2, [pc, #104]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d34:	60d3      	str	r3, [r2, #12]
 8002d36:	e011      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2101      	movs	r1, #1
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 f899 	bl	8002e80 <RCCEx_PLLSAI1_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d52:	7cfb      	ldrb	r3, [r7, #19]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d02b      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d76:	4908      	ldr	r1, [pc, #32]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d86:	d109      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a02      	ldr	r2, [pc, #8]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d92:	60d3      	str	r3, [r2, #12]
 8002d94:	e014      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3304      	adds	r3, #4
 8002daa:	2101      	movs	r1, #1
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 f867 	bl	8002e80 <RCCEx_PLLSAI1_Config>
 8002db2:	4603      	mov	r3, r0
 8002db4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002db6:	7cfb      	ldrb	r3, [r7, #19]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d02f      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dcc:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dda:	4928      	ldr	r1, [pc, #160]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002de6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dea:	d10d      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3304      	adds	r3, #4
 8002df0:	2102      	movs	r1, #2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 f844 	bl	8002e80 <RCCEx_PLLSAI1_Config>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dfc:	7cfb      	ldrb	r3, [r7, #19]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d014      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002e02:	7cfb      	ldrb	r3, [r7, #19]
 8002e04:	74bb      	strb	r3, [r7, #18]
 8002e06:	e011      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e10:	d10c      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3320      	adds	r3, #32
 8002e16:	2102      	movs	r1, #2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 f921 	bl	8003060 <RCCEx_PLLSAI2_Config>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e22:	7cfb      	ldrb	r3, [r7, #19]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002e28:	7cfb      	ldrb	r3, [r7, #19]
 8002e2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e38:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e46:	490d      	ldr	r1, [pc, #52]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00b      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e6a:	4904      	ldr	r1, [pc, #16]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e72:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40021000 	.word	0x40021000

08002e80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e8e:	4b73      	ldr	r3, [pc, #460]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d018      	beq.n	8002ecc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e9a:	4b70      	ldr	r3, [pc, #448]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f003 0203 	and.w	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d10d      	bne.n	8002ec6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
       ||
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002eb2:	4b6a      	ldr	r3, [pc, #424]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	091b      	lsrs	r3, r3, #4
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d044      	beq.n	8002f50 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
 8002eca:	e041      	b.n	8002f50 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d00c      	beq.n	8002eee <RCCEx_PLLSAI1_Config+0x6e>
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d013      	beq.n	8002f00 <RCCEx_PLLSAI1_Config+0x80>
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d120      	bne.n	8002f1e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002edc:	4b5f      	ldr	r3, [pc, #380]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d11d      	bne.n	8002f24 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eec:	e01a      	b.n	8002f24 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002eee:	4b5b      	ldr	r3, [pc, #364]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d116      	bne.n	8002f28 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002efe:	e013      	b.n	8002f28 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f00:	4b56      	ldr	r3, [pc, #344]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10f      	bne.n	8002f2c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f0c:	4b53      	ldr	r3, [pc, #332]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d109      	bne.n	8002f2c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f1c:	e006      	b.n	8002f2c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
      break;
 8002f22:	e004      	b.n	8002f2e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f24:	bf00      	nop
 8002f26:	e002      	b.n	8002f2e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f28:	bf00      	nop
 8002f2a:	e000      	b.n	8002f2e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f2c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10d      	bne.n	8002f50 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f34:	4b49      	ldr	r3, [pc, #292]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	4944      	ldr	r1, [pc, #272]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d17d      	bne.n	8003052 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f56:	4b41      	ldr	r3, [pc, #260]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a40      	ldr	r2, [pc, #256]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f62:	f7fe fb23 	bl	80015ac <HAL_GetTick>
 8002f66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f68:	e009      	b.n	8002f7e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f6a:	f7fe fb1f 	bl	80015ac <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d902      	bls.n	8002f7e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	73fb      	strb	r3, [r7, #15]
        break;
 8002f7c:	e005      	b.n	8002f8a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f7e:	4b37      	ldr	r3, [pc, #220]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1ef      	bne.n	8002f6a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d160      	bne.n	8003052 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d111      	bne.n	8002fba <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f96:	4b31      	ldr	r3, [pc, #196]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6892      	ldr	r2, [r2, #8]
 8002fa6:	0211      	lsls	r1, r2, #8
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	68d2      	ldr	r2, [r2, #12]
 8002fac:	0912      	lsrs	r2, r2, #4
 8002fae:	0452      	lsls	r2, r2, #17
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	492a      	ldr	r1, [pc, #168]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	610b      	str	r3, [r1, #16]
 8002fb8:	e027      	b.n	800300a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d112      	bne.n	8002fe6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fc0:	4b26      	ldr	r3, [pc, #152]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6892      	ldr	r2, [r2, #8]
 8002fd0:	0211      	lsls	r1, r2, #8
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6912      	ldr	r2, [r2, #16]
 8002fd6:	0852      	lsrs	r2, r2, #1
 8002fd8:	3a01      	subs	r2, #1
 8002fda:	0552      	lsls	r2, r2, #21
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	491f      	ldr	r1, [pc, #124]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	610b      	str	r3, [r1, #16]
 8002fe4:	e011      	b.n	800300a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6892      	ldr	r2, [r2, #8]
 8002ff6:	0211      	lsls	r1, r2, #8
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6952      	ldr	r2, [r2, #20]
 8002ffc:	0852      	lsrs	r2, r2, #1
 8002ffe:	3a01      	subs	r2, #1
 8003000:	0652      	lsls	r2, r2, #25
 8003002:	430a      	orrs	r2, r1
 8003004:	4915      	ldr	r1, [pc, #84]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003006:	4313      	orrs	r3, r2
 8003008:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800300a:	4b14      	ldr	r3, [pc, #80]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a13      	ldr	r2, [pc, #76]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003010:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003014:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003016:	f7fe fac9 	bl	80015ac <HAL_GetTick>
 800301a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800301c:	e009      	b.n	8003032 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800301e:	f7fe fac5 	bl	80015ac <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d902      	bls.n	8003032 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	73fb      	strb	r3, [r7, #15]
          break;
 8003030:	e005      	b.n	800303e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0ef      	beq.n	800301e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d106      	bne.n	8003052 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	4903      	ldr	r1, [pc, #12]	; (800305c <RCCEx_PLLSAI1_Config+0x1dc>)
 800304e:	4313      	orrs	r3, r2
 8003050:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003052:	7bfb      	ldrb	r3, [r7, #15]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000

08003060 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800306e:	4b68      	ldr	r3, [pc, #416]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d018      	beq.n	80030ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800307a:	4b65      	ldr	r3, [pc, #404]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f003 0203 	and.w	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d10d      	bne.n	80030a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
       ||
 800308e:	2b00      	cmp	r3, #0
 8003090:	d009      	beq.n	80030a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003092:	4b5f      	ldr	r3, [pc, #380]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	091b      	lsrs	r3, r3, #4
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
       ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d044      	beq.n	8003130 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
 80030aa:	e041      	b.n	8003130 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d00c      	beq.n	80030ce <RCCEx_PLLSAI2_Config+0x6e>
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d013      	beq.n	80030e0 <RCCEx_PLLSAI2_Config+0x80>
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d120      	bne.n	80030fe <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030bc:	4b54      	ldr	r3, [pc, #336]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d11d      	bne.n	8003104 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030cc:	e01a      	b.n	8003104 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030ce:	4b50      	ldr	r3, [pc, #320]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d116      	bne.n	8003108 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030de:	e013      	b.n	8003108 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030e0:	4b4b      	ldr	r3, [pc, #300]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10f      	bne.n	800310c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030ec:	4b48      	ldr	r3, [pc, #288]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d109      	bne.n	800310c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030fc:	e006      	b.n	800310c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
      break;
 8003102:	e004      	b.n	800310e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003104:	bf00      	nop
 8003106:	e002      	b.n	800310e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003108:	bf00      	nop
 800310a:	e000      	b.n	800310e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800310c:	bf00      	nop
    }

    if(status == HAL_OK)
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10d      	bne.n	8003130 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003114:	4b3e      	ldr	r3, [pc, #248]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6819      	ldr	r1, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	3b01      	subs	r3, #1
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	430b      	orrs	r3, r1
 800312a:	4939      	ldr	r1, [pc, #228]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 800312c:	4313      	orrs	r3, r2
 800312e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d167      	bne.n	8003206 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003136:	4b36      	ldr	r3, [pc, #216]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a35      	ldr	r2, [pc, #212]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 800313c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003140:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003142:	f7fe fa33 	bl	80015ac <HAL_GetTick>
 8003146:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003148:	e009      	b.n	800315e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800314a:	f7fe fa2f 	bl	80015ac <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d902      	bls.n	800315e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	73fb      	strb	r3, [r7, #15]
        break;
 800315c:	e005      	b.n	800316a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800315e:	4b2c      	ldr	r3, [pc, #176]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1ef      	bne.n	800314a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d14a      	bne.n	8003206 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d111      	bne.n	800319a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003176:	4b26      	ldr	r3, [pc, #152]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800317e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6892      	ldr	r2, [r2, #8]
 8003186:	0211      	lsls	r1, r2, #8
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	68d2      	ldr	r2, [r2, #12]
 800318c:	0912      	lsrs	r2, r2, #4
 800318e:	0452      	lsls	r2, r2, #17
 8003190:	430a      	orrs	r2, r1
 8003192:	491f      	ldr	r1, [pc, #124]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003194:	4313      	orrs	r3, r2
 8003196:	614b      	str	r3, [r1, #20]
 8003198:	e011      	b.n	80031be <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800319a:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6892      	ldr	r2, [r2, #8]
 80031aa:	0211      	lsls	r1, r2, #8
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6912      	ldr	r2, [r2, #16]
 80031b0:	0852      	lsrs	r2, r2, #1
 80031b2:	3a01      	subs	r2, #1
 80031b4:	0652      	lsls	r2, r2, #25
 80031b6:	430a      	orrs	r2, r1
 80031b8:	4915      	ldr	r1, [pc, #84]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031be:	4b14      	ldr	r3, [pc, #80]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a13      	ldr	r2, [pc, #76]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ca:	f7fe f9ef 	bl	80015ac <HAL_GetTick>
 80031ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031d0:	e009      	b.n	80031e6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031d2:	f7fe f9eb 	bl	80015ac <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d902      	bls.n	80031e6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	73fb      	strb	r3, [r7, #15]
          break;
 80031e4:	e005      	b.n	80031f2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031e6:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0ef      	beq.n	80031d2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d106      	bne.n	8003206 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031fa:	695a      	ldr	r2, [r3, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	4903      	ldr	r1, [pc, #12]	; (8003210 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003202:	4313      	orrs	r3, r2
 8003204:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000

08003214 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e040      	b.n	80032a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fe f834 	bl	80012a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2224      	movs	r2, #36	; 0x24
 8003240:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0201 	bic.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fabe 	bl	80037d4 <UART_SetConfig>
 8003258:	4603      	mov	r3, r0
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e022      	b.n	80032a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fd3c 	bl	8003ce8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800327e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800328e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 fdc3 	bl	8003e2c <UART_CheckIdleState>
 80032a6:	4603      	mov	r3, r0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	f040 8081 	bne.w	80033cc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_UART_Transmit+0x26>
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e079      	b.n	80033ce <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_UART_Transmit+0x38>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e072      	b.n	80033ce <HAL_UART_Transmit+0x11e>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2221      	movs	r2, #33	; 0x21
 80032fa:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80032fc:	f7fe f956 	bl	80015ac <HAL_GetTick>
 8003300:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	88fa      	ldrh	r2, [r7, #6]
 8003306:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	88fa      	ldrh	r2, [r7, #6]
 800330e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331a:	d108      	bne.n	800332e <HAL_UART_Transmit+0x7e>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d104      	bne.n	800332e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003324:	2300      	movs	r3, #0
 8003326:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	e003      	b.n	8003336 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800333e:	e02d      	b.n	800339c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2200      	movs	r2, #0
 8003348:	2180      	movs	r1, #128	; 0x80
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 fdb3 	bl	8003eb6 <UART_WaitOnFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e039      	b.n	80033ce <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10b      	bne.n	8003378 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	881a      	ldrh	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800336c:	b292      	uxth	r2, r2
 800336e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	3302      	adds	r3, #2
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	e008      	b.n	800338a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	781a      	ldrb	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	b292      	uxth	r2, r2
 8003382:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	3301      	adds	r3, #1
 8003388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1cb      	bne.n	8003340 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2200      	movs	r2, #0
 80033b0:	2140      	movs	r1, #64	; 0x40
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 fd7f 	bl	8003eb6 <UART_WaitOnFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e005      	b.n	80033ce <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e000      	b.n	80033ce <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80033cc:	2302      	movs	r3, #2
  }
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	4613      	mov	r3, r2
 80033e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	f040 808a 	bne.w	8003504 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <HAL_UART_Receive_IT+0x24>
 80033f6:	88fb      	ldrh	r3, [r7, #6]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e082      	b.n	8003506 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_UART_Receive_IT+0x36>
 800340a:	2302      	movs	r3, #2
 800340c:	e07b      	b.n	8003506 <HAL_UART_Receive_IT+0x12e>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	88fa      	ldrh	r2, [r7, #6]
 8003420:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	88fa      	ldrh	r2, [r7, #6]
 8003428:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343a:	d10e      	bne.n	800345a <HAL_UART_Receive_IT+0x82>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d105      	bne.n	8003450 <HAL_UART_Receive_IT+0x78>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f240 12ff 	movw	r2, #511	; 0x1ff
 800344a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800344e:	e02d      	b.n	80034ac <HAL_UART_Receive_IT+0xd4>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	22ff      	movs	r2, #255	; 0xff
 8003454:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003458:	e028      	b.n	80034ac <HAL_UART_Receive_IT+0xd4>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10d      	bne.n	800347e <HAL_UART_Receive_IT+0xa6>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d104      	bne.n	8003474 <HAL_UART_Receive_IT+0x9c>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	22ff      	movs	r2, #255	; 0xff
 800346e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003472:	e01b      	b.n	80034ac <HAL_UART_Receive_IT+0xd4>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	227f      	movs	r2, #127	; 0x7f
 8003478:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800347c:	e016      	b.n	80034ac <HAL_UART_Receive_IT+0xd4>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003486:	d10d      	bne.n	80034a4 <HAL_UART_Receive_IT+0xcc>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d104      	bne.n	800349a <HAL_UART_Receive_IT+0xc2>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	227f      	movs	r2, #127	; 0x7f
 8003494:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003498:	e008      	b.n	80034ac <HAL_UART_Receive_IT+0xd4>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	223f      	movs	r2, #63	; 0x3f
 800349e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034a2:	e003      	b.n	80034ac <HAL_UART_Receive_IT+0xd4>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2222      	movs	r2, #34	; 0x22
 80034b6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d0:	d107      	bne.n	80034e2 <HAL_UART_Receive_IT+0x10a>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d103      	bne.n	80034e2 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4a0d      	ldr	r2, [pc, #52]	; (8003514 <HAL_UART_Receive_IT+0x13c>)
 80034de:	661a      	str	r2, [r3, #96]	; 0x60
 80034e0:	e002      	b.n	80034e8 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4a0c      	ldr	r2, [pc, #48]	; (8003518 <HAL_UART_Receive_IT+0x140>)
 80034e6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80034fe:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	e000      	b.n	8003506 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003504:	2302      	movs	r3, #2
  }
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	080040f5 	.word	0x080040f5
 8003518:	0800404b 	.word	0x0800404b

0800351c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003542:	4013      	ands	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d113      	bne.n	8003574 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00e      	beq.n	8003574 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	f003 0320 	and.w	r3, r3, #32
 800355c:	2b00      	cmp	r3, #0
 800355e:	d009      	beq.n	8003574 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8114 	beq.w	8003792 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	4798      	blx	r3
      }
      return;
 8003572:	e10e      	b.n	8003792 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 80d6 	beq.w	8003728 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d105      	bne.n	8003592 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4b86      	ldr	r3, [pc, #536]	; (80037a4 <HAL_UART_IRQHandler+0x288>)
 800358a:	4013      	ands	r3, r2
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80cb 	beq.w	8003728 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00e      	beq.n	80035ba <HAL_UART_IRQHandler+0x9e>
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d009      	beq.n	80035ba <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2201      	movs	r2, #1
 80035ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035b2:	f043 0201 	orr.w	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00e      	beq.n	80035e2 <HAL_UART_IRQHandler+0xc6>
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2202      	movs	r2, #2
 80035d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035da:	f043 0204 	orr.w	r2, r3, #4
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00e      	beq.n	800360a <HAL_UART_IRQHandler+0xee>
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2204      	movs	r2, #4
 80035fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003602:	f043 0202 	orr.w	r2, r3, #2
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d013      	beq.n	800363c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d104      	bne.n	8003628 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003624:	2b00      	cmp	r3, #0
 8003626:	d009      	beq.n	800363c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2208      	movs	r2, #8
 800362e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003634:	f043 0208 	orr.w	r2, r3, #8
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00f      	beq.n	8003666 <HAL_UART_IRQHandler+0x14a>
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003658:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800365e:	f043 0220 	orr.w	r2, r3, #32
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 8093 	beq.w	8003796 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00c      	beq.n	8003694 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b00      	cmp	r3, #0
 8003682:	d007      	beq.n	8003694 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003698:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	d004      	beq.n	80036b2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d031      	beq.n	8003716 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fc7a 	bl	8003fac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c2:	2b40      	cmp	r3, #64	; 0x40
 80036c4:	d123      	bne.n	800370e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036d4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d013      	beq.n	8003706 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e2:	4a31      	ldr	r2, [pc, #196]	; (80037a8 <HAL_UART_IRQHandler+0x28c>)
 80036e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fe f87b 	bl	80017e6 <HAL_DMA_Abort_IT>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d016      	beq.n	8003724 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003700:	4610      	mov	r0, r2
 8003702:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003704:	e00e      	b.n	8003724 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f85a 	bl	80037c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370c:	e00a      	b.n	8003724 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f856 	bl	80037c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003714:	e006      	b.n	8003724 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f852 	bl	80037c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003722:	e038      	b.n	8003796 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003724:	bf00      	nop
    return;
 8003726:	e036      	b.n	8003796 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00d      	beq.n	800374e <HAL_UART_IRQHandler+0x232>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003744:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fd29 	bl	800419e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800374c:	e026      	b.n	800379c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00d      	beq.n	8003774 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375e:	2b00      	cmp	r3, #0
 8003760:	d008      	beq.n	8003774 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003766:	2b00      	cmp	r3, #0
 8003768:	d017      	beq.n	800379a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
    }
    return;
 8003772:	e012      	b.n	800379a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00e      	beq.n	800379c <HAL_UART_IRQHandler+0x280>
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003784:	2b00      	cmp	r3, #0
 8003786:	d009      	beq.n	800379c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fc45 	bl	8004018 <UART_EndTransmit_IT>
    return;
 800378e:	bf00      	nop
 8003790:	e004      	b.n	800379c <HAL_UART_IRQHandler+0x280>
      return;
 8003792:	bf00      	nop
 8003794:	e002      	b.n	800379c <HAL_UART_IRQHandler+0x280>
    return;
 8003796:	bf00      	nop
 8003798:	e000      	b.n	800379c <HAL_UART_IRQHandler+0x280>
    return;
 800379a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	04000120 	.word	0x04000120
 80037a8:	08003fed 	.word	0x08003fed

080037ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037d4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80037d8:	b088      	sub	sp, #32
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	4bac      	ldr	r3, [pc, #688]	; (8003ab4 <UART_SetConfig+0x2e0>)
 8003802:	4013      	ands	r3, r2
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	69f9      	ldr	r1, [r7, #28]
 800380a:	430b      	orrs	r3, r1
 800380c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4aa2      	ldr	r2, [pc, #648]	; (8003ab8 <UART_SetConfig+0x2e4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d004      	beq.n	800383e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	4313      	orrs	r3, r2
 800383c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	430a      	orrs	r2, r1
 8003850:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a99      	ldr	r2, [pc, #612]	; (8003abc <UART_SetConfig+0x2e8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d121      	bne.n	80038a0 <UART_SetConfig+0xcc>
 800385c:	4b98      	ldr	r3, [pc, #608]	; (8003ac0 <UART_SetConfig+0x2ec>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b03      	cmp	r3, #3
 8003868:	d816      	bhi.n	8003898 <UART_SetConfig+0xc4>
 800386a:	a201      	add	r2, pc, #4	; (adr r2, 8003870 <UART_SetConfig+0x9c>)
 800386c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003870:	08003881 	.word	0x08003881
 8003874:	0800388d 	.word	0x0800388d
 8003878:	08003887 	.word	0x08003887
 800387c:	08003893 	.word	0x08003893
 8003880:	2301      	movs	r3, #1
 8003882:	76fb      	strb	r3, [r7, #27]
 8003884:	e0e8      	b.n	8003a58 <UART_SetConfig+0x284>
 8003886:	2302      	movs	r3, #2
 8003888:	76fb      	strb	r3, [r7, #27]
 800388a:	e0e5      	b.n	8003a58 <UART_SetConfig+0x284>
 800388c:	2304      	movs	r3, #4
 800388e:	76fb      	strb	r3, [r7, #27]
 8003890:	e0e2      	b.n	8003a58 <UART_SetConfig+0x284>
 8003892:	2308      	movs	r3, #8
 8003894:	76fb      	strb	r3, [r7, #27]
 8003896:	e0df      	b.n	8003a58 <UART_SetConfig+0x284>
 8003898:	2310      	movs	r3, #16
 800389a:	76fb      	strb	r3, [r7, #27]
 800389c:	bf00      	nop
 800389e:	e0db      	b.n	8003a58 <UART_SetConfig+0x284>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a87      	ldr	r2, [pc, #540]	; (8003ac4 <UART_SetConfig+0x2f0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d134      	bne.n	8003914 <UART_SetConfig+0x140>
 80038aa:	4b85      	ldr	r3, [pc, #532]	; (8003ac0 <UART_SetConfig+0x2ec>)
 80038ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	2b0c      	cmp	r3, #12
 80038b6:	d829      	bhi.n	800390c <UART_SetConfig+0x138>
 80038b8:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <UART_SetConfig+0xec>)
 80038ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038be:	bf00      	nop
 80038c0:	080038f5 	.word	0x080038f5
 80038c4:	0800390d 	.word	0x0800390d
 80038c8:	0800390d 	.word	0x0800390d
 80038cc:	0800390d 	.word	0x0800390d
 80038d0:	08003901 	.word	0x08003901
 80038d4:	0800390d 	.word	0x0800390d
 80038d8:	0800390d 	.word	0x0800390d
 80038dc:	0800390d 	.word	0x0800390d
 80038e0:	080038fb 	.word	0x080038fb
 80038e4:	0800390d 	.word	0x0800390d
 80038e8:	0800390d 	.word	0x0800390d
 80038ec:	0800390d 	.word	0x0800390d
 80038f0:	08003907 	.word	0x08003907
 80038f4:	2300      	movs	r3, #0
 80038f6:	76fb      	strb	r3, [r7, #27]
 80038f8:	e0ae      	b.n	8003a58 <UART_SetConfig+0x284>
 80038fa:	2302      	movs	r3, #2
 80038fc:	76fb      	strb	r3, [r7, #27]
 80038fe:	e0ab      	b.n	8003a58 <UART_SetConfig+0x284>
 8003900:	2304      	movs	r3, #4
 8003902:	76fb      	strb	r3, [r7, #27]
 8003904:	e0a8      	b.n	8003a58 <UART_SetConfig+0x284>
 8003906:	2308      	movs	r3, #8
 8003908:	76fb      	strb	r3, [r7, #27]
 800390a:	e0a5      	b.n	8003a58 <UART_SetConfig+0x284>
 800390c:	2310      	movs	r3, #16
 800390e:	76fb      	strb	r3, [r7, #27]
 8003910:	bf00      	nop
 8003912:	e0a1      	b.n	8003a58 <UART_SetConfig+0x284>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a6b      	ldr	r2, [pc, #428]	; (8003ac8 <UART_SetConfig+0x2f4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d120      	bne.n	8003960 <UART_SetConfig+0x18c>
 800391e:	4b68      	ldr	r3, [pc, #416]	; (8003ac0 <UART_SetConfig+0x2ec>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003928:	2b10      	cmp	r3, #16
 800392a:	d00f      	beq.n	800394c <UART_SetConfig+0x178>
 800392c:	2b10      	cmp	r3, #16
 800392e:	d802      	bhi.n	8003936 <UART_SetConfig+0x162>
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <UART_SetConfig+0x16c>
 8003934:	e010      	b.n	8003958 <UART_SetConfig+0x184>
 8003936:	2b20      	cmp	r3, #32
 8003938:	d005      	beq.n	8003946 <UART_SetConfig+0x172>
 800393a:	2b30      	cmp	r3, #48	; 0x30
 800393c:	d009      	beq.n	8003952 <UART_SetConfig+0x17e>
 800393e:	e00b      	b.n	8003958 <UART_SetConfig+0x184>
 8003940:	2300      	movs	r3, #0
 8003942:	76fb      	strb	r3, [r7, #27]
 8003944:	e088      	b.n	8003a58 <UART_SetConfig+0x284>
 8003946:	2302      	movs	r3, #2
 8003948:	76fb      	strb	r3, [r7, #27]
 800394a:	e085      	b.n	8003a58 <UART_SetConfig+0x284>
 800394c:	2304      	movs	r3, #4
 800394e:	76fb      	strb	r3, [r7, #27]
 8003950:	e082      	b.n	8003a58 <UART_SetConfig+0x284>
 8003952:	2308      	movs	r3, #8
 8003954:	76fb      	strb	r3, [r7, #27]
 8003956:	e07f      	b.n	8003a58 <UART_SetConfig+0x284>
 8003958:	2310      	movs	r3, #16
 800395a:	76fb      	strb	r3, [r7, #27]
 800395c:	bf00      	nop
 800395e:	e07b      	b.n	8003a58 <UART_SetConfig+0x284>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a59      	ldr	r2, [pc, #356]	; (8003acc <UART_SetConfig+0x2f8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d120      	bne.n	80039ac <UART_SetConfig+0x1d8>
 800396a:	4b55      	ldr	r3, [pc, #340]	; (8003ac0 <UART_SetConfig+0x2ec>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003974:	2b40      	cmp	r3, #64	; 0x40
 8003976:	d00f      	beq.n	8003998 <UART_SetConfig+0x1c4>
 8003978:	2b40      	cmp	r3, #64	; 0x40
 800397a:	d802      	bhi.n	8003982 <UART_SetConfig+0x1ae>
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <UART_SetConfig+0x1b8>
 8003980:	e010      	b.n	80039a4 <UART_SetConfig+0x1d0>
 8003982:	2b80      	cmp	r3, #128	; 0x80
 8003984:	d005      	beq.n	8003992 <UART_SetConfig+0x1be>
 8003986:	2bc0      	cmp	r3, #192	; 0xc0
 8003988:	d009      	beq.n	800399e <UART_SetConfig+0x1ca>
 800398a:	e00b      	b.n	80039a4 <UART_SetConfig+0x1d0>
 800398c:	2300      	movs	r3, #0
 800398e:	76fb      	strb	r3, [r7, #27]
 8003990:	e062      	b.n	8003a58 <UART_SetConfig+0x284>
 8003992:	2302      	movs	r3, #2
 8003994:	76fb      	strb	r3, [r7, #27]
 8003996:	e05f      	b.n	8003a58 <UART_SetConfig+0x284>
 8003998:	2304      	movs	r3, #4
 800399a:	76fb      	strb	r3, [r7, #27]
 800399c:	e05c      	b.n	8003a58 <UART_SetConfig+0x284>
 800399e:	2308      	movs	r3, #8
 80039a0:	76fb      	strb	r3, [r7, #27]
 80039a2:	e059      	b.n	8003a58 <UART_SetConfig+0x284>
 80039a4:	2310      	movs	r3, #16
 80039a6:	76fb      	strb	r3, [r7, #27]
 80039a8:	bf00      	nop
 80039aa:	e055      	b.n	8003a58 <UART_SetConfig+0x284>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a47      	ldr	r2, [pc, #284]	; (8003ad0 <UART_SetConfig+0x2fc>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d124      	bne.n	8003a00 <UART_SetConfig+0x22c>
 80039b6:	4b42      	ldr	r3, [pc, #264]	; (8003ac0 <UART_SetConfig+0x2ec>)
 80039b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c4:	d012      	beq.n	80039ec <UART_SetConfig+0x218>
 80039c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ca:	d802      	bhi.n	80039d2 <UART_SetConfig+0x1fe>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d007      	beq.n	80039e0 <UART_SetConfig+0x20c>
 80039d0:	e012      	b.n	80039f8 <UART_SetConfig+0x224>
 80039d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d6:	d006      	beq.n	80039e6 <UART_SetConfig+0x212>
 80039d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039dc:	d009      	beq.n	80039f2 <UART_SetConfig+0x21e>
 80039de:	e00b      	b.n	80039f8 <UART_SetConfig+0x224>
 80039e0:	2300      	movs	r3, #0
 80039e2:	76fb      	strb	r3, [r7, #27]
 80039e4:	e038      	b.n	8003a58 <UART_SetConfig+0x284>
 80039e6:	2302      	movs	r3, #2
 80039e8:	76fb      	strb	r3, [r7, #27]
 80039ea:	e035      	b.n	8003a58 <UART_SetConfig+0x284>
 80039ec:	2304      	movs	r3, #4
 80039ee:	76fb      	strb	r3, [r7, #27]
 80039f0:	e032      	b.n	8003a58 <UART_SetConfig+0x284>
 80039f2:	2308      	movs	r3, #8
 80039f4:	76fb      	strb	r3, [r7, #27]
 80039f6:	e02f      	b.n	8003a58 <UART_SetConfig+0x284>
 80039f8:	2310      	movs	r3, #16
 80039fa:	76fb      	strb	r3, [r7, #27]
 80039fc:	bf00      	nop
 80039fe:	e02b      	b.n	8003a58 <UART_SetConfig+0x284>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a2c      	ldr	r2, [pc, #176]	; (8003ab8 <UART_SetConfig+0x2e4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d124      	bne.n	8003a54 <UART_SetConfig+0x280>
 8003a0a:	4b2d      	ldr	r3, [pc, #180]	; (8003ac0 <UART_SetConfig+0x2ec>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a18:	d012      	beq.n	8003a40 <UART_SetConfig+0x26c>
 8003a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1e:	d802      	bhi.n	8003a26 <UART_SetConfig+0x252>
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <UART_SetConfig+0x260>
 8003a24:	e012      	b.n	8003a4c <UART_SetConfig+0x278>
 8003a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a2a:	d006      	beq.n	8003a3a <UART_SetConfig+0x266>
 8003a2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a30:	d009      	beq.n	8003a46 <UART_SetConfig+0x272>
 8003a32:	e00b      	b.n	8003a4c <UART_SetConfig+0x278>
 8003a34:	2300      	movs	r3, #0
 8003a36:	76fb      	strb	r3, [r7, #27]
 8003a38:	e00e      	b.n	8003a58 <UART_SetConfig+0x284>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	76fb      	strb	r3, [r7, #27]
 8003a3e:	e00b      	b.n	8003a58 <UART_SetConfig+0x284>
 8003a40:	2304      	movs	r3, #4
 8003a42:	76fb      	strb	r3, [r7, #27]
 8003a44:	e008      	b.n	8003a58 <UART_SetConfig+0x284>
 8003a46:	2308      	movs	r3, #8
 8003a48:	76fb      	strb	r3, [r7, #27]
 8003a4a:	e005      	b.n	8003a58 <UART_SetConfig+0x284>
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	76fb      	strb	r3, [r7, #27]
 8003a50:	bf00      	nop
 8003a52:	e001      	b.n	8003a58 <UART_SetConfig+0x284>
 8003a54:	2310      	movs	r3, #16
 8003a56:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a16      	ldr	r2, [pc, #88]	; (8003ab8 <UART_SetConfig+0x2e4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	f040 8087 	bne.w	8003b72 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a64:	7efb      	ldrb	r3, [r7, #27]
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d836      	bhi.n	8003ad8 <UART_SetConfig+0x304>
 8003a6a:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <UART_SetConfig+0x29c>)
 8003a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a70:	08003a95 	.word	0x08003a95
 8003a74:	08003ad9 	.word	0x08003ad9
 8003a78:	08003a9d 	.word	0x08003a9d
 8003a7c:	08003ad9 	.word	0x08003ad9
 8003a80:	08003aa3 	.word	0x08003aa3
 8003a84:	08003ad9 	.word	0x08003ad9
 8003a88:	08003ad9 	.word	0x08003ad9
 8003a8c:	08003ad9 	.word	0x08003ad9
 8003a90:	08003aab 	.word	0x08003aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a94:	f7fe fe82 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 8003a98:	6178      	str	r0, [r7, #20]
        break;
 8003a9a:	e022      	b.n	8003ae2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <UART_SetConfig+0x300>)
 8003a9e:	617b      	str	r3, [r7, #20]
        break;
 8003aa0:	e01f      	b.n	8003ae2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aa2:	f7fe fde5 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 8003aa6:	6178      	str	r0, [r7, #20]
        break;
 8003aa8:	e01b      	b.n	8003ae2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aae:	617b      	str	r3, [r7, #20]
        break;
 8003ab0:	e017      	b.n	8003ae2 <UART_SetConfig+0x30e>
 8003ab2:	bf00      	nop
 8003ab4:	efff69f3 	.word	0xefff69f3
 8003ab8:	40008000 	.word	0x40008000
 8003abc:	40013800 	.word	0x40013800
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	40004400 	.word	0x40004400
 8003ac8:	40004800 	.word	0x40004800
 8003acc:	40004c00 	.word	0x40004c00
 8003ad0:	40005000 	.word	0x40005000
 8003ad4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	76bb      	strb	r3, [r7, #26]
        break;
 8003ae0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 80f1 	beq.w	8003ccc <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	4413      	add	r3, r2
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d305      	bcc.n	8003b06 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d902      	bls.n	8003b0c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	76bb      	strb	r3, [r7, #26]
 8003b0a:	e0df      	b.n	8003ccc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	4619      	mov	r1, r3
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	f04f 0400 	mov.w	r4, #0
 8003b1c:	0214      	lsls	r4, r2, #8
 8003b1e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003b22:	020b      	lsls	r3, r1, #8
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6852      	ldr	r2, [r2, #4]
 8003b28:	0852      	lsrs	r2, r2, #1
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	eb13 0b01 	adds.w	fp, r3, r1
 8003b34:	eb44 0c02 	adc.w	ip, r4, r2
 8003b38:	4658      	mov	r0, fp
 8003b3a:	4661      	mov	r1, ip
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f04f 0400 	mov.w	r4, #0
 8003b44:	461a      	mov	r2, r3
 8003b46:	4623      	mov	r3, r4
 8003b48:	f7fc fb9a 	bl	8000280 <__aeabi_uldivmod>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	460c      	mov	r4, r1
 8003b50:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b58:	d308      	bcc.n	8003b6c <UART_SetConfig+0x398>
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b60:	d204      	bcs.n	8003b6c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	60da      	str	r2, [r3, #12]
 8003b6a:	e0af      	b.n	8003ccc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	76bb      	strb	r3, [r7, #26]
 8003b70:	e0ac      	b.n	8003ccc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b7a:	d15b      	bne.n	8003c34 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003b7c:	7efb      	ldrb	r3, [r7, #27]
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d827      	bhi.n	8003bd2 <UART_SetConfig+0x3fe>
 8003b82:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <UART_SetConfig+0x3b4>)
 8003b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b88:	08003bad 	.word	0x08003bad
 8003b8c:	08003bb5 	.word	0x08003bb5
 8003b90:	08003bbd 	.word	0x08003bbd
 8003b94:	08003bd3 	.word	0x08003bd3
 8003b98:	08003bc3 	.word	0x08003bc3
 8003b9c:	08003bd3 	.word	0x08003bd3
 8003ba0:	08003bd3 	.word	0x08003bd3
 8003ba4:	08003bd3 	.word	0x08003bd3
 8003ba8:	08003bcb 	.word	0x08003bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bac:	f7fe fdf6 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 8003bb0:	6178      	str	r0, [r7, #20]
        break;
 8003bb2:	e013      	b.n	8003bdc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bb4:	f7fe fe08 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 8003bb8:	6178      	str	r0, [r7, #20]
        break;
 8003bba:	e00f      	b.n	8003bdc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bbc:	4b49      	ldr	r3, [pc, #292]	; (8003ce4 <UART_SetConfig+0x510>)
 8003bbe:	617b      	str	r3, [r7, #20]
        break;
 8003bc0:	e00c      	b.n	8003bdc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc2:	f7fe fd55 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 8003bc6:	6178      	str	r0, [r7, #20]
        break;
 8003bc8:	e008      	b.n	8003bdc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bce:	617b      	str	r3, [r7, #20]
        break;
 8003bd0:	e004      	b.n	8003bdc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	76bb      	strb	r3, [r7, #26]
        break;
 8003bda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d074      	beq.n	8003ccc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	005a      	lsls	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	441a      	add	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b0f      	cmp	r3, #15
 8003bfe:	d916      	bls.n	8003c2e <UART_SetConfig+0x45a>
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c06:	d212      	bcs.n	8003c2e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f023 030f 	bic.w	r3, r3, #15
 8003c10:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	085b      	lsrs	r3, r3, #1
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	89fb      	ldrh	r3, [r7, #14]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	89fa      	ldrh	r2, [r7, #14]
 8003c2a:	60da      	str	r2, [r3, #12]
 8003c2c:	e04e      	b.n	8003ccc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	76bb      	strb	r3, [r7, #26]
 8003c32:	e04b      	b.n	8003ccc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c34:	7efb      	ldrb	r3, [r7, #27]
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d827      	bhi.n	8003c8a <UART_SetConfig+0x4b6>
 8003c3a:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <UART_SetConfig+0x46c>)
 8003c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c40:	08003c65 	.word	0x08003c65
 8003c44:	08003c6d 	.word	0x08003c6d
 8003c48:	08003c75 	.word	0x08003c75
 8003c4c:	08003c8b 	.word	0x08003c8b
 8003c50:	08003c7b 	.word	0x08003c7b
 8003c54:	08003c8b 	.word	0x08003c8b
 8003c58:	08003c8b 	.word	0x08003c8b
 8003c5c:	08003c8b 	.word	0x08003c8b
 8003c60:	08003c83 	.word	0x08003c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c64:	f7fe fd9a 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 8003c68:	6178      	str	r0, [r7, #20]
        break;
 8003c6a:	e013      	b.n	8003c94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c6c:	f7fe fdac 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 8003c70:	6178      	str	r0, [r7, #20]
        break;
 8003c72:	e00f      	b.n	8003c94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c74:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <UART_SetConfig+0x510>)
 8003c76:	617b      	str	r3, [r7, #20]
        break;
 8003c78:	e00c      	b.n	8003c94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c7a:	f7fe fcf9 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 8003c7e:	6178      	str	r0, [r7, #20]
        break;
 8003c80:	e008      	b.n	8003c94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c86:	617b      	str	r3, [r7, #20]
        break;
 8003c88:	e004      	b.n	8003c94 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	76bb      	strb	r3, [r7, #26]
        break;
 8003c92:	bf00      	nop
    }

    if (pclk != 0U)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d018      	beq.n	8003ccc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	085a      	lsrs	r2, r3, #1
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	441a      	add	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	2b0f      	cmp	r3, #15
 8003cb4:	d908      	bls.n	8003cc8 <UART_SetConfig+0x4f4>
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbc:	d204      	bcs.n	8003cc8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	e001      	b.n	8003ccc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003cd8:	7ebb      	ldrb	r3, [r7, #26]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3720      	adds	r7, #32
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003ce4:	00f42400 	.word	0x00f42400

08003ce8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d01a      	beq.n	8003dfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de6:	d10a      	bne.n	8003dfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	605a      	str	r2, [r3, #4]
  }
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003e3a:	f7fd fbb7 	bl	80015ac <HAL_GetTick>
 8003e3e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d10e      	bne.n	8003e6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f82a 	bl	8003eb6 <UART_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e020      	b.n	8003eae <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d10e      	bne.n	8003e98 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f814 	bl	8003eb6 <UART_WaitOnFlagUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e00a      	b.n	8003eae <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	603b      	str	r3, [r7, #0]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec6:	e05d      	b.n	8003f84 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ece:	d059      	beq.n	8003f84 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed0:	f7fd fb6c 	bl	80015ac <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d302      	bcc.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d11b      	bne.n	8003f1e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ef4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0201 	bic.w	r2, r2, #1
 8003f04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e042      	b.n	8003fa4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d02b      	beq.n	8003f84 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f3a:	d123      	bne.n	8003f84 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f54:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e00f      	b.n	8003fa4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69da      	ldr	r2, [r3, #28]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d092      	beq.n	8003ec8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003fc2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0201 	bic.w	r2, r2, #1
 8003fd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f7ff fbd8 	bl	80037c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800402e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2220      	movs	r2, #32
 8004034:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff fbb5 	bl	80037ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004058:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800405e:	2b22      	cmp	r3, #34	; 0x22
 8004060:	d13a      	bne.n	80040d8 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004068:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800406a:	89bb      	ldrh	r3, [r7, #12]
 800406c:	b2d9      	uxtb	r1, r3
 800406e:	89fb      	ldrh	r3, [r7, #14]
 8004070:	b2da      	uxtb	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004076:	400a      	ands	r2, r1
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d123      	bne.n	80040ec <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040b2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0201 	bic.w	r2, r2, #1
 80040c2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7fc fa55 	bl	8000580 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040d6:	e009      	b.n	80040ec <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	8b1b      	ldrh	r3, [r3, #24]
 80040de:	b29a      	uxth	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0208 	orr.w	r2, r2, #8
 80040e8:	b292      	uxth	r2, r2
 80040ea:	831a      	strh	r2, [r3, #24]
}
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004102:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004108:	2b22      	cmp	r3, #34	; 0x22
 800410a:	d13a      	bne.n	8004182 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004112:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004118:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800411a:	89ba      	ldrh	r2, [r7, #12]
 800411c:	89fb      	ldrh	r3, [r7, #14]
 800411e:	4013      	ands	r3, r2
 8004120:	b29a      	uxth	r2, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412a:	1c9a      	adds	r2, r3, #2
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d123      	bne.n	8004196 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800415c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fc fa00 	bl	8000580 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004180:	e009      	b.n	8004196 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	8b1b      	ldrh	r3, [r3, #24]
 8004188:	b29a      	uxth	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0208 	orr.w	r2, r2, #8
 8004192:	b292      	uxth	r2, r2
 8004194:	831a      	strh	r2, [r3, #24]
}
 8004196:	bf00      	nop
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <atoi>:
 80041b2:	220a      	movs	r2, #10
 80041b4:	2100      	movs	r1, #0
 80041b6:	f000 b8cf 	b.w	8004358 <strtol>
	...

080041bc <__errno>:
 80041bc:	4b01      	ldr	r3, [pc, #4]	; (80041c4 <__errno+0x8>)
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	2000000c 	.word	0x2000000c

080041c8 <__libc_init_array>:
 80041c8:	b570      	push	{r4, r5, r6, lr}
 80041ca:	4e0d      	ldr	r6, [pc, #52]	; (8004200 <__libc_init_array+0x38>)
 80041cc:	4c0d      	ldr	r4, [pc, #52]	; (8004204 <__libc_init_array+0x3c>)
 80041ce:	1ba4      	subs	r4, r4, r6
 80041d0:	10a4      	asrs	r4, r4, #2
 80041d2:	2500      	movs	r5, #0
 80041d4:	42a5      	cmp	r5, r4
 80041d6:	d109      	bne.n	80041ec <__libc_init_array+0x24>
 80041d8:	4e0b      	ldr	r6, [pc, #44]	; (8004208 <__libc_init_array+0x40>)
 80041da:	4c0c      	ldr	r4, [pc, #48]	; (800420c <__libc_init_array+0x44>)
 80041dc:	f000 fcdc 	bl	8004b98 <_init>
 80041e0:	1ba4      	subs	r4, r4, r6
 80041e2:	10a4      	asrs	r4, r4, #2
 80041e4:	2500      	movs	r5, #0
 80041e6:	42a5      	cmp	r5, r4
 80041e8:	d105      	bne.n	80041f6 <__libc_init_array+0x2e>
 80041ea:	bd70      	pop	{r4, r5, r6, pc}
 80041ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041f0:	4798      	blx	r3
 80041f2:	3501      	adds	r5, #1
 80041f4:	e7ee      	b.n	80041d4 <__libc_init_array+0xc>
 80041f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041fa:	4798      	blx	r3
 80041fc:	3501      	adds	r5, #1
 80041fe:	e7f2      	b.n	80041e6 <__libc_init_array+0x1e>
 8004200:	08004e04 	.word	0x08004e04
 8004204:	08004e04 	.word	0x08004e04
 8004208:	08004e04 	.word	0x08004e04
 800420c:	08004e08 	.word	0x08004e08

08004210 <memset>:
 8004210:	4402      	add	r2, r0
 8004212:	4603      	mov	r3, r0
 8004214:	4293      	cmp	r3, r2
 8004216:	d100      	bne.n	800421a <memset+0xa>
 8004218:	4770      	bx	lr
 800421a:	f803 1b01 	strb.w	r1, [r3], #1
 800421e:	e7f9      	b.n	8004214 <memset+0x4>

08004220 <siprintf>:
 8004220:	b40e      	push	{r1, r2, r3}
 8004222:	b500      	push	{lr}
 8004224:	b09c      	sub	sp, #112	; 0x70
 8004226:	ab1d      	add	r3, sp, #116	; 0x74
 8004228:	9002      	str	r0, [sp, #8]
 800422a:	9006      	str	r0, [sp, #24]
 800422c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004230:	4809      	ldr	r0, [pc, #36]	; (8004258 <siprintf+0x38>)
 8004232:	9107      	str	r1, [sp, #28]
 8004234:	9104      	str	r1, [sp, #16]
 8004236:	4909      	ldr	r1, [pc, #36]	; (800425c <siprintf+0x3c>)
 8004238:	f853 2b04 	ldr.w	r2, [r3], #4
 800423c:	9105      	str	r1, [sp, #20]
 800423e:	6800      	ldr	r0, [r0, #0]
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	a902      	add	r1, sp, #8
 8004244:	f000 f90e 	bl	8004464 <_svfiprintf_r>
 8004248:	9b02      	ldr	r3, [sp, #8]
 800424a:	2200      	movs	r2, #0
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	b01c      	add	sp, #112	; 0x70
 8004250:	f85d eb04 	ldr.w	lr, [sp], #4
 8004254:	b003      	add	sp, #12
 8004256:	4770      	bx	lr
 8004258:	2000000c 	.word	0x2000000c
 800425c:	ffff0208 	.word	0xffff0208

08004260 <_strtol_l.isra.0>:
 8004260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004264:	4680      	mov	r8, r0
 8004266:	4689      	mov	r9, r1
 8004268:	4692      	mov	sl, r2
 800426a:	461e      	mov	r6, r3
 800426c:	460f      	mov	r7, r1
 800426e:	463d      	mov	r5, r7
 8004270:	9808      	ldr	r0, [sp, #32]
 8004272:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004276:	f000 f885 	bl	8004384 <__locale_ctype_ptr_l>
 800427a:	4420      	add	r0, r4
 800427c:	7843      	ldrb	r3, [r0, #1]
 800427e:	f013 0308 	ands.w	r3, r3, #8
 8004282:	d132      	bne.n	80042ea <_strtol_l.isra.0+0x8a>
 8004284:	2c2d      	cmp	r4, #45	; 0x2d
 8004286:	d132      	bne.n	80042ee <_strtol_l.isra.0+0x8e>
 8004288:	787c      	ldrb	r4, [r7, #1]
 800428a:	1cbd      	adds	r5, r7, #2
 800428c:	2201      	movs	r2, #1
 800428e:	2e00      	cmp	r6, #0
 8004290:	d05d      	beq.n	800434e <_strtol_l.isra.0+0xee>
 8004292:	2e10      	cmp	r6, #16
 8004294:	d109      	bne.n	80042aa <_strtol_l.isra.0+0x4a>
 8004296:	2c30      	cmp	r4, #48	; 0x30
 8004298:	d107      	bne.n	80042aa <_strtol_l.isra.0+0x4a>
 800429a:	782b      	ldrb	r3, [r5, #0]
 800429c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80042a0:	2b58      	cmp	r3, #88	; 0x58
 80042a2:	d14f      	bne.n	8004344 <_strtol_l.isra.0+0xe4>
 80042a4:	786c      	ldrb	r4, [r5, #1]
 80042a6:	2610      	movs	r6, #16
 80042a8:	3502      	adds	r5, #2
 80042aa:	2a00      	cmp	r2, #0
 80042ac:	bf14      	ite	ne
 80042ae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80042b2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80042b6:	2700      	movs	r7, #0
 80042b8:	fbb1 fcf6 	udiv	ip, r1, r6
 80042bc:	4638      	mov	r0, r7
 80042be:	fb06 1e1c 	mls	lr, r6, ip, r1
 80042c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80042c6:	2b09      	cmp	r3, #9
 80042c8:	d817      	bhi.n	80042fa <_strtol_l.isra.0+0x9a>
 80042ca:	461c      	mov	r4, r3
 80042cc:	42a6      	cmp	r6, r4
 80042ce:	dd23      	ble.n	8004318 <_strtol_l.isra.0+0xb8>
 80042d0:	1c7b      	adds	r3, r7, #1
 80042d2:	d007      	beq.n	80042e4 <_strtol_l.isra.0+0x84>
 80042d4:	4584      	cmp	ip, r0
 80042d6:	d31c      	bcc.n	8004312 <_strtol_l.isra.0+0xb2>
 80042d8:	d101      	bne.n	80042de <_strtol_l.isra.0+0x7e>
 80042da:	45a6      	cmp	lr, r4
 80042dc:	db19      	blt.n	8004312 <_strtol_l.isra.0+0xb2>
 80042de:	fb00 4006 	mla	r0, r0, r6, r4
 80042e2:	2701      	movs	r7, #1
 80042e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80042e8:	e7eb      	b.n	80042c2 <_strtol_l.isra.0+0x62>
 80042ea:	462f      	mov	r7, r5
 80042ec:	e7bf      	b.n	800426e <_strtol_l.isra.0+0xe>
 80042ee:	2c2b      	cmp	r4, #43	; 0x2b
 80042f0:	bf04      	itt	eq
 80042f2:	1cbd      	addeq	r5, r7, #2
 80042f4:	787c      	ldrbeq	r4, [r7, #1]
 80042f6:	461a      	mov	r2, r3
 80042f8:	e7c9      	b.n	800428e <_strtol_l.isra.0+0x2e>
 80042fa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80042fe:	2b19      	cmp	r3, #25
 8004300:	d801      	bhi.n	8004306 <_strtol_l.isra.0+0xa6>
 8004302:	3c37      	subs	r4, #55	; 0x37
 8004304:	e7e2      	b.n	80042cc <_strtol_l.isra.0+0x6c>
 8004306:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800430a:	2b19      	cmp	r3, #25
 800430c:	d804      	bhi.n	8004318 <_strtol_l.isra.0+0xb8>
 800430e:	3c57      	subs	r4, #87	; 0x57
 8004310:	e7dc      	b.n	80042cc <_strtol_l.isra.0+0x6c>
 8004312:	f04f 37ff 	mov.w	r7, #4294967295
 8004316:	e7e5      	b.n	80042e4 <_strtol_l.isra.0+0x84>
 8004318:	1c7b      	adds	r3, r7, #1
 800431a:	d108      	bne.n	800432e <_strtol_l.isra.0+0xce>
 800431c:	2322      	movs	r3, #34	; 0x22
 800431e:	f8c8 3000 	str.w	r3, [r8]
 8004322:	4608      	mov	r0, r1
 8004324:	f1ba 0f00 	cmp.w	sl, #0
 8004328:	d107      	bne.n	800433a <_strtol_l.isra.0+0xda>
 800432a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432e:	b102      	cbz	r2, 8004332 <_strtol_l.isra.0+0xd2>
 8004330:	4240      	negs	r0, r0
 8004332:	f1ba 0f00 	cmp.w	sl, #0
 8004336:	d0f8      	beq.n	800432a <_strtol_l.isra.0+0xca>
 8004338:	b10f      	cbz	r7, 800433e <_strtol_l.isra.0+0xde>
 800433a:	f105 39ff 	add.w	r9, r5, #4294967295
 800433e:	f8ca 9000 	str.w	r9, [sl]
 8004342:	e7f2      	b.n	800432a <_strtol_l.isra.0+0xca>
 8004344:	2430      	movs	r4, #48	; 0x30
 8004346:	2e00      	cmp	r6, #0
 8004348:	d1af      	bne.n	80042aa <_strtol_l.isra.0+0x4a>
 800434a:	2608      	movs	r6, #8
 800434c:	e7ad      	b.n	80042aa <_strtol_l.isra.0+0x4a>
 800434e:	2c30      	cmp	r4, #48	; 0x30
 8004350:	d0a3      	beq.n	800429a <_strtol_l.isra.0+0x3a>
 8004352:	260a      	movs	r6, #10
 8004354:	e7a9      	b.n	80042aa <_strtol_l.isra.0+0x4a>
	...

08004358 <strtol>:
 8004358:	4b08      	ldr	r3, [pc, #32]	; (800437c <strtol+0x24>)
 800435a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800435c:	681c      	ldr	r4, [r3, #0]
 800435e:	4d08      	ldr	r5, [pc, #32]	; (8004380 <strtol+0x28>)
 8004360:	6a23      	ldr	r3, [r4, #32]
 8004362:	2b00      	cmp	r3, #0
 8004364:	bf08      	it	eq
 8004366:	462b      	moveq	r3, r5
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	4613      	mov	r3, r2
 800436c:	460a      	mov	r2, r1
 800436e:	4601      	mov	r1, r0
 8004370:	4620      	mov	r0, r4
 8004372:	f7ff ff75 	bl	8004260 <_strtol_l.isra.0>
 8004376:	b003      	add	sp, #12
 8004378:	bd30      	pop	{r4, r5, pc}
 800437a:	bf00      	nop
 800437c:	2000000c 	.word	0x2000000c
 8004380:	20000070 	.word	0x20000070

08004384 <__locale_ctype_ptr_l>:
 8004384:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004388:	4770      	bx	lr

0800438a <__ascii_mbtowc>:
 800438a:	b082      	sub	sp, #8
 800438c:	b901      	cbnz	r1, 8004390 <__ascii_mbtowc+0x6>
 800438e:	a901      	add	r1, sp, #4
 8004390:	b142      	cbz	r2, 80043a4 <__ascii_mbtowc+0x1a>
 8004392:	b14b      	cbz	r3, 80043a8 <__ascii_mbtowc+0x1e>
 8004394:	7813      	ldrb	r3, [r2, #0]
 8004396:	600b      	str	r3, [r1, #0]
 8004398:	7812      	ldrb	r2, [r2, #0]
 800439a:	1c10      	adds	r0, r2, #0
 800439c:	bf18      	it	ne
 800439e:	2001      	movne	r0, #1
 80043a0:	b002      	add	sp, #8
 80043a2:	4770      	bx	lr
 80043a4:	4610      	mov	r0, r2
 80043a6:	e7fb      	b.n	80043a0 <__ascii_mbtowc+0x16>
 80043a8:	f06f 0001 	mvn.w	r0, #1
 80043ac:	e7f8      	b.n	80043a0 <__ascii_mbtowc+0x16>

080043ae <__ssputs_r>:
 80043ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043b2:	688e      	ldr	r6, [r1, #8]
 80043b4:	429e      	cmp	r6, r3
 80043b6:	4682      	mov	sl, r0
 80043b8:	460c      	mov	r4, r1
 80043ba:	4690      	mov	r8, r2
 80043bc:	4699      	mov	r9, r3
 80043be:	d837      	bhi.n	8004430 <__ssputs_r+0x82>
 80043c0:	898a      	ldrh	r2, [r1, #12]
 80043c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80043c6:	d031      	beq.n	800442c <__ssputs_r+0x7e>
 80043c8:	6825      	ldr	r5, [r4, #0]
 80043ca:	6909      	ldr	r1, [r1, #16]
 80043cc:	1a6f      	subs	r7, r5, r1
 80043ce:	6965      	ldr	r5, [r4, #20]
 80043d0:	2302      	movs	r3, #2
 80043d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043d6:	fb95 f5f3 	sdiv	r5, r5, r3
 80043da:	f109 0301 	add.w	r3, r9, #1
 80043de:	443b      	add	r3, r7
 80043e0:	429d      	cmp	r5, r3
 80043e2:	bf38      	it	cc
 80043e4:	461d      	movcc	r5, r3
 80043e6:	0553      	lsls	r3, r2, #21
 80043e8:	d530      	bpl.n	800444c <__ssputs_r+0x9e>
 80043ea:	4629      	mov	r1, r5
 80043ec:	f000 fb3a 	bl	8004a64 <_malloc_r>
 80043f0:	4606      	mov	r6, r0
 80043f2:	b950      	cbnz	r0, 800440a <__ssputs_r+0x5c>
 80043f4:	230c      	movs	r3, #12
 80043f6:	f8ca 3000 	str.w	r3, [sl]
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004400:	81a3      	strh	r3, [r4, #12]
 8004402:	f04f 30ff 	mov.w	r0, #4294967295
 8004406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800440a:	463a      	mov	r2, r7
 800440c:	6921      	ldr	r1, [r4, #16]
 800440e:	f000 fab6 	bl	800497e <memcpy>
 8004412:	89a3      	ldrh	r3, [r4, #12]
 8004414:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800441c:	81a3      	strh	r3, [r4, #12]
 800441e:	6126      	str	r6, [r4, #16]
 8004420:	6165      	str	r5, [r4, #20]
 8004422:	443e      	add	r6, r7
 8004424:	1bed      	subs	r5, r5, r7
 8004426:	6026      	str	r6, [r4, #0]
 8004428:	60a5      	str	r5, [r4, #8]
 800442a:	464e      	mov	r6, r9
 800442c:	454e      	cmp	r6, r9
 800442e:	d900      	bls.n	8004432 <__ssputs_r+0x84>
 8004430:	464e      	mov	r6, r9
 8004432:	4632      	mov	r2, r6
 8004434:	4641      	mov	r1, r8
 8004436:	6820      	ldr	r0, [r4, #0]
 8004438:	f000 faac 	bl	8004994 <memmove>
 800443c:	68a3      	ldr	r3, [r4, #8]
 800443e:	1b9b      	subs	r3, r3, r6
 8004440:	60a3      	str	r3, [r4, #8]
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	441e      	add	r6, r3
 8004446:	6026      	str	r6, [r4, #0]
 8004448:	2000      	movs	r0, #0
 800444a:	e7dc      	b.n	8004406 <__ssputs_r+0x58>
 800444c:	462a      	mov	r2, r5
 800444e:	f000 fb63 	bl	8004b18 <_realloc_r>
 8004452:	4606      	mov	r6, r0
 8004454:	2800      	cmp	r0, #0
 8004456:	d1e2      	bne.n	800441e <__ssputs_r+0x70>
 8004458:	6921      	ldr	r1, [r4, #16]
 800445a:	4650      	mov	r0, sl
 800445c:	f000 fab4 	bl	80049c8 <_free_r>
 8004460:	e7c8      	b.n	80043f4 <__ssputs_r+0x46>
	...

08004464 <_svfiprintf_r>:
 8004464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004468:	461d      	mov	r5, r3
 800446a:	898b      	ldrh	r3, [r1, #12]
 800446c:	061f      	lsls	r7, r3, #24
 800446e:	b09d      	sub	sp, #116	; 0x74
 8004470:	4680      	mov	r8, r0
 8004472:	460c      	mov	r4, r1
 8004474:	4616      	mov	r6, r2
 8004476:	d50f      	bpl.n	8004498 <_svfiprintf_r+0x34>
 8004478:	690b      	ldr	r3, [r1, #16]
 800447a:	b96b      	cbnz	r3, 8004498 <_svfiprintf_r+0x34>
 800447c:	2140      	movs	r1, #64	; 0x40
 800447e:	f000 faf1 	bl	8004a64 <_malloc_r>
 8004482:	6020      	str	r0, [r4, #0]
 8004484:	6120      	str	r0, [r4, #16]
 8004486:	b928      	cbnz	r0, 8004494 <_svfiprintf_r+0x30>
 8004488:	230c      	movs	r3, #12
 800448a:	f8c8 3000 	str.w	r3, [r8]
 800448e:	f04f 30ff 	mov.w	r0, #4294967295
 8004492:	e0c8      	b.n	8004626 <_svfiprintf_r+0x1c2>
 8004494:	2340      	movs	r3, #64	; 0x40
 8004496:	6163      	str	r3, [r4, #20]
 8004498:	2300      	movs	r3, #0
 800449a:	9309      	str	r3, [sp, #36]	; 0x24
 800449c:	2320      	movs	r3, #32
 800449e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044a2:	2330      	movs	r3, #48	; 0x30
 80044a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044a8:	9503      	str	r5, [sp, #12]
 80044aa:	f04f 0b01 	mov.w	fp, #1
 80044ae:	4637      	mov	r7, r6
 80044b0:	463d      	mov	r5, r7
 80044b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80044b6:	b10b      	cbz	r3, 80044bc <_svfiprintf_r+0x58>
 80044b8:	2b25      	cmp	r3, #37	; 0x25
 80044ba:	d13e      	bne.n	800453a <_svfiprintf_r+0xd6>
 80044bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80044c0:	d00b      	beq.n	80044da <_svfiprintf_r+0x76>
 80044c2:	4653      	mov	r3, sl
 80044c4:	4632      	mov	r2, r6
 80044c6:	4621      	mov	r1, r4
 80044c8:	4640      	mov	r0, r8
 80044ca:	f7ff ff70 	bl	80043ae <__ssputs_r>
 80044ce:	3001      	adds	r0, #1
 80044d0:	f000 80a4 	beq.w	800461c <_svfiprintf_r+0x1b8>
 80044d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044d6:	4453      	add	r3, sl
 80044d8:	9309      	str	r3, [sp, #36]	; 0x24
 80044da:	783b      	ldrb	r3, [r7, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 809d 	beq.w	800461c <_svfiprintf_r+0x1b8>
 80044e2:	2300      	movs	r3, #0
 80044e4:	f04f 32ff 	mov.w	r2, #4294967295
 80044e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044ec:	9304      	str	r3, [sp, #16]
 80044ee:	9307      	str	r3, [sp, #28]
 80044f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044f4:	931a      	str	r3, [sp, #104]	; 0x68
 80044f6:	462f      	mov	r7, r5
 80044f8:	2205      	movs	r2, #5
 80044fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80044fe:	4850      	ldr	r0, [pc, #320]	; (8004640 <_svfiprintf_r+0x1dc>)
 8004500:	f7fb fe6e 	bl	80001e0 <memchr>
 8004504:	9b04      	ldr	r3, [sp, #16]
 8004506:	b9d0      	cbnz	r0, 800453e <_svfiprintf_r+0xda>
 8004508:	06d9      	lsls	r1, r3, #27
 800450a:	bf44      	itt	mi
 800450c:	2220      	movmi	r2, #32
 800450e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004512:	071a      	lsls	r2, r3, #28
 8004514:	bf44      	itt	mi
 8004516:	222b      	movmi	r2, #43	; 0x2b
 8004518:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800451c:	782a      	ldrb	r2, [r5, #0]
 800451e:	2a2a      	cmp	r2, #42	; 0x2a
 8004520:	d015      	beq.n	800454e <_svfiprintf_r+0xea>
 8004522:	9a07      	ldr	r2, [sp, #28]
 8004524:	462f      	mov	r7, r5
 8004526:	2000      	movs	r0, #0
 8004528:	250a      	movs	r5, #10
 800452a:	4639      	mov	r1, r7
 800452c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004530:	3b30      	subs	r3, #48	; 0x30
 8004532:	2b09      	cmp	r3, #9
 8004534:	d94d      	bls.n	80045d2 <_svfiprintf_r+0x16e>
 8004536:	b1b8      	cbz	r0, 8004568 <_svfiprintf_r+0x104>
 8004538:	e00f      	b.n	800455a <_svfiprintf_r+0xf6>
 800453a:	462f      	mov	r7, r5
 800453c:	e7b8      	b.n	80044b0 <_svfiprintf_r+0x4c>
 800453e:	4a40      	ldr	r2, [pc, #256]	; (8004640 <_svfiprintf_r+0x1dc>)
 8004540:	1a80      	subs	r0, r0, r2
 8004542:	fa0b f000 	lsl.w	r0, fp, r0
 8004546:	4318      	orrs	r0, r3
 8004548:	9004      	str	r0, [sp, #16]
 800454a:	463d      	mov	r5, r7
 800454c:	e7d3      	b.n	80044f6 <_svfiprintf_r+0x92>
 800454e:	9a03      	ldr	r2, [sp, #12]
 8004550:	1d11      	adds	r1, r2, #4
 8004552:	6812      	ldr	r2, [r2, #0]
 8004554:	9103      	str	r1, [sp, #12]
 8004556:	2a00      	cmp	r2, #0
 8004558:	db01      	blt.n	800455e <_svfiprintf_r+0xfa>
 800455a:	9207      	str	r2, [sp, #28]
 800455c:	e004      	b.n	8004568 <_svfiprintf_r+0x104>
 800455e:	4252      	negs	r2, r2
 8004560:	f043 0302 	orr.w	r3, r3, #2
 8004564:	9207      	str	r2, [sp, #28]
 8004566:	9304      	str	r3, [sp, #16]
 8004568:	783b      	ldrb	r3, [r7, #0]
 800456a:	2b2e      	cmp	r3, #46	; 0x2e
 800456c:	d10c      	bne.n	8004588 <_svfiprintf_r+0x124>
 800456e:	787b      	ldrb	r3, [r7, #1]
 8004570:	2b2a      	cmp	r3, #42	; 0x2a
 8004572:	d133      	bne.n	80045dc <_svfiprintf_r+0x178>
 8004574:	9b03      	ldr	r3, [sp, #12]
 8004576:	1d1a      	adds	r2, r3, #4
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	9203      	str	r2, [sp, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	bfb8      	it	lt
 8004580:	f04f 33ff 	movlt.w	r3, #4294967295
 8004584:	3702      	adds	r7, #2
 8004586:	9305      	str	r3, [sp, #20]
 8004588:	4d2e      	ldr	r5, [pc, #184]	; (8004644 <_svfiprintf_r+0x1e0>)
 800458a:	7839      	ldrb	r1, [r7, #0]
 800458c:	2203      	movs	r2, #3
 800458e:	4628      	mov	r0, r5
 8004590:	f7fb fe26 	bl	80001e0 <memchr>
 8004594:	b138      	cbz	r0, 80045a6 <_svfiprintf_r+0x142>
 8004596:	2340      	movs	r3, #64	; 0x40
 8004598:	1b40      	subs	r0, r0, r5
 800459a:	fa03 f000 	lsl.w	r0, r3, r0
 800459e:	9b04      	ldr	r3, [sp, #16]
 80045a0:	4303      	orrs	r3, r0
 80045a2:	3701      	adds	r7, #1
 80045a4:	9304      	str	r3, [sp, #16]
 80045a6:	7839      	ldrb	r1, [r7, #0]
 80045a8:	4827      	ldr	r0, [pc, #156]	; (8004648 <_svfiprintf_r+0x1e4>)
 80045aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045ae:	2206      	movs	r2, #6
 80045b0:	1c7e      	adds	r6, r7, #1
 80045b2:	f7fb fe15 	bl	80001e0 <memchr>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d038      	beq.n	800462c <_svfiprintf_r+0x1c8>
 80045ba:	4b24      	ldr	r3, [pc, #144]	; (800464c <_svfiprintf_r+0x1e8>)
 80045bc:	bb13      	cbnz	r3, 8004604 <_svfiprintf_r+0x1a0>
 80045be:	9b03      	ldr	r3, [sp, #12]
 80045c0:	3307      	adds	r3, #7
 80045c2:	f023 0307 	bic.w	r3, r3, #7
 80045c6:	3308      	adds	r3, #8
 80045c8:	9303      	str	r3, [sp, #12]
 80045ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045cc:	444b      	add	r3, r9
 80045ce:	9309      	str	r3, [sp, #36]	; 0x24
 80045d0:	e76d      	b.n	80044ae <_svfiprintf_r+0x4a>
 80045d2:	fb05 3202 	mla	r2, r5, r2, r3
 80045d6:	2001      	movs	r0, #1
 80045d8:	460f      	mov	r7, r1
 80045da:	e7a6      	b.n	800452a <_svfiprintf_r+0xc6>
 80045dc:	2300      	movs	r3, #0
 80045de:	3701      	adds	r7, #1
 80045e0:	9305      	str	r3, [sp, #20]
 80045e2:	4619      	mov	r1, r3
 80045e4:	250a      	movs	r5, #10
 80045e6:	4638      	mov	r0, r7
 80045e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045ec:	3a30      	subs	r2, #48	; 0x30
 80045ee:	2a09      	cmp	r2, #9
 80045f0:	d903      	bls.n	80045fa <_svfiprintf_r+0x196>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0c8      	beq.n	8004588 <_svfiprintf_r+0x124>
 80045f6:	9105      	str	r1, [sp, #20]
 80045f8:	e7c6      	b.n	8004588 <_svfiprintf_r+0x124>
 80045fa:	fb05 2101 	mla	r1, r5, r1, r2
 80045fe:	2301      	movs	r3, #1
 8004600:	4607      	mov	r7, r0
 8004602:	e7f0      	b.n	80045e6 <_svfiprintf_r+0x182>
 8004604:	ab03      	add	r3, sp, #12
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	4622      	mov	r2, r4
 800460a:	4b11      	ldr	r3, [pc, #68]	; (8004650 <_svfiprintf_r+0x1ec>)
 800460c:	a904      	add	r1, sp, #16
 800460e:	4640      	mov	r0, r8
 8004610:	f3af 8000 	nop.w
 8004614:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004618:	4681      	mov	r9, r0
 800461a:	d1d6      	bne.n	80045ca <_svfiprintf_r+0x166>
 800461c:	89a3      	ldrh	r3, [r4, #12]
 800461e:	065b      	lsls	r3, r3, #25
 8004620:	f53f af35 	bmi.w	800448e <_svfiprintf_r+0x2a>
 8004624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004626:	b01d      	add	sp, #116	; 0x74
 8004628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800462c:	ab03      	add	r3, sp, #12
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	4622      	mov	r2, r4
 8004632:	4b07      	ldr	r3, [pc, #28]	; (8004650 <_svfiprintf_r+0x1ec>)
 8004634:	a904      	add	r1, sp, #16
 8004636:	4640      	mov	r0, r8
 8004638:	f000 f882 	bl	8004740 <_printf_i>
 800463c:	e7ea      	b.n	8004614 <_svfiprintf_r+0x1b0>
 800463e:	bf00      	nop
 8004640:	08004cc6 	.word	0x08004cc6
 8004644:	08004ccc 	.word	0x08004ccc
 8004648:	08004cd0 	.word	0x08004cd0
 800464c:	00000000 	.word	0x00000000
 8004650:	080043af 	.word	0x080043af

08004654 <_printf_common>:
 8004654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004658:	4691      	mov	r9, r2
 800465a:	461f      	mov	r7, r3
 800465c:	688a      	ldr	r2, [r1, #8]
 800465e:	690b      	ldr	r3, [r1, #16]
 8004660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004664:	4293      	cmp	r3, r2
 8004666:	bfb8      	it	lt
 8004668:	4613      	movlt	r3, r2
 800466a:	f8c9 3000 	str.w	r3, [r9]
 800466e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004672:	4606      	mov	r6, r0
 8004674:	460c      	mov	r4, r1
 8004676:	b112      	cbz	r2, 800467e <_printf_common+0x2a>
 8004678:	3301      	adds	r3, #1
 800467a:	f8c9 3000 	str.w	r3, [r9]
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	0699      	lsls	r1, r3, #26
 8004682:	bf42      	ittt	mi
 8004684:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004688:	3302      	addmi	r3, #2
 800468a:	f8c9 3000 	strmi.w	r3, [r9]
 800468e:	6825      	ldr	r5, [r4, #0]
 8004690:	f015 0506 	ands.w	r5, r5, #6
 8004694:	d107      	bne.n	80046a6 <_printf_common+0x52>
 8004696:	f104 0a19 	add.w	sl, r4, #25
 800469a:	68e3      	ldr	r3, [r4, #12]
 800469c:	f8d9 2000 	ldr.w	r2, [r9]
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	42ab      	cmp	r3, r5
 80046a4:	dc28      	bgt.n	80046f8 <_printf_common+0xa4>
 80046a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80046aa:	6822      	ldr	r2, [r4, #0]
 80046ac:	3300      	adds	r3, #0
 80046ae:	bf18      	it	ne
 80046b0:	2301      	movne	r3, #1
 80046b2:	0692      	lsls	r2, r2, #26
 80046b4:	d42d      	bmi.n	8004712 <_printf_common+0xbe>
 80046b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046ba:	4639      	mov	r1, r7
 80046bc:	4630      	mov	r0, r6
 80046be:	47c0      	blx	r8
 80046c0:	3001      	adds	r0, #1
 80046c2:	d020      	beq.n	8004706 <_printf_common+0xb2>
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	68e5      	ldr	r5, [r4, #12]
 80046c8:	f8d9 2000 	ldr.w	r2, [r9]
 80046cc:	f003 0306 	and.w	r3, r3, #6
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	bf08      	it	eq
 80046d4:	1aad      	subeq	r5, r5, r2
 80046d6:	68a3      	ldr	r3, [r4, #8]
 80046d8:	6922      	ldr	r2, [r4, #16]
 80046da:	bf0c      	ite	eq
 80046dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046e0:	2500      	movne	r5, #0
 80046e2:	4293      	cmp	r3, r2
 80046e4:	bfc4      	itt	gt
 80046e6:	1a9b      	subgt	r3, r3, r2
 80046e8:	18ed      	addgt	r5, r5, r3
 80046ea:	f04f 0900 	mov.w	r9, #0
 80046ee:	341a      	adds	r4, #26
 80046f0:	454d      	cmp	r5, r9
 80046f2:	d11a      	bne.n	800472a <_printf_common+0xd6>
 80046f4:	2000      	movs	r0, #0
 80046f6:	e008      	b.n	800470a <_printf_common+0xb6>
 80046f8:	2301      	movs	r3, #1
 80046fa:	4652      	mov	r2, sl
 80046fc:	4639      	mov	r1, r7
 80046fe:	4630      	mov	r0, r6
 8004700:	47c0      	blx	r8
 8004702:	3001      	adds	r0, #1
 8004704:	d103      	bne.n	800470e <_printf_common+0xba>
 8004706:	f04f 30ff 	mov.w	r0, #4294967295
 800470a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800470e:	3501      	adds	r5, #1
 8004710:	e7c3      	b.n	800469a <_printf_common+0x46>
 8004712:	18e1      	adds	r1, r4, r3
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	2030      	movs	r0, #48	; 0x30
 8004718:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800471c:	4422      	add	r2, r4
 800471e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004722:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004726:	3302      	adds	r3, #2
 8004728:	e7c5      	b.n	80046b6 <_printf_common+0x62>
 800472a:	2301      	movs	r3, #1
 800472c:	4622      	mov	r2, r4
 800472e:	4639      	mov	r1, r7
 8004730:	4630      	mov	r0, r6
 8004732:	47c0      	blx	r8
 8004734:	3001      	adds	r0, #1
 8004736:	d0e6      	beq.n	8004706 <_printf_common+0xb2>
 8004738:	f109 0901 	add.w	r9, r9, #1
 800473c:	e7d8      	b.n	80046f0 <_printf_common+0x9c>
	...

08004740 <_printf_i>:
 8004740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004744:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004748:	460c      	mov	r4, r1
 800474a:	7e09      	ldrb	r1, [r1, #24]
 800474c:	b085      	sub	sp, #20
 800474e:	296e      	cmp	r1, #110	; 0x6e
 8004750:	4617      	mov	r7, r2
 8004752:	4606      	mov	r6, r0
 8004754:	4698      	mov	r8, r3
 8004756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004758:	f000 80b3 	beq.w	80048c2 <_printf_i+0x182>
 800475c:	d822      	bhi.n	80047a4 <_printf_i+0x64>
 800475e:	2963      	cmp	r1, #99	; 0x63
 8004760:	d036      	beq.n	80047d0 <_printf_i+0x90>
 8004762:	d80a      	bhi.n	800477a <_printf_i+0x3a>
 8004764:	2900      	cmp	r1, #0
 8004766:	f000 80b9 	beq.w	80048dc <_printf_i+0x19c>
 800476a:	2958      	cmp	r1, #88	; 0x58
 800476c:	f000 8083 	beq.w	8004876 <_printf_i+0x136>
 8004770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004774:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004778:	e032      	b.n	80047e0 <_printf_i+0xa0>
 800477a:	2964      	cmp	r1, #100	; 0x64
 800477c:	d001      	beq.n	8004782 <_printf_i+0x42>
 800477e:	2969      	cmp	r1, #105	; 0x69
 8004780:	d1f6      	bne.n	8004770 <_printf_i+0x30>
 8004782:	6820      	ldr	r0, [r4, #0]
 8004784:	6813      	ldr	r3, [r2, #0]
 8004786:	0605      	lsls	r5, r0, #24
 8004788:	f103 0104 	add.w	r1, r3, #4
 800478c:	d52a      	bpl.n	80047e4 <_printf_i+0xa4>
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6011      	str	r1, [r2, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	da03      	bge.n	800479e <_printf_i+0x5e>
 8004796:	222d      	movs	r2, #45	; 0x2d
 8004798:	425b      	negs	r3, r3
 800479a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800479e:	486f      	ldr	r0, [pc, #444]	; (800495c <_printf_i+0x21c>)
 80047a0:	220a      	movs	r2, #10
 80047a2:	e039      	b.n	8004818 <_printf_i+0xd8>
 80047a4:	2973      	cmp	r1, #115	; 0x73
 80047a6:	f000 809d 	beq.w	80048e4 <_printf_i+0x1a4>
 80047aa:	d808      	bhi.n	80047be <_printf_i+0x7e>
 80047ac:	296f      	cmp	r1, #111	; 0x6f
 80047ae:	d020      	beq.n	80047f2 <_printf_i+0xb2>
 80047b0:	2970      	cmp	r1, #112	; 0x70
 80047b2:	d1dd      	bne.n	8004770 <_printf_i+0x30>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	f043 0320 	orr.w	r3, r3, #32
 80047ba:	6023      	str	r3, [r4, #0]
 80047bc:	e003      	b.n	80047c6 <_printf_i+0x86>
 80047be:	2975      	cmp	r1, #117	; 0x75
 80047c0:	d017      	beq.n	80047f2 <_printf_i+0xb2>
 80047c2:	2978      	cmp	r1, #120	; 0x78
 80047c4:	d1d4      	bne.n	8004770 <_printf_i+0x30>
 80047c6:	2378      	movs	r3, #120	; 0x78
 80047c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047cc:	4864      	ldr	r0, [pc, #400]	; (8004960 <_printf_i+0x220>)
 80047ce:	e055      	b.n	800487c <_printf_i+0x13c>
 80047d0:	6813      	ldr	r3, [r2, #0]
 80047d2:	1d19      	adds	r1, r3, #4
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6011      	str	r1, [r2, #0]
 80047d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047e0:	2301      	movs	r3, #1
 80047e2:	e08c      	b.n	80048fe <_printf_i+0x1be>
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6011      	str	r1, [r2, #0]
 80047e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047ec:	bf18      	it	ne
 80047ee:	b21b      	sxthne	r3, r3
 80047f0:	e7cf      	b.n	8004792 <_printf_i+0x52>
 80047f2:	6813      	ldr	r3, [r2, #0]
 80047f4:	6825      	ldr	r5, [r4, #0]
 80047f6:	1d18      	adds	r0, r3, #4
 80047f8:	6010      	str	r0, [r2, #0]
 80047fa:	0628      	lsls	r0, r5, #24
 80047fc:	d501      	bpl.n	8004802 <_printf_i+0xc2>
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	e002      	b.n	8004808 <_printf_i+0xc8>
 8004802:	0668      	lsls	r0, r5, #25
 8004804:	d5fb      	bpl.n	80047fe <_printf_i+0xbe>
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	4854      	ldr	r0, [pc, #336]	; (800495c <_printf_i+0x21c>)
 800480a:	296f      	cmp	r1, #111	; 0x6f
 800480c:	bf14      	ite	ne
 800480e:	220a      	movne	r2, #10
 8004810:	2208      	moveq	r2, #8
 8004812:	2100      	movs	r1, #0
 8004814:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004818:	6865      	ldr	r5, [r4, #4]
 800481a:	60a5      	str	r5, [r4, #8]
 800481c:	2d00      	cmp	r5, #0
 800481e:	f2c0 8095 	blt.w	800494c <_printf_i+0x20c>
 8004822:	6821      	ldr	r1, [r4, #0]
 8004824:	f021 0104 	bic.w	r1, r1, #4
 8004828:	6021      	str	r1, [r4, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d13d      	bne.n	80048aa <_printf_i+0x16a>
 800482e:	2d00      	cmp	r5, #0
 8004830:	f040 808e 	bne.w	8004950 <_printf_i+0x210>
 8004834:	4665      	mov	r5, ip
 8004836:	2a08      	cmp	r2, #8
 8004838:	d10b      	bne.n	8004852 <_printf_i+0x112>
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	07db      	lsls	r3, r3, #31
 800483e:	d508      	bpl.n	8004852 <_printf_i+0x112>
 8004840:	6923      	ldr	r3, [r4, #16]
 8004842:	6862      	ldr	r2, [r4, #4]
 8004844:	429a      	cmp	r2, r3
 8004846:	bfde      	ittt	le
 8004848:	2330      	movle	r3, #48	; 0x30
 800484a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800484e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004852:	ebac 0305 	sub.w	r3, ip, r5
 8004856:	6123      	str	r3, [r4, #16]
 8004858:	f8cd 8000 	str.w	r8, [sp]
 800485c:	463b      	mov	r3, r7
 800485e:	aa03      	add	r2, sp, #12
 8004860:	4621      	mov	r1, r4
 8004862:	4630      	mov	r0, r6
 8004864:	f7ff fef6 	bl	8004654 <_printf_common>
 8004868:	3001      	adds	r0, #1
 800486a:	d14d      	bne.n	8004908 <_printf_i+0x1c8>
 800486c:	f04f 30ff 	mov.w	r0, #4294967295
 8004870:	b005      	add	sp, #20
 8004872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004876:	4839      	ldr	r0, [pc, #228]	; (800495c <_printf_i+0x21c>)
 8004878:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800487c:	6813      	ldr	r3, [r2, #0]
 800487e:	6821      	ldr	r1, [r4, #0]
 8004880:	1d1d      	adds	r5, r3, #4
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6015      	str	r5, [r2, #0]
 8004886:	060a      	lsls	r2, r1, #24
 8004888:	d50b      	bpl.n	80048a2 <_printf_i+0x162>
 800488a:	07ca      	lsls	r2, r1, #31
 800488c:	bf44      	itt	mi
 800488e:	f041 0120 	orrmi.w	r1, r1, #32
 8004892:	6021      	strmi	r1, [r4, #0]
 8004894:	b91b      	cbnz	r3, 800489e <_printf_i+0x15e>
 8004896:	6822      	ldr	r2, [r4, #0]
 8004898:	f022 0220 	bic.w	r2, r2, #32
 800489c:	6022      	str	r2, [r4, #0]
 800489e:	2210      	movs	r2, #16
 80048a0:	e7b7      	b.n	8004812 <_printf_i+0xd2>
 80048a2:	064d      	lsls	r5, r1, #25
 80048a4:	bf48      	it	mi
 80048a6:	b29b      	uxthmi	r3, r3
 80048a8:	e7ef      	b.n	800488a <_printf_i+0x14a>
 80048aa:	4665      	mov	r5, ip
 80048ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80048b0:	fb02 3311 	mls	r3, r2, r1, r3
 80048b4:	5cc3      	ldrb	r3, [r0, r3]
 80048b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80048ba:	460b      	mov	r3, r1
 80048bc:	2900      	cmp	r1, #0
 80048be:	d1f5      	bne.n	80048ac <_printf_i+0x16c>
 80048c0:	e7b9      	b.n	8004836 <_printf_i+0xf6>
 80048c2:	6813      	ldr	r3, [r2, #0]
 80048c4:	6825      	ldr	r5, [r4, #0]
 80048c6:	6961      	ldr	r1, [r4, #20]
 80048c8:	1d18      	adds	r0, r3, #4
 80048ca:	6010      	str	r0, [r2, #0]
 80048cc:	0628      	lsls	r0, r5, #24
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	d501      	bpl.n	80048d6 <_printf_i+0x196>
 80048d2:	6019      	str	r1, [r3, #0]
 80048d4:	e002      	b.n	80048dc <_printf_i+0x19c>
 80048d6:	066a      	lsls	r2, r5, #25
 80048d8:	d5fb      	bpl.n	80048d2 <_printf_i+0x192>
 80048da:	8019      	strh	r1, [r3, #0]
 80048dc:	2300      	movs	r3, #0
 80048de:	6123      	str	r3, [r4, #16]
 80048e0:	4665      	mov	r5, ip
 80048e2:	e7b9      	b.n	8004858 <_printf_i+0x118>
 80048e4:	6813      	ldr	r3, [r2, #0]
 80048e6:	1d19      	adds	r1, r3, #4
 80048e8:	6011      	str	r1, [r2, #0]
 80048ea:	681d      	ldr	r5, [r3, #0]
 80048ec:	6862      	ldr	r2, [r4, #4]
 80048ee:	2100      	movs	r1, #0
 80048f0:	4628      	mov	r0, r5
 80048f2:	f7fb fc75 	bl	80001e0 <memchr>
 80048f6:	b108      	cbz	r0, 80048fc <_printf_i+0x1bc>
 80048f8:	1b40      	subs	r0, r0, r5
 80048fa:	6060      	str	r0, [r4, #4]
 80048fc:	6863      	ldr	r3, [r4, #4]
 80048fe:	6123      	str	r3, [r4, #16]
 8004900:	2300      	movs	r3, #0
 8004902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004906:	e7a7      	b.n	8004858 <_printf_i+0x118>
 8004908:	6923      	ldr	r3, [r4, #16]
 800490a:	462a      	mov	r2, r5
 800490c:	4639      	mov	r1, r7
 800490e:	4630      	mov	r0, r6
 8004910:	47c0      	blx	r8
 8004912:	3001      	adds	r0, #1
 8004914:	d0aa      	beq.n	800486c <_printf_i+0x12c>
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	079b      	lsls	r3, r3, #30
 800491a:	d413      	bmi.n	8004944 <_printf_i+0x204>
 800491c:	68e0      	ldr	r0, [r4, #12]
 800491e:	9b03      	ldr	r3, [sp, #12]
 8004920:	4298      	cmp	r0, r3
 8004922:	bfb8      	it	lt
 8004924:	4618      	movlt	r0, r3
 8004926:	e7a3      	b.n	8004870 <_printf_i+0x130>
 8004928:	2301      	movs	r3, #1
 800492a:	464a      	mov	r2, r9
 800492c:	4639      	mov	r1, r7
 800492e:	4630      	mov	r0, r6
 8004930:	47c0      	blx	r8
 8004932:	3001      	adds	r0, #1
 8004934:	d09a      	beq.n	800486c <_printf_i+0x12c>
 8004936:	3501      	adds	r5, #1
 8004938:	68e3      	ldr	r3, [r4, #12]
 800493a:	9a03      	ldr	r2, [sp, #12]
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	42ab      	cmp	r3, r5
 8004940:	dcf2      	bgt.n	8004928 <_printf_i+0x1e8>
 8004942:	e7eb      	b.n	800491c <_printf_i+0x1dc>
 8004944:	2500      	movs	r5, #0
 8004946:	f104 0919 	add.w	r9, r4, #25
 800494a:	e7f5      	b.n	8004938 <_printf_i+0x1f8>
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1ac      	bne.n	80048aa <_printf_i+0x16a>
 8004950:	7803      	ldrb	r3, [r0, #0]
 8004952:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004956:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800495a:	e76c      	b.n	8004836 <_printf_i+0xf6>
 800495c:	08004cd7 	.word	0x08004cd7
 8004960:	08004ce8 	.word	0x08004ce8

08004964 <__ascii_wctomb>:
 8004964:	b149      	cbz	r1, 800497a <__ascii_wctomb+0x16>
 8004966:	2aff      	cmp	r2, #255	; 0xff
 8004968:	bf85      	ittet	hi
 800496a:	238a      	movhi	r3, #138	; 0x8a
 800496c:	6003      	strhi	r3, [r0, #0]
 800496e:	700a      	strbls	r2, [r1, #0]
 8004970:	f04f 30ff 	movhi.w	r0, #4294967295
 8004974:	bf98      	it	ls
 8004976:	2001      	movls	r0, #1
 8004978:	4770      	bx	lr
 800497a:	4608      	mov	r0, r1
 800497c:	4770      	bx	lr

0800497e <memcpy>:
 800497e:	b510      	push	{r4, lr}
 8004980:	1e43      	subs	r3, r0, #1
 8004982:	440a      	add	r2, r1
 8004984:	4291      	cmp	r1, r2
 8004986:	d100      	bne.n	800498a <memcpy+0xc>
 8004988:	bd10      	pop	{r4, pc}
 800498a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800498e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004992:	e7f7      	b.n	8004984 <memcpy+0x6>

08004994 <memmove>:
 8004994:	4288      	cmp	r0, r1
 8004996:	b510      	push	{r4, lr}
 8004998:	eb01 0302 	add.w	r3, r1, r2
 800499c:	d807      	bhi.n	80049ae <memmove+0x1a>
 800499e:	1e42      	subs	r2, r0, #1
 80049a0:	4299      	cmp	r1, r3
 80049a2:	d00a      	beq.n	80049ba <memmove+0x26>
 80049a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80049ac:	e7f8      	b.n	80049a0 <memmove+0xc>
 80049ae:	4283      	cmp	r3, r0
 80049b0:	d9f5      	bls.n	800499e <memmove+0xa>
 80049b2:	1881      	adds	r1, r0, r2
 80049b4:	1ad2      	subs	r2, r2, r3
 80049b6:	42d3      	cmn	r3, r2
 80049b8:	d100      	bne.n	80049bc <memmove+0x28>
 80049ba:	bd10      	pop	{r4, pc}
 80049bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80049c4:	e7f7      	b.n	80049b6 <memmove+0x22>
	...

080049c8 <_free_r>:
 80049c8:	b538      	push	{r3, r4, r5, lr}
 80049ca:	4605      	mov	r5, r0
 80049cc:	2900      	cmp	r1, #0
 80049ce:	d045      	beq.n	8004a5c <_free_r+0x94>
 80049d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049d4:	1f0c      	subs	r4, r1, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bfb8      	it	lt
 80049da:	18e4      	addlt	r4, r4, r3
 80049dc:	f000 f8d2 	bl	8004b84 <__malloc_lock>
 80049e0:	4a1f      	ldr	r2, [pc, #124]	; (8004a60 <_free_r+0x98>)
 80049e2:	6813      	ldr	r3, [r2, #0]
 80049e4:	4610      	mov	r0, r2
 80049e6:	b933      	cbnz	r3, 80049f6 <_free_r+0x2e>
 80049e8:	6063      	str	r3, [r4, #4]
 80049ea:	6014      	str	r4, [r2, #0]
 80049ec:	4628      	mov	r0, r5
 80049ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049f2:	f000 b8c8 	b.w	8004b86 <__malloc_unlock>
 80049f6:	42a3      	cmp	r3, r4
 80049f8:	d90c      	bls.n	8004a14 <_free_r+0x4c>
 80049fa:	6821      	ldr	r1, [r4, #0]
 80049fc:	1862      	adds	r2, r4, r1
 80049fe:	4293      	cmp	r3, r2
 8004a00:	bf04      	itt	eq
 8004a02:	681a      	ldreq	r2, [r3, #0]
 8004a04:	685b      	ldreq	r3, [r3, #4]
 8004a06:	6063      	str	r3, [r4, #4]
 8004a08:	bf04      	itt	eq
 8004a0a:	1852      	addeq	r2, r2, r1
 8004a0c:	6022      	streq	r2, [r4, #0]
 8004a0e:	6004      	str	r4, [r0, #0]
 8004a10:	e7ec      	b.n	80049ec <_free_r+0x24>
 8004a12:	4613      	mov	r3, r2
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	b10a      	cbz	r2, 8004a1c <_free_r+0x54>
 8004a18:	42a2      	cmp	r2, r4
 8004a1a:	d9fa      	bls.n	8004a12 <_free_r+0x4a>
 8004a1c:	6819      	ldr	r1, [r3, #0]
 8004a1e:	1858      	adds	r0, r3, r1
 8004a20:	42a0      	cmp	r0, r4
 8004a22:	d10b      	bne.n	8004a3c <_free_r+0x74>
 8004a24:	6820      	ldr	r0, [r4, #0]
 8004a26:	4401      	add	r1, r0
 8004a28:	1858      	adds	r0, r3, r1
 8004a2a:	4282      	cmp	r2, r0
 8004a2c:	6019      	str	r1, [r3, #0]
 8004a2e:	d1dd      	bne.n	80049ec <_free_r+0x24>
 8004a30:	6810      	ldr	r0, [r2, #0]
 8004a32:	6852      	ldr	r2, [r2, #4]
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	4401      	add	r1, r0
 8004a38:	6019      	str	r1, [r3, #0]
 8004a3a:	e7d7      	b.n	80049ec <_free_r+0x24>
 8004a3c:	d902      	bls.n	8004a44 <_free_r+0x7c>
 8004a3e:	230c      	movs	r3, #12
 8004a40:	602b      	str	r3, [r5, #0]
 8004a42:	e7d3      	b.n	80049ec <_free_r+0x24>
 8004a44:	6820      	ldr	r0, [r4, #0]
 8004a46:	1821      	adds	r1, r4, r0
 8004a48:	428a      	cmp	r2, r1
 8004a4a:	bf04      	itt	eq
 8004a4c:	6811      	ldreq	r1, [r2, #0]
 8004a4e:	6852      	ldreq	r2, [r2, #4]
 8004a50:	6062      	str	r2, [r4, #4]
 8004a52:	bf04      	itt	eq
 8004a54:	1809      	addeq	r1, r1, r0
 8004a56:	6021      	streq	r1, [r4, #0]
 8004a58:	605c      	str	r4, [r3, #4]
 8004a5a:	e7c7      	b.n	80049ec <_free_r+0x24>
 8004a5c:	bd38      	pop	{r3, r4, r5, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000228 	.word	0x20000228

08004a64 <_malloc_r>:
 8004a64:	b570      	push	{r4, r5, r6, lr}
 8004a66:	1ccd      	adds	r5, r1, #3
 8004a68:	f025 0503 	bic.w	r5, r5, #3
 8004a6c:	3508      	adds	r5, #8
 8004a6e:	2d0c      	cmp	r5, #12
 8004a70:	bf38      	it	cc
 8004a72:	250c      	movcc	r5, #12
 8004a74:	2d00      	cmp	r5, #0
 8004a76:	4606      	mov	r6, r0
 8004a78:	db01      	blt.n	8004a7e <_malloc_r+0x1a>
 8004a7a:	42a9      	cmp	r1, r5
 8004a7c:	d903      	bls.n	8004a86 <_malloc_r+0x22>
 8004a7e:	230c      	movs	r3, #12
 8004a80:	6033      	str	r3, [r6, #0]
 8004a82:	2000      	movs	r0, #0
 8004a84:	bd70      	pop	{r4, r5, r6, pc}
 8004a86:	f000 f87d 	bl	8004b84 <__malloc_lock>
 8004a8a:	4a21      	ldr	r2, [pc, #132]	; (8004b10 <_malloc_r+0xac>)
 8004a8c:	6814      	ldr	r4, [r2, #0]
 8004a8e:	4621      	mov	r1, r4
 8004a90:	b991      	cbnz	r1, 8004ab8 <_malloc_r+0x54>
 8004a92:	4c20      	ldr	r4, [pc, #128]	; (8004b14 <_malloc_r+0xb0>)
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	b91b      	cbnz	r3, 8004aa0 <_malloc_r+0x3c>
 8004a98:	4630      	mov	r0, r6
 8004a9a:	f000 f863 	bl	8004b64 <_sbrk_r>
 8004a9e:	6020      	str	r0, [r4, #0]
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	f000 f85e 	bl	8004b64 <_sbrk_r>
 8004aa8:	1c43      	adds	r3, r0, #1
 8004aaa:	d124      	bne.n	8004af6 <_malloc_r+0x92>
 8004aac:	230c      	movs	r3, #12
 8004aae:	6033      	str	r3, [r6, #0]
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	f000 f868 	bl	8004b86 <__malloc_unlock>
 8004ab6:	e7e4      	b.n	8004a82 <_malloc_r+0x1e>
 8004ab8:	680b      	ldr	r3, [r1, #0]
 8004aba:	1b5b      	subs	r3, r3, r5
 8004abc:	d418      	bmi.n	8004af0 <_malloc_r+0x8c>
 8004abe:	2b0b      	cmp	r3, #11
 8004ac0:	d90f      	bls.n	8004ae2 <_malloc_r+0x7e>
 8004ac2:	600b      	str	r3, [r1, #0]
 8004ac4:	50cd      	str	r5, [r1, r3]
 8004ac6:	18cc      	adds	r4, r1, r3
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f000 f85c 	bl	8004b86 <__malloc_unlock>
 8004ace:	f104 000b 	add.w	r0, r4, #11
 8004ad2:	1d23      	adds	r3, r4, #4
 8004ad4:	f020 0007 	bic.w	r0, r0, #7
 8004ad8:	1ac3      	subs	r3, r0, r3
 8004ada:	d0d3      	beq.n	8004a84 <_malloc_r+0x20>
 8004adc:	425a      	negs	r2, r3
 8004ade:	50e2      	str	r2, [r4, r3]
 8004ae0:	e7d0      	b.n	8004a84 <_malloc_r+0x20>
 8004ae2:	428c      	cmp	r4, r1
 8004ae4:	684b      	ldr	r3, [r1, #4]
 8004ae6:	bf16      	itet	ne
 8004ae8:	6063      	strne	r3, [r4, #4]
 8004aea:	6013      	streq	r3, [r2, #0]
 8004aec:	460c      	movne	r4, r1
 8004aee:	e7eb      	b.n	8004ac8 <_malloc_r+0x64>
 8004af0:	460c      	mov	r4, r1
 8004af2:	6849      	ldr	r1, [r1, #4]
 8004af4:	e7cc      	b.n	8004a90 <_malloc_r+0x2c>
 8004af6:	1cc4      	adds	r4, r0, #3
 8004af8:	f024 0403 	bic.w	r4, r4, #3
 8004afc:	42a0      	cmp	r0, r4
 8004afe:	d005      	beq.n	8004b0c <_malloc_r+0xa8>
 8004b00:	1a21      	subs	r1, r4, r0
 8004b02:	4630      	mov	r0, r6
 8004b04:	f000 f82e 	bl	8004b64 <_sbrk_r>
 8004b08:	3001      	adds	r0, #1
 8004b0a:	d0cf      	beq.n	8004aac <_malloc_r+0x48>
 8004b0c:	6025      	str	r5, [r4, #0]
 8004b0e:	e7db      	b.n	8004ac8 <_malloc_r+0x64>
 8004b10:	20000228 	.word	0x20000228
 8004b14:	2000022c 	.word	0x2000022c

08004b18 <_realloc_r>:
 8004b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1a:	4607      	mov	r7, r0
 8004b1c:	4614      	mov	r4, r2
 8004b1e:	460e      	mov	r6, r1
 8004b20:	b921      	cbnz	r1, 8004b2c <_realloc_r+0x14>
 8004b22:	4611      	mov	r1, r2
 8004b24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b28:	f7ff bf9c 	b.w	8004a64 <_malloc_r>
 8004b2c:	b922      	cbnz	r2, 8004b38 <_realloc_r+0x20>
 8004b2e:	f7ff ff4b 	bl	80049c8 <_free_r>
 8004b32:	4625      	mov	r5, r4
 8004b34:	4628      	mov	r0, r5
 8004b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b38:	f000 f826 	bl	8004b88 <_malloc_usable_size_r>
 8004b3c:	42a0      	cmp	r0, r4
 8004b3e:	d20f      	bcs.n	8004b60 <_realloc_r+0x48>
 8004b40:	4621      	mov	r1, r4
 8004b42:	4638      	mov	r0, r7
 8004b44:	f7ff ff8e 	bl	8004a64 <_malloc_r>
 8004b48:	4605      	mov	r5, r0
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d0f2      	beq.n	8004b34 <_realloc_r+0x1c>
 8004b4e:	4631      	mov	r1, r6
 8004b50:	4622      	mov	r2, r4
 8004b52:	f7ff ff14 	bl	800497e <memcpy>
 8004b56:	4631      	mov	r1, r6
 8004b58:	4638      	mov	r0, r7
 8004b5a:	f7ff ff35 	bl	80049c8 <_free_r>
 8004b5e:	e7e9      	b.n	8004b34 <_realloc_r+0x1c>
 8004b60:	4635      	mov	r5, r6
 8004b62:	e7e7      	b.n	8004b34 <_realloc_r+0x1c>

08004b64 <_sbrk_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	4c06      	ldr	r4, [pc, #24]	; (8004b80 <_sbrk_r+0x1c>)
 8004b68:	2300      	movs	r3, #0
 8004b6a:	4605      	mov	r5, r0
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	6023      	str	r3, [r4, #0]
 8004b70:	f7fc fc16 	bl	80013a0 <_sbrk>
 8004b74:	1c43      	adds	r3, r0, #1
 8004b76:	d102      	bne.n	8004b7e <_sbrk_r+0x1a>
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	b103      	cbz	r3, 8004b7e <_sbrk_r+0x1a>
 8004b7c:	602b      	str	r3, [r5, #0]
 8004b7e:	bd38      	pop	{r3, r4, r5, pc}
 8004b80:	200003f0 	.word	0x200003f0

08004b84 <__malloc_lock>:
 8004b84:	4770      	bx	lr

08004b86 <__malloc_unlock>:
 8004b86:	4770      	bx	lr

08004b88 <_malloc_usable_size_r>:
 8004b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b8c:	1f18      	subs	r0, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	bfbc      	itt	lt
 8004b92:	580b      	ldrlt	r3, [r1, r0]
 8004b94:	18c0      	addlt	r0, r0, r3
 8004b96:	4770      	bx	lr

08004b98 <_init>:
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	bf00      	nop
 8004b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9e:	bc08      	pop	{r3}
 8004ba0:	469e      	mov	lr, r3
 8004ba2:	4770      	bx	lr

08004ba4 <_fini>:
 8004ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba6:	bf00      	nop
 8004ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004baa:	bc08      	pop	{r3}
 8004bac:	469e      	mov	lr, r3
 8004bae:	4770      	bx	lr

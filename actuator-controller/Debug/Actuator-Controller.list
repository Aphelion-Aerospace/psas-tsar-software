
Actuator-Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d0c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003dc8  08003dc8  00013dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eac  08003eac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003eac  08003eac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eac  08003eac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eac  08003eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08003f24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003f24  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009868  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a92  00000000  00000000  00029900  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000910  00000000  00000000  0002b398  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000828  00000000  00000000  0002bca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a24  00000000  00000000  0002c4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007e53  00000000  00000000  00044ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000984c7  00000000  00000000  0004cd47  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e520e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025c0  00000000  00000000  000e528c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003db0 	.word	0x08003db0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08003db0 	.word	0x08003db0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000222:	1dfb      	adds	r3, r7, #7
 8000224:	2200      	movs	r2, #0
 8000226:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000228:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <HAL_Init+0x3c>)
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	4b0a      	ldr	r3, [pc, #40]	; (8000258 <HAL_Init+0x3c>)
 800022e:	2180      	movs	r1, #128	; 0x80
 8000230:	0049      	lsls	r1, r1, #1
 8000232:	430a      	orrs	r2, r1
 8000234:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000236:	2000      	movs	r0, #0
 8000238:	f000 f810 	bl	800025c <HAL_InitTick>
 800023c:	1e03      	subs	r3, r0, #0
 800023e:	d003      	beq.n	8000248 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000240:	1dfb      	adds	r3, r7, #7
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
 8000246:	e001      	b.n	800024c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000248:	f002 fcb2 	bl	8002bb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800024c:	1dfb      	adds	r3, r7, #7
 800024e:	781b      	ldrb	r3, [r3, #0]
}
 8000250:	0018      	movs	r0, r3
 8000252:	46bd      	mov	sp, r7
 8000254:	b002      	add	sp, #8
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40022000 	.word	0x40022000

0800025c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800025c:	b590      	push	{r4, r7, lr}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000264:	230f      	movs	r3, #15
 8000266:	18fb      	adds	r3, r7, r3
 8000268:	2200      	movs	r2, #0
 800026a:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 800026c:	4b1d      	ldr	r3, [pc, #116]	; (80002e4 <HAL_InitTick+0x88>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d02b      	beq.n	80002cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000274:	4b1c      	ldr	r3, [pc, #112]	; (80002e8 <HAL_InitTick+0x8c>)
 8000276:	681c      	ldr	r4, [r3, #0]
 8000278:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <HAL_InitTick+0x88>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	0019      	movs	r1, r3
 800027e:	23fa      	movs	r3, #250	; 0xfa
 8000280:	0098      	lsls	r0, r3, #2
 8000282:	f7ff ff3f 	bl	8000104 <__udivsi3>
 8000286:	0003      	movs	r3, r0
 8000288:	0019      	movs	r1, r3
 800028a:	0020      	movs	r0, r4
 800028c:	f7ff ff3a 	bl	8000104 <__udivsi3>
 8000290:	0003      	movs	r3, r0
 8000292:	0018      	movs	r0, r3
 8000294:	f001 f8d7 	bl	8001446 <HAL_SYSTICK_Config>
 8000298:	1e03      	subs	r3, r0, #0
 800029a:	d112      	bne.n	80002c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b03      	cmp	r3, #3
 80002a0:	d80a      	bhi.n	80002b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002a2:	6879      	ldr	r1, [r7, #4]
 80002a4:	2301      	movs	r3, #1
 80002a6:	425b      	negs	r3, r3
 80002a8:	2200      	movs	r2, #0
 80002aa:	0018      	movs	r0, r3
 80002ac:	f001 f8b6 	bl	800141c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80002b0:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <HAL_InitTick+0x90>)
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	e00d      	b.n	80002d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80002b8:	230f      	movs	r3, #15
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	2201      	movs	r2, #1
 80002be:	701a      	strb	r2, [r3, #0]
 80002c0:	e008      	b.n	80002d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80002c2:	230f      	movs	r3, #15
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	2201      	movs	r2, #1
 80002c8:	701a      	strb	r2, [r3, #0]
 80002ca:	e003      	b.n	80002d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002cc:	230f      	movs	r3, #15
 80002ce:	18fb      	adds	r3, r7, r3
 80002d0:	2201      	movs	r2, #1
 80002d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80002d4:	230f      	movs	r3, #15
 80002d6:	18fb      	adds	r3, r7, r3
 80002d8:	781b      	ldrb	r3, [r3, #0]
}
 80002da:	0018      	movs	r0, r3
 80002dc:	46bd      	mov	sp, r7
 80002de:	b005      	add	sp, #20
 80002e0:	bd90      	pop	{r4, r7, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	20000004 	.word	0x20000004
 80002e8:	20000008 	.word	0x20000008
 80002ec:	20000000 	.word	0x20000000

080002f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <HAL_IncTick+0x18>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <HAL_IncTick+0x1c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	18d2      	adds	r2, r2, r3
 80002fe:	4b02      	ldr	r3, [pc, #8]	; (8000308 <HAL_IncTick+0x18>)
 8000300:	601a      	str	r2, [r3, #0]
}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000098 	.word	0x20000098
 800030c:	20000004 	.word	0x20000004

08000310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  return uwTick;
 8000314:	4b02      	ldr	r3, [pc, #8]	; (8000320 <HAL_GetTick+0x10>)
 8000316:	681b      	ldr	r3, [r3, #0]
}
 8000318:	0018      	movs	r0, r3
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	20000098 	.word	0x20000098

08000324 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a05      	ldr	r2, [pc, #20]	; (8000348 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000334:	401a      	ands	r2, r3
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	431a      	orrs	r2, r3
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	601a      	str	r2, [r3, #0]
}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	b002      	add	sp, #8
 8000344:	bd80      	pop	{r7, pc}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	fe3fffff 	.word	0xfe3fffff

0800034c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	23e0      	movs	r3, #224	; 0xe0
 800035a:	045b      	lsls	r3, r3, #17
 800035c:	4013      	ands	r3, r2
}
 800035e:	0018      	movs	r0, r3
 8000360:	46bd      	mov	sp, r7
 8000362:	b002      	add	sp, #8
 8000364:	bd80      	pop	{r7, pc}

08000366 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 8000366:	b580      	push	{r7, lr}
 8000368:	b084      	sub	sp, #16
 800036a:	af00      	add	r7, sp, #0
 800036c:	60f8      	str	r0, [r7, #12]
 800036e:	60b9      	str	r1, [r7, #8]
 8000370:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	68ba      	ldr	r2, [r7, #8]
 8000378:	2104      	movs	r1, #4
 800037a:	400a      	ands	r2, r1
 800037c:	2107      	movs	r1, #7
 800037e:	4091      	lsls	r1, r2
 8000380:	000a      	movs	r2, r1
 8000382:	43d2      	mvns	r2, r2
 8000384:	401a      	ands	r2, r3
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	2104      	movs	r1, #4
 800038a:	400b      	ands	r3, r1
 800038c:	6879      	ldr	r1, [r7, #4]
 800038e:	4099      	lsls	r1, r3
 8000390:	000b      	movs	r3, r1
 8000392:	431a      	orrs	r2, r3
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46bd      	mov	sp, r7
 800039c:	b004      	add	sp, #16
 800039e:	bd80      	pop	{r7, pc}

080003a0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b0:	68ba      	ldr	r2, [r7, #8]
 80003b2:	211f      	movs	r1, #31
 80003b4:	400a      	ands	r2, r1
 80003b6:	210f      	movs	r1, #15
 80003b8:	4091      	lsls	r1, r2
 80003ba:	000a      	movs	r2, r1
 80003bc:	43d2      	mvns	r2, r2
 80003be:	401a      	ands	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	0e9b      	lsrs	r3, r3, #26
 80003c4:	210f      	movs	r1, #15
 80003c6:	4019      	ands	r1, r3
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	201f      	movs	r0, #31
 80003cc:	4003      	ands	r3, r0
 80003ce:	4099      	lsls	r1, r3
 80003d0:	000b      	movs	r3, r1
 80003d2:	431a      	orrs	r2, r3
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	b004      	add	sp, #16
 80003de:	bd80      	pop	{r7, pc}

080003e0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	035b      	lsls	r3, r3, #13
 80003f2:	0b5b      	lsrs	r3, r3, #13
 80003f4:	431a      	orrs	r2, r3
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b002      	add	sp, #8
 8000400:	bd80      	pop	{r7, pc}

08000402 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b082      	sub	sp, #8
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
 800040a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000410:	683a      	ldr	r2, [r7, #0]
 8000412:	0352      	lsls	r2, r2, #13
 8000414:	0b52      	lsrs	r2, r2, #13
 8000416:	43d2      	mvns	r2, r2
 8000418:	401a      	ands	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	68ba      	ldr	r2, [r7, #8]
 800043a:	0212      	lsls	r2, r2, #8
 800043c:	43d2      	mvns	r2, r2
 800043e:	401a      	ands	r2, r3
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	021b      	lsls	r3, r3, #8
 8000444:	6879      	ldr	r1, [r7, #4]
 8000446:	400b      	ands	r3, r1
 8000448:	4904      	ldr	r1, [pc, #16]	; (800045c <LL_ADC_SetChannelSamplingTime+0x34>)
 800044a:	400b      	ands	r3, r1
 800044c:	431a      	orrs	r2, r3
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	b004      	add	sp, #16
 8000458:	bd80      	pop	{r7, pc}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	07ffff00 	.word	0x07ffff00

08000460 <LL_ADC_SetAnalogWDMonitChannels>:
  *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG
  *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	60f8      	str	r0, [r7, #12]
 8000468:	60b9      	str	r1, [r7, #8]
 800046a:	607a      	str	r2, [r7, #4]
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  register __IO uint32_t *preg;
  
  if(AWDy == LL_ADC_AWD1)
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	4a10      	ldr	r2, [pc, #64]	; (80004b0 <LL_ADC_SetAnalogWDMonitChannels+0x50>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d103      	bne.n	800047c <LL_ADC_SetAnalogWDMonitChannels+0x1c>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	330c      	adds	r3, #12
 8000478:	001c      	movs	r4, r3
 800047a:	e009      	b.n	8000490 <LL_ADC_SetAnalogWDMonitChannels+0x30>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL));
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	33a0      	adds	r3, #160	; 0xa0
 8000480:	0019      	movs	r1, r3
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	0d5b      	lsrs	r3, r3, #21
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	2204      	movs	r2, #4
 800048a:	4013      	ands	r3, r2
 800048c:	18cb      	adds	r3, r1, r3
 800048e:	001c      	movs	r4, r3
  }
  
  MODIFY_REG(*preg,
 8000490:	6823      	ldr	r3, [r4, #0]
 8000492:	68ba      	ldr	r2, [r7, #8]
 8000494:	4907      	ldr	r1, [pc, #28]	; (80004b4 <LL_ADC_SetAnalogWDMonitChannels+0x54>)
 8000496:	400a      	ands	r2, r1
 8000498:	43d2      	mvns	r2, r2
 800049a:	401a      	ands	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	68b9      	ldr	r1, [r7, #8]
 80004a0:	400b      	ands	r3, r1
 80004a2:	4313      	orrs	r3, r2
 80004a4:	6023      	str	r3, [r4, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	b005      	add	sp, #20
 80004ac:	bd90      	pop	{r4, r7, pc}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	7cc00000 	.word	0x7cc00000
 80004b4:	7cc7ffff 	.word	0x7cc7ffff

080004b8 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	60b9      	str	r1, [r7, #8]
 80004c2:	607a      	str	r2, [r7, #4]
 80004c4:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)) >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS)) + ((ADC_AWD_CR3_REGOFFSET & AWDy) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL)));
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	3320      	adds	r3, #32
 80004ca:	0018      	movs	r0, r3
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	0d1b      	lsrs	r3, r3, #20
 80004d0:	2203      	movs	r2, #3
 80004d2:	401a      	ands	r2, r3
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	0d5b      	lsrs	r3, r3, #21
 80004d8:	2101      	movs	r1, #1
 80004da:	400b      	ands	r3, r1
 80004dc:	18d3      	adds	r3, r2, r3
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	18c3      	adds	r3, r0, r3
 80004e2:	001c      	movs	r4, r3
  
  MODIFY_REG(*preg,
 80004e4:	6823      	ldr	r3, [r4, #0]
 80004e6:	4a06      	ldr	r2, [pc, #24]	; (8000500 <LL_ADC_ConfigAnalogWDThresholds+0x48>)
 80004e8:	401a      	ands	r2, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	0419      	lsls	r1, r3, #16
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	430b      	orrs	r3, r1
 80004f2:	4313      	orrs	r3, r2
 80004f4:	6023      	str	r3, [r4, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b005      	add	sp, #20
 80004fc:	bd90      	pop	{r4, r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	f000f000 	.word	0xf000f000

08000504 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	4a05      	ldr	r2, [pc, #20]	; (8000528 <LL_ADC_EnableInternalRegulator+0x24>)
 8000512:	4013      	ands	r3, r2
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	0552      	lsls	r2, r2, #21
 8000518:	431a      	orrs	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	b002      	add	sp, #8
 8000524:	bd80      	pop	{r7, pc}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	6fffffe8 	.word	0x6fffffe8

0800052c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	689a      	ldr	r2, [r3, #8]
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	055b      	lsls	r3, r3, #21
 800053c:	401a      	ands	r2, r3
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	055b      	lsls	r3, r3, #21
 8000542:	429a      	cmp	r2, r3
 8000544:	d101      	bne.n	800054a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000546:	2301      	movs	r3, #1
 8000548:	e000      	b.n	800054c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800054a:	2300      	movs	r3, #0
}
 800054c:	0018      	movs	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	b002      	add	sp, #8
 8000552:	bd80      	pop	{r7, pc}

08000554 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	2201      	movs	r2, #1
 8000562:	4013      	ands	r3, r2
 8000564:	2b01      	cmp	r3, #1
 8000566:	d101      	bne.n	800056c <LL_ADC_IsEnabled+0x18>
 8000568:	2301      	movs	r3, #1
 800056a:	e000      	b.n	800056e <LL_ADC_IsEnabled+0x1a>
 800056c:	2300      	movs	r3, #0
}
 800056e:	0018      	movs	r0, r3
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}

08000576 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b082      	sub	sp, #8
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	2204      	movs	r2, #4
 8000584:	4013      	ands	r3, r2
 8000586:	2b04      	cmp	r3, #4
 8000588:	d101      	bne.n	800058e <LL_ADC_REG_IsConversionOngoing+0x18>
 800058a:	2301      	movs	r3, #1
 800058c:	e000      	b.n	8000590 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800058e:	2300      	movs	r3, #0
}
 8000590:	0018      	movs	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	b002      	add	sp, #8
 8000596:	bd80      	pop	{r7, pc}

08000598 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	601a      	str	r2, [r3, #0]
}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b002      	add	sp, #8
 80005ac:	bd80      	pop	{r7, pc}

080005ae <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2280      	movs	r2, #128	; 0x80
 80005ba:	0052      	lsls	r2, r2, #1
 80005bc:	601a      	str	r2, [r3, #0]
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b002      	add	sp, #8
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2280      	movs	r2, #128	; 0x80
 80005d2:	0092      	lsls	r2, r2, #2
 80005d4:	601a      	str	r2, [r3, #0]
}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b002      	add	sp, #8
 80005dc:	bd80      	pop	{r7, pc}

080005de <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	2280      	movs	r2, #128	; 0x80
 80005ec:	431a      	orrs	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	605a      	str	r2, [r3, #4]
}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b002      	add	sp, #8
 80005f8:	bd80      	pop	{r7, pc}

080005fa <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	2280      	movs	r2, #128	; 0x80
 8000608:	0052      	lsls	r2, r2, #1
 800060a:	431a      	orrs	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	605a      	str	r2, [r3, #4]
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b002      	add	sp, #8
 8000616:	bd80      	pop	{r7, pc}

08000618 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	0092      	lsls	r2, r2, #2
 8000628:	431a      	orrs	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	605a      	str	r2, [r3, #4]
}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	b002      	add	sp, #8
 8000634:	bd80      	pop	{r7, pc}

08000636 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	2280      	movs	r2, #128	; 0x80
 8000644:	4393      	bics	r3, r2
 8000646:	001a      	movs	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	605a      	str	r2, [r3, #4]
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b002      	add	sp, #8
 8000652:	bd80      	pop	{r7, pc}

08000654 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	4a03      	ldr	r2, [pc, #12]	; (8000670 <LL_ADC_DisableIT_AWD2+0x1c>)
 8000662:	401a      	ands	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	605a      	str	r2, [r3, #4]
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b002      	add	sp, #8
 800066e:	bd80      	pop	{r7, pc}
 8000670:	fffffeff 	.word	0xfffffeff

08000674 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	4a03      	ldr	r2, [pc, #12]	; (8000690 <LL_ADC_DisableIT_AWD3+0x1c>)
 8000682:	401a      	ands	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	605a      	str	r2, [r3, #4]
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b002      	add	sp, #8
 800068e:	bd80      	pop	{r7, pc}
 8000690:	fffffdff 	.word	0xfffffdff

08000694 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800069c:	231f      	movs	r3, #31
 800069e:	18fb      	adds	r3, r7, r3
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d101      	bne.n	80006ba <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	e1aa      	b.n	8000a10 <HAL_ADC_Init+0x37c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d10a      	bne.n	80006d8 <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	0018      	movs	r0, r3
 80006c6:	f002 fa9b 	bl	8002c00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2200      	movs	r2, #0
 80006ce:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2254      	movs	r2, #84	; 0x54
 80006d4:	2100      	movs	r1, #0
 80006d6:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	0018      	movs	r0, r3
 80006de:	f7ff ff25 	bl	800052c <LL_ADC_IsInternalRegulatorEnabled>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d114      	bne.n	8000710 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff ff0a 	bl	8000504 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80006f0:	4bc9      	ldr	r3, [pc, #804]	; (8000a18 <HAL_ADC_Init+0x384>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	49c9      	ldr	r1, [pc, #804]	; (8000a1c <HAL_ADC_Init+0x388>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f7ff fd04 	bl	8000104 <__udivsi3>
 80006fc:	0003      	movs	r3, r0
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8000702:	e002      	b.n	800070a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	3b01      	subs	r3, #1
 8000708:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d1f9      	bne.n	8000704 <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	0018      	movs	r0, r3
 8000716:	f7ff ff09 	bl	800052c <LL_ADC_IsInternalRegulatorEnabled>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d10f      	bne.n	800073e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000722:	2210      	movs	r2, #16
 8000724:	431a      	orrs	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800072e:	2201      	movs	r2, #1
 8000730:	431a      	orrs	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 8000736:	231f      	movs	r3, #31
 8000738:	18fb      	adds	r3, r7, r3
 800073a:	2201      	movs	r2, #1
 800073c:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	0018      	movs	r0, r3
 8000744:	f7ff ff17 	bl	8000576 <LL_ADC_REG_IsConversionOngoing>
 8000748:	0003      	movs	r3, r0
 800074a:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000750:	2210      	movs	r2, #16
 8000752:	4013      	ands	r3, r2
 8000754:	d000      	beq.n	8000758 <HAL_ADC_Init+0xc4>
 8000756:	e14e      	b.n	80009f6 <HAL_ADC_Init+0x362>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d000      	beq.n	8000760 <HAL_ADC_Init+0xcc>
 800075e:	e14a      	b.n	80009f6 <HAL_ADC_Init+0x362>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000764:	4aae      	ldr	r2, [pc, #696]	; (8000a20 <HAL_ADC_Init+0x38c>)
 8000766:	4013      	ands	r3, r2
 8000768:	2202      	movs	r2, #2
 800076a:	431a      	orrs	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	0018      	movs	r0, r3
 8000776:	f7ff feed 	bl	8000554 <LL_ADC_IsEnabled>
 800077a:	1e03      	subs	r3, r0, #0
 800077c:	d137      	bne.n	80007ee <HAL_ADC_Init+0x15a>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	2218      	movs	r2, #24
 8000786:	4393      	bics	r3, r2
 8000788:	0019      	movs	r1, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	689a      	ldr	r2, [r3, #8]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	430a      	orrs	r2, r1
 8000794:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	691b      	ldr	r3, [r3, #16]
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	0899      	lsrs	r1, r3, #2
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	0f9b      	lsrs	r3, r3, #30
 80007a6:	079a      	lsls	r2, r3, #30
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	430a      	orrs	r2, r1
 80007ae:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	685a      	ldr	r2, [r3, #4]
 80007b4:	23c0      	movs	r3, #192	; 0xc0
 80007b6:	061b      	lsls	r3, r3, #24
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d018      	beq.n	80007ee <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	05db      	lsls	r3, r3, #23
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d012      	beq.n	80007ee <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80007cc:	2380      	movs	r3, #128	; 0x80
 80007ce:	061b      	lsls	r3, r3, #24
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d00c      	beq.n	80007ee <HAL_ADC_Init+0x15a>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 80007d4:	4b93      	ldr	r3, [pc, #588]	; (8000a24 <HAL_ADC_Init+0x390>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a93      	ldr	r2, [pc, #588]	; (8000a28 <HAL_ADC_Init+0x394>)
 80007da:	4013      	ands	r3, r2
 80007dc:	0019      	movs	r1, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	23f0      	movs	r3, #240	; 0xf0
 80007e4:	039b      	lsls	r3, r3, #14
 80007e6:	401a      	ands	r2, r3
 80007e8:	4b8e      	ldr	r3, [pc, #568]	; (8000a24 <HAL_ADC_Init+0x390>)
 80007ea:	430a      	orrs	r2, r1
 80007ec:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	7e1b      	ldrb	r3, [r3, #24]
 80007f2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7e5b      	ldrb	r3, [r3, #25]
 80007f8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80007fa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	7e9b      	ldrb	r3, [r3, #26]
 8000800:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000802:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000808:	2b00      	cmp	r3, #0
 800080a:	d002      	beq.n	8000812 <HAL_ADC_Init+0x17e>
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	015b      	lsls	r3, r3, #5
 8000810:	e000      	b.n	8000814 <HAL_ADC_Init+0x180>
 8000812:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000814:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800081a:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	691b      	ldr	r3, [r3, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	da04      	bge.n	800082e <HAL_ADC_Init+0x19a>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	691b      	ldr	r3, [r3, #16]
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	085b      	lsrs	r3, r3, #1
 800082c:	e001      	b.n	8000832 <HAL_ADC_Init+0x19e>
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 8000832:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	212c      	movs	r1, #44	; 0x2c
 8000838:	5c5b      	ldrb	r3, [r3, r1]
 800083a:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 800083c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800083e:	69ba      	ldr	r2, [r7, #24]
 8000840:	4313      	orrs	r3, r2
 8000842:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2220      	movs	r2, #32
 8000848:	5c9b      	ldrb	r3, [r3, r2]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d115      	bne.n	800087a <HAL_ADC_Init+0x1e6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	7e9b      	ldrb	r3, [r3, #26]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d105      	bne.n	8000862 <HAL_ADC_Init+0x1ce>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	2280      	movs	r2, #128	; 0x80
 800085a:	0252      	lsls	r2, r2, #9
 800085c:	4313      	orrs	r3, r2
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	e00b      	b.n	800087a <HAL_ADC_Init+0x1e6>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000866:	2220      	movs	r2, #32
 8000868:	431a      	orrs	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000872:	2201      	movs	r2, #1
 8000874:	431a      	orrs	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087e:	2b00      	cmp	r3, #0
 8000880:	d00a      	beq.n	8000898 <HAL_ADC_Init+0x204>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000886:	23e0      	movs	r3, #224	; 0xe0
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000890:	4313      	orrs	r3, r2
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	4313      	orrs	r3, r2
 8000896:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 80008a0:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 80008a6:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 80008ac:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 80008ae:	697a      	ldr	r2, [r7, #20]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	223c      	movs	r2, #60	; 0x3c
 80008b8:	5c9b      	ldrb	r3, [r3, r2]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d103      	bne.n	80008c6 <HAL_ADC_Init+0x232>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	2201      	movs	r2, #1
 80008c2:	4313      	orrs	r3, r2
 80008c4:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	4a57      	ldr	r2, [pc, #348]	; (8000a2c <HAL_ADC_Init+0x398>)
 80008ce:	4013      	ands	r3, r2
 80008d0:	0019      	movs	r1, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	430a      	orrs	r2, r1
 80008da:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	691b      	ldr	r3, [r3, #16]
 80008e2:	4a53      	ldr	r2, [pc, #332]	; (8000a30 <HAL_ADC_Init+0x39c>)
 80008e4:	4013      	ands	r3, r2
 80008e6:	0019      	movs	r1, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	430a      	orrs	r2, r1
 80008f0:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6818      	ldr	r0, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008fa:	001a      	movs	r2, r3
 80008fc:	2100      	movs	r1, #0
 80008fe:	f7ff fd32 	bl	8000366 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6818      	ldr	r0, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800090a:	494a      	ldr	r1, [pc, #296]	; (8000a34 <HAL_ADC_Init+0x3a0>)
 800090c:	001a      	movs	r2, r3
 800090e:	f7ff fd2a 	bl	8000366 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	691b      	ldr	r3, [r3, #16]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d109      	bne.n	800092e <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2110      	movs	r1, #16
 8000926:	4249      	negs	r1, r1
 8000928:	430a      	orrs	r2, r1
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
 800092c:	e03c      	b.n	80009a8 <HAL_ADC_Init+0x314>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	691a      	ldr	r2, [r3, #16]
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	039b      	lsls	r3, r3, #14
 8000936:	429a      	cmp	r2, r3
 8000938:	d136      	bne.n	80009a8 <HAL_ADC_Init+0x314>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	e00c      	b.n	800095a <HAL_ADC_Init+0x2c6>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	40da      	lsrs	r2, r3
 800094a:	0013      	movs	r3, r2
 800094c:	220f      	movs	r2, #15
 800094e:	4013      	ands	r3, r2
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d006      	beq.n	8000962 <HAL_ADC_Init+0x2ce>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	3301      	adds	r3, #1
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	2b07      	cmp	r3, #7
 800095e:	d9ef      	bls.n	8000940 <HAL_ADC_Init+0x2ac>
 8000960:	e000      	b.n	8000964 <HAL_ADC_Init+0x2d0>
        {
          break;
 8000962:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d109      	bne.n	800097e <HAL_ADC_Init+0x2ea>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2110      	movs	r1, #16
 8000976:	4249      	negs	r1, r1
 8000978:	430a      	orrs	r2, r1
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
 800097c:	e014      	b.n	80009a8 <HAL_ADC_Init+0x314>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	4a2b      	ldr	r2, [pc, #172]	; (8000a38 <HAL_ADC_Init+0x3a4>)
 800098a:	4694      	mov	ip, r2
 800098c:	4463      	add	r3, ip
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	221c      	movs	r2, #28
 8000992:	4013      	ands	r3, r2
 8000994:	2210      	movs	r2, #16
 8000996:	4252      	negs	r2, r2
 8000998:	409a      	lsls	r2, r3
 800099a:	0011      	movs	r1, r2
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	430a      	orrs	r2, r1
 80009a6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	4a23      	ldr	r2, [pc, #140]	; (8000a3c <HAL_ADC_Init+0x3a8>)
 80009b0:	4013      	ands	r3, r2
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d10b      	bne.n	80009d0 <HAL_ADC_Init+0x33c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c2:	2203      	movs	r2, #3
 80009c4:	4393      	bics	r3, r2
 80009c6:	2201      	movs	r2, #1
 80009c8:	431a      	orrs	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80009ce:	e01c      	b.n	8000a0a <HAL_ADC_Init+0x376>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d4:	2212      	movs	r2, #18
 80009d6:	4393      	bics	r3, r2
 80009d8:	2210      	movs	r2, #16
 80009da:	431a      	orrs	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009e4:	2201      	movs	r2, #1
 80009e6:	431a      	orrs	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 80009ec:	231f      	movs	r3, #31
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80009f4:	e009      	b.n	8000a0a <HAL_ADC_Init+0x376>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fa:	2210      	movs	r2, #16
 80009fc:	431a      	orrs	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8000a02:	231f      	movs	r3, #31
 8000a04:	18fb      	adds	r3, r7, r3
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a0a:	231f      	movs	r3, #31
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	781b      	ldrb	r3, [r3, #0]
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b008      	add	sp, #32
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	00030d40 	.word	0x00030d40
 8000a20:	fffffefd 	.word	0xfffffefd
 8000a24:	40012708 	.word	0x40012708
 8000a28:	ffc3ffff 	.word	0xffc3ffff
 8000a2c:	fffe0219 	.word	0xfffe0219
 8000a30:	dffffc02 	.word	0xdffffc02
 8000a34:	07ffff04 	.word	0x07ffff04
 8000a38:	3fffffff 	.word	0x3fffffff
 8000a3c:	833fffe7 	.word	0x833fffe7

08000a40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a4a:	2317      	movs	r3, #23
 8000a4c:	18fb      	adds	r3, r7, r3
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2254      	movs	r2, #84	; 0x54
 8000a5a:	5c9b      	ldrb	r3, [r3, r2]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d101      	bne.n	8000a64 <HAL_ADC_ConfigChannel+0x24>
 8000a60:	2302      	movs	r3, #2
 8000a62:	e1bc      	b.n	8000dde <HAL_ADC_ConfigChannel+0x39e>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2254      	movs	r2, #84	; 0x54
 8000a68:	2101      	movs	r1, #1
 8000a6a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff fd80 	bl	8000576 <LL_ADC_REG_IsConversionOngoing>
 8000a76:	1e03      	subs	r3, r0, #0
 8000a78:	d000      	beq.n	8000a7c <HAL_ADC_ConfigChannel+0x3c>
 8000a7a:	e19f      	b.n	8000dbc <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d100      	bne.n	8000a86 <HAL_ADC_ConfigChannel+0x46>
 8000a84:	e13e      	b.n	8000d04 <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	691a      	ldr	r2, [r3, #16]
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	061b      	lsls	r3, r3, #24
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d004      	beq.n	8000a9c <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8000a96:	4abf      	ldr	r2, [pc, #764]	; (8000d94 <HAL_ADC_ConfigChannel+0x354>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d108      	bne.n	8000aae <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	0010      	movs	r0, r2
 8000aa8:	f7ff fc9a 	bl	80003e0 <LL_ADC_REG_SetSequencerChAdd>
 8000aac:	e0c9      	b.n	8000c42 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	211f      	movs	r1, #31
 8000ab8:	400b      	ands	r3, r1
 8000aba:	210f      	movs	r1, #15
 8000abc:	4099      	lsls	r1, r3
 8000abe:	000b      	movs	r3, r1
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	035b      	lsls	r3, r3, #13
 8000acc:	0b5b      	lsrs	r3, r3, #13
 8000ace:	d105      	bne.n	8000adc <HAL_ADC_ConfigChannel+0x9c>
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	0e9b      	lsrs	r3, r3, #26
 8000ad6:	221f      	movs	r2, #31
 8000ad8:	4013      	ands	r3, r2
 8000ada:	e098      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	d000      	beq.n	8000ae8 <HAL_ADC_ConfigChannel+0xa8>
 8000ae6:	e091      	b.n	8000c0c <HAL_ADC_ConfigChannel+0x1cc>
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2202      	movs	r2, #2
 8000aee:	4013      	ands	r3, r2
 8000af0:	d000      	beq.n	8000af4 <HAL_ADC_ConfigChannel+0xb4>
 8000af2:	e089      	b.n	8000c08 <HAL_ADC_ConfigChannel+0x1c8>
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2204      	movs	r2, #4
 8000afa:	4013      	ands	r3, r2
 8000afc:	d000      	beq.n	8000b00 <HAL_ADC_ConfigChannel+0xc0>
 8000afe:	e081      	b.n	8000c04 <HAL_ADC_ConfigChannel+0x1c4>
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2208      	movs	r2, #8
 8000b06:	4013      	ands	r3, r2
 8000b08:	d000      	beq.n	8000b0c <HAL_ADC_ConfigChannel+0xcc>
 8000b0a:	e079      	b.n	8000c00 <HAL_ADC_ConfigChannel+0x1c0>
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2210      	movs	r2, #16
 8000b12:	4013      	ands	r3, r2
 8000b14:	d000      	beq.n	8000b18 <HAL_ADC_ConfigChannel+0xd8>
 8000b16:	e071      	b.n	8000bfc <HAL_ADC_ConfigChannel+0x1bc>
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2220      	movs	r2, #32
 8000b1e:	4013      	ands	r3, r2
 8000b20:	d000      	beq.n	8000b24 <HAL_ADC_ConfigChannel+0xe4>
 8000b22:	e069      	b.n	8000bf8 <HAL_ADC_ConfigChannel+0x1b8>
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2240      	movs	r2, #64	; 0x40
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	d000      	beq.n	8000b30 <HAL_ADC_ConfigChannel+0xf0>
 8000b2e:	e061      	b.n	8000bf4 <HAL_ADC_ConfigChannel+0x1b4>
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2280      	movs	r2, #128	; 0x80
 8000b36:	4013      	ands	r3, r2
 8000b38:	d000      	beq.n	8000b3c <HAL_ADC_ConfigChannel+0xfc>
 8000b3a:	e059      	b.n	8000bf0 <HAL_ADC_ConfigChannel+0x1b0>
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4013      	ands	r3, r2
 8000b46:	d151      	bne.n	8000bec <HAL_ADC_ConfigChannel+0x1ac>
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4013      	ands	r3, r2
 8000b52:	d149      	bne.n	8000be8 <HAL_ADC_ConfigChannel+0x1a8>
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	d141      	bne.n	8000be4 <HAL_ADC_ConfigChannel+0x1a4>
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	011b      	lsls	r3, r3, #4
 8000b68:	4013      	ands	r3, r2
 8000b6a:	d139      	bne.n	8000be0 <HAL_ADC_ConfigChannel+0x1a0>
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	015b      	lsls	r3, r3, #5
 8000b74:	4013      	ands	r3, r2
 8000b76:	d131      	bne.n	8000bdc <HAL_ADC_ConfigChannel+0x19c>
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	019b      	lsls	r3, r3, #6
 8000b80:	4013      	ands	r3, r2
 8000b82:	d129      	bne.n	8000bd8 <HAL_ADC_ConfigChannel+0x198>
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	01db      	lsls	r3, r3, #7
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	d121      	bne.n	8000bd4 <HAL_ADC_ConfigChannel+0x194>
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	4013      	ands	r3, r2
 8000b9a:	d119      	bne.n	8000bd0 <HAL_ADC_ConfigChannel+0x190>
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	025b      	lsls	r3, r3, #9
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	d111      	bne.n	8000bcc <HAL_ADC_ConfigChannel+0x18c>
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	029b      	lsls	r3, r3, #10
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	d109      	bne.n	8000bc8 <HAL_ADC_ConfigChannel+0x188>
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	02db      	lsls	r3, r3, #11
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	d001      	beq.n	8000bc4 <HAL_ADC_ConfigChannel+0x184>
 8000bc0:	2312      	movs	r3, #18
 8000bc2:	e024      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	e022      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000bc8:	2311      	movs	r3, #17
 8000bca:	e020      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000bcc:	2310      	movs	r3, #16
 8000bce:	e01e      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	e01c      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000bd4:	230e      	movs	r3, #14
 8000bd6:	e01a      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000bd8:	230d      	movs	r3, #13
 8000bda:	e018      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000bdc:	230c      	movs	r3, #12
 8000bde:	e016      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000be0:	230b      	movs	r3, #11
 8000be2:	e014      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000be4:	230a      	movs	r3, #10
 8000be6:	e012      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000be8:	2309      	movs	r3, #9
 8000bea:	e010      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000bec:	2308      	movs	r3, #8
 8000bee:	e00e      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	e00c      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000bf4:	2306      	movs	r3, #6
 8000bf6:	e00a      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000bf8:	2305      	movs	r3, #5
 8000bfa:	e008      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	e006      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000c00:	2303      	movs	r3, #3
 8000c02:	e004      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000c04:	2302      	movs	r3, #2
 8000c06:	e002      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e000      	b.n	8000c0e <HAL_ADC_ConfigChannel+0x1ce>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	683a      	ldr	r2, [r7, #0]
 8000c10:	6852      	ldr	r2, [r2, #4]
 8000c12:	201f      	movs	r0, #31
 8000c14:	4002      	ands	r2, r0
 8000c16:	4093      	lsls	r3, r2
 8000c18:	000a      	movs	r2, r1
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69db      	ldr	r3, [r3, #28]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d808      	bhi.n	8000c42 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	6859      	ldr	r1, [r3, #4]
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	f7ff fbaf 	bl	80003a0 <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6818      	ldr	r0, [r3, #0]
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	6819      	ldr	r1, [r3, #0]
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	001a      	movs	r2, r3
 8000c50:	f7ff fbea 	bl	8000428 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db00      	blt.n	8000c5e <HAL_ADC_ConfigChannel+0x21e>
 8000c5c:	e0b8      	b.n	8000dd0 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000c5e:	4b4e      	ldr	r3, [pc, #312]	; (8000d98 <HAL_ADC_ConfigChannel+0x358>)
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff fb73 	bl	800034c <LL_ADC_GetCommonPathInternalCh>
 8000c66:	0003      	movs	r3, r0
 8000c68:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a4b      	ldr	r2, [pc, #300]	; (8000d9c <HAL_ADC_ConfigChannel+0x35c>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d11d      	bne.n	8000cb0 <HAL_ADC_ConfigChannel+0x270>
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	041b      	lsls	r3, r3, #16
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	d118      	bne.n	8000cb0 <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	2280      	movs	r2, #128	; 0x80
 8000c82:	0412      	lsls	r2, r2, #16
 8000c84:	4313      	orrs	r3, r2
 8000c86:	4a44      	ldr	r2, [pc, #272]	; (8000d98 <HAL_ADC_ConfigChannel+0x358>)
 8000c88:	0019      	movs	r1, r3
 8000c8a:	0010      	movs	r0, r2
 8000c8c:	f7ff fb4a 	bl	8000324 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000c90:	4b43      	ldr	r3, [pc, #268]	; (8000da0 <HAL_ADC_ConfigChannel+0x360>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4943      	ldr	r1, [pc, #268]	; (8000da4 <HAL_ADC_ConfigChannel+0x364>)
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff fa34 	bl	8000104 <__udivsi3>
 8000c9c:	0003      	movs	r3, r0
 8000c9e:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8000ca0:	e002      	b.n	8000ca8 <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1f9      	bne.n	8000ca2 <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000cae:	e08f      	b.n	8000dd0 <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a3c      	ldr	r2, [pc, #240]	; (8000da8 <HAL_ADC_ConfigChannel+0x368>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d10e      	bne.n	8000cd8 <HAL_ADC_ConfigChannel+0x298>
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	045b      	lsls	r3, r3, #17
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	d109      	bne.n	8000cd8 <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	0452      	lsls	r2, r2, #17
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	4a32      	ldr	r2, [pc, #200]	; (8000d98 <HAL_ADC_ConfigChannel+0x358>)
 8000cce:	0019      	movs	r1, r3
 8000cd0:	0010      	movs	r0, r2
 8000cd2:	f7ff fb27 	bl	8000324 <LL_ADC_SetCommonPathInternalCh>
 8000cd6:	e07b      	b.n	8000dd0 <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a33      	ldr	r2, [pc, #204]	; (8000dac <HAL_ADC_ConfigChannel+0x36c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d000      	beq.n	8000ce4 <HAL_ADC_ConfigChannel+0x2a4>
 8000ce2:	e075      	b.n	8000dd0 <HAL_ADC_ConfigChannel+0x390>
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	03db      	lsls	r3, r3, #15
 8000cea:	4013      	ands	r3, r2
 8000cec:	d000      	beq.n	8000cf0 <HAL_ADC_ConfigChannel+0x2b0>
 8000cee:	e06f      	b.n	8000dd0 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	03d2      	lsls	r2, r2, #15
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	4a27      	ldr	r2, [pc, #156]	; (8000d98 <HAL_ADC_ConfigChannel+0x358>)
 8000cfa:	0019      	movs	r1, r3
 8000cfc:	0010      	movs	r0, r2
 8000cfe:	f7ff fb11 	bl	8000324 <LL_ADC_SetCommonPathInternalCh>
 8000d02:	e065      	b.n	8000dd0 <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	691a      	ldr	r2, [r3, #16]
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	061b      	lsls	r3, r3, #24
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d004      	beq.n	8000d1a <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8000d14:	4a1f      	ldr	r2, [pc, #124]	; (8000d94 <HAL_ADC_ConfigChannel+0x354>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d107      	bne.n	8000d2a <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	0019      	movs	r1, r3
 8000d24:	0010      	movs	r0, r2
 8000d26:	f7ff fb6c 	bl	8000402 <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	da4e      	bge.n	8000dd0 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <HAL_ADC_ConfigChannel+0x358>)
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff fb09 	bl	800034c <LL_ADC_GetCommonPathInternalCh>
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a16      	ldr	r2, [pc, #88]	; (8000d9c <HAL_ADC_ConfigChannel+0x35c>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d108      	bne.n	8000d5a <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <HAL_ADC_ConfigChannel+0x370>)
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <HAL_ADC_ConfigChannel+0x358>)
 8000d50:	0019      	movs	r1, r3
 8000d52:	0010      	movs	r0, r2
 8000d54:	f7ff fae6 	bl	8000324 <LL_ADC_SetCommonPathInternalCh>
 8000d58:	e03a      	b.n	8000dd0 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <HAL_ADC_ConfigChannel+0x368>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d108      	bne.n	8000d76 <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <HAL_ADC_ConfigChannel+0x374>)
 8000d68:	4013      	ands	r3, r2
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <HAL_ADC_ConfigChannel+0x358>)
 8000d6c:	0019      	movs	r1, r3
 8000d6e:	0010      	movs	r0, r2
 8000d70:	f7ff fad8 	bl	8000324 <LL_ADC_SetCommonPathInternalCh>
 8000d74:	e02c      	b.n	8000dd0 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <HAL_ADC_ConfigChannel+0x36c>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d127      	bne.n	8000dd0 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <HAL_ADC_ConfigChannel+0x378>)
 8000d84:	4013      	ands	r3, r2
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <HAL_ADC_ConfigChannel+0x358>)
 8000d88:	0019      	movs	r1, r3
 8000d8a:	0010      	movs	r0, r2
 8000d8c:	f7ff faca 	bl	8000324 <LL_ADC_SetCommonPathInternalCh>
 8000d90:	e01e      	b.n	8000dd0 <HAL_ADC_ConfigChannel+0x390>
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	80000004 	.word	0x80000004
 8000d98:	40012708 	.word	0x40012708
 8000d9c:	b0001000 	.word	0xb0001000
 8000da0:	20000008 	.word	0x20000008
 8000da4:	00030d40 	.word	0x00030d40
 8000da8:	b8004000 	.word	0xb8004000
 8000dac:	b4002000 	.word	0xb4002000
 8000db0:	ff7fffff 	.word	0xff7fffff
 8000db4:	feffffff 	.word	0xfeffffff
 8000db8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8000dc8:	2317      	movs	r3, #23
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2254      	movs	r2, #84	; 0x54
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000dd8:	2317      	movs	r3, #23
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	781b      	ldrb	r3, [r3, #0]
}
 8000dde:	0018      	movs	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b006      	add	sp, #24
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)

08000de8 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df2:	230f      	movs	r3, #15
 8000df4:	18fb      	adds	r3, r7, r3
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2254      	movs	r2, #84	; 0x54
 8000dfe:	5c9b      	ldrb	r3, [r3, r2]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d101      	bne.n	8000e08 <HAL_ADC_AnalogWDGConfig+0x20>
 8000e04:	2302      	movs	r3, #2
 8000e06:	e269      	b.n	80012dc <HAL_ADC_AnalogWDGConfig+0x4f4>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2254      	movs	r2, #84	; 0x54
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	5499      	strb	r1, [r3, r2]
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC group regular:                                */
  /*  - Analog watchdog channels                                              */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	0018      	movs	r0, r3
 8000e16:	f7ff fbae 	bl	8000576 <LL_ADC_REG_IsConversionOngoing>
 8000e1a:	1e03      	subs	r3, r0, #0
 8000e1c:	d000      	beq.n	8000e20 <HAL_ADC_AnalogWDGConfig+0x38>
 8000e1e:	e22a      	b.n	8001276 <HAL_ADC_AnalogWDGConfig+0x48e>
  {
    /* Analog watchdog configuration */
    if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a93      	ldr	r2, [pc, #588]	; (8001074 <HAL_ADC_AnalogWDGConfig+0x28c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d142      	bne.n	8000eb0 <HAL_ADC_AnalogWDGConfig+0xc8>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels.                                                         */
      switch(AnalogWDGConfig->WatchdogMode)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2280      	movs	r2, #128	; 0x80
 8000e30:	0412      	lsls	r2, r2, #16
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d011      	beq.n	8000e5a <HAL_ADC_AnalogWDGConfig+0x72>
 8000e36:	22c0      	movs	r2, #192	; 0xc0
 8000e38:	0412      	lsls	r2, r2, #16
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d115      	bne.n	8000e6a <HAL_ADC_AnalogWDGConfig+0x82>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel, LL_ADC_GROUP_REGULAR));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	4a8c      	ldr	r2, [pc, #560]	; (8001078 <HAL_ADC_AnalogWDGConfig+0x290>)
 8000e48:	4013      	ands	r3, r2
 8000e4a:	22c0      	movs	r2, #192	; 0xc0
 8000e4c:	0412      	lsls	r2, r2, #16
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	4988      	ldr	r1, [pc, #544]	; (8001074 <HAL_ADC_AnalogWDGConfig+0x28c>)
 8000e52:	001a      	movs	r2, r3
 8000e54:	f7ff fb04 	bl	8000460 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8000e58:	e00f      	b.n	8000e7a <HAL_ADC_AnalogWDGConfig+0x92>
        
        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a87      	ldr	r2, [pc, #540]	; (800107c <HAL_ADC_AnalogWDGConfig+0x294>)
 8000e60:	4984      	ldr	r1, [pc, #528]	; (8001074 <HAL_ADC_AnalogWDGConfig+0x28c>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff fafc 	bl	8000460 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8000e68:	e007      	b.n	8000e7a <HAL_ADC_AnalogWDGConfig+0x92>
        
        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4981      	ldr	r1, [pc, #516]	; (8001074 <HAL_ADC_AnalogWDGConfig+0x28c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	0018      	movs	r0, r3
 8000e74:	f7ff faf4 	bl	8000460 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8000e78:	46c0      	nop			; (mov r8, r8)
      }
      
      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7e:	4a80      	ldr	r2, [pc, #512]	; (8001080 <HAL_ADC_AnalogWDGConfig+0x298>)
 8000e80:	401a      	ands	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff fb84 	bl	8000598 <LL_ADC_ClearFlag_AWD1>
      
      /* Configure ADC analog watchdog interrupt */
      if(AnalogWDGConfig->ITMode == ENABLE)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	7b1b      	ldrb	r3, [r3, #12]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d105      	bne.n	8000ea4 <HAL_ADC_AnalogWDGConfig+0xbc>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f7ff fb9e 	bl	80005de <LL_ADC_EnableIT_AWD1>
 8000ea2:	e1e8      	b.n	8001276 <HAL_ADC_AnalogWDGConfig+0x48e>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f7ff fbc4 	bl	8000636 <LL_ADC_DisableIT_AWD1>
 8000eae:	e1e2      	b.n	8001276 <HAL_ADC_AnalogWDGConfig+0x48e>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch(AnalogWDGConfig->WatchdogMode)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2280      	movs	r2, #128	; 0x80
 8000eb6:	0412      	lsls	r2, r2, #16
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d100      	bne.n	8000ebe <HAL_ADC_AnalogWDGConfig+0xd6>
 8000ebc:	e18f      	b.n	80011de <HAL_ADC_AnalogWDGConfig+0x3f6>
 8000ebe:	22c0      	movs	r2, #192	; 0xc0
 8000ec0:	0412      	lsls	r2, r2, #16
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d000      	beq.n	8000ec8 <HAL_ADC_AnalogWDGConfig+0xe0>
 8000ec6:	e193      	b.n	80011f0 <HAL_ADC_AnalogWDGConfig+0x408>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a6d      	ldr	r2, [pc, #436]	; (8001084 <HAL_ADC_AnalogWDGConfig+0x29c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d000      	beq.n	8000ed4 <HAL_ADC_AnalogWDGConfig+0xec>
 8000ed2:	e0bc      	b.n	800104e <HAL_ADC_AnalogWDGConfig+0x266>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	22a0      	movs	r2, #160	; 0xa0
 8000eda:	5899      	ldr	r1, [r3, r2]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	035b      	lsls	r3, r3, #13
 8000ee2:	0b5b      	lsrs	r3, r3, #13
 8000ee4:	d108      	bne.n	8000ef8 <HAL_ADC_AnalogWDGConfig+0x110>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	0e9b      	lsrs	r3, r3, #26
 8000eec:	221f      	movs	r2, #31
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	e0a4      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	2201      	movs	r2, #1
 8000efe:	4013      	ands	r3, r2
 8000f00:	d000      	beq.n	8000f04 <HAL_ADC_AnalogWDGConfig+0x11c>
 8000f02:	e09d      	b.n	8001040 <HAL_ADC_AnalogWDGConfig+0x258>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	2202      	movs	r2, #2
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d000      	beq.n	8000f10 <HAL_ADC_AnalogWDGConfig+0x128>
 8000f0e:	e095      	b.n	800103c <HAL_ADC_AnalogWDGConfig+0x254>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	2204      	movs	r2, #4
 8000f16:	4013      	ands	r3, r2
 8000f18:	d000      	beq.n	8000f1c <HAL_ADC_AnalogWDGConfig+0x134>
 8000f1a:	e08d      	b.n	8001038 <HAL_ADC_AnalogWDGConfig+0x250>
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	2208      	movs	r2, #8
 8000f22:	4013      	ands	r3, r2
 8000f24:	d000      	beq.n	8000f28 <HAL_ADC_AnalogWDGConfig+0x140>
 8000f26:	e085      	b.n	8001034 <HAL_ADC_AnalogWDGConfig+0x24c>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	2210      	movs	r2, #16
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d000      	beq.n	8000f34 <HAL_ADC_AnalogWDGConfig+0x14c>
 8000f32:	e07d      	b.n	8001030 <HAL_ADC_AnalogWDGConfig+0x248>
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	2220      	movs	r2, #32
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d000      	beq.n	8000f40 <HAL_ADC_AnalogWDGConfig+0x158>
 8000f3e:	e075      	b.n	800102c <HAL_ADC_AnalogWDGConfig+0x244>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	2240      	movs	r2, #64	; 0x40
 8000f46:	4013      	ands	r3, r2
 8000f48:	d000      	beq.n	8000f4c <HAL_ADC_AnalogWDGConfig+0x164>
 8000f4a:	e06d      	b.n	8001028 <HAL_ADC_AnalogWDGConfig+0x240>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	4013      	ands	r3, r2
 8000f54:	d000      	beq.n	8000f58 <HAL_ADC_AnalogWDGConfig+0x170>
 8000f56:	e065      	b.n	8001024 <HAL_ADC_AnalogWDGConfig+0x23c>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4013      	ands	r3, r2
 8000f62:	d000      	beq.n	8000f66 <HAL_ADC_AnalogWDGConfig+0x17e>
 8000f64:	e05b      	b.n	800101e <HAL_ADC_AnalogWDGConfig+0x236>
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d152      	bne.n	8001018 <HAL_ADC_AnalogWDGConfig+0x230>
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	689a      	ldr	r2, [r3, #8]
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d149      	bne.n	8001012 <HAL_ADC_AnalogWDGConfig+0x22a>
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	689a      	ldr	r2, [r3, #8]
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	4013      	ands	r3, r2
 8000f88:	d140      	bne.n	800100c <HAL_ADC_AnalogWDGConfig+0x224>
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	015b      	lsls	r3, r3, #5
 8000f92:	4013      	ands	r3, r2
 8000f94:	d137      	bne.n	8001006 <HAL_ADC_AnalogWDGConfig+0x21e>
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	019b      	lsls	r3, r3, #6
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	d12e      	bne.n	8001000 <HAL_ADC_AnalogWDGConfig+0x218>
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	01db      	lsls	r3, r3, #7
 8000faa:	4013      	ands	r3, r2
 8000fac:	d125      	bne.n	8000ffa <HAL_ADC_AnalogWDGConfig+0x212>
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d11c      	bne.n	8000ff4 <HAL_ADC_AnalogWDGConfig+0x20c>
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	025b      	lsls	r3, r3, #9
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d113      	bne.n	8000fee <HAL_ADC_AnalogWDGConfig+0x206>
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	029b      	lsls	r3, r3, #10
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d10a      	bne.n	8000fe8 <HAL_ADC_AnalogWDGConfig+0x200>
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	02db      	lsls	r3, r3, #11
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d002      	beq.n	8000fe4 <HAL_ADC_AnalogWDGConfig+0x1fc>
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	02db      	lsls	r3, r3, #11
 8000fe2:	e02e      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e02c      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	029b      	lsls	r3, r3, #10
 8000fec:	e029      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	025b      	lsls	r3, r3, #9
 8000ff2:	e026      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	e023      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	01db      	lsls	r3, r3, #7
 8000ffe:	e020      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	019b      	lsls	r3, r3, #6
 8001004:	e01d      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	015b      	lsls	r3, r3, #5
 800100a:	e01a      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	011b      	lsls	r3, r3, #4
 8001010:	e017      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	e014      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001018:	2380      	movs	r3, #128	; 0x80
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	e011      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	e00e      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	e00c      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001028:	2340      	movs	r3, #64	; 0x40
 800102a:	e00a      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 800102c:	2320      	movs	r3, #32
 800102e:	e008      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001030:	2310      	movs	r3, #16
 8001032:	e006      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001034:	2308      	movs	r3, #8
 8001036:	e004      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001038:	2304      	movs	r3, #4
 800103a:	e002      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 800103c:	2302      	movs	r3, #2
 800103e:	e000      	b.n	8001042 <HAL_ADC_AnalogWDGConfig+0x25a>
 8001040:	2301      	movs	r3, #1
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	430b      	orrs	r3, r1
 8001048:	21a0      	movs	r1, #160	; 0xa0
 800104a:	5053      	str	r3, [r2, r1]
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
          }
          break;
 800104c:	e0d9      	b.n	8001202 <HAL_ADC_AnalogWDGConfig+0x41a>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	22a4      	movs	r2, #164	; 0xa4
 8001054:	5899      	ldr	r1, [r3, r2]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	035b      	lsls	r3, r3, #13
 800105c:	0b5b      	lsrs	r3, r3, #13
 800105e:	d113      	bne.n	8001088 <HAL_ADC_AnalogWDGConfig+0x2a0>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	0e9b      	lsrs	r3, r3, #26
 8001066:	221f      	movs	r2, #31
 8001068:	4013      	ands	r3, r2
 800106a:	2201      	movs	r2, #1
 800106c:	409a      	lsls	r2, r3
 800106e:	0013      	movs	r3, r2
 8001070:	e0af      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	7cc00000 	.word	0x7cc00000
 8001078:	fc07ffff 	.word	0xfc07ffff
 800107c:	0087ffff 	.word	0x0087ffff
 8001080:	fffeffff 	.word	0xfffeffff
 8001084:	0017ffff 	.word	0x0017ffff
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	2201      	movs	r2, #1
 800108e:	4013      	ands	r3, r2
 8001090:	d000      	beq.n	8001094 <HAL_ADC_AnalogWDGConfig+0x2ac>
 8001092:	e09d      	b.n	80011d0 <HAL_ADC_AnalogWDGConfig+0x3e8>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2202      	movs	r2, #2
 800109a:	4013      	ands	r3, r2
 800109c:	d000      	beq.n	80010a0 <HAL_ADC_AnalogWDGConfig+0x2b8>
 800109e:	e095      	b.n	80011cc <HAL_ADC_AnalogWDGConfig+0x3e4>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	2204      	movs	r2, #4
 80010a6:	4013      	ands	r3, r2
 80010a8:	d000      	beq.n	80010ac <HAL_ADC_AnalogWDGConfig+0x2c4>
 80010aa:	e08d      	b.n	80011c8 <HAL_ADC_AnalogWDGConfig+0x3e0>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	2208      	movs	r2, #8
 80010b2:	4013      	ands	r3, r2
 80010b4:	d000      	beq.n	80010b8 <HAL_ADC_AnalogWDGConfig+0x2d0>
 80010b6:	e085      	b.n	80011c4 <HAL_ADC_AnalogWDGConfig+0x3dc>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	2210      	movs	r2, #16
 80010be:	4013      	ands	r3, r2
 80010c0:	d000      	beq.n	80010c4 <HAL_ADC_AnalogWDGConfig+0x2dc>
 80010c2:	e07d      	b.n	80011c0 <HAL_ADC_AnalogWDGConfig+0x3d8>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	2220      	movs	r2, #32
 80010ca:	4013      	ands	r3, r2
 80010cc:	d000      	beq.n	80010d0 <HAL_ADC_AnalogWDGConfig+0x2e8>
 80010ce:	e075      	b.n	80011bc <HAL_ADC_AnalogWDGConfig+0x3d4>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	2240      	movs	r2, #64	; 0x40
 80010d6:	4013      	ands	r3, r2
 80010d8:	d000      	beq.n	80010dc <HAL_ADC_AnalogWDGConfig+0x2f4>
 80010da:	e06d      	b.n	80011b8 <HAL_ADC_AnalogWDGConfig+0x3d0>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	4013      	ands	r3, r2
 80010e4:	d000      	beq.n	80010e8 <HAL_ADC_AnalogWDGConfig+0x300>
 80010e6:	e065      	b.n	80011b4 <HAL_ADC_AnalogWDGConfig+0x3cc>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4013      	ands	r3, r2
 80010f2:	d000      	beq.n	80010f6 <HAL_ADC_AnalogWDGConfig+0x30e>
 80010f4:	e05b      	b.n	80011ae <HAL_ADC_AnalogWDGConfig+0x3c6>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4013      	ands	r3, r2
 8001100:	d152      	bne.n	80011a8 <HAL_ADC_AnalogWDGConfig+0x3c0>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	4013      	ands	r3, r2
 800110c:	d149      	bne.n	80011a2 <HAL_ADC_AnalogWDGConfig+0x3ba>
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	4013      	ands	r3, r2
 8001118:	d140      	bne.n	800119c <HAL_ADC_AnalogWDGConfig+0x3b4>
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	015b      	lsls	r3, r3, #5
 8001122:	4013      	ands	r3, r2
 8001124:	d137      	bne.n	8001196 <HAL_ADC_AnalogWDGConfig+0x3ae>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	019b      	lsls	r3, r3, #6
 800112e:	4013      	ands	r3, r2
 8001130:	d12e      	bne.n	8001190 <HAL_ADC_AnalogWDGConfig+0x3a8>
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	01db      	lsls	r3, r3, #7
 800113a:	4013      	ands	r3, r2
 800113c:	d125      	bne.n	800118a <HAL_ADC_AnalogWDGConfig+0x3a2>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	4013      	ands	r3, r2
 8001148:	d11c      	bne.n	8001184 <HAL_ADC_AnalogWDGConfig+0x39c>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	025b      	lsls	r3, r3, #9
 8001152:	4013      	ands	r3, r2
 8001154:	d113      	bne.n	800117e <HAL_ADC_AnalogWDGConfig+0x396>
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	029b      	lsls	r3, r3, #10
 800115e:	4013      	ands	r3, r2
 8001160:	d10a      	bne.n	8001178 <HAL_ADC_AnalogWDGConfig+0x390>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	02db      	lsls	r3, r3, #11
 800116a:	4013      	ands	r3, r2
 800116c:	d002      	beq.n	8001174 <HAL_ADC_AnalogWDGConfig+0x38c>
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	02db      	lsls	r3, r3, #11
 8001172:	e02e      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001174:	2301      	movs	r3, #1
 8001176:	e02c      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	029b      	lsls	r3, r3, #10
 800117c:	e029      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	025b      	lsls	r3, r3, #9
 8001182:	e026      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	e023      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	01db      	lsls	r3, r3, #7
 800118e:	e020      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	019b      	lsls	r3, r3, #6
 8001194:	e01d      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	015b      	lsls	r3, r3, #5
 800119a:	e01a      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	e017      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	e014      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	e011      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	e00e      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	e00c      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011b8:	2340      	movs	r3, #64	; 0x40
 80011ba:	e00a      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011bc:	2320      	movs	r3, #32
 80011be:	e008      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011c0:	2310      	movs	r3, #16
 80011c2:	e006      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011c4:	2308      	movs	r3, #8
 80011c6:	e004      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011c8:	2304      	movs	r3, #4
 80011ca:	e002      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011cc:	2302      	movs	r3, #2
 80011ce:	e000      	b.n	80011d2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80011d0:	2301      	movs	r3, #1
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	430b      	orrs	r3, r1
 80011d8:	21a4      	movs	r1, #164	; 0xa4
 80011da:	5053      	str	r3, [r2, r1]
          break;
 80011dc:	e011      	b.n	8001202 <HAL_ADC_AnalogWDGConfig+0x41a>
          
        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6818      	ldr	r0, [r3, #0]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a3f      	ldr	r2, [pc, #252]	; (80012e4 <HAL_ADC_AnalogWDGConfig+0x4fc>)
 80011e8:	0019      	movs	r1, r3
 80011ea:	f7ff f939 	bl	8000460 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80011ee:	e008      	b.n	8001202 <HAL_ADC_AnalogWDGConfig+0x41a>
          
        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2200      	movs	r2, #0
 80011fa:	0019      	movs	r1, r3
 80011fc:	f7ff f930 	bl	8000460 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8001200:	46c0      	nop			; (mov r8, r8)
      }
      
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a38      	ldr	r2, [pc, #224]	; (80012e8 <HAL_ADC_AnalogWDGConfig+0x500>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d11a      	bne.n	8001242 <HAL_ADC_AnalogWDGConfig+0x45a>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001210:	4a36      	ldr	r2, [pc, #216]	; (80012ec <HAL_ADC_AnalogWDGConfig+0x504>)
 8001212:	401a      	ands	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	0018      	movs	r0, r3
 800121e:	f7ff f9c6 	bl	80005ae <LL_ADC_ClearFlag_AWD2>
        
        /* Configure ADC analog watchdog interrupt */
        if(AnalogWDGConfig->ITMode == ENABLE)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	7b1b      	ldrb	r3, [r3, #12]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d105      	bne.n	8001236 <HAL_ADC_AnalogWDGConfig+0x44e>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff f9e3 	bl	80005fa <LL_ADC_EnableIT_AWD2>
 8001234:	e01f      	b.n	8001276 <HAL_ADC_AnalogWDGConfig+0x48e>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	0018      	movs	r0, r3
 800123c:	f7ff fa0a 	bl	8000654 <LL_ADC_DisableIT_AWD2>
 8001240:	e019      	b.n	8001276 <HAL_ADC_AnalogWDGConfig+0x48e>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001246:	4a2a      	ldr	r2, [pc, #168]	; (80012f0 <HAL_ADC_AnalogWDGConfig+0x508>)
 8001248:	401a      	ands	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	0018      	movs	r0, r3
 8001254:	f7ff f9b7 	bl	80005c6 <LL_ADC_ClearFlag_AWD3>
        
        /* Configure ADC analog watchdog interrupt */
        if(AnalogWDGConfig->ITMode == ENABLE)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	7b1b      	ldrb	r3, [r3, #12]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d105      	bne.n	800126c <HAL_ADC_AnalogWDGConfig+0x484>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	0018      	movs	r0, r3
 8001266:	f7ff f9d7 	bl	8000618 <LL_ADC_EnableIT_AWD3>
 800126a:	e004      	b.n	8001276 <HAL_ADC_AnalogWDGConfig+0x48e>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	0018      	movs	r0, r3
 8001272:	f7ff f9ff 	bl	8000674 <LL_ADC_DisableIT_AWD3>
    }
    
  }
    
  /* Analog watchdog thresholds configuration */
  if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a1e      	ldr	r2, [pc, #120]	; (80012f4 <HAL_ADC_AnalogWDGConfig+0x50c>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d118      	bne.n	80012b2 <HAL_ADC_AnalogWDGConfig+0x4ca>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */ 
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	08db      	lsrs	r3, r3, #3
 800128c:	2103      	movs	r1, #3
 800128e:	400b      	ands	r3, r1
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	409a      	lsls	r2, r3
 8001294:	0013      	movs	r3, r2
 8001296:	617b      	str	r3, [r7, #20]
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	695a      	ldr	r2, [r3, #20]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	08db      	lsrs	r3, r3, #3
 80012a4:	2103      	movs	r1, #3
 80012a6:	400b      	ands	r3, r1
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	409a      	lsls	r2, r3
 80012ac:	0013      	movs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	e005      	b.n	80012be <HAL_ADC_AnalogWDGConfig+0x4d6>
  else
  {
    /* No need to shift the offset with respect to the selected ADC resolution: */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = AnalogWDGConfig->HighThreshold;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	617b      	str	r3, [r7, #20]
    tmpAWDLowThresholdShifted  = AnalogWDGConfig->LowThreshold;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	613b      	str	r3, [r7, #16]
  }
  
  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	6819      	ldr	r1, [r3, #0]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	f7ff f8f5 	bl	80004b8 <LL_ADC_ConfigAnalogWDThresholds>
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2254      	movs	r2, #84	; 0x54
 80012d2:	2100      	movs	r1, #0
 80012d4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80012d6:	230f      	movs	r3, #15
 80012d8:	18fb      	adds	r3, r7, r3
 80012da:	781b      	ldrb	r3, [r3, #0]
}
 80012dc:	0018      	movs	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	b006      	add	sp, #24
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	0087ffff 	.word	0x0087ffff
 80012e8:	0017ffff 	.word	0x0017ffff
 80012ec:	fffdffff 	.word	0xfffdffff
 80012f0:	fffbffff 	.word	0xfffbffff
 80012f4:	7cc00000 	.word	0x7cc00000

080012f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	0002      	movs	r2, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b7f      	cmp	r3, #127	; 0x7f
 800130c:	d828      	bhi.n	8001360 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800130e:	4a2f      	ldr	r2, [pc, #188]	; (80013cc <__NVIC_SetPriority+0xd4>)
 8001310:	1dfb      	adds	r3, r7, #7
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b25b      	sxtb	r3, r3
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	33c0      	adds	r3, #192	; 0xc0
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	589b      	ldr	r3, [r3, r2]
 800131e:	1dfa      	adds	r2, r7, #7
 8001320:	7812      	ldrb	r2, [r2, #0]
 8001322:	0011      	movs	r1, r2
 8001324:	2203      	movs	r2, #3
 8001326:	400a      	ands	r2, r1
 8001328:	00d2      	lsls	r2, r2, #3
 800132a:	21ff      	movs	r1, #255	; 0xff
 800132c:	4091      	lsls	r1, r2
 800132e:	000a      	movs	r2, r1
 8001330:	43d2      	mvns	r2, r2
 8001332:	401a      	ands	r2, r3
 8001334:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	019b      	lsls	r3, r3, #6
 800133a:	22ff      	movs	r2, #255	; 0xff
 800133c:	401a      	ands	r2, r3
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	0018      	movs	r0, r3
 8001344:	2303      	movs	r3, #3
 8001346:	4003      	ands	r3, r0
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800134c:	481f      	ldr	r0, [pc, #124]	; (80013cc <__NVIC_SetPriority+0xd4>)
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b25b      	sxtb	r3, r3
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	430a      	orrs	r2, r1
 8001358:	33c0      	adds	r3, #192	; 0xc0
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800135e:	e031      	b.n	80013c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001360:	4a1b      	ldr	r2, [pc, #108]	; (80013d0 <__NVIC_SetPriority+0xd8>)
 8001362:	1dfb      	adds	r3, r7, #7
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	0019      	movs	r1, r3
 8001368:	230f      	movs	r3, #15
 800136a:	400b      	ands	r3, r1
 800136c:	3b08      	subs	r3, #8
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3306      	adds	r3, #6
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	18d3      	adds	r3, r2, r3
 8001376:	3304      	adds	r3, #4
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	1dfa      	adds	r2, r7, #7
 800137c:	7812      	ldrb	r2, [r2, #0]
 800137e:	0011      	movs	r1, r2
 8001380:	2203      	movs	r2, #3
 8001382:	400a      	ands	r2, r1
 8001384:	00d2      	lsls	r2, r2, #3
 8001386:	21ff      	movs	r1, #255	; 0xff
 8001388:	4091      	lsls	r1, r2
 800138a:	000a      	movs	r2, r1
 800138c:	43d2      	mvns	r2, r2
 800138e:	401a      	ands	r2, r3
 8001390:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	019b      	lsls	r3, r3, #6
 8001396:	22ff      	movs	r2, #255	; 0xff
 8001398:	401a      	ands	r2, r3
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	0018      	movs	r0, r3
 80013a0:	2303      	movs	r3, #3
 80013a2:	4003      	ands	r3, r0
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a8:	4809      	ldr	r0, [pc, #36]	; (80013d0 <__NVIC_SetPriority+0xd8>)
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	001c      	movs	r4, r3
 80013b0:	230f      	movs	r3, #15
 80013b2:	4023      	ands	r3, r4
 80013b4:	3b08      	subs	r3, #8
 80013b6:	089b      	lsrs	r3, r3, #2
 80013b8:	430a      	orrs	r2, r1
 80013ba:	3306      	adds	r3, #6
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	18c3      	adds	r3, r0, r3
 80013c0:	3304      	adds	r3, #4
 80013c2:	601a      	str	r2, [r3, #0]
}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b003      	add	sp, #12
 80013ca:	bd90      	pop	{r4, r7, pc}
 80013cc:	e000e100 	.word	0xe000e100
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	4a0c      	ldr	r2, [pc, #48]	; (8001414 <SysTick_Config+0x40>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d901      	bls.n	80013ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e6:	2301      	movs	r3, #1
 80013e8:	e010      	b.n	800140c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <SysTick_Config+0x44>)
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	3a01      	subs	r2, #1
 80013f0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f2:	2301      	movs	r3, #1
 80013f4:	425b      	negs	r3, r3
 80013f6:	2103      	movs	r1, #3
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7ff ff7d 	bl	80012f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <SysTick_Config+0x44>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <SysTick_Config+0x44>)
 8001406:	2207      	movs	r2, #7
 8001408:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140a:	2300      	movs	r3, #0
}
 800140c:	0018      	movs	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	b002      	add	sp, #8
 8001412:	bd80      	pop	{r7, pc}
 8001414:	00ffffff 	.word	0x00ffffff
 8001418:	e000e010 	.word	0xe000e010

0800141c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	210f      	movs	r1, #15
 8001428:	187b      	adds	r3, r7, r1
 800142a:	1c02      	adds	r2, r0, #0
 800142c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	187b      	adds	r3, r7, r1
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b25b      	sxtb	r3, r3
 8001436:	0011      	movs	r1, r2
 8001438:	0018      	movs	r0, r3
 800143a:	f7ff ff5d 	bl	80012f8 <__NVIC_SetPriority>
}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	b004      	add	sp, #16
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	0018      	movs	r0, r3
 8001452:	f7ff ffbf 	bl	80013d4 <SysTick_Config>
 8001456:	0003      	movs	r3, r0
}
 8001458:	0018      	movs	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	b002      	add	sp, #8
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800146e:	e147      	b.n	8001700 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2101      	movs	r1, #1
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4091      	lsls	r1, r2
 800147a:	000a      	movs	r2, r1
 800147c:	4013      	ands	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d100      	bne.n	8001488 <HAL_GPIO_Init+0x28>
 8001486:	e138      	b.n	80016fa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x38>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b12      	cmp	r3, #18
 8001496:	d123      	bne.n	80014e0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	08da      	lsrs	r2, r3, #3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3208      	adds	r2, #8
 80014a0:	0092      	lsls	r2, r2, #2
 80014a2:	58d3      	ldr	r3, [r2, r3]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2207      	movs	r2, #7
 80014aa:	4013      	ands	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	220f      	movs	r2, #15
 80014b0:	409a      	lsls	r2, r3
 80014b2:	0013      	movs	r3, r2
 80014b4:	43da      	mvns	r2, r3
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	691a      	ldr	r2, [r3, #16]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	2107      	movs	r1, #7
 80014c4:	400b      	ands	r3, r1
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	409a      	lsls	r2, r3
 80014ca:	0013      	movs	r3, r2
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	08da      	lsrs	r2, r3, #3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3208      	adds	r2, #8
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	6939      	ldr	r1, [r7, #16]
 80014de:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	2203      	movs	r2, #3
 80014ec:	409a      	lsls	r2, r3
 80014ee:	0013      	movs	r3, r2
 80014f0:	43da      	mvns	r2, r3
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2203      	movs	r2, #3
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	409a      	lsls	r2, r3
 8001506:	0013      	movs	r3, r2
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d00b      	beq.n	8001534 <HAL_GPIO_Init+0xd4>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d007      	beq.n	8001534 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001528:	2b11      	cmp	r3, #17
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b12      	cmp	r3, #18
 8001532:	d130      	bne.n	8001596 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	409a      	lsls	r2, r3
 8001542:	0013      	movs	r3, r2
 8001544:	43da      	mvns	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	409a      	lsls	r2, r3
 8001556:	0013      	movs	r3, r2
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800156a:	2201      	movs	r2, #1
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	409a      	lsls	r2, r3
 8001570:	0013      	movs	r3, r2
 8001572:	43da      	mvns	r2, r3
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	091b      	lsrs	r3, r3, #4
 8001580:	2201      	movs	r2, #1
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
 8001588:	0013      	movs	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	409a      	lsls	r2, r3
 80015a4:	0013      	movs	r3, r2
 80015a6:	43da      	mvns	r2, r3
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	409a      	lsls	r2, r3
 80015b8:	0013      	movs	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	055b      	lsls	r3, r3, #21
 80015ce:	4013      	ands	r3, r2
 80015d0:	d100      	bne.n	80015d4 <HAL_GPIO_Init+0x174>
 80015d2:	e092      	b.n	80016fa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80015d4:	4a50      	ldr	r2, [pc, #320]	; (8001718 <HAL_GPIO_Init+0x2b8>)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	089b      	lsrs	r3, r3, #2
 80015da:	3318      	adds	r3, #24
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	589b      	ldr	r3, [r3, r2]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2203      	movs	r2, #3
 80015e6:	4013      	ands	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	220f      	movs	r2, #15
 80015ec:	409a      	lsls	r2, r3
 80015ee:	0013      	movs	r3, r2
 80015f0:	43da      	mvns	r2, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	23a0      	movs	r3, #160	; 0xa0
 80015fc:	05db      	lsls	r3, r3, #23
 80015fe:	429a      	cmp	r2, r3
 8001600:	d013      	beq.n	800162a <HAL_GPIO_Init+0x1ca>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a45      	ldr	r2, [pc, #276]	; (800171c <HAL_GPIO_Init+0x2bc>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d00d      	beq.n	8001626 <HAL_GPIO_Init+0x1c6>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a44      	ldr	r2, [pc, #272]	; (8001720 <HAL_GPIO_Init+0x2c0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d007      	beq.n	8001622 <HAL_GPIO_Init+0x1c2>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a43      	ldr	r2, [pc, #268]	; (8001724 <HAL_GPIO_Init+0x2c4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d101      	bne.n	800161e <HAL_GPIO_Init+0x1be>
 800161a:	2303      	movs	r3, #3
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x1cc>
 800161e:	2305      	movs	r3, #5
 8001620:	e004      	b.n	800162c <HAL_GPIO_Init+0x1cc>
 8001622:	2302      	movs	r3, #2
 8001624:	e002      	b.n	800162c <HAL_GPIO_Init+0x1cc>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_GPIO_Init+0x1cc>
 800162a:	2300      	movs	r3, #0
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	2103      	movs	r1, #3
 8001630:	400a      	ands	r2, r1
 8001632:	00d2      	lsls	r2, r2, #3
 8001634:	4093      	lsls	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800163c:	4936      	ldr	r1, [pc, #216]	; (8001718 <HAL_GPIO_Init+0x2b8>)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3318      	adds	r3, #24
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164a:	4a33      	ldr	r2, [pc, #204]	; (8001718 <HAL_GPIO_Init+0x2b8>)
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	58d3      	ldr	r3, [r2, r3]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43da      	mvns	r2, r3
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	025b      	lsls	r3, r3, #9
 8001664:	4013      	ands	r3, r2
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4929      	ldr	r1, [pc, #164]	; (8001718 <HAL_GPIO_Init+0x2b8>)
 8001672:	2280      	movs	r2, #128	; 0x80
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001678:	4a27      	ldr	r2, [pc, #156]	; (8001718 <HAL_GPIO_Init+0x2b8>)
 800167a:	2384      	movs	r3, #132	; 0x84
 800167c:	58d3      	ldr	r3, [r2, r3]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43da      	mvns	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	029b      	lsls	r3, r3, #10
 8001692:	4013      	ands	r3, r2
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169e:	491e      	ldr	r1, [pc, #120]	; (8001718 <HAL_GPIO_Init+0x2b8>)
 80016a0:	2284      	movs	r2, #132	; 0x84
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <HAL_GPIO_Init+0x2b8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	43da      	mvns	r2, r3
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	035b      	lsls	r3, r3, #13
 80016be:	4013      	ands	r3, r2
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <HAL_GPIO_Init+0x2b8>)
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_GPIO_Init+0x2b8>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43da      	mvns	r2, r3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	039b      	lsls	r3, r3, #14
 80016e8:	4013      	ands	r3, r2
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <HAL_GPIO_Init+0x2b8>)
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	40da      	lsrs	r2, r3
 8001708:	1e13      	subs	r3, r2, #0
 800170a:	d000      	beq.n	800170e <HAL_GPIO_Init+0x2ae>
 800170c:	e6b0      	b.n	8001470 <HAL_GPIO_Init+0x10>
  }
}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	b006      	add	sp, #24
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	40021800 	.word	0x40021800
 800171c:	50000400 	.word	0x50000400
 8001720:	50000800 	.word	0x50000800
 8001724:	50000c00 	.word	0x50000c00

08001728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	0008      	movs	r0, r1
 8001732:	0011      	movs	r1, r2
 8001734:	1cbb      	adds	r3, r7, #2
 8001736:	1c02      	adds	r2, r0, #0
 8001738:	801a      	strh	r2, [r3, #0]
 800173a:	1c7b      	adds	r3, r7, #1
 800173c:	1c0a      	adds	r2, r1, #0
 800173e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001740:	1c7b      	adds	r3, r7, #1
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001748:	1cbb      	adds	r3, r7, #2
 800174a:	881a      	ldrh	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001750:	e003      	b.n	800175a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001752:	1cbb      	adds	r3, r7, #2
 8001754:	881a      	ldrh	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	46bd      	mov	sp, r7
 800175e:	b002      	add	sp, #8
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e07f      	b.n	8001876 <HAL_LPTIM_Init+0x112>
  }  
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));  
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  
  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2236      	movs	r2, #54	; 0x36
 800177a:	5c9b      	ldrb	r3, [r3, r2]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d107      	bne.n	8001792 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2235      	movs	r2, #53	; 0x35
 8001786:	2100      	movs	r1, #0
 8001788:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	0018      	movs	r0, r3
 800178e:	f001 fa99 	bl	8002cc4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }
  
  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2236      	movs	r2, #54	; 0x36
 8001796:	2102      	movs	r1, #2
 8001798:	5499      	strb	r1, [r3, r2]
  
  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60fb      	str	r3, [r7, #12]
  
  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d005      	beq.n	80017b6 <HAL_LPTIM_Init+0x52>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	041b      	lsls	r3, r3, #16
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d103      	bne.n	80017be <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	221e      	movs	r2, #30
 80017ba:	4393      	bics	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	4a2f      	ldr	r2, [pc, #188]	; (8001880 <HAL_LPTIM_Init+0x11c>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d003      	beq.n	80017d0 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4a2e      	ldr	r2, [pc, #184]	; (8001884 <HAL_LPTIM_Init+0x120>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]
  }
    
  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4a2d      	ldr	r2, [pc, #180]	; (8001888 <HAL_LPTIM_Init+0x124>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));
  
  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80017e0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80017e6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80017ec:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80017f2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
  
  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d005      	beq.n	800180e <HAL_LPTIM_Init+0xaa>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	041b      	lsls	r3, r3, #16
 800180a:	429a      	cmp	r2, r3
 800180c:	d107      	bne.n	800181e <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8001816:	4313      	orrs	r3, r2
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
  } 
  
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	4a17      	ldr	r2, [pc, #92]	; (8001880 <HAL_LPTIM_Init+0x11c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d00a      	beq.n	800183e <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001830:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001836:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a10      	ldr	r2, [pc, #64]	; (800188c <HAL_LPTIM_Init+0x128>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d108      	bne.n	8001862 <HAL_LPTIM_Init+0xfe>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));
    
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	625a      	str	r2, [r3, #36]	; 0x24
 8001860:	e004      	b.n	800186c <HAL_LPTIM_Init+0x108>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    
    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800186a:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2236      	movs	r2, #54	; 0x36
 8001870:	2101      	movs	r1, #1
 8001872:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	0018      	movs	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	b004      	add	sp, #16
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	0000ffff 	.word	0x0000ffff
 8001884:	ffff1f3f 	.word	0xffff1f3f
 8001888:	ff19f1f8 	.word	0xff19f1f8
 800188c:	40007c00 	.word	0x40007c00

08001890 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a19      	ldr	r2, [pc, #100]	; (8001904 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800189e:	4013      	ands	r3, r2
 80018a0:	0019      	movs	r1, r3
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d11f      	bne.n	80018f4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	0013      	movs	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	189b      	adds	r3, r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4912      	ldr	r1, [pc, #72]	; (800190c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80018c2:	0018      	movs	r0, r3
 80018c4:	f7fe fc1e 	bl	8000104 <__udivsi3>
 80018c8:	0003      	movs	r3, r0
 80018ca:	3301      	adds	r3, #1
 80018cc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018ce:	e008      	b.n	80018e2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3b01      	subs	r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	e001      	b.n	80018e2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e009      	b.n	80018f6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	401a      	ands	r2, r3
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d0ed      	beq.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	0018      	movs	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b004      	add	sp, #16
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	40007000 	.word	0x40007000
 8001904:	fffff9ff 	.word	0xfffff9ff
 8001908:	20000008 	.word	0x20000008
 800190c:	000f4240 	.word	0x000f4240

08001910 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e304      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2201      	movs	r2, #1
 8001928:	4013      	ands	r3, r2
 800192a:	d100      	bne.n	800192e <HAL_RCC_OscConfig+0x1e>
 800192c:	e07c      	b.n	8001a28 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800192e:	4bc3      	ldr	r3, [pc, #780]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2238      	movs	r2, #56	; 0x38
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001938:	4bc0      	ldr	r3, [pc, #768]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	2203      	movs	r2, #3
 800193e:	4013      	ands	r3, r2
 8001940:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	2b10      	cmp	r3, #16
 8001946:	d102      	bne.n	800194e <HAL_RCC_OscConfig+0x3e>
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2b03      	cmp	r3, #3
 800194c:	d002      	beq.n	8001954 <HAL_RCC_OscConfig+0x44>
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	2b08      	cmp	r3, #8
 8001952:	d10b      	bne.n	800196c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	4bb9      	ldr	r3, [pc, #740]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	029b      	lsls	r3, r3, #10
 800195c:	4013      	ands	r3, r2
 800195e:	d062      	beq.n	8001a26 <HAL_RCC_OscConfig+0x116>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d15e      	bne.n	8001a26 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e2df      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	025b      	lsls	r3, r3, #9
 8001974:	429a      	cmp	r2, r3
 8001976:	d107      	bne.n	8001988 <HAL_RCC_OscConfig+0x78>
 8001978:	4bb0      	ldr	r3, [pc, #704]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4baf      	ldr	r3, [pc, #700]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 800197e:	2180      	movs	r1, #128	; 0x80
 8001980:	0249      	lsls	r1, r1, #9
 8001982:	430a      	orrs	r2, r1
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	e020      	b.n	80019ca <HAL_RCC_OscConfig+0xba>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	23a0      	movs	r3, #160	; 0xa0
 800198e:	02db      	lsls	r3, r3, #11
 8001990:	429a      	cmp	r2, r3
 8001992:	d10e      	bne.n	80019b2 <HAL_RCC_OscConfig+0xa2>
 8001994:	4ba9      	ldr	r3, [pc, #676]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4ba8      	ldr	r3, [pc, #672]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 800199a:	2180      	movs	r1, #128	; 0x80
 800199c:	02c9      	lsls	r1, r1, #11
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	4ba6      	ldr	r3, [pc, #664]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4ba5      	ldr	r3, [pc, #660]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 80019a8:	2180      	movs	r1, #128	; 0x80
 80019aa:	0249      	lsls	r1, r1, #9
 80019ac:	430a      	orrs	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	e00b      	b.n	80019ca <HAL_RCC_OscConfig+0xba>
 80019b2:	4ba2      	ldr	r3, [pc, #648]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4ba1      	ldr	r3, [pc, #644]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 80019b8:	49a1      	ldr	r1, [pc, #644]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 80019ba:	400a      	ands	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	4b9f      	ldr	r3, [pc, #636]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4b9e      	ldr	r3, [pc, #632]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 80019c4:	499f      	ldr	r1, [pc, #636]	; (8001c44 <HAL_RCC_OscConfig+0x334>)
 80019c6:	400a      	ands	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d014      	beq.n	80019fc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d2:	f7fe fc9d 	bl	8000310 <HAL_GetTick>
 80019d6:	0003      	movs	r3, r0
 80019d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019dc:	f7fe fc98 	bl	8000310 <HAL_GetTick>
 80019e0:	0002      	movs	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b64      	cmp	r3, #100	; 0x64
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e29e      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ee:	4b93      	ldr	r3, [pc, #588]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	029b      	lsls	r3, r3, #10
 80019f6:	4013      	ands	r3, r2
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0xcc>
 80019fa:	e015      	b.n	8001a28 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7fe fc88 	bl	8000310 <HAL_GetTick>
 8001a00:	0003      	movs	r3, r0
 8001a02:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a06:	f7fe fc83 	bl	8000310 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b64      	cmp	r3, #100	; 0x64
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e289      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a18:	4b88      	ldr	r3, [pc, #544]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	029b      	lsls	r3, r3, #10
 8001a20:	4013      	ands	r3, r2
 8001a22:	d1f0      	bne.n	8001a06 <HAL_RCC_OscConfig+0xf6>
 8001a24:	e000      	b.n	8001a28 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a26:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d100      	bne.n	8001a34 <HAL_RCC_OscConfig+0x124>
 8001a32:	e099      	b.n	8001b68 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a34:	4b81      	ldr	r3, [pc, #516]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2238      	movs	r2, #56	; 0x38
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a3e:	4b7f      	ldr	r3, [pc, #508]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2203      	movs	r2, #3
 8001a44:	4013      	ands	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2b10      	cmp	r3, #16
 8001a4c:	d102      	bne.n	8001a54 <HAL_RCC_OscConfig+0x144>
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d002      	beq.n	8001a5a <HAL_RCC_OscConfig+0x14a>
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d135      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a5a:	4b78      	ldr	r3, [pc, #480]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4013      	ands	r3, r2
 8001a64:	d005      	beq.n	8001a72 <HAL_RCC_OscConfig+0x162>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e25c      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a72:	4b72      	ldr	r3, [pc, #456]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4a74      	ldr	r2, [pc, #464]	; (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	021a      	lsls	r2, r3, #8
 8001a82:	4b6e      	ldr	r3, [pc, #440]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001a84:	430a      	orrs	r2, r1
 8001a86:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d112      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a8e:	4b6b      	ldr	r3, [pc, #428]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a6e      	ldr	r2, [pc, #440]	; (8001c4c <HAL_RCC_OscConfig+0x33c>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	0019      	movs	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	4b67      	ldr	r3, [pc, #412]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001aa2:	4b66      	ldr	r3, [pc, #408]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	0adb      	lsrs	r3, r3, #11
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	4013      	ands	r3, r2
 8001aac:	4a68      	ldr	r2, [pc, #416]	; (8001c50 <HAL_RCC_OscConfig+0x340>)
 8001aae:	40da      	lsrs	r2, r3
 8001ab0:	4b68      	ldr	r3, [pc, #416]	; (8001c54 <HAL_RCC_OscConfig+0x344>)
 8001ab2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b68      	ldr	r3, [pc, #416]	; (8001c58 <HAL_RCC_OscConfig+0x348>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f7fe fbcf 	bl	800025c <HAL_InitTick>
 8001abe:	1e03      	subs	r3, r0, #0
 8001ac0:	d051      	beq.n	8001b66 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e232      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d030      	beq.n	8001b30 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ace:	4b5b      	ldr	r3, [pc, #364]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a5e      	ldr	r2, [pc, #376]	; (8001c4c <HAL_RCC_OscConfig+0x33c>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	4b57      	ldr	r3, [pc, #348]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ae2:	4b56      	ldr	r3, [pc, #344]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b55      	ldr	r3, [pc, #340]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001ae8:	2180      	movs	r1, #128	; 0x80
 8001aea:	0049      	lsls	r1, r1, #1
 8001aec:	430a      	orrs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7fe fc0e 	bl	8000310 <HAL_GetTick>
 8001af4:	0003      	movs	r3, r0
 8001af6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afa:	f7fe fc09 	bl	8000310 <HAL_GetTick>
 8001afe:	0002      	movs	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e20f      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b0c:	4b4b      	ldr	r3, [pc, #300]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4013      	ands	r3, r2
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b18:	4b48      	ldr	r3, [pc, #288]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4a4a      	ldr	r2, [pc, #296]	; (8001c48 <HAL_RCC_OscConfig+0x338>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	0019      	movs	r1, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	021a      	lsls	r2, r3, #8
 8001b28:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	e01b      	b.n	8001b68 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001b30:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001b36:	4949      	ldr	r1, [pc, #292]	; (8001c5c <HAL_RCC_OscConfig+0x34c>)
 8001b38:	400a      	ands	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7fe fbe8 	bl	8000310 <HAL_GetTick>
 8001b40:	0003      	movs	r3, r0
 8001b42:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b46:	f7fe fbe3 	bl	8000310 <HAL_GetTick>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e1e9      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b58:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4013      	ands	r3, r2
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x236>
 8001b64:	e000      	b.n	8001b68 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b66:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d047      	beq.n	8001c02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001b72:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2238      	movs	r2, #56	; 0x38
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b18      	cmp	r3, #24
 8001b7c:	d10a      	bne.n	8001b94 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b7e:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b82:	2202      	movs	r2, #2
 8001b84:	4013      	ands	r3, r2
 8001b86:	d03c      	beq.n	8001c02 <HAL_RCC_OscConfig+0x2f2>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d138      	bne.n	8001c02 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e1cb      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d019      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b9c:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001b9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ba0:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7fe fbb2 	bl	8000310 <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb2:	f7fe fbad 	bl	8000310 <HAL_GetTick>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e1b3      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc8:	2202      	movs	r2, #2
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d0f1      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x2a2>
 8001bce:	e018      	b.n	8001c02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001bd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	438a      	bics	r2, r1
 8001bda:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7fe fb98 	bl	8000310 <HAL_GetTick>
 8001be0:	0003      	movs	r3, r0
 8001be2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be6:	f7fe fb93 	bl	8000310 <HAL_GetTick>
 8001bea:	0002      	movs	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e199      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d1f1      	bne.n	8001be6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2204      	movs	r2, #4
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d100      	bne.n	8001c0e <HAL_RCC_OscConfig+0x2fe>
 8001c0c:	e0c6      	b.n	8001d9c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0e:	231f      	movs	r3, #31
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2238      	movs	r2, #56	; 0x38
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	d11e      	bne.n	8001c60 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_RCC_OscConfig+0x32c>)
 8001c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c26:	2202      	movs	r2, #2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d100      	bne.n	8001c2e <HAL_RCC_OscConfig+0x31e>
 8001c2c:	e0b6      	b.n	8001d9c <HAL_RCC_OscConfig+0x48c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d000      	beq.n	8001c38 <HAL_RCC_OscConfig+0x328>
 8001c36:	e0b1      	b.n	8001d9c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e177      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	fffeffff 	.word	0xfffeffff
 8001c44:	fffbffff 	.word	0xfffbffff
 8001c48:	ffff80ff 	.word	0xffff80ff
 8001c4c:	ffffc7ff 	.word	0xffffc7ff
 8001c50:	00f42400 	.word	0x00f42400
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c60:	4bb4      	ldr	r3, [pc, #720]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001c62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	055b      	lsls	r3, r3, #21
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_OscConfig+0x360>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <HAL_RCC_OscConfig+0x362>
 8001c70:	2300      	movs	r3, #0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d011      	beq.n	8001c9a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	4baf      	ldr	r3, [pc, #700]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001c78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c7a:	4bae      	ldr	r3, [pc, #696]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001c7c:	2180      	movs	r1, #128	; 0x80
 8001c7e:	0549      	lsls	r1, r1, #21
 8001c80:	430a      	orrs	r2, r1
 8001c82:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c84:	4bab      	ldr	r3, [pc, #684]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	055b      	lsls	r3, r3, #21
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c92:	231f      	movs	r3, #31
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9a:	4ba7      	ldr	r3, [pc, #668]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d11a      	bne.n	8001cdc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ca6:	4ba4      	ldr	r3, [pc, #656]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4ba3      	ldr	r3, [pc, #652]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001cac:	2180      	movs	r1, #128	; 0x80
 8001cae:	0049      	lsls	r1, r1, #1
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001cb4:	f7fe fb2c 	bl	8000310 <HAL_GetTick>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbe:	f7fe fb27 	bl	8000310 <HAL_GetTick>
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e12d      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd0:	4b99      	ldr	r3, [pc, #612]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x3e2>
 8001ce4:	4b93      	ldr	r3, [pc, #588]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001ce6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ce8:	4b92      	ldr	r3, [pc, #584]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001cea:	2101      	movs	r1, #1
 8001cec:	430a      	orrs	r2, r1
 8001cee:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cf0:	e01c      	b.n	8001d2c <HAL_RCC_OscConfig+0x41c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b05      	cmp	r3, #5
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x404>
 8001cfa:	4b8e      	ldr	r3, [pc, #568]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001cfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cfe:	4b8d      	ldr	r3, [pc, #564]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001d00:	2104      	movs	r1, #4
 8001d02:	430a      	orrs	r2, r1
 8001d04:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d06:	4b8b      	ldr	r3, [pc, #556]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001d08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d0a:	4b8a      	ldr	r3, [pc, #552]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0x41c>
 8001d14:	4b87      	ldr	r3, [pc, #540]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001d16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d18:	4b86      	ldr	r3, [pc, #536]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	438a      	bics	r2, r1
 8001d1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d20:	4b84      	ldr	r3, [pc, #528]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001d22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d24:	4b83      	ldr	r3, [pc, #524]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001d26:	2104      	movs	r1, #4
 8001d28:	438a      	bics	r2, r1
 8001d2a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d014      	beq.n	8001d5e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7fe faec 	bl	8000310 <HAL_GetTick>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3c:	e009      	b.n	8001d52 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3e:	f7fe fae7 	bl	8000310 <HAL_GetTick>
 8001d42:	0002      	movs	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	4a7c      	ldr	r2, [pc, #496]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e0ec      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d52:	4b78      	ldr	r3, [pc, #480]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d56:	2202      	movs	r2, #2
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x42e>
 8001d5c:	e013      	b.n	8001d86 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5e:	f7fe fad7 	bl	8000310 <HAL_GetTick>
 8001d62:	0003      	movs	r3, r0
 8001d64:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d66:	e009      	b.n	8001d7c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d68:	f7fe fad2 	bl	8000310 <HAL_GetTick>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	4a72      	ldr	r2, [pc, #456]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e0d7      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d7c:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d80:	2202      	movs	r2, #2
 8001d82:	4013      	ands	r3, r2
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d86:	231f      	movs	r3, #31
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d90:	4b68      	ldr	r3, [pc, #416]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001d92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d94:	4b67      	ldr	r3, [pc, #412]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001d96:	496a      	ldr	r1, [pc, #424]	; (8001f40 <HAL_RCC_OscConfig+0x630>)
 8001d98:	400a      	ands	r2, r1
 8001d9a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d100      	bne.n	8001da6 <HAL_RCC_OscConfig+0x496>
 8001da4:	e0c1      	b.n	8001f2a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001da6:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2238      	movs	r2, #56	; 0x38
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d100      	bne.n	8001db4 <HAL_RCC_OscConfig+0x4a4>
 8001db2:	e081      	b.n	8001eb8 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d156      	bne.n	8001e6a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbc:	4b5d      	ldr	r3, [pc, #372]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b5c      	ldr	r3, [pc, #368]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001dc2:	4960      	ldr	r1, [pc, #384]	; (8001f44 <HAL_RCC_OscConfig+0x634>)
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7fe faa2 	bl	8000310 <HAL_GetTick>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7fe fa9d 	bl	8000310 <HAL_GetTick>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e0a3      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de4:	4b53      	ldr	r3, [pc, #332]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	049b      	lsls	r3, r3, #18
 8001dec:	4013      	ands	r3, r2
 8001dee:	d1f0      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df0:	4b50      	ldr	r3, [pc, #320]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4a54      	ldr	r2, [pc, #336]	; (8001f48 <HAL_RCC_OscConfig+0x638>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	0019      	movs	r1, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1a      	ldr	r2, [r3, #32]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	021b      	lsls	r3, r3, #8
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	4b45      	ldr	r3, [pc, #276]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001e20:	430a      	orrs	r2, r1
 8001e22:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e24:	4b43      	ldr	r3, [pc, #268]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b42      	ldr	r3, [pc, #264]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001e2a:	2180      	movs	r1, #128	; 0x80
 8001e2c:	0449      	lsls	r1, r1, #17
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001e32:	4b40      	ldr	r3, [pc, #256]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	4b3f      	ldr	r3, [pc, #252]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	0549      	lsls	r1, r1, #21
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7fe fa66 	bl	8000310 <HAL_GetTick>
 8001e44:	0003      	movs	r3, r0
 8001e46:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4a:	f7fe fa61 	bl	8000310 <HAL_GetTick>
 8001e4e:	0002      	movs	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e067      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5c:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	049b      	lsls	r3, r3, #18
 8001e64:	4013      	ands	r3, r2
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x53a>
 8001e68:	e05f      	b.n	8001f2a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6a:	4b32      	ldr	r3, [pc, #200]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001e70:	4934      	ldr	r1, [pc, #208]	; (8001f44 <HAL_RCC_OscConfig+0x634>)
 8001e72:	400a      	ands	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001e76:	4b2f      	ldr	r3, [pc, #188]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001e7c:	2103      	movs	r1, #3
 8001e7e:	438a      	bics	r2, r1
 8001e80:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001e82:	4b2c      	ldr	r3, [pc, #176]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001e88:	4930      	ldr	r1, [pc, #192]	; (8001f4c <HAL_RCC_OscConfig+0x63c>)
 8001e8a:	400a      	ands	r2, r1
 8001e8c:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7fe fa3f 	bl	8000310 <HAL_GetTick>
 8001e92:	0003      	movs	r3, r0
 8001e94:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e98:	f7fe fa3a 	bl	8000310 <HAL_GetTick>
 8001e9c:	0002      	movs	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e040      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eaa:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	049b      	lsls	r3, r3, #18
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x588>
 8001eb6:	e038      	b.n	8001f2a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e033      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_RCC_OscConfig+0x624>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2203      	movs	r2, #3
 8001ece:	401a      	ands	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d126      	bne.n	8001f26 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2270      	movs	r2, #112	; 0x70
 8001edc:	401a      	ands	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d11f      	bne.n	8001f26 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	23fe      	movs	r3, #254	; 0xfe
 8001eea:	01db      	lsls	r3, r3, #7
 8001eec:	401a      	ands	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d116      	bne.n	8001f26 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	23f8      	movs	r3, #248	; 0xf8
 8001efc:	039b      	lsls	r3, r3, #14
 8001efe:	401a      	ands	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d10e      	bne.n	8001f26 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	23e0      	movs	r3, #224	; 0xe0
 8001f0c:	051b      	lsls	r3, r3, #20
 8001f0e:	401a      	ands	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d106      	bne.n	8001f26 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	0f5b      	lsrs	r3, r3, #29
 8001f1c:	075a      	lsls	r2, r3, #29
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d001      	beq.n	8001f2a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b008      	add	sp, #32
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40007000 	.word	0x40007000
 8001f3c:	00001388 	.word	0x00001388
 8001f40:	efffffff 	.word	0xefffffff
 8001f44:	feffffff 	.word	0xfeffffff
 8001f48:	11c1808c 	.word	0x11c1808c
 8001f4c:	eefeffff 	.word	0xeefeffff

08001f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0e9      	b.n	8002138 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f64:	4b76      	ldr	r3, [pc, #472]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2207      	movs	r2, #7
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d91e      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b73      	ldr	r3, [pc, #460]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2207      	movs	r2, #7
 8001f78:	4393      	bics	r3, r2
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	4b70      	ldr	r3, [pc, #448]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f84:	f7fe f9c4 	bl	8000310 <HAL_GetTick>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f8c:	e009      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8e:	f7fe f9bf 	bl	8000310 <HAL_GetTick>
 8001f92:	0002      	movs	r2, r0
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	4a6a      	ldr	r2, [pc, #424]	; (8002144 <HAL_RCC_ClockConfig+0x1f4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e0ca      	b.n	8002138 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fa2:	4b67      	ldr	r3, [pc, #412]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2207      	movs	r2, #7
 8001fa8:	4013      	ands	r3, r2
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d1ee      	bne.n	8001f8e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d015      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d006      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fc4:	4b60      	ldr	r3, [pc, #384]	; (8002148 <HAL_RCC_ClockConfig+0x1f8>)
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	4b5f      	ldr	r3, [pc, #380]	; (8002148 <HAL_RCC_ClockConfig+0x1f8>)
 8001fca:	21e0      	movs	r1, #224	; 0xe0
 8001fcc:	01c9      	lsls	r1, r1, #7
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	; (8002148 <HAL_RCC_ClockConfig+0x1f8>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	4a5d      	ldr	r2, [pc, #372]	; (800214c <HAL_RCC_ClockConfig+0x1fc>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	0019      	movs	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	4b59      	ldr	r3, [pc, #356]	; (8002148 <HAL_RCC_ClockConfig+0x1f8>)
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2201      	movs	r2, #1
 8001fec:	4013      	ands	r3, r2
 8001fee:	d057      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d107      	bne.n	8002008 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff8:	4b53      	ldr	r3, [pc, #332]	; (8002148 <HAL_RCC_ClockConfig+0x1f8>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	029b      	lsls	r3, r3, #10
 8002000:	4013      	ands	r3, r2
 8002002:	d12b      	bne.n	800205c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e097      	b.n	8002138 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d107      	bne.n	8002020 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002010:	4b4d      	ldr	r3, [pc, #308]	; (8002148 <HAL_RCC_ClockConfig+0x1f8>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	049b      	lsls	r3, r3, #18
 8002018:	4013      	ands	r3, r2
 800201a:	d11f      	bne.n	800205c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e08b      	b.n	8002138 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d107      	bne.n	8002038 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002028:	4b47      	ldr	r3, [pc, #284]	; (8002148 <HAL_RCC_ClockConfig+0x1f8>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4013      	ands	r3, r2
 8002032:	d113      	bne.n	800205c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e07f      	b.n	8002138 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b03      	cmp	r3, #3
 800203e:	d106      	bne.n	800204e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002040:	4b41      	ldr	r3, [pc, #260]	; (8002148 <HAL_RCC_ClockConfig+0x1f8>)
 8002042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002044:	2202      	movs	r2, #2
 8002046:	4013      	ands	r3, r2
 8002048:	d108      	bne.n	800205c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e074      	b.n	8002138 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800204e:	4b3e      	ldr	r3, [pc, #248]	; (8002148 <HAL_RCC_ClockConfig+0x1f8>)
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	2202      	movs	r2, #2
 8002054:	4013      	ands	r3, r2
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e06d      	b.n	8002138 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800205c:	4b3a      	ldr	r3, [pc, #232]	; (8002148 <HAL_RCC_ClockConfig+0x1f8>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2207      	movs	r2, #7
 8002062:	4393      	bics	r3, r2
 8002064:	0019      	movs	r1, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	4b37      	ldr	r3, [pc, #220]	; (8002148 <HAL_RCC_ClockConfig+0x1f8>)
 800206c:	430a      	orrs	r2, r1
 800206e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002070:	f7fe f94e 	bl	8000310 <HAL_GetTick>
 8002074:	0003      	movs	r3, r0
 8002076:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002078:	e009      	b.n	800208e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207a:	f7fe f949 	bl	8000310 <HAL_GetTick>
 800207e:	0002      	movs	r2, r0
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	4a2f      	ldr	r2, [pc, #188]	; (8002144 <HAL_RCC_ClockConfig+0x1f4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e054      	b.n	8002138 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	4b2e      	ldr	r3, [pc, #184]	; (8002148 <HAL_RCC_ClockConfig+0x1f8>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2238      	movs	r2, #56	; 0x38
 8002094:	401a      	ands	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	429a      	cmp	r2, r3
 800209e:	d1ec      	bne.n	800207a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2207      	movs	r2, #7
 80020a6:	4013      	ands	r3, r2
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d21e      	bcs.n	80020ec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b24      	ldr	r3, [pc, #144]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2207      	movs	r2, #7
 80020b4:	4393      	bics	r3, r2
 80020b6:	0019      	movs	r1, r3
 80020b8:	4b21      	ldr	r3, [pc, #132]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020c0:	f7fe f926 	bl	8000310 <HAL_GetTick>
 80020c4:	0003      	movs	r3, r0
 80020c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020c8:	e009      	b.n	80020de <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ca:	f7fe f921 	bl	8000310 <HAL_GetTick>
 80020ce:	0002      	movs	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	4a1b      	ldr	r2, [pc, #108]	; (8002144 <HAL_RCC_ClockConfig+0x1f4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e02c      	b.n	8002138 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020de:	4b18      	ldr	r3, [pc, #96]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2207      	movs	r2, #7
 80020e4:	4013      	ands	r3, r2
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d1ee      	bne.n	80020ca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2204      	movs	r2, #4
 80020f2:	4013      	ands	r3, r2
 80020f4:	d009      	beq.n	800210a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020f6:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_RCC_ClockConfig+0x1f8>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	4a15      	ldr	r2, [pc, #84]	; (8002150 <HAL_RCC_ClockConfig+0x200>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	0019      	movs	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	4b10      	ldr	r3, [pc, #64]	; (8002148 <HAL_RCC_ClockConfig+0x1f8>)
 8002106:	430a      	orrs	r2, r1
 8002108:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800210a:	f000 f829 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 800210e:	0001      	movs	r1, r0
 8002110:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <HAL_RCC_ClockConfig+0x1f8>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	220f      	movs	r2, #15
 8002118:	401a      	ands	r2, r3
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_RCC_ClockConfig+0x204>)
 800211c:	0092      	lsls	r2, r2, #2
 800211e:	58d3      	ldr	r3, [r2, r3]
 8002120:	221f      	movs	r2, #31
 8002122:	4013      	ands	r3, r2
 8002124:	000a      	movs	r2, r1
 8002126:	40da      	lsrs	r2, r3
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_RCC_ClockConfig+0x208>)
 800212a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_RCC_ClockConfig+0x20c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	0018      	movs	r0, r3
 8002132:	f7fe f893 	bl	800025c <HAL_InitTick>
 8002136:	0003      	movs	r3, r0
}
 8002138:	0018      	movs	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	b004      	add	sp, #16
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40022000 	.word	0x40022000
 8002144:	00001388 	.word	0x00001388
 8002148:	40021000 	.word	0x40021000
 800214c:	fffff0ff 	.word	0xfffff0ff
 8002150:	ffff8fff 	.word	0xffff8fff
 8002154:	08003dd4 	.word	0x08003dd4
 8002158:	20000008 	.word	0x20000008
 800215c:	20000000 	.word	0x20000000

08002160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002166:	4b3c      	ldr	r3, [pc, #240]	; (8002258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2238      	movs	r2, #56	; 0x38
 800216c:	4013      	ands	r3, r2
 800216e:	d10f      	bne.n	8002190 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002170:	4b39      	ldr	r3, [pc, #228]	; (8002258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	0adb      	lsrs	r3, r3, #11
 8002176:	2207      	movs	r2, #7
 8002178:	4013      	ands	r3, r2
 800217a:	2201      	movs	r2, #1
 800217c:	409a      	lsls	r2, r3
 800217e:	0013      	movs	r3, r2
 8002180:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002182:	6839      	ldr	r1, [r7, #0]
 8002184:	4835      	ldr	r0, [pc, #212]	; (800225c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002186:	f7fd ffbd 	bl	8000104 <__udivsi3>
 800218a:	0003      	movs	r3, r0
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	e05d      	b.n	800224c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002190:	4b31      	ldr	r3, [pc, #196]	; (8002258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2238      	movs	r2, #56	; 0x38
 8002196:	4013      	ands	r3, r2
 8002198:	2b08      	cmp	r3, #8
 800219a:	d102      	bne.n	80021a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800219c:	4b2f      	ldr	r3, [pc, #188]	; (800225c <HAL_RCC_GetSysClockFreq+0xfc>)
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	e054      	b.n	800224c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80021a2:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2238      	movs	r2, #56	; 0x38
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b10      	cmp	r3, #16
 80021ac:	d138      	bne.n	8002220 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80021ae:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2203      	movs	r2, #3
 80021b4:	4013      	ands	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021b8:	4b27      	ldr	r3, [pc, #156]	; (8002258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	2207      	movs	r2, #7
 80021c0:	4013      	ands	r3, r2
 80021c2:	3301      	adds	r3, #1
 80021c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d10d      	bne.n	80021e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	4823      	ldr	r0, [pc, #140]	; (800225c <HAL_RCC_GetSysClockFreq+0xfc>)
 80021d0:	f7fd ff98 	bl	8000104 <__udivsi3>
 80021d4:	0003      	movs	r3, r0
 80021d6:	0019      	movs	r1, r3
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	227f      	movs	r2, #127	; 0x7f
 80021e0:	4013      	ands	r3, r2
 80021e2:	434b      	muls	r3, r1
 80021e4:	617b      	str	r3, [r7, #20]
        break;
 80021e6:	e00d      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	481c      	ldr	r0, [pc, #112]	; (800225c <HAL_RCC_GetSysClockFreq+0xfc>)
 80021ec:	f7fd ff8a 	bl	8000104 <__udivsi3>
 80021f0:	0003      	movs	r3, r0
 80021f2:	0019      	movs	r1, r3
 80021f4:	4b18      	ldr	r3, [pc, #96]	; (8002258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	227f      	movs	r2, #127	; 0x7f
 80021fc:	4013      	ands	r3, r2
 80021fe:	434b      	muls	r3, r1
 8002200:	617b      	str	r3, [r7, #20]
        break;
 8002202:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002204:	4b14      	ldr	r3, [pc, #80]	; (8002258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0f5b      	lsrs	r3, r3, #29
 800220a:	2207      	movs	r2, #7
 800220c:	4013      	ands	r3, r2
 800220e:	3301      	adds	r3, #1
 8002210:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	6978      	ldr	r0, [r7, #20]
 8002216:	f7fd ff75 	bl	8000104 <__udivsi3>
 800221a:	0003      	movs	r3, r0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	e015      	b.n	800224c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002220:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2238      	movs	r2, #56	; 0x38
 8002226:	4013      	ands	r3, r2
 8002228:	2b20      	cmp	r3, #32
 800222a:	d103      	bne.n	8002234 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	021b      	lsls	r3, r3, #8
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	e00b      	b.n	800224c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2238      	movs	r2, #56	; 0x38
 800223a:	4013      	ands	r3, r2
 800223c:	2b18      	cmp	r3, #24
 800223e:	d103      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002240:	23fa      	movs	r3, #250	; 0xfa
 8002242:	01db      	lsls	r3, r3, #7
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	e001      	b.n	800224c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800224c:	693b      	ldr	r3, [r7, #16]
}
 800224e:	0018      	movs	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	b006      	add	sp, #24
 8002254:	bd80      	pop	{r7, pc}
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	40021000 	.word	0x40021000
 800225c:	00f42400 	.word	0x00f42400

08002260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002268:	2313      	movs	r3, #19
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002270:	2312      	movs	r3, #18
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	029b      	lsls	r3, r3, #10
 8002280:	4013      	ands	r3, r2
 8002282:	d100      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002284:	e0a4      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002286:	2311      	movs	r3, #17
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228e:	4bc3      	ldr	r3, [pc, #780]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002290:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	055b      	lsls	r3, r3, #21
 8002296:	4013      	ands	r3, r2
 8002298:	d111      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	4bc0      	ldr	r3, [pc, #768]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800229c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800229e:	4bbf      	ldr	r3, [pc, #764]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	0549      	lsls	r1, r1, #21
 80022a4:	430a      	orrs	r2, r1
 80022a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80022a8:	4bbc      	ldr	r3, [pc, #752]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	055b      	lsls	r3, r3, #21
 80022b0:	4013      	ands	r3, r2
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b6:	2311      	movs	r3, #17
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022be:	4bb8      	ldr	r3, [pc, #736]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4bb7      	ldr	r3, [pc, #732]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	0049      	lsls	r1, r1, #1
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022cc:	f7fe f820 	bl	8000310 <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022d4:	e00b      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d6:	f7fe f81b 	bl	8000310 <HAL_GetTick>
 80022da:	0002      	movs	r2, r0
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d904      	bls.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80022e4:	2313      	movs	r3, #19
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	2203      	movs	r2, #3
 80022ea:	701a      	strb	r2, [r3, #0]
        break;
 80022ec:	e005      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022ee:	4bac      	ldr	r3, [pc, #688]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4013      	ands	r3, r2
 80022f8:	d0ed      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80022fa:	2313      	movs	r3, #19
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d154      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002304:	4ba5      	ldr	r3, [pc, #660]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002306:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002308:	23c0      	movs	r3, #192	; 0xc0
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4013      	ands	r3, r2
 800230e:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d019      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	429a      	cmp	r2, r3
 800231e:	d014      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002320:	4b9e      	ldr	r3, [pc, #632]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002324:	4a9f      	ldr	r2, [pc, #636]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002326:	4013      	ands	r3, r2
 8002328:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800232a:	4b9c      	ldr	r3, [pc, #624]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800232e:	4b9b      	ldr	r3, [pc, #620]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002330:	2180      	movs	r1, #128	; 0x80
 8002332:	0249      	lsls	r1, r1, #9
 8002334:	430a      	orrs	r2, r1
 8002336:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002338:	4b98      	ldr	r3, [pc, #608]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800233a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800233c:	4b97      	ldr	r3, [pc, #604]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800233e:	499a      	ldr	r1, [pc, #616]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002340:	400a      	ands	r2, r1
 8002342:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002344:	4b95      	ldr	r3, [pc, #596]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2201      	movs	r2, #1
 800234e:	4013      	ands	r3, r2
 8002350:	d016      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7fd ffdd 	bl	8000310 <HAL_GetTick>
 8002356:	0003      	movs	r3, r0
 8002358:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800235a:	e00c      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235c:	f7fd ffd8 	bl	8000310 <HAL_GetTick>
 8002360:	0002      	movs	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	4a91      	ldr	r2, [pc, #580]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d904      	bls.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 800236c:	2313      	movs	r3, #19
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	2203      	movs	r2, #3
 8002372:	701a      	strb	r2, [r3, #0]
            break;
 8002374:	e004      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002376:	4b89      	ldr	r3, [pc, #548]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237a:	2202      	movs	r2, #2
 800237c:	4013      	ands	r3, r2
 800237e:	d0ed      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8002380:	2313      	movs	r3, #19
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10a      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800238a:	4b84      	ldr	r3, [pc, #528]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800238c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238e:	4a85      	ldr	r2, [pc, #532]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002390:	4013      	ands	r3, r2
 8002392:	0019      	movs	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002398:	4b80      	ldr	r3, [pc, #512]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800239a:	430a      	orrs	r2, r1
 800239c:	65da      	str	r2, [r3, #92]	; 0x5c
 800239e:	e00c      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023a0:	2312      	movs	r3, #18
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	2213      	movs	r2, #19
 80023a6:	18ba      	adds	r2, r7, r2
 80023a8:	7812      	ldrb	r2, [r2, #0]
 80023aa:	701a      	strb	r2, [r3, #0]
 80023ac:	e005      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ae:	2312      	movs	r3, #18
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	2213      	movs	r2, #19
 80023b4:	18ba      	adds	r2, r7, r2
 80023b6:	7812      	ldrb	r2, [r2, #0]
 80023b8:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023ba:	2311      	movs	r3, #17
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c4:	4b75      	ldr	r3, [pc, #468]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023c8:	4b74      	ldr	r3, [pc, #464]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ca:	4979      	ldr	r1, [pc, #484]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80023cc:	400a      	ands	r2, r1
 80023ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	d009      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023da:	4b70      	ldr	r3, [pc, #448]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	2203      	movs	r2, #3
 80023e0:	4393      	bics	r3, r2
 80023e2:	0019      	movs	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4b6c      	ldr	r3, [pc, #432]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ea:	430a      	orrs	r2, r1
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2202      	movs	r2, #2
 80023f4:	4013      	ands	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023f8:	4b68      	ldr	r3, [pc, #416]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	220c      	movs	r2, #12
 80023fe:	4393      	bics	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	4b65      	ldr	r3, [pc, #404]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002408:	430a      	orrs	r2, r1
 800240a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2220      	movs	r2, #32
 8002412:	4013      	ands	r3, r2
 8002414:	d009      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002416:	4b61      	ldr	r3, [pc, #388]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	4a66      	ldr	r2, [pc, #408]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800241c:	4013      	ands	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	4b5d      	ldr	r3, [pc, #372]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002426:	430a      	orrs	r2, r1
 8002428:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4013      	ands	r3, r2
 8002434:	d009      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002436:	4b59      	ldr	r3, [pc, #356]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243a:	4a5f      	ldr	r2, [pc, #380]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800243c:	4013      	ands	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699a      	ldr	r2, [r3, #24]
 8002444:	4b55      	ldr	r3, [pc, #340]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002446:	430a      	orrs	r2, r1
 8002448:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	4013      	ands	r3, r2
 8002454:	d009      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002456:	4b51      	ldr	r3, [pc, #324]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245a:	4a58      	ldr	r2, [pc, #352]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800245c:	4013      	ands	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69da      	ldr	r2, [r3, #28]
 8002464:	4b4d      	ldr	r3, [pc, #308]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002466:	430a      	orrs	r2, r1
 8002468:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2240      	movs	r2, #64	; 0x40
 8002470:	4013      	ands	r3, r2
 8002472:	d009      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002474:	4b49      	ldr	r3, [pc, #292]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002478:	4a51      	ldr	r2, [pc, #324]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800247a:	4013      	ands	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	4b46      	ldr	r3, [pc, #280]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002484:	430a      	orrs	r2, r1
 8002486:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	01db      	lsls	r3, r3, #7
 8002490:	4013      	ands	r3, r2
 8002492:	d015      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002494:	4b41      	ldr	r3, [pc, #260]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	0899      	lsrs	r1, r3, #2
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1a      	ldr	r2, [r3, #32]
 80024a0:	4b3e      	ldr	r3, [pc, #248]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a2:	430a      	orrs	r2, r1
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1a      	ldr	r2, [r3, #32]
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	05db      	lsls	r3, r3, #23
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d106      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024b2:	4b3a      	ldr	r3, [pc, #232]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	4b39      	ldr	r3, [pc, #228]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b8:	2180      	movs	r1, #128	; 0x80
 80024ba:	0249      	lsls	r1, r1, #9
 80024bc:	430a      	orrs	r2, r1
 80024be:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	031b      	lsls	r3, r3, #12
 80024c8:	4013      	ands	r3, r2
 80024ca:	d009      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024cc:	4b33      	ldr	r3, [pc, #204]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d0:	2240      	movs	r2, #64	; 0x40
 80024d2:	4393      	bics	r3, r2
 80024d4:	0019      	movs	r1, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024dc:	430a      	orrs	r2, r1
 80024de:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	039b      	lsls	r3, r3, #14
 80024e8:	4013      	ands	r3, r2
 80024ea:	d016      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024ec:	4b2b      	ldr	r3, [pc, #172]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f0:	4a34      	ldr	r2, [pc, #208]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	0019      	movs	r1, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024fa:	4b28      	ldr	r3, [pc, #160]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024fc:	430a      	orrs	r2, r1
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	03db      	lsls	r3, r3, #15
 8002508:	429a      	cmp	r2, r3
 800250a:	d106      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800250c:	4b23      	ldr	r3, [pc, #140]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	4b22      	ldr	r3, [pc, #136]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002512:	2180      	movs	r1, #128	; 0x80
 8002514:	0449      	lsls	r1, r1, #17
 8002516:	430a      	orrs	r2, r1
 8002518:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	03db      	lsls	r3, r3, #15
 8002522:	4013      	ands	r3, r2
 8002524:	d016      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252a:	4a27      	ldr	r2, [pc, #156]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800252c:	4013      	ands	r3, r2
 800252e:	0019      	movs	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002536:	430a      	orrs	r2, r1
 8002538:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	045b      	lsls	r3, r3, #17
 8002542:	429a      	cmp	r2, r3
 8002544:	d106      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	4b14      	ldr	r3, [pc, #80]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800254c:	2180      	movs	r1, #128	; 0x80
 800254e:	0449      	lsls	r1, r1, #17
 8002550:	430a      	orrs	r2, r1
 8002552:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	4013      	ands	r3, r2
 800255e:	d016      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002560:	4b0e      	ldr	r3, [pc, #56]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002564:	4a19      	ldr	r2, [pc, #100]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002566:	4013      	ands	r3, r2
 8002568:	0019      	movs	r1, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002570:	430a      	orrs	r2, r1
 8002572:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	695a      	ldr	r2, [r3, #20]
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	01db      	lsls	r3, r3, #7
 800257c:	429a      	cmp	r2, r3
 800257e:	d106      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002586:	2180      	movs	r1, #128	; 0x80
 8002588:	0249      	lsls	r1, r1, #9
 800258a:	430a      	orrs	r2, r1
 800258c:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 800258e:	2312      	movs	r3, #18
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	781b      	ldrb	r3, [r3, #0]
}
 8002594:	0018      	movs	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	b006      	add	sp, #24
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	40007000 	.word	0x40007000
 80025a4:	fffffcff 	.word	0xfffffcff
 80025a8:	fffeffff 	.word	0xfffeffff
 80025ac:	00001388 	.word	0x00001388
 80025b0:	efffffff 	.word	0xefffffff
 80025b4:	fffff3ff 	.word	0xfffff3ff
 80025b8:	fff3ffff 	.word	0xfff3ffff
 80025bc:	ffcfffff 	.word	0xffcfffff
 80025c0:	ffffcfff 	.word	0xffffcfff
 80025c4:	ffbfffff 	.word	0xffbfffff
 80025c8:	feffffff 	.word	0xfeffffff
 80025cc:	ffff3fff 	.word	0xffff3fff

080025d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025d4:	f7fd fe22 	bl	800021c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025d8:	f000 f80e 	bl	80025f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025dc:	f000 f948 	bl	8002870 <MX_GPIO_Init>
  MX_ADC1_Init();
 80025e0:	f000 f87e 	bl	80026e0 <MX_ADC1_Init>
  MX_LPTIM1_Init();
 80025e4:	f000 f90e 	bl	8002804 <MX_LPTIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("HelloWorld");
 80025e8:	4b02      	ldr	r3, [pc, #8]	; (80025f4 <main+0x24>)
 80025ea:	0018      	movs	r0, r3
 80025ec:	f000 fcc8 	bl	8002f80 <iprintf>
 80025f0:	e7fa      	b.n	80025e8 <main+0x18>
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	08003dc8 	.word	0x08003dc8

080025f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b0a1      	sub	sp, #132	; 0x84
 80025fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025fe:	2448      	movs	r4, #72	; 0x48
 8002600:	193b      	adds	r3, r7, r4
 8002602:	0018      	movs	r0, r3
 8002604:	2338      	movs	r3, #56	; 0x38
 8002606:	001a      	movs	r2, r3
 8002608:	2100      	movs	r1, #0
 800260a:	f000 fcb1 	bl	8002f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800260e:	2338      	movs	r3, #56	; 0x38
 8002610:	18fb      	adds	r3, r7, r3
 8002612:	0018      	movs	r0, r3
 8002614:	2310      	movs	r3, #16
 8002616:	001a      	movs	r2, r3
 8002618:	2100      	movs	r1, #0
 800261a:	f000 fca9 	bl	8002f70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	0018      	movs	r0, r3
 8002622:	2334      	movs	r3, #52	; 0x34
 8002624:	001a      	movs	r2, r3
 8002626:	2100      	movs	r1, #0
 8002628:	f000 fca2 	bl	8002f70 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	0018      	movs	r0, r3
 8002632:	f7ff f92d 	bl	8001890 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002636:	193b      	adds	r3, r7, r4
 8002638:	2201      	movs	r2, #1
 800263a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800263c:	193b      	adds	r3, r7, r4
 800263e:	2280      	movs	r2, #128	; 0x80
 8002640:	0252      	lsls	r2, r2, #9
 8002642:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002644:	0021      	movs	r1, r4
 8002646:	187b      	adds	r3, r7, r1
 8002648:	2202      	movs	r2, #2
 800264a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800264c:	187b      	adds	r3, r7, r1
 800264e:	2203      	movs	r2, #3
 8002650:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002652:	187b      	adds	r3, r7, r1
 8002654:	2200      	movs	r2, #0
 8002656:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002658:	187b      	adds	r3, r7, r1
 800265a:	2208      	movs	r2, #8
 800265c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800265e:	187b      	adds	r3, r7, r1
 8002660:	2280      	movs	r2, #128	; 0x80
 8002662:	0292      	lsls	r2, r2, #10
 8002664:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002666:	187b      	adds	r3, r7, r1
 8002668:	2280      	movs	r2, #128	; 0x80
 800266a:	0492      	lsls	r2, r2, #18
 800266c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800266e:	187b      	adds	r3, r7, r1
 8002670:	2280      	movs	r2, #128	; 0x80
 8002672:	0592      	lsls	r2, r2, #22
 8002674:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002676:	187b      	adds	r3, r7, r1
 8002678:	0018      	movs	r0, r3
 800267a:	f7ff f949 	bl	8001910 <HAL_RCC_OscConfig>
 800267e:	1e03      	subs	r3, r0, #0
 8002680:	d001      	beq.n	8002686 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002682:	f000 fa7f 	bl	8002b84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002686:	2138      	movs	r1, #56	; 0x38
 8002688:	187b      	adds	r3, r7, r1
 800268a:	2207      	movs	r2, #7
 800268c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800268e:	187b      	adds	r3, r7, r1
 8002690:	2202      	movs	r2, #2
 8002692:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002694:	187b      	adds	r3, r7, r1
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800269a:	187b      	adds	r3, r7, r1
 800269c:	2200      	movs	r2, #0
 800269e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026a0:	187b      	adds	r3, r7, r1
 80026a2:	2102      	movs	r1, #2
 80026a4:	0018      	movs	r0, r3
 80026a6:	f7ff fc53 	bl	8001f50 <HAL_RCC_ClockConfig>
 80026aa:	1e03      	subs	r3, r0, #0
 80026ac:	d001      	beq.n	80026b2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80026ae:	f000 fa69 	bl	8002b84 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1|RCC_PERIPHCLK_ADC;
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	2284      	movs	r2, #132	; 0x84
 80026b6:	01d2      	lsls	r2, r2, #7
 80026b8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	2200      	movs	r2, #0
 80026c4:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	0018      	movs	r0, r3
 80026ca:	f7ff fdc9 	bl	8002260 <HAL_RCCEx_PeriphCLKConfig>
 80026ce:	1e03      	subs	r3, r0, #0
 80026d0:	d001      	beq.n	80026d6 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80026d2:	f000 fa57 	bl	8002b84 <Error_Handler>
  }
}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	46bd      	mov	sp, r7
 80026da:	b021      	add	sp, #132	; 0x84
 80026dc:	bd90      	pop	{r4, r7, pc}
	...

080026e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80026e6:	2310      	movs	r3, #16
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	0018      	movs	r0, r3
 80026ec:	2318      	movs	r3, #24
 80026ee:	001a      	movs	r2, r3
 80026f0:	2100      	movs	r1, #0
 80026f2:	f000 fc3d 	bl	8002f70 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	0018      	movs	r0, r3
 80026fa:	230c      	movs	r3, #12
 80026fc:	001a      	movs	r2, r3
 80026fe:	2100      	movs	r1, #0
 8002700:	f000 fc36 	bl	8002f70 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8002704:	4b3c      	ldr	r3, [pc, #240]	; (80027f8 <MX_ADC1_Init+0x118>)
 8002706:	4a3d      	ldr	r2, [pc, #244]	; (80027fc <MX_ADC1_Init+0x11c>)
 8002708:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800270a:	4b3b      	ldr	r3, [pc, #236]	; (80027f8 <MX_ADC1_Init+0x118>)
 800270c:	2280      	movs	r2, #128	; 0x80
 800270e:	05d2      	lsls	r2, r2, #23
 8002710:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002712:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <MX_ADC1_Init+0x118>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002718:	4b37      	ldr	r3, [pc, #220]	; (80027f8 <MX_ADC1_Init+0x118>)
 800271a:	2200      	movs	r2, #0
 800271c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800271e:	4b36      	ldr	r3, [pc, #216]	; (80027f8 <MX_ADC1_Init+0x118>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002724:	4b34      	ldr	r3, [pc, #208]	; (80027f8 <MX_ADC1_Init+0x118>)
 8002726:	2204      	movs	r2, #4
 8002728:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800272a:	4b33      	ldr	r3, [pc, #204]	; (80027f8 <MX_ADC1_Init+0x118>)
 800272c:	2200      	movs	r2, #0
 800272e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002730:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <MX_ADC1_Init+0x118>)
 8002732:	2200      	movs	r2, #0
 8002734:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002736:	4b30      	ldr	r3, [pc, #192]	; (80027f8 <MX_ADC1_Init+0x118>)
 8002738:	2200      	movs	r2, #0
 800273a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800273c:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <MX_ADC1_Init+0x118>)
 800273e:	2201      	movs	r2, #1
 8002740:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002742:	4b2d      	ldr	r3, [pc, #180]	; (80027f8 <MX_ADC1_Init+0x118>)
 8002744:	2220      	movs	r2, #32
 8002746:	2100      	movs	r1, #0
 8002748:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800274a:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <MX_ADC1_Init+0x118>)
 800274c:	2200      	movs	r2, #0
 800274e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002750:	4b29      	ldr	r3, [pc, #164]	; (80027f8 <MX_ADC1_Init+0x118>)
 8002752:	2200      	movs	r2, #0
 8002754:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002756:	4b28      	ldr	r3, [pc, #160]	; (80027f8 <MX_ADC1_Init+0x118>)
 8002758:	222c      	movs	r2, #44	; 0x2c
 800275a:	2100      	movs	r1, #0
 800275c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800275e:	4b26      	ldr	r3, [pc, #152]	; (80027f8 <MX_ADC1_Init+0x118>)
 8002760:	2200      	movs	r2, #0
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002764:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <MX_ADC1_Init+0x118>)
 8002766:	2200      	movs	r2, #0
 8002768:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800276a:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <MX_ADC1_Init+0x118>)
 800276c:	2200      	movs	r2, #0
 800276e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002770:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <MX_ADC1_Init+0x118>)
 8002772:	223c      	movs	r2, #60	; 0x3c
 8002774:	2100      	movs	r1, #0
 8002776:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002778:	4b1f      	ldr	r3, [pc, #124]	; (80027f8 <MX_ADC1_Init+0x118>)
 800277a:	2200      	movs	r2, #0
 800277c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800277e:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <MX_ADC1_Init+0x118>)
 8002780:	0018      	movs	r0, r3
 8002782:	f7fd ff87 	bl	8000694 <HAL_ADC_Init>
 8002786:	1e03      	subs	r3, r0, #0
 8002788:	d001      	beq.n	800278e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800278a:	f000 f9fb 	bl	8002b84 <Error_Handler>
  }
  /** Configure Analog WatchDog 1 
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 800278e:	2110      	movs	r1, #16
 8002790:	187b      	adds	r3, r7, r1
 8002792:	4a1b      	ldr	r2, [pc, #108]	; (8002800 <MX_ADC1_Init+0x120>)
 8002794:	601a      	str	r2, [r3, #0]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8002796:	187b      	adds	r3, r7, r1
 8002798:	22c0      	movs	r2, #192	; 0xc0
 800279a:	0412      	lsls	r2, r2, #16
 800279c:	605a      	str	r2, [r3, #4]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 800279e:	187b      	adds	r3, r7, r1
 80027a0:	2201      	movs	r2, #1
 80027a2:	609a      	str	r2, [r3, #8]
  AnalogWDGConfig.ITMode = DISABLE;
 80027a4:	187b      	adds	r3, r7, r1
 80027a6:	2200      	movs	r2, #0
 80027a8:	731a      	strb	r2, [r3, #12]
  AnalogWDGConfig.HighThreshold = 0;
 80027aa:	187b      	adds	r3, r7, r1
 80027ac:	2200      	movs	r2, #0
 80027ae:	611a      	str	r2, [r3, #16]
  AnalogWDGConfig.LowThreshold = 0;
 80027b0:	187b      	adds	r3, r7, r1
 80027b2:	2200      	movs	r2, #0
 80027b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80027b6:	187a      	adds	r2, r7, r1
 80027b8:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <MX_ADC1_Init+0x118>)
 80027ba:	0011      	movs	r1, r2
 80027bc:	0018      	movs	r0, r3
 80027be:	f7fe fb13 	bl	8000de8 <HAL_ADC_AnalogWDGConfig>
 80027c2:	1e03      	subs	r3, r0, #0
 80027c4:	d001      	beq.n	80027ca <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80027c6:	f000 f9dd 	bl	8002b84 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80027ca:	1d3b      	adds	r3, r7, #4
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	2200      	movs	r2, #0
 80027d4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	2200      	movs	r2, #0
 80027da:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027dc:	1d3a      	adds	r2, r7, #4
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <MX_ADC1_Init+0x118>)
 80027e0:	0011      	movs	r1, r2
 80027e2:	0018      	movs	r0, r3
 80027e4:	f7fe f92c 	bl	8000a40 <HAL_ADC_ConfigChannel>
 80027e8:	1e03      	subs	r3, r0, #0
 80027ea:	d001      	beq.n	80027f0 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80027ec:	f000 f9ca 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b00a      	add	sp, #40	; 0x28
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	2000009c 	.word	0x2000009c
 80027fc:	40012400 	.word	0x40012400
 8002800:	7cc00000 	.word	0x7cc00000

08002804 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002808:	4b16      	ldr	r3, [pc, #88]	; (8002864 <MX_LPTIM1_Init+0x60>)
 800280a:	4a17      	ldr	r2, [pc, #92]	; (8002868 <MX_LPTIM1_Init+0x64>)
 800280c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <MX_LPTIM1_Init+0x60>)
 8002810:	2200      	movs	r2, #0
 8002812:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8002814:	4b13      	ldr	r3, [pc, #76]	; (8002864 <MX_LPTIM1_Init+0x60>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 800281a:	4b12      	ldr	r3, [pc, #72]	; (8002864 <MX_LPTIM1_Init+0x60>)
 800281c:	2200      	movs	r2, #0
 800281e:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8002820:	4b10      	ldr	r3, [pc, #64]	; (8002864 <MX_LPTIM1_Init+0x60>)
 8002822:	2200      	movs	r2, #0
 8002824:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002826:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <MX_LPTIM1_Init+0x60>)
 8002828:	4a10      	ldr	r2, [pc, #64]	; (800286c <MX_LPTIM1_Init+0x68>)
 800282a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800282c:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <MX_LPTIM1_Init+0x60>)
 800282e:	2200      	movs	r2, #0
 8002830:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002832:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <MX_LPTIM1_Init+0x60>)
 8002834:	2200      	movs	r2, #0
 8002836:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <MX_LPTIM1_Init+0x60>)
 800283a:	2280      	movs	r2, #128	; 0x80
 800283c:	0412      	lsls	r2, r2, #16
 800283e:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002840:	4b08      	ldr	r3, [pc, #32]	; (8002864 <MX_LPTIM1_Init+0x60>)
 8002842:	2200      	movs	r2, #0
 8002844:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002846:	4b07      	ldr	r3, [pc, #28]	; (8002864 <MX_LPTIM1_Init+0x60>)
 8002848:	2200      	movs	r2, #0
 800284a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <MX_LPTIM1_Init+0x60>)
 800284e:	0018      	movs	r0, r3
 8002850:	f7fe ff88 	bl	8001764 <HAL_LPTIM_Init>
 8002854:	1e03      	subs	r3, r0, #0
 8002856:	d001      	beq.n	800285c <MX_LPTIM1_Init+0x58>
  {
    Error_Handler();
 8002858:	f000 f994 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800285c:	46c0      	nop			; (mov r8, r8)
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	20000100 	.word	0x20000100
 8002868:	40007c00 	.word	0x40007c00
 800286c:	0000ffff 	.word	0x0000ffff

08002870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b08b      	sub	sp, #44	; 0x2c
 8002874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002876:	2414      	movs	r4, #20
 8002878:	193b      	adds	r3, r7, r4
 800287a:	0018      	movs	r0, r3
 800287c:	2314      	movs	r3, #20
 800287e:	001a      	movs	r2, r3
 8002880:	2100      	movs	r1, #0
 8002882:	f000 fb75 	bl	8002f70 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002886:	4bb7      	ldr	r3, [pc, #732]	; (8002b64 <MX_GPIO_Init+0x2f4>)
 8002888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800288a:	4bb6      	ldr	r3, [pc, #728]	; (8002b64 <MX_GPIO_Init+0x2f4>)
 800288c:	2104      	movs	r1, #4
 800288e:	430a      	orrs	r2, r1
 8002890:	635a      	str	r2, [r3, #52]	; 0x34
 8002892:	4bb4      	ldr	r3, [pc, #720]	; (8002b64 <MX_GPIO_Init+0x2f4>)
 8002894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002896:	2204      	movs	r2, #4
 8002898:	4013      	ands	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800289e:	4bb1      	ldr	r3, [pc, #708]	; (8002b64 <MX_GPIO_Init+0x2f4>)
 80028a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a2:	4bb0      	ldr	r3, [pc, #704]	; (8002b64 <MX_GPIO_Init+0x2f4>)
 80028a4:	2120      	movs	r1, #32
 80028a6:	430a      	orrs	r2, r1
 80028a8:	635a      	str	r2, [r3, #52]	; 0x34
 80028aa:	4bae      	ldr	r3, [pc, #696]	; (8002b64 <MX_GPIO_Init+0x2f4>)
 80028ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ae:	2220      	movs	r2, #32
 80028b0:	4013      	ands	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b6:	4bab      	ldr	r3, [pc, #684]	; (8002b64 <MX_GPIO_Init+0x2f4>)
 80028b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ba:	4baa      	ldr	r3, [pc, #680]	; (8002b64 <MX_GPIO_Init+0x2f4>)
 80028bc:	2101      	movs	r1, #1
 80028be:	430a      	orrs	r2, r1
 80028c0:	635a      	str	r2, [r3, #52]	; 0x34
 80028c2:	4ba8      	ldr	r3, [pc, #672]	; (8002b64 <MX_GPIO_Init+0x2f4>)
 80028c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c6:	2201      	movs	r2, #1
 80028c8:	4013      	ands	r3, r2
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ce:	4ba5      	ldr	r3, [pc, #660]	; (8002b64 <MX_GPIO_Init+0x2f4>)
 80028d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d2:	4ba4      	ldr	r3, [pc, #656]	; (8002b64 <MX_GPIO_Init+0x2f4>)
 80028d4:	2102      	movs	r1, #2
 80028d6:	430a      	orrs	r2, r1
 80028d8:	635a      	str	r2, [r3, #52]	; 0x34
 80028da:	4ba2      	ldr	r3, [pc, #648]	; (8002b64 <MX_GPIO_Init+0x2f4>)
 80028dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028de:	2202      	movs	r2, #2
 80028e0:	4013      	ands	r3, r2
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028e6:	4b9f      	ldr	r3, [pc, #636]	; (8002b64 <MX_GPIO_Init+0x2f4>)
 80028e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ea:	4b9e      	ldr	r3, [pc, #632]	; (8002b64 <MX_GPIO_Init+0x2f4>)
 80028ec:	2108      	movs	r1, #8
 80028ee:	430a      	orrs	r2, r1
 80028f0:	635a      	str	r2, [r3, #52]	; 0x34
 80028f2:	4b9c      	ldr	r3, [pc, #624]	; (8002b64 <MX_GPIO_Init+0x2f4>)
 80028f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f6:	2208      	movs	r2, #8
 80028f8:	4013      	ands	r3, r2
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO13_Pin|GPIO14_Pin|GPIO15_Pin, GPIO_PIN_RESET);
 80028fe:	23e0      	movs	r3, #224	; 0xe0
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	4899      	ldr	r0, [pc, #612]	; (8002b68 <MX_GPIO_Init+0x2f8>)
 8002904:	2200      	movs	r2, #0
 8002906:	0019      	movs	r1, r3
 8002908:	f7fe ff0e 	bl	8001728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO8_Pin|GPIO9_FAST_Pin|GPIO10_FAST_Pin, GPIO_PIN_RESET);
 800290c:	23e0      	movs	r3, #224	; 0xe0
 800290e:	00d9      	lsls	r1, r3, #3
 8002910:	23a0      	movs	r3, #160	; 0xa0
 8002912:	05db      	lsls	r3, r3, #23
 8002914:	2200      	movs	r2, #0
 8002916:	0018      	movs	r0, r3
 8002918:	f7fe ff06 	bl	8001728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO6_Pin|GPIO7_Pin, GPIO_PIN_RESET);
 800291c:	4b93      	ldr	r3, [pc, #588]	; (8002b6c <MX_GPIO_Init+0x2fc>)
 800291e:	2200      	movs	r2, #0
 8002920:	21c0      	movs	r1, #192	; 0xc0
 8002922:	0018      	movs	r0, r3
 8002924:	f7fe ff00 	bl	8001728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO8D8_Pin|GPIO9_Pin|GPIO2_Pin, GPIO_PIN_RESET);
 8002928:	23c1      	movs	r3, #193	; 0xc1
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4890      	ldr	r0, [pc, #576]	; (8002b70 <MX_GPIO_Init+0x300>)
 800292e:	2200      	movs	r2, #0
 8002930:	0019      	movs	r1, r3
 8002932:	f7fe fef9 	bl	8001728 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC11 PC13 PC4 PC5 
                           PC8 PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5 
 8002936:	0021      	movs	r1, r4
 8002938:	187b      	adds	r3, r7, r1
 800293a:	4a8e      	ldr	r2, [pc, #568]	; (8002b74 <MX_GPIO_Init+0x304>)
 800293c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800293e:	187b      	adds	r3, r7, r1
 8002940:	2203      	movs	r2, #3
 8002942:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	187b      	adds	r3, r7, r1
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800294a:	000c      	movs	r4, r1
 800294c:	187b      	adds	r3, r7, r1
 800294e:	4a87      	ldr	r2, [pc, #540]	; (8002b6c <MX_GPIO_Init+0x2fc>)
 8002950:	0019      	movs	r1, r3
 8002952:	0010      	movs	r0, r2
 8002954:	f7fe fd84 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002958:	0021      	movs	r1, r4
 800295a:	187b      	adds	r3, r7, r1
 800295c:	2204      	movs	r2, #4
 800295e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002960:	187b      	adds	r3, r7, r1
 8002962:	2203      	movs	r2, #3
 8002964:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	187b      	adds	r3, r7, r1
 8002968:	2200      	movs	r2, #0
 800296a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800296c:	000c      	movs	r4, r1
 800296e:	187b      	adds	r3, r7, r1
 8002970:	4a81      	ldr	r2, [pc, #516]	; (8002b78 <MX_GPIO_Init+0x308>)
 8002972:	0019      	movs	r1, r3
 8002974:	0010      	movs	r0, r2
 8002976:	f7fe fd73 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOW_POWER_UART2_RX_Pin LOW_POWER_UART1_TX_Pin */
  GPIO_InitStruct.Pin = LOW_POWER_UART2_RX_Pin|LOW_POWER_UART1_TX_Pin;
 800297a:	0021      	movs	r1, r4
 800297c:	187b      	adds	r3, r7, r1
 800297e:	2203      	movs	r2, #3
 8002980:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	187b      	adds	r3, r7, r1
 8002984:	2202      	movs	r2, #2
 8002986:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	187b      	adds	r3, r7, r1
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	187b      	adds	r3, r7, r1
 8002990:	2200      	movs	r2, #0
 8002992:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_LPUART1;
 8002994:	187b      	adds	r3, r7, r1
 8002996:	2201      	movs	r2, #1
 8002998:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800299a:	000c      	movs	r4, r1
 800299c:	187b      	adds	r3, r7, r1
 800299e:	4a73      	ldr	r2, [pc, #460]	; (8002b6c <MX_GPIO_Init+0x2fc>)
 80029a0:	0019      	movs	r1, r3
 80029a2:	0010      	movs	r0, r2
 80029a4:	f7fe fd5c 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12 
                           PB4 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 80029a8:	0021      	movs	r1, r4
 80029aa:	187b      	adds	r3, r7, r1
 80029ac:	4a73      	ldr	r2, [pc, #460]	; (8002b7c <MX_GPIO_Init+0x30c>)
 80029ae:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029b0:	187b      	adds	r3, r7, r1
 80029b2:	2203      	movs	r2, #3
 80029b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	187b      	adds	r3, r7, r1
 80029b8:	2200      	movs	r2, #0
 80029ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029bc:	000c      	movs	r4, r1
 80029be:	187b      	adds	r3, r7, r1
 80029c0:	4a69      	ldr	r2, [pc, #420]	; (8002b68 <MX_GPIO_Init+0x2f8>)
 80029c2:	0019      	movs	r1, r3
 80029c4:	0010      	movs	r0, r2
 80029c6:	f7fe fd4b 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO13_Pin GPIO14_Pin GPIO15_Pin */
  GPIO_InitStruct.Pin = GPIO13_Pin|GPIO14_Pin|GPIO15_Pin;
 80029ca:	0021      	movs	r1, r4
 80029cc:	187b      	adds	r3, r7, r1
 80029ce:	22e0      	movs	r2, #224	; 0xe0
 80029d0:	0212      	lsls	r2, r2, #8
 80029d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	2201      	movs	r2, #1
 80029d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	187b      	adds	r3, r7, r1
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	2203      	movs	r2, #3
 80029e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e6:	000c      	movs	r4, r1
 80029e8:	187b      	adds	r3, r7, r1
 80029ea:	4a5f      	ldr	r2, [pc, #380]	; (8002b68 <MX_GPIO_Init+0x2f8>)
 80029ec:	0019      	movs	r1, r3
 80029ee:	0010      	movs	r0, r2
 80029f0:	f7fe fd36 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO8_Pin GPIO9_FAST_Pin GPIO10_FAST_Pin */
  GPIO_InitStruct.Pin = GPIO8_Pin|GPIO9_FAST_Pin|GPIO10_FAST_Pin;
 80029f4:	0021      	movs	r1, r4
 80029f6:	187b      	adds	r3, r7, r1
 80029f8:	22e0      	movs	r2, #224	; 0xe0
 80029fa:	00d2      	lsls	r2, r2, #3
 80029fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fe:	187b      	adds	r3, r7, r1
 8002a00:	2201      	movs	r2, #1
 8002a02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0a:	187b      	adds	r3, r7, r1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a10:	000c      	movs	r4, r1
 8002a12:	187a      	adds	r2, r7, r1
 8002a14:	23a0      	movs	r3, #160	; 0xa0
 8002a16:	05db      	lsls	r3, r3, #23
 8002a18:	0011      	movs	r1, r2
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f7fe fd20 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO6_Pin GPIO7_Pin */
  GPIO_InitStruct.Pin = GPIO6_Pin|GPIO7_Pin;
 8002a20:	0021      	movs	r1, r4
 8002a22:	187b      	adds	r3, r7, r1
 8002a24:	22c0      	movs	r2, #192	; 0xc0
 8002a26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	187b      	adds	r3, r7, r1
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a34:	187b      	adds	r3, r7, r1
 8002a36:	2203      	movs	r2, #3
 8002a38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a3a:	000c      	movs	r4, r1
 8002a3c:	187b      	adds	r3, r7, r1
 8002a3e:	4a4b      	ldr	r2, [pc, #300]	; (8002b6c <MX_GPIO_Init+0x2fc>)
 8002a40:	0019      	movs	r1, r3
 8002a42:	0010      	movs	r0, r2
 8002a44:	f7fe fd0c 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO8D8_Pin GPIO9_Pin GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO8D8_Pin|GPIO9_Pin|GPIO2_Pin;
 8002a48:	0021      	movs	r1, r4
 8002a4a:	187b      	adds	r3, r7, r1
 8002a4c:	22c1      	movs	r2, #193	; 0xc1
 8002a4e:	0092      	lsls	r2, r2, #2
 8002a50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a52:	000c      	movs	r4, r1
 8002a54:	193b      	adds	r3, r7, r4
 8002a56:	2201      	movs	r2, #1
 8002a58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	193b      	adds	r3, r7, r4
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a60:	193b      	adds	r3, r7, r4
 8002a62:	2203      	movs	r2, #3
 8002a64:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a66:	193b      	adds	r3, r7, r4
 8002a68:	4a41      	ldr	r2, [pc, #260]	; (8002b70 <MX_GPIO_Init+0x300>)
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	0010      	movs	r0, r2
 8002a6e:	f7fe fcf7 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8002a72:	193b      	adds	r3, r7, r4
 8002a74:	2298      	movs	r2, #152	; 0x98
 8002a76:	0212      	lsls	r2, r2, #8
 8002a78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a7a:	193b      	adds	r3, r7, r4
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	193b      	adds	r3, r7, r4
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a86:	193a      	adds	r2, r7, r4
 8002a88:	23a0      	movs	r3, #160	; 0xa0
 8002a8a:	05db      	lsls	r3, r3, #23
 8002a8c:	0011      	movs	r1, r2
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f7fe fce6 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6;
 8002a94:	0021      	movs	r1, r4
 8002a96:	187b      	adds	r3, r7, r1
 8002a98:	2261      	movs	r2, #97	; 0x61
 8002a9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a9c:	187b      	adds	r3, r7, r1
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	187b      	adds	r3, r7, r1
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002aa8:	000c      	movs	r4, r1
 8002aaa:	187b      	adds	r3, r7, r1
 8002aac:	4a30      	ldr	r2, [pc, #192]	; (8002b70 <MX_GPIO_Init+0x300>)
 8002aae:	0019      	movs	r1, r3
 8002ab0:	0010      	movs	r0, r2
 8002ab2:	f7fe fcd5 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8002ab6:	0021      	movs	r1, r4
 8002ab8:	187b      	adds	r3, r7, r1
 8002aba:	221a      	movs	r2, #26
 8002abc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	2200      	movs	r2, #0
 8002ace:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002ad0:	187b      	adds	r3, r7, r1
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ad6:	000c      	movs	r4, r1
 8002ad8:	187b      	adds	r3, r7, r1
 8002ada:	4a25      	ldr	r2, [pc, #148]	; (8002b70 <MX_GPIO_Init+0x300>)
 8002adc:	0019      	movs	r1, r3
 8002ade:	0010      	movs	r0, r2
 8002ae0:	f7fe fcbe 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8002ae4:	0021      	movs	r1, r4
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	2248      	movs	r2, #72	; 0x48
 8002aea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	187b      	adds	r3, r7, r1
 8002aee:	2202      	movs	r2, #2
 8002af0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	187b      	adds	r3, r7, r1
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	187b      	adds	r3, r7, r1
 8002afa:	2200      	movs	r2, #0
 8002afc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	2201      	movs	r2, #1
 8002b02:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b04:	000c      	movs	r4, r1
 8002b06:	187b      	adds	r3, r7, r1
 8002b08:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <MX_GPIO_Init+0x2f8>)
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	0010      	movs	r0, r2
 8002b0e:	f7fe fca7 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b12:	0021      	movs	r1, r4
 8002b14:	187b      	adds	r3, r7, r1
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	0092      	lsls	r2, r2, #2
 8002b1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	187b      	adds	r3, r7, r1
 8002b1e:	2202      	movs	r2, #2
 8002b20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	187b      	adds	r3, r7, r1
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b28:	187b      	adds	r3, r7, r1
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b2e:	187b      	adds	r3, r7, r1
 8002b30:	2205      	movs	r2, #5
 8002b32:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b34:	187b      	adds	r3, r7, r1
 8002b36:	4a0c      	ldr	r2, [pc, #48]	; (8002b68 <MX_GPIO_Init+0x2f8>)
 8002b38:	0019      	movs	r1, r3
 8002b3a:	0010      	movs	r0, r2
 8002b3c:	f7fe fc90 	bl	8001460 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA9);
 8002b40:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <MX_GPIO_Init+0x310>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <MX_GPIO_Init+0x310>)
 8002b46:	2180      	movs	r1, #128	; 0x80
 8002b48:	03c9      	lsls	r1, r1, #15
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA10);
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <MX_GPIO_Init+0x310>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <MX_GPIO_Init+0x310>)
 8002b54:	2180      	movs	r1, #128	; 0x80
 8002b56:	0409      	lsls	r1, r1, #16
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

}
 8002b5c:	46c0      	nop			; (mov r8, r8)
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b00b      	add	sp, #44	; 0x2c
 8002b62:	bd90      	pop	{r4, r7, pc}
 8002b64:	40021000 	.word	0x40021000
 8002b68:	50000400 	.word	0x50000400
 8002b6c:	50000800 	.word	0x50000800
 8002b70:	50000c00 	.word	0x50000c00
 8002b74:	00002f30 	.word	0x00002f30
 8002b78:	50001400 	.word	0x50001400
 8002b7c:	00001d94 	.word	0x00001d94
 8002b80:	40010000 	.word	0x40010000

08002b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b88:	46c0      	nop			; (mov r8, r8)
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 8002b98:	4b04      	ldr	r3, [pc, #16]	; (8002bac <LL_SYSCFG_DisableDBATT+0x1c>)
 8002b9a:	6819      	ldr	r1, [r3, #0]
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <LL_SYSCFG_DisableDBATT+0x1c>)
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]
}
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b002      	add	sp, #8
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40010000 	.word	0x40010000

08002bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb6:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <HAL_MspInit+0x4c>)
 8002bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <HAL_MspInit+0x4c>)
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <HAL_MspInit+0x4c>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4013      	ands	r3, r2
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_MspInit+0x4c>)
 8002bd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <HAL_MspInit+0x4c>)
 8002bd4:	2180      	movs	r1, #128	; 0x80
 8002bd6:	0549      	lsls	r1, r1, #21
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bdc:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <HAL_MspInit+0x4c>)
 8002bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	055b      	lsls	r3, r3, #21
 8002be4:	4013      	ands	r3, r2
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 8002bea:	23c0      	movs	r3, #192	; 0xc0
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f7ff ffce 	bl	8002b90 <LL_SYSCFG_DisableDBATT>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bf4:	46c0      	nop			; (mov r8, r8)
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b002      	add	sp, #8
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000

08002c00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b08b      	sub	sp, #44	; 0x2c
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	2314      	movs	r3, #20
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	2314      	movs	r3, #20
 8002c10:	001a      	movs	r2, r3
 8002c12:	2100      	movs	r1, #0
 8002c14:	f000 f9ac 	bl	8002f70 <memset>
  if(hadc->Instance==ADC1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a26      	ldr	r2, [pc, #152]	; (8002cb8 <HAL_ADC_MspInit+0xb8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d145      	bne.n	8002cae <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002c22:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <HAL_ADC_MspInit+0xbc>)
 8002c24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c26:	4b25      	ldr	r3, [pc, #148]	; (8002cbc <HAL_ADC_MspInit+0xbc>)
 8002c28:	2180      	movs	r1, #128	; 0x80
 8002c2a:	0349      	lsls	r1, r1, #13
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c30:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <HAL_ADC_MspInit+0xbc>)
 8002c32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	035b      	lsls	r3, r3, #13
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3e:	4b1f      	ldr	r3, [pc, #124]	; (8002cbc <HAL_ADC_MspInit+0xbc>)
 8002c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c42:	4b1e      	ldr	r3, [pc, #120]	; (8002cbc <HAL_ADC_MspInit+0xbc>)
 8002c44:	2101      	movs	r1, #1
 8002c46:	430a      	orrs	r2, r1
 8002c48:	635a      	str	r2, [r3, #52]	; 0x34
 8002c4a:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <HAL_ADC_MspInit+0xbc>)
 8002c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4e:	2201      	movs	r2, #1
 8002c50:	4013      	ands	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c56:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_ADC_MspInit+0xbc>)
 8002c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5a:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <HAL_ADC_MspInit+0xbc>)
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	635a      	str	r2, [r3, #52]	; 0x34
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <HAL_ADC_MspInit+0xbc>)
 8002c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c66:	2202      	movs	r2, #2
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8002c6e:	2414      	movs	r4, #20
 8002c70:	193b      	adds	r3, r7, r4
 8002c72:	22ff      	movs	r2, #255	; 0xff
 8002c74:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c76:	193b      	adds	r3, r7, r4
 8002c78:	2203      	movs	r2, #3
 8002c7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	193b      	adds	r3, r7, r4
 8002c7e:	2200      	movs	r2, #0
 8002c80:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c82:	193a      	adds	r2, r7, r4
 8002c84:	23a0      	movs	r3, #160	; 0xa0
 8002c86:	05db      	lsls	r3, r3, #23
 8002c88:	0011      	movs	r1, r2
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f7fe fbe8 	bl	8001460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c90:	193b      	adds	r3, r7, r4
 8002c92:	2203      	movs	r2, #3
 8002c94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c96:	193b      	adds	r3, r7, r4
 8002c98:	2203      	movs	r2, #3
 8002c9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	193b      	adds	r3, r7, r4
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca2:	193b      	adds	r3, r7, r4
 8002ca4:	4a06      	ldr	r2, [pc, #24]	; (8002cc0 <HAL_ADC_MspInit+0xc0>)
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	0010      	movs	r0, r2
 8002caa:	f7fe fbd9 	bl	8001460 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b00b      	add	sp, #44	; 0x2c
 8002cb4:	bd90      	pop	{r4, r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	40012400 	.word	0x40012400
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	50000400 	.word	0x50000400

08002cc4 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	2314      	movs	r3, #20
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	2314      	movs	r3, #20
 8002cd4:	001a      	movs	r2, r3
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	f000 f94a 	bl	8002f70 <memset>
  if(hlptim->Instance==LPTIM1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1a      	ldr	r2, [pc, #104]	; (8002d4c <HAL_LPTIM_MspInit+0x88>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d12e      	bne.n	8002d44 <HAL_LPTIM_MspInit+0x80>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	; (8002d50 <HAL_LPTIM_MspInit+0x8c>)
 8002ce8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cea:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <HAL_LPTIM_MspInit+0x8c>)
 8002cec:	2180      	movs	r1, #128	; 0x80
 8002cee:	0609      	lsls	r1, r1, #24
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cf4:	4b16      	ldr	r3, [pc, #88]	; (8002d50 <HAL_LPTIM_MspInit+0x8c>)
 8002cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf8:	0fdb      	lsrs	r3, r3, #31
 8002cfa:	07db      	lsls	r3, r3, #31
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <HAL_LPTIM_MspInit+0x8c>)
 8002d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <HAL_LPTIM_MspInit+0x8c>)
 8002d06:	2104      	movs	r1, #4
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	635a      	str	r2, [r3, #52]	; 0x34
 8002d0c:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <HAL_LPTIM_MspInit+0x8c>)
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d10:	2204      	movs	r2, #4
 8002d12:	4013      	ands	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration    
    PC12     ------> LPTIM1_IN1
    PC2     ------> LPTIM1_IN2
    PC3     ------> LPTIM1_ETR 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_2|GPIO_PIN_3;
 8002d18:	2114      	movs	r1, #20
 8002d1a:	187b      	adds	r3, r7, r1
 8002d1c:	4a0d      	ldr	r2, [pc, #52]	; (8002d54 <HAL_LPTIM_MspInit+0x90>)
 8002d1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d20:	187b      	adds	r3, r7, r1
 8002d22:	2202      	movs	r2, #2
 8002d24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	187b      	adds	r3, r7, r1
 8002d28:	2200      	movs	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2c:	187b      	adds	r3, r7, r1
 8002d2e:	2200      	movs	r2, #0
 8002d30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_LPTIM1;
 8002d32:	187b      	adds	r3, r7, r1
 8002d34:	2200      	movs	r2, #0
 8002d36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d38:	187b      	adds	r3, r7, r1
 8002d3a:	4a07      	ldr	r2, [pc, #28]	; (8002d58 <HAL_LPTIM_MspInit+0x94>)
 8002d3c:	0019      	movs	r1, r3
 8002d3e:	0010      	movs	r0, r2
 8002d40:	f7fe fb8e 	bl	8001460 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002d44:	46c0      	nop			; (mov r8, r8)
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b00a      	add	sp, #40	; 0x28
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40007c00 	.word	0x40007c00
 8002d50:	40021000 	.word	0x40021000
 8002d54:	0000100c 	.word	0x0000100c
 8002d58:	50000800 	.word	0x50000800

08002d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d6a:	e7fe      	b.n	8002d6a <HardFault_Handler+0x4>

08002d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d70:	46c0      	nop			; (mov r8, r8)
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d84:	f7fd fab4 	bl	80002f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b086      	sub	sp, #24
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	e00a      	b.n	8002db6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002da0:	e000      	b.n	8002da4 <_read+0x16>
 8002da2:	bf00      	nop
 8002da4:	0001      	movs	r1, r0
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	60ba      	str	r2, [r7, #8]
 8002dac:	b2ca      	uxtb	r2, r1
 8002dae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	3301      	adds	r3, #1
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	dbf0      	blt.n	8002da0 <_read+0x12>
	}

return len;
 8002dbe:	687b      	ldr	r3, [r7, #4]
}
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b006      	add	sp, #24
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	e009      	b.n	8002dee <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	60ba      	str	r2, [r7, #8]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	0018      	movs	r0, r3
 8002de4:	e000      	b.n	8002de8 <_write+0x20>
 8002de6:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	3301      	adds	r3, #1
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	dbf1      	blt.n	8002dda <_write+0x12>
	}
	return len;
 8002df6:	687b      	ldr	r3, [r7, #4]
}
 8002df8:	0018      	movs	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b006      	add	sp, #24
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <_close>:

int _close(int file)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	return -1;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	425b      	negs	r3, r3
}
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b002      	add	sp, #8
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2280      	movs	r2, #128	; 0x80
 8002e22:	0192      	lsls	r2, r2, #6
 8002e24:	605a      	str	r2, [r3, #4]
	return 0;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	0018      	movs	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b002      	add	sp, #8
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <_isatty>:

int _isatty(int file)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	return 1;
 8002e38:	2301      	movs	r3, #1
}
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b002      	add	sp, #8
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
	return 0;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	0018      	movs	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b004      	add	sp, #16
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002e60:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <_sbrk+0x50>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <_sbrk+0x16>
		heap_end = &end;
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <_sbrk+0x50>)
 8002e6a:	4a10      	ldr	r2, [pc, #64]	; (8002eac <_sbrk+0x54>)
 8002e6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <_sbrk+0x50>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <_sbrk+0x50>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	18d3      	adds	r3, r2, r3
 8002e7c:	466a      	mov	r2, sp
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d907      	bls.n	8002e92 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002e82:	f000 f84b 	bl	8002f1c <__errno>
 8002e86:	0003      	movs	r3, r0
 8002e88:	220c      	movs	r2, #12
 8002e8a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	425b      	negs	r3, r3
 8002e90:	e006      	b.n	8002ea0 <_sbrk+0x48>
	}

	heap_end += incr;
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <_sbrk+0x50>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	18d2      	adds	r2, r2, r3
 8002e9a:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <_sbrk+0x50>)
 8002e9c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b004      	add	sp, #16
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	2000008c 	.word	0x2000008c
 8002eac:	20000140 	.word	0x20000140

08002eb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <SystemInit+0x14>)
 8002eb6:	2280      	movs	r2, #128	; 0x80
 8002eb8:	0512      	lsls	r2, r2, #20
 8002eba:	609a      	str	r2, [r3, #8]
#endif
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ec8:	480d      	ldr	r0, [pc, #52]	; (8002f00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002eca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002ecc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002ece:	e003      	b.n	8002ed8 <LoopCopyDataInit>

08002ed0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8002ed2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002ed4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002ed6:	3104      	adds	r1, #4

08002ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ed8:	480b      	ldr	r0, [pc, #44]	; (8002f08 <LoopForever+0xa>)
  ldr r3, =_edata
 8002eda:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <LoopForever+0xe>)
  adds r2, r0, r1
 8002edc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002ede:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002ee0:	d3f6      	bcc.n	8002ed0 <CopyDataInit>
  ldr r2, =_sbss
 8002ee2:	4a0b      	ldr	r2, [pc, #44]	; (8002f10 <LoopForever+0x12>)
  b LoopFillZerobss
 8002ee4:	e002      	b.n	8002eec <LoopFillZerobss>

08002ee6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  str  r3, [r2]
 8002ee8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eea:	3204      	adds	r2, #4

08002eec <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002eec:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <LoopForever+0x16>)
  cmp r2, r3
 8002eee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ef0:	d3f9      	bcc.n	8002ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002ef2:	f7ff ffdd 	bl	8002eb0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002ef6:	f000 f817 	bl	8002f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002efa:	f7ff fb69 	bl	80025d0 <main>

08002efe <LoopForever>:

LoopForever:
    b LoopForever
 8002efe:	e7fe      	b.n	8002efe <LoopForever>
  ldr   r0, =_estack
 8002f00:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8002f04:	08003eb4 	.word	0x08003eb4
  ldr r0, =_sdata
 8002f08:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002f0c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002f10:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002f14:	2000013c 	.word	0x2000013c

08002f18 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f18:	e7fe      	b.n	8002f18 <ADC1_COMP_IRQHandler>
	...

08002f1c <__errno>:
 8002f1c:	4b01      	ldr	r3, [pc, #4]	; (8002f24 <__errno+0x8>)
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	4770      	bx	lr
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	2000000c 	.word	0x2000000c

08002f28 <__libc_init_array>:
 8002f28:	b570      	push	{r4, r5, r6, lr}
 8002f2a:	2600      	movs	r6, #0
 8002f2c:	4d0c      	ldr	r5, [pc, #48]	; (8002f60 <__libc_init_array+0x38>)
 8002f2e:	4c0d      	ldr	r4, [pc, #52]	; (8002f64 <__libc_init_array+0x3c>)
 8002f30:	1b64      	subs	r4, r4, r5
 8002f32:	10a4      	asrs	r4, r4, #2
 8002f34:	42a6      	cmp	r6, r4
 8002f36:	d109      	bne.n	8002f4c <__libc_init_array+0x24>
 8002f38:	2600      	movs	r6, #0
 8002f3a:	f000 ff39 	bl	8003db0 <_init>
 8002f3e:	4d0a      	ldr	r5, [pc, #40]	; (8002f68 <__libc_init_array+0x40>)
 8002f40:	4c0a      	ldr	r4, [pc, #40]	; (8002f6c <__libc_init_array+0x44>)
 8002f42:	1b64      	subs	r4, r4, r5
 8002f44:	10a4      	asrs	r4, r4, #2
 8002f46:	42a6      	cmp	r6, r4
 8002f48:	d105      	bne.n	8002f56 <__libc_init_array+0x2e>
 8002f4a:	bd70      	pop	{r4, r5, r6, pc}
 8002f4c:	00b3      	lsls	r3, r6, #2
 8002f4e:	58eb      	ldr	r3, [r5, r3]
 8002f50:	4798      	blx	r3
 8002f52:	3601      	adds	r6, #1
 8002f54:	e7ee      	b.n	8002f34 <__libc_init_array+0xc>
 8002f56:	00b3      	lsls	r3, r6, #2
 8002f58:	58eb      	ldr	r3, [r5, r3]
 8002f5a:	4798      	blx	r3
 8002f5c:	3601      	adds	r6, #1
 8002f5e:	e7f2      	b.n	8002f46 <__libc_init_array+0x1e>
 8002f60:	08003eac 	.word	0x08003eac
 8002f64:	08003eac 	.word	0x08003eac
 8002f68:	08003eac 	.word	0x08003eac
 8002f6c:	08003eb0 	.word	0x08003eb0

08002f70 <memset>:
 8002f70:	0003      	movs	r3, r0
 8002f72:	1812      	adds	r2, r2, r0
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d100      	bne.n	8002f7a <memset+0xa>
 8002f78:	4770      	bx	lr
 8002f7a:	7019      	strb	r1, [r3, #0]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	e7f9      	b.n	8002f74 <memset+0x4>

08002f80 <iprintf>:
 8002f80:	b40f      	push	{r0, r1, r2, r3}
 8002f82:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <iprintf+0x30>)
 8002f84:	b513      	push	{r0, r1, r4, lr}
 8002f86:	681c      	ldr	r4, [r3, #0]
 8002f88:	2c00      	cmp	r4, #0
 8002f8a:	d005      	beq.n	8002f98 <iprintf+0x18>
 8002f8c:	69a3      	ldr	r3, [r4, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d102      	bne.n	8002f98 <iprintf+0x18>
 8002f92:	0020      	movs	r0, r4
 8002f94:	f000 f850 	bl	8003038 <__sinit>
 8002f98:	ab05      	add	r3, sp, #20
 8002f9a:	9a04      	ldr	r2, [sp, #16]
 8002f9c:	68a1      	ldr	r1, [r4, #8]
 8002f9e:	0020      	movs	r0, r4
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	f000 f963 	bl	800326c <_vfiprintf_r>
 8002fa6:	bc16      	pop	{r1, r2, r4}
 8002fa8:	bc08      	pop	{r3}
 8002faa:	b004      	add	sp, #16
 8002fac:	4718      	bx	r3
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	2000000c 	.word	0x2000000c

08002fb4 <std>:
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	b510      	push	{r4, lr}
 8002fb8:	0004      	movs	r4, r0
 8002fba:	6003      	str	r3, [r0, #0]
 8002fbc:	6043      	str	r3, [r0, #4]
 8002fbe:	6083      	str	r3, [r0, #8]
 8002fc0:	8181      	strh	r1, [r0, #12]
 8002fc2:	6643      	str	r3, [r0, #100]	; 0x64
 8002fc4:	81c2      	strh	r2, [r0, #14]
 8002fc6:	6103      	str	r3, [r0, #16]
 8002fc8:	6143      	str	r3, [r0, #20]
 8002fca:	6183      	str	r3, [r0, #24]
 8002fcc:	0019      	movs	r1, r3
 8002fce:	2208      	movs	r2, #8
 8002fd0:	305c      	adds	r0, #92	; 0x5c
 8002fd2:	f7ff ffcd 	bl	8002f70 <memset>
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <std+0x38>)
 8002fd8:	6224      	str	r4, [r4, #32]
 8002fda:	6263      	str	r3, [r4, #36]	; 0x24
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <std+0x3c>)
 8002fde:	62a3      	str	r3, [r4, #40]	; 0x28
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <std+0x40>)
 8002fe2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002fe4:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <std+0x44>)
 8002fe6:	6323      	str	r3, [r4, #48]	; 0x30
 8002fe8:	bd10      	pop	{r4, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	080037a9 	.word	0x080037a9
 8002ff0:	080037d1 	.word	0x080037d1
 8002ff4:	08003809 	.word	0x08003809
 8002ff8:	08003835 	.word	0x08003835

08002ffc <_cleanup_r>:
 8002ffc:	b510      	push	{r4, lr}
 8002ffe:	4902      	ldr	r1, [pc, #8]	; (8003008 <_cleanup_r+0xc>)
 8003000:	f000 f88c 	bl	800311c <_fwalk_reent>
 8003004:	bd10      	pop	{r4, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	08003b39 	.word	0x08003b39

0800300c <__sfmoreglue>:
 800300c:	b570      	push	{r4, r5, r6, lr}
 800300e:	2568      	movs	r5, #104	; 0x68
 8003010:	1e4a      	subs	r2, r1, #1
 8003012:	4355      	muls	r5, r2
 8003014:	000e      	movs	r6, r1
 8003016:	0029      	movs	r1, r5
 8003018:	3174      	adds	r1, #116	; 0x74
 800301a:	f000 f8a1 	bl	8003160 <_malloc_r>
 800301e:	1e04      	subs	r4, r0, #0
 8003020:	d008      	beq.n	8003034 <__sfmoreglue+0x28>
 8003022:	2100      	movs	r1, #0
 8003024:	002a      	movs	r2, r5
 8003026:	6001      	str	r1, [r0, #0]
 8003028:	6046      	str	r6, [r0, #4]
 800302a:	300c      	adds	r0, #12
 800302c:	60a0      	str	r0, [r4, #8]
 800302e:	3268      	adds	r2, #104	; 0x68
 8003030:	f7ff ff9e 	bl	8002f70 <memset>
 8003034:	0020      	movs	r0, r4
 8003036:	bd70      	pop	{r4, r5, r6, pc}

08003038 <__sinit>:
 8003038:	6983      	ldr	r3, [r0, #24]
 800303a:	b513      	push	{r0, r1, r4, lr}
 800303c:	0004      	movs	r4, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d128      	bne.n	8003094 <__sinit+0x5c>
 8003042:	6483      	str	r3, [r0, #72]	; 0x48
 8003044:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003046:	6503      	str	r3, [r0, #80]	; 0x50
 8003048:	4b13      	ldr	r3, [pc, #76]	; (8003098 <__sinit+0x60>)
 800304a:	4a14      	ldr	r2, [pc, #80]	; (800309c <__sinit+0x64>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6282      	str	r2, [r0, #40]	; 0x28
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	4298      	cmp	r0, r3
 8003054:	d101      	bne.n	800305a <__sinit+0x22>
 8003056:	2301      	movs	r3, #1
 8003058:	6183      	str	r3, [r0, #24]
 800305a:	0020      	movs	r0, r4
 800305c:	f000 f820 	bl	80030a0 <__sfp>
 8003060:	6060      	str	r0, [r4, #4]
 8003062:	0020      	movs	r0, r4
 8003064:	f000 f81c 	bl	80030a0 <__sfp>
 8003068:	60a0      	str	r0, [r4, #8]
 800306a:	0020      	movs	r0, r4
 800306c:	f000 f818 	bl	80030a0 <__sfp>
 8003070:	2200      	movs	r2, #0
 8003072:	60e0      	str	r0, [r4, #12]
 8003074:	2104      	movs	r1, #4
 8003076:	6860      	ldr	r0, [r4, #4]
 8003078:	f7ff ff9c 	bl	8002fb4 <std>
 800307c:	2201      	movs	r2, #1
 800307e:	2109      	movs	r1, #9
 8003080:	68a0      	ldr	r0, [r4, #8]
 8003082:	f7ff ff97 	bl	8002fb4 <std>
 8003086:	2202      	movs	r2, #2
 8003088:	2112      	movs	r1, #18
 800308a:	68e0      	ldr	r0, [r4, #12]
 800308c:	f7ff ff92 	bl	8002fb4 <std>
 8003090:	2301      	movs	r3, #1
 8003092:	61a3      	str	r3, [r4, #24]
 8003094:	bd13      	pop	{r0, r1, r4, pc}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	08003e14 	.word	0x08003e14
 800309c:	08002ffd 	.word	0x08002ffd

080030a0 <__sfp>:
 80030a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a2:	4b1c      	ldr	r3, [pc, #112]	; (8003114 <__sfp+0x74>)
 80030a4:	0007      	movs	r7, r0
 80030a6:	681e      	ldr	r6, [r3, #0]
 80030a8:	69b3      	ldr	r3, [r6, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <__sfp+0x14>
 80030ae:	0030      	movs	r0, r6
 80030b0:	f7ff ffc2 	bl	8003038 <__sinit>
 80030b4:	3648      	adds	r6, #72	; 0x48
 80030b6:	68b4      	ldr	r4, [r6, #8]
 80030b8:	6873      	ldr	r3, [r6, #4]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	d504      	bpl.n	80030c8 <__sfp+0x28>
 80030be:	6833      	ldr	r3, [r6, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d007      	beq.n	80030d4 <__sfp+0x34>
 80030c4:	6836      	ldr	r6, [r6, #0]
 80030c6:	e7f6      	b.n	80030b6 <__sfp+0x16>
 80030c8:	220c      	movs	r2, #12
 80030ca:	5ea5      	ldrsh	r5, [r4, r2]
 80030cc:	2d00      	cmp	r5, #0
 80030ce:	d00d      	beq.n	80030ec <__sfp+0x4c>
 80030d0:	3468      	adds	r4, #104	; 0x68
 80030d2:	e7f2      	b.n	80030ba <__sfp+0x1a>
 80030d4:	2104      	movs	r1, #4
 80030d6:	0038      	movs	r0, r7
 80030d8:	f7ff ff98 	bl	800300c <__sfmoreglue>
 80030dc:	6030      	str	r0, [r6, #0]
 80030de:	2800      	cmp	r0, #0
 80030e0:	d1f0      	bne.n	80030c4 <__sfp+0x24>
 80030e2:	230c      	movs	r3, #12
 80030e4:	0004      	movs	r4, r0
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	0020      	movs	r0, r4
 80030ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030ec:	0020      	movs	r0, r4
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <__sfp+0x78>)
 80030f0:	6665      	str	r5, [r4, #100]	; 0x64
 80030f2:	6025      	str	r5, [r4, #0]
 80030f4:	6065      	str	r5, [r4, #4]
 80030f6:	60a5      	str	r5, [r4, #8]
 80030f8:	60e3      	str	r3, [r4, #12]
 80030fa:	6125      	str	r5, [r4, #16]
 80030fc:	6165      	str	r5, [r4, #20]
 80030fe:	61a5      	str	r5, [r4, #24]
 8003100:	2208      	movs	r2, #8
 8003102:	0029      	movs	r1, r5
 8003104:	305c      	adds	r0, #92	; 0x5c
 8003106:	f7ff ff33 	bl	8002f70 <memset>
 800310a:	6365      	str	r5, [r4, #52]	; 0x34
 800310c:	63a5      	str	r5, [r4, #56]	; 0x38
 800310e:	64a5      	str	r5, [r4, #72]	; 0x48
 8003110:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003112:	e7e9      	b.n	80030e8 <__sfp+0x48>
 8003114:	08003e14 	.word	0x08003e14
 8003118:	ffff0001 	.word	0xffff0001

0800311c <_fwalk_reent>:
 800311c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800311e:	0004      	movs	r4, r0
 8003120:	0007      	movs	r7, r0
 8003122:	2600      	movs	r6, #0
 8003124:	9101      	str	r1, [sp, #4]
 8003126:	3448      	adds	r4, #72	; 0x48
 8003128:	2c00      	cmp	r4, #0
 800312a:	d101      	bne.n	8003130 <_fwalk_reent+0x14>
 800312c:	0030      	movs	r0, r6
 800312e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003130:	6863      	ldr	r3, [r4, #4]
 8003132:	68a5      	ldr	r5, [r4, #8]
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	9b00      	ldr	r3, [sp, #0]
 8003138:	3b01      	subs	r3, #1
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	d501      	bpl.n	8003142 <_fwalk_reent+0x26>
 800313e:	6824      	ldr	r4, [r4, #0]
 8003140:	e7f2      	b.n	8003128 <_fwalk_reent+0xc>
 8003142:	89ab      	ldrh	r3, [r5, #12]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d908      	bls.n	800315a <_fwalk_reent+0x3e>
 8003148:	220e      	movs	r2, #14
 800314a:	5eab      	ldrsh	r3, [r5, r2]
 800314c:	3301      	adds	r3, #1
 800314e:	d004      	beq.n	800315a <_fwalk_reent+0x3e>
 8003150:	0029      	movs	r1, r5
 8003152:	0038      	movs	r0, r7
 8003154:	9b01      	ldr	r3, [sp, #4]
 8003156:	4798      	blx	r3
 8003158:	4306      	orrs	r6, r0
 800315a:	3568      	adds	r5, #104	; 0x68
 800315c:	e7eb      	b.n	8003136 <_fwalk_reent+0x1a>
	...

08003160 <_malloc_r>:
 8003160:	2303      	movs	r3, #3
 8003162:	b570      	push	{r4, r5, r6, lr}
 8003164:	1ccd      	adds	r5, r1, #3
 8003166:	439d      	bics	r5, r3
 8003168:	3508      	adds	r5, #8
 800316a:	0006      	movs	r6, r0
 800316c:	2d0c      	cmp	r5, #12
 800316e:	d21e      	bcs.n	80031ae <_malloc_r+0x4e>
 8003170:	250c      	movs	r5, #12
 8003172:	42a9      	cmp	r1, r5
 8003174:	d81d      	bhi.n	80031b2 <_malloc_r+0x52>
 8003176:	0030      	movs	r0, r6
 8003178:	f000 fd95 	bl	8003ca6 <__malloc_lock>
 800317c:	4a25      	ldr	r2, [pc, #148]	; (8003214 <_malloc_r+0xb4>)
 800317e:	6814      	ldr	r4, [r2, #0]
 8003180:	0021      	movs	r1, r4
 8003182:	2900      	cmp	r1, #0
 8003184:	d119      	bne.n	80031ba <_malloc_r+0x5a>
 8003186:	4c24      	ldr	r4, [pc, #144]	; (8003218 <_malloc_r+0xb8>)
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d103      	bne.n	8003196 <_malloc_r+0x36>
 800318e:	0030      	movs	r0, r6
 8003190:	f000 faf8 	bl	8003784 <_sbrk_r>
 8003194:	6020      	str	r0, [r4, #0]
 8003196:	0029      	movs	r1, r5
 8003198:	0030      	movs	r0, r6
 800319a:	f000 faf3 	bl	8003784 <_sbrk_r>
 800319e:	1c43      	adds	r3, r0, #1
 80031a0:	d12b      	bne.n	80031fa <_malloc_r+0x9a>
 80031a2:	230c      	movs	r3, #12
 80031a4:	0030      	movs	r0, r6
 80031a6:	6033      	str	r3, [r6, #0]
 80031a8:	f000 fd7e 	bl	8003ca8 <__malloc_unlock>
 80031ac:	e003      	b.n	80031b6 <_malloc_r+0x56>
 80031ae:	2d00      	cmp	r5, #0
 80031b0:	dadf      	bge.n	8003172 <_malloc_r+0x12>
 80031b2:	230c      	movs	r3, #12
 80031b4:	6033      	str	r3, [r6, #0]
 80031b6:	2000      	movs	r0, #0
 80031b8:	bd70      	pop	{r4, r5, r6, pc}
 80031ba:	680b      	ldr	r3, [r1, #0]
 80031bc:	1b5b      	subs	r3, r3, r5
 80031be:	d419      	bmi.n	80031f4 <_malloc_r+0x94>
 80031c0:	2b0b      	cmp	r3, #11
 80031c2:	d903      	bls.n	80031cc <_malloc_r+0x6c>
 80031c4:	600b      	str	r3, [r1, #0]
 80031c6:	18cc      	adds	r4, r1, r3
 80031c8:	6025      	str	r5, [r4, #0]
 80031ca:	e003      	b.n	80031d4 <_malloc_r+0x74>
 80031cc:	684b      	ldr	r3, [r1, #4]
 80031ce:	428c      	cmp	r4, r1
 80031d0:	d10d      	bne.n	80031ee <_malloc_r+0x8e>
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	0030      	movs	r0, r6
 80031d6:	f000 fd67 	bl	8003ca8 <__malloc_unlock>
 80031da:	0020      	movs	r0, r4
 80031dc:	2207      	movs	r2, #7
 80031de:	300b      	adds	r0, #11
 80031e0:	1d23      	adds	r3, r4, #4
 80031e2:	4390      	bics	r0, r2
 80031e4:	1ac3      	subs	r3, r0, r3
 80031e6:	d0e7      	beq.n	80031b8 <_malloc_r+0x58>
 80031e8:	425a      	negs	r2, r3
 80031ea:	50e2      	str	r2, [r4, r3]
 80031ec:	e7e4      	b.n	80031b8 <_malloc_r+0x58>
 80031ee:	6063      	str	r3, [r4, #4]
 80031f0:	000c      	movs	r4, r1
 80031f2:	e7ef      	b.n	80031d4 <_malloc_r+0x74>
 80031f4:	000c      	movs	r4, r1
 80031f6:	6849      	ldr	r1, [r1, #4]
 80031f8:	e7c3      	b.n	8003182 <_malloc_r+0x22>
 80031fa:	2303      	movs	r3, #3
 80031fc:	1cc4      	adds	r4, r0, #3
 80031fe:	439c      	bics	r4, r3
 8003200:	42a0      	cmp	r0, r4
 8003202:	d0e1      	beq.n	80031c8 <_malloc_r+0x68>
 8003204:	1a21      	subs	r1, r4, r0
 8003206:	0030      	movs	r0, r6
 8003208:	f000 fabc 	bl	8003784 <_sbrk_r>
 800320c:	1c43      	adds	r3, r0, #1
 800320e:	d1db      	bne.n	80031c8 <_malloc_r+0x68>
 8003210:	e7c7      	b.n	80031a2 <_malloc_r+0x42>
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	20000090 	.word	0x20000090
 8003218:	20000094 	.word	0x20000094

0800321c <__sfputc_r>:
 800321c:	6893      	ldr	r3, [r2, #8]
 800321e:	b510      	push	{r4, lr}
 8003220:	3b01      	subs	r3, #1
 8003222:	6093      	str	r3, [r2, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	da04      	bge.n	8003232 <__sfputc_r+0x16>
 8003228:	6994      	ldr	r4, [r2, #24]
 800322a:	42a3      	cmp	r3, r4
 800322c:	db07      	blt.n	800323e <__sfputc_r+0x22>
 800322e:	290a      	cmp	r1, #10
 8003230:	d005      	beq.n	800323e <__sfputc_r+0x22>
 8003232:	6813      	ldr	r3, [r2, #0]
 8003234:	1c58      	adds	r0, r3, #1
 8003236:	6010      	str	r0, [r2, #0]
 8003238:	7019      	strb	r1, [r3, #0]
 800323a:	0008      	movs	r0, r1
 800323c:	bd10      	pop	{r4, pc}
 800323e:	f000 faff 	bl	8003840 <__swbuf_r>
 8003242:	0001      	movs	r1, r0
 8003244:	e7f9      	b.n	800323a <__sfputc_r+0x1e>

08003246 <__sfputs_r>:
 8003246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003248:	0006      	movs	r6, r0
 800324a:	000f      	movs	r7, r1
 800324c:	0014      	movs	r4, r2
 800324e:	18d5      	adds	r5, r2, r3
 8003250:	42ac      	cmp	r4, r5
 8003252:	d101      	bne.n	8003258 <__sfputs_r+0x12>
 8003254:	2000      	movs	r0, #0
 8003256:	e007      	b.n	8003268 <__sfputs_r+0x22>
 8003258:	7821      	ldrb	r1, [r4, #0]
 800325a:	003a      	movs	r2, r7
 800325c:	0030      	movs	r0, r6
 800325e:	f7ff ffdd 	bl	800321c <__sfputc_r>
 8003262:	3401      	adds	r4, #1
 8003264:	1c43      	adds	r3, r0, #1
 8003266:	d1f3      	bne.n	8003250 <__sfputs_r+0xa>
 8003268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800326c <_vfiprintf_r>:
 800326c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800326e:	b0a1      	sub	sp, #132	; 0x84
 8003270:	9003      	str	r0, [sp, #12]
 8003272:	000f      	movs	r7, r1
 8003274:	0016      	movs	r6, r2
 8003276:	001d      	movs	r5, r3
 8003278:	2800      	cmp	r0, #0
 800327a:	d005      	beq.n	8003288 <_vfiprintf_r+0x1c>
 800327c:	6983      	ldr	r3, [r0, #24]
 800327e:	9305      	str	r3, [sp, #20]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <_vfiprintf_r+0x1c>
 8003284:	f7ff fed8 	bl	8003038 <__sinit>
 8003288:	4b7b      	ldr	r3, [pc, #492]	; (8003478 <_vfiprintf_r+0x20c>)
 800328a:	429f      	cmp	r7, r3
 800328c:	d15c      	bne.n	8003348 <_vfiprintf_r+0xdc>
 800328e:	9b03      	ldr	r3, [sp, #12]
 8003290:	685f      	ldr	r7, [r3, #4]
 8003292:	89bb      	ldrh	r3, [r7, #12]
 8003294:	071b      	lsls	r3, r3, #28
 8003296:	d563      	bpl.n	8003360 <_vfiprintf_r+0xf4>
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d060      	beq.n	8003360 <_vfiprintf_r+0xf4>
 800329e:	2300      	movs	r3, #0
 80032a0:	ac08      	add	r4, sp, #32
 80032a2:	6163      	str	r3, [r4, #20]
 80032a4:	3320      	adds	r3, #32
 80032a6:	7663      	strb	r3, [r4, #25]
 80032a8:	3310      	adds	r3, #16
 80032aa:	76a3      	strb	r3, [r4, #26]
 80032ac:	9507      	str	r5, [sp, #28]
 80032ae:	0035      	movs	r5, r6
 80032b0:	782b      	ldrb	r3, [r5, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <_vfiprintf_r+0x4e>
 80032b6:	2b25      	cmp	r3, #37	; 0x25
 80032b8:	d15c      	bne.n	8003374 <_vfiprintf_r+0x108>
 80032ba:	1bab      	subs	r3, r5, r6
 80032bc:	9305      	str	r3, [sp, #20]
 80032be:	d00c      	beq.n	80032da <_vfiprintf_r+0x6e>
 80032c0:	0032      	movs	r2, r6
 80032c2:	0039      	movs	r1, r7
 80032c4:	9803      	ldr	r0, [sp, #12]
 80032c6:	f7ff ffbe 	bl	8003246 <__sfputs_r>
 80032ca:	1c43      	adds	r3, r0, #1
 80032cc:	d100      	bne.n	80032d0 <_vfiprintf_r+0x64>
 80032ce:	e0c4      	b.n	800345a <_vfiprintf_r+0x1ee>
 80032d0:	6962      	ldr	r2, [r4, #20]
 80032d2:	9b05      	ldr	r3, [sp, #20]
 80032d4:	4694      	mov	ip, r2
 80032d6:	4463      	add	r3, ip
 80032d8:	6163      	str	r3, [r4, #20]
 80032da:	782b      	ldrb	r3, [r5, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d100      	bne.n	80032e2 <_vfiprintf_r+0x76>
 80032e0:	e0bb      	b.n	800345a <_vfiprintf_r+0x1ee>
 80032e2:	2201      	movs	r2, #1
 80032e4:	2300      	movs	r3, #0
 80032e6:	4252      	negs	r2, r2
 80032e8:	6062      	str	r2, [r4, #4]
 80032ea:	a904      	add	r1, sp, #16
 80032ec:	3254      	adds	r2, #84	; 0x54
 80032ee:	1852      	adds	r2, r2, r1
 80032f0:	1c6e      	adds	r6, r5, #1
 80032f2:	6023      	str	r3, [r4, #0]
 80032f4:	60e3      	str	r3, [r4, #12]
 80032f6:	60a3      	str	r3, [r4, #8]
 80032f8:	7013      	strb	r3, [r2, #0]
 80032fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80032fc:	7831      	ldrb	r1, [r6, #0]
 80032fe:	2205      	movs	r2, #5
 8003300:	485e      	ldr	r0, [pc, #376]	; (800347c <_vfiprintf_r+0x210>)
 8003302:	f000 fcc5 	bl	8003c90 <memchr>
 8003306:	1c75      	adds	r5, r6, #1
 8003308:	2800      	cmp	r0, #0
 800330a:	d135      	bne.n	8003378 <_vfiprintf_r+0x10c>
 800330c:	6822      	ldr	r2, [r4, #0]
 800330e:	06d3      	lsls	r3, r2, #27
 8003310:	d504      	bpl.n	800331c <_vfiprintf_r+0xb0>
 8003312:	2353      	movs	r3, #83	; 0x53
 8003314:	a904      	add	r1, sp, #16
 8003316:	185b      	adds	r3, r3, r1
 8003318:	2120      	movs	r1, #32
 800331a:	7019      	strb	r1, [r3, #0]
 800331c:	0713      	lsls	r3, r2, #28
 800331e:	d504      	bpl.n	800332a <_vfiprintf_r+0xbe>
 8003320:	2353      	movs	r3, #83	; 0x53
 8003322:	a904      	add	r1, sp, #16
 8003324:	185b      	adds	r3, r3, r1
 8003326:	212b      	movs	r1, #43	; 0x2b
 8003328:	7019      	strb	r1, [r3, #0]
 800332a:	7833      	ldrb	r3, [r6, #0]
 800332c:	2b2a      	cmp	r3, #42	; 0x2a
 800332e:	d02c      	beq.n	800338a <_vfiprintf_r+0x11e>
 8003330:	0035      	movs	r5, r6
 8003332:	2100      	movs	r1, #0
 8003334:	200a      	movs	r0, #10
 8003336:	68e3      	ldr	r3, [r4, #12]
 8003338:	782a      	ldrb	r2, [r5, #0]
 800333a:	1c6e      	adds	r6, r5, #1
 800333c:	3a30      	subs	r2, #48	; 0x30
 800333e:	2a09      	cmp	r2, #9
 8003340:	d964      	bls.n	800340c <_vfiprintf_r+0x1a0>
 8003342:	2900      	cmp	r1, #0
 8003344:	d02e      	beq.n	80033a4 <_vfiprintf_r+0x138>
 8003346:	e026      	b.n	8003396 <_vfiprintf_r+0x12a>
 8003348:	4b4d      	ldr	r3, [pc, #308]	; (8003480 <_vfiprintf_r+0x214>)
 800334a:	429f      	cmp	r7, r3
 800334c:	d102      	bne.n	8003354 <_vfiprintf_r+0xe8>
 800334e:	9b03      	ldr	r3, [sp, #12]
 8003350:	689f      	ldr	r7, [r3, #8]
 8003352:	e79e      	b.n	8003292 <_vfiprintf_r+0x26>
 8003354:	4b4b      	ldr	r3, [pc, #300]	; (8003484 <_vfiprintf_r+0x218>)
 8003356:	429f      	cmp	r7, r3
 8003358:	d19b      	bne.n	8003292 <_vfiprintf_r+0x26>
 800335a:	9b03      	ldr	r3, [sp, #12]
 800335c:	68df      	ldr	r7, [r3, #12]
 800335e:	e798      	b.n	8003292 <_vfiprintf_r+0x26>
 8003360:	0039      	movs	r1, r7
 8003362:	9803      	ldr	r0, [sp, #12]
 8003364:	f000 fad6 	bl	8003914 <__swsetup_r>
 8003368:	2800      	cmp	r0, #0
 800336a:	d098      	beq.n	800329e <_vfiprintf_r+0x32>
 800336c:	2001      	movs	r0, #1
 800336e:	4240      	negs	r0, r0
 8003370:	b021      	add	sp, #132	; 0x84
 8003372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003374:	3501      	adds	r5, #1
 8003376:	e79b      	b.n	80032b0 <_vfiprintf_r+0x44>
 8003378:	4b40      	ldr	r3, [pc, #256]	; (800347c <_vfiprintf_r+0x210>)
 800337a:	6822      	ldr	r2, [r4, #0]
 800337c:	1ac0      	subs	r0, r0, r3
 800337e:	2301      	movs	r3, #1
 8003380:	4083      	lsls	r3, r0
 8003382:	4313      	orrs	r3, r2
 8003384:	6023      	str	r3, [r4, #0]
 8003386:	002e      	movs	r6, r5
 8003388:	e7b8      	b.n	80032fc <_vfiprintf_r+0x90>
 800338a:	9b07      	ldr	r3, [sp, #28]
 800338c:	1d19      	adds	r1, r3, #4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	9107      	str	r1, [sp, #28]
 8003392:	2b00      	cmp	r3, #0
 8003394:	db01      	blt.n	800339a <_vfiprintf_r+0x12e>
 8003396:	930b      	str	r3, [sp, #44]	; 0x2c
 8003398:	e004      	b.n	80033a4 <_vfiprintf_r+0x138>
 800339a:	425b      	negs	r3, r3
 800339c:	60e3      	str	r3, [r4, #12]
 800339e:	2302      	movs	r3, #2
 80033a0:	4313      	orrs	r3, r2
 80033a2:	6023      	str	r3, [r4, #0]
 80033a4:	782b      	ldrb	r3, [r5, #0]
 80033a6:	2b2e      	cmp	r3, #46	; 0x2e
 80033a8:	d10a      	bne.n	80033c0 <_vfiprintf_r+0x154>
 80033aa:	786b      	ldrb	r3, [r5, #1]
 80033ac:	2b2a      	cmp	r3, #42	; 0x2a
 80033ae:	d135      	bne.n	800341c <_vfiprintf_r+0x1b0>
 80033b0:	9b07      	ldr	r3, [sp, #28]
 80033b2:	3502      	adds	r5, #2
 80033b4:	1d1a      	adds	r2, r3, #4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	9207      	str	r2, [sp, #28]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	db2b      	blt.n	8003416 <_vfiprintf_r+0x1aa>
 80033be:	9309      	str	r3, [sp, #36]	; 0x24
 80033c0:	4e31      	ldr	r6, [pc, #196]	; (8003488 <_vfiprintf_r+0x21c>)
 80033c2:	7829      	ldrb	r1, [r5, #0]
 80033c4:	2203      	movs	r2, #3
 80033c6:	0030      	movs	r0, r6
 80033c8:	f000 fc62 	bl	8003c90 <memchr>
 80033cc:	2800      	cmp	r0, #0
 80033ce:	d006      	beq.n	80033de <_vfiprintf_r+0x172>
 80033d0:	2340      	movs	r3, #64	; 0x40
 80033d2:	1b80      	subs	r0, r0, r6
 80033d4:	4083      	lsls	r3, r0
 80033d6:	6822      	ldr	r2, [r4, #0]
 80033d8:	3501      	adds	r5, #1
 80033da:	4313      	orrs	r3, r2
 80033dc:	6023      	str	r3, [r4, #0]
 80033de:	7829      	ldrb	r1, [r5, #0]
 80033e0:	2206      	movs	r2, #6
 80033e2:	482a      	ldr	r0, [pc, #168]	; (800348c <_vfiprintf_r+0x220>)
 80033e4:	1c6e      	adds	r6, r5, #1
 80033e6:	7621      	strb	r1, [r4, #24]
 80033e8:	f000 fc52 	bl	8003c90 <memchr>
 80033ec:	2800      	cmp	r0, #0
 80033ee:	d03a      	beq.n	8003466 <_vfiprintf_r+0x1fa>
 80033f0:	4b27      	ldr	r3, [pc, #156]	; (8003490 <_vfiprintf_r+0x224>)
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d125      	bne.n	8003442 <_vfiprintf_r+0x1d6>
 80033f6:	2207      	movs	r2, #7
 80033f8:	9b07      	ldr	r3, [sp, #28]
 80033fa:	3307      	adds	r3, #7
 80033fc:	4393      	bics	r3, r2
 80033fe:	3308      	adds	r3, #8
 8003400:	9307      	str	r3, [sp, #28]
 8003402:	6963      	ldr	r3, [r4, #20]
 8003404:	9a04      	ldr	r2, [sp, #16]
 8003406:	189b      	adds	r3, r3, r2
 8003408:	6163      	str	r3, [r4, #20]
 800340a:	e750      	b.n	80032ae <_vfiprintf_r+0x42>
 800340c:	4343      	muls	r3, r0
 800340e:	2101      	movs	r1, #1
 8003410:	189b      	adds	r3, r3, r2
 8003412:	0035      	movs	r5, r6
 8003414:	e790      	b.n	8003338 <_vfiprintf_r+0xcc>
 8003416:	2301      	movs	r3, #1
 8003418:	425b      	negs	r3, r3
 800341a:	e7d0      	b.n	80033be <_vfiprintf_r+0x152>
 800341c:	2300      	movs	r3, #0
 800341e:	200a      	movs	r0, #10
 8003420:	001a      	movs	r2, r3
 8003422:	3501      	adds	r5, #1
 8003424:	6063      	str	r3, [r4, #4]
 8003426:	7829      	ldrb	r1, [r5, #0]
 8003428:	1c6e      	adds	r6, r5, #1
 800342a:	3930      	subs	r1, #48	; 0x30
 800342c:	2909      	cmp	r1, #9
 800342e:	d903      	bls.n	8003438 <_vfiprintf_r+0x1cc>
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0c5      	beq.n	80033c0 <_vfiprintf_r+0x154>
 8003434:	9209      	str	r2, [sp, #36]	; 0x24
 8003436:	e7c3      	b.n	80033c0 <_vfiprintf_r+0x154>
 8003438:	4342      	muls	r2, r0
 800343a:	2301      	movs	r3, #1
 800343c:	1852      	adds	r2, r2, r1
 800343e:	0035      	movs	r5, r6
 8003440:	e7f1      	b.n	8003426 <_vfiprintf_r+0x1ba>
 8003442:	ab07      	add	r3, sp, #28
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	003a      	movs	r2, r7
 8003448:	4b12      	ldr	r3, [pc, #72]	; (8003494 <_vfiprintf_r+0x228>)
 800344a:	0021      	movs	r1, r4
 800344c:	9803      	ldr	r0, [sp, #12]
 800344e:	e000      	b.n	8003452 <_vfiprintf_r+0x1e6>
 8003450:	bf00      	nop
 8003452:	9004      	str	r0, [sp, #16]
 8003454:	9b04      	ldr	r3, [sp, #16]
 8003456:	3301      	adds	r3, #1
 8003458:	d1d3      	bne.n	8003402 <_vfiprintf_r+0x196>
 800345a:	89bb      	ldrh	r3, [r7, #12]
 800345c:	065b      	lsls	r3, r3, #25
 800345e:	d500      	bpl.n	8003462 <_vfiprintf_r+0x1f6>
 8003460:	e784      	b.n	800336c <_vfiprintf_r+0x100>
 8003462:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003464:	e784      	b.n	8003370 <_vfiprintf_r+0x104>
 8003466:	ab07      	add	r3, sp, #28
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	003a      	movs	r2, r7
 800346c:	4b09      	ldr	r3, [pc, #36]	; (8003494 <_vfiprintf_r+0x228>)
 800346e:	0021      	movs	r1, r4
 8003470:	9803      	ldr	r0, [sp, #12]
 8003472:	f000 f87f 	bl	8003574 <_printf_i>
 8003476:	e7ec      	b.n	8003452 <_vfiprintf_r+0x1e6>
 8003478:	08003e38 	.word	0x08003e38
 800347c:	08003e78 	.word	0x08003e78
 8003480:	08003e58 	.word	0x08003e58
 8003484:	08003e18 	.word	0x08003e18
 8003488:	08003e7e 	.word	0x08003e7e
 800348c:	08003e82 	.word	0x08003e82
 8003490:	00000000 	.word	0x00000000
 8003494:	08003247 	.word	0x08003247

08003498 <_printf_common>:
 8003498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800349a:	0015      	movs	r5, r2
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	688a      	ldr	r2, [r1, #8]
 80034a0:	690b      	ldr	r3, [r1, #16]
 80034a2:	9000      	str	r0, [sp, #0]
 80034a4:	000c      	movs	r4, r1
 80034a6:	4293      	cmp	r3, r2
 80034a8:	da00      	bge.n	80034ac <_printf_common+0x14>
 80034aa:	0013      	movs	r3, r2
 80034ac:	0022      	movs	r2, r4
 80034ae:	602b      	str	r3, [r5, #0]
 80034b0:	3243      	adds	r2, #67	; 0x43
 80034b2:	7812      	ldrb	r2, [r2, #0]
 80034b4:	2a00      	cmp	r2, #0
 80034b6:	d001      	beq.n	80034bc <_printf_common+0x24>
 80034b8:	3301      	adds	r3, #1
 80034ba:	602b      	str	r3, [r5, #0]
 80034bc:	6823      	ldr	r3, [r4, #0]
 80034be:	069b      	lsls	r3, r3, #26
 80034c0:	d502      	bpl.n	80034c8 <_printf_common+0x30>
 80034c2:	682b      	ldr	r3, [r5, #0]
 80034c4:	3302      	adds	r3, #2
 80034c6:	602b      	str	r3, [r5, #0]
 80034c8:	2706      	movs	r7, #6
 80034ca:	6823      	ldr	r3, [r4, #0]
 80034cc:	401f      	ands	r7, r3
 80034ce:	d027      	beq.n	8003520 <_printf_common+0x88>
 80034d0:	0023      	movs	r3, r4
 80034d2:	3343      	adds	r3, #67	; 0x43
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	1e5a      	subs	r2, r3, #1
 80034d8:	4193      	sbcs	r3, r2
 80034da:	6822      	ldr	r2, [r4, #0]
 80034dc:	0692      	lsls	r2, r2, #26
 80034de:	d430      	bmi.n	8003542 <_printf_common+0xaa>
 80034e0:	0022      	movs	r2, r4
 80034e2:	9901      	ldr	r1, [sp, #4]
 80034e4:	3243      	adds	r2, #67	; 0x43
 80034e6:	9800      	ldr	r0, [sp, #0]
 80034e8:	9e08      	ldr	r6, [sp, #32]
 80034ea:	47b0      	blx	r6
 80034ec:	1c43      	adds	r3, r0, #1
 80034ee:	d025      	beq.n	800353c <_printf_common+0xa4>
 80034f0:	2306      	movs	r3, #6
 80034f2:	6820      	ldr	r0, [r4, #0]
 80034f4:	682a      	ldr	r2, [r5, #0]
 80034f6:	68e1      	ldr	r1, [r4, #12]
 80034f8:	4003      	ands	r3, r0
 80034fa:	2500      	movs	r5, #0
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d103      	bne.n	8003508 <_printf_common+0x70>
 8003500:	1a8d      	subs	r5, r1, r2
 8003502:	43eb      	mvns	r3, r5
 8003504:	17db      	asrs	r3, r3, #31
 8003506:	401d      	ands	r5, r3
 8003508:	68a3      	ldr	r3, [r4, #8]
 800350a:	6922      	ldr	r2, [r4, #16]
 800350c:	4293      	cmp	r3, r2
 800350e:	dd01      	ble.n	8003514 <_printf_common+0x7c>
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	18ed      	adds	r5, r5, r3
 8003514:	2700      	movs	r7, #0
 8003516:	42bd      	cmp	r5, r7
 8003518:	d120      	bne.n	800355c <_printf_common+0xc4>
 800351a:	2000      	movs	r0, #0
 800351c:	e010      	b.n	8003540 <_printf_common+0xa8>
 800351e:	3701      	adds	r7, #1
 8003520:	68e3      	ldr	r3, [r4, #12]
 8003522:	682a      	ldr	r2, [r5, #0]
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	42bb      	cmp	r3, r7
 8003528:	ddd2      	ble.n	80034d0 <_printf_common+0x38>
 800352a:	0022      	movs	r2, r4
 800352c:	2301      	movs	r3, #1
 800352e:	3219      	adds	r2, #25
 8003530:	9901      	ldr	r1, [sp, #4]
 8003532:	9800      	ldr	r0, [sp, #0]
 8003534:	9e08      	ldr	r6, [sp, #32]
 8003536:	47b0      	blx	r6
 8003538:	1c43      	adds	r3, r0, #1
 800353a:	d1f0      	bne.n	800351e <_printf_common+0x86>
 800353c:	2001      	movs	r0, #1
 800353e:	4240      	negs	r0, r0
 8003540:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003542:	2030      	movs	r0, #48	; 0x30
 8003544:	18e1      	adds	r1, r4, r3
 8003546:	3143      	adds	r1, #67	; 0x43
 8003548:	7008      	strb	r0, [r1, #0]
 800354a:	0021      	movs	r1, r4
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	3145      	adds	r1, #69	; 0x45
 8003550:	7809      	ldrb	r1, [r1, #0]
 8003552:	18a2      	adds	r2, r4, r2
 8003554:	3243      	adds	r2, #67	; 0x43
 8003556:	3302      	adds	r3, #2
 8003558:	7011      	strb	r1, [r2, #0]
 800355a:	e7c1      	b.n	80034e0 <_printf_common+0x48>
 800355c:	0022      	movs	r2, r4
 800355e:	2301      	movs	r3, #1
 8003560:	321a      	adds	r2, #26
 8003562:	9901      	ldr	r1, [sp, #4]
 8003564:	9800      	ldr	r0, [sp, #0]
 8003566:	9e08      	ldr	r6, [sp, #32]
 8003568:	47b0      	blx	r6
 800356a:	1c43      	adds	r3, r0, #1
 800356c:	d0e6      	beq.n	800353c <_printf_common+0xa4>
 800356e:	3701      	adds	r7, #1
 8003570:	e7d1      	b.n	8003516 <_printf_common+0x7e>
	...

08003574 <_printf_i>:
 8003574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003576:	b089      	sub	sp, #36	; 0x24
 8003578:	9204      	str	r2, [sp, #16]
 800357a:	000a      	movs	r2, r1
 800357c:	3243      	adds	r2, #67	; 0x43
 800357e:	9305      	str	r3, [sp, #20]
 8003580:	9003      	str	r0, [sp, #12]
 8003582:	9202      	str	r2, [sp, #8]
 8003584:	7e0a      	ldrb	r2, [r1, #24]
 8003586:	000c      	movs	r4, r1
 8003588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800358a:	2a6e      	cmp	r2, #110	; 0x6e
 800358c:	d100      	bne.n	8003590 <_printf_i+0x1c>
 800358e:	e086      	b.n	800369e <_printf_i+0x12a>
 8003590:	d81f      	bhi.n	80035d2 <_printf_i+0x5e>
 8003592:	2a63      	cmp	r2, #99	; 0x63
 8003594:	d033      	beq.n	80035fe <_printf_i+0x8a>
 8003596:	d808      	bhi.n	80035aa <_printf_i+0x36>
 8003598:	2a00      	cmp	r2, #0
 800359a:	d100      	bne.n	800359e <_printf_i+0x2a>
 800359c:	e08c      	b.n	80036b8 <_printf_i+0x144>
 800359e:	2a58      	cmp	r2, #88	; 0x58
 80035a0:	d04d      	beq.n	800363e <_printf_i+0xca>
 80035a2:	0025      	movs	r5, r4
 80035a4:	3542      	adds	r5, #66	; 0x42
 80035a6:	702a      	strb	r2, [r5, #0]
 80035a8:	e030      	b.n	800360c <_printf_i+0x98>
 80035aa:	2a64      	cmp	r2, #100	; 0x64
 80035ac:	d001      	beq.n	80035b2 <_printf_i+0x3e>
 80035ae:	2a69      	cmp	r2, #105	; 0x69
 80035b0:	d1f7      	bne.n	80035a2 <_printf_i+0x2e>
 80035b2:	6819      	ldr	r1, [r3, #0]
 80035b4:	6825      	ldr	r5, [r4, #0]
 80035b6:	1d0a      	adds	r2, r1, #4
 80035b8:	0628      	lsls	r0, r5, #24
 80035ba:	d529      	bpl.n	8003610 <_printf_i+0x9c>
 80035bc:	6808      	ldr	r0, [r1, #0]
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	2800      	cmp	r0, #0
 80035c2:	da03      	bge.n	80035cc <_printf_i+0x58>
 80035c4:	232d      	movs	r3, #45	; 0x2d
 80035c6:	9a02      	ldr	r2, [sp, #8]
 80035c8:	4240      	negs	r0, r0
 80035ca:	7013      	strb	r3, [r2, #0]
 80035cc:	4e6b      	ldr	r6, [pc, #428]	; (800377c <_printf_i+0x208>)
 80035ce:	270a      	movs	r7, #10
 80035d0:	e04f      	b.n	8003672 <_printf_i+0xfe>
 80035d2:	2a73      	cmp	r2, #115	; 0x73
 80035d4:	d074      	beq.n	80036c0 <_printf_i+0x14c>
 80035d6:	d808      	bhi.n	80035ea <_printf_i+0x76>
 80035d8:	2a6f      	cmp	r2, #111	; 0x6f
 80035da:	d01f      	beq.n	800361c <_printf_i+0xa8>
 80035dc:	2a70      	cmp	r2, #112	; 0x70
 80035de:	d1e0      	bne.n	80035a2 <_printf_i+0x2e>
 80035e0:	2220      	movs	r2, #32
 80035e2:	6809      	ldr	r1, [r1, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	6022      	str	r2, [r4, #0]
 80035e8:	e003      	b.n	80035f2 <_printf_i+0x7e>
 80035ea:	2a75      	cmp	r2, #117	; 0x75
 80035ec:	d016      	beq.n	800361c <_printf_i+0xa8>
 80035ee:	2a78      	cmp	r2, #120	; 0x78
 80035f0:	d1d7      	bne.n	80035a2 <_printf_i+0x2e>
 80035f2:	0022      	movs	r2, r4
 80035f4:	2178      	movs	r1, #120	; 0x78
 80035f6:	3245      	adds	r2, #69	; 0x45
 80035f8:	7011      	strb	r1, [r2, #0]
 80035fa:	4e61      	ldr	r6, [pc, #388]	; (8003780 <_printf_i+0x20c>)
 80035fc:	e022      	b.n	8003644 <_printf_i+0xd0>
 80035fe:	0025      	movs	r5, r4
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	3542      	adds	r5, #66	; 0x42
 8003604:	1d11      	adds	r1, r2, #4
 8003606:	6019      	str	r1, [r3, #0]
 8003608:	6813      	ldr	r3, [r2, #0]
 800360a:	702b      	strb	r3, [r5, #0]
 800360c:	2301      	movs	r3, #1
 800360e:	e065      	b.n	80036dc <_printf_i+0x168>
 8003610:	6808      	ldr	r0, [r1, #0]
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	0669      	lsls	r1, r5, #25
 8003616:	d5d3      	bpl.n	80035c0 <_printf_i+0x4c>
 8003618:	b200      	sxth	r0, r0
 800361a:	e7d1      	b.n	80035c0 <_printf_i+0x4c>
 800361c:	6819      	ldr	r1, [r3, #0]
 800361e:	6825      	ldr	r5, [r4, #0]
 8003620:	1d08      	adds	r0, r1, #4
 8003622:	6018      	str	r0, [r3, #0]
 8003624:	6808      	ldr	r0, [r1, #0]
 8003626:	062e      	lsls	r6, r5, #24
 8003628:	d505      	bpl.n	8003636 <_printf_i+0xc2>
 800362a:	4e54      	ldr	r6, [pc, #336]	; (800377c <_printf_i+0x208>)
 800362c:	2708      	movs	r7, #8
 800362e:	2a6f      	cmp	r2, #111	; 0x6f
 8003630:	d01b      	beq.n	800366a <_printf_i+0xf6>
 8003632:	270a      	movs	r7, #10
 8003634:	e019      	b.n	800366a <_printf_i+0xf6>
 8003636:	066d      	lsls	r5, r5, #25
 8003638:	d5f7      	bpl.n	800362a <_printf_i+0xb6>
 800363a:	b280      	uxth	r0, r0
 800363c:	e7f5      	b.n	800362a <_printf_i+0xb6>
 800363e:	3145      	adds	r1, #69	; 0x45
 8003640:	4e4e      	ldr	r6, [pc, #312]	; (800377c <_printf_i+0x208>)
 8003642:	700a      	strb	r2, [r1, #0]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	6822      	ldr	r2, [r4, #0]
 8003648:	1d01      	adds	r1, r0, #4
 800364a:	6800      	ldr	r0, [r0, #0]
 800364c:	6019      	str	r1, [r3, #0]
 800364e:	0615      	lsls	r5, r2, #24
 8003650:	d521      	bpl.n	8003696 <_printf_i+0x122>
 8003652:	07d3      	lsls	r3, r2, #31
 8003654:	d502      	bpl.n	800365c <_printf_i+0xe8>
 8003656:	2320      	movs	r3, #32
 8003658:	431a      	orrs	r2, r3
 800365a:	6022      	str	r2, [r4, #0]
 800365c:	2710      	movs	r7, #16
 800365e:	2800      	cmp	r0, #0
 8003660:	d103      	bne.n	800366a <_printf_i+0xf6>
 8003662:	2320      	movs	r3, #32
 8003664:	6822      	ldr	r2, [r4, #0]
 8003666:	439a      	bics	r2, r3
 8003668:	6022      	str	r2, [r4, #0]
 800366a:	0023      	movs	r3, r4
 800366c:	2200      	movs	r2, #0
 800366e:	3343      	adds	r3, #67	; 0x43
 8003670:	701a      	strb	r2, [r3, #0]
 8003672:	6863      	ldr	r3, [r4, #4]
 8003674:	60a3      	str	r3, [r4, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	db58      	blt.n	800372c <_printf_i+0x1b8>
 800367a:	2204      	movs	r2, #4
 800367c:	6821      	ldr	r1, [r4, #0]
 800367e:	4391      	bics	r1, r2
 8003680:	6021      	str	r1, [r4, #0]
 8003682:	2800      	cmp	r0, #0
 8003684:	d154      	bne.n	8003730 <_printf_i+0x1bc>
 8003686:	9d02      	ldr	r5, [sp, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d05a      	beq.n	8003742 <_printf_i+0x1ce>
 800368c:	0025      	movs	r5, r4
 800368e:	7833      	ldrb	r3, [r6, #0]
 8003690:	3542      	adds	r5, #66	; 0x42
 8003692:	702b      	strb	r3, [r5, #0]
 8003694:	e055      	b.n	8003742 <_printf_i+0x1ce>
 8003696:	0655      	lsls	r5, r2, #25
 8003698:	d5db      	bpl.n	8003652 <_printf_i+0xde>
 800369a:	b280      	uxth	r0, r0
 800369c:	e7d9      	b.n	8003652 <_printf_i+0xde>
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	680d      	ldr	r5, [r1, #0]
 80036a2:	1d10      	adds	r0, r2, #4
 80036a4:	6949      	ldr	r1, [r1, #20]
 80036a6:	6018      	str	r0, [r3, #0]
 80036a8:	6813      	ldr	r3, [r2, #0]
 80036aa:	062e      	lsls	r6, r5, #24
 80036ac:	d501      	bpl.n	80036b2 <_printf_i+0x13e>
 80036ae:	6019      	str	r1, [r3, #0]
 80036b0:	e002      	b.n	80036b8 <_printf_i+0x144>
 80036b2:	066d      	lsls	r5, r5, #25
 80036b4:	d5fb      	bpl.n	80036ae <_printf_i+0x13a>
 80036b6:	8019      	strh	r1, [r3, #0]
 80036b8:	2300      	movs	r3, #0
 80036ba:	9d02      	ldr	r5, [sp, #8]
 80036bc:	6123      	str	r3, [r4, #16]
 80036be:	e04f      	b.n	8003760 <_printf_i+0x1ec>
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	1d11      	adds	r1, r2, #4
 80036c4:	6019      	str	r1, [r3, #0]
 80036c6:	6815      	ldr	r5, [r2, #0]
 80036c8:	2100      	movs	r1, #0
 80036ca:	6862      	ldr	r2, [r4, #4]
 80036cc:	0028      	movs	r0, r5
 80036ce:	f000 fadf 	bl	8003c90 <memchr>
 80036d2:	2800      	cmp	r0, #0
 80036d4:	d001      	beq.n	80036da <_printf_i+0x166>
 80036d6:	1b40      	subs	r0, r0, r5
 80036d8:	6060      	str	r0, [r4, #4]
 80036da:	6863      	ldr	r3, [r4, #4]
 80036dc:	6123      	str	r3, [r4, #16]
 80036de:	2300      	movs	r3, #0
 80036e0:	9a02      	ldr	r2, [sp, #8]
 80036e2:	7013      	strb	r3, [r2, #0]
 80036e4:	e03c      	b.n	8003760 <_printf_i+0x1ec>
 80036e6:	6923      	ldr	r3, [r4, #16]
 80036e8:	002a      	movs	r2, r5
 80036ea:	9904      	ldr	r1, [sp, #16]
 80036ec:	9803      	ldr	r0, [sp, #12]
 80036ee:	9d05      	ldr	r5, [sp, #20]
 80036f0:	47a8      	blx	r5
 80036f2:	1c43      	adds	r3, r0, #1
 80036f4:	d03e      	beq.n	8003774 <_printf_i+0x200>
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	079b      	lsls	r3, r3, #30
 80036fa:	d415      	bmi.n	8003728 <_printf_i+0x1b4>
 80036fc:	9b07      	ldr	r3, [sp, #28]
 80036fe:	68e0      	ldr	r0, [r4, #12]
 8003700:	4298      	cmp	r0, r3
 8003702:	da39      	bge.n	8003778 <_printf_i+0x204>
 8003704:	0018      	movs	r0, r3
 8003706:	e037      	b.n	8003778 <_printf_i+0x204>
 8003708:	0022      	movs	r2, r4
 800370a:	2301      	movs	r3, #1
 800370c:	3219      	adds	r2, #25
 800370e:	9904      	ldr	r1, [sp, #16]
 8003710:	9803      	ldr	r0, [sp, #12]
 8003712:	9e05      	ldr	r6, [sp, #20]
 8003714:	47b0      	blx	r6
 8003716:	1c43      	adds	r3, r0, #1
 8003718:	d02c      	beq.n	8003774 <_printf_i+0x200>
 800371a:	3501      	adds	r5, #1
 800371c:	68e3      	ldr	r3, [r4, #12]
 800371e:	9a07      	ldr	r2, [sp, #28]
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	42ab      	cmp	r3, r5
 8003724:	dcf0      	bgt.n	8003708 <_printf_i+0x194>
 8003726:	e7e9      	b.n	80036fc <_printf_i+0x188>
 8003728:	2500      	movs	r5, #0
 800372a:	e7f7      	b.n	800371c <_printf_i+0x1a8>
 800372c:	2800      	cmp	r0, #0
 800372e:	d0ad      	beq.n	800368c <_printf_i+0x118>
 8003730:	9d02      	ldr	r5, [sp, #8]
 8003732:	0039      	movs	r1, r7
 8003734:	f7fc fd6c 	bl	8000210 <__aeabi_uidivmod>
 8003738:	5c73      	ldrb	r3, [r6, r1]
 800373a:	3d01      	subs	r5, #1
 800373c:	702b      	strb	r3, [r5, #0]
 800373e:	2800      	cmp	r0, #0
 8003740:	d1f7      	bne.n	8003732 <_printf_i+0x1be>
 8003742:	2f08      	cmp	r7, #8
 8003744:	d109      	bne.n	800375a <_printf_i+0x1e6>
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	07db      	lsls	r3, r3, #31
 800374a:	d506      	bpl.n	800375a <_printf_i+0x1e6>
 800374c:	6863      	ldr	r3, [r4, #4]
 800374e:	6922      	ldr	r2, [r4, #16]
 8003750:	4293      	cmp	r3, r2
 8003752:	dc02      	bgt.n	800375a <_printf_i+0x1e6>
 8003754:	2330      	movs	r3, #48	; 0x30
 8003756:	3d01      	subs	r5, #1
 8003758:	702b      	strb	r3, [r5, #0]
 800375a:	9b02      	ldr	r3, [sp, #8]
 800375c:	1b5b      	subs	r3, r3, r5
 800375e:	6123      	str	r3, [r4, #16]
 8003760:	9b05      	ldr	r3, [sp, #20]
 8003762:	aa07      	add	r2, sp, #28
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	0021      	movs	r1, r4
 8003768:	9b04      	ldr	r3, [sp, #16]
 800376a:	9803      	ldr	r0, [sp, #12]
 800376c:	f7ff fe94 	bl	8003498 <_printf_common>
 8003770:	1c43      	adds	r3, r0, #1
 8003772:	d1b8      	bne.n	80036e6 <_printf_i+0x172>
 8003774:	2001      	movs	r0, #1
 8003776:	4240      	negs	r0, r0
 8003778:	b009      	add	sp, #36	; 0x24
 800377a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800377c:	08003e89 	.word	0x08003e89
 8003780:	08003e9a 	.word	0x08003e9a

08003784 <_sbrk_r>:
 8003784:	2300      	movs	r3, #0
 8003786:	b570      	push	{r4, r5, r6, lr}
 8003788:	4c06      	ldr	r4, [pc, #24]	; (80037a4 <_sbrk_r+0x20>)
 800378a:	0005      	movs	r5, r0
 800378c:	0008      	movs	r0, r1
 800378e:	6023      	str	r3, [r4, #0]
 8003790:	f7ff fb62 	bl	8002e58 <_sbrk>
 8003794:	1c43      	adds	r3, r0, #1
 8003796:	d103      	bne.n	80037a0 <_sbrk_r+0x1c>
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d000      	beq.n	80037a0 <_sbrk_r+0x1c>
 800379e:	602b      	str	r3, [r5, #0]
 80037a0:	bd70      	pop	{r4, r5, r6, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	20000138 	.word	0x20000138

080037a8 <__sread>:
 80037a8:	b570      	push	{r4, r5, r6, lr}
 80037aa:	000c      	movs	r4, r1
 80037ac:	250e      	movs	r5, #14
 80037ae:	5f49      	ldrsh	r1, [r1, r5]
 80037b0:	f000 fac6 	bl	8003d40 <_read_r>
 80037b4:	2800      	cmp	r0, #0
 80037b6:	db03      	blt.n	80037c0 <__sread+0x18>
 80037b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80037ba:	181b      	adds	r3, r3, r0
 80037bc:	6563      	str	r3, [r4, #84]	; 0x54
 80037be:	bd70      	pop	{r4, r5, r6, pc}
 80037c0:	89a3      	ldrh	r3, [r4, #12]
 80037c2:	4a02      	ldr	r2, [pc, #8]	; (80037cc <__sread+0x24>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	81a3      	strh	r3, [r4, #12]
 80037c8:	e7f9      	b.n	80037be <__sread+0x16>
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	ffffefff 	.word	0xffffefff

080037d0 <__swrite>:
 80037d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d2:	001f      	movs	r7, r3
 80037d4:	898b      	ldrh	r3, [r1, #12]
 80037d6:	0005      	movs	r5, r0
 80037d8:	000c      	movs	r4, r1
 80037da:	0016      	movs	r6, r2
 80037dc:	05db      	lsls	r3, r3, #23
 80037de:	d505      	bpl.n	80037ec <__swrite+0x1c>
 80037e0:	230e      	movs	r3, #14
 80037e2:	5ec9      	ldrsh	r1, [r1, r3]
 80037e4:	2200      	movs	r2, #0
 80037e6:	2302      	movs	r3, #2
 80037e8:	f000 f9d2 	bl	8003b90 <_lseek_r>
 80037ec:	89a3      	ldrh	r3, [r4, #12]
 80037ee:	4a05      	ldr	r2, [pc, #20]	; (8003804 <__swrite+0x34>)
 80037f0:	0028      	movs	r0, r5
 80037f2:	4013      	ands	r3, r2
 80037f4:	81a3      	strh	r3, [r4, #12]
 80037f6:	0032      	movs	r2, r6
 80037f8:	230e      	movs	r3, #14
 80037fa:	5ee1      	ldrsh	r1, [r4, r3]
 80037fc:	003b      	movs	r3, r7
 80037fe:	f000 f875 	bl	80038ec <_write_r>
 8003802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003804:	ffffefff 	.word	0xffffefff

08003808 <__sseek>:
 8003808:	b570      	push	{r4, r5, r6, lr}
 800380a:	000c      	movs	r4, r1
 800380c:	250e      	movs	r5, #14
 800380e:	5f49      	ldrsh	r1, [r1, r5]
 8003810:	f000 f9be 	bl	8003b90 <_lseek_r>
 8003814:	89a3      	ldrh	r3, [r4, #12]
 8003816:	1c42      	adds	r2, r0, #1
 8003818:	d103      	bne.n	8003822 <__sseek+0x1a>
 800381a:	4a05      	ldr	r2, [pc, #20]	; (8003830 <__sseek+0x28>)
 800381c:	4013      	ands	r3, r2
 800381e:	81a3      	strh	r3, [r4, #12]
 8003820:	bd70      	pop	{r4, r5, r6, pc}
 8003822:	2280      	movs	r2, #128	; 0x80
 8003824:	0152      	lsls	r2, r2, #5
 8003826:	4313      	orrs	r3, r2
 8003828:	81a3      	strh	r3, [r4, #12]
 800382a:	6560      	str	r0, [r4, #84]	; 0x54
 800382c:	e7f8      	b.n	8003820 <__sseek+0x18>
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	ffffefff 	.word	0xffffefff

08003834 <__sclose>:
 8003834:	b510      	push	{r4, lr}
 8003836:	230e      	movs	r3, #14
 8003838:	5ec9      	ldrsh	r1, [r1, r3]
 800383a:	f000 f8e1 	bl	8003a00 <_close_r>
 800383e:	bd10      	pop	{r4, pc}

08003840 <__swbuf_r>:
 8003840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003842:	0005      	movs	r5, r0
 8003844:	000e      	movs	r6, r1
 8003846:	0014      	movs	r4, r2
 8003848:	2800      	cmp	r0, #0
 800384a:	d004      	beq.n	8003856 <__swbuf_r+0x16>
 800384c:	6983      	ldr	r3, [r0, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <__swbuf_r+0x16>
 8003852:	f7ff fbf1 	bl	8003038 <__sinit>
 8003856:	4b22      	ldr	r3, [pc, #136]	; (80038e0 <__swbuf_r+0xa0>)
 8003858:	429c      	cmp	r4, r3
 800385a:	d12d      	bne.n	80038b8 <__swbuf_r+0x78>
 800385c:	686c      	ldr	r4, [r5, #4]
 800385e:	69a3      	ldr	r3, [r4, #24]
 8003860:	60a3      	str	r3, [r4, #8]
 8003862:	89a3      	ldrh	r3, [r4, #12]
 8003864:	071b      	lsls	r3, r3, #28
 8003866:	d531      	bpl.n	80038cc <__swbuf_r+0x8c>
 8003868:	6923      	ldr	r3, [r4, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d02e      	beq.n	80038cc <__swbuf_r+0x8c>
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	6922      	ldr	r2, [r4, #16]
 8003872:	b2f7      	uxtb	r7, r6
 8003874:	1a98      	subs	r0, r3, r2
 8003876:	6963      	ldr	r3, [r4, #20]
 8003878:	b2f6      	uxtb	r6, r6
 800387a:	4283      	cmp	r3, r0
 800387c:	dc05      	bgt.n	800388a <__swbuf_r+0x4a>
 800387e:	0021      	movs	r1, r4
 8003880:	0028      	movs	r0, r5
 8003882:	f000 f959 	bl	8003b38 <_fflush_r>
 8003886:	2800      	cmp	r0, #0
 8003888:	d126      	bne.n	80038d8 <__swbuf_r+0x98>
 800388a:	68a3      	ldr	r3, [r4, #8]
 800388c:	3001      	adds	r0, #1
 800388e:	3b01      	subs	r3, #1
 8003890:	60a3      	str	r3, [r4, #8]
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	6022      	str	r2, [r4, #0]
 8003898:	701f      	strb	r7, [r3, #0]
 800389a:	6963      	ldr	r3, [r4, #20]
 800389c:	4283      	cmp	r3, r0
 800389e:	d004      	beq.n	80038aa <__swbuf_r+0x6a>
 80038a0:	89a3      	ldrh	r3, [r4, #12]
 80038a2:	07db      	lsls	r3, r3, #31
 80038a4:	d51a      	bpl.n	80038dc <__swbuf_r+0x9c>
 80038a6:	2e0a      	cmp	r6, #10
 80038a8:	d118      	bne.n	80038dc <__swbuf_r+0x9c>
 80038aa:	0021      	movs	r1, r4
 80038ac:	0028      	movs	r0, r5
 80038ae:	f000 f943 	bl	8003b38 <_fflush_r>
 80038b2:	2800      	cmp	r0, #0
 80038b4:	d012      	beq.n	80038dc <__swbuf_r+0x9c>
 80038b6:	e00f      	b.n	80038d8 <__swbuf_r+0x98>
 80038b8:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <__swbuf_r+0xa4>)
 80038ba:	429c      	cmp	r4, r3
 80038bc:	d101      	bne.n	80038c2 <__swbuf_r+0x82>
 80038be:	68ac      	ldr	r4, [r5, #8]
 80038c0:	e7cd      	b.n	800385e <__swbuf_r+0x1e>
 80038c2:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <__swbuf_r+0xa8>)
 80038c4:	429c      	cmp	r4, r3
 80038c6:	d1ca      	bne.n	800385e <__swbuf_r+0x1e>
 80038c8:	68ec      	ldr	r4, [r5, #12]
 80038ca:	e7c8      	b.n	800385e <__swbuf_r+0x1e>
 80038cc:	0021      	movs	r1, r4
 80038ce:	0028      	movs	r0, r5
 80038d0:	f000 f820 	bl	8003914 <__swsetup_r>
 80038d4:	2800      	cmp	r0, #0
 80038d6:	d0ca      	beq.n	800386e <__swbuf_r+0x2e>
 80038d8:	2601      	movs	r6, #1
 80038da:	4276      	negs	r6, r6
 80038dc:	0030      	movs	r0, r6
 80038de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038e0:	08003e38 	.word	0x08003e38
 80038e4:	08003e58 	.word	0x08003e58
 80038e8:	08003e18 	.word	0x08003e18

080038ec <_write_r>:
 80038ec:	b570      	push	{r4, r5, r6, lr}
 80038ee:	0005      	movs	r5, r0
 80038f0:	0008      	movs	r0, r1
 80038f2:	0011      	movs	r1, r2
 80038f4:	2200      	movs	r2, #0
 80038f6:	4c06      	ldr	r4, [pc, #24]	; (8003910 <_write_r+0x24>)
 80038f8:	6022      	str	r2, [r4, #0]
 80038fa:	001a      	movs	r2, r3
 80038fc:	f7ff fa64 	bl	8002dc8 <_write>
 8003900:	1c43      	adds	r3, r0, #1
 8003902:	d103      	bne.n	800390c <_write_r+0x20>
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d000      	beq.n	800390c <_write_r+0x20>
 800390a:	602b      	str	r3, [r5, #0]
 800390c:	bd70      	pop	{r4, r5, r6, pc}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	20000138 	.word	0x20000138

08003914 <__swsetup_r>:
 8003914:	4b36      	ldr	r3, [pc, #216]	; (80039f0 <__swsetup_r+0xdc>)
 8003916:	b570      	push	{r4, r5, r6, lr}
 8003918:	681d      	ldr	r5, [r3, #0]
 800391a:	0006      	movs	r6, r0
 800391c:	000c      	movs	r4, r1
 800391e:	2d00      	cmp	r5, #0
 8003920:	d005      	beq.n	800392e <__swsetup_r+0x1a>
 8003922:	69ab      	ldr	r3, [r5, #24]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <__swsetup_r+0x1a>
 8003928:	0028      	movs	r0, r5
 800392a:	f7ff fb85 	bl	8003038 <__sinit>
 800392e:	4b31      	ldr	r3, [pc, #196]	; (80039f4 <__swsetup_r+0xe0>)
 8003930:	429c      	cmp	r4, r3
 8003932:	d10f      	bne.n	8003954 <__swsetup_r+0x40>
 8003934:	686c      	ldr	r4, [r5, #4]
 8003936:	230c      	movs	r3, #12
 8003938:	5ee2      	ldrsh	r2, [r4, r3]
 800393a:	b293      	uxth	r3, r2
 800393c:	0719      	lsls	r1, r3, #28
 800393e:	d42d      	bmi.n	800399c <__swsetup_r+0x88>
 8003940:	06d9      	lsls	r1, r3, #27
 8003942:	d411      	bmi.n	8003968 <__swsetup_r+0x54>
 8003944:	2309      	movs	r3, #9
 8003946:	2001      	movs	r0, #1
 8003948:	6033      	str	r3, [r6, #0]
 800394a:	3337      	adds	r3, #55	; 0x37
 800394c:	4313      	orrs	r3, r2
 800394e:	81a3      	strh	r3, [r4, #12]
 8003950:	4240      	negs	r0, r0
 8003952:	bd70      	pop	{r4, r5, r6, pc}
 8003954:	4b28      	ldr	r3, [pc, #160]	; (80039f8 <__swsetup_r+0xe4>)
 8003956:	429c      	cmp	r4, r3
 8003958:	d101      	bne.n	800395e <__swsetup_r+0x4a>
 800395a:	68ac      	ldr	r4, [r5, #8]
 800395c:	e7eb      	b.n	8003936 <__swsetup_r+0x22>
 800395e:	4b27      	ldr	r3, [pc, #156]	; (80039fc <__swsetup_r+0xe8>)
 8003960:	429c      	cmp	r4, r3
 8003962:	d1e8      	bne.n	8003936 <__swsetup_r+0x22>
 8003964:	68ec      	ldr	r4, [r5, #12]
 8003966:	e7e6      	b.n	8003936 <__swsetup_r+0x22>
 8003968:	075b      	lsls	r3, r3, #29
 800396a:	d513      	bpl.n	8003994 <__swsetup_r+0x80>
 800396c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800396e:	2900      	cmp	r1, #0
 8003970:	d008      	beq.n	8003984 <__swsetup_r+0x70>
 8003972:	0023      	movs	r3, r4
 8003974:	3344      	adds	r3, #68	; 0x44
 8003976:	4299      	cmp	r1, r3
 8003978:	d002      	beq.n	8003980 <__swsetup_r+0x6c>
 800397a:	0030      	movs	r0, r6
 800397c:	f000 f996 	bl	8003cac <_free_r>
 8003980:	2300      	movs	r3, #0
 8003982:	6363      	str	r3, [r4, #52]	; 0x34
 8003984:	2224      	movs	r2, #36	; 0x24
 8003986:	89a3      	ldrh	r3, [r4, #12]
 8003988:	4393      	bics	r3, r2
 800398a:	81a3      	strh	r3, [r4, #12]
 800398c:	2300      	movs	r3, #0
 800398e:	6063      	str	r3, [r4, #4]
 8003990:	6923      	ldr	r3, [r4, #16]
 8003992:	6023      	str	r3, [r4, #0]
 8003994:	2308      	movs	r3, #8
 8003996:	89a2      	ldrh	r2, [r4, #12]
 8003998:	4313      	orrs	r3, r2
 800399a:	81a3      	strh	r3, [r4, #12]
 800399c:	6923      	ldr	r3, [r4, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10b      	bne.n	80039ba <__swsetup_r+0xa6>
 80039a2:	21a0      	movs	r1, #160	; 0xa0
 80039a4:	2280      	movs	r2, #128	; 0x80
 80039a6:	89a3      	ldrh	r3, [r4, #12]
 80039a8:	0089      	lsls	r1, r1, #2
 80039aa:	0092      	lsls	r2, r2, #2
 80039ac:	400b      	ands	r3, r1
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d003      	beq.n	80039ba <__swsetup_r+0xa6>
 80039b2:	0021      	movs	r1, r4
 80039b4:	0030      	movs	r0, r6
 80039b6:	f000 f927 	bl	8003c08 <__smakebuf_r>
 80039ba:	2301      	movs	r3, #1
 80039bc:	89a2      	ldrh	r2, [r4, #12]
 80039be:	4013      	ands	r3, r2
 80039c0:	d011      	beq.n	80039e6 <__swsetup_r+0xd2>
 80039c2:	2300      	movs	r3, #0
 80039c4:	60a3      	str	r3, [r4, #8]
 80039c6:	6963      	ldr	r3, [r4, #20]
 80039c8:	425b      	negs	r3, r3
 80039ca:	61a3      	str	r3, [r4, #24]
 80039cc:	2000      	movs	r0, #0
 80039ce:	6923      	ldr	r3, [r4, #16]
 80039d0:	4283      	cmp	r3, r0
 80039d2:	d1be      	bne.n	8003952 <__swsetup_r+0x3e>
 80039d4:	230c      	movs	r3, #12
 80039d6:	5ee2      	ldrsh	r2, [r4, r3]
 80039d8:	0613      	lsls	r3, r2, #24
 80039da:	d5ba      	bpl.n	8003952 <__swsetup_r+0x3e>
 80039dc:	2340      	movs	r3, #64	; 0x40
 80039de:	4313      	orrs	r3, r2
 80039e0:	81a3      	strh	r3, [r4, #12]
 80039e2:	3801      	subs	r0, #1
 80039e4:	e7b5      	b.n	8003952 <__swsetup_r+0x3e>
 80039e6:	0792      	lsls	r2, r2, #30
 80039e8:	d400      	bmi.n	80039ec <__swsetup_r+0xd8>
 80039ea:	6963      	ldr	r3, [r4, #20]
 80039ec:	60a3      	str	r3, [r4, #8]
 80039ee:	e7ed      	b.n	80039cc <__swsetup_r+0xb8>
 80039f0:	2000000c 	.word	0x2000000c
 80039f4:	08003e38 	.word	0x08003e38
 80039f8:	08003e58 	.word	0x08003e58
 80039fc:	08003e18 	.word	0x08003e18

08003a00 <_close_r>:
 8003a00:	2300      	movs	r3, #0
 8003a02:	b570      	push	{r4, r5, r6, lr}
 8003a04:	4c06      	ldr	r4, [pc, #24]	; (8003a20 <_close_r+0x20>)
 8003a06:	0005      	movs	r5, r0
 8003a08:	0008      	movs	r0, r1
 8003a0a:	6023      	str	r3, [r4, #0]
 8003a0c:	f7ff f9f8 	bl	8002e00 <_close>
 8003a10:	1c43      	adds	r3, r0, #1
 8003a12:	d103      	bne.n	8003a1c <_close_r+0x1c>
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d000      	beq.n	8003a1c <_close_r+0x1c>
 8003a1a:	602b      	str	r3, [r5, #0]
 8003a1c:	bd70      	pop	{r4, r5, r6, pc}
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	20000138 	.word	0x20000138

08003a24 <__sflush_r>:
 8003a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a26:	898a      	ldrh	r2, [r1, #12]
 8003a28:	0005      	movs	r5, r0
 8003a2a:	000c      	movs	r4, r1
 8003a2c:	0713      	lsls	r3, r2, #28
 8003a2e:	d460      	bmi.n	8003af2 <__sflush_r+0xce>
 8003a30:	684b      	ldr	r3, [r1, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	dc04      	bgt.n	8003a40 <__sflush_r+0x1c>
 8003a36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	dc01      	bgt.n	8003a40 <__sflush_r+0x1c>
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a40:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003a42:	2f00      	cmp	r7, #0
 8003a44:	d0fa      	beq.n	8003a3c <__sflush_r+0x18>
 8003a46:	2300      	movs	r3, #0
 8003a48:	682e      	ldr	r6, [r5, #0]
 8003a4a:	602b      	str	r3, [r5, #0]
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	015b      	lsls	r3, r3, #5
 8003a50:	6a21      	ldr	r1, [r4, #32]
 8003a52:	401a      	ands	r2, r3
 8003a54:	d034      	beq.n	8003ac0 <__sflush_r+0x9c>
 8003a56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a58:	89a3      	ldrh	r3, [r4, #12]
 8003a5a:	075b      	lsls	r3, r3, #29
 8003a5c:	d506      	bpl.n	8003a6c <__sflush_r+0x48>
 8003a5e:	6863      	ldr	r3, [r4, #4]
 8003a60:	1ac0      	subs	r0, r0, r3
 8003a62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <__sflush_r+0x48>
 8003a68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a6a:	1ac0      	subs	r0, r0, r3
 8003a6c:	0002      	movs	r2, r0
 8003a6e:	6a21      	ldr	r1, [r4, #32]
 8003a70:	2300      	movs	r3, #0
 8003a72:	0028      	movs	r0, r5
 8003a74:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003a76:	47b8      	blx	r7
 8003a78:	89a1      	ldrh	r1, [r4, #12]
 8003a7a:	1c43      	adds	r3, r0, #1
 8003a7c:	d106      	bne.n	8003a8c <__sflush_r+0x68>
 8003a7e:	682b      	ldr	r3, [r5, #0]
 8003a80:	2b1d      	cmp	r3, #29
 8003a82:	d830      	bhi.n	8003ae6 <__sflush_r+0xc2>
 8003a84:	4a2b      	ldr	r2, [pc, #172]	; (8003b34 <__sflush_r+0x110>)
 8003a86:	40da      	lsrs	r2, r3
 8003a88:	07d3      	lsls	r3, r2, #31
 8003a8a:	d52c      	bpl.n	8003ae6 <__sflush_r+0xc2>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	6063      	str	r3, [r4, #4]
 8003a90:	6923      	ldr	r3, [r4, #16]
 8003a92:	6023      	str	r3, [r4, #0]
 8003a94:	04cb      	lsls	r3, r1, #19
 8003a96:	d505      	bpl.n	8003aa4 <__sflush_r+0x80>
 8003a98:	1c43      	adds	r3, r0, #1
 8003a9a:	d102      	bne.n	8003aa2 <__sflush_r+0x7e>
 8003a9c:	682b      	ldr	r3, [r5, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d100      	bne.n	8003aa4 <__sflush_r+0x80>
 8003aa2:	6560      	str	r0, [r4, #84]	; 0x54
 8003aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003aa6:	602e      	str	r6, [r5, #0]
 8003aa8:	2900      	cmp	r1, #0
 8003aaa:	d0c7      	beq.n	8003a3c <__sflush_r+0x18>
 8003aac:	0023      	movs	r3, r4
 8003aae:	3344      	adds	r3, #68	; 0x44
 8003ab0:	4299      	cmp	r1, r3
 8003ab2:	d002      	beq.n	8003aba <__sflush_r+0x96>
 8003ab4:	0028      	movs	r0, r5
 8003ab6:	f000 f8f9 	bl	8003cac <_free_r>
 8003aba:	2000      	movs	r0, #0
 8003abc:	6360      	str	r0, [r4, #52]	; 0x34
 8003abe:	e7be      	b.n	8003a3e <__sflush_r+0x1a>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	0028      	movs	r0, r5
 8003ac4:	47b8      	blx	r7
 8003ac6:	1c43      	adds	r3, r0, #1
 8003ac8:	d1c6      	bne.n	8003a58 <__sflush_r+0x34>
 8003aca:	682b      	ldr	r3, [r5, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0c3      	beq.n	8003a58 <__sflush_r+0x34>
 8003ad0:	2b1d      	cmp	r3, #29
 8003ad2:	d001      	beq.n	8003ad8 <__sflush_r+0xb4>
 8003ad4:	2b16      	cmp	r3, #22
 8003ad6:	d101      	bne.n	8003adc <__sflush_r+0xb8>
 8003ad8:	602e      	str	r6, [r5, #0]
 8003ada:	e7af      	b.n	8003a3c <__sflush_r+0x18>
 8003adc:	2340      	movs	r3, #64	; 0x40
 8003ade:	89a2      	ldrh	r2, [r4, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	81a3      	strh	r3, [r4, #12]
 8003ae4:	e7ab      	b.n	8003a3e <__sflush_r+0x1a>
 8003ae6:	2340      	movs	r3, #64	; 0x40
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	2001      	movs	r0, #1
 8003aec:	81a3      	strh	r3, [r4, #12]
 8003aee:	4240      	negs	r0, r0
 8003af0:	e7a5      	b.n	8003a3e <__sflush_r+0x1a>
 8003af2:	690f      	ldr	r7, [r1, #16]
 8003af4:	2f00      	cmp	r7, #0
 8003af6:	d0a1      	beq.n	8003a3c <__sflush_r+0x18>
 8003af8:	680b      	ldr	r3, [r1, #0]
 8003afa:	600f      	str	r7, [r1, #0]
 8003afc:	1bdb      	subs	r3, r3, r7
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	2300      	movs	r3, #0
 8003b02:	0792      	lsls	r2, r2, #30
 8003b04:	d100      	bne.n	8003b08 <__sflush_r+0xe4>
 8003b06:	694b      	ldr	r3, [r1, #20]
 8003b08:	60a3      	str	r3, [r4, #8]
 8003b0a:	9b01      	ldr	r3, [sp, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	dc00      	bgt.n	8003b12 <__sflush_r+0xee>
 8003b10:	e794      	b.n	8003a3c <__sflush_r+0x18>
 8003b12:	9b01      	ldr	r3, [sp, #4]
 8003b14:	003a      	movs	r2, r7
 8003b16:	6a21      	ldr	r1, [r4, #32]
 8003b18:	0028      	movs	r0, r5
 8003b1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b1c:	47b0      	blx	r6
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	dc03      	bgt.n	8003b2a <__sflush_r+0x106>
 8003b22:	2340      	movs	r3, #64	; 0x40
 8003b24:	89a2      	ldrh	r2, [r4, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	e7df      	b.n	8003aea <__sflush_r+0xc6>
 8003b2a:	9b01      	ldr	r3, [sp, #4]
 8003b2c:	183f      	adds	r7, r7, r0
 8003b2e:	1a1b      	subs	r3, r3, r0
 8003b30:	9301      	str	r3, [sp, #4]
 8003b32:	e7ea      	b.n	8003b0a <__sflush_r+0xe6>
 8003b34:	20400001 	.word	0x20400001

08003b38 <_fflush_r>:
 8003b38:	690b      	ldr	r3, [r1, #16]
 8003b3a:	b570      	push	{r4, r5, r6, lr}
 8003b3c:	0005      	movs	r5, r0
 8003b3e:	000c      	movs	r4, r1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <_fflush_r+0x10>
 8003b44:	2000      	movs	r0, #0
 8003b46:	bd70      	pop	{r4, r5, r6, pc}
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d004      	beq.n	8003b56 <_fflush_r+0x1e>
 8003b4c:	6983      	ldr	r3, [r0, #24]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <_fflush_r+0x1e>
 8003b52:	f7ff fa71 	bl	8003038 <__sinit>
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <_fflush_r+0x4c>)
 8003b58:	429c      	cmp	r4, r3
 8003b5a:	d109      	bne.n	8003b70 <_fflush_r+0x38>
 8003b5c:	686c      	ldr	r4, [r5, #4]
 8003b5e:	220c      	movs	r2, #12
 8003b60:	5ea3      	ldrsh	r3, [r4, r2]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0ee      	beq.n	8003b44 <_fflush_r+0xc>
 8003b66:	0021      	movs	r1, r4
 8003b68:	0028      	movs	r0, r5
 8003b6a:	f7ff ff5b 	bl	8003a24 <__sflush_r>
 8003b6e:	e7ea      	b.n	8003b46 <_fflush_r+0xe>
 8003b70:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <_fflush_r+0x50>)
 8003b72:	429c      	cmp	r4, r3
 8003b74:	d101      	bne.n	8003b7a <_fflush_r+0x42>
 8003b76:	68ac      	ldr	r4, [r5, #8]
 8003b78:	e7f1      	b.n	8003b5e <_fflush_r+0x26>
 8003b7a:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <_fflush_r+0x54>)
 8003b7c:	429c      	cmp	r4, r3
 8003b7e:	d1ee      	bne.n	8003b5e <_fflush_r+0x26>
 8003b80:	68ec      	ldr	r4, [r5, #12]
 8003b82:	e7ec      	b.n	8003b5e <_fflush_r+0x26>
 8003b84:	08003e38 	.word	0x08003e38
 8003b88:	08003e58 	.word	0x08003e58
 8003b8c:	08003e18 	.word	0x08003e18

08003b90 <_lseek_r>:
 8003b90:	b570      	push	{r4, r5, r6, lr}
 8003b92:	0005      	movs	r5, r0
 8003b94:	0008      	movs	r0, r1
 8003b96:	0011      	movs	r1, r2
 8003b98:	2200      	movs	r2, #0
 8003b9a:	4c06      	ldr	r4, [pc, #24]	; (8003bb4 <_lseek_r+0x24>)
 8003b9c:	6022      	str	r2, [r4, #0]
 8003b9e:	001a      	movs	r2, r3
 8003ba0:	f7ff f94f 	bl	8002e42 <_lseek>
 8003ba4:	1c43      	adds	r3, r0, #1
 8003ba6:	d103      	bne.n	8003bb0 <_lseek_r+0x20>
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d000      	beq.n	8003bb0 <_lseek_r+0x20>
 8003bae:	602b      	str	r3, [r5, #0]
 8003bb0:	bd70      	pop	{r4, r5, r6, pc}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	20000138 	.word	0x20000138

08003bb8 <__swhatbuf_r>:
 8003bb8:	b570      	push	{r4, r5, r6, lr}
 8003bba:	000e      	movs	r6, r1
 8003bbc:	001d      	movs	r5, r3
 8003bbe:	230e      	movs	r3, #14
 8003bc0:	5ec9      	ldrsh	r1, [r1, r3]
 8003bc2:	b096      	sub	sp, #88	; 0x58
 8003bc4:	0014      	movs	r4, r2
 8003bc6:	2900      	cmp	r1, #0
 8003bc8:	da07      	bge.n	8003bda <__swhatbuf_r+0x22>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	602b      	str	r3, [r5, #0]
 8003bce:	89b3      	ldrh	r3, [r6, #12]
 8003bd0:	061b      	lsls	r3, r3, #24
 8003bd2:	d411      	bmi.n	8003bf8 <__swhatbuf_r+0x40>
 8003bd4:	2380      	movs	r3, #128	; 0x80
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	e00f      	b.n	8003bfa <__swhatbuf_r+0x42>
 8003bda:	466a      	mov	r2, sp
 8003bdc:	f000 f8c4 	bl	8003d68 <_fstat_r>
 8003be0:	2800      	cmp	r0, #0
 8003be2:	dbf2      	blt.n	8003bca <__swhatbuf_r+0x12>
 8003be4:	22f0      	movs	r2, #240	; 0xf0
 8003be6:	9b01      	ldr	r3, [sp, #4]
 8003be8:	0212      	lsls	r2, r2, #8
 8003bea:	4013      	ands	r3, r2
 8003bec:	4a05      	ldr	r2, [pc, #20]	; (8003c04 <__swhatbuf_r+0x4c>)
 8003bee:	189b      	adds	r3, r3, r2
 8003bf0:	425a      	negs	r2, r3
 8003bf2:	4153      	adcs	r3, r2
 8003bf4:	602b      	str	r3, [r5, #0]
 8003bf6:	e7ed      	b.n	8003bd4 <__swhatbuf_r+0x1c>
 8003bf8:	2340      	movs	r3, #64	; 0x40
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	6023      	str	r3, [r4, #0]
 8003bfe:	b016      	add	sp, #88	; 0x58
 8003c00:	bd70      	pop	{r4, r5, r6, pc}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	ffffe000 	.word	0xffffe000

08003c08 <__smakebuf_r>:
 8003c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c0a:	2602      	movs	r6, #2
 8003c0c:	898b      	ldrh	r3, [r1, #12]
 8003c0e:	0005      	movs	r5, r0
 8003c10:	000c      	movs	r4, r1
 8003c12:	4233      	tst	r3, r6
 8003c14:	d006      	beq.n	8003c24 <__smakebuf_r+0x1c>
 8003c16:	0023      	movs	r3, r4
 8003c18:	3347      	adds	r3, #71	; 0x47
 8003c1a:	6023      	str	r3, [r4, #0]
 8003c1c:	6123      	str	r3, [r4, #16]
 8003c1e:	2301      	movs	r3, #1
 8003c20:	6163      	str	r3, [r4, #20]
 8003c22:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003c24:	ab01      	add	r3, sp, #4
 8003c26:	466a      	mov	r2, sp
 8003c28:	f7ff ffc6 	bl	8003bb8 <__swhatbuf_r>
 8003c2c:	9900      	ldr	r1, [sp, #0]
 8003c2e:	0007      	movs	r7, r0
 8003c30:	0028      	movs	r0, r5
 8003c32:	f7ff fa95 	bl	8003160 <_malloc_r>
 8003c36:	2800      	cmp	r0, #0
 8003c38:	d108      	bne.n	8003c4c <__smakebuf_r+0x44>
 8003c3a:	220c      	movs	r2, #12
 8003c3c:	5ea3      	ldrsh	r3, [r4, r2]
 8003c3e:	059a      	lsls	r2, r3, #22
 8003c40:	d4ef      	bmi.n	8003c22 <__smakebuf_r+0x1a>
 8003c42:	2203      	movs	r2, #3
 8003c44:	4393      	bics	r3, r2
 8003c46:	431e      	orrs	r6, r3
 8003c48:	81a6      	strh	r6, [r4, #12]
 8003c4a:	e7e4      	b.n	8003c16 <__smakebuf_r+0xe>
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <__smakebuf_r+0x84>)
 8003c4e:	62ab      	str	r3, [r5, #40]	; 0x28
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	89a2      	ldrh	r2, [r4, #12]
 8003c54:	6020      	str	r0, [r4, #0]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	81a3      	strh	r3, [r4, #12]
 8003c5a:	9b00      	ldr	r3, [sp, #0]
 8003c5c:	6120      	str	r0, [r4, #16]
 8003c5e:	6163      	str	r3, [r4, #20]
 8003c60:	9b01      	ldr	r3, [sp, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <__smakebuf_r+0x7a>
 8003c66:	230e      	movs	r3, #14
 8003c68:	5ee1      	ldrsh	r1, [r4, r3]
 8003c6a:	0028      	movs	r0, r5
 8003c6c:	f000 f88e 	bl	8003d8c <_isatty_r>
 8003c70:	2800      	cmp	r0, #0
 8003c72:	d006      	beq.n	8003c82 <__smakebuf_r+0x7a>
 8003c74:	2203      	movs	r2, #3
 8003c76:	89a3      	ldrh	r3, [r4, #12]
 8003c78:	4393      	bics	r3, r2
 8003c7a:	001a      	movs	r2, r3
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	81a3      	strh	r3, [r4, #12]
 8003c82:	89a0      	ldrh	r0, [r4, #12]
 8003c84:	4338      	orrs	r0, r7
 8003c86:	81a0      	strh	r0, [r4, #12]
 8003c88:	e7cb      	b.n	8003c22 <__smakebuf_r+0x1a>
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	08002ffd 	.word	0x08002ffd

08003c90 <memchr>:
 8003c90:	b2c9      	uxtb	r1, r1
 8003c92:	1882      	adds	r2, r0, r2
 8003c94:	4290      	cmp	r0, r2
 8003c96:	d101      	bne.n	8003c9c <memchr+0xc>
 8003c98:	2000      	movs	r0, #0
 8003c9a:	4770      	bx	lr
 8003c9c:	7803      	ldrb	r3, [r0, #0]
 8003c9e:	428b      	cmp	r3, r1
 8003ca0:	d0fb      	beq.n	8003c9a <memchr+0xa>
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	e7f6      	b.n	8003c94 <memchr+0x4>

08003ca6 <__malloc_lock>:
 8003ca6:	4770      	bx	lr

08003ca8 <__malloc_unlock>:
 8003ca8:	4770      	bx	lr
	...

08003cac <_free_r>:
 8003cac:	b570      	push	{r4, r5, r6, lr}
 8003cae:	0005      	movs	r5, r0
 8003cb0:	2900      	cmp	r1, #0
 8003cb2:	d010      	beq.n	8003cd6 <_free_r+0x2a>
 8003cb4:	1f0c      	subs	r4, r1, #4
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	da00      	bge.n	8003cbe <_free_r+0x12>
 8003cbc:	18e4      	adds	r4, r4, r3
 8003cbe:	0028      	movs	r0, r5
 8003cc0:	f7ff fff1 	bl	8003ca6 <__malloc_lock>
 8003cc4:	4a1d      	ldr	r2, [pc, #116]	; (8003d3c <_free_r+0x90>)
 8003cc6:	6813      	ldr	r3, [r2, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d105      	bne.n	8003cd8 <_free_r+0x2c>
 8003ccc:	6063      	str	r3, [r4, #4]
 8003cce:	6014      	str	r4, [r2, #0]
 8003cd0:	0028      	movs	r0, r5
 8003cd2:	f7ff ffe9 	bl	8003ca8 <__malloc_unlock>
 8003cd6:	bd70      	pop	{r4, r5, r6, pc}
 8003cd8:	42a3      	cmp	r3, r4
 8003cda:	d909      	bls.n	8003cf0 <_free_r+0x44>
 8003cdc:	6821      	ldr	r1, [r4, #0]
 8003cde:	1860      	adds	r0, r4, r1
 8003ce0:	4283      	cmp	r3, r0
 8003ce2:	d1f3      	bne.n	8003ccc <_free_r+0x20>
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	1841      	adds	r1, r0, r1
 8003cea:	6021      	str	r1, [r4, #0]
 8003cec:	e7ee      	b.n	8003ccc <_free_r+0x20>
 8003cee:	0013      	movs	r3, r2
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	2a00      	cmp	r2, #0
 8003cf4:	d001      	beq.n	8003cfa <_free_r+0x4e>
 8003cf6:	42a2      	cmp	r2, r4
 8003cf8:	d9f9      	bls.n	8003cee <_free_r+0x42>
 8003cfa:	6819      	ldr	r1, [r3, #0]
 8003cfc:	1858      	adds	r0, r3, r1
 8003cfe:	42a0      	cmp	r0, r4
 8003d00:	d10b      	bne.n	8003d1a <_free_r+0x6e>
 8003d02:	6820      	ldr	r0, [r4, #0]
 8003d04:	1809      	adds	r1, r1, r0
 8003d06:	1858      	adds	r0, r3, r1
 8003d08:	6019      	str	r1, [r3, #0]
 8003d0a:	4282      	cmp	r2, r0
 8003d0c:	d1e0      	bne.n	8003cd0 <_free_r+0x24>
 8003d0e:	6810      	ldr	r0, [r2, #0]
 8003d10:	6852      	ldr	r2, [r2, #4]
 8003d12:	1841      	adds	r1, r0, r1
 8003d14:	6019      	str	r1, [r3, #0]
 8003d16:	605a      	str	r2, [r3, #4]
 8003d18:	e7da      	b.n	8003cd0 <_free_r+0x24>
 8003d1a:	42a0      	cmp	r0, r4
 8003d1c:	d902      	bls.n	8003d24 <_free_r+0x78>
 8003d1e:	230c      	movs	r3, #12
 8003d20:	602b      	str	r3, [r5, #0]
 8003d22:	e7d5      	b.n	8003cd0 <_free_r+0x24>
 8003d24:	6821      	ldr	r1, [r4, #0]
 8003d26:	1860      	adds	r0, r4, r1
 8003d28:	4282      	cmp	r2, r0
 8003d2a:	d103      	bne.n	8003d34 <_free_r+0x88>
 8003d2c:	6810      	ldr	r0, [r2, #0]
 8003d2e:	6852      	ldr	r2, [r2, #4]
 8003d30:	1841      	adds	r1, r0, r1
 8003d32:	6021      	str	r1, [r4, #0]
 8003d34:	6062      	str	r2, [r4, #4]
 8003d36:	605c      	str	r4, [r3, #4]
 8003d38:	e7ca      	b.n	8003cd0 <_free_r+0x24>
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	20000090 	.word	0x20000090

08003d40 <_read_r>:
 8003d40:	b570      	push	{r4, r5, r6, lr}
 8003d42:	0005      	movs	r5, r0
 8003d44:	0008      	movs	r0, r1
 8003d46:	0011      	movs	r1, r2
 8003d48:	2200      	movs	r2, #0
 8003d4a:	4c06      	ldr	r4, [pc, #24]	; (8003d64 <_read_r+0x24>)
 8003d4c:	6022      	str	r2, [r4, #0]
 8003d4e:	001a      	movs	r2, r3
 8003d50:	f7ff f81d 	bl	8002d8e <_read>
 8003d54:	1c43      	adds	r3, r0, #1
 8003d56:	d103      	bne.n	8003d60 <_read_r+0x20>
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d000      	beq.n	8003d60 <_read_r+0x20>
 8003d5e:	602b      	str	r3, [r5, #0]
 8003d60:	bd70      	pop	{r4, r5, r6, pc}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	20000138 	.word	0x20000138

08003d68 <_fstat_r>:
 8003d68:	2300      	movs	r3, #0
 8003d6a:	b570      	push	{r4, r5, r6, lr}
 8003d6c:	4c06      	ldr	r4, [pc, #24]	; (8003d88 <_fstat_r+0x20>)
 8003d6e:	0005      	movs	r5, r0
 8003d70:	0008      	movs	r0, r1
 8003d72:	0011      	movs	r1, r2
 8003d74:	6023      	str	r3, [r4, #0]
 8003d76:	f7ff f84d 	bl	8002e14 <_fstat>
 8003d7a:	1c43      	adds	r3, r0, #1
 8003d7c:	d103      	bne.n	8003d86 <_fstat_r+0x1e>
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d000      	beq.n	8003d86 <_fstat_r+0x1e>
 8003d84:	602b      	str	r3, [r5, #0]
 8003d86:	bd70      	pop	{r4, r5, r6, pc}
 8003d88:	20000138 	.word	0x20000138

08003d8c <_isatty_r>:
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	b570      	push	{r4, r5, r6, lr}
 8003d90:	4c06      	ldr	r4, [pc, #24]	; (8003dac <_isatty_r+0x20>)
 8003d92:	0005      	movs	r5, r0
 8003d94:	0008      	movs	r0, r1
 8003d96:	6023      	str	r3, [r4, #0]
 8003d98:	f7ff f84a 	bl	8002e30 <_isatty>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	d103      	bne.n	8003da8 <_isatty_r+0x1c>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d000      	beq.n	8003da8 <_isatty_r+0x1c>
 8003da6:	602b      	str	r3, [r5, #0]
 8003da8:	bd70      	pop	{r4, r5, r6, pc}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	20000138 	.word	0x20000138

08003db0 <_init>:
 8003db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db6:	bc08      	pop	{r3}
 8003db8:	469e      	mov	lr, r3
 8003dba:	4770      	bx	lr

08003dbc <_fini>:
 8003dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc2:	bc08      	pop	{r3}
 8003dc4:	469e      	mov	lr, r3
 8003dc6:	4770      	bx	lr


Learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  08003168  08003168  00013168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034ec  080034ec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080034ec  080034ec  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034ec  080034ec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034ec  080034ec  000134ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034f0  080034f0  000134f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080034f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  200001dc  080036d0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  200003dc  080036d0  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007419  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016e4  00000000  00000000  0002761d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000710  00000000  00000000  00028d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000678  00000000  00000000  00029418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018096  00000000  00000000  00029a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006e24  00000000  00000000  00041b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089181  00000000  00000000  0004894a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d1acb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001984  00000000  00000000  000d1b48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003150 	.word	0x08003150

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08003150 	.word	0x08003150

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <HAL_UART_RxCpltCallback>:
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

//Interrupt callback routine
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
    uint8_t i;
    if (huart->Instance == USART2)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a1d      	ldr	r2, [pc, #116]	; (80002b4 <HAL_UART_RxCpltCallback+0x84>)
 800023e:	4293      	cmp	r3, r2
 8000240:	d134      	bne.n	80002ac <HAL_UART_RxCpltCallback+0x7c>
        {
        if (Rx_indx==0) {for (i=0;i<100;i++) Rx_Buffer[i]=0;}   //clear Rx_Buffer before receiving new data
 8000242:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <HAL_UART_RxCpltCallback+0x88>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d114      	bne.n	8000274 <HAL_UART_RxCpltCallback+0x44>
 800024a:	230f      	movs	r3, #15
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	2200      	movs	r2, #0
 8000250:	701a      	strb	r2, [r3, #0]
 8000252:	e00a      	b.n	800026a <HAL_UART_RxCpltCallback+0x3a>
 8000254:	200f      	movs	r0, #15
 8000256:	183b      	adds	r3, r7, r0
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	4a18      	ldr	r2, [pc, #96]	; (80002bc <HAL_UART_RxCpltCallback+0x8c>)
 800025c:	2100      	movs	r1, #0
 800025e:	54d1      	strb	r1, [r2, r3]
 8000260:	183b      	adds	r3, r7, r0
 8000262:	781a      	ldrb	r2, [r3, #0]
 8000264:	183b      	adds	r3, r7, r0
 8000266:	3201      	adds	r2, #1
 8000268:	701a      	strb	r2, [r3, #0]
 800026a:	230f      	movs	r3, #15
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	2b63      	cmp	r3, #99	; 0x63
 8000272:	d9ef      	bls.n	8000254 <HAL_UART_RxCpltCallback+0x24>

        if (Rx_data[0]!=13) //if received data different from ascii 13 (enter)
 8000274:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <HAL_UART_RxCpltCallback+0x90>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b0d      	cmp	r3, #13
 800027a:	d00b      	beq.n	8000294 <HAL_UART_RxCpltCallback+0x64>
            {
            Rx_Buffer[Rx_indx++]=Rx_data[0];    //add data to Rx_Buffer
 800027c:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <HAL_UART_RxCpltCallback+0x88>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	1c5a      	adds	r2, r3, #1
 8000282:	b2d1      	uxtb	r1, r2
 8000284:	4a0c      	ldr	r2, [pc, #48]	; (80002b8 <HAL_UART_RxCpltCallback+0x88>)
 8000286:	7011      	strb	r1, [r2, #0]
 8000288:	001a      	movs	r2, r3
 800028a:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <HAL_UART_RxCpltCallback+0x90>)
 800028c:	7819      	ldrb	r1, [r3, #0]
 800028e:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <HAL_UART_RxCpltCallback+0x8c>)
 8000290:	5499      	strb	r1, [r3, r2]
 8000292:	e005      	b.n	80002a0 <HAL_UART_RxCpltCallback+0x70>
            }
        else            //if received data = 13
            {
            Rx_indx=0;
 8000294:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <HAL_UART_RxCpltCallback+0x88>)
 8000296:	2200      	movs	r2, #0
 8000298:	701a      	strb	r2, [r3, #0]
            Transfer_cplt = 1;//transfer complete, data is ready to read
 800029a:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <HAL_UART_RxCpltCallback+0x94>)
 800029c:	2201      	movs	r2, #1
 800029e:	701a      	strb	r2, [r3, #0]
            }

        HAL_UART_Receive_IT(&huart2, Rx_data, 1);   //activate UART receive interrupt every time
 80002a0:	4907      	ldr	r1, [pc, #28]	; (80002c0 <HAL_UART_RxCpltCallback+0x90>)
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <HAL_UART_RxCpltCallback+0x98>)
 80002a4:	2201      	movs	r2, #1
 80002a6:	0018      	movs	r0, r3
 80002a8:	f001 ff4b 	bl	8002142 <HAL_UART_Receive_IT>
        }

}
 80002ac:	46c0      	nop			; (mov r8, r8)
 80002ae:	46bd      	mov	sp, r7
 80002b0:	b004      	add	sp, #16
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	40004400 	.word	0x40004400
 80002b8:	200001f9 	.word	0x200001f9
 80002bc:	200002ec 	.word	0x200002ec
 80002c0:	200001fc 	.word	0x200001fc
 80002c4:	200001f8 	.word	0x200001f8
 80002c8:	20000350 	.word	0x20000350

080002cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d0:	f000 fd08 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d4:	f000 fad6 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d8:	f000 fb88 	bl	80009ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002dc:	f000 fb26 	bl	800092c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80002e0:	f000 fb54 	bl	800098c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //***************************************************************
  //HAL_UART_Receive_IT(&huart2, &rxBuffer, 1); // start listening for incomming data
  HAL_UART_Receive_IT(&huart2,Rx_data, 1); // Asserts UART Interrupt every time 1 byte is received.
 80002e4:	49ed      	ldr	r1, [pc, #948]	; (800069c <main+0x3d0>)
 80002e6:	4bee      	ldr	r3, [pc, #952]	; (80006a0 <main+0x3d4>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	0018      	movs	r0, r3
 80002ec:	f001 ff29 	bl	8002142 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

     if (Transfer_cplt)
 80002f0:	4bec      	ldr	r3, [pc, #944]	; (80006a4 <main+0x3d8>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d100      	bne.n	80002fa <main+0x2e>
 80002f8:	e2ae      	b.n	8000858 <main+0x58c>
     {
    	 command = atoi(Rx_Buffer);
 80002fa:	4beb      	ldr	r3, [pc, #940]	; (80006a8 <main+0x3dc>)
 80002fc:	0018      	movs	r0, r3
 80002fe:	f002 fe33 	bl	8002f68 <atoi>
 8000302:	0002      	movs	r2, r0
 8000304:	4be9      	ldr	r3, [pc, #932]	; (80006ac <main+0x3e0>)
 8000306:	601a      	str	r2, [r3, #0]

    	 switch (command){
 8000308:	4be8      	ldr	r3, [pc, #928]	; (80006ac <main+0x3e0>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b14      	cmp	r3, #20
 800030e:	d900      	bls.n	8000312 <main+0x46>
 8000310:	e285      	b.n	800081e <main+0x552>
 8000312:	009a      	lsls	r2, r3, #2
 8000314:	4be6      	ldr	r3, [pc, #920]	; (80006b0 <main+0x3e4>)
 8000316:	18d3      	adds	r3, r2, r3
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	469f      	mov	pc, r3
    	 	 case 1:
    	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 800031c:	4be5      	ldr	r3, [pc, #916]	; (80006b4 <main+0x3e8>)
 800031e:	2201      	movs	r2, #1
 8000320:	2108      	movs	r1, #8
 8000322:	0018      	movs	r0, r3
 8000324:	f001 f806 	bl	8001334 <HAL_GPIO_WritePin>
    	 		sprintf(buffer, "Valve SOV1 is ON..\r\n");
 8000328:	4ae3      	ldr	r2, [pc, #908]	; (80006b8 <main+0x3ec>)
 800032a:	4be4      	ldr	r3, [pc, #912]	; (80006bc <main+0x3f0>)
 800032c:	0010      	movs	r0, r2
 800032e:	0019      	movs	r1, r3
 8000330:	2315      	movs	r3, #21
 8000332:	001a      	movs	r2, r3
 8000334:	f002 fe42 	bl	8002fbc <memcpy>
    	 		len =strlen(buffer);
 8000338:	4bdf      	ldr	r3, [pc, #892]	; (80006b8 <main+0x3ec>)
 800033a:	0018      	movs	r0, r3
 800033c:	f7ff fee4 	bl	8000108 <strlen>
 8000340:	0003      	movs	r3, r0
 8000342:	001a      	movs	r2, r3
 8000344:	4bde      	ldr	r3, [pc, #888]	; (80006c0 <main+0x3f4>)
 8000346:	601a      	str	r2, [r3, #0]
    	 		HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8000348:	4bdd      	ldr	r3, [pc, #884]	; (80006c0 <main+0x3f4>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	b29a      	uxth	r2, r3
 800034e:	23fa      	movs	r3, #250	; 0xfa
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	49d9      	ldr	r1, [pc, #868]	; (80006b8 <main+0x3ec>)
 8000354:	48d2      	ldr	r0, [pc, #840]	; (80006a0 <main+0x3d4>)
 8000356:	f001 fe4b 	bl	8001ff0 <HAL_UART_Transmit>
    	 		//sov1 = 1;
    	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 800035a:	4bd2      	ldr	r3, [pc, #840]	; (80006a4 <main+0x3d8>)
 800035c:	2200      	movs	r2, #0
 800035e:	701a      	strb	r2, [r3, #0]
    	 		break;
 8000360:	e27b      	b.n	800085a <main+0x58e>
    	 	 case 2:
    	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000362:	4bd4      	ldr	r3, [pc, #848]	; (80006b4 <main+0x3e8>)
 8000364:	2200      	movs	r2, #0
 8000366:	2108      	movs	r1, #8
 8000368:	0018      	movs	r0, r3
 800036a:	f000 ffe3 	bl	8001334 <HAL_GPIO_WritePin>
    	 		sprintf(buffer, "Valve SOV1 is OFF..\r\n");
 800036e:	4ad2      	ldr	r2, [pc, #840]	; (80006b8 <main+0x3ec>)
 8000370:	4bd4      	ldr	r3, [pc, #848]	; (80006c4 <main+0x3f8>)
 8000372:	0010      	movs	r0, r2
 8000374:	0019      	movs	r1, r3
 8000376:	2316      	movs	r3, #22
 8000378:	001a      	movs	r2, r3
 800037a:	f002 fe1f 	bl	8002fbc <memcpy>
    	 		len =strlen(buffer);
 800037e:	4bce      	ldr	r3, [pc, #824]	; (80006b8 <main+0x3ec>)
 8000380:	0018      	movs	r0, r3
 8000382:	f7ff fec1 	bl	8000108 <strlen>
 8000386:	0003      	movs	r3, r0
 8000388:	001a      	movs	r2, r3
 800038a:	4bcd      	ldr	r3, [pc, #820]	; (80006c0 <main+0x3f4>)
 800038c:	601a      	str	r2, [r3, #0]
    	 		HAL_UART_Transmit(&huart2, buffer, len, 1000);
 800038e:	4bcc      	ldr	r3, [pc, #816]	; (80006c0 <main+0x3f4>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	b29a      	uxth	r2, r3
 8000394:	23fa      	movs	r3, #250	; 0xfa
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	49c7      	ldr	r1, [pc, #796]	; (80006b8 <main+0x3ec>)
 800039a:	48c1      	ldr	r0, [pc, #772]	; (80006a0 <main+0x3d4>)
 800039c:	f001 fe28 	bl	8001ff0 <HAL_UART_Transmit>
    	 		//sov1 = 0;
    	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 80003a0:	4bc0      	ldr	r3, [pc, #768]	; (80006a4 <main+0x3d8>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	701a      	strb	r2, [r3, #0]
    	 		break;
 80003a6:	e258      	b.n	800085a <main+0x58e>
    	 	 case 3:
                //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
    	 		sprintf(buffer, "Valve SOV2 is ON..\r\n");
 80003a8:	4ac3      	ldr	r2, [pc, #780]	; (80006b8 <main+0x3ec>)
 80003aa:	4bc7      	ldr	r3, [pc, #796]	; (80006c8 <main+0x3fc>)
 80003ac:	0010      	movs	r0, r2
 80003ae:	0019      	movs	r1, r3
 80003b0:	2315      	movs	r3, #21
 80003b2:	001a      	movs	r2, r3
 80003b4:	f002 fe02 	bl	8002fbc <memcpy>
    	 		len =strlen(buffer);
 80003b8:	4bbf      	ldr	r3, [pc, #764]	; (80006b8 <main+0x3ec>)
 80003ba:	0018      	movs	r0, r3
 80003bc:	f7ff fea4 	bl	8000108 <strlen>
 80003c0:	0003      	movs	r3, r0
 80003c2:	001a      	movs	r2, r3
 80003c4:	4bbe      	ldr	r3, [pc, #760]	; (80006c0 <main+0x3f4>)
 80003c6:	601a      	str	r2, [r3, #0]
    	 		HAL_UART_Transmit(&huart2, buffer, len, 1000);
 80003c8:	4bbd      	ldr	r3, [pc, #756]	; (80006c0 <main+0x3f4>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	b29a      	uxth	r2, r3
 80003ce:	23fa      	movs	r3, #250	; 0xfa
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	49b9      	ldr	r1, [pc, #740]	; (80006b8 <main+0x3ec>)
 80003d4:	48b2      	ldr	r0, [pc, #712]	; (80006a0 <main+0x3d4>)
 80003d6:	f001 fe0b 	bl	8001ff0 <HAL_UART_Transmit>
    	 		//sov2 = 1;
    	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 80003da:	4bb2      	ldr	r3, [pc, #712]	; (80006a4 <main+0x3d8>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
    	 		break;
 80003e0:	e23b      	b.n	800085a <main+0x58e>
    	 	 case 4:
    	 		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
    	 		sprintf(buffer, "Valve SOV2 is OFF..\r\n");
 80003e2:	4ab5      	ldr	r2, [pc, #724]	; (80006b8 <main+0x3ec>)
 80003e4:	4bb9      	ldr	r3, [pc, #740]	; (80006cc <main+0x400>)
 80003e6:	0010      	movs	r0, r2
 80003e8:	0019      	movs	r1, r3
 80003ea:	2316      	movs	r3, #22
 80003ec:	001a      	movs	r2, r3
 80003ee:	f002 fde5 	bl	8002fbc <memcpy>
    	 		len =strlen(buffer);
 80003f2:	4bb1      	ldr	r3, [pc, #708]	; (80006b8 <main+0x3ec>)
 80003f4:	0018      	movs	r0, r3
 80003f6:	f7ff fe87 	bl	8000108 <strlen>
 80003fa:	0003      	movs	r3, r0
 80003fc:	001a      	movs	r2, r3
 80003fe:	4bb0      	ldr	r3, [pc, #704]	; (80006c0 <main+0x3f4>)
 8000400:	601a      	str	r2, [r3, #0]
    	 		HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8000402:	4baf      	ldr	r3, [pc, #700]	; (80006c0 <main+0x3f4>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	b29a      	uxth	r2, r3
 8000408:	23fa      	movs	r3, #250	; 0xfa
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	49aa      	ldr	r1, [pc, #680]	; (80006b8 <main+0x3ec>)
 800040e:	48a4      	ldr	r0, [pc, #656]	; (80006a0 <main+0x3d4>)
 8000410:	f001 fdee 	bl	8001ff0 <HAL_UART_Transmit>
    	 		//sov2 = 0;
    	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 8000414:	4ba3      	ldr	r3, [pc, #652]	; (80006a4 <main+0x3d8>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
    	 		break;
 800041a:	e21e      	b.n	800085a <main+0x58e>
    	 	 case 5:
    	 		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
    	 		sprintf(buffer, "Valve SOV3 is ON..\r\n");
 800041c:	4aa6      	ldr	r2, [pc, #664]	; (80006b8 <main+0x3ec>)
 800041e:	4bac      	ldr	r3, [pc, #688]	; (80006d0 <main+0x404>)
 8000420:	0010      	movs	r0, r2
 8000422:	0019      	movs	r1, r3
 8000424:	2315      	movs	r3, #21
 8000426:	001a      	movs	r2, r3
 8000428:	f002 fdc8 	bl	8002fbc <memcpy>
    	 		len =strlen(buffer);
 800042c:	4ba2      	ldr	r3, [pc, #648]	; (80006b8 <main+0x3ec>)
 800042e:	0018      	movs	r0, r3
 8000430:	f7ff fe6a 	bl	8000108 <strlen>
 8000434:	0003      	movs	r3, r0
 8000436:	001a      	movs	r2, r3
 8000438:	4ba1      	ldr	r3, [pc, #644]	; (80006c0 <main+0x3f4>)
 800043a:	601a      	str	r2, [r3, #0]
    	 		HAL_UART_Transmit(&huart2, buffer, len, 1000);
 800043c:	4ba0      	ldr	r3, [pc, #640]	; (80006c0 <main+0x3f4>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	b29a      	uxth	r2, r3
 8000442:	23fa      	movs	r3, #250	; 0xfa
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	499c      	ldr	r1, [pc, #624]	; (80006b8 <main+0x3ec>)
 8000448:	4895      	ldr	r0, [pc, #596]	; (80006a0 <main+0x3d4>)
 800044a:	f001 fdd1 	bl	8001ff0 <HAL_UART_Transmit>
    	 		//sov3 = 1;
    	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 800044e:	4b95      	ldr	r3, [pc, #596]	; (80006a4 <main+0x3d8>)
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
    	 		break;
 8000454:	e201      	b.n	800085a <main+0x58e>
    	 	 case 6:
    	 		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
    	 		sprintf(buffer, "Valve SOV3 is OFF..\r\n");
 8000456:	4a98      	ldr	r2, [pc, #608]	; (80006b8 <main+0x3ec>)
 8000458:	4b9e      	ldr	r3, [pc, #632]	; (80006d4 <main+0x408>)
 800045a:	0010      	movs	r0, r2
 800045c:	0019      	movs	r1, r3
 800045e:	2316      	movs	r3, #22
 8000460:	001a      	movs	r2, r3
 8000462:	f002 fdab 	bl	8002fbc <memcpy>
    	 		len =strlen(buffer);
 8000466:	4b94      	ldr	r3, [pc, #592]	; (80006b8 <main+0x3ec>)
 8000468:	0018      	movs	r0, r3
 800046a:	f7ff fe4d 	bl	8000108 <strlen>
 800046e:	0003      	movs	r3, r0
 8000470:	001a      	movs	r2, r3
 8000472:	4b93      	ldr	r3, [pc, #588]	; (80006c0 <main+0x3f4>)
 8000474:	601a      	str	r2, [r3, #0]
    	 		HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8000476:	4b92      	ldr	r3, [pc, #584]	; (80006c0 <main+0x3f4>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	b29a      	uxth	r2, r3
 800047c:	23fa      	movs	r3, #250	; 0xfa
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	498d      	ldr	r1, [pc, #564]	; (80006b8 <main+0x3ec>)
 8000482:	4887      	ldr	r0, [pc, #540]	; (80006a0 <main+0x3d4>)
 8000484:	f001 fdb4 	bl	8001ff0 <HAL_UART_Transmit>
    	 		//sov3 = 0;
    	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 8000488:	4b86      	ldr	r3, [pc, #536]	; (80006a4 <main+0x3d8>)
 800048a:	2200      	movs	r2, #0
 800048c:	701a      	strb	r2, [r3, #0]
    	 		break;
 800048e:	e1e4      	b.n	800085a <main+0x58e>
    	 	 case 7:
    	   	     //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
    	    	 sprintf(buffer, "Valve SOV4 is ON..\r\n");
 8000490:	4a89      	ldr	r2, [pc, #548]	; (80006b8 <main+0x3ec>)
 8000492:	4b91      	ldr	r3, [pc, #580]	; (80006d8 <main+0x40c>)
 8000494:	0010      	movs	r0, r2
 8000496:	0019      	movs	r1, r3
 8000498:	2315      	movs	r3, #21
 800049a:	001a      	movs	r2, r3
 800049c:	f002 fd8e 	bl	8002fbc <memcpy>
    	    	 len =strlen(buffer);
 80004a0:	4b85      	ldr	r3, [pc, #532]	; (80006b8 <main+0x3ec>)
 80004a2:	0018      	movs	r0, r3
 80004a4:	f7ff fe30 	bl	8000108 <strlen>
 80004a8:	0003      	movs	r3, r0
 80004aa:	001a      	movs	r2, r3
 80004ac:	4b84      	ldr	r3, [pc, #528]	; (80006c0 <main+0x3f4>)
 80004ae:	601a      	str	r2, [r3, #0]
    	    	 HAL_UART_Transmit(&huart2, buffer, len, 1000);
 80004b0:	4b83      	ldr	r3, [pc, #524]	; (80006c0 <main+0x3f4>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	b29a      	uxth	r2, r3
 80004b6:	23fa      	movs	r3, #250	; 0xfa
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	497f      	ldr	r1, [pc, #508]	; (80006b8 <main+0x3ec>)
 80004bc:	4878      	ldr	r0, [pc, #480]	; (80006a0 <main+0x3d4>)
 80004be:	f001 fd97 	bl	8001ff0 <HAL_UART_Transmit>
    	    	 //sov4 = 1;
    	    	 Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 80004c2:	4b78      	ldr	r3, [pc, #480]	; (80006a4 <main+0x3d8>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]
    	    	 break;
 80004c8:	e1c7      	b.n	800085a <main+0x58e>
    	 	 case 8:
    	   	 	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
    	    	 sprintf(buffer, "Valve SOV4 is OFF..\r\n");
 80004ca:	4a7b      	ldr	r2, [pc, #492]	; (80006b8 <main+0x3ec>)
 80004cc:	4b83      	ldr	r3, [pc, #524]	; (80006dc <main+0x410>)
 80004ce:	0010      	movs	r0, r2
 80004d0:	0019      	movs	r1, r3
 80004d2:	2316      	movs	r3, #22
 80004d4:	001a      	movs	r2, r3
 80004d6:	f002 fd71 	bl	8002fbc <memcpy>
    	    	 len =strlen(buffer);
 80004da:	4b77      	ldr	r3, [pc, #476]	; (80006b8 <main+0x3ec>)
 80004dc:	0018      	movs	r0, r3
 80004de:	f7ff fe13 	bl	8000108 <strlen>
 80004e2:	0003      	movs	r3, r0
 80004e4:	001a      	movs	r2, r3
 80004e6:	4b76      	ldr	r3, [pc, #472]	; (80006c0 <main+0x3f4>)
 80004e8:	601a      	str	r2, [r3, #0]
    	    	 HAL_UART_Transmit(&huart2, buffer, len, 1000);
 80004ea:	4b75      	ldr	r3, [pc, #468]	; (80006c0 <main+0x3f4>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	23fa      	movs	r3, #250	; 0xfa
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	4970      	ldr	r1, [pc, #448]	; (80006b8 <main+0x3ec>)
 80004f6:	486a      	ldr	r0, [pc, #424]	; (80006a0 <main+0x3d4>)
 80004f8:	f001 fd7a 	bl	8001ff0 <HAL_UART_Transmit>
    	    	 //sov4 = 0;
    	    	 Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 80004fc:	4b69      	ldr	r3, [pc, #420]	; (80006a4 <main+0x3d8>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
    	    	 break;
 8000502:	e1aa      	b.n	800085a <main+0x58e>
    	 	 case 9:
    	   	 	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
    	    	 sprintf(buffer, "Valve SOV5 is ON..\r\n");
 8000504:	4a6c      	ldr	r2, [pc, #432]	; (80006b8 <main+0x3ec>)
 8000506:	4b76      	ldr	r3, [pc, #472]	; (80006e0 <main+0x414>)
 8000508:	0010      	movs	r0, r2
 800050a:	0019      	movs	r1, r3
 800050c:	2315      	movs	r3, #21
 800050e:	001a      	movs	r2, r3
 8000510:	f002 fd54 	bl	8002fbc <memcpy>
    	    	 len =strlen(buffer);
 8000514:	4b68      	ldr	r3, [pc, #416]	; (80006b8 <main+0x3ec>)
 8000516:	0018      	movs	r0, r3
 8000518:	f7ff fdf6 	bl	8000108 <strlen>
 800051c:	0003      	movs	r3, r0
 800051e:	001a      	movs	r2, r3
 8000520:	4b67      	ldr	r3, [pc, #412]	; (80006c0 <main+0x3f4>)
 8000522:	601a      	str	r2, [r3, #0]
    	    	 HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8000524:	4b66      	ldr	r3, [pc, #408]	; (80006c0 <main+0x3f4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	b29a      	uxth	r2, r3
 800052a:	23fa      	movs	r3, #250	; 0xfa
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	4962      	ldr	r1, [pc, #392]	; (80006b8 <main+0x3ec>)
 8000530:	485b      	ldr	r0, [pc, #364]	; (80006a0 <main+0x3d4>)
 8000532:	f001 fd5d 	bl	8001ff0 <HAL_UART_Transmit>
    	    	 //sov5 = 1;
    	    	 Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 8000536:	4b5b      	ldr	r3, [pc, #364]	; (80006a4 <main+0x3d8>)
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
    	    	 break;
 800053c:	e18d      	b.n	800085a <main+0x58e>
    	 	 case 10:
    	 		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
    	 		sprintf(buffer, "Valve SOV5 is OFF..\r\n");
 800053e:	4a5e      	ldr	r2, [pc, #376]	; (80006b8 <main+0x3ec>)
 8000540:	4b68      	ldr	r3, [pc, #416]	; (80006e4 <main+0x418>)
 8000542:	0010      	movs	r0, r2
 8000544:	0019      	movs	r1, r3
 8000546:	2316      	movs	r3, #22
 8000548:	001a      	movs	r2, r3
 800054a:	f002 fd37 	bl	8002fbc <memcpy>
    	 		len =strlen(buffer);
 800054e:	4b5a      	ldr	r3, [pc, #360]	; (80006b8 <main+0x3ec>)
 8000550:	0018      	movs	r0, r3
 8000552:	f7ff fdd9 	bl	8000108 <strlen>
 8000556:	0003      	movs	r3, r0
 8000558:	001a      	movs	r2, r3
 800055a:	4b59      	ldr	r3, [pc, #356]	; (80006c0 <main+0x3f4>)
 800055c:	601a      	str	r2, [r3, #0]
    	 		HAL_UART_Transmit(&huart2, buffer, len, 1000);
 800055e:	4b58      	ldr	r3, [pc, #352]	; (80006c0 <main+0x3f4>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	b29a      	uxth	r2, r3
 8000564:	23fa      	movs	r3, #250	; 0xfa
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	4953      	ldr	r1, [pc, #332]	; (80006b8 <main+0x3ec>)
 800056a:	484d      	ldr	r0, [pc, #308]	; (80006a0 <main+0x3d4>)
 800056c:	f001 fd40 	bl	8001ff0 <HAL_UART_Transmit>
    	 		//sov5 = 0;
    	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 8000570:	4b4c      	ldr	r3, [pc, #304]	; (80006a4 <main+0x3d8>)
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
    	 		break;
 8000576:	e170      	b.n	800085a <main+0x58e>
    	 	 case 11:
    	 		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
    	 		sprintf(buffer, "Valve SOV6 is ON..\r\n");
 8000578:	4a4f      	ldr	r2, [pc, #316]	; (80006b8 <main+0x3ec>)
 800057a:	4b5b      	ldr	r3, [pc, #364]	; (80006e8 <main+0x41c>)
 800057c:	0010      	movs	r0, r2
 800057e:	0019      	movs	r1, r3
 8000580:	2315      	movs	r3, #21
 8000582:	001a      	movs	r2, r3
 8000584:	f002 fd1a 	bl	8002fbc <memcpy>
    	 		len =strlen(buffer);
 8000588:	4b4b      	ldr	r3, [pc, #300]	; (80006b8 <main+0x3ec>)
 800058a:	0018      	movs	r0, r3
 800058c:	f7ff fdbc 	bl	8000108 <strlen>
 8000590:	0003      	movs	r3, r0
 8000592:	001a      	movs	r2, r3
 8000594:	4b4a      	ldr	r3, [pc, #296]	; (80006c0 <main+0x3f4>)
 8000596:	601a      	str	r2, [r3, #0]
    	 		HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8000598:	4b49      	ldr	r3, [pc, #292]	; (80006c0 <main+0x3f4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	b29a      	uxth	r2, r3
 800059e:	23fa      	movs	r3, #250	; 0xfa
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	4945      	ldr	r1, [pc, #276]	; (80006b8 <main+0x3ec>)
 80005a4:	483e      	ldr	r0, [pc, #248]	; (80006a0 <main+0x3d4>)
 80005a6:	f001 fd23 	bl	8001ff0 <HAL_UART_Transmit>
    	 		//sov6 = 1;
    	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 80005aa:	4b3e      	ldr	r3, [pc, #248]	; (80006a4 <main+0x3d8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
    	 		break;
 80005b0:	e153      	b.n	800085a <main+0x58e>
    	 	 case 12:
    	 		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
    	 	     sprintf(buffer, "Valve SOV6 is OFF..\r\n");
 80005b2:	4a41      	ldr	r2, [pc, #260]	; (80006b8 <main+0x3ec>)
 80005b4:	4b4d      	ldr	r3, [pc, #308]	; (80006ec <main+0x420>)
 80005b6:	0010      	movs	r0, r2
 80005b8:	0019      	movs	r1, r3
 80005ba:	2316      	movs	r3, #22
 80005bc:	001a      	movs	r2, r3
 80005be:	f002 fcfd 	bl	8002fbc <memcpy>
    	 	     len =strlen(buffer);
 80005c2:	4b3d      	ldr	r3, [pc, #244]	; (80006b8 <main+0x3ec>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f7ff fd9f 	bl	8000108 <strlen>
 80005ca:	0003      	movs	r3, r0
 80005cc:	001a      	movs	r2, r3
 80005ce:	4b3c      	ldr	r3, [pc, #240]	; (80006c0 <main+0x3f4>)
 80005d0:	601a      	str	r2, [r3, #0]
    	 	     HAL_UART_Transmit(&huart2, buffer, len, 1000);
 80005d2:	4b3b      	ldr	r3, [pc, #236]	; (80006c0 <main+0x3f4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	23fa      	movs	r3, #250	; 0xfa
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4936      	ldr	r1, [pc, #216]	; (80006b8 <main+0x3ec>)
 80005de:	4830      	ldr	r0, [pc, #192]	; (80006a0 <main+0x3d4>)
 80005e0:	f001 fd06 	bl	8001ff0 <HAL_UART_Transmit>
    	 	     //sov6 = 0;
    	 		 Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 80005e4:	4b2f      	ldr	r3, [pc, #188]	; (80006a4 <main+0x3d8>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
    	 		 break;
 80005ea:	e136      	b.n	800085a <main+0x58e>
    	 	 case 13:
    	 		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
    	 		sprintf(buffer, "Valve SOV7 is ON..\r\n");
 80005ec:	4a32      	ldr	r2, [pc, #200]	; (80006b8 <main+0x3ec>)
 80005ee:	4b40      	ldr	r3, [pc, #256]	; (80006f0 <main+0x424>)
 80005f0:	0010      	movs	r0, r2
 80005f2:	0019      	movs	r1, r3
 80005f4:	2315      	movs	r3, #21
 80005f6:	001a      	movs	r2, r3
 80005f8:	f002 fce0 	bl	8002fbc <memcpy>
    	 		len =strlen(buffer);
 80005fc:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <main+0x3ec>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f7ff fd82 	bl	8000108 <strlen>
 8000604:	0003      	movs	r3, r0
 8000606:	001a      	movs	r2, r3
 8000608:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <main+0x3f4>)
 800060a:	601a      	str	r2, [r3, #0]
    	 		HAL_UART_Transmit(&huart2, buffer, len, 1000);
 800060c:	4b2c      	ldr	r3, [pc, #176]	; (80006c0 <main+0x3f4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	b29a      	uxth	r2, r3
 8000612:	23fa      	movs	r3, #250	; 0xfa
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	4928      	ldr	r1, [pc, #160]	; (80006b8 <main+0x3ec>)
 8000618:	4821      	ldr	r0, [pc, #132]	; (80006a0 <main+0x3d4>)
 800061a:	f001 fce9 	bl	8001ff0 <HAL_UART_Transmit>
    	 		//sov7 = 1;
    	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 800061e:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <main+0x3d8>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
    	 		break;
 8000624:	e119      	b.n	800085a <main+0x58e>
    	 	 case 14:
    	 		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
    	 		sprintf(buffer, "Valve SOV7 is OFF..\r\n");
 8000626:	4a24      	ldr	r2, [pc, #144]	; (80006b8 <main+0x3ec>)
 8000628:	4b32      	ldr	r3, [pc, #200]	; (80006f4 <main+0x428>)
 800062a:	0010      	movs	r0, r2
 800062c:	0019      	movs	r1, r3
 800062e:	2316      	movs	r3, #22
 8000630:	001a      	movs	r2, r3
 8000632:	f002 fcc3 	bl	8002fbc <memcpy>
    	 		len =strlen(buffer);
 8000636:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <main+0x3ec>)
 8000638:	0018      	movs	r0, r3
 800063a:	f7ff fd65 	bl	8000108 <strlen>
 800063e:	0003      	movs	r3, r0
 8000640:	001a      	movs	r2, r3
 8000642:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <main+0x3f4>)
 8000644:	601a      	str	r2, [r3, #0]
    	 		HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8000646:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <main+0x3f4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	b29a      	uxth	r2, r3
 800064c:	23fa      	movs	r3, #250	; 0xfa
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	4919      	ldr	r1, [pc, #100]	; (80006b8 <main+0x3ec>)
 8000652:	4813      	ldr	r0, [pc, #76]	; (80006a0 <main+0x3d4>)
 8000654:	f001 fccc 	bl	8001ff0 <HAL_UART_Transmit>
    	 		//sov7 =0;
    	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <main+0x3d8>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
    	 		break;
 800065e:	e0fc      	b.n	800085a <main+0x58e>
    	 	 case 15:
                //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
    	 		sprintf(buffer, "Valve SOV8 is ON..\r\n");
 8000660:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <main+0x3ec>)
 8000662:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <main+0x42c>)
 8000664:	0010      	movs	r0, r2
 8000666:	0019      	movs	r1, r3
 8000668:	2315      	movs	r3, #21
 800066a:	001a      	movs	r2, r3
 800066c:	f002 fca6 	bl	8002fbc <memcpy>
    	 		len =strlen(buffer);
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <main+0x3ec>)
 8000672:	0018      	movs	r0, r3
 8000674:	f7ff fd48 	bl	8000108 <strlen>
 8000678:	0003      	movs	r3, r0
 800067a:	001a      	movs	r2, r3
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <main+0x3f4>)
 800067e:	601a      	str	r2, [r3, #0]
    	 		HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <main+0x3f4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	b29a      	uxth	r2, r3
 8000686:	23fa      	movs	r3, #250	; 0xfa
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	490b      	ldr	r1, [pc, #44]	; (80006b8 <main+0x3ec>)
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <main+0x3d4>)
 800068e:	f001 fcaf 	bl	8001ff0 <HAL_UART_Transmit>
    	 		//sov8 = 1;
    	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 8000692:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <main+0x3d8>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
    	 		break;
 8000698:	e0df      	b.n	800085a <main+0x58e>
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	200001fc 	.word	0x200001fc
 80006a0:	20000350 	.word	0x20000350
 80006a4:	200001f8 	.word	0x200001f8
 80006a8:	200002ec 	.word	0x200002ec
 80006ac:	20000200 	.word	0x20000200
 80006b0:	08003374 	.word	0x08003374
 80006b4:	48000400 	.word	0x48000400
 80006b8:	20000288 	.word	0x20000288
 80006bc:	08003168 	.word	0x08003168
 80006c0:	200003d4 	.word	0x200003d4
 80006c4:	08003180 	.word	0x08003180
 80006c8:	08003198 	.word	0x08003198
 80006cc:	080031b0 	.word	0x080031b0
 80006d0:	080031c8 	.word	0x080031c8
 80006d4:	080031e0 	.word	0x080031e0
 80006d8:	080031f8 	.word	0x080031f8
 80006dc:	08003210 	.word	0x08003210
 80006e0:	08003228 	.word	0x08003228
 80006e4:	08003240 	.word	0x08003240
 80006e8:	08003258 	.word	0x08003258
 80006ec:	08003270 	.word	0x08003270
 80006f0:	08003288 	.word	0x08003288
 80006f4:	080032a0 	.word	0x080032a0
 80006f8:	080032b8 	.word	0x080032b8
    	 	 case 16:
    	 		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
    	 		sprintf(buffer, "Valve SOV8 is OFF..\r\n");
 80006fc:	4a57      	ldr	r2, [pc, #348]	; (800085c <main+0x590>)
 80006fe:	4b58      	ldr	r3, [pc, #352]	; (8000860 <main+0x594>)
 8000700:	0010      	movs	r0, r2
 8000702:	0019      	movs	r1, r3
 8000704:	2316      	movs	r3, #22
 8000706:	001a      	movs	r2, r3
 8000708:	f002 fc58 	bl	8002fbc <memcpy>
    	 		len =strlen(buffer);
 800070c:	4b53      	ldr	r3, [pc, #332]	; (800085c <main+0x590>)
 800070e:	0018      	movs	r0, r3
 8000710:	f7ff fcfa 	bl	8000108 <strlen>
 8000714:	0003      	movs	r3, r0
 8000716:	001a      	movs	r2, r3
 8000718:	4b52      	ldr	r3, [pc, #328]	; (8000864 <main+0x598>)
 800071a:	601a      	str	r2, [r3, #0]
    	 		HAL_UART_Transmit(&huart2, buffer, len, 1000);
 800071c:	4b51      	ldr	r3, [pc, #324]	; (8000864 <main+0x598>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	b29a      	uxth	r2, r3
 8000722:	23fa      	movs	r3, #250	; 0xfa
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	494d      	ldr	r1, [pc, #308]	; (800085c <main+0x590>)
 8000728:	484f      	ldr	r0, [pc, #316]	; (8000868 <main+0x59c>)
 800072a:	f001 fc61 	bl	8001ff0 <HAL_UART_Transmit>
    	 		//sov8 = 0;
    	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 800072e:	4b4f      	ldr	r3, [pc, #316]	; (800086c <main+0x5a0>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
    	 		break;
 8000734:	e091      	b.n	800085a <main+0x58e>
    	 	 case 17:
    	 		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
    	 		sprintf(buffer, "IG1 is ON..\r\n");
 8000736:	4a49      	ldr	r2, [pc, #292]	; (800085c <main+0x590>)
 8000738:	4b4d      	ldr	r3, [pc, #308]	; (8000870 <main+0x5a4>)
 800073a:	0010      	movs	r0, r2
 800073c:	0019      	movs	r1, r3
 800073e:	230e      	movs	r3, #14
 8000740:	001a      	movs	r2, r3
 8000742:	f002 fc3b 	bl	8002fbc <memcpy>
    	 		len =strlen(buffer);
 8000746:	4b45      	ldr	r3, [pc, #276]	; (800085c <main+0x590>)
 8000748:	0018      	movs	r0, r3
 800074a:	f7ff fcdd 	bl	8000108 <strlen>
 800074e:	0003      	movs	r3, r0
 8000750:	001a      	movs	r2, r3
 8000752:	4b44      	ldr	r3, [pc, #272]	; (8000864 <main+0x598>)
 8000754:	601a      	str	r2, [r3, #0]
    	 		HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8000756:	4b43      	ldr	r3, [pc, #268]	; (8000864 <main+0x598>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	b29a      	uxth	r2, r3
 800075c:	23fa      	movs	r3, #250	; 0xfa
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	493e      	ldr	r1, [pc, #248]	; (800085c <main+0x590>)
 8000762:	4841      	ldr	r0, [pc, #260]	; (8000868 <main+0x59c>)
 8000764:	f001 fc44 	bl	8001ff0 <HAL_UART_Transmit>
    	 		//ig1 = 1;
    	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 8000768:	4b40      	ldr	r3, [pc, #256]	; (800086c <main+0x5a0>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
    	 		break;
 800076e:	e074      	b.n	800085a <main+0x58e>
    	 	 case 18:
    	 		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
    	 		sprintf(buffer, "IG1 is OFF..\r\n");
 8000770:	4a3a      	ldr	r2, [pc, #232]	; (800085c <main+0x590>)
 8000772:	4b40      	ldr	r3, [pc, #256]	; (8000874 <main+0x5a8>)
 8000774:	0010      	movs	r0, r2
 8000776:	0019      	movs	r1, r3
 8000778:	230f      	movs	r3, #15
 800077a:	001a      	movs	r2, r3
 800077c:	f002 fc1e 	bl	8002fbc <memcpy>
    	 		len =strlen(buffer);
 8000780:	4b36      	ldr	r3, [pc, #216]	; (800085c <main+0x590>)
 8000782:	0018      	movs	r0, r3
 8000784:	f7ff fcc0 	bl	8000108 <strlen>
 8000788:	0003      	movs	r3, r0
 800078a:	001a      	movs	r2, r3
 800078c:	4b35      	ldr	r3, [pc, #212]	; (8000864 <main+0x598>)
 800078e:	601a      	str	r2, [r3, #0]
    	 		HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8000790:	4b34      	ldr	r3, [pc, #208]	; (8000864 <main+0x598>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	b29a      	uxth	r2, r3
 8000796:	23fa      	movs	r3, #250	; 0xfa
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4930      	ldr	r1, [pc, #192]	; (800085c <main+0x590>)
 800079c:	4832      	ldr	r0, [pc, #200]	; (8000868 <main+0x59c>)
 800079e:	f001 fc27 	bl	8001ff0 <HAL_UART_Transmit>
    	 		//ig1 = 0;
    	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 80007a2:	4b32      	ldr	r3, [pc, #200]	; (800086c <main+0x5a0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
    	 		break;
 80007a8:	e057      	b.n	800085a <main+0x58e>
    	 	 case 19:
    	   	     //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
    	    	 sprintf(buffer, "IG2 is ON..\r\n");
 80007aa:	4a2c      	ldr	r2, [pc, #176]	; (800085c <main+0x590>)
 80007ac:	4b32      	ldr	r3, [pc, #200]	; (8000878 <main+0x5ac>)
 80007ae:	0010      	movs	r0, r2
 80007b0:	0019      	movs	r1, r3
 80007b2:	230e      	movs	r3, #14
 80007b4:	001a      	movs	r2, r3
 80007b6:	f002 fc01 	bl	8002fbc <memcpy>
    	    	 len =strlen(buffer);
 80007ba:	4b28      	ldr	r3, [pc, #160]	; (800085c <main+0x590>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff fca3 	bl	8000108 <strlen>
 80007c2:	0003      	movs	r3, r0
 80007c4:	001a      	movs	r2, r3
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <main+0x598>)
 80007c8:	601a      	str	r2, [r3, #0]
    	    	 HAL_UART_Transmit(&huart2, buffer, len, 1000);
 80007ca:	4b26      	ldr	r3, [pc, #152]	; (8000864 <main+0x598>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	23fa      	movs	r3, #250	; 0xfa
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	4921      	ldr	r1, [pc, #132]	; (800085c <main+0x590>)
 80007d6:	4824      	ldr	r0, [pc, #144]	; (8000868 <main+0x59c>)
 80007d8:	f001 fc0a 	bl	8001ff0 <HAL_UART_Transmit>
    	    	 //ig2 = 1;
    	    	 Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 80007dc:	4b23      	ldr	r3, [pc, #140]	; (800086c <main+0x5a0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
    	    	 break;
 80007e2:	e03a      	b.n	800085a <main+0x58e>
    	 	 case 20:
    	   	 	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
    	    	 sprintf(buffer, "Valve IG2 is OFF..\r\n");
 80007e4:	4a1d      	ldr	r2, [pc, #116]	; (800085c <main+0x590>)
 80007e6:	4b25      	ldr	r3, [pc, #148]	; (800087c <main+0x5b0>)
 80007e8:	0010      	movs	r0, r2
 80007ea:	0019      	movs	r1, r3
 80007ec:	2315      	movs	r3, #21
 80007ee:	001a      	movs	r2, r3
 80007f0:	f002 fbe4 	bl	8002fbc <memcpy>
    	    	 len =strlen(buffer);
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <main+0x590>)
 80007f6:	0018      	movs	r0, r3
 80007f8:	f7ff fc86 	bl	8000108 <strlen>
 80007fc:	0003      	movs	r3, r0
 80007fe:	001a      	movs	r2, r3
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <main+0x598>)
 8000802:	601a      	str	r2, [r3, #0]
    	    	 HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <main+0x598>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	b29a      	uxth	r2, r3
 800080a:	23fa      	movs	r3, #250	; 0xfa
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	4913      	ldr	r1, [pc, #76]	; (800085c <main+0x590>)
 8000810:	4815      	ldr	r0, [pc, #84]	; (8000868 <main+0x59c>)
 8000812:	f001 fbed 	bl	8001ff0 <HAL_UART_Transmit>
    	    	// ig2 = 0;
    	    	 Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <main+0x5a0>)
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
    	    	 break;
 800081c:	e01d      	b.n	800085a <main+0x58e>
    	 		sov1 = 0, sov2= 0, sov3= 0, sov4= 0, sov5= 0, sov6= 0, sov7= 0, sov8= 0, ig1= 0, ig2 =0;
    	 		//After setting the status we can proceed to turn low all the GPIOs used.
    	 	    break;*/

    	 	 default:
    	 		sprintf(buffer, "Please enter a valid command...\r\n");
 800081e:	4a0f      	ldr	r2, [pc, #60]	; (800085c <main+0x590>)
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <main+0x5b4>)
 8000822:	0010      	movs	r0, r2
 8000824:	0019      	movs	r1, r3
 8000826:	2322      	movs	r3, #34	; 0x22
 8000828:	001a      	movs	r2, r3
 800082a:	f002 fbc7 	bl	8002fbc <memcpy>
    	 		len =strlen(buffer);
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <main+0x590>)
 8000830:	0018      	movs	r0, r3
 8000832:	f7ff fc69 	bl	8000108 <strlen>
 8000836:	0003      	movs	r3, r0
 8000838:	001a      	movs	r2, r3
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <main+0x598>)
 800083c:	601a      	str	r2, [r3, #0]
    	 		HAL_UART_Transmit(&huart2, buffer, len, 1000);
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <main+0x598>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	b29a      	uxth	r2, r3
 8000844:	23fa      	movs	r3, #250	; 0xfa
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4904      	ldr	r1, [pc, #16]	; (800085c <main+0x590>)
 800084a:	4807      	ldr	r0, [pc, #28]	; (8000868 <main+0x59c>)
 800084c:	f001 fbd0 	bl	8001ff0 <HAL_UART_Transmit>
    	 		Transfer_cplt=0; //Set to 0 to reset the transfer_complete variable
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <main+0x5a0>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	e54b      	b.n	80002f0 <main+0x24>

    	 }

        }// end of if(Transfer_cplt)
 8000858:	46c0      	nop			; (mov r8, r8)
     if (Transfer_cplt)
 800085a:	e549      	b.n	80002f0 <main+0x24>
 800085c:	20000288 	.word	0x20000288
 8000860:	080032d0 	.word	0x080032d0
 8000864:	200003d4 	.word	0x200003d4
 8000868:	20000350 	.word	0x20000350
 800086c:	200001f8 	.word	0x200001f8
 8000870:	080032e8 	.word	0x080032e8
 8000874:	080032f8 	.word	0x080032f8
 8000878:	08003308 	.word	0x08003308
 800087c:	08003318 	.word	0x08003318
 8000880:	08003330 	.word	0x08003330

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b099      	sub	sp, #100	; 0x64
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	242c      	movs	r4, #44	; 0x2c
 800088c:	193b      	adds	r3, r7, r4
 800088e:	0018      	movs	r0, r3
 8000890:	2334      	movs	r3, #52	; 0x34
 8000892:	001a      	movs	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	f002 fb9a 	bl	8002fce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089a:	231c      	movs	r3, #28
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	0018      	movs	r0, r3
 80008a0:	2310      	movs	r3, #16
 80008a2:	001a      	movs	r2, r3
 80008a4:	2100      	movs	r1, #0
 80008a6:	f002 fb92 	bl	8002fce <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	0018      	movs	r0, r3
 80008ae:	2318      	movs	r3, #24
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f002 fb8b 	bl	8002fce <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	2220      	movs	r2, #32
 80008bc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	2201      	movs	r2, #1
 80008c2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	0018      	movs	r0, r3
 80008ce:	f000 fd4f 	bl	8001370 <HAL_RCC_OscConfig>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x56>
  {
    Error_Handler();
 80008d6:	f000 f8df 	bl	8000a98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	211c      	movs	r1, #28
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2207      	movs	r2, #7
 80008e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2203      	movs	r2, #3
 80008e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2101      	movs	r1, #1
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 f8bf 	bl	8001a7c <HAL_RCC_ClockConfig>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000902:	f000 f8c9 	bl	8000a98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2201      	movs	r2, #1
 800090a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	0018      	movs	r0, r3
 8000916:	f001 fa29 	bl	8001d6c <HAL_RCCEx_PeriphCLKConfig>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800091e:	f000 f8bb 	bl	8000a98 <Error_Handler>
  }
}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b019      	add	sp, #100	; 0x64
 8000928:	bd90      	pop	{r4, r7, pc}
	...

0800092c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_USART1_UART_Init+0x58>)
 8000932:	4a15      	ldr	r2, [pc, #84]	; (8000988 <MX_USART1_UART_Init+0x5c>)
 8000934:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_USART1_UART_Init+0x58>)
 8000938:	2296      	movs	r2, #150	; 0x96
 800093a:	0192      	lsls	r2, r2, #6
 800093c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USART1_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_USART1_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART1_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USART1_UART_Init+0x58>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USART1_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USART1_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USART1_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USART1_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <MX_USART1_UART_Init+0x58>)
 8000970:	0018      	movs	r0, r3
 8000972:	f001 fae9 	bl	8001f48 <HAL_UART_Init>
 8000976:	1e03      	subs	r3, r0, #0
 8000978:	d001      	beq.n	800097e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800097a:	f000 f88d 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000204 	.word	0x20000204
 8000988:	40013800 	.word	0x40013800

0800098c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 8000992:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <MX_USART2_UART_Init+0x5c>)
 8000994:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 8000998:	2296      	movs	r2, #150	; 0x96
 800099a:	0192      	lsls	r2, r2, #6
 800099c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009d0:	0018      	movs	r0, r3
 80009d2:	f001 fab9 	bl	8001f48 <HAL_UART_Init>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d001      	beq.n	80009de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009da:	f000 f85d 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000350 	.word	0x20000350
 80009e8:	40004400 	.word	0x40004400

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b089      	sub	sp, #36	; 0x24
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	240c      	movs	r4, #12
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	0018      	movs	r0, r3
 80009f8:	2314      	movs	r3, #20
 80009fa:	001a      	movs	r2, r3
 80009fc:	2100      	movs	r1, #0
 80009fe:	f002 fae6 	bl	8002fce <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a02:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <MX_GPIO_Init+0xa4>)
 8000a04:	695a      	ldr	r2, [r3, #20]
 8000a06:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <MX_GPIO_Init+0xa4>)
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	03c9      	lsls	r1, r1, #15
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	615a      	str	r2, [r3, #20]
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_GPIO_Init+0xa4>)
 8000a12:	695a      	ldr	r2, [r3, #20]
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	03db      	lsls	r3, r3, #15
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_GPIO_Init+0xa4>)
 8000a20:	695a      	ldr	r2, [r3, #20]
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_GPIO_Init+0xa4>)
 8000a24:	2180      	movs	r1, #128	; 0x80
 8000a26:	0289      	lsls	r1, r1, #10
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	615a      	str	r2, [r3, #20]
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_GPIO_Init+0xa4>)
 8000a2e:	695a      	ldr	r2, [r3, #20]
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	029b      	lsls	r3, r3, #10
 8000a34:	4013      	ands	r3, r2
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_GPIO_Init+0xa4>)
 8000a3c:	695a      	ldr	r2, [r3, #20]
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_GPIO_Init+0xa4>)
 8000a40:	2180      	movs	r1, #128	; 0x80
 8000a42:	02c9      	lsls	r1, r1, #11
 8000a44:	430a      	orrs	r2, r1
 8000a46:	615a      	str	r2, [r3, #20]
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_GPIO_Init+0xa4>)
 8000a4a:	695a      	ldr	r2, [r3, #20]
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	02db      	lsls	r3, r3, #11
 8000a50:	4013      	ands	r3, r2
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2108      	movs	r1, #8
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fc69 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a62:	0021      	movs	r1, r4
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2208      	movs	r2, #8
 8000a68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a80:	0019      	movs	r1, r3
 8000a82:	0010      	movs	r0, r2
 8000a84:	f000 faee 	bl	8001064 <HAL_GPIO_Init>

}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b009      	add	sp, #36	; 0x24
 8000a8e:	bd90      	pop	{r4, r7, pc}
 8000a90:	40021000 	.word	0x40021000
 8000a94:	48000400 	.word	0x48000400

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <Error_Handler+0x6>

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_MspInit+0x44>)
 8000aa8:	699a      	ldr	r2, [r3, #24]
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_MspInit+0x44>)
 8000aac:	2101      	movs	r1, #1
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	619a      	str	r2, [r3, #24]
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4013      	ands	r3, r2
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ac0:	69da      	ldr	r2, [r3, #28]
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ac4:	2180      	movs	r1, #128	; 0x80
 8000ac6:	0549      	lsls	r1, r1, #21
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	61da      	str	r2, [r3, #28]
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ace:	69da      	ldr	r2, [r3, #28]
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	055b      	lsls	r3, r3, #21
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	; 0x30
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	231c      	movs	r3, #28
 8000af2:	18fb      	adds	r3, r7, r3
 8000af4:	0018      	movs	r0, r3
 8000af6:	2314      	movs	r3, #20
 8000af8:	001a      	movs	r2, r3
 8000afa:	2100      	movs	r1, #0
 8000afc:	f002 fa67 	bl	8002fce <memset>
  if(huart->Instance==USART1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a3d      	ldr	r2, [pc, #244]	; (8000bfc <HAL_UART_MspInit+0x114>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d134      	bne.n	8000b74 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b0a:	4b3d      	ldr	r3, [pc, #244]	; (8000c00 <HAL_UART_MspInit+0x118>)
 8000b0c:	699a      	ldr	r2, [r3, #24]
 8000b0e:	4b3c      	ldr	r3, [pc, #240]	; (8000c00 <HAL_UART_MspInit+0x118>)
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	01c9      	lsls	r1, r1, #7
 8000b14:	430a      	orrs	r2, r1
 8000b16:	619a      	str	r2, [r3, #24]
 8000b18:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <HAL_UART_MspInit+0x118>)
 8000b1a:	699a      	ldr	r2, [r3, #24]
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	01db      	lsls	r3, r3, #7
 8000b20:	4013      	ands	r3, r2
 8000b22:	61bb      	str	r3, [r7, #24]
 8000b24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <HAL_UART_MspInit+0x118>)
 8000b28:	695a      	ldr	r2, [r3, #20]
 8000b2a:	4b35      	ldr	r3, [pc, #212]	; (8000c00 <HAL_UART_MspInit+0x118>)
 8000b2c:	2180      	movs	r1, #128	; 0x80
 8000b2e:	0289      	lsls	r1, r1, #10
 8000b30:	430a      	orrs	r2, r1
 8000b32:	615a      	str	r2, [r3, #20]
 8000b34:	4b32      	ldr	r3, [pc, #200]	; (8000c00 <HAL_UART_MspInit+0x118>)
 8000b36:	695a      	ldr	r2, [r3, #20]
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	029b      	lsls	r3, r3, #10
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b42:	211c      	movs	r1, #28
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	22c0      	movs	r2, #192	; 0xc0
 8000b48:	00d2      	lsls	r2, r2, #3
 8000b4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2202      	movs	r2, #2
 8000b50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2201      	movs	r2, #1
 8000b62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	187a      	adds	r2, r7, r1
 8000b66:	2390      	movs	r3, #144	; 0x90
 8000b68:	05db      	lsls	r3, r3, #23
 8000b6a:	0011      	movs	r1, r2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f000 fa79 	bl	8001064 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b72:	e03f      	b.n	8000bf4 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a22      	ldr	r2, [pc, #136]	; (8000c04 <HAL_UART_MspInit+0x11c>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d13a      	bne.n	8000bf4 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <HAL_UART_MspInit+0x118>)
 8000b80:	69da      	ldr	r2, [r3, #28]
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <HAL_UART_MspInit+0x118>)
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	0289      	lsls	r1, r1, #10
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	61da      	str	r2, [r3, #28]
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <HAL_UART_MspInit+0x118>)
 8000b8e:	69da      	ldr	r2, [r3, #28]
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	029b      	lsls	r3, r3, #10
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <HAL_UART_MspInit+0x118>)
 8000b9c:	695a      	ldr	r2, [r3, #20]
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <HAL_UART_MspInit+0x118>)
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	0289      	lsls	r1, r1, #10
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	615a      	str	r2, [r3, #20]
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <HAL_UART_MspInit+0x118>)
 8000baa:	695a      	ldr	r2, [r3, #20]
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	029b      	lsls	r3, r3, #10
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000bb6:	211c      	movs	r1, #28
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	4a13      	ldr	r2, [pc, #76]	; (8000c08 <HAL_UART_MspInit+0x120>)
 8000bbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2203      	movs	r2, #3
 8000bce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	187a      	adds	r2, r7, r1
 8000bd8:	2390      	movs	r3, #144	; 0x90
 8000bda:	05db      	lsls	r3, r3, #23
 8000bdc:	0011      	movs	r1, r2
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 fa40 	bl	8001064 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	201c      	movs	r0, #28
 8000bea:	f000 f98b 	bl	8000f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bee:	201c      	movs	r0, #28
 8000bf0:	f000 f99d 	bl	8000f2e <HAL_NVIC_EnableIRQ>
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b00c      	add	sp, #48	; 0x30
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40013800 	.word	0x40013800
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40004400 	.word	0x40004400
 8000c08:	00008004 	.word	0x00008004

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <NMI_Handler+0x4>

08000c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <HardFault_Handler+0x4>

08000c18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c30:	f000 f8a0 	bl	8000d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	/* if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)){  // check UART2 Rx Not Empty flag
	        HAL_UART_Transmit_IT(&huart2, &rxBuffer, 1);   // transmit the received data back
	    }*/

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <USART2_IRQHandler+0x14>)
 8000c42:	0018      	movs	r0, r3
 8000c44:	f001 face 	bl	80021e4 <HAL_UART_IRQHandler>

  		  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_3,0);
  	  }*/

  /* USER CODE END USART2_IRQn 1 */
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	20000350 	.word	0x20000350

08000c54 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c60:	4813      	ldr	r0, [pc, #76]	; (8000cb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c62:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000c64:	4813      	ldr	r0, [pc, #76]	; (8000cb4 <LoopForever+0x6>)
    LDR R1, [R0]
 8000c66:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000c68:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000c6a:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <LoopForever+0xa>)
    CMP R1, R2
 8000c6c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000c6e:	d105      	bne.n	8000c7c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000c70:	4812      	ldr	r0, [pc, #72]	; (8000cbc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000c72:	4913      	ldr	r1, [pc, #76]	; (8000cc0 <LoopForever+0x12>)
    STR R1, [R0]
 8000c74:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000c76:	4813      	ldr	r0, [pc, #76]	; (8000cc4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000c78:	4913      	ldr	r1, [pc, #76]	; (8000cc8 <LoopForever+0x1a>)
    STR R1, [R0]
 8000c7a:	6001      	str	r1, [r0, #0]

08000c7c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c7c:	4813      	ldr	r0, [pc, #76]	; (8000ccc <LoopForever+0x1e>)
  ldr r1, =_edata
 8000c7e:	4914      	ldr	r1, [pc, #80]	; (8000cd0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000c80:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <LoopForever+0x26>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000c94:	4c11      	ldr	r4, [pc, #68]	; (8000cdc <LoopForever+0x2e>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ca2:	f7ff ffd7 	bl	8000c54 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ca6:	f002 f965 	bl	8002f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000caa:	f7ff fb0f 	bl	80002cc <main>

08000cae <LoopForever>:

LoopForever:
    b LoopForever
 8000cae:	e7fe      	b.n	8000cae <LoopForever>
  ldr   r0, =_estack
 8000cb0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000cb4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000cb8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000cbc:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000cc0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000cc4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000cc8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000cd4:	080034f4 	.word	0x080034f4
  ldr r2, =_sbss
 8000cd8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000cdc:	200003dc 	.word	0x200003dc

08000ce0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC1_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <HAL_Init+0x24>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_Init+0x24>)
 8000cee:	2110      	movs	r1, #16
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f000 f809 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cfa:	f7ff fed1 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	40022000 	.word	0x40022000

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <HAL_InitTick+0x5c>)
 8000d16:	681c      	ldr	r4, [r3, #0]
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_InitTick+0x60>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	23fa      	movs	r3, #250	; 0xfa
 8000d20:	0098      	lsls	r0, r3, #2
 8000d22:	f7ff f9f9 	bl	8000118 <__udivsi3>
 8000d26:	0003      	movs	r3, r0
 8000d28:	0019      	movs	r1, r3
 8000d2a:	0020      	movs	r0, r4
 8000d2c:	f7ff f9f4 	bl	8000118 <__udivsi3>
 8000d30:	0003      	movs	r3, r0
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 f90b 	bl	8000f4e <HAL_SYSTICK_Config>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d001      	beq.n	8000d40 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e00f      	b.n	8000d60 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d80b      	bhi.n	8000d5e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	425b      	negs	r3, r3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 f8d8 	bl	8000f04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_InitTick+0x64>)
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e000      	b.n	8000d60 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	0018      	movs	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b003      	add	sp, #12
 8000d66:	bd90      	pop	{r4, r7, pc}
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000004 	.word	0x20000004

08000d74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_IncTick+0x1c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	001a      	movs	r2, r3
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_IncTick+0x20>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	18d2      	adds	r2, r2, r3
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_IncTick+0x20>)
 8000d86:	601a      	str	r2, [r3, #0]
}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	20000008 	.word	0x20000008
 8000d94:	200003d8 	.word	0x200003d8

08000d98 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b02      	ldr	r3, [pc, #8]	; (8000da8 <HAL_GetTick+0x10>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	200003d8 	.word	0x200003d8

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	0002      	movs	r2, r0
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8000dbe:	d809      	bhi.n	8000dd4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	231f      	movs	r3, #31
 8000dc8:	401a      	ands	r2, r3
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <__NVIC_EnableIRQ+0x30>)
 8000dcc:	2101      	movs	r1, #1
 8000dce:	4091      	lsls	r1, r2
 8000dd0:	000a      	movs	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
  }
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b002      	add	sp, #8
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	0002      	movs	r2, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b7f      	cmp	r3, #127	; 0x7f
 8000df4:	d828      	bhi.n	8000e48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df6:	4a2f      	ldr	r2, [pc, #188]	; (8000eb4 <__NVIC_SetPriority+0xd4>)
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	33c0      	adds	r3, #192	; 0xc0
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	589b      	ldr	r3, [r3, r2]
 8000e06:	1dfa      	adds	r2, r7, #7
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	400a      	ands	r2, r1
 8000e10:	00d2      	lsls	r2, r2, #3
 8000e12:	21ff      	movs	r1, #255	; 0xff
 8000e14:	4091      	lsls	r1, r2
 8000e16:	000a      	movs	r2, r1
 8000e18:	43d2      	mvns	r2, r2
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	019b      	lsls	r3, r3, #6
 8000e22:	22ff      	movs	r2, #255	; 0xff
 8000e24:	401a      	ands	r2, r3
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	4003      	ands	r3, r0
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e34:	481f      	ldr	r0, [pc, #124]	; (8000eb4 <__NVIC_SetPriority+0xd4>)
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	089b      	lsrs	r3, r3, #2
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	33c0      	adds	r3, #192	; 0xc0
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e46:	e031      	b.n	8000eac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e48:	4a1b      	ldr	r2, [pc, #108]	; (8000eb8 <__NVIC_SetPriority+0xd8>)
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	0019      	movs	r1, r3
 8000e50:	230f      	movs	r3, #15
 8000e52:	400b      	ands	r3, r1
 8000e54:	3b08      	subs	r3, #8
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3306      	adds	r3, #6
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	18d3      	adds	r3, r2, r3
 8000e5e:	3304      	adds	r3, #4
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	1dfa      	adds	r2, r7, #7
 8000e64:	7812      	ldrb	r2, [r2, #0]
 8000e66:	0011      	movs	r1, r2
 8000e68:	2203      	movs	r2, #3
 8000e6a:	400a      	ands	r2, r1
 8000e6c:	00d2      	lsls	r2, r2, #3
 8000e6e:	21ff      	movs	r1, #255	; 0xff
 8000e70:	4091      	lsls	r1, r2
 8000e72:	000a      	movs	r2, r1
 8000e74:	43d2      	mvns	r2, r2
 8000e76:	401a      	ands	r2, r3
 8000e78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	019b      	lsls	r3, r3, #6
 8000e7e:	22ff      	movs	r2, #255	; 0xff
 8000e80:	401a      	ands	r2, r3
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	0018      	movs	r0, r3
 8000e88:	2303      	movs	r3, #3
 8000e8a:	4003      	ands	r3, r0
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <__NVIC_SetPriority+0xd8>)
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	001c      	movs	r4, r3
 8000e98:	230f      	movs	r3, #15
 8000e9a:	4023      	ands	r3, r4
 8000e9c:	3b08      	subs	r3, #8
 8000e9e:	089b      	lsrs	r3, r3, #2
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	3306      	adds	r3, #6
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	18c3      	adds	r3, r0, r3
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b003      	add	sp, #12
 8000eb2:	bd90      	pop	{r4, r7, pc}
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	4a0c      	ldr	r2, [pc, #48]	; (8000efc <SysTick_Config+0x40>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d901      	bls.n	8000ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e010      	b.n	8000ef4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <SysTick_Config+0x44>)
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eda:	2301      	movs	r3, #1
 8000edc:	425b      	negs	r3, r3
 8000ede:	2103      	movs	r1, #3
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff ff7d 	bl	8000de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <SysTick_Config+0x44>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <SysTick_Config+0x44>)
 8000eee:	2207      	movs	r2, #7
 8000ef0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b002      	add	sp, #8
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	00ffffff 	.word	0x00ffffff
 8000f00:	e000e010 	.word	0xe000e010

08000f04 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	210f      	movs	r1, #15
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	1c02      	adds	r2, r0, #0
 8000f14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	0011      	movs	r1, r2
 8000f20:	0018      	movs	r0, r3
 8000f22:	f7ff ff5d 	bl	8000de0 <__NVIC_SetPriority>
}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b004      	add	sp, #16
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	0002      	movs	r2, r0
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b25b      	sxtb	r3, r3
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff ff33 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f7ff ffaf 	bl	8000ebc <SysTick_Config>
 8000f5e:	0003      	movs	r3, r0
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b002      	add	sp, #8
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2221      	movs	r2, #33	; 0x21
 8000f74:	5c9b      	ldrb	r3, [r3, r2]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d008      	beq.n	8000f8e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2204      	movs	r2, #4
 8000f80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2220      	movs	r2, #32
 8000f86:	2100      	movs	r1, #0
 8000f88:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e020      	b.n	8000fd0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	210e      	movs	r1, #14
 8000f9a:	438a      	bics	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2101      	movs	r1, #1
 8000faa:	438a      	bics	r2, r1
 8000fac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4091      	lsls	r1, r2
 8000fba:	000a      	movs	r2, r1
 8000fbc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2221      	movs	r2, #33	; 0x21
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2220      	movs	r2, #32
 8000fca:	2100      	movs	r1, #0
 8000fcc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b002      	add	sp, #8
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2221      	movs	r2, #33	; 0x21
 8000fec:	5c9b      	ldrb	r3, [r3, r2]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d007      	beq.n	8001004 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	18fb      	adds	r3, r7, r3
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
 8001002:	e028      	b.n	8001056 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	210e      	movs	r1, #14
 8001010:	438a      	bics	r2, r1
 8001012:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2101      	movs	r1, #1
 8001020:	438a      	bics	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800102c:	2101      	movs	r1, #1
 800102e:	4091      	lsls	r1, r2
 8001030:	000a      	movs	r2, r1
 8001032:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2221      	movs	r2, #33	; 0x21
 8001038:	2101      	movs	r1, #1
 800103a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2220      	movs	r2, #32
 8001040:	2100      	movs	r1, #0
 8001042:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001048:	2b00      	cmp	r3, #0
 800104a:	d004      	beq.n	8001056 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	0010      	movs	r0, r2
 8001054:	4798      	blx	r3
    } 
  }
  return status;
 8001056:	230f      	movs	r3, #15
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	781b      	ldrb	r3, [r3, #0]
}
 800105c:	0018      	movs	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	b004      	add	sp, #16
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001072:	e149      	b.n	8001308 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2101      	movs	r1, #1
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	4091      	lsls	r1, r2
 800107e:	000a      	movs	r2, r1
 8001080:	4013      	ands	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d100      	bne.n	800108c <HAL_GPIO_Init+0x28>
 800108a:	e13a      	b.n	8001302 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d00b      	beq.n	80010ac <HAL_GPIO_Init+0x48>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d007      	beq.n	80010ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a0:	2b11      	cmp	r3, #17
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b12      	cmp	r3, #18
 80010aa:	d130      	bne.n	800110e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	409a      	lsls	r2, r3
 80010ba:	0013      	movs	r3, r2
 80010bc:	43da      	mvns	r2, r3
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	409a      	lsls	r2, r3
 80010ce:	0013      	movs	r3, r2
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e2:	2201      	movs	r2, #1
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
 80010e8:	0013      	movs	r3, r2
 80010ea:	43da      	mvns	r2, r3
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	091b      	lsrs	r3, r3, #4
 80010f8:	2201      	movs	r2, #1
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	409a      	lsls	r2, r3
 800111c:	0013      	movs	r3, r2
 800111e:	43da      	mvns	r2, r3
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0xea>
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b12      	cmp	r3, #18
 800114c:	d123      	bne.n	8001196 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	08da      	lsrs	r2, r3, #3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3208      	adds	r2, #8
 8001156:	0092      	lsls	r2, r2, #2
 8001158:	58d3      	ldr	r3, [r2, r3]
 800115a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	2207      	movs	r2, #7
 8001160:	4013      	ands	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	220f      	movs	r2, #15
 8001166:	409a      	lsls	r2, r3
 8001168:	0013      	movs	r3, r2
 800116a:	43da      	mvns	r2, r3
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	691a      	ldr	r2, [r3, #16]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	2107      	movs	r1, #7
 800117a:	400b      	ands	r3, r1
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	409a      	lsls	r2, r3
 8001180:	0013      	movs	r3, r2
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	08da      	lsrs	r2, r3, #3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3208      	adds	r2, #8
 8001190:	0092      	lsls	r2, r2, #2
 8001192:	6939      	ldr	r1, [r7, #16]
 8001194:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	2203      	movs	r2, #3
 80011a2:	409a      	lsls	r2, r3
 80011a4:	0013      	movs	r3, r2
 80011a6:	43da      	mvns	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2203      	movs	r2, #3
 80011b4:	401a      	ands	r2, r3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	409a      	lsls	r2, r3
 80011bc:	0013      	movs	r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	055b      	lsls	r3, r3, #21
 80011d2:	4013      	ands	r3, r2
 80011d4:	d100      	bne.n	80011d8 <HAL_GPIO_Init+0x174>
 80011d6:	e094      	b.n	8001302 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d8:	4b51      	ldr	r3, [pc, #324]	; (8001320 <HAL_GPIO_Init+0x2bc>)
 80011da:	699a      	ldr	r2, [r3, #24]
 80011dc:	4b50      	ldr	r3, [pc, #320]	; (8001320 <HAL_GPIO_Init+0x2bc>)
 80011de:	2101      	movs	r1, #1
 80011e0:	430a      	orrs	r2, r1
 80011e2:	619a      	str	r2, [r3, #24]
 80011e4:	4b4e      	ldr	r3, [pc, #312]	; (8001320 <HAL_GPIO_Init+0x2bc>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	2201      	movs	r2, #1
 80011ea:	4013      	ands	r3, r2
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011f0:	4a4c      	ldr	r2, [pc, #304]	; (8001324 <HAL_GPIO_Init+0x2c0>)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	589b      	ldr	r3, [r3, r2]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	2203      	movs	r2, #3
 8001202:	4013      	ands	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	409a      	lsls	r2, r3
 800120a:	0013      	movs	r3, r2
 800120c:	43da      	mvns	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	2390      	movs	r3, #144	; 0x90
 8001218:	05db      	lsls	r3, r3, #23
 800121a:	429a      	cmp	r2, r3
 800121c:	d00d      	beq.n	800123a <HAL_GPIO_Init+0x1d6>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a41      	ldr	r2, [pc, #260]	; (8001328 <HAL_GPIO_Init+0x2c4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d007      	beq.n	8001236 <HAL_GPIO_Init+0x1d2>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a40      	ldr	r2, [pc, #256]	; (800132c <HAL_GPIO_Init+0x2c8>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d101      	bne.n	8001232 <HAL_GPIO_Init+0x1ce>
 800122e:	2302      	movs	r3, #2
 8001230:	e004      	b.n	800123c <HAL_GPIO_Init+0x1d8>
 8001232:	2305      	movs	r3, #5
 8001234:	e002      	b.n	800123c <HAL_GPIO_Init+0x1d8>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_GPIO_Init+0x1d8>
 800123a:	2300      	movs	r3, #0
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	2103      	movs	r1, #3
 8001240:	400a      	ands	r2, r1
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	4093      	lsls	r3, r2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800124c:	4935      	ldr	r1, [pc, #212]	; (8001324 <HAL_GPIO_Init+0x2c0>)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	3302      	adds	r3, #2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125a:	4b35      	ldr	r3, [pc, #212]	; (8001330 <HAL_GPIO_Init+0x2cc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	43da      	mvns	r2, r3
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	025b      	lsls	r3, r3, #9
 8001272:	4013      	ands	r3, r2
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <HAL_GPIO_Init+0x2cc>)
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001284:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <HAL_GPIO_Init+0x2cc>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	43da      	mvns	r2, r3
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	029b      	lsls	r3, r3, #10
 800129c:	4013      	ands	r3, r2
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012a8:	4b21      	ldr	r3, [pc, #132]	; (8001330 <HAL_GPIO_Init+0x2cc>)
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ae:	4b20      	ldr	r3, [pc, #128]	; (8001330 <HAL_GPIO_Init+0x2cc>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43da      	mvns	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	035b      	lsls	r3, r3, #13
 80012c6:	4013      	ands	r3, r2
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <HAL_GPIO_Init+0x2cc>)
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_GPIO_Init+0x2cc>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	43da      	mvns	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	039b      	lsls	r3, r3, #14
 80012f0:	4013      	ands	r3, r2
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_GPIO_Init+0x2cc>)
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	40da      	lsrs	r2, r3
 8001310:	1e13      	subs	r3, r2, #0
 8001312:	d000      	beq.n	8001316 <HAL_GPIO_Init+0x2b2>
 8001314:	e6ae      	b.n	8001074 <HAL_GPIO_Init+0x10>
  } 
}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b006      	add	sp, #24
 800131c:	bd80      	pop	{r7, pc}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	40021000 	.word	0x40021000
 8001324:	40010000 	.word	0x40010000
 8001328:	48000400 	.word	0x48000400
 800132c:	48000800 	.word	0x48000800
 8001330:	40010400 	.word	0x40010400

08001334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	0008      	movs	r0, r1
 800133e:	0011      	movs	r1, r2
 8001340:	1cbb      	adds	r3, r7, #2
 8001342:	1c02      	adds	r2, r0, #0
 8001344:	801a      	strh	r2, [r3, #0]
 8001346:	1c7b      	adds	r3, r7, #1
 8001348:	1c0a      	adds	r2, r1, #0
 800134a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800134c:	1c7b      	adds	r3, r7, #1
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d004      	beq.n	800135e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001354:	1cbb      	adds	r3, r7, #2
 8001356:	881a      	ldrh	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800135c:	e003      	b.n	8001366 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800135e:	1cbb      	adds	r3, r7, #2
 8001360:	881a      	ldrh	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	46bd      	mov	sp, r7
 800136a:	b002      	add	sp, #8
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d102      	bne.n	8001384 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	f000 fb76 	bl	8001a70 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2201      	movs	r2, #1
 800138a:	4013      	ands	r3, r2
 800138c:	d100      	bne.n	8001390 <HAL_RCC_OscConfig+0x20>
 800138e:	e08e      	b.n	80014ae <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001390:	4bc5      	ldr	r3, [pc, #788]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	220c      	movs	r2, #12
 8001396:	4013      	ands	r3, r2
 8001398:	2b04      	cmp	r3, #4
 800139a:	d00e      	beq.n	80013ba <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800139c:	4bc2      	ldr	r3, [pc, #776]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	220c      	movs	r2, #12
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d117      	bne.n	80013d8 <HAL_RCC_OscConfig+0x68>
 80013a8:	4bbf      	ldr	r3, [pc, #764]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	23c0      	movs	r3, #192	; 0xc0
 80013ae:	025b      	lsls	r3, r3, #9
 80013b0:	401a      	ands	r2, r3
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	025b      	lsls	r3, r3, #9
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d10e      	bne.n	80013d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ba:	4bbb      	ldr	r3, [pc, #748]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	2380      	movs	r3, #128	; 0x80
 80013c0:	029b      	lsls	r3, r3, #10
 80013c2:	4013      	ands	r3, r2
 80013c4:	d100      	bne.n	80013c8 <HAL_RCC_OscConfig+0x58>
 80013c6:	e071      	b.n	80014ac <HAL_RCC_OscConfig+0x13c>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d000      	beq.n	80013d2 <HAL_RCC_OscConfig+0x62>
 80013d0:	e06c      	b.n	80014ac <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	f000 fb4c 	bl	8001a70 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d107      	bne.n	80013f0 <HAL_RCC_OscConfig+0x80>
 80013e0:	4bb1      	ldr	r3, [pc, #708]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4bb0      	ldr	r3, [pc, #704]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	0249      	lsls	r1, r1, #9
 80013ea:	430a      	orrs	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e02f      	b.n	8001450 <HAL_RCC_OscConfig+0xe0>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10c      	bne.n	8001412 <HAL_RCC_OscConfig+0xa2>
 80013f8:	4bab      	ldr	r3, [pc, #684]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4baa      	ldr	r3, [pc, #680]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 80013fe:	49ab      	ldr	r1, [pc, #684]	; (80016ac <HAL_RCC_OscConfig+0x33c>)
 8001400:	400a      	ands	r2, r1
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	4ba8      	ldr	r3, [pc, #672]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4ba7      	ldr	r3, [pc, #668]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 800140a:	49a9      	ldr	r1, [pc, #676]	; (80016b0 <HAL_RCC_OscConfig+0x340>)
 800140c:	400a      	ands	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e01e      	b.n	8001450 <HAL_RCC_OscConfig+0xe0>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b05      	cmp	r3, #5
 8001418:	d10e      	bne.n	8001438 <HAL_RCC_OscConfig+0xc8>
 800141a:	4ba3      	ldr	r3, [pc, #652]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4ba2      	ldr	r3, [pc, #648]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	02c9      	lsls	r1, r1, #11
 8001424:	430a      	orrs	r2, r1
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	4b9f      	ldr	r3, [pc, #636]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b9e      	ldr	r3, [pc, #632]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	0249      	lsls	r1, r1, #9
 8001432:	430a      	orrs	r2, r1
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	e00b      	b.n	8001450 <HAL_RCC_OscConfig+0xe0>
 8001438:	4b9b      	ldr	r3, [pc, #620]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b9a      	ldr	r3, [pc, #616]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 800143e:	499b      	ldr	r1, [pc, #620]	; (80016ac <HAL_RCC_OscConfig+0x33c>)
 8001440:	400a      	ands	r2, r1
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	4b98      	ldr	r3, [pc, #608]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b97      	ldr	r3, [pc, #604]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 800144a:	4999      	ldr	r1, [pc, #612]	; (80016b0 <HAL_RCC_OscConfig+0x340>)
 800144c:	400a      	ands	r2, r1
 800144e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d014      	beq.n	8001482 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fc9e 	bl	8000d98 <HAL_GetTick>
 800145c:	0003      	movs	r3, r0
 800145e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001462:	f7ff fc99 	bl	8000d98 <HAL_GetTick>
 8001466:	0002      	movs	r2, r0
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b64      	cmp	r3, #100	; 0x64
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e2fd      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001474:	4b8c      	ldr	r3, [pc, #560]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	029b      	lsls	r3, r3, #10
 800147c:	4013      	ands	r3, r2
 800147e:	d0f0      	beq.n	8001462 <HAL_RCC_OscConfig+0xf2>
 8001480:	e015      	b.n	80014ae <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001482:	f7ff fc89 	bl	8000d98 <HAL_GetTick>
 8001486:	0003      	movs	r3, r0
 8001488:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fc84 	bl	8000d98 <HAL_GetTick>
 8001490:	0002      	movs	r2, r0
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	; 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e2e8      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149e:	4b82      	ldr	r3, [pc, #520]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	029b      	lsls	r3, r3, #10
 80014a6:	4013      	ands	r3, r2
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x11c>
 80014aa:	e000      	b.n	80014ae <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2202      	movs	r2, #2
 80014b4:	4013      	ands	r3, r2
 80014b6:	d100      	bne.n	80014ba <HAL_RCC_OscConfig+0x14a>
 80014b8:	e06c      	b.n	8001594 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014ba:	4b7b      	ldr	r3, [pc, #492]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	220c      	movs	r2, #12
 80014c0:	4013      	ands	r3, r2
 80014c2:	d00e      	beq.n	80014e2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014c4:	4b78      	ldr	r3, [pc, #480]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	220c      	movs	r2, #12
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d11f      	bne.n	8001510 <HAL_RCC_OscConfig+0x1a0>
 80014d0:	4b75      	ldr	r3, [pc, #468]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	23c0      	movs	r3, #192	; 0xc0
 80014d6:	025b      	lsls	r3, r3, #9
 80014d8:	401a      	ands	r2, r3
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	429a      	cmp	r2, r3
 80014e0:	d116      	bne.n	8001510 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e2:	4b71      	ldr	r3, [pc, #452]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2202      	movs	r2, #2
 80014e8:	4013      	ands	r3, r2
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_OscConfig+0x188>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d001      	beq.n	80014f8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e2bb      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	4b6b      	ldr	r3, [pc, #428]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	22f8      	movs	r2, #248	; 0xf8
 80014fe:	4393      	bics	r3, r2
 8001500:	0019      	movs	r1, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	00da      	lsls	r2, r3, #3
 8001508:	4b67      	ldr	r3, [pc, #412]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 800150a:	430a      	orrs	r2, r1
 800150c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150e:	e041      	b.n	8001594 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d024      	beq.n	8001562 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001518:	4b63      	ldr	r3, [pc, #396]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b62      	ldr	r3, [pc, #392]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 800151e:	2101      	movs	r1, #1
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fc38 	bl	8000d98 <HAL_GetTick>
 8001528:	0003      	movs	r3, r0
 800152a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800152e:	f7ff fc33 	bl	8000d98 <HAL_GetTick>
 8001532:	0002      	movs	r2, r0
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e297      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001540:	4b59      	ldr	r3, [pc, #356]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2202      	movs	r2, #2
 8001546:	4013      	ands	r3, r2
 8001548:	d0f1      	beq.n	800152e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154a:	4b57      	ldr	r3, [pc, #348]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	22f8      	movs	r2, #248	; 0xf8
 8001550:	4393      	bics	r3, r2
 8001552:	0019      	movs	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	00da      	lsls	r2, r3, #3
 800155a:	4b53      	ldr	r3, [pc, #332]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	e018      	b.n	8001594 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001562:	4b51      	ldr	r3, [pc, #324]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b50      	ldr	r3, [pc, #320]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 8001568:	2101      	movs	r1, #1
 800156a:	438a      	bics	r2, r1
 800156c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156e:	f7ff fc13 	bl	8000d98 <HAL_GetTick>
 8001572:	0003      	movs	r3, r0
 8001574:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001578:	f7ff fc0e 	bl	8000d98 <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e272      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158a:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2202      	movs	r2, #2
 8001590:	4013      	ands	r3, r2
 8001592:	d1f1      	bne.n	8001578 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2208      	movs	r2, #8
 800159a:	4013      	ands	r3, r2
 800159c:	d036      	beq.n	800160c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d019      	beq.n	80015da <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a6:	4b40      	ldr	r3, [pc, #256]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 80015a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015aa:	4b3f      	ldr	r3, [pc, #252]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 80015ac:	2101      	movs	r1, #1
 80015ae:	430a      	orrs	r2, r1
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b2:	f7ff fbf1 	bl	8000d98 <HAL_GetTick>
 80015b6:	0003      	movs	r3, r0
 80015b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015bc:	f7ff fbec 	bl	8000d98 <HAL_GetTick>
 80015c0:	0002      	movs	r2, r0
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e250      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ce:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	2202      	movs	r2, #2
 80015d4:	4013      	ands	r3, r2
 80015d6:	d0f1      	beq.n	80015bc <HAL_RCC_OscConfig+0x24c>
 80015d8:	e018      	b.n	800160c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015da:	4b33      	ldr	r3, [pc, #204]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 80015dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015de:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 80015e0:	2101      	movs	r1, #1
 80015e2:	438a      	bics	r2, r1
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fbd7 	bl	8000d98 <HAL_GetTick>
 80015ea:	0003      	movs	r3, r0
 80015ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f0:	f7ff fbd2 	bl	8000d98 <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e236      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001602:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	2202      	movs	r2, #2
 8001608:	4013      	ands	r3, r2
 800160a:	d1f1      	bne.n	80015f0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2204      	movs	r2, #4
 8001612:	4013      	ands	r3, r2
 8001614:	d100      	bne.n	8001618 <HAL_RCC_OscConfig+0x2a8>
 8001616:	e0b5      	b.n	8001784 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001618:	231f      	movs	r3, #31
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 8001622:	69da      	ldr	r2, [r3, #28]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	055b      	lsls	r3, r3, #21
 8001628:	4013      	ands	r3, r2
 800162a:	d111      	bne.n	8001650 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 800162e:	69da      	ldr	r2, [r3, #28]
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 8001632:	2180      	movs	r1, #128	; 0x80
 8001634:	0549      	lsls	r1, r1, #21
 8001636:	430a      	orrs	r2, r1
 8001638:	61da      	str	r2, [r3, #28]
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 800163c:	69da      	ldr	r2, [r3, #28]
 800163e:	2380      	movs	r3, #128	; 0x80
 8001640:	055b      	lsls	r3, r3, #21
 8001642:	4013      	ands	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001648:	231f      	movs	r3, #31
 800164a:	18fb      	adds	r3, r7, r3
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <HAL_RCC_OscConfig+0x344>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4013      	ands	r3, r2
 800165a:	d11a      	bne.n	8001692 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_RCC_OscConfig+0x344>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HAL_RCC_OscConfig+0x344>)
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	0049      	lsls	r1, r1, #1
 8001666:	430a      	orrs	r2, r1
 8001668:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166a:	f7ff fb95 	bl	8000d98 <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001674:	f7ff fb90 	bl	8000d98 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e1f4      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_RCC_OscConfig+0x344>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4013      	ands	r3, r2
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d10e      	bne.n	80016b8 <HAL_RCC_OscConfig+0x348>
 800169a:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 800169c:	6a1a      	ldr	r2, [r3, #32]
 800169e:	4b02      	ldr	r3, [pc, #8]	; (80016a8 <HAL_RCC_OscConfig+0x338>)
 80016a0:	2101      	movs	r1, #1
 80016a2:	430a      	orrs	r2, r1
 80016a4:	621a      	str	r2, [r3, #32]
 80016a6:	e035      	b.n	8001714 <HAL_RCC_OscConfig+0x3a4>
 80016a8:	40021000 	.word	0x40021000
 80016ac:	fffeffff 	.word	0xfffeffff
 80016b0:	fffbffff 	.word	0xfffbffff
 80016b4:	40007000 	.word	0x40007000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10c      	bne.n	80016da <HAL_RCC_OscConfig+0x36a>
 80016c0:	4bca      	ldr	r3, [pc, #808]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80016c2:	6a1a      	ldr	r2, [r3, #32]
 80016c4:	4bc9      	ldr	r3, [pc, #804]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80016c6:	2101      	movs	r1, #1
 80016c8:	438a      	bics	r2, r1
 80016ca:	621a      	str	r2, [r3, #32]
 80016cc:	4bc7      	ldr	r3, [pc, #796]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80016ce:	6a1a      	ldr	r2, [r3, #32]
 80016d0:	4bc6      	ldr	r3, [pc, #792]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80016d2:	2104      	movs	r1, #4
 80016d4:	438a      	bics	r2, r1
 80016d6:	621a      	str	r2, [r3, #32]
 80016d8:	e01c      	b.n	8001714 <HAL_RCC_OscConfig+0x3a4>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b05      	cmp	r3, #5
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0x38c>
 80016e2:	4bc2      	ldr	r3, [pc, #776]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80016e4:	6a1a      	ldr	r2, [r3, #32]
 80016e6:	4bc1      	ldr	r3, [pc, #772]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80016e8:	2104      	movs	r1, #4
 80016ea:	430a      	orrs	r2, r1
 80016ec:	621a      	str	r2, [r3, #32]
 80016ee:	4bbf      	ldr	r3, [pc, #764]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80016f0:	6a1a      	ldr	r2, [r3, #32]
 80016f2:	4bbe      	ldr	r3, [pc, #760]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80016f4:	2101      	movs	r1, #1
 80016f6:	430a      	orrs	r2, r1
 80016f8:	621a      	str	r2, [r3, #32]
 80016fa:	e00b      	b.n	8001714 <HAL_RCC_OscConfig+0x3a4>
 80016fc:	4bbb      	ldr	r3, [pc, #748]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80016fe:	6a1a      	ldr	r2, [r3, #32]
 8001700:	4bba      	ldr	r3, [pc, #744]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 8001702:	2101      	movs	r1, #1
 8001704:	438a      	bics	r2, r1
 8001706:	621a      	str	r2, [r3, #32]
 8001708:	4bb8      	ldr	r3, [pc, #736]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 800170a:	6a1a      	ldr	r2, [r3, #32]
 800170c:	4bb7      	ldr	r3, [pc, #732]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 800170e:	2104      	movs	r1, #4
 8001710:	438a      	bics	r2, r1
 8001712:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d014      	beq.n	8001746 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171c:	f7ff fb3c 	bl	8000d98 <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001724:	e009      	b.n	800173a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001726:	f7ff fb37 	bl	8000d98 <HAL_GetTick>
 800172a:	0002      	movs	r2, r0
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	4aaf      	ldr	r2, [pc, #700]	; (80019f0 <HAL_RCC_OscConfig+0x680>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e19a      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173a:	4bac      	ldr	r3, [pc, #688]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	2202      	movs	r2, #2
 8001740:	4013      	ands	r3, r2
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x3b6>
 8001744:	e013      	b.n	800176e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001746:	f7ff fb27 	bl	8000d98 <HAL_GetTick>
 800174a:	0003      	movs	r3, r0
 800174c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174e:	e009      	b.n	8001764 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001750:	f7ff fb22 	bl	8000d98 <HAL_GetTick>
 8001754:	0002      	movs	r2, r0
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	4aa5      	ldr	r2, [pc, #660]	; (80019f0 <HAL_RCC_OscConfig+0x680>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e185      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001764:	4ba1      	ldr	r3, [pc, #644]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	2202      	movs	r2, #2
 800176a:	4013      	ands	r3, r2
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800176e:	231f      	movs	r3, #31
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d105      	bne.n	8001784 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001778:	4b9c      	ldr	r3, [pc, #624]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 800177a:	69da      	ldr	r2, [r3, #28]
 800177c:	4b9b      	ldr	r3, [pc, #620]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 800177e:	499d      	ldr	r1, [pc, #628]	; (80019f4 <HAL_RCC_OscConfig+0x684>)
 8001780:	400a      	ands	r2, r1
 8001782:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2210      	movs	r2, #16
 800178a:	4013      	ands	r3, r2
 800178c:	d063      	beq.n	8001856 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d12a      	bne.n	80017ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001796:	4b95      	ldr	r3, [pc, #596]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 8001798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800179a:	4b94      	ldr	r3, [pc, #592]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 800179c:	2104      	movs	r1, #4
 800179e:	430a      	orrs	r2, r1
 80017a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80017a2:	4b92      	ldr	r3, [pc, #584]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80017a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a6:	4b91      	ldr	r3, [pc, #580]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80017a8:	2101      	movs	r1, #1
 80017aa:	430a      	orrs	r2, r1
 80017ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ae:	f7ff faf3 	bl	8000d98 <HAL_GetTick>
 80017b2:	0003      	movs	r3, r0
 80017b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017b8:	f7ff faee 	bl	8000d98 <HAL_GetTick>
 80017bc:	0002      	movs	r2, r0
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e152      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017ca:	4b88      	ldr	r3, [pc, #544]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80017cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ce:	2202      	movs	r2, #2
 80017d0:	4013      	ands	r3, r2
 80017d2:	d0f1      	beq.n	80017b8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017d4:	4b85      	ldr	r3, [pc, #532]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80017d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d8:	22f8      	movs	r2, #248	; 0xf8
 80017da:	4393      	bics	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	00da      	lsls	r2, r3, #3
 80017e4:	4b81      	ldr	r3, [pc, #516]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80017e6:	430a      	orrs	r2, r1
 80017e8:	635a      	str	r2, [r3, #52]	; 0x34
 80017ea:	e034      	b.n	8001856 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	3305      	adds	r3, #5
 80017f2:	d111      	bne.n	8001818 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80017f4:	4b7d      	ldr	r3, [pc, #500]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80017f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f8:	4b7c      	ldr	r3, [pc, #496]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80017fa:	2104      	movs	r1, #4
 80017fc:	438a      	bics	r2, r1
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001800:	4b7a      	ldr	r3, [pc, #488]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 8001802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001804:	22f8      	movs	r2, #248	; 0xf8
 8001806:	4393      	bics	r3, r2
 8001808:	0019      	movs	r1, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	00da      	lsls	r2, r3, #3
 8001810:	4b76      	ldr	r3, [pc, #472]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 8001812:	430a      	orrs	r2, r1
 8001814:	635a      	str	r2, [r3, #52]	; 0x34
 8001816:	e01e      	b.n	8001856 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001818:	4b74      	ldr	r3, [pc, #464]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 800181a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800181c:	4b73      	ldr	r3, [pc, #460]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 800181e:	2104      	movs	r1, #4
 8001820:	430a      	orrs	r2, r1
 8001822:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001824:	4b71      	ldr	r3, [pc, #452]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 8001826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001828:	4b70      	ldr	r3, [pc, #448]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 800182a:	2101      	movs	r1, #1
 800182c:	438a      	bics	r2, r1
 800182e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001830:	f7ff fab2 	bl	8000d98 <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800183a:	f7ff faad 	bl	8000d98 <HAL_GetTick>
 800183e:	0002      	movs	r2, r0
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e111      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800184c:	4b67      	ldr	r3, [pc, #412]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 800184e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001850:	2202      	movs	r2, #2
 8001852:	4013      	ands	r3, r2
 8001854:	d1f1      	bne.n	800183a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2220      	movs	r2, #32
 800185c:	4013      	ands	r3, r2
 800185e:	d05c      	beq.n	800191a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001860:	4b62      	ldr	r3, [pc, #392]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	220c      	movs	r2, #12
 8001866:	4013      	ands	r3, r2
 8001868:	2b0c      	cmp	r3, #12
 800186a:	d00e      	beq.n	800188a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800186c:	4b5f      	ldr	r3, [pc, #380]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	220c      	movs	r2, #12
 8001872:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001874:	2b08      	cmp	r3, #8
 8001876:	d114      	bne.n	80018a2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001878:	4b5c      	ldr	r3, [pc, #368]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	23c0      	movs	r3, #192	; 0xc0
 800187e:	025b      	lsls	r3, r3, #9
 8001880:	401a      	ands	r2, r3
 8001882:	23c0      	movs	r3, #192	; 0xc0
 8001884:	025b      	lsls	r3, r3, #9
 8001886:	429a      	cmp	r2, r3
 8001888:	d10b      	bne.n	80018a2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800188a:	4b58      	ldr	r3, [pc, #352]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 800188c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	025b      	lsls	r3, r3, #9
 8001892:	4013      	ands	r3, r2
 8001894:	d040      	beq.n	8001918 <HAL_RCC_OscConfig+0x5a8>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d03c      	beq.n	8001918 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e0e6      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d01b      	beq.n	80018e2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80018aa:	4b50      	ldr	r3, [pc, #320]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80018ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ae:	4b4f      	ldr	r3, [pc, #316]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80018b0:	2180      	movs	r1, #128	; 0x80
 80018b2:	0249      	lsls	r1, r1, #9
 80018b4:	430a      	orrs	r2, r1
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fa6e 	bl	8000d98 <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018c2:	f7ff fa69 	bl	8000d98 <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e0cd      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80018d4:	4b45      	ldr	r3, [pc, #276]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80018d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	025b      	lsls	r3, r3, #9
 80018dc:	4013      	ands	r3, r2
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x552>
 80018e0:	e01b      	b.n	800191a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80018e2:	4b42      	ldr	r3, [pc, #264]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80018e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e6:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80018e8:	4943      	ldr	r1, [pc, #268]	; (80019f8 <HAL_RCC_OscConfig+0x688>)
 80018ea:	400a      	ands	r2, r1
 80018ec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ee:	f7ff fa53 	bl	8000d98 <HAL_GetTick>
 80018f2:	0003      	movs	r3, r0
 80018f4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018f8:	f7ff fa4e 	bl	8000d98 <HAL_GetTick>
 80018fc:	0002      	movs	r2, r0
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e0b2      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800190a:	4b38      	ldr	r3, [pc, #224]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 800190c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	025b      	lsls	r3, r3, #9
 8001912:	4013      	ands	r3, r2
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x588>
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001918:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	2b00      	cmp	r3, #0
 8001920:	d100      	bne.n	8001924 <HAL_RCC_OscConfig+0x5b4>
 8001922:	e0a4      	b.n	8001a6e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001924:	4b31      	ldr	r3, [pc, #196]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	220c      	movs	r2, #12
 800192a:	4013      	ands	r3, r2
 800192c:	2b08      	cmp	r3, #8
 800192e:	d100      	bne.n	8001932 <HAL_RCC_OscConfig+0x5c2>
 8001930:	e078      	b.n	8001a24 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	2b02      	cmp	r3, #2
 8001938:	d14c      	bne.n	80019d4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193a:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 8001940:	492e      	ldr	r1, [pc, #184]	; (80019fc <HAL_RCC_OscConfig+0x68c>)
 8001942:	400a      	ands	r2, r1
 8001944:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001946:	f7ff fa27 	bl	8000d98 <HAL_GetTick>
 800194a:	0003      	movs	r3, r0
 800194c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001950:	f7ff fa22 	bl	8000d98 <HAL_GetTick>
 8001954:	0002      	movs	r2, r0
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e086      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001962:	4b22      	ldr	r3, [pc, #136]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	049b      	lsls	r3, r3, #18
 800196a:	4013      	ands	r3, r2
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196e:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	220f      	movs	r2, #15
 8001974:	4393      	bics	r3, r2
 8001976:	0019      	movs	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800197c:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 800197e:	430a      	orrs	r2, r1
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <HAL_RCC_OscConfig+0x690>)
 8001988:	4013      	ands	r3, r2
 800198a:	0019      	movs	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	431a      	orrs	r2, r3
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 8001998:	430a      	orrs	r2, r1
 800199a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80019a2:	2180      	movs	r1, #128	; 0x80
 80019a4:	0449      	lsls	r1, r1, #17
 80019a6:	430a      	orrs	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff f9f5 	bl	8000d98 <HAL_GetTick>
 80019ae:	0003      	movs	r3, r0
 80019b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff f9f0 	bl	8000d98 <HAL_GetTick>
 80019b8:	0002      	movs	r2, r0
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e054      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	049b      	lsls	r3, r3, #18
 80019ce:	4013      	ands	r3, r2
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x644>
 80019d2:	e04c      	b.n	8001a6e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <HAL_RCC_OscConfig+0x67c>)
 80019da:	4908      	ldr	r1, [pc, #32]	; (80019fc <HAL_RCC_OscConfig+0x68c>)
 80019dc:	400a      	ands	r2, r1
 80019de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff f9da 	bl	8000d98 <HAL_GetTick>
 80019e4:	0003      	movs	r3, r0
 80019e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e8:	e015      	b.n	8001a16 <HAL_RCC_OscConfig+0x6a6>
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	40021000 	.word	0x40021000
 80019f0:	00001388 	.word	0x00001388
 80019f4:	efffffff 	.word	0xefffffff
 80019f8:	fffeffff 	.word	0xfffeffff
 80019fc:	feffffff 	.word	0xfeffffff
 8001a00:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a04:	f7ff f9c8 	bl	8000d98 <HAL_GetTick>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e02c      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_RCC_OscConfig+0x708>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	049b      	lsls	r3, r3, #18
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x694>
 8001a22:	e024      	b.n	8001a6e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e01f      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_RCC_OscConfig+0x708>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_RCC_OscConfig+0x708>)
 8001a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	23c0      	movs	r3, #192	; 0xc0
 8001a40:	025b      	lsls	r3, r3, #9
 8001a42:	401a      	ands	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d10e      	bne.n	8001a6a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	220f      	movs	r2, #15
 8001a50:	401a      	ands	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	23f0      	movs	r3, #240	; 0xf0
 8001a5e:	039b      	lsls	r3, r3, #14
 8001a60:	401a      	ands	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d001      	beq.n	8001a6e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	0018      	movs	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b008      	add	sp, #32
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40021000 	.word	0x40021000

08001a7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0bf      	b.n	8001c10 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a90:	4b61      	ldr	r3, [pc, #388]	; (8001c18 <HAL_RCC_ClockConfig+0x19c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2201      	movs	r2, #1
 8001a96:	4013      	ands	r3, r2
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d911      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b5e      	ldr	r3, [pc, #376]	; (8001c18 <HAL_RCC_ClockConfig+0x19c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	4393      	bics	r3, r2
 8001aa6:	0019      	movs	r1, r3
 8001aa8:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <HAL_RCC_ClockConfig+0x19c>)
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab0:	4b59      	ldr	r3, [pc, #356]	; (8001c18 <HAL_RCC_ClockConfig+0x19c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0a6      	b.n	8001c10 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d015      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d006      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ad6:	4b51      	ldr	r3, [pc, #324]	; (8001c1c <HAL_RCC_ClockConfig+0x1a0>)
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <HAL_RCC_ClockConfig+0x1a0>)
 8001adc:	21e0      	movs	r1, #224	; 0xe0
 8001ade:	00c9      	lsls	r1, r1, #3
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae4:	4b4d      	ldr	r3, [pc, #308]	; (8001c1c <HAL_RCC_ClockConfig+0x1a0>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	22f0      	movs	r2, #240	; 0xf0
 8001aea:	4393      	bics	r3, r2
 8001aec:	0019      	movs	r1, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	4b4a      	ldr	r3, [pc, #296]	; (8001c1c <HAL_RCC_ClockConfig+0x1a0>)
 8001af4:	430a      	orrs	r2, r1
 8001af6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2201      	movs	r2, #1
 8001afe:	4013      	ands	r3, r2
 8001b00:	d04c      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	4b44      	ldr	r3, [pc, #272]	; (8001c1c <HAL_RCC_ClockConfig+0x1a0>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	029b      	lsls	r3, r3, #10
 8001b12:	4013      	ands	r3, r2
 8001b14:	d120      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e07a      	b.n	8001c10 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b22:	4b3e      	ldr	r3, [pc, #248]	; (8001c1c <HAL_RCC_ClockConfig+0x1a0>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	049b      	lsls	r3, r3, #18
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d114      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e06e      	b.n	8001c10 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b3a:	4b38      	ldr	r3, [pc, #224]	; (8001c1c <HAL_RCC_ClockConfig+0x1a0>)
 8001b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	025b      	lsls	r3, r3, #9
 8001b42:	4013      	ands	r3, r2
 8001b44:	d108      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e062      	b.n	8001c10 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4a:	4b34      	ldr	r3, [pc, #208]	; (8001c1c <HAL_RCC_ClockConfig+0x1a0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	4013      	ands	r3, r2
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e05b      	b.n	8001c10 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b58:	4b30      	ldr	r3, [pc, #192]	; (8001c1c <HAL_RCC_ClockConfig+0x1a0>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	4393      	bics	r3, r2
 8001b60:	0019      	movs	r1, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	4b2d      	ldr	r3, [pc, #180]	; (8001c1c <HAL_RCC_ClockConfig+0x1a0>)
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b6c:	f7ff f914 	bl	8000d98 <HAL_GetTick>
 8001b70:	0003      	movs	r3, r0
 8001b72:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b74:	e009      	b.n	8001b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b76:	f7ff f90f 	bl	8000d98 <HAL_GetTick>
 8001b7a:	0002      	movs	r2, r0
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	4a27      	ldr	r2, [pc, #156]	; (8001c20 <HAL_RCC_ClockConfig+0x1a4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e042      	b.n	8001c10 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <HAL_RCC_ClockConfig+0x1a0>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	220c      	movs	r2, #12
 8001b90:	401a      	ands	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d1ec      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_RCC_ClockConfig+0x19c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d211      	bcs.n	8001bce <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <HAL_RCC_ClockConfig+0x19c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4393      	bics	r3, r2
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_RCC_ClockConfig+0x19c>)
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbc:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_RCC_ClockConfig+0x19c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e020      	b.n	8001c10 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d009      	beq.n	8001bec <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd8:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <HAL_RCC_ClockConfig+0x1a0>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	4a11      	ldr	r2, [pc, #68]	; (8001c24 <HAL_RCC_ClockConfig+0x1a8>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	0019      	movs	r1, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <HAL_RCC_ClockConfig+0x1a0>)
 8001be8:	430a      	orrs	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001bec:	f000 f820 	bl	8001c30 <HAL_RCC_GetSysClockFreq>
 8001bf0:	0001      	movs	r1, r0
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_RCC_ClockConfig+0x1a0>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	091b      	lsrs	r3, r3, #4
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <HAL_RCC_ClockConfig+0x1ac>)
 8001bfe:	5cd3      	ldrb	r3, [r2, r3]
 8001c00:	000a      	movs	r2, r1
 8001c02:	40da      	lsrs	r2, r3
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_RCC_ClockConfig+0x1b0>)
 8001c06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f7ff f87f 	bl	8000d0c <HAL_InitTick>
  
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b004      	add	sp, #16
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40022000 	.word	0x40022000
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	00001388 	.word	0x00001388
 8001c24:	fffff8ff 	.word	0xfffff8ff
 8001c28:	080033c8 	.word	0x080033c8
 8001c2c:	20000000 	.word	0x20000000

08001c30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b08f      	sub	sp, #60	; 0x3c
 8001c34:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c36:	2314      	movs	r3, #20
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	4a37      	ldr	r2, [pc, #220]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001c3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c3e:	c313      	stmia	r3!, {r0, r1, r4}
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	4a35      	ldr	r2, [pc, #212]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xec>)
 8001c48:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c4a:	c313      	stmia	r3!, {r0, r1, r4}
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c54:	2300      	movs	r3, #0
 8001c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c58:	2300      	movs	r3, #0
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001c64:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6c:	220c      	movs	r2, #12
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d006      	beq.n	8001c82 <HAL_RCC_GetSysClockFreq+0x52>
 8001c74:	2b0c      	cmp	r3, #12
 8001c76:	d043      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0xd0>
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d144      	bne.n	8001d06 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c7c:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c80:	e044      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c84:	0c9b      	lsrs	r3, r3, #18
 8001c86:	220f      	movs	r2, #15
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2214      	movs	r2, #20
 8001c8c:	18ba      	adds	r2, r7, r2
 8001c8e:	5cd3      	ldrb	r3, [r2, r3]
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c92:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	220f      	movs	r2, #15
 8001c98:	4013      	ands	r3, r2
 8001c9a:	1d3a      	adds	r2, r7, #4
 8001c9c:	5cd3      	ldrb	r3, [r2, r3]
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ca2:	23c0      	movs	r3, #192	; 0xc0
 8001ca4:	025b      	lsls	r3, r3, #9
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	025b      	lsls	r3, r3, #9
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d109      	bne.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cb2:	481c      	ldr	r0, [pc, #112]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001cb4:	f7fe fa30 	bl	8000118 <__udivsi3>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	001a      	movs	r2, r3
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	4353      	muls	r3, r2
 8001cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001cc2:	e01a      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cc6:	23c0      	movs	r3, #192	; 0xc0
 8001cc8:	025b      	lsls	r3, r3, #9
 8001cca:	401a      	ands	r2, r3
 8001ccc:	23c0      	movs	r3, #192	; 0xc0
 8001cce:	025b      	lsls	r3, r3, #9
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d109      	bne.n	8001ce8 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cd6:	4814      	ldr	r0, [pc, #80]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cd8:	f7fe fa1e 	bl	8000118 <__udivsi3>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	001a      	movs	r2, r3
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	4353      	muls	r3, r2
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cea:	480e      	ldr	r0, [pc, #56]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001cec:	f7fe fa14 	bl	8000118 <__udivsi3>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	4353      	muls	r3, r2
 8001cf8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cfe:	e005      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d04:	e002      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d08:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d0a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d0e:	0018      	movs	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b00f      	add	sp, #60	; 0x3c
 8001d14:	bd90      	pop	{r4, r7, pc}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	08003354 	.word	0x08003354
 8001d1c:	08003364 	.word	0x08003364
 8001d20:	40021000 	.word	0x40021000
 8001d24:	007a1200 	.word	0x007a1200
 8001d28:	02dc6c00 	.word	0x02dc6c00

08001d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d30:	4b02      	ldr	r3, [pc, #8]	; (8001d3c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	0018      	movs	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	20000000 	.word	0x20000000

08001d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d44:	f7ff fff2 	bl	8001d2c <HAL_RCC_GetHCLKFreq>
 8001d48:	0001      	movs	r1, r0
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	2207      	movs	r2, #7
 8001d52:	4013      	ands	r3, r2
 8001d54:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d56:	5cd3      	ldrb	r3, [r2, r3]
 8001d58:	40d9      	lsrs	r1, r3
 8001d5a:	000b      	movs	r3, r1
}    
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	40021000 	.word	0x40021000
 8001d68:	080033d8 	.word	0x080033d8

08001d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	025b      	lsls	r3, r3, #9
 8001d84:	4013      	ands	r3, r2
 8001d86:	d100      	bne.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d88:	e08f      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d8a:	2317      	movs	r3, #23
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d92:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d94:	69da      	ldr	r2, [r3, #28]
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	055b      	lsls	r3, r3, #21
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d111      	bne.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d9e:	4b64      	ldr	r3, [pc, #400]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001da0:	69da      	ldr	r2, [r3, #28]
 8001da2:	4b63      	ldr	r3, [pc, #396]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	0549      	lsls	r1, r1, #21
 8001da8:	430a      	orrs	r2, r1
 8001daa:	61da      	str	r2, [r3, #28]
 8001dac:	4b60      	ldr	r3, [pc, #384]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001dae:	69da      	ldr	r2, [r3, #28]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	055b      	lsls	r3, r3, #21
 8001db4:	4013      	ands	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dba:	2317      	movs	r3, #23
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc2:	4b5c      	ldr	r3, [pc, #368]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d11a      	bne.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dce:	4b59      	ldr	r3, [pc, #356]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4b58      	ldr	r3, [pc, #352]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001dd4:	2180      	movs	r1, #128	; 0x80
 8001dd6:	0049      	lsls	r1, r1, #1
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ddc:	f7fe ffdc 	bl	8000d98 <HAL_GetTick>
 8001de0:	0003      	movs	r3, r0
 8001de2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de4:	e008      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de6:	f7fe ffd7 	bl	8000d98 <HAL_GetTick>
 8001dea:	0002      	movs	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b64      	cmp	r3, #100	; 0x64
 8001df2:	d901      	bls.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e097      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	4b4e      	ldr	r3, [pc, #312]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4013      	ands	r3, r2
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e04:	4b4a      	ldr	r3, [pc, #296]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e06:	6a1a      	ldr	r2, [r3, #32]
 8001e08:	23c0      	movs	r3, #192	; 0xc0
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d034      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	23c0      	movs	r3, #192	; 0xc0
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d02c      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e26:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a43      	ldr	r2, [pc, #268]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e30:	4b3f      	ldr	r3, [pc, #252]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e32:	6a1a      	ldr	r2, [r3, #32]
 8001e34:	4b3e      	ldr	r3, [pc, #248]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	0249      	lsls	r1, r1, #9
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e3e:	4b3c      	ldr	r3, [pc, #240]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e40:	6a1a      	ldr	r2, [r3, #32]
 8001e42:	4b3b      	ldr	r3, [pc, #236]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e44:	493d      	ldr	r1, [pc, #244]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e46:	400a      	ands	r2, r1
 8001e48:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e4a:	4b39      	ldr	r3, [pc, #228]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2201      	movs	r2, #1
 8001e54:	4013      	ands	r3, r2
 8001e56:	d013      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7fe ff9e 	bl	8000d98 <HAL_GetTick>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e60:	e009      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e62:	f7fe ff99 	bl	8000d98 <HAL_GetTick>
 8001e66:	0002      	movs	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	4a34      	ldr	r2, [pc, #208]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e058      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e76:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e80:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4a2c      	ldr	r2, [pc, #176]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e86:	4013      	ands	r3, r2
 8001e88:	0019      	movs	r1, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e90:	430a      	orrs	r2, r1
 8001e92:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e94:	2317      	movs	r3, #23
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d105      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ea0:	69da      	ldr	r2, [r3, #28]
 8001ea2:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ea4:	4927      	ldr	r1, [pc, #156]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ea6:	400a      	ands	r2, r1
 8001ea8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d009      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	2203      	movs	r2, #3
 8001eba:	4393      	bics	r3, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d009      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	2210      	movs	r2, #16
 8001ed8:	4393      	bics	r3, r2
 8001eda:	0019      	movs	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	029b      	lsls	r3, r3, #10
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d009      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	2280      	movs	r2, #128	; 0x80
 8001ef8:	4393      	bics	r3, r2
 8001efa:	0019      	movs	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f02:	430a      	orrs	r2, r1
 8001f04:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d009      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f12:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	2240      	movs	r2, #64	; 0x40
 8001f18:	4393      	bics	r3, r2
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f22:	430a      	orrs	r2, r1
 8001f24:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b006      	add	sp, #24
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40007000 	.word	0x40007000
 8001f38:	fffffcff 	.word	0xfffffcff
 8001f3c:	fffeffff 	.word	0xfffeffff
 8001f40:	00001388 	.word	0x00001388
 8001f44:	efffffff 	.word	0xefffffff

08001f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e044      	b.n	8001fe4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d107      	bne.n	8001f72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2274      	movs	r2, #116	; 0x74
 8001f66:	2100      	movs	r1, #0
 8001f68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f7fe fdbb 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2224      	movs	r2, #36	; 0x24
 8001f76:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2101      	movs	r1, #1
 8001f84:	438a      	bics	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f000 fb4e 	bl	800262c <UART_SetConfig>
 8001f90:	0003      	movs	r3, r0
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e024      	b.n	8001fe4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f000 fc7f 	bl	80028a8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	490d      	ldr	r1, [pc, #52]	; (8001fec <HAL_UART_Init+0xa4>)
 8001fb6:	400a      	ands	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	212a      	movs	r1, #42	; 0x2a
 8001fc6:	438a      	bics	r2, r1
 8001fc8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f000 fd17 	bl	8002a10 <UART_CheckIdleState>
 8001fe2:	0003      	movs	r3, r0
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	ffffb7ff 	.word	0xffffb7ff

08001ff0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	1dbb      	adds	r3, r7, #6
 8001ffe:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002004:	2b20      	cmp	r3, #32
 8002006:	d000      	beq.n	800200a <HAL_UART_Transmit+0x1a>
 8002008:	e096      	b.n	8002138 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_UART_Transmit+0x28>
 8002010:	1dbb      	adds	r3, r7, #6
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e08e      	b.n	800213a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	015b      	lsls	r3, r3, #5
 8002024:	429a      	cmp	r2, r3
 8002026:	d109      	bne.n	800203c <HAL_UART_Transmit+0x4c>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2201      	movs	r2, #1
 8002034:	4013      	ands	r3, r2
 8002036:	d001      	beq.n	800203c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e07e      	b.n	800213a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2274      	movs	r2, #116	; 0x74
 8002040:	5c9b      	ldrb	r3, [r3, r2]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_UART_Transmit+0x5a>
 8002046:	2302      	movs	r3, #2
 8002048:	e077      	b.n	800213a <HAL_UART_Transmit+0x14a>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2274      	movs	r2, #116	; 0x74
 800204e:	2101      	movs	r1, #1
 8002050:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2280      	movs	r2, #128	; 0x80
 8002056:	2100      	movs	r1, #0
 8002058:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2221      	movs	r2, #33	; 0x21
 800205e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002060:	f7fe fe9a 	bl	8000d98 <HAL_GetTick>
 8002064:	0003      	movs	r3, r0
 8002066:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1dba      	adds	r2, r7, #6
 800206c:	2150      	movs	r1, #80	; 0x50
 800206e:	8812      	ldrh	r2, [r2, #0]
 8002070:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1dba      	adds	r2, r7, #6
 8002076:	2152      	movs	r1, #82	; 0x52
 8002078:	8812      	ldrh	r2, [r2, #0]
 800207a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	015b      	lsls	r3, r3, #5
 8002084:	429a      	cmp	r2, r3
 8002086:	d108      	bne.n	800209a <HAL_UART_Transmit+0xaa>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d104      	bne.n	800209a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	e003      	b.n	80020a2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2274      	movs	r2, #116	; 0x74
 80020a6:	2100      	movs	r1, #0
 80020a8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80020aa:	e02d      	b.n	8002108 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	0013      	movs	r3, r2
 80020b6:	2200      	movs	r2, #0
 80020b8:	2180      	movs	r1, #128	; 0x80
 80020ba:	f000 fcf3 	bl	8002aa4 <UART_WaitOnFlagUntilTimeout>
 80020be:	1e03      	subs	r3, r0, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e039      	b.n	800213a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10b      	bne.n	80020e4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	881a      	ldrh	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	05d2      	lsls	r2, r2, #23
 80020d6:	0dd2      	lsrs	r2, r2, #23
 80020d8:	b292      	uxth	r2, r2
 80020da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	3302      	adds	r3, #2
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	e008      	b.n	80020f6 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	781a      	ldrb	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	b292      	uxth	r2, r2
 80020ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	3301      	adds	r3, #1
 80020f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2252      	movs	r2, #82	; 0x52
 80020fa:	5a9b      	ldrh	r3, [r3, r2]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b299      	uxth	r1, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2252      	movs	r2, #82	; 0x52
 8002106:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2252      	movs	r2, #82	; 0x52
 800210c:	5a9b      	ldrh	r3, [r3, r2]
 800210e:	b29b      	uxth	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1cb      	bne.n	80020ac <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	0013      	movs	r3, r2
 800211e:	2200      	movs	r2, #0
 8002120:	2140      	movs	r1, #64	; 0x40
 8002122:	f000 fcbf 	bl	8002aa4 <UART_WaitOnFlagUntilTimeout>
 8002126:	1e03      	subs	r3, r0, #0
 8002128:	d001      	beq.n	800212e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e005      	b.n	800213a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2220      	movs	r2, #32
 8002132:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	e000      	b.n	800213a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002138:	2302      	movs	r3, #2
  }
}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b008      	add	sp, #32
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	1dbb      	adds	r3, r7, #6
 800214e:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002154:	2b20      	cmp	r3, #32
 8002156:	d13f      	bne.n	80021d8 <HAL_UART_Receive_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_UART_Receive_IT+0x24>
 800215e:	1dbb      	adds	r3, r7, #6
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e037      	b.n	80021da <HAL_UART_Receive_IT+0x98>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	015b      	lsls	r3, r3, #5
 8002172:	429a      	cmp	r2, r3
 8002174:	d109      	bne.n	800218a <HAL_UART_Receive_IT+0x48>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d105      	bne.n	800218a <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2201      	movs	r2, #1
 8002182:	4013      	ands	r3, r2
 8002184:	d001      	beq.n	800218a <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e027      	b.n	80021da <HAL_UART_Receive_IT+0x98>
      }
    }

    __HAL_LOCK(huart);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2274      	movs	r2, #116	; 0x74
 800218e:	5c9b      	ldrb	r3, [r3, r2]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_UART_Receive_IT+0x56>
 8002194:	2302      	movs	r3, #2
 8002196:	e020      	b.n	80021da <HAL_UART_Receive_IT+0x98>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2274      	movs	r2, #116	; 0x74
 800219c:	2101      	movs	r1, #1
 800219e:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	041b      	lsls	r3, r3, #16
 80021b0:	4013      	ands	r3, r2
 80021b2:	d008      	beq.n	80021c6 <HAL_UART_Receive_IT+0x84>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2180      	movs	r1, #128	; 0x80
 80021c0:	04c9      	lsls	r1, r1, #19
 80021c2:	430a      	orrs	r2, r1
 80021c4:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80021c6:	1dbb      	adds	r3, r7, #6
 80021c8:	881a      	ldrh	r2, [r3, #0]
 80021ca:	68b9      	ldr	r1, [r7, #8]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	0018      	movs	r0, r3
 80021d0:	f000 fce6 	bl	8002ba0 <UART_Start_Receive_IT>
 80021d4:	0003      	movs	r3, r0
 80021d6:	e000      	b.n	80021da <HAL_UART_Receive_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80021d8:	2302      	movs	r3, #2
  }
}
 80021da:	0018      	movs	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	b004      	add	sp, #16
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	4ab5      	ldr	r2, [pc, #724]	; (80024dc <HAL_UART_IRQHandler+0x2f8>)
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d112      	bne.n	8002238 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	2220      	movs	r2, #32
 8002216:	4013      	ands	r3, r2
 8002218:	d00e      	beq.n	8002238 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	2220      	movs	r2, #32
 800221e:	4013      	ands	r3, r2
 8002220:	d00a      	beq.n	8002238 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002226:	2b00      	cmp	r3, #0
 8002228:	d100      	bne.n	800222c <HAL_UART_IRQHandler+0x48>
 800222a:	e1d4      	b.n	80025d6 <HAL_UART_IRQHandler+0x3f2>
      {
        huart->RxISR(huart);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	0010      	movs	r0, r2
 8002234:	4798      	blx	r3
      }
      return;
 8002236:	e1ce      	b.n	80025d6 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d100      	bne.n	8002240 <HAL_UART_IRQHandler+0x5c>
 800223e:	e0d9      	b.n	80023f4 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2201      	movs	r2, #1
 8002244:	4013      	ands	r3, r2
 8002246:	d104      	bne.n	8002252 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	4aa5      	ldr	r2, [pc, #660]	; (80024e0 <HAL_UART_IRQHandler+0x2fc>)
 800224c:	4013      	ands	r3, r2
 800224e:	d100      	bne.n	8002252 <HAL_UART_IRQHandler+0x6e>
 8002250:	e0d0      	b.n	80023f4 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	2201      	movs	r2, #1
 8002256:	4013      	ands	r3, r2
 8002258:	d010      	beq.n	800227c <HAL_UART_IRQHandler+0x98>
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4013      	ands	r3, r2
 8002262:	d00b      	beq.n	800227c <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2201      	movs	r2, #1
 800226a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2280      	movs	r2, #128	; 0x80
 8002270:	589b      	ldr	r3, [r3, r2]
 8002272:	2201      	movs	r2, #1
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2180      	movs	r1, #128	; 0x80
 800227a:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	2202      	movs	r2, #2
 8002280:	4013      	ands	r3, r2
 8002282:	d00f      	beq.n	80022a4 <HAL_UART_IRQHandler+0xc0>
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2201      	movs	r2, #1
 8002288:	4013      	ands	r3, r2
 800228a:	d00b      	beq.n	80022a4 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2202      	movs	r2, #2
 8002292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	589b      	ldr	r3, [r3, r2]
 800229a:	2204      	movs	r2, #4
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	2204      	movs	r2, #4
 80022a8:	4013      	ands	r3, r2
 80022aa:	d00f      	beq.n	80022cc <HAL_UART_IRQHandler+0xe8>
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2201      	movs	r2, #1
 80022b0:	4013      	ands	r3, r2
 80022b2:	d00b      	beq.n	80022cc <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2204      	movs	r2, #4
 80022ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2280      	movs	r2, #128	; 0x80
 80022c0:	589b      	ldr	r3, [r3, r2]
 80022c2:	2202      	movs	r2, #2
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2208      	movs	r2, #8
 80022d0:	4013      	ands	r3, r2
 80022d2:	d013      	beq.n	80022fc <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2220      	movs	r2, #32
 80022d8:	4013      	ands	r3, r2
 80022da:	d103      	bne.n	80022e4 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2201      	movs	r2, #1
 80022e0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80022e2:	d00b      	beq.n	80022fc <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2208      	movs	r2, #8
 80022ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2280      	movs	r2, #128	; 0x80
 80022f0:	589b      	ldr	r3, [r3, r2]
 80022f2:	2208      	movs	r2, #8
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	4013      	ands	r3, r2
 8002304:	d011      	beq.n	800232a <HAL_UART_IRQHandler+0x146>
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	04db      	lsls	r3, r3, #19
 800230c:	4013      	ands	r3, r2
 800230e:	d00c      	beq.n	800232a <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	0112      	lsls	r2, r2, #4
 8002318:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2280      	movs	r2, #128	; 0x80
 800231e:	589b      	ldr	r3, [r3, r2]
 8002320:	2220      	movs	r2, #32
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2180      	movs	r1, #128	; 0x80
 8002328:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2280      	movs	r2, #128	; 0x80
 800232e:	589b      	ldr	r3, [r3, r2]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d100      	bne.n	8002336 <HAL_UART_IRQHandler+0x152>
 8002334:	e151      	b.n	80025da <HAL_UART_IRQHandler+0x3f6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	2220      	movs	r2, #32
 800233a:	4013      	ands	r3, r2
 800233c:	d00c      	beq.n	8002358 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2220      	movs	r2, #32
 8002342:	4013      	ands	r3, r2
 8002344:	d008      	beq.n	8002358 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	0010      	movs	r0, r2
 8002356:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2280      	movs	r2, #128	; 0x80
 800235c:	589b      	ldr	r3, [r3, r2]
 800235e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2240      	movs	r2, #64	; 0x40
 8002368:	4013      	ands	r3, r2
 800236a:	2b40      	cmp	r3, #64	; 0x40
 800236c:	d003      	beq.n	8002376 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2228      	movs	r2, #40	; 0x28
 8002372:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002374:	d033      	beq.n	80023de <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	0018      	movs	r0, r3
 800237a:	f000 fc9f 	bl	8002cbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2240      	movs	r2, #64	; 0x40
 8002386:	4013      	ands	r3, r2
 8002388:	2b40      	cmp	r3, #64	; 0x40
 800238a:	d123      	bne.n	80023d4 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2140      	movs	r1, #64	; 0x40
 8002398:	438a      	bics	r2, r1
 800239a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d012      	beq.n	80023ca <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a8:	4a4e      	ldr	r2, [pc, #312]	; (80024e4 <HAL_UART_IRQHandler+0x300>)
 80023aa:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b0:	0018      	movs	r0, r3
 80023b2:	f7fe fe11 	bl	8000fd8 <HAL_DMA_Abort_IT>
 80023b6:	1e03      	subs	r3, r0, #0
 80023b8:	d01a      	beq.n	80023f0 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c4:	0018      	movs	r0, r3
 80023c6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c8:	e012      	b.n	80023f0 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f000 f919 	bl	8002604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d2:	e00d      	b.n	80023f0 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	0018      	movs	r0, r3
 80023d8:	f000 f914 	bl	8002604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023dc:	e008      	b.n	80023f0 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 f90f 	bl	8002604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2280      	movs	r2, #128	; 0x80
 80023ea:	2100      	movs	r1, #0
 80023ec:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80023ee:	e0f4      	b.n	80025da <HAL_UART_IRQHandler+0x3f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023f0:	46c0      	nop			; (mov r8, r8)
    return;
 80023f2:	e0f2      	b.n	80025da <HAL_UART_IRQHandler+0x3f6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d000      	beq.n	80023fe <HAL_UART_IRQHandler+0x21a>
 80023fc:	e0b7      	b.n	800256e <HAL_UART_IRQHandler+0x38a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	2210      	movs	r2, #16
 8002402:	4013      	ands	r3, r2
 8002404:	d100      	bne.n	8002408 <HAL_UART_IRQHandler+0x224>
 8002406:	e0b2      	b.n	800256e <HAL_UART_IRQHandler+0x38a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2210      	movs	r2, #16
 800240c:	4013      	ands	r3, r2
 800240e:	d100      	bne.n	8002412 <HAL_UART_IRQHandler+0x22e>
 8002410:	e0ad      	b.n	800256e <HAL_UART_IRQHandler+0x38a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2210      	movs	r2, #16
 8002418:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2240      	movs	r2, #64	; 0x40
 8002422:	4013      	ands	r3, r2
 8002424:	2b40      	cmp	r3, #64	; 0x40
 8002426:	d161      	bne.n	80024ec <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	2108      	movs	r1, #8
 8002432:	187b      	adds	r3, r7, r1
 8002434:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8002436:	187b      	adds	r3, r7, r1
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d100      	bne.n	8002440 <HAL_UART_IRQHandler+0x25c>
 800243e:	e0ce      	b.n	80025de <HAL_UART_IRQHandler+0x3fa>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2258      	movs	r2, #88	; 0x58
 8002444:	5a9b      	ldrh	r3, [r3, r2]
 8002446:	2208      	movs	r2, #8
 8002448:	18ba      	adds	r2, r7, r2
 800244a:	8812      	ldrh	r2, [r2, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d300      	bcc.n	8002452 <HAL_UART_IRQHandler+0x26e>
 8002450:	e0c5      	b.n	80025de <HAL_UART_IRQHandler+0x3fa>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2208      	movs	r2, #8
 8002456:	18ba      	adds	r2, r7, r2
 8002458:	215a      	movs	r1, #90	; 0x5a
 800245a:	8812      	ldrh	r2, [r2, #0]
 800245c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	2b20      	cmp	r3, #32
 8002466:	d02a      	beq.n	80024be <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	491d      	ldr	r1, [pc, #116]	; (80024e8 <HAL_UART_IRQHandler+0x304>)
 8002474:	400a      	ands	r2, r1
 8002476:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2101      	movs	r1, #1
 8002484:	438a      	bics	r2, r1
 8002486:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2140      	movs	r1, #64	; 0x40
 8002494:	438a      	bics	r2, r1
 8002496:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2110      	movs	r1, #16
 80024b0:	438a      	bics	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	0018      	movs	r0, r3
 80024ba:	f7fe fd55 	bl	8000f68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2258      	movs	r2, #88	; 0x58
 80024c2:	5a9a      	ldrh	r2, [r3, r2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	215a      	movs	r1, #90	; 0x5a
 80024c8:	5a5b      	ldrh	r3, [r3, r1]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	0011      	movs	r1, r2
 80024d4:	0018      	movs	r0, r3
 80024d6:	f000 f89d 	bl	8002614 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80024da:	e080      	b.n	80025de <HAL_UART_IRQHandler+0x3fa>
 80024dc:	0000080f 	.word	0x0000080f
 80024e0:	04000120 	.word	0x04000120
 80024e4:	08002d1d 	.word	0x08002d1d
 80024e8:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2258      	movs	r2, #88	; 0x58
 80024f0:	5a99      	ldrh	r1, [r3, r2]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	225a      	movs	r2, #90	; 0x5a
 80024f6:	5a9b      	ldrh	r3, [r3, r2]
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	230a      	movs	r3, #10
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	1a8a      	subs	r2, r1, r2
 8002500:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	225a      	movs	r2, #90	; 0x5a
 8002506:	5a9b      	ldrh	r3, [r3, r2]
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d100      	bne.n	8002510 <HAL_UART_IRQHandler+0x32c>
 800250e:	e068      	b.n	80025e2 <HAL_UART_IRQHandler+0x3fe>
          &&(nb_rx_data > 0U) )
 8002510:	230a      	movs	r3, #10
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d063      	beq.n	80025e2 <HAL_UART_IRQHandler+0x3fe>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4932      	ldr	r1, [pc, #200]	; (80025f0 <HAL_UART_IRQHandler+0x40c>)
 8002526:	400a      	ands	r2, r1
 8002528:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2101      	movs	r1, #1
 8002536:	438a      	bics	r2, r1
 8002538:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2220      	movs	r2, #32
 800253e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2110      	movs	r1, #16
 8002558:	438a      	bics	r2, r1
 800255a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800255c:	230a      	movs	r3, #10
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	881a      	ldrh	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	0011      	movs	r1, r2
 8002566:	0018      	movs	r0, r3
 8002568:	f000 f854 	bl	8002614 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800256c:	e039      	b.n	80025e2 <HAL_UART_IRQHandler+0x3fe>
    }
  }
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	035b      	lsls	r3, r3, #13
 8002574:	4013      	ands	r3, r2
 8002576:	d00e      	beq.n	8002596 <HAL_UART_IRQHandler+0x3b2>
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	03db      	lsls	r3, r3, #15
 800257e:	4013      	ands	r3, r2
 8002580:	d009      	beq.n	8002596 <HAL_UART_IRQHandler+0x3b2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2280      	movs	r2, #128	; 0x80
 8002588:	0352      	lsls	r2, r2, #13
 800258a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	0018      	movs	r0, r3
 8002590:	f000 fce2 	bl	8002f58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002594:	e028      	b.n	80025e8 <HAL_UART_IRQHandler+0x404>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	2280      	movs	r2, #128	; 0x80
 800259a:	4013      	ands	r3, r2
 800259c:	d00d      	beq.n	80025ba <HAL_UART_IRQHandler+0x3d6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	4013      	ands	r3, r2
 80025a4:	d009      	beq.n	80025ba <HAL_UART_IRQHandler+0x3d6>
  {
    if (huart->TxISR != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d01b      	beq.n	80025e6 <HAL_UART_IRQHandler+0x402>
    {
      huart->TxISR(huart);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	0010      	movs	r0, r2
 80025b6:	4798      	blx	r3
    }
    return;
 80025b8:	e015      	b.n	80025e6 <HAL_UART_IRQHandler+0x402>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	2240      	movs	r2, #64	; 0x40
 80025be:	4013      	ands	r3, r2
 80025c0:	d012      	beq.n	80025e8 <HAL_UART_IRQHandler+0x404>
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	4013      	ands	r3, r2
 80025c8:	d00e      	beq.n	80025e8 <HAL_UART_IRQHandler+0x404>
  {
    UART_EndTransmit_IT(huart);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	0018      	movs	r0, r3
 80025ce:	f000 fbbc 	bl	8002d4a <UART_EndTransmit_IT>
    return;
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	e008      	b.n	80025e8 <HAL_UART_IRQHandler+0x404>
      return;
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	e006      	b.n	80025e8 <HAL_UART_IRQHandler+0x404>
    return;
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	e004      	b.n	80025e8 <HAL_UART_IRQHandler+0x404>
      return;
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	e002      	b.n	80025e8 <HAL_UART_IRQHandler+0x404>
      return;
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	e000      	b.n	80025e8 <HAL_UART_IRQHandler+0x404>
    return;
 80025e6:	46c0      	nop			; (mov r8, r8)
  }

}
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b008      	add	sp, #32
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	fffffedf 	.word	0xfffffedf

080025f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80025fc:	46c0      	nop			; (mov r8, r8)
 80025fe:	46bd      	mov	sp, r7
 8002600:	b002      	add	sp, #8
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b002      	add	sp, #8
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	000a      	movs	r2, r1
 800261e:	1cbb      	adds	r3, r7, #2
 8002620:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	46bd      	mov	sp, r7
 8002626:	b002      	add	sp, #8
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002634:	231e      	movs	r3, #30
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a8b      	ldr	r2, [pc, #556]	; (8002888 <UART_SetConfig+0x25c>)
 800265c:	4013      	ands	r3, r2
 800265e:	0019      	movs	r1, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	430a      	orrs	r2, r1
 8002668:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a86      	ldr	r2, [pc, #536]	; (800288c <UART_SetConfig+0x260>)
 8002672:	4013      	ands	r3, r2
 8002674:	0019      	movs	r1, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a7d      	ldr	r2, [pc, #500]	; (8002890 <UART_SetConfig+0x264>)
 800269a:	4013      	ands	r3, r2
 800269c:	0019      	movs	r1, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a79      	ldr	r2, [pc, #484]	; (8002894 <UART_SetConfig+0x268>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d125      	bne.n	80026fe <UART_SetConfig+0xd2>
 80026b2:	4b79      	ldr	r3, [pc, #484]	; (8002898 <UART_SetConfig+0x26c>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	2203      	movs	r2, #3
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d00f      	beq.n	80026de <UART_SetConfig+0xb2>
 80026be:	d304      	bcc.n	80026ca <UART_SetConfig+0x9e>
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d011      	beq.n	80026e8 <UART_SetConfig+0xbc>
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d005      	beq.n	80026d4 <UART_SetConfig+0xa8>
 80026c8:	e013      	b.n	80026f2 <UART_SetConfig+0xc6>
 80026ca:	231f      	movs	r3, #31
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
 80026d2:	e022      	b.n	800271a <UART_SetConfig+0xee>
 80026d4:	231f      	movs	r3, #31
 80026d6:	18fb      	adds	r3, r7, r3
 80026d8:	2202      	movs	r2, #2
 80026da:	701a      	strb	r2, [r3, #0]
 80026dc:	e01d      	b.n	800271a <UART_SetConfig+0xee>
 80026de:	231f      	movs	r3, #31
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	2204      	movs	r2, #4
 80026e4:	701a      	strb	r2, [r3, #0]
 80026e6:	e018      	b.n	800271a <UART_SetConfig+0xee>
 80026e8:	231f      	movs	r3, #31
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	2208      	movs	r2, #8
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	e013      	b.n	800271a <UART_SetConfig+0xee>
 80026f2:	231f      	movs	r3, #31
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	2210      	movs	r2, #16
 80026f8:	701a      	strb	r2, [r3, #0]
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	e00d      	b.n	800271a <UART_SetConfig+0xee>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a66      	ldr	r2, [pc, #408]	; (800289c <UART_SetConfig+0x270>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d104      	bne.n	8002712 <UART_SetConfig+0xe6>
 8002708:	231f      	movs	r3, #31
 800270a:	18fb      	adds	r3, r7, r3
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
 8002710:	e003      	b.n	800271a <UART_SetConfig+0xee>
 8002712:	231f      	movs	r3, #31
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	2210      	movs	r2, #16
 8002718:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	021b      	lsls	r3, r3, #8
 8002722:	429a      	cmp	r2, r3
 8002724:	d15c      	bne.n	80027e0 <UART_SetConfig+0x1b4>
  {
    switch (clocksource)
 8002726:	231f      	movs	r3, #31
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d00d      	beq.n	800274c <UART_SetConfig+0x120>
 8002730:	dc02      	bgt.n	8002738 <UART_SetConfig+0x10c>
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <UART_SetConfig+0x116>
 8002736:	e015      	b.n	8002764 <UART_SetConfig+0x138>
 8002738:	2b04      	cmp	r3, #4
 800273a:	d00a      	beq.n	8002752 <UART_SetConfig+0x126>
 800273c:	2b08      	cmp	r3, #8
 800273e:	d00d      	beq.n	800275c <UART_SetConfig+0x130>
 8002740:	e010      	b.n	8002764 <UART_SetConfig+0x138>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002742:	f7ff fafd 	bl	8001d40 <HAL_RCC_GetPCLK1Freq>
 8002746:	0003      	movs	r3, r0
 8002748:	61bb      	str	r3, [r7, #24]
        break;
 800274a:	e012      	b.n	8002772 <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800274c:	4b54      	ldr	r3, [pc, #336]	; (80028a0 <UART_SetConfig+0x274>)
 800274e:	61bb      	str	r3, [r7, #24]
        break;
 8002750:	e00f      	b.n	8002772 <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002752:	f7ff fa6d 	bl	8001c30 <HAL_RCC_GetSysClockFreq>
 8002756:	0003      	movs	r3, r0
 8002758:	61bb      	str	r3, [r7, #24]
        break;
 800275a:	e00a      	b.n	8002772 <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	61bb      	str	r3, [r7, #24]
        break;
 8002762:	e006      	b.n	8002772 <UART_SetConfig+0x146>
      default:
        pclk = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002768:	231e      	movs	r3, #30
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	2201      	movs	r2, #1
 800276e:	701a      	strb	r2, [r3, #0]
        break;
 8002770:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d100      	bne.n	800277a <UART_SetConfig+0x14e>
 8002778:	e079      	b.n	800286e <UART_SetConfig+0x242>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	005a      	lsls	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	085b      	lsrs	r3, r3, #1
 8002784:	18d2      	adds	r2, r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	0019      	movs	r1, r3
 800278c:	0010      	movs	r0, r2
 800278e:	f7fd fcc3 	bl	8000118 <__udivsi3>
 8002792:	0003      	movs	r3, r0
 8002794:	b29b      	uxth	r3, r3
 8002796:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	2b0f      	cmp	r3, #15
 800279c:	d91b      	bls.n	80027d6 <UART_SetConfig+0x1aa>
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4a40      	ldr	r2, [pc, #256]	; (80028a4 <UART_SetConfig+0x278>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d817      	bhi.n	80027d6 <UART_SetConfig+0x1aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	200e      	movs	r0, #14
 80027ac:	183b      	adds	r3, r7, r0
 80027ae:	210f      	movs	r1, #15
 80027b0:	438a      	bics	r2, r1
 80027b2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2207      	movs	r2, #7
 80027bc:	4013      	ands	r3, r2
 80027be:	b299      	uxth	r1, r3
 80027c0:	183b      	adds	r3, r7, r0
 80027c2:	183a      	adds	r2, r7, r0
 80027c4:	8812      	ldrh	r2, [r2, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	183a      	adds	r2, r7, r0
 80027d0:	8812      	ldrh	r2, [r2, #0]
 80027d2:	60da      	str	r2, [r3, #12]
 80027d4:	e04b      	b.n	800286e <UART_SetConfig+0x242>
      }
      else
      {
        ret = HAL_ERROR;
 80027d6:	231e      	movs	r3, #30
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e046      	b.n	800286e <UART_SetConfig+0x242>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027e0:	231f      	movs	r3, #31
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d00d      	beq.n	8002806 <UART_SetConfig+0x1da>
 80027ea:	dc02      	bgt.n	80027f2 <UART_SetConfig+0x1c6>
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <UART_SetConfig+0x1d0>
 80027f0:	e015      	b.n	800281e <UART_SetConfig+0x1f2>
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d00a      	beq.n	800280c <UART_SetConfig+0x1e0>
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d00d      	beq.n	8002816 <UART_SetConfig+0x1ea>
 80027fa:	e010      	b.n	800281e <UART_SetConfig+0x1f2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027fc:	f7ff faa0 	bl	8001d40 <HAL_RCC_GetPCLK1Freq>
 8002800:	0003      	movs	r3, r0
 8002802:	61bb      	str	r3, [r7, #24]
        break;
 8002804:	e012      	b.n	800282c <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002806:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <UART_SetConfig+0x274>)
 8002808:	61bb      	str	r3, [r7, #24]
        break;
 800280a:	e00f      	b.n	800282c <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800280c:	f7ff fa10 	bl	8001c30 <HAL_RCC_GetSysClockFreq>
 8002810:	0003      	movs	r3, r0
 8002812:	61bb      	str	r3, [r7, #24]
        break;
 8002814:	e00a      	b.n	800282c <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	61bb      	str	r3, [r7, #24]
        break;
 800281c:	e006      	b.n	800282c <UART_SetConfig+0x200>
      default:
        pclk = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002822:	231e      	movs	r3, #30
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
        break;
 800282a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d01d      	beq.n	800286e <UART_SetConfig+0x242>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	085a      	lsrs	r2, r3, #1
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	18d2      	adds	r2, r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	0019      	movs	r1, r3
 8002842:	0010      	movs	r0, r2
 8002844:	f7fd fc68 	bl	8000118 <__udivsi3>
 8002848:	0003      	movs	r3, r0
 800284a:	b29b      	uxth	r3, r3
 800284c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2b0f      	cmp	r3, #15
 8002852:	d908      	bls.n	8002866 <UART_SetConfig+0x23a>
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4a13      	ldr	r2, [pc, #76]	; (80028a4 <UART_SetConfig+0x278>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d804      	bhi.n	8002866 <UART_SetConfig+0x23a>
      {
        huart->Instance->BRR = usartdiv;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	60da      	str	r2, [r3, #12]
 8002864:	e003      	b.n	800286e <UART_SetConfig+0x242>
      }
      else
      {
        ret = HAL_ERROR;
 8002866:	231e      	movs	r3, #30
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800287a:	231e      	movs	r3, #30
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	781b      	ldrb	r3, [r3, #0]
}
 8002880:	0018      	movs	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	b008      	add	sp, #32
 8002886:	bd80      	pop	{r7, pc}
 8002888:	efff69f3 	.word	0xefff69f3
 800288c:	ffffcfff 	.word	0xffffcfff
 8002890:	fffff4ff 	.word	0xfffff4ff
 8002894:	40013800 	.word	0x40013800
 8002898:	40021000 	.word	0x40021000
 800289c:	40004400 	.word	0x40004400
 80028a0:	007a1200 	.word	0x007a1200
 80028a4:	0000ffff 	.word	0x0000ffff

080028a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	2201      	movs	r2, #1
 80028b6:	4013      	ands	r3, r2
 80028b8:	d00b      	beq.n	80028d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a4a      	ldr	r2, [pc, #296]	; (80029ec <UART_AdvFeatureConfig+0x144>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	0019      	movs	r1, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	2202      	movs	r2, #2
 80028d8:	4013      	ands	r3, r2
 80028da:	d00b      	beq.n	80028f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4a43      	ldr	r2, [pc, #268]	; (80029f0 <UART_AdvFeatureConfig+0x148>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	2204      	movs	r2, #4
 80028fa:	4013      	ands	r3, r2
 80028fc:	d00b      	beq.n	8002916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	4a3b      	ldr	r2, [pc, #236]	; (80029f4 <UART_AdvFeatureConfig+0x14c>)
 8002906:	4013      	ands	r3, r2
 8002908:	0019      	movs	r1, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	2208      	movs	r2, #8
 800291c:	4013      	ands	r3, r2
 800291e:	d00b      	beq.n	8002938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4a34      	ldr	r2, [pc, #208]	; (80029f8 <UART_AdvFeatureConfig+0x150>)
 8002928:	4013      	ands	r3, r2
 800292a:	0019      	movs	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	2210      	movs	r2, #16
 800293e:	4013      	ands	r3, r2
 8002940:	d00b      	beq.n	800295a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a2c      	ldr	r2, [pc, #176]	; (80029fc <UART_AdvFeatureConfig+0x154>)
 800294a:	4013      	ands	r3, r2
 800294c:	0019      	movs	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	2220      	movs	r2, #32
 8002960:	4013      	ands	r3, r2
 8002962:	d00b      	beq.n	800297c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	4a25      	ldr	r2, [pc, #148]	; (8002a00 <UART_AdvFeatureConfig+0x158>)
 800296c:	4013      	ands	r3, r2
 800296e:	0019      	movs	r1, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	2240      	movs	r2, #64	; 0x40
 8002982:	4013      	ands	r3, r2
 8002984:	d01d      	beq.n	80029c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <UART_AdvFeatureConfig+0x15c>)
 800298e:	4013      	ands	r3, r2
 8002990:	0019      	movs	r1, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	035b      	lsls	r3, r3, #13
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d10b      	bne.n	80029c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4a15      	ldr	r2, [pc, #84]	; (8002a08 <UART_AdvFeatureConfig+0x160>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	2280      	movs	r2, #128	; 0x80
 80029c8:	4013      	ands	r3, r2
 80029ca:	d00b      	beq.n	80029e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <UART_AdvFeatureConfig+0x164>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	0019      	movs	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	605a      	str	r2, [r3, #4]
  }
}
 80029e4:	46c0      	nop			; (mov r8, r8)
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b002      	add	sp, #8
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	fffdffff 	.word	0xfffdffff
 80029f0:	fffeffff 	.word	0xfffeffff
 80029f4:	fffbffff 	.word	0xfffbffff
 80029f8:	ffff7fff 	.word	0xffff7fff
 80029fc:	ffffefff 	.word	0xffffefff
 8002a00:	ffffdfff 	.word	0xffffdfff
 8002a04:	ffefffff 	.word	0xffefffff
 8002a08:	ff9fffff 	.word	0xff9fffff
 8002a0c:	fff7ffff 	.word	0xfff7ffff

08002a10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a20:	f7fe f9ba 	bl	8000d98 <HAL_GetTick>
 8002a24:	0003      	movs	r3, r0
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2208      	movs	r2, #8
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d10d      	bne.n	8002a52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	0399      	lsls	r1, r3, #14
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <UART_CheckIdleState+0x90>)
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	0013      	movs	r3, r2
 8002a44:	2200      	movs	r2, #0
 8002a46:	f000 f82d 	bl	8002aa4 <UART_WaitOnFlagUntilTimeout>
 8002a4a:	1e03      	subs	r3, r0, #0
 8002a4c:	d001      	beq.n	8002a52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e022      	b.n	8002a98 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2204      	movs	r2, #4
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d10d      	bne.n	8002a7c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	03d9      	lsls	r1, r3, #15
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <UART_CheckIdleState+0x90>)
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	0013      	movs	r3, r2
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f000 f818 	bl	8002aa4 <UART_WaitOnFlagUntilTimeout>
 8002a74:	1e03      	subs	r3, r0, #0
 8002a76:	d001      	beq.n	8002a7c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e00d      	b.n	8002a98 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2274      	movs	r2, #116	; 0x74
 8002a92:	2100      	movs	r1, #0
 8002a94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	0018      	movs	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b004      	add	sp, #16
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	01ffffff 	.word	0x01ffffff

08002aa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	1dfb      	adds	r3, r7, #7
 8002ab2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab4:	e05e      	b.n	8002b74 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	d05b      	beq.n	8002b74 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002abc:	f7fe f96c 	bl	8000d98 <HAL_GetTick>
 8002ac0:	0002      	movs	r2, r0
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d302      	bcc.n	8002ad2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d11b      	bne.n	8002b0a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	492f      	ldr	r1, [pc, #188]	; (8002b9c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002ade:	400a      	ands	r2, r1
 8002ae0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2101      	movs	r1, #1
 8002aee:	438a      	bics	r2, r1
 8002af0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2220      	movs	r2, #32
 8002af6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2274      	movs	r2, #116	; 0x74
 8002b02:	2100      	movs	r1, #0
 8002b04:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e044      	b.n	8002b94 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2204      	movs	r2, #4
 8002b12:	4013      	ands	r3, r2
 8002b14:	d02e      	beq.n	8002b74 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69da      	ldr	r2, [r3, #28]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	401a      	ands	r2, r3
 8002b22:	2380      	movs	r3, #128	; 0x80
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d124      	bne.n	8002b74 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2280      	movs	r2, #128	; 0x80
 8002b30:	0112      	lsls	r2, r2, #4
 8002b32:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4917      	ldr	r1, [pc, #92]	; (8002b9c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002b40:	400a      	ands	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2101      	movs	r1, #1
 8002b50:	438a      	bics	r2, r1
 8002b52:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	2120      	movs	r1, #32
 8002b66:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2274      	movs	r2, #116	; 0x74
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e00f      	b.n	8002b94 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	425a      	negs	r2, r3
 8002b84:	4153      	adcs	r3, r2
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	001a      	movs	r2, r3
 8002b8a:	1dfb      	adds	r3, r7, #7
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d091      	beq.n	8002ab6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	0018      	movs	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b004      	add	sp, #16
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	fffffe5f 	.word	0xfffffe5f

08002ba0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	1dbb      	adds	r3, r7, #6
 8002bac:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1dba      	adds	r2, r7, #6
 8002bb8:	2158      	movs	r1, #88	; 0x58
 8002bba:	8812      	ldrh	r2, [r2, #0]
 8002bbc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1dba      	adds	r2, r7, #6
 8002bc2:	215a      	movs	r1, #90	; 0x5a
 8002bc4:	8812      	ldrh	r2, [r2, #0]
 8002bc6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	015b      	lsls	r3, r3, #5
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d10d      	bne.n	8002bf6 <UART_Start_Receive_IT+0x56>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d104      	bne.n	8002bec <UART_Start_Receive_IT+0x4c>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	225c      	movs	r2, #92	; 0x5c
 8002be6:	4932      	ldr	r1, [pc, #200]	; (8002cb0 <UART_Start_Receive_IT+0x110>)
 8002be8:	5299      	strh	r1, [r3, r2]
 8002bea:	e02e      	b.n	8002c4a <UART_Start_Receive_IT+0xaa>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	225c      	movs	r2, #92	; 0x5c
 8002bf0:	21ff      	movs	r1, #255	; 0xff
 8002bf2:	5299      	strh	r1, [r3, r2]
 8002bf4:	e029      	b.n	8002c4a <UART_Start_Receive_IT+0xaa>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10d      	bne.n	8002c1a <UART_Start_Receive_IT+0x7a>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d104      	bne.n	8002c10 <UART_Start_Receive_IT+0x70>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	225c      	movs	r2, #92	; 0x5c
 8002c0a:	21ff      	movs	r1, #255	; 0xff
 8002c0c:	5299      	strh	r1, [r3, r2]
 8002c0e:	e01c      	b.n	8002c4a <UART_Start_Receive_IT+0xaa>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	225c      	movs	r2, #92	; 0x5c
 8002c14:	217f      	movs	r1, #127	; 0x7f
 8002c16:	5299      	strh	r1, [r3, r2]
 8002c18:	e017      	b.n	8002c4a <UART_Start_Receive_IT+0xaa>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	055b      	lsls	r3, r3, #21
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d10d      	bne.n	8002c42 <UART_Start_Receive_IT+0xa2>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d104      	bne.n	8002c38 <UART_Start_Receive_IT+0x98>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	225c      	movs	r2, #92	; 0x5c
 8002c32:	217f      	movs	r1, #127	; 0x7f
 8002c34:	5299      	strh	r1, [r3, r2]
 8002c36:	e008      	b.n	8002c4a <UART_Start_Receive_IT+0xaa>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	225c      	movs	r2, #92	; 0x5c
 8002c3c:	213f      	movs	r1, #63	; 0x3f
 8002c3e:	5299      	strh	r1, [r3, r2]
 8002c40:	e003      	b.n	8002c4a <UART_Start_Receive_IT+0xaa>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	225c      	movs	r2, #92	; 0x5c
 8002c46:	2100      	movs	r1, #0
 8002c48:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2280      	movs	r2, #128	; 0x80
 8002c4e:	2100      	movs	r1, #0
 8002c50:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2222      	movs	r2, #34	; 0x22
 8002c56:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2101      	movs	r1, #1
 8002c64:	430a      	orrs	r2, r1
 8002c66:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	015b      	lsls	r3, r3, #5
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d107      	bne.n	8002c84 <UART_Start_Receive_IT+0xe4>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d103      	bne.n	8002c84 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <UART_Start_Receive_IT+0x114>)
 8002c80:	665a      	str	r2, [r3, #100]	; 0x64
 8002c82:	e002      	b.n	8002c8a <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4a0c      	ldr	r2, [pc, #48]	; (8002cb8 <UART_Start_Receive_IT+0x118>)
 8002c88:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2274      	movs	r2, #116	; 0x74
 8002c8e:	2100      	movs	r1, #0
 8002c90:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2190      	movs	r1, #144	; 0x90
 8002c9e:	0049      	lsls	r1, r1, #1
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b004      	add	sp, #16
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	000001ff 	.word	0x000001ff
 8002cb4:	08002e6d 	.word	0x08002e6d
 8002cb8:	08002d81 	.word	0x08002d81

08002cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4912      	ldr	r1, [pc, #72]	; (8002d18 <UART_EndRxTransfer+0x5c>)
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2101      	movs	r1, #1
 8002ce0:	438a      	bics	r2, r1
 8002ce2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d107      	bne.n	8002cfc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2110      	movs	r1, #16
 8002cf8:	438a      	bics	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b002      	add	sp, #8
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	fffffedf 	.word	0xfffffedf

08002d1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	225a      	movs	r2, #90	; 0x5a
 8002d2e:	2100      	movs	r1, #0
 8002d30:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2252      	movs	r2, #82	; 0x52
 8002d36:	2100      	movs	r1, #0
 8002d38:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7ff fc61 	bl	8002604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b004      	add	sp, #16
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2140      	movs	r1, #64	; 0x40
 8002d5e:	438a      	bics	r2, r1
 8002d60:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	0018      	movs	r0, r3
 8002d72:	f7ff fc3f 	bl	80025f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b002      	add	sp, #8
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002d88:	230e      	movs	r3, #14
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	215c      	movs	r1, #92	; 0x5c
 8002d90:	5a52      	ldrh	r2, [r2, r1]
 8002d92:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d98:	2b22      	cmp	r3, #34	; 0x22
 8002d9a:	d158      	bne.n	8002e4e <UART_RxISR_8BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	210c      	movs	r1, #12
 8002da2:	187b      	adds	r3, r7, r1
 8002da4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002da6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002da8:	187b      	adds	r3, r7, r1
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	230e      	movs	r3, #14
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	b2d9      	uxtb	r1, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dba:	400a      	ands	r2, r1
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	225a      	movs	r2, #90	; 0x5a
 8002dce:	5a9b      	ldrh	r3, [r3, r2]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b299      	uxth	r1, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	225a      	movs	r2, #90	; 0x5a
 8002dda:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	225a      	movs	r2, #90	; 0x5a
 8002de0:	5a9b      	ldrh	r3, [r3, r2]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d13a      	bne.n	8002e5e <UART_RxISR_8BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	491d      	ldr	r1, [pc, #116]	; (8002e68 <UART_RxISR_8BIT+0xe8>)
 8002df4:	400a      	ands	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2101      	movs	r1, #1
 8002e04:	438a      	bics	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d110      	bne.n	8002e3e <UART_RxISR_8BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2110      	movs	r1, #16
 8002e28:	438a      	bics	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2258      	movs	r2, #88	; 0x58
 8002e30:	5a9a      	ldrh	r2, [r3, r2]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0011      	movs	r1, r2
 8002e36:	0018      	movs	r0, r3
 8002e38:	f7ff fbec 	bl	8002614 <HAL_UARTEx_RxEventCallback>
 8002e3c:	e003      	b.n	8002e46 <UART_RxISR_8BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	0018      	movs	r0, r3
 8002e42:	f7fd f9f5 	bl	8000230 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002e4c:	e007      	b.n	8002e5e <UART_RxISR_8BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699a      	ldr	r2, [r3, #24]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2108      	movs	r1, #8
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	619a      	str	r2, [r3, #24]
}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b004      	add	sp, #16
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	fffffedf 	.word	0xfffffedf

08002e6c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002e74:	230e      	movs	r3, #14
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	215c      	movs	r1, #92	; 0x5c
 8002e7c:	5a52      	ldrh	r2, [r2, r1]
 8002e7e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e84:	2b22      	cmp	r3, #34	; 0x22
 8002e86:	d158      	bne.n	8002f3a <UART_RxISR_16BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	210c      	movs	r1, #12
 8002e8e:	187b      	adds	r3, r7, r1
 8002e90:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002e92:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e98:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8002e9a:	187b      	adds	r3, r7, r1
 8002e9c:	220e      	movs	r2, #14
 8002e9e:	18ba      	adds	r2, r7, r2
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	8812      	ldrh	r2, [r2, #0]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb0:	1c9a      	adds	r2, r3, #2
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	225a      	movs	r2, #90	; 0x5a
 8002eba:	5a9b      	ldrh	r3, [r3, r2]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b299      	uxth	r1, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	225a      	movs	r2, #90	; 0x5a
 8002ec6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	225a      	movs	r2, #90	; 0x5a
 8002ecc:	5a9b      	ldrh	r3, [r3, r2]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d13a      	bne.n	8002f4a <UART_RxISR_16BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	491d      	ldr	r1, [pc, #116]	; (8002f54 <UART_RxISR_16BIT+0xe8>)
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2101      	movs	r1, #1
 8002ef0:	438a      	bics	r2, r1
 8002ef2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d110      	bne.n	8002f2a <UART_RxISR_16BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2110      	movs	r1, #16
 8002f14:	438a      	bics	r2, r1
 8002f16:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2258      	movs	r2, #88	; 0x58
 8002f1c:	5a9a      	ldrh	r2, [r3, r2]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	0011      	movs	r1, r2
 8002f22:	0018      	movs	r0, r3
 8002f24:	f7ff fb76 	bl	8002614 <HAL_UARTEx_RxEventCallback>
 8002f28:	e003      	b.n	8002f32 <UART_RxISR_16BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f7fd f97f 	bl	8000230 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002f38:	e007      	b.n	8002f4a <UART_RxISR_16BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699a      	ldr	r2, [r3, #24]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2108      	movs	r1, #8
 8002f46:	430a      	orrs	r2, r1
 8002f48:	619a      	str	r2, [r3, #24]
}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b004      	add	sp, #16
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	fffffedf 	.word	0xfffffedf

08002f58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002f60:	46c0      	nop			; (mov r8, r8)
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b002      	add	sp, #8
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <atoi>:
 8002f68:	b510      	push	{r4, lr}
 8002f6a:	220a      	movs	r2, #10
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	f000 f8b9 	bl	80030e4 <strtol>
 8002f72:	bd10      	pop	{r4, pc}

08002f74 <__libc_init_array>:
 8002f74:	b570      	push	{r4, r5, r6, lr}
 8002f76:	2600      	movs	r6, #0
 8002f78:	4d0c      	ldr	r5, [pc, #48]	; (8002fac <__libc_init_array+0x38>)
 8002f7a:	4c0d      	ldr	r4, [pc, #52]	; (8002fb0 <__libc_init_array+0x3c>)
 8002f7c:	1b64      	subs	r4, r4, r5
 8002f7e:	10a4      	asrs	r4, r4, #2
 8002f80:	42a6      	cmp	r6, r4
 8002f82:	d109      	bne.n	8002f98 <__libc_init_array+0x24>
 8002f84:	2600      	movs	r6, #0
 8002f86:	f000 f8e3 	bl	8003150 <_init>
 8002f8a:	4d0a      	ldr	r5, [pc, #40]	; (8002fb4 <__libc_init_array+0x40>)
 8002f8c:	4c0a      	ldr	r4, [pc, #40]	; (8002fb8 <__libc_init_array+0x44>)
 8002f8e:	1b64      	subs	r4, r4, r5
 8002f90:	10a4      	asrs	r4, r4, #2
 8002f92:	42a6      	cmp	r6, r4
 8002f94:	d105      	bne.n	8002fa2 <__libc_init_array+0x2e>
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
 8002f98:	00b3      	lsls	r3, r6, #2
 8002f9a:	58eb      	ldr	r3, [r5, r3]
 8002f9c:	4798      	blx	r3
 8002f9e:	3601      	adds	r6, #1
 8002fa0:	e7ee      	b.n	8002f80 <__libc_init_array+0xc>
 8002fa2:	00b3      	lsls	r3, r6, #2
 8002fa4:	58eb      	ldr	r3, [r5, r3]
 8002fa6:	4798      	blx	r3
 8002fa8:	3601      	adds	r6, #1
 8002faa:	e7f2      	b.n	8002f92 <__libc_init_array+0x1e>
 8002fac:	080034ec 	.word	0x080034ec
 8002fb0:	080034ec 	.word	0x080034ec
 8002fb4:	080034ec 	.word	0x080034ec
 8002fb8:	080034f0 	.word	0x080034f0

08002fbc <memcpy>:
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	b510      	push	{r4, lr}
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d100      	bne.n	8002fc6 <memcpy+0xa>
 8002fc4:	bd10      	pop	{r4, pc}
 8002fc6:	5ccc      	ldrb	r4, [r1, r3]
 8002fc8:	54c4      	strb	r4, [r0, r3]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	e7f8      	b.n	8002fc0 <memcpy+0x4>

08002fce <memset>:
 8002fce:	0003      	movs	r3, r0
 8002fd0:	1812      	adds	r2, r2, r0
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d100      	bne.n	8002fd8 <memset+0xa>
 8002fd6:	4770      	bx	lr
 8002fd8:	7019      	strb	r1, [r3, #0]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	e7f9      	b.n	8002fd2 <memset+0x4>
	...

08002fe0 <_strtol_l.isra.0>:
 8002fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fe2:	001f      	movs	r7, r3
 8002fe4:	000e      	movs	r6, r1
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	9005      	str	r0, [sp, #20]
 8002fea:	9101      	str	r1, [sp, #4]
 8002fec:	9202      	str	r2, [sp, #8]
 8002fee:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002ff0:	7834      	ldrb	r4, [r6, #0]
 8002ff2:	f000 f88b 	bl	800310c <__locale_ctype_ptr_l>
 8002ff6:	2208      	movs	r2, #8
 8002ff8:	1900      	adds	r0, r0, r4
 8002ffa:	7843      	ldrb	r3, [r0, #1]
 8002ffc:	1c75      	adds	r5, r6, #1
 8002ffe:	4013      	ands	r3, r2
 8003000:	d136      	bne.n	8003070 <_strtol_l.isra.0+0x90>
 8003002:	2c2d      	cmp	r4, #45	; 0x2d
 8003004:	d136      	bne.n	8003074 <_strtol_l.isra.0+0x94>
 8003006:	1cb5      	adds	r5, r6, #2
 8003008:	7874      	ldrb	r4, [r6, #1]
 800300a:	2601      	movs	r6, #1
 800300c:	2f00      	cmp	r7, #0
 800300e:	d062      	beq.n	80030d6 <_strtol_l.isra.0+0xf6>
 8003010:	2f10      	cmp	r7, #16
 8003012:	d109      	bne.n	8003028 <_strtol_l.isra.0+0x48>
 8003014:	2c30      	cmp	r4, #48	; 0x30
 8003016:	d107      	bne.n	8003028 <_strtol_l.isra.0+0x48>
 8003018:	2220      	movs	r2, #32
 800301a:	782b      	ldrb	r3, [r5, #0]
 800301c:	4393      	bics	r3, r2
 800301e:	2b58      	cmp	r3, #88	; 0x58
 8003020:	d154      	bne.n	80030cc <_strtol_l.isra.0+0xec>
 8003022:	2710      	movs	r7, #16
 8003024:	786c      	ldrb	r4, [r5, #1]
 8003026:	3502      	adds	r5, #2
 8003028:	4b2d      	ldr	r3, [pc, #180]	; (80030e0 <_strtol_l.isra.0+0x100>)
 800302a:	0039      	movs	r1, r7
 800302c:	18f3      	adds	r3, r6, r3
 800302e:	0018      	movs	r0, r3
 8003030:	9303      	str	r3, [sp, #12]
 8003032:	f7fd f8f7 	bl	8000224 <__aeabi_uidivmod>
 8003036:	9104      	str	r1, [sp, #16]
 8003038:	2101      	movs	r1, #1
 800303a:	2300      	movs	r3, #0
 800303c:	4249      	negs	r1, r1
 800303e:	0002      	movs	r2, r0
 8003040:	468c      	mov	ip, r1
 8003042:	0018      	movs	r0, r3
 8003044:	0021      	movs	r1, r4
 8003046:	3930      	subs	r1, #48	; 0x30
 8003048:	2909      	cmp	r1, #9
 800304a:	d81a      	bhi.n	8003082 <_strtol_l.isra.0+0xa2>
 800304c:	000c      	movs	r4, r1
 800304e:	42a7      	cmp	r7, r4
 8003050:	dd23      	ble.n	800309a <_strtol_l.isra.0+0xba>
 8003052:	1c59      	adds	r1, r3, #1
 8003054:	d009      	beq.n	800306a <_strtol_l.isra.0+0x8a>
 8003056:	4663      	mov	r3, ip
 8003058:	4282      	cmp	r2, r0
 800305a:	d306      	bcc.n	800306a <_strtol_l.isra.0+0x8a>
 800305c:	d102      	bne.n	8003064 <_strtol_l.isra.0+0x84>
 800305e:	9904      	ldr	r1, [sp, #16]
 8003060:	42a1      	cmp	r1, r4
 8003062:	db02      	blt.n	800306a <_strtol_l.isra.0+0x8a>
 8003064:	2301      	movs	r3, #1
 8003066:	4378      	muls	r0, r7
 8003068:	1820      	adds	r0, r4, r0
 800306a:	782c      	ldrb	r4, [r5, #0]
 800306c:	3501      	adds	r5, #1
 800306e:	e7e9      	b.n	8003044 <_strtol_l.isra.0+0x64>
 8003070:	002e      	movs	r6, r5
 8003072:	e7bc      	b.n	8002fee <_strtol_l.isra.0+0xe>
 8003074:	2c2b      	cmp	r4, #43	; 0x2b
 8003076:	d001      	beq.n	800307c <_strtol_l.isra.0+0x9c>
 8003078:	001e      	movs	r6, r3
 800307a:	e7c7      	b.n	800300c <_strtol_l.isra.0+0x2c>
 800307c:	1cb5      	adds	r5, r6, #2
 800307e:	7874      	ldrb	r4, [r6, #1]
 8003080:	e7fa      	b.n	8003078 <_strtol_l.isra.0+0x98>
 8003082:	0021      	movs	r1, r4
 8003084:	3941      	subs	r1, #65	; 0x41
 8003086:	2919      	cmp	r1, #25
 8003088:	d801      	bhi.n	800308e <_strtol_l.isra.0+0xae>
 800308a:	3c37      	subs	r4, #55	; 0x37
 800308c:	e7df      	b.n	800304e <_strtol_l.isra.0+0x6e>
 800308e:	0021      	movs	r1, r4
 8003090:	3961      	subs	r1, #97	; 0x61
 8003092:	2919      	cmp	r1, #25
 8003094:	d801      	bhi.n	800309a <_strtol_l.isra.0+0xba>
 8003096:	3c57      	subs	r4, #87	; 0x57
 8003098:	e7d9      	b.n	800304e <_strtol_l.isra.0+0x6e>
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	d108      	bne.n	80030b0 <_strtol_l.isra.0+0xd0>
 800309e:	9a05      	ldr	r2, [sp, #20]
 80030a0:	3323      	adds	r3, #35	; 0x23
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	9b02      	ldr	r3, [sp, #8]
 80030a6:	9803      	ldr	r0, [sp, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d109      	bne.n	80030c0 <_strtol_l.isra.0+0xe0>
 80030ac:	b007      	add	sp, #28
 80030ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030b0:	2e00      	cmp	r6, #0
 80030b2:	d000      	beq.n	80030b6 <_strtol_l.isra.0+0xd6>
 80030b4:	4240      	negs	r0, r0
 80030b6:	9a02      	ldr	r2, [sp, #8]
 80030b8:	2a00      	cmp	r2, #0
 80030ba:	d0f7      	beq.n	80030ac <_strtol_l.isra.0+0xcc>
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <_strtol_l.isra.0+0xe4>
 80030c0:	1e6b      	subs	r3, r5, #1
 80030c2:	9301      	str	r3, [sp, #4]
 80030c4:	9b02      	ldr	r3, [sp, #8]
 80030c6:	9a01      	ldr	r2, [sp, #4]
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e7ef      	b.n	80030ac <_strtol_l.isra.0+0xcc>
 80030cc:	2430      	movs	r4, #48	; 0x30
 80030ce:	2f00      	cmp	r7, #0
 80030d0:	d1aa      	bne.n	8003028 <_strtol_l.isra.0+0x48>
 80030d2:	2708      	movs	r7, #8
 80030d4:	e7a8      	b.n	8003028 <_strtol_l.isra.0+0x48>
 80030d6:	2c30      	cmp	r4, #48	; 0x30
 80030d8:	d09e      	beq.n	8003018 <_strtol_l.isra.0+0x38>
 80030da:	270a      	movs	r7, #10
 80030dc:	e7a4      	b.n	8003028 <_strtol_l.isra.0+0x48>
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	7fffffff 	.word	0x7fffffff

080030e4 <strtol>:
 80030e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030e6:	0013      	movs	r3, r2
 80030e8:	4a06      	ldr	r2, [pc, #24]	; (8003104 <strtol+0x20>)
 80030ea:	0005      	movs	r5, r0
 80030ec:	6810      	ldr	r0, [r2, #0]
 80030ee:	6a04      	ldr	r4, [r0, #32]
 80030f0:	2c00      	cmp	r4, #0
 80030f2:	d100      	bne.n	80030f6 <strtol+0x12>
 80030f4:	4c04      	ldr	r4, [pc, #16]	; (8003108 <strtol+0x24>)
 80030f6:	000a      	movs	r2, r1
 80030f8:	9400      	str	r4, [sp, #0]
 80030fa:	0029      	movs	r1, r5
 80030fc:	f7ff ff70 	bl	8002fe0 <_strtol_l.isra.0>
 8003100:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	2000000c 	.word	0x2000000c
 8003108:	20000070 	.word	0x20000070

0800310c <__locale_ctype_ptr_l>:
 800310c:	30ec      	adds	r0, #236	; 0xec
 800310e:	6800      	ldr	r0, [r0, #0]
 8003110:	4770      	bx	lr

08003112 <__ascii_mbtowc>:
 8003112:	b082      	sub	sp, #8
 8003114:	2900      	cmp	r1, #0
 8003116:	d100      	bne.n	800311a <__ascii_mbtowc+0x8>
 8003118:	a901      	add	r1, sp, #4
 800311a:	1e10      	subs	r0, r2, #0
 800311c:	d006      	beq.n	800312c <__ascii_mbtowc+0x1a>
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <__ascii_mbtowc+0x1e>
 8003122:	7813      	ldrb	r3, [r2, #0]
 8003124:	600b      	str	r3, [r1, #0]
 8003126:	7810      	ldrb	r0, [r2, #0]
 8003128:	1e43      	subs	r3, r0, #1
 800312a:	4198      	sbcs	r0, r3
 800312c:	b002      	add	sp, #8
 800312e:	4770      	bx	lr
 8003130:	2002      	movs	r0, #2
 8003132:	4240      	negs	r0, r0
 8003134:	e7fa      	b.n	800312c <__ascii_mbtowc+0x1a>

08003136 <__ascii_wctomb>:
 8003136:	1e0b      	subs	r3, r1, #0
 8003138:	d004      	beq.n	8003144 <__ascii_wctomb+0xe>
 800313a:	2aff      	cmp	r2, #255	; 0xff
 800313c:	d904      	bls.n	8003148 <__ascii_wctomb+0x12>
 800313e:	238a      	movs	r3, #138	; 0x8a
 8003140:	6003      	str	r3, [r0, #0]
 8003142:	3b8b      	subs	r3, #139	; 0x8b
 8003144:	0018      	movs	r0, r3
 8003146:	4770      	bx	lr
 8003148:	700a      	strb	r2, [r1, #0]
 800314a:	2301      	movs	r3, #1
 800314c:	e7fa      	b.n	8003144 <__ascii_wctomb+0xe>
	...

08003150 <_init>:
 8003150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003156:	bc08      	pop	{r3}
 8003158:	469e      	mov	lr, r3
 800315a:	4770      	bx	lr

0800315c <_fini>:
 800315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003162:	bc08      	pop	{r3}
 8003164:	469e      	mov	lr, r3
 8003166:	4770      	bx	lr

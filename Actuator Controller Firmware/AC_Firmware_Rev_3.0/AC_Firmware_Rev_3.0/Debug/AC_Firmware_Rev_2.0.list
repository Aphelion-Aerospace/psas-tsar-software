
AC_Firmware_Rev_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  0800645c  0800645c  0001645c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bac  08006bac  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08006bac  08006bac  00016bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bb4  08006bb4  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bb4  08006bb4  00016bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bb8  08006bb8  00016bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08006bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000014c  08006d08  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08006d08  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021ef9  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bd4  00000000  00000000  00042075  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b38  00000000  00000000  00045c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000950  00000000  00000000  00046788  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a1c4  00000000  00000000  000470d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012051  00000000  00000000  0007129c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9c3a  00000000  00000000  000832ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016cf27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b14  00000000  00000000  0016cfa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006444 	.word	0x08006444

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08006444 	.word	0x08006444

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <AutomaticShutdown>:
#include "utilities.h"

//Automatic shutdown : Purge and go back to SAFETY

uint32_t AutomaticShutdown(struct StateVars *ctrl)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
	ctrl->valveConfiguration = StateConfiguration();
 800058c:	f002 f938 	bl	8002800 <StateConfiguration>
 8000590:	4602      	mov	r2, r0
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	62da      	str	r2, [r3, #44]	; 0x2c

	/*FUEL PURGE N2  - LOX PURGE N2*/
	ctrl->valveTarget  = ((uint16_t)SOV3 	\
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f44f 7282 	mov.w	r2, #260	; 0x104
 800059c:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV9);


	uint32_t TIMEOUT = 3000; // 3 second time out
 800059e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005a2:	613b      	str	r3, [r7, #16]
	
    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 f8ec 	bl	8002788 <VerifyState>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d054      	beq.n	8000660 <AutomaticShutdown+0xe0>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 f8e3 	bl	8002788 <VerifyState>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d04b      	beq.n	8000660 <AutomaticShutdown+0xe0>
    {
    	if((ctrl->currentState & AUTOMATIC_SHUTDOWN) == AUTOMATIC_SHUTDOWN){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80005ce:	f003 030c 	and.w	r3, r3, #12
 80005d2:	2b0c      	cmp	r3, #12
 80005d4:	d137      	bne.n	8000646 <AutomaticShutdown+0xc6>


    		StateStatus(ctrl);
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f002 f88c 	bl	80026f4 <StateStatus>

    		uint32_t now = HAL_GetTick();
 80005dc:	f003 f948 	bl	8003870 <HAL_GetTick>
 80005e0:	60f8      	str	r0, [r7, #12]
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d003      	beq.n	80005fa <AutomaticShutdown+0x7a>
    	    {
    			success = StateInitialize(ctrl);
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f002 fa56 	bl	8002aa4 <StateInitialize>
 80005f8:	6178      	str	r0, [r7, #20]
    	    }


    		success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	429a      	cmp	r2, r3
 8000604:	bf0c      	ite	eq
 8000606:	2301      	moveq	r3, #1
 8000608:	2300      	movne	r3, #0
 800060a:	b2db      	uxtb	r3, r3
 800060c:	617b      	str	r3, [r7, #20]

    		 if(now - ctrl->timeStarted > TIMEOUT && success)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	429a      	cmp	r2, r3
 800061a:	d206      	bcs.n	800062a <AutomaticShutdown+0xaa>
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d003      	beq.n	800062a <AutomaticShutdown+0xaa>
    		   {
    		       ctrl->currentState= SAFETY;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2205      	movs	r2, #5
 8000626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		   }

    		 // Increment state counter
			ctrl->stateCounter++;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	1c5a      	adds	r2, r3, #1
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800063c:	d11f      	bne.n	800067e <AutomaticShutdown+0xfe>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & AUTOMATIC_SHUTDOWN) == AUTOMATIC_SHUTDOWN){
 8000644:	e01b      	b.n	800067e <AutomaticShutdown+0xfe>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, AUTOMATIC_SHUTDOWN, ctrl->currentState);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800064c:	461a      	mov	r2, r3
 800064e:	210c      	movs	r1, #12
 8000650:	480e      	ldr	r0, [pc, #56]	; (800068c <AutomaticShutdown+0x10c>)
 8000652:	f001 facb 	bl	8001bec <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2, Tx_Buffer);
 8000656:	490d      	ldr	r1, [pc, #52]	; (800068c <AutomaticShutdown+0x10c>)
 8000658:	480d      	ldr	r0, [pc, #52]	; (8000690 <AutomaticShutdown+0x110>)
 800065a:	f000 fc27 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & AUTOMATIC_SHUTDOWN) == AUTOMATIC_SHUTDOWN){
 800065e:	e00e      	b.n	800067e <AutomaticShutdown+0xfe>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800066c:	461a      	mov	r2, r3
 800066e:	4807      	ldr	r0, [pc, #28]	; (800068c <AutomaticShutdown+0x10c>)
 8000670:	f001 fb36 	bl	8001ce0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8000674:	4905      	ldr	r1, [pc, #20]	; (800068c <AutomaticShutdown+0x10c>)
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <AutomaticShutdown+0x110>)
 8000678:	f000 fc18 	bl	8000eac <UART_SendMessage>
 800067c:	e000      	b.n	8000680 <AutomaticShutdown+0x100>
    	if((ctrl->currentState & AUTOMATIC_SHUTDOWN) == AUTOMATIC_SHUTDOWN){
 800067e:	bf00      	nop
    }
	return success;
 8000680:	697b      	ldr	r3, [r7, #20]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000188 	.word	0x20000188
 8000690:	2000035c 	.word	0x2000035c

08000694 <Firing>:
#include <firing.h>
#include "messages.h"
#include "utilities.h"

uint32_t Firing(struct StateVars *ctrl)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
	ctrl->valveConfiguration = StateConfiguration();
 80006a0:	f002 f8ae 	bl	8002800 <StateConfiguration>
 80006a4:	4602      	mov	r2, r0
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV1 	\
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2233      	movs	r2, #51	; 0x33
 80006ae:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV2 	\
			 |(uint16_t)SOV5 	\
			 |(uint16_t)SOV6);

	uint32_t TIMEOUT = 3000;// 3 second time out
 80006b0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80006b4:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 f863 	bl	8002788 <VerifyState>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d05f      	beq.n	8000788 <Firing+0xf4>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 f85a 	bl	8002788 <VerifyState>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d056      	beq.n	8000788 <Firing+0xf4>
    {
    	if((ctrl->currentState & FIRING) == FIRING){
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80006e0:	f003 0309 	and.w	r3, r3, #9
 80006e4:	2b09      	cmp	r3, #9
 80006e6:	d142      	bne.n	800076e <Firing+0xda>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  1  |   1  |   0  |   0  |   1  |   1  |   0  |   0  |  0  |  0

    		StateStatus(ctrl);
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f002 f803 	bl	80026f4 <StateStatus>
    		nominal = NominalValueCheck(ctrl, Rx_Buffer);
 80006ee:	4931      	ldr	r1, [pc, #196]	; (80007b4 <Firing+0x120>)
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f001 fa6d 	bl	8001bd0 <NominalValueCheck>
 80006f6:	4602      	mov	r2, r0
 80006f8:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <Firing+0x124>)
 80006fa:	601a      	str	r2, [r3, #0]

    		uint32_t now = HAL_GetTick();
 80006fc:	f003 f8b8 	bl	8003870 <HAL_GetTick>
 8000700:	60f8      	str	r0, [r7, #12]
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800070e:	429a      	cmp	r2, r3
 8000710:	d003      	beq.n	800071a <Firing+0x86>
    	    {
    			success = StateInitialize(ctrl);
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f002 f9c6 	bl	8002aa4 <StateInitialize>
 8000718:	6178      	str	r0, [r7, #20]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	429a      	cmp	r2, r3
 8000724:	bf0c      	ite	eq
 8000726:	2301      	moveq	r3, #1
 8000728:	2300      	movne	r3, #0
 800072a:	b2db      	uxtb	r3, r3
 800072c:	617b      	str	r3, [r7, #20]


    		if(now - ctrl->timeStarted > TIMEOUT && success && nominal)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	429a      	cmp	r2, r3
 800073a:	d20a      	bcs.n	8000752 <Firing+0xbe>
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d007      	beq.n	8000752 <Firing+0xbe>
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <Firing+0x124>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d003      	beq.n	8000752 <Firing+0xbe>
    		{
        		ctrl->currentState= PURGE;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	220a      	movs	r2, #10
 800074e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}



    		// Increment state counter
    		ctrl->stateCounter++;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	1c5a      	adds	r2, r3, #1
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	609a      	str	r2, [r3, #8]
    		if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000764:	d11f      	bne.n	80007a6 <Firing+0x112>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & FIRING) == FIRING){
 800076c:	e01b      	b.n	80007a6 <Firing+0x112>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, FIRING, ctrl->currentState);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000774:	461a      	mov	r2, r3
 8000776:	2109      	movs	r1, #9
 8000778:	4810      	ldr	r0, [pc, #64]	; (80007bc <Firing+0x128>)
 800077a:	f001 fa37 	bl	8001bec <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 800077e:	490f      	ldr	r1, [pc, #60]	; (80007bc <Firing+0x128>)
 8000780:	480f      	ldr	r0, [pc, #60]	; (80007c0 <Firing+0x12c>)
 8000782:	f000 fb93 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & FIRING) == FIRING){
 8000786:	e00e      	b.n	80007a6 <Firing+0x112>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000794:	461a      	mov	r2, r3
 8000796:	4809      	ldr	r0, [pc, #36]	; (80007bc <Firing+0x128>)
 8000798:	f001 faa2 	bl	8001ce0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 800079c:	4907      	ldr	r1, [pc, #28]	; (80007bc <Firing+0x128>)
 800079e:	4808      	ldr	r0, [pc, #32]	; (80007c0 <Firing+0x12c>)
 80007a0:	f000 fb84 	bl	8000eac <UART_SendMessage>
 80007a4:	e000      	b.n	80007a8 <Firing+0x114>
    	if((ctrl->currentState & FIRING) == FIRING){
 80007a6:	bf00      	nop
    }
	return success;
 80007a8:	697b      	ldr	r3, [r7, #20]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200002f4 	.word	0x200002f4
 80007b8:	2000017c 	.word	0x2000017c
 80007bc:	20000188 	.word	0x20000188
 80007c0:	2000035c 	.word	0x2000035c

080007c4 <Ignition>:
#include <ignition.h>
#include "messages.h"
#include "utilities.h"

uint32_t Ignition(struct StateVars *ctrl)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
	ctrl->valveConfiguration = StateConfiguration();
 80007d0:	f002 f816 	bl	8002800 <StateConfiguration>
 80007d4:	4602      	mov	r2, r0
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV1 	\
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f240 2203 	movw	r2, #515	; 0x203
 80007e0:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV2 |(uint16_t)IG1);

	uint32_t TIMEOUT = 5000;//5 second time out
 80007e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80007e6:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 ffca 	bl	8002788 <VerifyState>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d05f      	beq.n	80008ba <Ignition+0xf6>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000800:	4618      	mov	r0, r3
 8000802:	f001 ffc1 	bl	8002788 <VerifyState>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d056      	beq.n	80008ba <Ignition+0xf6>
    {
    	if((ctrl->currentState & IGNITION) == IGNITION){
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	2b07      	cmp	r3, #7
 8000818:	d142      	bne.n	80008a0 <Ignition+0xdc>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  1  |   1  |   0  |   0  |   0  |   0  |   0  |   0  |  0  |  1

    		StateStatus(ctrl);
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f001 ff6a 	bl	80026f4 <StateStatus>
    		nominal = NominalValueCheck(ctrl, Rx_Buffer);
 8000820:	4930      	ldr	r1, [pc, #192]	; (80008e4 <Ignition+0x120>)
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f001 f9d4 	bl	8001bd0 <NominalValueCheck>
 8000828:	4602      	mov	r2, r0
 800082a:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <Ignition+0x124>)
 800082c:	601a      	str	r2, [r3, #0]

    		uint32_t now = HAL_GetTick();//should return the number of milliseconds elapsed since startup
 800082e:	f003 f81f 	bl	8003870 <HAL_GetTick>
 8000832:	60f8      	str	r0, [r7, #12]
    	    // If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000840:	429a      	cmp	r2, r3
 8000842:	d003      	beq.n	800084c <Ignition+0x88>
    	    {
    			success = StateInitialize(ctrl);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f002 f92d 	bl	8002aa4 <StateInitialize>
 800084a:	6178      	str	r0, [r7, #20]
    	    }


			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	429a      	cmp	r2, r3
 8000856:	bf0c      	ite	eq
 8000858:	2301      	moveq	r3, #1
 800085a:	2300      	movne	r3, #0
 800085c:	b2db      	uxtb	r3, r3
 800085e:	617b      	str	r3, [r7, #20]

    		if((now - ctrl->timeStarted >= TIMEOUT) && success && nominal)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	429a      	cmp	r2, r3
 800086c:	d80a      	bhi.n	8000884 <Ignition+0xc0>
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d007      	beq.n	8000884 <Ignition+0xc0>
 8000874:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <Ignition+0x124>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d003      	beq.n	8000884 <Ignition+0xc0>
    		{
        		ctrl->currentState= OXIDIZER_START;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2208      	movs	r2, #8
 8000880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}

    		// Increment state counter
			ctrl->stateCounter++;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	1c5a      	adds	r2, r3, #1
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000896:	d11f      	bne.n	80008d8 <Ignition+0x114>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & IGNITION) == IGNITION){
 800089e:	e01b      	b.n	80008d8 <Ignition+0x114>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, IGNITION, ctrl->currentState);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008a6:	461a      	mov	r2, r3
 80008a8:	2107      	movs	r1, #7
 80008aa:	4810      	ldr	r0, [pc, #64]	; (80008ec <Ignition+0x128>)
 80008ac:	f001 f99e 	bl	8001bec <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 80008b0:	490e      	ldr	r1, [pc, #56]	; (80008ec <Ignition+0x128>)
 80008b2:	480f      	ldr	r0, [pc, #60]	; (80008f0 <Ignition+0x12c>)
 80008b4:	f000 fafa 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & IGNITION) == IGNITION){
 80008b8:	e00e      	b.n	80008d8 <Ignition+0x114>
    	}

    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80008c6:	461a      	mov	r2, r3
 80008c8:	4808      	ldr	r0, [pc, #32]	; (80008ec <Ignition+0x128>)
 80008ca:	f001 fa09 	bl	8001ce0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 80008ce:	4907      	ldr	r1, [pc, #28]	; (80008ec <Ignition+0x128>)
 80008d0:	4807      	ldr	r0, [pc, #28]	; (80008f0 <Ignition+0x12c>)
 80008d2:	f000 faeb 	bl	8000eac <UART_SendMessage>
 80008d6:	e000      	b.n	80008da <Ignition+0x116>
    	if((ctrl->currentState & IGNITION) == IGNITION){
 80008d8:	bf00      	nop
    }
	return success;
 80008da:	697b      	ldr	r3, [r7, #20]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200002f4 	.word	0x200002f4
 80008e8:	2000017c 	.word	0x2000017c
 80008ec:	20000188 	.word	0x20000188
 80008f0:	2000035c 	.word	0x2000035c

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b096      	sub	sp, #88	; 0x58
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	2244      	movs	r2, #68	; 0x44
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f005 f978 	bl	8005bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	463b      	mov	r3, r7
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000916:	2302      	movs	r3, #2
 8000918:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800091a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800091e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000920:	2310      	movs	r3, #16
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000924:	2302      	movs	r3, #2
 8000926:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000928:	2302      	movs	r3, #2
 800092a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800092c:	2301      	movs	r3, #1
 800092e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000930:	230a      	movs	r3, #10
 8000932:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000934:	2307      	movs	r3, #7
 8000936:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800093c:	2302      	movs	r3, #2
 800093e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4618      	mov	r0, r3
 8000946:	f003 fb73 	bl	8004030 <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000950:	f000 f8fc 	bl	8000b4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000958:	2303      	movs	r3, #3
 800095a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	2104      	movs	r1, #4
 800096c:	4618      	mov	r0, r3
 800096e:	f003 ff45 	bl	80047fc <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000978:	f000 f8e8 	bl	8000b4c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800097c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000980:	f003 fb00 	bl	8003f84 <HAL_PWREx_ControlVoltageScaling>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800098a:	f000 f8df 	bl	8000b4c <Error_Handler>
  }
}
 800098e:	bf00      	nop
 8000990:	3758      	adds	r7, #88	; 0x58
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <MX_USART2_UART_Init>:
    * @brief USART1 Initialization Function
    * @param None
    * @retval None
    */
void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 800099e:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <MX_USART2_UART_Init+0x5c>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009dc:	f004 f912 	bl	8004c04 <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009e6:	f000 f8b1 	bl	8000b4c <Error_Handler>
  }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

  }
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000035c 	.word	0x2000035c
 80009f4:	40004400 	.word	0x40004400

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	4b4b      	ldr	r3, [pc, #300]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	4a4a      	ldr	r2, [pc, #296]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1a:	4b48      	ldr	r3, [pc, #288]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a26:	4b45      	ldr	r3, [pc, #276]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a44      	ldr	r2, [pc, #272]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b42      	ldr	r3, [pc, #264]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b3f      	ldr	r3, [pc, #252]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	4a3e      	ldr	r2, [pc, #248]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4a:	4b3c      	ldr	r3, [pc, #240]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a38      	ldr	r2, [pc, #224]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b36      	ldr	r3, [pc, #216]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LOX_MAIN_Pin|FUEL_MAIN_Pin|IGNITION1_Pin
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 51f9 	mov.w	r1, #7968	; 0x1f20
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f003 fa3a 	bl	8003ef0 <HAL_GPIO_WritePin>
                          |FUEL_PRESSURE_Pin|LOX_PRESSURE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin|LOX_PURGE_Pin|LOX_FILL_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 4124 	mov.w	r1, #41984	; 0xa400
 8000a82:	482f      	ldr	r0, [pc, #188]	; (8000b40 <MX_GPIO_Init+0x148>)
 8000a84:	f003 fa34 	bl	8003ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin|FUEL_PURGE_N2_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	21c0      	movs	r1, #192	; 0xc0
 8000a8c:	482d      	ldr	r0, [pc, #180]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000a8e:	f003 fa2f 	bl	8003ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <MX_GPIO_Init+0x150>)
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4827      	ldr	r0, [pc, #156]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000aa8:	f003 f862 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aac:	2320      	movs	r3, #32
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac6:	f003 f853 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOX_VENT_Pin LOX_PURGE_Pin LOX_FILL_Pin */
  GPIO_InitStruct.Pin = LOX_VENT_Pin|LOX_PURGE_Pin|LOX_FILL_Pin;
 8000aca:	f44f 4324 	mov.w	r3, #41984	; 0xa400
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4817      	ldr	r0, [pc, #92]	; (8000b40 <MX_GPIO_Init+0x148>)
 8000ae4:	f003 f844 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FUEL_VENT_Pin FUEL_PURGE_N2_Pin */
  GPIO_InitStruct.Pin = FUEL_VENT_Pin|FUEL_PURGE_N2_Pin;
 8000ae8:	23c0      	movs	r3, #192	; 0xc0
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4811      	ldr	r0, [pc, #68]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000b00:	f003 f836 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOX_MAIN_Pin FUEL_MAIN_Pin IGNITION1_Pin FUEL_PRESSURE_Pin
                           LOX_PRESSURE_Pin */
  GPIO_InitStruct.Pin = LOX_MAIN_Pin|FUEL_MAIN_Pin|IGNITION1_Pin|FUEL_PRESSURE_Pin
 8000b04:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000b08:	617b      	str	r3, [r7, #20]
                          |LOX_PRESSURE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f003 f826 	bl	8003b70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	2028      	movs	r0, #40	; 0x28
 8000b2a:	f002 ffaa 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b2e:	2028      	movs	r0, #40	; 0x28
 8000b30:	f002 ffc3 	bl	8003aba <HAL_NVIC_EnableIRQ>

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	48000400 	.word	0x48000400
 8000b44:	48000800 	.word	0x48000800
 8000b48:	10210000 	.word	0x10210000

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <Error_Handler+0x6>

08000b54 <LoxChill>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include <lox_chill.h>
#include "messages.h"

uint32_t LoxChill(struct StateVars *ctrl)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 8000b60:	f001 fe4e 	bl	8002800 <StateConfiguration>
 8000b64:	4602      	mov	r2, r0
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV4 	\
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	22a8      	movs	r2, #168	; 0xa8
 8000b6e:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV6 	\
			 |(uint16_t)SOV8);

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 fe06 	bl	8002788 <VerifyState>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d04a      	beq.n	8000c18 <LoxChill+0xc4>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 fdfd 	bl	8002788 <VerifyState>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d041      	beq.n	8000c18 <LoxChill+0xc4>
    {
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d02d      	beq.n	8000bfe <LoxChill+0xaa>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8
    		//|  0  |   0  |   0  |   1  |   0  |   1  |   0  |   1  |

    		StateStatus(ctrl);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f001 fda6 	bl	80026f4 <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d003      	beq.n	8000bc0 <LoxChill+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f001 ff73 	bl	8002aa4 <StateInitialize>
 8000bbe:	60f8      	str	r0, [r7, #12]
    	    }

    		//check if command changed
    		ProcessCommands(ctrl);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f000 fb17 	bl	80011f4 <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2301      	moveq	r3, #1
 8000bd4:	2300      	movne	r3, #0
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	60fb      	str	r3, [r7, #12]

			NominalValueCheck(ctrl, Rx_Buffer);
 8000bda:	491a      	ldr	r1, [pc, #104]	; (8000c44 <LoxChill+0xf0>)
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 fff7 	bl	8001bd0 <NominalValueCheck>

    		// Increment state counter
			ctrl->stateCounter++;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf4:	d11f      	bne.n	8000c36 <LoxChill+0xe2>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000bfc:	e01b      	b.n	8000c36 <LoxChill+0xe2>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, LOX_CHILL, ctrl->currentState);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c04:	461a      	mov	r2, r3
 8000c06:	2104      	movs	r1, #4
 8000c08:	480f      	ldr	r0, [pc, #60]	; (8000c48 <LoxChill+0xf4>)
 8000c0a:	f000 ffef 	bl	8001bec <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8000c0e:	490e      	ldr	r1, [pc, #56]	; (8000c48 <LoxChill+0xf4>)
 8000c10:	480e      	ldr	r0, [pc, #56]	; (8000c4c <LoxChill+0xf8>)
 8000c12:	f000 f94b 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000c16:	e00e      	b.n	8000c36 <LoxChill+0xe2>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c24:	461a      	mov	r2, r3
 8000c26:	4808      	ldr	r0, [pc, #32]	; (8000c48 <LoxChill+0xf4>)
 8000c28:	f001 f85a 	bl	8001ce0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8000c2c:	4906      	ldr	r1, [pc, #24]	; (8000c48 <LoxChill+0xf4>)
 8000c2e:	4807      	ldr	r0, [pc, #28]	; (8000c4c <LoxChill+0xf8>)
 8000c30:	f000 f93c 	bl	8000eac <UART_SendMessage>
 8000c34:	e000      	b.n	8000c38 <LoxChill+0xe4>
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000c36:	bf00      	nop
    }
	return success;
 8000c38:	68fb      	ldr	r3, [r7, #12]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200002f4 	.word	0x200002f4
 8000c48:	20000188 	.word	0x20000188
 8000c4c:	2000035c 	.word	0x2000035c

08000c50 <LoxFill>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include <lox_fill.h>
#include <messages.h>

uint32_t LoxFill(struct StateVars *ctrl){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 8000c5c:	f001 fdd0 	bl	8002800 <StateConfiguration>
 8000c60:	4602      	mov	r2, r0
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV4 	\
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	22c8      	movs	r2, #200	; 0xc8
 8000c6a:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV7 	\
			 |(uint16_t)SOV8);

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 fd88 	bl	8002788 <VerifyState>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d04a      	beq.n	8000d14 <LoxFill+0xc4>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c84:	4618      	mov	r0, r3
 8000c86:	f001 fd7f 	bl	8002788 <VerifyState>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d041      	beq.n	8000d14 <LoxFill+0xc4>
    {
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c96:	f003 0303 	and.w	r3, r3, #3
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d12d      	bne.n	8000cfa <LoxFill+0xaa>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  0  |   0  |   0  |   1  |   0  |   0  |   1  |   1  |  0  |  0

    		StateStatus(ctrl);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f001 fd28 	bl	80026f4 <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d003      	beq.n	8000cbc <LoxFill+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f001 fef5 	bl	8002aa4 <StateInitialize>
 8000cba:	60f8      	str	r0, [r7, #12]
    	    }


    		ProcessCommands(ctrl);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 fa99 	bl	80011f4 <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	bf0c      	ite	eq
 8000cce:	2301      	moveq	r3, #1
 8000cd0:	2300      	movne	r3, #0
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	60fb      	str	r3, [r7, #12]

			NominalValueCheck(ctrl, Rx_Buffer);
 8000cd6:	491a      	ldr	r1, [pc, #104]	; (8000d40 <LoxFill+0xf0>)
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f000 ff79 	bl	8001bd0 <NominalValueCheck>

    		// Increment state counter
			ctrl->stateCounter++;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf0:	d11f      	bne.n	8000d32 <LoxFill+0xe2>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000cf8:	e01b      	b.n	8000d32 <LoxFill+0xe2>

    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, LOX_FILL, ctrl->currentState);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d00:	461a      	mov	r2, r3
 8000d02:	2103      	movs	r1, #3
 8000d04:	480f      	ldr	r0, [pc, #60]	; (8000d44 <LoxFill+0xf4>)
 8000d06:	f000 ff71 	bl	8001bec <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8000d0a:	490e      	ldr	r1, [pc, #56]	; (8000d44 <LoxFill+0xf4>)
 8000d0c:	480e      	ldr	r0, [pc, #56]	; (8000d48 <LoxFill+0xf8>)
 8000d0e:	f000 f8cd 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000d12:	e00e      	b.n	8000d32 <LoxFill+0xe2>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d20:	461a      	mov	r2, r3
 8000d22:	4808      	ldr	r0, [pc, #32]	; (8000d44 <LoxFill+0xf4>)
 8000d24:	f000 ffdc 	bl	8001ce0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 8000d28:	4906      	ldr	r1, [pc, #24]	; (8000d44 <LoxFill+0xf4>)
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <LoxFill+0xf8>)
 8000d2c:	f000 f8be 	bl	8000eac <UART_SendMessage>
 8000d30:	e000      	b.n	8000d34 <LoxFill+0xe4>
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000d32:	bf00      	nop
    }
	return success;
 8000d34:	68fb      	ldr	r3, [r7, #12]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200002f4 	.word	0x200002f4
 8000d44:	20000188 	.word	0x20000188
 8000d48:	2000035c 	.word	0x2000035c

08000d4c <LoxPreFill>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include <lox_pre_fill.h>
#include <messages.h>

uint32_t LoxPreFill(struct StateVars *ctrl)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]

	ctrl->valveConfiguration = StateConfiguration();
 8000d58:	f001 fd52 	bl	8002800 <StateConfiguration>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV2 | (uint16_t)SOV4 |(uint16_t)SOV6);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	222a      	movs	r2, #42	; 0x2a
 8000d66:	631a      	str	r2, [r3, #48]	; 0x30


    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fd0a 	bl	8002788 <VerifyState>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d04d      	beq.n	8000e16 <LoxPreFill+0xca>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d80:	4618      	mov	r0, r3
 8000d82:	f001 fd01 	bl	8002788 <VerifyState>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d044      	beq.n	8000e16 <LoxPreFill+0xca>
    {
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d030      	beq.n	8000dfc <LoxPreFill+0xb0>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8   SOV9   IG1
    		// | 0	|   1  |   0  |   1  |   0  |   1  |   0  |   0  |   0  |  0
    		StateStatus(ctrl);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f001 fcaa 	bl	80026f4 <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d003      	beq.n	8000db8 <LoxPreFill+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f001 fe77 	bl	8002aa4 <StateInitialize>
 8000db6:	60f8      	str	r0, [r7, #12]
    	    }

    		StateStatus(ctrl);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f001 fc9b 	bl	80026f4 <StateStatus>

    		ProcessCommands(ctrl);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 fa18 	bl	80011f4 <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	bf0c      	ite	eq
 8000dd0:	2301      	moveq	r3, #1
 8000dd2:	2300      	movne	r3, #0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	60fb      	str	r3, [r7, #12]

			NominalValueCheck(ctrl, Rx_Buffer);
 8000dd8:	4919      	ldr	r1, [pc, #100]	; (8000e40 <LoxPreFill+0xf4>)
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f000 fef8 	bl	8001bd0 <NominalValueCheck>
    		// Increment state counter
    		ctrl->stateCounter++;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	609a      	str	r2, [r3, #8]
    		if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df2:	d11f      	bne.n	8000e34 <LoxPreFill+0xe8>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000dfa:	e01b      	b.n	8000e34 <LoxPreFill+0xe8>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, LOX_PRE_FILL, ctrl->currentState);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e02:	461a      	mov	r2, r3
 8000e04:	2102      	movs	r1, #2
 8000e06:	480f      	ldr	r0, [pc, #60]	; (8000e44 <LoxPreFill+0xf8>)
 8000e08:	f000 fef0 	bl	8001bec <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2, Tx_Buffer);
 8000e0c:	490d      	ldr	r1, [pc, #52]	; (8000e44 <LoxPreFill+0xf8>)
 8000e0e:	480e      	ldr	r0, [pc, #56]	; (8000e48 <LoxPreFill+0xfc>)
 8000e10:	f000 f84c 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000e14:	e00e      	b.n	8000e34 <LoxPreFill+0xe8>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e22:	461a      	mov	r2, r3
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <LoxPreFill+0xf8>)
 8000e26:	f000 ff5b 	bl	8001ce0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8000e2a:	4906      	ldr	r1, [pc, #24]	; (8000e44 <LoxPreFill+0xf8>)
 8000e2c:	4806      	ldr	r0, [pc, #24]	; (8000e48 <LoxPreFill+0xfc>)
 8000e2e:	f000 f83d 	bl	8000eac <UART_SendMessage>
 8000e32:	e000      	b.n	8000e36 <LoxPreFill+0xea>
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000e34:	bf00      	nop
    }
	return success;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200002f4 	.word	0x200002f4
 8000e44:	20000188 	.word	0x20000188
 8000e48:	2000035c 	.word	0x2000035c

08000e4c <main>:
#include "states_def.h"
#include "init.h"

int main(void)

{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b090      	sub	sp, #64	; 0x40
 8000e50:	af00      	add	r7, sp, #0
struct StateVars controls = {
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	223c      	movs	r2, #60	; 0x3c
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f004 fecd 	bl	8005bf8 <memset>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e62:	230b      	movs	r3, #11
 8000e64:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
		TURN_OFF,	//lastState
		START_HANDLER, 	//currentState
		&controls	//this address.
		};

	HAL_Init();
 8000e6c:	f002 fc90 	bl	8003790 <HAL_Init>

	SystemClock_Config();
 8000e70:	f7ff fd40 	bl	80008f4 <SystemClock_Config>
	MX_GPIO_Init();
 8000e74:	f7ff fdc0 	bl	80009f8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000e78:	f7ff fd8e 	bl	8000998 <MX_USART2_UART_Init>

	 HAL_UART_Receive_IT(&huart2,(uint8_t *)Rx_data, 1); // Asserts UART Interrupt every time 1 byte is received.
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4909      	ldr	r1, [pc, #36]	; (8000ea4 <main+0x58>)
 8000e80:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <main+0x5c>)
 8000e82:	f003 ffa1 	bl	8004dc8 <HAL_UART_Receive_IT>


	while(controls.isStateMachineRunning)
 8000e86:	e005      	b.n	8000e94 <main+0x48>
	{

	  StateMachine(controls.isStateMachineRunning,controls.adr);
 8000e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 fa08 	bl	80022a4 <StateMachine>
	while(controls.isStateMachineRunning)
 8000e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1f6      	bne.n	8000e88 <main+0x3c>
 8000e9a:	2300      	movs	r3, #0
	}

}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3740      	adds	r7, #64	; 0x40
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000180 	.word	0x20000180
 8000ea8:	2000035c 	.word	0x2000035c

08000eac <UART_SendMessage>:

#include "messages.h"

// Function to send the messages over serial communication
void UART_SendMessage(UART_HandleTypeDef *huart, char* message)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	  int len = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
	  uint32_t success = FALSE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
	  sprintf(buffer, message);
 8000ebe:	6839      	ldr	r1, [r7, #0]
 8000ec0:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <UART_SendMessage+0x3c>)
 8000ec2:	f004 fea1 	bl	8005c08 <siprintf>
	  len =strlen(buffer);
 8000ec6:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <UART_SendMessage+0x3c>)
 8000ec8:	f7ff f982 	bl	80001d0 <strlen>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed8:	4903      	ldr	r1, [pc, #12]	; (8000ee8 <UART_SendMessage+0x3c>)
 8000eda:	4804      	ldr	r0, [pc, #16]	; (8000eec <UART_SendMessage+0x40>)
 8000edc:	f003 fee0 	bl	8004ca0 <HAL_UART_Transmit>
	  return success;
 8000ee0:	bf00      	nop
}
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200001f4 	.word	0x200001f4
 8000eec:	2000035c 	.word	0x2000035c

08000ef0 <HAL_UART_RxCpltCallback>:

//Receiving the command
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	 uint32_t success = FALSE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
	 uint8_t i;
	    if (huart->Instance == USART2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a66      	ldr	r2, [pc, #408]	; (800109c <HAL_UART_RxCpltCallback+0x1ac>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	f040 80c5 	bne.w	8001092 <HAL_UART_RxCpltCallback+0x1a2>
	     {

	        if (Rx_indx==0) { for (i=0;i<100;i++) Rx_Buffer[i]=0; }   //clear Rx_Buffer before receiving new data
 8000f08:	4b65      	ldr	r3, [pc, #404]	; (80010a0 <HAL_UART_RxCpltCallback+0x1b0>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10c      	bne.n	8000f2a <HAL_UART_RxCpltCallback+0x3a>
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	e006      	b.n	8000f24 <HAL_UART_RxCpltCallback+0x34>
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	4a62      	ldr	r2, [pc, #392]	; (80010a4 <HAL_UART_RxCpltCallback+0x1b4>)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	54d1      	strb	r1, [r2, r3]
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	3301      	adds	r3, #1
 8000f22:	73fb      	strb	r3, [r7, #15]
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	2b63      	cmp	r3, #99	; 0x63
 8000f28:	d9f5      	bls.n	8000f16 <HAL_UART_RxCpltCallback+0x26>



	        if (Rx_data[0] != 13) //if received data different from ascii 13 (enter)
 8000f2a:	4b5f      	ldr	r3, [pc, #380]	; (80010a8 <HAL_UART_RxCpltCallback+0x1b8>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b0d      	cmp	r3, #13
 8000f30:	d00b      	beq.n	8000f4a <HAL_UART_RxCpltCallback+0x5a>
	            {
	            Rx_Buffer[Rx_indx++]=Rx_data[0];    //add data to Rx_Buffer
 8000f32:	4b5b      	ldr	r3, [pc, #364]	; (80010a0 <HAL_UART_RxCpltCallback+0x1b0>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	b2d1      	uxtb	r1, r2
 8000f3a:	4a59      	ldr	r2, [pc, #356]	; (80010a0 <HAL_UART_RxCpltCallback+0x1b0>)
 8000f3c:	7011      	strb	r1, [r2, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b59      	ldr	r3, [pc, #356]	; (80010a8 <HAL_UART_RxCpltCallback+0x1b8>)
 8000f42:	7819      	ldrb	r1, [r3, #0]
 8000f44:	4b57      	ldr	r3, [pc, #348]	; (80010a4 <HAL_UART_RxCpltCallback+0x1b4>)
 8000f46:	5499      	strb	r1, [r3, r2]
 8000f48:	e09e      	b.n	8001088 <HAL_UART_RxCpltCallback+0x198>
	            }
	        else            //if the receiving is complete
	            {
	                 Rx_indx=0;
 8000f4a:	4b55      	ldr	r3, [pc, #340]	; (80010a0 <HAL_UART_RxCpltCallback+0x1b0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
	                 retransition = TRUE;
 8000f50:	4b56      	ldr	r3, [pc, #344]	; (80010ac <HAL_UART_RxCpltCallback+0x1bc>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	601a      	str	r2, [r3, #0]
	                 inv_flag = TRUE;
 8000f56:	4b56      	ldr	r3, [pc, #344]	; (80010b0 <HAL_UART_RxCpltCallback+0x1c0>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]
	                 RxTxFlags |= 0x1;
 8000f5c:	4b55      	ldr	r3, [pc, #340]	; (80010b4 <HAL_UART_RxCpltCallback+0x1c4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	4a53      	ldr	r2, [pc, #332]	; (80010b4 <HAL_UART_RxCpltCallback+0x1c4>)
 8000f66:	6013      	str	r3, [r2, #0]
	                 success = TRUE;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
	                 hexadecimalToDecimal(Rx_Buffer);
 8000f6c:	484d      	ldr	r0, [pc, #308]	; (80010a4 <HAL_UART_RxCpltCallback+0x1b4>)
 8000f6e:	f000 f8eb 	bl	8001148 <hexadecimalToDecimal>
	                 // variable for the status command

	                 if(command == stat){
 8000f72:	4b51      	ldr	r3, [pc, #324]	; (80010b8 <HAL_UART_RxCpltCallback+0x1c8>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4b51      	ldr	r3, [pc, #324]	; (80010bc <HAL_UART_RxCpltCallback+0x1cc>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d103      	bne.n	8000f86 <HAL_UART_RxCpltCallback+0x96>
	                	 status= TRUE;
 8000f7e:	4b50      	ldr	r3, [pc, #320]	; (80010c0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	e080      	b.n	8001088 <HAL_UART_RxCpltCallback+0x198>
	                 }
	                 else if (command ==  power_off || stop || valve_check || lox_fill || lox_chill || pressurizing || lox_pre_fill || ignition ||start_handler \
 8000f86:	4b4c      	ldr	r3, [pc, #304]	; (80010b8 <HAL_UART_RxCpltCallback+0x1c8>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4b4e      	ldr	r3, [pc, #312]	; (80010c4 <HAL_UART_RxCpltCallback+0x1d4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d077      	beq.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000f92:	4b4d      	ldr	r3, [pc, #308]	; (80010c8 <HAL_UART_RxCpltCallback+0x1d8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d173      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000f9a:	4b4c      	ldr	r3, [pc, #304]	; (80010cc <HAL_UART_RxCpltCallback+0x1dc>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d16f      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000fa2:	4b4b      	ldr	r3, [pc, #300]	; (80010d0 <HAL_UART_RxCpltCallback+0x1e0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d16b      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000faa:	4b4a      	ldr	r3, [pc, #296]	; (80010d4 <HAL_UART_RxCpltCallback+0x1e4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d167      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000fb2:	4b49      	ldr	r3, [pc, #292]	; (80010d8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d163      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000fba:	4b48      	ldr	r3, [pc, #288]	; (80010dc <HAL_UART_RxCpltCallback+0x1ec>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d15f      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000fc2:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <HAL_UART_RxCpltCallback+0x1f0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d15b      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000fca:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <HAL_UART_RxCpltCallback+0x1f4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d157      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
	             			|| cycle_valves || cycle_voff || IGON || IGOFF || SOV1ON || SOV1OFF || SOV2ON || SOV2OFF || SOV3ON || SOV3OFF || SOV4ON || SOV4OFF || SOV5ON || SOV5OFF ||\
 8000fd2:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d153      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000fda:	4b44      	ldr	r3, [pc, #272]	; (80010ec <HAL_UART_RxCpltCallback+0x1fc>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d14f      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000fe2:	4b43      	ldr	r3, [pc, #268]	; (80010f0 <HAL_UART_RxCpltCallback+0x200>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d14b      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000fea:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <HAL_UART_RxCpltCallback+0x204>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d147      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000ff2:	4b41      	ldr	r3, [pc, #260]	; (80010f8 <HAL_UART_RxCpltCallback+0x208>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d143      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000ffa:	4b40      	ldr	r3, [pc, #256]	; (80010fc <HAL_UART_RxCpltCallback+0x20c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d13f      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8001002:	4b3f      	ldr	r3, [pc, #252]	; (8001100 <HAL_UART_RxCpltCallback+0x210>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d13b      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 800100a:	4b3e      	ldr	r3, [pc, #248]	; (8001104 <HAL_UART_RxCpltCallback+0x214>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d137      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8001012:	4b3d      	ldr	r3, [pc, #244]	; (8001108 <HAL_UART_RxCpltCallback+0x218>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d133      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 800101a:	4b3c      	ldr	r3, [pc, #240]	; (800110c <HAL_UART_RxCpltCallback+0x21c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d12f      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8001022:	4b3b      	ldr	r3, [pc, #236]	; (8001110 <HAL_UART_RxCpltCallback+0x220>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d12b      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 800102a:	4b3a      	ldr	r3, [pc, #232]	; (8001114 <HAL_UART_RxCpltCallback+0x224>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d127      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8001032:	4b39      	ldr	r3, [pc, #228]	; (8001118 <HAL_UART_RxCpltCallback+0x228>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d123      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <HAL_UART_RxCpltCallback+0x22c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d11f      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8001042:	4b37      	ldr	r3, [pc, #220]	; (8001120 <HAL_UART_RxCpltCallback+0x230>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d11b      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
	             			 SOV6ON || SOV6OFF || SOV7ON || SOV7OFF || SOV8ON || SOV8OFF || SOV9ON || SOV9OFF ){
 800104a:	4b36      	ldr	r3, [pc, #216]	; (8001124 <HAL_UART_RxCpltCallback+0x234>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d117      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8001052:	4b35      	ldr	r3, [pc, #212]	; (8001128 <HAL_UART_RxCpltCallback+0x238>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d113      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 800105a:	4b34      	ldr	r3, [pc, #208]	; (800112c <HAL_UART_RxCpltCallback+0x23c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10f      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8001062:	4b33      	ldr	r3, [pc, #204]	; (8001130 <HAL_UART_RxCpltCallback+0x240>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10b      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 800106a:	4b32      	ldr	r3, [pc, #200]	; (8001134 <HAL_UART_RxCpltCallback+0x244>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d107      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8001072:	4b31      	ldr	r3, [pc, #196]	; (8001138 <HAL_UART_RxCpltCallback+0x248>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d103      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 800107a:	4b30      	ldr	r3, [pc, #192]	; (800113c <HAL_UART_RxCpltCallback+0x24c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d002      	beq.n	8001088 <HAL_UART_RxCpltCallback+0x198>

	                	 cmd_flag = TRUE;
 8001082:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <HAL_UART_RxCpltCallback+0x250>)
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]

	                 }

	            }
	        HAL_UART_Receive_IT(&huart2, Rx_data, 1);   //activate UART receive interrupt every time
 8001088:	2201      	movs	r2, #1
 800108a:	4907      	ldr	r1, [pc, #28]	; (80010a8 <HAL_UART_RxCpltCallback+0x1b8>)
 800108c:	482d      	ldr	r0, [pc, #180]	; (8001144 <HAL_UART_RxCpltCallback+0x254>)
 800108e:	f003 fe9b 	bl	8004dc8 <HAL_UART_Receive_IT>

	}// end of if  (huart->Instance == USART2)
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40004400 	.word	0x40004400
 80010a0:	20000178 	.word	0x20000178
 80010a4:	200002f4 	.word	0x200002f4
 80010a8:	20000180 	.word	0x20000180
 80010ac:	20000358 	.word	0x20000358
 80010b0:	200001ec 	.word	0x200001ec
 80010b4:	20000174 	.word	0x20000174
 80010b8:	20000184 	.word	0x20000184
 80010bc:	20000028 	.word	0x20000028
 80010c0:	200003dc 	.word	0x200003dc
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000004 	.word	0x20000004
 80010cc:	20000008 	.word	0x20000008
 80010d0:	2000000c 	.word	0x2000000c
 80010d4:	20000010 	.word	0x20000010
 80010d8:	20000018 	.word	0x20000018
 80010dc:	20000014 	.word	0x20000014
 80010e0:	20000020 	.word	0x20000020
 80010e4:	20000024 	.word	0x20000024
 80010e8:	2000002c 	.word	0x2000002c
 80010ec:	20000030 	.word	0x20000030
 80010f0:	20000034 	.word	0x20000034
 80010f4:	20000038 	.word	0x20000038
 80010f8:	2000003c 	.word	0x2000003c
 80010fc:	20000040 	.word	0x20000040
 8001100:	20000044 	.word	0x20000044
 8001104:	20000048 	.word	0x20000048
 8001108:	2000004c 	.word	0x2000004c
 800110c:	20000050 	.word	0x20000050
 8001110:	20000054 	.word	0x20000054
 8001114:	20000058 	.word	0x20000058
 8001118:	2000005c 	.word	0x2000005c
 800111c:	20000060 	.word	0x20000060
 8001120:	20000064 	.word	0x20000064
 8001124:	20000068 	.word	0x20000068
 8001128:	2000006c 	.word	0x2000006c
 800112c:	20000070 	.word	0x20000070
 8001130:	20000074 	.word	0x20000074
 8001134:	20000078 	.word	0x20000078
 8001138:	2000007c 	.word	0x2000007c
 800113c:	20000080 	.word	0x20000080
 8001140:	200001f0 	.word	0x200001f0
 8001144:	2000035c 	.word	0x2000035c

08001148 <hexadecimalToDecimal>:

//HEX to decimal
void hexadecimalToDecimal(char* hexVal)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	uint32_t len = strlen(hexVal);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f83d 	bl	80001d0 <strlen>
 8001156:	60b8      	str	r0, [r7, #8]

    // Initializing base value to 1 ( 16^0, 16^1, 16^2, etc )
     uint32_t base = 1;
 8001158:	2301      	movs	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
     uint32_t dec_val = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]

    // Extracting characters as digits from last character
    for (int i=len-1; i>=0; i--)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	3b01      	subs	r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	e039      	b.n	80011dc <hexadecimalToDecimal+0x94>
    {
        // if ASCII char is between (0-9)
        if (hexVal[i]>='0' && hexVal[i]<='9')
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b2f      	cmp	r3, #47	; 0x2f
 8001172:	d915      	bls.n	80011a0 <hexadecimalToDecimal+0x58>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b39      	cmp	r3, #57	; 0x39
 800117e:	d80f      	bhi.n	80011a0 <hexadecimalToDecimal+0x58>
        {
            dec_val += (hexVal[i] - 48)*base;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	3b30      	subs	r3, #48	; 0x30
 800118a:	461a      	mov	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fb03 f302 	mul.w	r3, r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4413      	add	r3, r2
 8001196:	613b      	str	r3, [r7, #16]

            // incrementing the base by power
            base = base * 16;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	e01a      	b.n	80011d6 <hexadecimalToDecimal+0x8e>
        }

        // if ASCII char is between(A-F)
        else if (hexVal[i]>='A' && hexVal[i]<='F')
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b40      	cmp	r3, #64	; 0x40
 80011aa:	d914      	bls.n	80011d6 <hexadecimalToDecimal+0x8e>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b46      	cmp	r3, #70	; 0x46
 80011b6:	d80e      	bhi.n	80011d6 <hexadecimalToDecimal+0x8e>
        {
            dec_val += (hexVal[i] - 55)*base;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	3b37      	subs	r3, #55	; 0x37
 80011c2:	461a      	mov	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fb03 f302 	mul.w	r3, r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4413      	add	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]

            // incrementing the base by power
            base = base*16;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	617b      	str	r3, [r7, #20]
    for (int i=len-1; i>=0; i--)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3b01      	subs	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	dac2      	bge.n	8001168 <hexadecimalToDecimal+0x20>
        }
    }
    command = dec_val;
 80011e2:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <hexadecimalToDecimal+0xa8>)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000184 	.word	0x20000184

080011f4 <ProcessCommands>:

//Function to process the command messages
uint32_t ProcessCommands(struct StateVars * ctrl)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
	// LOX_PRE_FILL command
	if((ctrl->currentState == START_HANDLER) && command == lox_pre_fill )
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001206:	2b00      	cmp	r3, #0
 8001208:	d112      	bne.n	8001230 <ProcessCommands+0x3c>
 800120a:	4ba0      	ldr	r3, [pc, #640]	; (800148c <ProcessCommands+0x298>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4ba0      	ldr	r3, [pc, #640]	; (8001490 <ProcessCommands+0x29c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d10c      	bne.n	8001230 <ProcessCommands+0x3c>
	{
		ctrl ->currentState = LOX_PRE_FILL;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2202      	movs	r2, #2
 800121a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 800121e:	2301      	movs	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
		RxTxFlags &= !RX_DATA_READY;
 8001222:	4b9c      	ldr	r3, [pc, #624]	; (8001494 <ProcessCommands+0x2a0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4b9b      	ldr	r3, [pc, #620]	; (8001494 <ProcessCommands+0x2a0>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	f000 bc96 	b.w	8001b5c <ProcessCommands+0x968>
	}
    // TURN_OFF command
	else if((command == power_off) && (ctrl->currentState== VALVE_CHECK || \
 8001230:	4b96      	ldr	r3, [pc, #600]	; (800148c <ProcessCommands+0x298>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b98      	ldr	r3, [pc, #608]	; (8001498 <ProcessCommands+0x2a4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d116      	bne.n	800126a <ProcessCommands+0x76>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001242:	2b01      	cmp	r3, #1
 8001244:	d004      	beq.n	8001250 <ProcessCommands+0x5c>
			 ctrl->currentState == SAFETY))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == power_off) && (ctrl->currentState== VALVE_CHECK || \
 800124c:	2b05      	cmp	r3, #5
 800124e:	d10c      	bne.n	800126a <ProcessCommands+0x76>
	{
		ctrl ->currentState = TURN_OFF;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	220b      	movs	r2, #11
 8001254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 8001258:	2301      	movs	r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
		RxTxFlags &= !RX_DATA_READY;
 800125c:	4b8d      	ldr	r3, [pc, #564]	; (8001494 <ProcessCommands+0x2a0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4b8c      	ldr	r3, [pc, #560]	; (8001494 <ProcessCommands+0x2a0>)
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	f000 bc79 	b.w	8001b5c <ProcessCommands+0x968>
	}
    // STOP command
	else if((command == stop) && ( ctrl->currentState== LOX_PRE_FILL || \
 800126a:	4b88      	ldr	r3, [pc, #544]	; (800148c <ProcessCommands+0x298>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b8b      	ldr	r3, [pc, #556]	; (800149c <ProcessCommands+0x2a8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d120      	bne.n	80012b8 <ProcessCommands+0xc4>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800127c:	2b02      	cmp	r3, #2
 800127e:	d00e      	beq.n	800129e <ProcessCommands+0xaa>
			  ctrl->currentState == LOX_CHILL|| \
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == stop) && ( ctrl->currentState== LOX_PRE_FILL || \
 8001286:	2b04      	cmp	r3, #4
 8001288:	d009      	beq.n	800129e <ProcessCommands+0xaa>
			  ctrl->currentState == LOX_FILL 	|| \
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
			  ctrl->currentState == LOX_CHILL|| \
 8001290:	2b03      	cmp	r3, #3
 8001292:	d004      	beq.n	800129e <ProcessCommands+0xaa>
			  /*ctrl->currentState == VALVE_CHECK|| \*/ //dont want valve_check to end up in safety
			  ctrl->currentState == START_HANDLER) )
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
			  ctrl->currentState == LOX_FILL 	|| \
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10c      	bne.n	80012b8 <ProcessCommands+0xc4>
	{
		ctrl->currentState = SAFETY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2205      	movs	r2, #5
 80012a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 80012a6:	2301      	movs	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 80012aa:	4b7a      	ldr	r3, [pc, #488]	; (8001494 <ProcessCommands+0x2a0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4b79      	ldr	r3, [pc, #484]	; (8001494 <ProcessCommands+0x2a0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	f000 bc52 	b.w	8001b5c <ProcessCommands+0x968>
	}

	// LOX_FILL command
	else if(( ctrl->currentState == LOX_PRE_FILL) && (command == lox_fill))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d112      	bne.n	80012e8 <ProcessCommands+0xf4>
 80012c2:	4b72      	ldr	r3, [pc, #456]	; (800148c <ProcessCommands+0x298>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b76      	ldr	r3, [pc, #472]	; (80014a0 <ProcessCommands+0x2ac>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d10c      	bne.n	80012e8 <ProcessCommands+0xf4>
	{
		ctrl->currentState = LOX_FILL;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2203      	movs	r2, #3
 80012d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 80012d6:	2301      	movs	r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 80012da:	4b6e      	ldr	r3, [pc, #440]	; (8001494 <ProcessCommands+0x2a0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4b6d      	ldr	r3, [pc, #436]	; (8001494 <ProcessCommands+0x2a0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	f000 bc3a 	b.w	8001b5c <ProcessCommands+0x968>
	}
    // LOX_FILL command
	else if((ctrl->currentState == LOX_FILL) && (command == lox_chill))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d112      	bne.n	8001318 <ProcessCommands+0x124>
 80012f2:	4b66      	ldr	r3, [pc, #408]	; (800148c <ProcessCommands+0x298>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b6b      	ldr	r3, [pc, #428]	; (80014a4 <ProcessCommands+0x2b0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d10c      	bne.n	8001318 <ProcessCommands+0x124>
	{
		ctrl->currentState = LOX_CHILL;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2204      	movs	r2, #4
 8001302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 8001306:	2301      	movs	r3, #1
 8001308:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 800130a:	4b62      	ldr	r3, [pc, #392]	; (8001494 <ProcessCommands+0x2a0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4b61      	ldr	r3, [pc, #388]	; (8001494 <ProcessCommands+0x2a0>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	f000 bc22 	b.w	8001b5c <ProcessCommands+0x968>
	}
    // LOX_CHILL command
	else if(( ctrl->currentState == LOX_CHILL) && (command == safety))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800131e:	2b04      	cmp	r3, #4
 8001320:	d112      	bne.n	8001348 <ProcessCommands+0x154>
 8001322:	4b5a      	ldr	r3, [pc, #360]	; (800148c <ProcessCommands+0x298>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b60      	ldr	r3, [pc, #384]	; (80014a8 <ProcessCommands+0x2b4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d10c      	bne.n	8001348 <ProcessCommands+0x154>
	{
		ctrl->currentState = SAFETY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2205      	movs	r2, #5
 8001332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 8001336:	2301      	movs	r3, #1
 8001338:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 800133a:	4b56      	ldr	r3, [pc, #344]	; (8001494 <ProcessCommands+0x2a0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4b55      	ldr	r3, [pc, #340]	; (8001494 <ProcessCommands+0x2a0>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	f000 bc0a 	b.w	8001b5c <ProcessCommands+0x968>
	}
    // VALVE_CHECK command
	else if(( ctrl->currentState == START_HANDLER ) && (command == valve_check))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800134e:	2b00      	cmp	r3, #0
 8001350:	d111      	bne.n	8001376 <ProcessCommands+0x182>
 8001352:	4b4e      	ldr	r3, [pc, #312]	; (800148c <ProcessCommands+0x298>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b55      	ldr	r3, [pc, #340]	; (80014ac <ProcessCommands+0x2b8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	d10b      	bne.n	8001376 <ProcessCommands+0x182>
	{
		ctrl->currentState = VALVE_CHECK;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 8001366:	2301      	movs	r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 800136a:	4b4a      	ldr	r3, [pc, #296]	; (8001494 <ProcessCommands+0x2a0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4b49      	ldr	r3, [pc, #292]	; (8001494 <ProcessCommands+0x2a0>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e3f2      	b.n	8001b5c <ProcessCommands+0x968>
	}

    // PRESSURIZE command
	else if((ctrl->currentState == SAFETY) && (command == pressurizing))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800137c:	2b05      	cmp	r3, #5
 800137e:	d111      	bne.n	80013a4 <ProcessCommands+0x1b0>
 8001380:	4b42      	ldr	r3, [pc, #264]	; (800148c <ProcessCommands+0x298>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b4a      	ldr	r3, [pc, #296]	; (80014b0 <ProcessCommands+0x2bc>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d10b      	bne.n	80013a4 <ProcessCommands+0x1b0>
	{
		ctrl->currentState = PRESSURIZE;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2206      	movs	r2, #6
 8001390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 8001394:	2301      	movs	r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 8001398:	4b3e      	ldr	r3, [pc, #248]	; (8001494 <ProcessCommands+0x2a0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <ProcessCommands+0x2a0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e3db      	b.n	8001b5c <ProcessCommands+0x968>
	}
    // IGNITION command
	else if((ctrl->currentState == PRESSURIZE) && (command == ignition))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d111      	bne.n	80013d2 <ProcessCommands+0x1de>
 80013ae:	4b37      	ldr	r3, [pc, #220]	; (800148c <ProcessCommands+0x298>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <ProcessCommands+0x2c0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d10b      	bne.n	80013d2 <ProcessCommands+0x1de>
	{
		ctrl->currentState = IGNITION; //START of the FSM
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2207      	movs	r2, #7
 80013be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 80013c2:	2301      	movs	r3, #1
 80013c4:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 80013c6:	4b33      	ldr	r3, [pc, #204]	; (8001494 <ProcessCommands+0x2a0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4b32      	ldr	r3, [pc, #200]	; (8001494 <ProcessCommands+0x2a0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	e3c4      	b.n	8001b5c <ProcessCommands+0x968>
	}


	//State status
	else if((command == stat) && (
 80013d2:	4b2e      	ldr	r3, [pc, #184]	; (800148c <ProcessCommands+0x298>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b38      	ldr	r3, [pc, #224]	; (80014b8 <ProcessCommands+0x2c4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d132      	bne.n	8001444 <ProcessCommands+0x250>
				  ctrl->currentState == START_HANDLER || \
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == stat) && (
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d022      	beq.n	800142e <ProcessCommands+0x23a>
				  ctrl->currentState == LOX_PRE_FILL || \
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == START_HANDLER || \
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d01d      	beq.n	800142e <ProcessCommands+0x23a>
				  ctrl->currentState == LOX_CHILL|| \
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == LOX_PRE_FILL || \
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d018      	beq.n	800142e <ProcessCommands+0x23a>
				  ctrl->currentState == LOX_FILL 	|| \
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == LOX_CHILL|| \
 8001402:	2b03      	cmp	r3, #3
 8001404:	d013      	beq.n	800142e <ProcessCommands+0x23a>
				  ctrl->currentState == VALVE_CHECK|| \
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == LOX_FILL 	|| \
 800140c:	2b01      	cmp	r3, #1
 800140e:	d00e      	beq.n	800142e <ProcessCommands+0x23a>
				  ctrl->currentState == PRESSURIZE  ||   \
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == VALVE_CHECK|| \
 8001416:	2b06      	cmp	r3, #6
 8001418:	d009      	beq.n	800142e <ProcessCommands+0x23a>
				  ctrl->currentState == TURN_OFF || \
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == PRESSURIZE  ||   \
 8001420:	2b0b      	cmp	r3, #11
 8001422:	d004      	beq.n	800142e <ProcessCommands+0x23a>
				  ctrl->currentState == SAFETY \
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == TURN_OFF || \
 800142a:	2b05      	cmp	r3, #5
 800142c:	d10a      	bne.n	8001444 <ProcessCommands+0x250>
				  ))
		{

		    StateStatus(ctrl);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f001 f960 	bl	80026f4 <StateStatus>
			success = TRUE;
 8001434:	2301      	movs	r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
			// Clear data read flag
			RxTxFlags &= !RX_DATA_READY;
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <ProcessCommands+0x2a0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <ProcessCommands+0x2a0>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	e38b      	b.n	8001b5c <ProcessCommands+0x968>
		}
	// Handling invalid transitions
	else if ((command == stop) && (ctrl->currentState==VALVE_CHECK || ctrl->currentState == START_HANDLER)){
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <ProcessCommands+0x298>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <ProcessCommands+0x2a8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d13b      	bne.n	80014c8 <ProcessCommands+0x2d4>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001456:	2b01      	cmp	r3, #1
 8001458:	d004      	beq.n	8001464 <ProcessCommands+0x270>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001460:	2b00      	cmp	r3, #0
 8001462:	d131      	bne.n	80014c8 <ProcessCommands+0x2d4>
					if (cmd_flag)
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <ProcessCommands+0x2c8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d006      	beq.n	800147a <ProcessCommands+0x286>
				 	  {
				 	 	  UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 800146c:	4914      	ldr	r1, [pc, #80]	; (80014c0 <ProcessCommands+0x2cc>)
 800146e:	4815      	ldr	r0, [pc, #84]	; (80014c4 <ProcessCommands+0x2d0>)
 8001470:	f7ff fd1c 	bl	8000eac <UART_SendMessage>
				 	 	  cmd_flag = FALSE;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <ProcessCommands+0x2c8>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
				 	 }
						success = TRUE;
 800147a:	2301      	movs	r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
						// Clear data read flag
						RxTxFlags &= !RX_DATA_READY;
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <ProcessCommands+0x2a0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <ProcessCommands+0x2a0>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e368      	b.n	8001b5c <ProcessCommands+0x968>
 800148a:	bf00      	nop
 800148c:	20000184 	.word	0x20000184
 8001490:	20000014 	.word	0x20000014
 8001494:	20000174 	.word	0x20000174
 8001498:	20000000 	.word	0x20000000
 800149c:	20000004 	.word	0x20000004
 80014a0:	2000000c 	.word	0x2000000c
 80014a4:	20000010 	.word	0x20000010
 80014a8:	2000001c 	.word	0x2000001c
 80014ac:	20000008 	.word	0x20000008
 80014b0:	20000018 	.word	0x20000018
 80014b4:	20000020 	.word	0x20000020
 80014b8:	20000028 	.word	0x20000028
 80014bc:	200001f0 	.word	0x200001f0
 80014c0:	0800645c 	.word	0x0800645c
 80014c4:	2000035c 	.word	0x2000035c
		}
	else if((command == lox_fill) && (
 80014c8:	4ba2      	ldr	r3, [pc, #648]	; (8001754 <ProcessCommands+0x560>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4ba2      	ldr	r3, [pc, #648]	; (8001758 <ProcessCommands+0x564>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d130      	bne.n	8001536 <ProcessCommands+0x342>
					  ctrl->currentState == START_HANDLER|| \
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == lox_fill) && (
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d018      	beq.n	8001510 <ProcessCommands+0x31c>
					  ctrl->currentState == LOX_CHILL	|| \
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == START_HANDLER|| \
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d013      	beq.n	8001510 <ProcessCommands+0x31c>
					  ctrl->currentState == VALVE_CHECK|| \
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == LOX_CHILL	|| \
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d00e      	beq.n	8001510 <ProcessCommands+0x31c>
					  ctrl->currentState == PRESSURIZE  ||   \
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == VALVE_CHECK|| \
 80014f8:	2b06      	cmp	r3, #6
 80014fa:	d009      	beq.n	8001510 <ProcessCommands+0x31c>
					  ctrl->currentState == TURN_OFF || \
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == PRESSURIZE  ||   \
 8001502:	2b0b      	cmp	r3, #11
 8001504:	d004      	beq.n	8001510 <ProcessCommands+0x31c>
					  ctrl->currentState == SAFETY \
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == TURN_OFF || \
 800150c:	2b05      	cmp	r3, #5
 800150e:	d112      	bne.n	8001536 <ProcessCommands+0x342>
					  )){

					if (cmd_flag)
 8001510:	4b92      	ldr	r3, [pc, #584]	; (800175c <ProcessCommands+0x568>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <ProcessCommands+0x332>
		 	 	 	 	 {
		 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 8001518:	4991      	ldr	r1, [pc, #580]	; (8001760 <ProcessCommands+0x56c>)
 800151a:	4892      	ldr	r0, [pc, #584]	; (8001764 <ProcessCommands+0x570>)
 800151c:	f7ff fcc6 	bl	8000eac <UART_SendMessage>
		 	 	 		 	cmd_flag = FALSE;
 8001520:	4b8e      	ldr	r3, [pc, #568]	; (800175c <ProcessCommands+0x568>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
		 	 	 	 	 }
				success = TRUE;
 8001526:	2301      	movs	r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
				// Clear data read flag
				RxTxFlags &= !RX_DATA_READY;
 800152a:	4b8f      	ldr	r3, [pc, #572]	; (8001768 <ProcessCommands+0x574>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4b8e      	ldr	r3, [pc, #568]	; (8001768 <ProcessCommands+0x574>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	e312      	b.n	8001b5c <ProcessCommands+0x968>
			}
	else if((command == lox_chill) && (
 8001536:	4b87      	ldr	r3, [pc, #540]	; (8001754 <ProcessCommands+0x560>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b8c      	ldr	r3, [pc, #560]	; (800176c <ProcessCommands+0x578>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d130      	bne.n	80015a4 <ProcessCommands+0x3b0>
						  ctrl->currentState == START_HANDLER|| \
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == lox_chill) && (
 8001548:	2b00      	cmp	r3, #0
 800154a:	d018      	beq.n	800157e <ProcessCommands+0x38a>
						  ctrl->currentState == LOX_PRE_FILL	|| \
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == START_HANDLER|| \
 8001552:	2b02      	cmp	r3, #2
 8001554:	d013      	beq.n	800157e <ProcessCommands+0x38a>
						  ctrl->currentState == VALVE_CHECK|| \
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_PRE_FILL	|| \
 800155c:	2b01      	cmp	r3, #1
 800155e:	d00e      	beq.n	800157e <ProcessCommands+0x38a>
						  ctrl->currentState == PRESSURIZE  ||   \
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == VALVE_CHECK|| \
 8001566:	2b06      	cmp	r3, #6
 8001568:	d009      	beq.n	800157e <ProcessCommands+0x38a>
						  ctrl->currentState == TURN_OFF || \
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == PRESSURIZE  ||   \
 8001570:	2b0b      	cmp	r3, #11
 8001572:	d004      	beq.n	800157e <ProcessCommands+0x38a>
						  ctrl->currentState == SAFETY \
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == TURN_OFF || \
 800157a:	2b05      	cmp	r3, #5
 800157c:	d112      	bne.n	80015a4 <ProcessCommands+0x3b0>
						  ))
				{

							if (cmd_flag)
 800157e:	4b77      	ldr	r3, [pc, #476]	; (800175c <ProcessCommands+0x568>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d006      	beq.n	8001594 <ProcessCommands+0x3a0>
				 	 	 	 	 {
				 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 8001586:	4976      	ldr	r1, [pc, #472]	; (8001760 <ProcessCommands+0x56c>)
 8001588:	4876      	ldr	r0, [pc, #472]	; (8001764 <ProcessCommands+0x570>)
 800158a:	f7ff fc8f 	bl	8000eac <UART_SendMessage>
				 	 	 		 	cmd_flag = FALSE;
 800158e:	4b73      	ldr	r3, [pc, #460]	; (800175c <ProcessCommands+0x568>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
				 	 	 	 	 }
					success = TRUE;
 8001594:	2301      	movs	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
					// Clear data read flag
					RxTxFlags &= !RX_DATA_READY;
 8001598:	4b73      	ldr	r3, [pc, #460]	; (8001768 <ProcessCommands+0x574>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4b72      	ldr	r3, [pc, #456]	; (8001768 <ProcessCommands+0x574>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e2db      	b.n	8001b5c <ProcessCommands+0x968>
				}
	else if((command == safety) && (
 80015a4:	4b6b      	ldr	r3, [pc, #428]	; (8001754 <ProcessCommands+0x560>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b71      	ldr	r3, [pc, #452]	; (8001770 <ProcessCommands+0x57c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d130      	bne.n	8001612 <ProcessCommands+0x41e>
						  ctrl->currentState == START_HANDLER|| \
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == safety) && (
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d018      	beq.n	80015ec <ProcessCommands+0x3f8>
						  ctrl->currentState == LOX_FILL	|| \
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == START_HANDLER|| \
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d013      	beq.n	80015ec <ProcessCommands+0x3f8>
						  ctrl->currentState == VALVE_CHECK|| \
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_FILL	|| \
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d00e      	beq.n	80015ec <ProcessCommands+0x3f8>
						  ctrl->currentState == PRESSURIZE  ||   \
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == VALVE_CHECK|| \
 80015d4:	2b06      	cmp	r3, #6
 80015d6:	d009      	beq.n	80015ec <ProcessCommands+0x3f8>
						  ctrl->currentState == TURN_OFF ||\
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == PRESSURIZE  ||   \
 80015de:	2b0b      	cmp	r3, #11
 80015e0:	d004      	beq.n	80015ec <ProcessCommands+0x3f8>
						  ctrl->currentState == LOX_PRE_FILL \
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == TURN_OFF ||\
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d112      	bne.n	8001612 <ProcessCommands+0x41e>
						  ))
				{
						if (cmd_flag)
 80015ec:	4b5b      	ldr	r3, [pc, #364]	; (800175c <ProcessCommands+0x568>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <ProcessCommands+0x40e>
				 	 	 	 	 {
				 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 80015f4:	495a      	ldr	r1, [pc, #360]	; (8001760 <ProcessCommands+0x56c>)
 80015f6:	485b      	ldr	r0, [pc, #364]	; (8001764 <ProcessCommands+0x570>)
 80015f8:	f7ff fc58 	bl	8000eac <UART_SendMessage>
				 	 	 		 	cmd_flag = FALSE;
 80015fc:	4b57      	ldr	r3, [pc, #348]	; (800175c <ProcessCommands+0x568>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
				 	 	 	 	 }
					success = TRUE;
 8001602:	2301      	movs	r3, #1
 8001604:	60fb      	str	r3, [r7, #12]
					// Clear data read flag
					RxTxFlags &= !RX_DATA_READY;
 8001606:	4b58      	ldr	r3, [pc, #352]	; (8001768 <ProcessCommands+0x574>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4b57      	ldr	r3, [pc, #348]	; (8001768 <ProcessCommands+0x574>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	e2a4      	b.n	8001b5c <ProcessCommands+0x968>
				}
	else if((command == valve_check) && (
 8001612:	4b50      	ldr	r3, [pc, #320]	; (8001754 <ProcessCommands+0x560>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b57      	ldr	r3, [pc, #348]	; (8001774 <ProcessCommands+0x580>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d130      	bne.n	8001680 <ProcessCommands+0x48c>
						  ctrl->currentState == LOX_PRE_FILL|| \
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == valve_check) && (
 8001624:	2b02      	cmp	r3, #2
 8001626:	d018      	beq.n	800165a <ProcessCommands+0x466>
						  ctrl->currentState == LOX_CHILL	|| \
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_PRE_FILL|| \
 800162e:	2b04      	cmp	r3, #4
 8001630:	d013      	beq.n	800165a <ProcessCommands+0x466>
						  ctrl->currentState == LOX_FILL|| \
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_CHILL	|| \
 8001638:	2b03      	cmp	r3, #3
 800163a:	d00e      	beq.n	800165a <ProcessCommands+0x466>
						  ctrl->currentState == PRESSURIZE  ||   \
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_FILL|| \
 8001642:	2b06      	cmp	r3, #6
 8001644:	d009      	beq.n	800165a <ProcessCommands+0x466>
						  ctrl->currentState == TURN_OFF || \
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == PRESSURIZE  ||   \
 800164c:	2b0b      	cmp	r3, #11
 800164e:	d004      	beq.n	800165a <ProcessCommands+0x466>
						  ctrl->currentState == SAFETY \
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == TURN_OFF || \
 8001656:	2b05      	cmp	r3, #5
 8001658:	d112      	bne.n	8001680 <ProcessCommands+0x48c>
						  ))
				{
						if (cmd_flag)
 800165a:	4b40      	ldr	r3, [pc, #256]	; (800175c <ProcessCommands+0x568>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d006      	beq.n	8001670 <ProcessCommands+0x47c>
				 	 	 	 	 {
				 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 8001662:	493f      	ldr	r1, [pc, #252]	; (8001760 <ProcessCommands+0x56c>)
 8001664:	483f      	ldr	r0, [pc, #252]	; (8001764 <ProcessCommands+0x570>)
 8001666:	f7ff fc21 	bl	8000eac <UART_SendMessage>
				 	 	 		 	cmd_flag = FALSE;
 800166a:	4b3c      	ldr	r3, [pc, #240]	; (800175c <ProcessCommands+0x568>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
				 	 	 	 	 }
					success = TRUE;
 8001670:	2301      	movs	r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
					// Clear data read flag
					RxTxFlags &= !RX_DATA_READY;
 8001674:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <ProcessCommands+0x574>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <ProcessCommands+0x574>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e26d      	b.n	8001b5c <ProcessCommands+0x968>

				}
	else if((command == lox_pre_fill) && (
 8001680:	4b34      	ldr	r3, [pc, #208]	; (8001754 <ProcessCommands+0x560>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b3c      	ldr	r3, [pc, #240]	; (8001778 <ProcessCommands+0x584>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d130      	bne.n	80016ee <ProcessCommands+0x4fa>
							  ctrl->currentState == LOX_CHILL || \
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == lox_pre_fill) && (
 8001692:	2b04      	cmp	r3, #4
 8001694:	d018      	beq.n	80016c8 <ProcessCommands+0x4d4>
							  ctrl->currentState == SAFETY|| \
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == LOX_CHILL || \
 800169c:	2b05      	cmp	r3, #5
 800169e:	d013      	beq.n	80016c8 <ProcessCommands+0x4d4>
							  ctrl->currentState == LOX_FILL	|| \
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == SAFETY|| \
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d00e      	beq.n	80016c8 <ProcessCommands+0x4d4>
							  ctrl->currentState == VALVE_CHECK|| \
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == LOX_FILL	|| \
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d009      	beq.n	80016c8 <ProcessCommands+0x4d4>
							  ctrl->currentState == PRESSURIZE  ||   \
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == VALVE_CHECK|| \
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d004      	beq.n	80016c8 <ProcessCommands+0x4d4>
							  ctrl->currentState == TURN_OFF ))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == PRESSURIZE  ||   \
 80016c4:	2b0b      	cmp	r3, #11
 80016c6:	d112      	bne.n	80016ee <ProcessCommands+0x4fa>
					{
							if (cmd_flag)
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <ProcessCommands+0x568>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d006      	beq.n	80016de <ProcessCommands+0x4ea>
					 	 	 	 	 {
					 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 80016d0:	4923      	ldr	r1, [pc, #140]	; (8001760 <ProcessCommands+0x56c>)
 80016d2:	4824      	ldr	r0, [pc, #144]	; (8001764 <ProcessCommands+0x570>)
 80016d4:	f7ff fbea 	bl	8000eac <UART_SendMessage>
					 	 	 		 	cmd_flag = FALSE;
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <ProcessCommands+0x568>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
					 	 	 	 	 }
						success = TRUE;
 80016de:	2301      	movs	r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
						// Clear data read flag
						RxTxFlags &= !RX_DATA_READY;
 80016e2:	4b21      	ldr	r3, [pc, #132]	; (8001768 <ProcessCommands+0x574>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <ProcessCommands+0x574>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	e236      	b.n	8001b5c <ProcessCommands+0x968>
					}
	else if((command == pressurizing) && (
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <ProcessCommands+0x560>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4b22      	ldr	r3, [pc, #136]	; (800177c <ProcessCommands+0x588>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d142      	bne.n	8001780 <ProcessCommands+0x58c>
								  ctrl->currentState == LOX_PRE_FILL || \
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == pressurizing) && (
 8001700:	2b02      	cmp	r3, #2
 8001702:	d013      	beq.n	800172c <ProcessCommands+0x538>
								  ctrl->currentState == LOX_CHILL || \
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == LOX_PRE_FILL || \
 800170a:	2b04      	cmp	r3, #4
 800170c:	d00e      	beq.n	800172c <ProcessCommands+0x538>
								  ctrl->currentState == LOX_FILL	|| \
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == LOX_CHILL || \
 8001714:	2b03      	cmp	r3, #3
 8001716:	d009      	beq.n	800172c <ProcessCommands+0x538>
								  ctrl->currentState == VALVE_CHECK|| \
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == LOX_FILL	|| \
 800171e:	2b01      	cmp	r3, #1
 8001720:	d004      	beq.n	800172c <ProcessCommands+0x538>
								  ctrl->currentState == TURN_OFF ))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == VALVE_CHECK|| \
 8001728:	2b0b      	cmp	r3, #11
 800172a:	d129      	bne.n	8001780 <ProcessCommands+0x58c>
						{
								if (cmd_flag)
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <ProcessCommands+0x568>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <ProcessCommands+0x54e>
						 	 	 	 	 {
						 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 8001734:	490a      	ldr	r1, [pc, #40]	; (8001760 <ProcessCommands+0x56c>)
 8001736:	480b      	ldr	r0, [pc, #44]	; (8001764 <ProcessCommands+0x570>)
 8001738:	f7ff fbb8 	bl	8000eac <UART_SendMessage>
						 	 	 		 	cmd_flag = FALSE;
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <ProcessCommands+0x568>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
						 	 	 	 	 }
							success = TRUE;
 8001742:	2301      	movs	r3, #1
 8001744:	60fb      	str	r3, [r7, #12]
							// Clear data read flag
							RxTxFlags &= !RX_DATA_READY;
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <ProcessCommands+0x574>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4b07      	ldr	r3, [pc, #28]	; (8001768 <ProcessCommands+0x574>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e204      	b.n	8001b5c <ProcessCommands+0x968>
 8001752:	bf00      	nop
 8001754:	20000184 	.word	0x20000184
 8001758:	2000000c 	.word	0x2000000c
 800175c:	200001f0 	.word	0x200001f0
 8001760:	0800645c 	.word	0x0800645c
 8001764:	2000035c 	.word	0x2000035c
 8001768:	20000174 	.word	0x20000174
 800176c:	20000010 	.word	0x20000010
 8001770:	2000001c 	.word	0x2000001c
 8001774:	20000008 	.word	0x20000008
 8001778:	20000014 	.word	0x20000014
 800177c:	20000018 	.word	0x20000018
						}

	//Handle trying to transition to the same state
	else if ((command == lox_pre_fill && ctrl->currentState == LOX_PRE_FILL)||\
 8001780:	4b84      	ldr	r3, [pc, #528]	; (8001994 <ProcessCommands+0x7a0>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b84      	ldr	r3, [pc, #528]	; (8001998 <ProcessCommands+0x7a4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d104      	bne.n	8001796 <ProcessCommands+0x5a2>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001792:	2b02      	cmp	r3, #2
 8001794:	d04c      	beq.n	8001830 <ProcessCommands+0x63c>
			 (command == lox_fill && ctrl->currentState == LOX_FILL)|| \
 8001796:	4b7f      	ldr	r3, [pc, #508]	; (8001994 <ProcessCommands+0x7a0>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b80      	ldr	r3, [pc, #512]	; (800199c <ProcessCommands+0x7a8>)
 800179c:	681b      	ldr	r3, [r3, #0]
	else if ((command == lox_pre_fill && ctrl->currentState == LOX_PRE_FILL)||\
 800179e:	429a      	cmp	r2, r3
 80017a0:	d104      	bne.n	80017ac <ProcessCommands+0x5b8>
			 (command == lox_fill && ctrl->currentState == LOX_FILL)|| \
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d041      	beq.n	8001830 <ProcessCommands+0x63c>
			 (command == lox_chill && ctrl->currentState == LOX_CHILL)||\
 80017ac:	4b79      	ldr	r3, [pc, #484]	; (8001994 <ProcessCommands+0x7a0>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b7b      	ldr	r3, [pc, #492]	; (80019a0 <ProcessCommands+0x7ac>)
 80017b2:	681b      	ldr	r3, [r3, #0]
			 (command == lox_fill && ctrl->currentState == LOX_FILL)|| \
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d104      	bne.n	80017c2 <ProcessCommands+0x5ce>
			 (command == lox_chill && ctrl->currentState == LOX_CHILL)||\
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d036      	beq.n	8001830 <ProcessCommands+0x63c>
			 (command == safety && ctrl->currentState == SAFETY)||\
 80017c2:	4b74      	ldr	r3, [pc, #464]	; (8001994 <ProcessCommands+0x7a0>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b77      	ldr	r3, [pc, #476]	; (80019a4 <ProcessCommands+0x7b0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
			 (command == lox_chill && ctrl->currentState == LOX_CHILL)||\
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d104      	bne.n	80017d8 <ProcessCommands+0x5e4>
			 (command == safety && ctrl->currentState == SAFETY)||\
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017d4:	2b05      	cmp	r3, #5
 80017d6:	d02b      	beq.n	8001830 <ProcessCommands+0x63c>
			 (command == valve_check && ctrl->currentState == VALVE_CHECK)||\
 80017d8:	4b6e      	ldr	r3, [pc, #440]	; (8001994 <ProcessCommands+0x7a0>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b72      	ldr	r3, [pc, #456]	; (80019a8 <ProcessCommands+0x7b4>)
 80017de:	681b      	ldr	r3, [r3, #0]
			 (command == safety && ctrl->currentState == SAFETY)||\
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d104      	bne.n	80017ee <ProcessCommands+0x5fa>
			 (command == valve_check && ctrl->currentState == VALVE_CHECK)||\
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d020      	beq.n	8001830 <ProcessCommands+0x63c>
			 (command == pressurizing && ctrl->currentState == PRESSURIZE) ||\
 80017ee:	4b69      	ldr	r3, [pc, #420]	; (8001994 <ProcessCommands+0x7a0>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4b6e      	ldr	r3, [pc, #440]	; (80019ac <ProcessCommands+0x7b8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
			 (command == valve_check && ctrl->currentState == VALVE_CHECK)||\
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d104      	bne.n	8001804 <ProcessCommands+0x610>
			 (command == pressurizing && ctrl->currentState == PRESSURIZE) ||\
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001800:	2b06      	cmp	r3, #6
 8001802:	d015      	beq.n	8001830 <ProcessCommands+0x63c>
		     (command == stop && ctrl->currentState == SAFETY)||\
 8001804:	4b63      	ldr	r3, [pc, #396]	; (8001994 <ProcessCommands+0x7a0>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b69      	ldr	r3, [pc, #420]	; (80019b0 <ProcessCommands+0x7bc>)
 800180a:	681b      	ldr	r3, [r3, #0]
			 (command == pressurizing && ctrl->currentState == PRESSURIZE) ||\
 800180c:	429a      	cmp	r2, r3
 800180e:	d104      	bne.n	800181a <ProcessCommands+0x626>
		     (command == stop && ctrl->currentState == SAFETY)||\
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001816:	2b05      	cmp	r3, #5
 8001818:	d00a      	beq.n	8001830 <ProcessCommands+0x63c>
			 (command == start_handler && ctrl->currentState == START_HANDLER)){
 800181a:	4b5e      	ldr	r3, [pc, #376]	; (8001994 <ProcessCommands+0x7a0>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4b65      	ldr	r3, [pc, #404]	; (80019b4 <ProcessCommands+0x7c0>)
 8001820:	681b      	ldr	r3, [r3, #0]
		     (command == stop && ctrl->currentState == SAFETY)||\
 8001822:	429a      	cmp	r2, r3
 8001824:	d116      	bne.n	8001854 <ProcessCommands+0x660>
			 (command == start_handler && ctrl->currentState == START_HANDLER)){
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800182c:	2b00      	cmp	r3, #0
 800182e:	d111      	bne.n	8001854 <ProcessCommands+0x660>

								if (cmd_flag && retransition)
 8001830:	4b61      	ldr	r3, [pc, #388]	; (80019b8 <ProcessCommands+0x7c4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 8190 	beq.w	8001b5a <ProcessCommands+0x966>
 800183a:	4b60      	ldr	r3, [pc, #384]	; (80019bc <ProcessCommands+0x7c8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 818b 	beq.w	8001b5a <ProcessCommands+0x966>
						 	 	 	 	 {
						 	 	 		 	 UART_SendMessage(&huart2, " Currently in the state you are intending to transition to...\n");
 8001844:	495e      	ldr	r1, [pc, #376]	; (80019c0 <ProcessCommands+0x7cc>)
 8001846:	485f      	ldr	r0, [pc, #380]	; (80019c4 <ProcessCommands+0x7d0>)
 8001848:	f7ff fb30 	bl	8000eac <UART_SendMessage>
						 	 	 		 	cmd_flag = FALSE;
 800184c:	4b5a      	ldr	r3, [pc, #360]	; (80019b8 <ProcessCommands+0x7c4>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
								if (cmd_flag && retransition)
 8001852:	e182      	b.n	8001b5a <ProcessCommands+0x966>
						 	 	 	 	 }
	}

	//Handle the case of an unknown command
	else if (!(command == power_off || stop || valve_check || lox_fill || lox_chill || pressurizing || lox_pre_fill || ignition ||start_handler \
 8001854:	4b4f      	ldr	r3, [pc, #316]	; (8001994 <ProcessCommands+0x7a0>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b5b      	ldr	r3, [pc, #364]	; (80019c8 <ProcessCommands+0x7d4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	f000 80e7 	beq.w	8001a30 <ProcessCommands+0x83c>
 8001862:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <ProcessCommands+0x7bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f040 80e2 	bne.w	8001a30 <ProcessCommands+0x83c>
 800186c:	4b4e      	ldr	r3, [pc, #312]	; (80019a8 <ProcessCommands+0x7b4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	f040 80dd 	bne.w	8001a30 <ProcessCommands+0x83c>
 8001876:	4b49      	ldr	r3, [pc, #292]	; (800199c <ProcessCommands+0x7a8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	f040 80d8 	bne.w	8001a30 <ProcessCommands+0x83c>
 8001880:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <ProcessCommands+0x7ac>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	f040 80d3 	bne.w	8001a30 <ProcessCommands+0x83c>
 800188a:	4b48      	ldr	r3, [pc, #288]	; (80019ac <ProcessCommands+0x7b8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f040 80ce 	bne.w	8001a30 <ProcessCommands+0x83c>
 8001894:	4b40      	ldr	r3, [pc, #256]	; (8001998 <ProcessCommands+0x7a4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f040 80c9 	bne.w	8001a30 <ProcessCommands+0x83c>
 800189e:	4b4b      	ldr	r3, [pc, #300]	; (80019cc <ProcessCommands+0x7d8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 80c4 	bne.w	8001a30 <ProcessCommands+0x83c>
 80018a8:	4b42      	ldr	r3, [pc, #264]	; (80019b4 <ProcessCommands+0x7c0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f040 80bf 	bne.w	8001a30 <ProcessCommands+0x83c>
			|| cycle_valves || cycle_voff || IGON || IGOFF || SOV1ON || SOV1OFF || SOV2ON || SOV2OFF || SOV3ON || SOV3OFF || SOV4ON || SOV4OFF || SOV5ON || SOV5OFF ||\
 80018b2:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <ProcessCommands+0x7dc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f040 80ba 	bne.w	8001a30 <ProcessCommands+0x83c>
 80018bc:	4b45      	ldr	r3, [pc, #276]	; (80019d4 <ProcessCommands+0x7e0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f040 80b5 	bne.w	8001a30 <ProcessCommands+0x83c>
 80018c6:	4b44      	ldr	r3, [pc, #272]	; (80019d8 <ProcessCommands+0x7e4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f040 80b0 	bne.w	8001a30 <ProcessCommands+0x83c>
 80018d0:	4b42      	ldr	r3, [pc, #264]	; (80019dc <ProcessCommands+0x7e8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f040 80ab 	bne.w	8001a30 <ProcessCommands+0x83c>
 80018da:	4b41      	ldr	r3, [pc, #260]	; (80019e0 <ProcessCommands+0x7ec>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f040 80a6 	bne.w	8001a30 <ProcessCommands+0x83c>
 80018e4:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <ProcessCommands+0x7f0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f040 80a1 	bne.w	8001a30 <ProcessCommands+0x83c>
 80018ee:	4b3e      	ldr	r3, [pc, #248]	; (80019e8 <ProcessCommands+0x7f4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 809c 	bne.w	8001a30 <ProcessCommands+0x83c>
 80018f8:	4b3c      	ldr	r3, [pc, #240]	; (80019ec <ProcessCommands+0x7f8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f040 8097 	bne.w	8001a30 <ProcessCommands+0x83c>
 8001902:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <ProcessCommands+0x7fc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 8092 	bne.w	8001a30 <ProcessCommands+0x83c>
 800190c:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <ProcessCommands+0x800>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	f040 808d 	bne.w	8001a30 <ProcessCommands+0x83c>
 8001916:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <ProcessCommands+0x804>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f040 8088 	bne.w	8001a30 <ProcessCommands+0x83c>
 8001920:	4b36      	ldr	r3, [pc, #216]	; (80019fc <ProcessCommands+0x808>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	f040 8083 	bne.w	8001a30 <ProcessCommands+0x83c>
 800192a:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <ProcessCommands+0x80c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d17e      	bne.n	8001a30 <ProcessCommands+0x83c>
 8001932:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <ProcessCommands+0x810>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d17a      	bne.n	8001a30 <ProcessCommands+0x83c>
 800193a:	4b33      	ldr	r3, [pc, #204]	; (8001a08 <ProcessCommands+0x814>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d176      	bne.n	8001a30 <ProcessCommands+0x83c>
			 SOV6ON || SOV6OFF || SOV7ON || SOV7OFF || SOV8ON || SOV8OFF || SOV9ON || SOV9OFF )){
 8001942:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <ProcessCommands+0x818>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d172      	bne.n	8001a30 <ProcessCommands+0x83c>
 800194a:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <ProcessCommands+0x81c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d16e      	bne.n	8001a30 <ProcessCommands+0x83c>
 8001952:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <ProcessCommands+0x820>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d16a      	bne.n	8001a30 <ProcessCommands+0x83c>
 800195a:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <ProcessCommands+0x824>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d166      	bne.n	8001a30 <ProcessCommands+0x83c>
 8001962:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <ProcessCommands+0x828>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d162      	bne.n	8001a30 <ProcessCommands+0x83c>
 800196a:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <ProcessCommands+0x82c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d15e      	bne.n	8001a30 <ProcessCommands+0x83c>
 8001972:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <ProcessCommands+0x830>)
 8001974:	681b      	ldr	r3, [r3, #0]
	else if (!(command == power_off || stop || valve_check || lox_fill || lox_chill || pressurizing || lox_pre_fill || ignition ||start_handler \
 8001976:	2b00      	cmp	r3, #0
 8001978:	d15a      	bne.n	8001a30 <ProcessCommands+0x83c>

		if (inv_flag){
 800197a:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <ProcessCommands+0x834>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80ec 	beq.w	8001b5c <ProcessCommands+0x968>
		UART_SendMessage(&huart2, " Invalid command !...\n");
 8001984:	4929      	ldr	r1, [pc, #164]	; (8001a2c <ProcessCommands+0x838>)
 8001986:	480f      	ldr	r0, [pc, #60]	; (80019c4 <ProcessCommands+0x7d0>)
 8001988:	f7ff fa90 	bl	8000eac <UART_SendMessage>
		 inv_flag = FALSE;
 800198c:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <ProcessCommands+0x834>)
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
		if (inv_flag){
 8001992:	e0e3      	b.n	8001b5c <ProcessCommands+0x968>
 8001994:	20000184 	.word	0x20000184
 8001998:	20000014 	.word	0x20000014
 800199c:	2000000c 	.word	0x2000000c
 80019a0:	20000010 	.word	0x20000010
 80019a4:	2000001c 	.word	0x2000001c
 80019a8:	20000008 	.word	0x20000008
 80019ac:	20000018 	.word	0x20000018
 80019b0:	20000004 	.word	0x20000004
 80019b4:	20000024 	.word	0x20000024
 80019b8:	200001f0 	.word	0x200001f0
 80019bc:	20000358 	.word	0x20000358
 80019c0:	080064a4 	.word	0x080064a4
 80019c4:	2000035c 	.word	0x2000035c
 80019c8:	20000000 	.word	0x20000000
 80019cc:	20000020 	.word	0x20000020
 80019d0:	2000002c 	.word	0x2000002c
 80019d4:	20000030 	.word	0x20000030
 80019d8:	20000034 	.word	0x20000034
 80019dc:	20000038 	.word	0x20000038
 80019e0:	2000003c 	.word	0x2000003c
 80019e4:	20000040 	.word	0x20000040
 80019e8:	20000044 	.word	0x20000044
 80019ec:	20000048 	.word	0x20000048
 80019f0:	2000004c 	.word	0x2000004c
 80019f4:	20000050 	.word	0x20000050
 80019f8:	20000054 	.word	0x20000054
 80019fc:	20000058 	.word	0x20000058
 8001a00:	2000005c 	.word	0x2000005c
 8001a04:	20000060 	.word	0x20000060
 8001a08:	20000064 	.word	0x20000064
 8001a0c:	20000068 	.word	0x20000068
 8001a10:	2000006c 	.word	0x2000006c
 8001a14:	20000070 	.word	0x20000070
 8001a18:	20000074 	.word	0x20000074
 8001a1c:	20000078 	.word	0x20000078
 8001a20:	2000007c 	.word	0x2000007c
 8001a24:	20000080 	.word	0x20000080
 8001a28:	200001ec 	.word	0x200001ec
 8001a2c:	080064e4 	.word	0x080064e4
		}

	}

	//Handle the case of commands outside valve check state
	else if (command == cycle_valves ||command == cycle_voff ||command == IGON ||command ==IGOFF \
 8001a30:	4b4d      	ldr	r3, [pc, #308]	; (8001b68 <ProcessCommands+0x974>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b4d      	ldr	r3, [pc, #308]	; (8001b6c <ProcessCommands+0x978>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d07d      	beq.n	8001b38 <ProcessCommands+0x944>
 8001a3c:	4b4a      	ldr	r3, [pc, #296]	; (8001b68 <ProcessCommands+0x974>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b4b      	ldr	r3, [pc, #300]	; (8001b70 <ProcessCommands+0x97c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d077      	beq.n	8001b38 <ProcessCommands+0x944>
 8001a48:	4b47      	ldr	r3, [pc, #284]	; (8001b68 <ProcessCommands+0x974>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <ProcessCommands+0x980>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d071      	beq.n	8001b38 <ProcessCommands+0x944>
 8001a54:	4b44      	ldr	r3, [pc, #272]	; (8001b68 <ProcessCommands+0x974>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <ProcessCommands+0x984>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d06b      	beq.n	8001b38 <ProcessCommands+0x944>
			||command == SOV1ON ||command == SOV1OFF ||command == SOV2ON ||command == SOV2OFF || command ==SOV3ON \
 8001a60:	4b41      	ldr	r3, [pc, #260]	; (8001b68 <ProcessCommands+0x974>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b45      	ldr	r3, [pc, #276]	; (8001b7c <ProcessCommands+0x988>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d065      	beq.n	8001b38 <ProcessCommands+0x944>
 8001a6c:	4b3e      	ldr	r3, [pc, #248]	; (8001b68 <ProcessCommands+0x974>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b43      	ldr	r3, [pc, #268]	; (8001b80 <ProcessCommands+0x98c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d05f      	beq.n	8001b38 <ProcessCommands+0x944>
 8001a78:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <ProcessCommands+0x974>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <ProcessCommands+0x990>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d059      	beq.n	8001b38 <ProcessCommands+0x944>
 8001a84:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <ProcessCommands+0x974>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <ProcessCommands+0x994>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d053      	beq.n	8001b38 <ProcessCommands+0x944>
 8001a90:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <ProcessCommands+0x974>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b3d      	ldr	r3, [pc, #244]	; (8001b8c <ProcessCommands+0x998>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d04d      	beq.n	8001b38 <ProcessCommands+0x944>
			||command ==SOV3OFF ||command == SOV4ON ||command == SOV4OFF ||command == SOV5ON ||command ==SOV5OFF \
 8001a9c:	4b32      	ldr	r3, [pc, #200]	; (8001b68 <ProcessCommands+0x974>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b3b      	ldr	r3, [pc, #236]	; (8001b90 <ProcessCommands+0x99c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d047      	beq.n	8001b38 <ProcessCommands+0x944>
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <ProcessCommands+0x974>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b39      	ldr	r3, [pc, #228]	; (8001b94 <ProcessCommands+0x9a0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d041      	beq.n	8001b38 <ProcessCommands+0x944>
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <ProcessCommands+0x974>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <ProcessCommands+0x9a4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d03b      	beq.n	8001b38 <ProcessCommands+0x944>
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <ProcessCommands+0x974>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <ProcessCommands+0x9a8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d035      	beq.n	8001b38 <ProcessCommands+0x944>
 8001acc:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <ProcessCommands+0x974>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <ProcessCommands+0x9ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d02f      	beq.n	8001b38 <ProcessCommands+0x944>
			||command ==SOV6ON ||command == SOV6OFF ||command == SOV7ON ||command == SOV7OFF ||command == SOV8ON \
 8001ad8:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <ProcessCommands+0x974>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <ProcessCommands+0x9b0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d029      	beq.n	8001b38 <ProcessCommands+0x944>
 8001ae4:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <ProcessCommands+0x974>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b2f      	ldr	r3, [pc, #188]	; (8001ba8 <ProcessCommands+0x9b4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d023      	beq.n	8001b38 <ProcessCommands+0x944>
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <ProcessCommands+0x974>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <ProcessCommands+0x9b8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d01d      	beq.n	8001b38 <ProcessCommands+0x944>
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <ProcessCommands+0x974>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <ProcessCommands+0x9bc>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d017      	beq.n	8001b38 <ProcessCommands+0x944>
 8001b08:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <ProcessCommands+0x974>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <ProcessCommands+0x9c0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d011      	beq.n	8001b38 <ProcessCommands+0x944>
			||command ==SOV8OFF || command ==SOV9ON || command ==SOV9OFF){
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <ProcessCommands+0x974>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <ProcessCommands+0x9c4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d00b      	beq.n	8001b38 <ProcessCommands+0x944>
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <ProcessCommands+0x974>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <ProcessCommands+0x9c8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d005      	beq.n	8001b38 <ProcessCommands+0x944>
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <ProcessCommands+0x974>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <ProcessCommands+0x9cc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d111      	bne.n	8001b5c <ProcessCommands+0x968>

			if (cmd_flag && !(ctrl->currentState == VALVE_CHECK)){
 8001b38:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <ProcessCommands+0x9d0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00d      	beq.n	8001b5c <ProcessCommands+0x968>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d008      	beq.n	8001b5c <ProcessCommands+0x968>
				UART_SendMessage(&huart2, " This command is only valid under the valve check state...\n");
 8001b4a:	491f      	ldr	r1, [pc, #124]	; (8001bc8 <ProcessCommands+0x9d4>)
 8001b4c:	481f      	ldr	r0, [pc, #124]	; (8001bcc <ProcessCommands+0x9d8>)
 8001b4e:	f7ff f9ad 	bl	8000eac <UART_SendMessage>
				cmd_flag = FALSE;
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <ProcessCommands+0x9d0>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e000      	b.n	8001b5c <ProcessCommands+0x968>
								if (cmd_flag && retransition)
 8001b5a:	bf00      	nop
			}

	}


		return success;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000184 	.word	0x20000184
 8001b6c:	2000002c 	.word	0x2000002c
 8001b70:	20000030 	.word	0x20000030
 8001b74:	20000034 	.word	0x20000034
 8001b78:	20000038 	.word	0x20000038
 8001b7c:	2000003c 	.word	0x2000003c
 8001b80:	20000040 	.word	0x20000040
 8001b84:	20000044 	.word	0x20000044
 8001b88:	20000048 	.word	0x20000048
 8001b8c:	2000004c 	.word	0x2000004c
 8001b90:	20000050 	.word	0x20000050
 8001b94:	20000054 	.word	0x20000054
 8001b98:	20000058 	.word	0x20000058
 8001b9c:	2000005c 	.word	0x2000005c
 8001ba0:	20000060 	.word	0x20000060
 8001ba4:	20000064 	.word	0x20000064
 8001ba8:	20000068 	.word	0x20000068
 8001bac:	2000006c 	.word	0x2000006c
 8001bb0:	20000070 	.word	0x20000070
 8001bb4:	20000074 	.word	0x20000074
 8001bb8:	20000078 	.word	0x20000078
 8001bbc:	2000007c 	.word	0x2000007c
 8001bc0:	20000080 	.word	0x20000080
 8001bc4:	200001f0 	.word	0x200001f0
 8001bc8:	080064fc 	.word	0x080064fc
 8001bcc:	2000035c 	.word	0x2000035c

08001bd0 <NominalValueCheck>:
	return n;
}
// Function in charge of determining that the Sensor Values are Nominal
// Need to know what is the Nominal Range
uint32_t NominalValueCheck(struct StateVars *ctrl, char marionette[])
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
	        }
	    }

	    if (j == 9){ nominal= TRUE;}//If all the values are correct
*/
	nominal = TRUE; // just for testing
 8001bda:	2301      	movs	r3, #1
 8001bdc:	60fb      	str	r3, [r7, #12]
 return nominal;
 8001bde:	68fb      	ldr	r3, [r7, #12]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <Get_State_Disagree_Error_Msg>:


void Get_State_Disagree_Error_Msg(char *errorMessage, enum StateName expectedState, \
			enum StateName passedState)
{
 8001bec:	b5b0      	push	{r4, r5, r7, lr}
 8001bee:	b0a2      	sub	sp, #136	; 0x88
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	70fb      	strb	r3, [r7, #3]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	70bb      	strb	r3, [r7, #2]
	char state_disagree[VALVE_STATE_BUFFER_SIZE] = "ERROR: Expected State, Passed State Disagree. ";
 8001bfc:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <Get_State_Disagree_Error_Msg+0xe4>)
 8001bfe:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001c02:	461d      	mov	r5, r3
 8001c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c0c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001c10:	c407      	stmia	r4!, {r0, r1, r2}
 8001c12:	8023      	strh	r3, [r4, #0]
 8001c14:	3402      	adds	r4, #2
 8001c16:	0c1b      	lsrs	r3, r3, #16
 8001c18:	7023      	strb	r3, [r4, #0]
 8001c1a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001c1e:	2231      	movs	r2, #49	; 0x31
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 ffe8 	bl	8005bf8 <memset>
	char temp[32];
	strcat(state_disagree, "Expected: ");
 8001c28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe facf 	bl	80001d0 <strlen>
 8001c32:	4603      	mov	r3, r0
 8001c34:	461a      	mov	r2, r3
 8001c36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c3a:	4413      	add	r3, r2
 8001c3c:	4925      	ldr	r1, [pc, #148]	; (8001cd4 <Get_State_Disagree_Error_Msg+0xe8>)
 8001c3e:	461a      	mov	r2, r3
 8001c40:	460b      	mov	r3, r1
 8001c42:	cb03      	ldmia	r3!, {r0, r1}
 8001c44:	6010      	str	r0, [r2, #0]
 8001c46:	6051      	str	r1, [r2, #4]
 8001c48:	8819      	ldrh	r1, [r3, #0]
 8001c4a:	789b      	ldrb	r3, [r3, #2]
 8001c4c:	8111      	strh	r1, [r2, #8]
 8001c4e:	7293      	strb	r3, [r2, #10]
	sprintf(temp, "%d", expectedState);
 8001c50:	78fa      	ldrb	r2, [r7, #3]
 8001c52:	f107 0308 	add.w	r3, r7, #8
 8001c56:	4920      	ldr	r1, [pc, #128]	; (8001cd8 <Get_State_Disagree_Error_Msg+0xec>)
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 ffd5 	bl	8005c08 <siprintf>
	strcat(state_disagree, temp);
 8001c5e:	f107 0208 	add.w	r2, r7, #8
 8001c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 ffed 	bl	8005c48 <strcat>
	strcat(state_disagree,"Passed: ");
 8001c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe faac 	bl	80001d0 <strlen>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c80:	4413      	add	r3, r2
 8001c82:	4916      	ldr	r1, [pc, #88]	; (8001cdc <Get_State_Disagree_Error_Msg+0xf0>)
 8001c84:	461a      	mov	r2, r3
 8001c86:	460b      	mov	r3, r1
 8001c88:	cb03      	ldmia	r3!, {r0, r1}
 8001c8a:	6010      	str	r0, [r2, #0]
 8001c8c:	6051      	str	r1, [r2, #4]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	7213      	strb	r3, [r2, #8]
	sprintf(temp, "%d", passedState);
 8001c92:	78ba      	ldrb	r2, [r7, #2]
 8001c94:	f107 0308 	add.w	r3, r7, #8
 8001c98:	490f      	ldr	r1, [pc, #60]	; (8001cd8 <Get_State_Disagree_Error_Msg+0xec>)
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 ffb4 	bl	8005c08 <siprintf>
	strcat(state_disagree, temp);
 8001ca0:	f107 0208 	add.w	r2, r7, #8
 8001ca4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 ffcc 	bl	8005c48 <strcat>
	memset(errorMessage, '\0', VALVE_STATE_BUFFER_SIZE);
 8001cb0:	2260      	movs	r2, #96	; 0x60
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f003 ff9f 	bl	8005bf8 <memset>
	strcpy(errorMessage, state_disagree);
 8001cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f003 ffd0 	bl	8005c66 <strcpy>
}
 8001cc6:	bf00      	nop
 8001cc8:	3788      	adds	r7, #136	; 0x88
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	08006554 	.word	0x08006554
 8001cd4:	08006538 	.word	0x08006538
 8001cd8:	08006544 	.word	0x08006544
 8001cdc:	08006548 	.word	0x08006548

08001ce0 <Get_Invalid_State_Error_Msg>:

void Get_Invalid_State_Error_Msg(char *errorMessage, enum StateName state, enum StateName lastState)
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b0a3      	sub	sp, #140	; 0x8c
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	70fb      	strb	r3, [r7, #3]
 8001cec:	4613      	mov	r3, r2
 8001cee:	70bb      	strb	r3, [r7, #2]
	char state_invalid[VALVE_STATE_BUFFER_SIZE] = "Invalid State: ";
 8001cf0:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <Get_Invalid_State_Error_Msg+0xac>)
 8001cf2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001cf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001cfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d00:	2250      	movs	r2, #80	; 0x50
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f003 ff77 	bl	8005bf8 <memset>
	char temp[32];
	sprintf(temp, "%d",state);
 8001d0a:	78fa      	ldrb	r2, [r7, #3]
 8001d0c:	f107 0308 	add.w	r3, r7, #8
 8001d10:	491f      	ldr	r1, [pc, #124]	; (8001d90 <Get_Invalid_State_Error_Msg+0xb0>)
 8001d12:	4618      	mov	r0, r3
 8001d14:	f003 ff78 	bl	8005c08 <siprintf>
	strcat(state_invalid, temp);
 8001d18:	f107 0208 	add.w	r2, r7, #8
 8001d1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f003 ff90 	bl	8005c48 <strcat>
	strcat(state_invalid, ", lastState: ");
 8001d28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fa4f 	bl	80001d0 <strlen>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d3a:	4413      	add	r3, r2
 8001d3c:	4a15      	ldr	r2, [pc, #84]	; (8001d94 <Get_Invalid_State_Error_Msg+0xb4>)
 8001d3e:	461c      	mov	r4, r3
 8001d40:	4613      	mov	r3, r2
 8001d42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001d44:	6020      	str	r0, [r4, #0]
 8001d46:	6061      	str	r1, [r4, #4]
 8001d48:	60a2      	str	r2, [r4, #8]
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	81a3      	strh	r3, [r4, #12]
	sprintf(temp, "%d", lastState);
 8001d4e:	78ba      	ldrb	r2, [r7, #2]
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	490e      	ldr	r1, [pc, #56]	; (8001d90 <Get_Invalid_State_Error_Msg+0xb0>)
 8001d56:	4618      	mov	r0, r3
 8001d58:	f003 ff56 	bl	8005c08 <siprintf>
	strcat(state_invalid, temp);
 8001d5c:	f107 0208 	add.w	r2, r7, #8
 8001d60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 ff6e 	bl	8005c48 <strcat>
	memset(errorMessage, '\0', VALVE_STATE_BUFFER_SIZE);
 8001d6c:	2260      	movs	r2, #96	; 0x60
 8001d6e:	2100      	movs	r1, #0
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f003 ff41 	bl	8005bf8 <memset>
	strcpy(errorMessage, state_invalid);
 8001d76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f003 ff72 	bl	8005c66 <strcpy>
}
 8001d82:	bf00      	nop
 8001d84:	378c      	adds	r7, #140	; 0x8c
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd90      	pop	{r4, r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	080065c4 	.word	0x080065c4
 8001d90:	08006544 	.word	0x08006544
 8001d94:	080065b4 	.word	0x080065b4

08001d98 <OxidizerStart>:

#include <oxidizer_start.h>
#include "messages.h"
#include "utilities.h"

uint32_t OxidizerStart(struct StateVars *ctrl){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

	uint32_t success = FALSE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

	ctrl->valveConfiguration = StateConfiguration();
 8001da4:	f000 fd2c 	bl	8002800 <StateConfiguration>
 8001da8:	4602      	mov	r2, r0
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV1 	\
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2223      	movs	r2, #35	; 0x23
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV6);

	


	uint32_t TIMEOUT = 200;// .2 second time out
 8001db4:	23c8      	movs	r3, #200	; 0xc8
 8001db6:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fce2 	bl	8002788 <VerifyState>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d05f      	beq.n	8001e8a <OxidizerStart+0xf2>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 fcd9 	bl	8002788 <VerifyState>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d056      	beq.n	8001e8a <OxidizerStart+0xf2>
    {
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d042      	beq.n	8001e70 <OxidizerStart+0xd8>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  1  |   1   |  0  |   0  |   0  |   1  |   0   |  0  |  0  |  0

    		StateStatus(ctrl);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fc82 	bl	80026f4 <StateStatus>
    		nominal = NominalValueCheck(ctrl, Rx_Buffer);
 8001df0:	4930      	ldr	r1, [pc, #192]	; (8001eb4 <OxidizerStart+0x11c>)
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff feec 	bl	8001bd0 <NominalValueCheck>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <OxidizerStart+0x120>)
 8001dfc:	601a      	str	r2, [r3, #0]

    		uint32_t now = HAL_GetTick();
 8001dfe:	f001 fd37 	bl	8003870 <HAL_GetTick>
 8001e02:	60f8      	str	r0, [r7, #12]
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d003      	beq.n	8001e1c <OxidizerStart+0x84>
    	    {
    			success = StateInitialize(ctrl);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fe45 	bl	8002aa4 <StateInitialize>
 8001e1a:	6178      	str	r0, [r7, #20]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	429a      	cmp	r2, r3
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	617b      	str	r3, [r7, #20]



    		if(now - ctrl->timeStarted > TIMEOUT && success && nominal)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d20a      	bcs.n	8001e54 <OxidizerStart+0xbc>
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <OxidizerStart+0xbc>
 8001e44:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <OxidizerStart+0x120>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <OxidizerStart+0xbc>
    		{
        		ctrl->currentState = FIRING;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2209      	movs	r2, #9
 8001e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}

    		// Increment state counter
			ctrl->stateCounter++;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e66:	d11f      	bne.n	8001ea8 <OxidizerStart+0x110>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 8001e6e:	e01b      	b.n	8001ea8 <OxidizerStart+0x110>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, OXIDIZER_START, ctrl->currentState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e76:	461a      	mov	r2, r3
 8001e78:	2108      	movs	r1, #8
 8001e7a:	4810      	ldr	r0, [pc, #64]	; (8001ebc <OxidizerStart+0x124>)
 8001e7c:	f7ff feb6 	bl	8001bec <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2, Tx_Buffer);
 8001e80:	490e      	ldr	r1, [pc, #56]	; (8001ebc <OxidizerStart+0x124>)
 8001e82:	480f      	ldr	r0, [pc, #60]	; (8001ec0 <OxidizerStart+0x128>)
 8001e84:	f7ff f812 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 8001e88:	e00e      	b.n	8001ea8 <OxidizerStart+0x110>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e96:	461a      	mov	r2, r3
 8001e98:	4808      	ldr	r0, [pc, #32]	; (8001ebc <OxidizerStart+0x124>)
 8001e9a:	f7ff ff21 	bl	8001ce0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8001e9e:	4907      	ldr	r1, [pc, #28]	; (8001ebc <OxidizerStart+0x124>)
 8001ea0:	4807      	ldr	r0, [pc, #28]	; (8001ec0 <OxidizerStart+0x128>)
 8001ea2:	f7ff f803 	bl	8000eac <UART_SendMessage>
 8001ea6:	e000      	b.n	8001eaa <OxidizerStart+0x112>
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 8001ea8:	bf00      	nop
    }
	return success;
 8001eaa:	697b      	ldr	r3, [r7, #20]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	200002f4 	.word	0x200002f4
 8001eb8:	2000017c 	.word	0x2000017c
 8001ebc:	20000188 	.word	0x20000188
 8001ec0:	2000035c 	.word	0x2000035c

08001ec4 <Pressurize>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "pressurize.h"
#include <messages.h>

uint32_t Pressurize(struct StateVars *ctrl){
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]

	ctrl->valveConfiguration = StateConfiguration();
 8001ed0:	f000 fc96 	bl	8002800 <StateConfiguration>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget = ((uint16_t)SOV1 	\
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2203      	movs	r2, #3
 8001ede:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV2);

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fc4e 	bl	8002788 <VerifyState>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d040      	beq.n	8001f74 <Pressurize+0xb0>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fc45 	bl	8002788 <VerifyState>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d037      	beq.n	8001f74 <Pressurize+0xb0>
    {
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f0a:	f003 0306 	and.w	r3, r3, #6
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d123      	bne.n	8001f5a <Pressurize+0x96>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8    SOV9   IG1
    		//|  1  |   1  |   0  |   0  |   0  |   0  |   0  |   0  |   0   |  0

    		StateStatus(ctrl);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fbee 	bl	80026f4 <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d003      	beq.n	8001f30 <Pressurize+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 fdbb 	bl	8002aa4 <StateInitialize>
 8001f2e:	60f8      	str	r0, [r7, #12]
    	    }

    		ProcessCommands(ctrl);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff f95f 	bl	80011f4 <ProcessCommands>

    		//Check the nominal value
			NominalValueCheck(ctrl, Rx_Buffer);
 8001f36:	491a      	ldr	r1, [pc, #104]	; (8001fa0 <Pressurize+0xdc>)
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff fe49 	bl	8001bd0 <NominalValueCheck>

    		// Increment state counter
			ctrl->stateCounter++;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d11f      	bne.n	8001f92 <Pressurize+0xce>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 8001f58:	e01b      	b.n	8001f92 <Pressurize+0xce>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, PRESSURIZE, ctrl->currentState);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f60:	461a      	mov	r2, r3
 8001f62:	2106      	movs	r1, #6
 8001f64:	480f      	ldr	r0, [pc, #60]	; (8001fa4 <Pressurize+0xe0>)
 8001f66:	f7ff fe41 	bl	8001bec <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8001f6a:	490e      	ldr	r1, [pc, #56]	; (8001fa4 <Pressurize+0xe0>)
 8001f6c:	480e      	ldr	r0, [pc, #56]	; (8001fa8 <Pressurize+0xe4>)
 8001f6e:	f7fe ff9d 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 8001f72:	e00e      	b.n	8001f92 <Pressurize+0xce>
    	}
    }else{
    	    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f80:	461a      	mov	r2, r3
 8001f82:	4808      	ldr	r0, [pc, #32]	; (8001fa4 <Pressurize+0xe0>)
 8001f84:	f7ff feac 	bl	8001ce0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 8001f88:	4906      	ldr	r1, [pc, #24]	; (8001fa4 <Pressurize+0xe0>)
 8001f8a:	4807      	ldr	r0, [pc, #28]	; (8001fa8 <Pressurize+0xe4>)
 8001f8c:	f7fe ff8e 	bl	8000eac <UART_SendMessage>
 8001f90:	e000      	b.n	8001f94 <Pressurize+0xd0>
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 8001f92:	bf00      	nop
    }
	return success;
 8001f94:	68fb      	ldr	r3, [r7, #12]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200002f4 	.word	0x200002f4
 8001fa4:	20000188 	.word	0x20000188
 8001fa8:	2000035c 	.word	0x2000035c

08001fac <Purge>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "purge.h"
#include "messages.h"
#include "utilities.h"

uint32_t Purge(struct StateVars *ctrl){
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]

	ctrl->valveConfiguration = StateConfiguration();
 8001fb8:	f000 fc22 	bl	8002800 <StateConfiguration>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV3  \
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fc8:	631a      	str	r2, [r3, #48]	; 0x30
			  |(uint16_t)SOV9);


	uint32_t TIMEOUT = 3000; // 3 second time out
 8001fca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001fce:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 fbd6 	bl	8002788 <VerifyState>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d05f      	beq.n	80020a2 <Purge+0xf6>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 fbcd 	bl	8002788 <VerifyState>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d056      	beq.n	80020a2 <Purge+0xf6>
    {
    	if((ctrl->currentState & PURGE) == PURGE){
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ffa:	f003 030a 	and.w	r3, r3, #10
 8001ffe:	2b0a      	cmp	r3, #10
 8002000:	d142      	bne.n	8002088 <Purge+0xdc>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  0  |   0  |   1  |   0  |   0  |   0  |   0  |   0  |  1  |  0

    		StateStatus(ctrl);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 fb76 	bl	80026f4 <StateStatus>
    		nominal = NominalValueCheck(ctrl, Rx_Buffer);
 8002008:	4930      	ldr	r1, [pc, #192]	; (80020cc <Purge+0x120>)
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff fde0 	bl	8001bd0 <NominalValueCheck>
 8002010:	4602      	mov	r2, r0
 8002012:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <Purge+0x124>)
 8002014:	601a      	str	r2, [r3, #0]


    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002022:	429a      	cmp	r2, r3
 8002024:	d003      	beq.n	800202e <Purge+0x82>
    	    {
    			success = StateInitialize(ctrl);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fd3c 	bl	8002aa4 <StateInitialize>
 800202c:	6178      	str	r0, [r7, #20]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	429a      	cmp	r2, r3
 8002038:	bf0c      	ite	eq
 800203a:	2301      	moveq	r3, #1
 800203c:	2300      	movne	r3, #0
 800203e:	b2db      	uxtb	r3, r3
 8002040:	617b      	str	r3, [r7, #20]


			uint32_t now = HAL_GetTick();
 8002042:	f001 fc15 	bl	8003870 <HAL_GetTick>
 8002046:	60f8      	str	r0, [r7, #12]

    		if(now - ctrl->timeStarted > TIMEOUT && success && nominal)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	429a      	cmp	r2, r3
 8002054:	d20a      	bcs.n	800206c <Purge+0xc0>
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d007      	beq.n	800206c <Purge+0xc0>
 800205c:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <Purge+0x124>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <Purge+0xc0>
    		{
        		ctrl->currentState= SAFETY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2205      	movs	r2, #5
 8002068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}

    		// Increment state counter
			ctrl->stateCounter++;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207e:	d11f      	bne.n	80020c0 <Purge+0x114>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & PURGE) == PURGE){
 8002086:	e01b      	b.n	80020c0 <Purge+0x114>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, PURGE, ctrl->currentState);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800208e:	461a      	mov	r2, r3
 8002090:	210a      	movs	r1, #10
 8002092:	4810      	ldr	r0, [pc, #64]	; (80020d4 <Purge+0x128>)
 8002094:	f7ff fdaa 	bl	8001bec <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8002098:	490e      	ldr	r1, [pc, #56]	; (80020d4 <Purge+0x128>)
 800209a:	480f      	ldr	r0, [pc, #60]	; (80020d8 <Purge+0x12c>)
 800209c:	f7fe ff06 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & PURGE) == PURGE){
 80020a0:	e00e      	b.n	80020c0 <Purge+0x114>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020ae:	461a      	mov	r2, r3
 80020b0:	4808      	ldr	r0, [pc, #32]	; (80020d4 <Purge+0x128>)
 80020b2:	f7ff fe15 	bl	8001ce0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 80020b6:	4907      	ldr	r1, [pc, #28]	; (80020d4 <Purge+0x128>)
 80020b8:	4807      	ldr	r0, [pc, #28]	; (80020d8 <Purge+0x12c>)
 80020ba:	f7fe fef7 	bl	8000eac <UART_SendMessage>
 80020be:	e000      	b.n	80020c2 <Purge+0x116>
    	if((ctrl->currentState & PURGE) == PURGE){
 80020c0:	bf00      	nop
    }
	return success;
 80020c2:	697b      	ldr	r3, [r7, #20]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200002f4 	.word	0x200002f4
 80020d0:	2000017c 	.word	0x2000017c
 80020d4:	20000188 	.word	0x20000188
 80020d8:	2000035c 	.word	0x2000035c

080020dc <Safety>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "safety.h"
#include <messages.h>

uint32_t Safety(struct StateVars *ctrl) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

	uint32_t success = FALSE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]

	ctrl->valveConfiguration = StateConfiguration();
 80020e8:	f000 fb8a 	bl	8002800 <StateConfiguration>
 80020ec:	4602      	mov	r2, r0
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = (uint16_t) SOV4 | (uint16_t) SOV8;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2288      	movs	r2, #136	; 0x88
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30

	if (VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState)) {
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 fb42 	bl	8002788 <VerifyState>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d04a      	beq.n	80021a0 <Safety+0xc4>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fb39 	bl	8002788 <VerifyState>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d041      	beq.n	80021a0 <Safety+0xc4>
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002122:	f003 0305 	and.w	r3, r3, #5
 8002126:	2b05      	cmp	r3, #5
 8002128:	d12d      	bne.n	8002186 <Safety+0xaa>
			// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
			// | 0  |   0  |   0  |   1  |   0  |   0  |    0|    1  |  0  |  0

			StateStatus(ctrl);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fae2 	bl	80026f4 <StateStatus>
			// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800213c:	429a      	cmp	r2, r3
 800213e:	d003      	beq.n	8002148 <Safety+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fcaf 	bl	8002aa4 <StateInitialize>
 8002146:	60f8      	str	r0, [r7, #12]
    	    }

            ProcessCommands(ctrl);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff f853 	bl	80011f4 <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	429a      	cmp	r2, r3
 8002158:	bf0c      	ite	eq
 800215a:	2301      	moveq	r3, #1
 800215c:	2300      	movne	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	60fb      	str	r3, [r7, #12]

			NominalValueCheck(ctrl, Rx_Buffer);
 8002162:	491a      	ldr	r1, [pc, #104]	; (80021cc <Safety+0xf0>)
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff fd33 	bl	8001bd0 <NominalValueCheck>

			ctrl->stateCounter++;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217c:	d11f      	bne.n	80021be <Safety+0xe2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 8002184:	e01b      	b.n	80021be <Safety+0xe2>

		} else {
			// Log Expected State != Passed State
			Get_State_Disagree_Error_Msg(Tx_Buffer, SAFETY, ctrl->currentState);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800218c:	461a      	mov	r2, r3
 800218e:	2105      	movs	r1, #5
 8002190:	480f      	ldr	r0, [pc, #60]	; (80021d0 <Safety+0xf4>)
 8002192:	f7ff fd2b 	bl	8001bec <Get_State_Disagree_Error_Msg>
			UART_SendMessage(&huart2,Tx_Buffer);
 8002196:	490e      	ldr	r1, [pc, #56]	; (80021d0 <Safety+0xf4>)
 8002198:	480e      	ldr	r0, [pc, #56]	; (80021d4 <Safety+0xf8>)
 800219a:	f7fe fe87 	bl	8000eac <UART_SendMessage>
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 800219e:	e00e      	b.n	80021be <Safety+0xe2>
		}
	} else {
		// Log Invalid State
		Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021ac:	461a      	mov	r2, r3
 80021ae:	4808      	ldr	r0, [pc, #32]	; (80021d0 <Safety+0xf4>)
 80021b0:	f7ff fd96 	bl	8001ce0 <Get_Invalid_State_Error_Msg>
		UART_SendMessage(&huart2,Tx_Buffer);
 80021b4:	4906      	ldr	r1, [pc, #24]	; (80021d0 <Safety+0xf4>)
 80021b6:	4807      	ldr	r0, [pc, #28]	; (80021d4 <Safety+0xf8>)
 80021b8:	f7fe fe78 	bl	8000eac <UART_SendMessage>
 80021bc:	e000      	b.n	80021c0 <Safety+0xe4>
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 80021be:	bf00      	nop
	}
	return success;
 80021c0:	68fb      	ldr	r3, [r7, #12]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200002f4 	.word	0x200002f4
 80021d0:	20000188 	.word	0x20000188
 80021d4:	2000035c 	.word	0x2000035c

080021d8 <StartHandler>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include <start_handler.h>
#include <messages.h>

uint32_t StartHandler(struct StateVars *ctrl){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

	uint32_t success = FALSE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 80021e4:	f000 fb0c 	bl	8002800 <StateConfiguration>
 80021e8:	4602      	mov	r2, r0
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	62da      	str	r2, [r3, #44]	; 0x2c

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState)){
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 fac7 	bl	8002788 <VerifyState>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d035      	beq.n	800226c <StartHandler+0x94>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fabe 	bl	8002788 <VerifyState>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d02c      	beq.n	800226c <StartHandler+0x94>


    		//StateStatus(ctrl);

    		// If this is the first time, initialize state
     		if(ctrl->currentState != ctrl->lastState)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800221e:	429a      	cmp	r2, r3
 8002220:	d003      	beq.n	800222a <StartHandler+0x52>
    	    {
    	    	success = StateInitialize(ctrl);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fc3e 	bl	8002aa4 <StateInitialize>
 8002228:	60f8      	str	r0, [r7, #12]
    	    }

    		ProcessCommands(ctrl);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe ffe2 	bl	80011f4 <ProcessCommands>

			success &= (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	429a      	cmp	r2, r3
 800223a:	d101      	bne.n	8002240 <StartHandler+0x68>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <StartHandler+0x6a>
 8002240:	2300      	movs	r3, #0
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4013      	ands	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]

			NominalValueCheck(ctrl, Rx_Buffer);
 8002248:	4913      	ldr	r1, [pc, #76]	; (8002298 <StartHandler+0xc0>)
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff fcc0 	bl	8001bd0 <NominalValueCheck>

    		// Increment state counter
			ctrl->stateCounter++;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002262:	d112      	bne.n	800228a <StartHandler+0xb2>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & START_HANDLER) == START_HANDLER){
 800226a:	e00e      	b.n	800228a <StartHandler+0xb2>
    		Get_State_Disagree_Error_Msg(Tx_Buffer, START_HANDLER, ctrl->currentState);
    		UART_SendMessage(&huart2,Tx_Buffer);
    	}
    }else{
    	    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002278:	461a      	mov	r2, r3
 800227a:	4808      	ldr	r0, [pc, #32]	; (800229c <StartHandler+0xc4>)
 800227c:	f7ff fd30 	bl	8001ce0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8002280:	4906      	ldr	r1, [pc, #24]	; (800229c <StartHandler+0xc4>)
 8002282:	4807      	ldr	r0, [pc, #28]	; (80022a0 <StartHandler+0xc8>)
 8002284:	f7fe fe12 	bl	8000eac <UART_SendMessage>
 8002288:	e000      	b.n	800228c <StartHandler+0xb4>
    	if((ctrl->currentState & START_HANDLER) == START_HANDLER){
 800228a:	bf00      	nop
    }
	return success;
 800228c:	68fb      	ldr	r3, [r7, #12]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200002f4 	.word	0x200002f4
 800229c:	20000188 	.word	0x20000188
 80022a0:	2000035c 	.word	0x2000035c

080022a4 <StateMachine>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)

#include "state_machine.h"

void StateMachine(uint32_t control, struct StateVars *ctrl)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
	while(TRUE == control)
 80022ae:	e087      	b.n	80023c0 <StateMachine+0x11c>
	{
		if(VerifyState(ctrl->currentState))
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 fa66 	bl	8002788 <VerifyState>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d06c      	beq.n	800239c <StateMachine+0xf8>
		{
			switch(ctrl->currentState)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c8:	2b0c      	cmp	r3, #12
 80022ca:	d861      	bhi.n	8002390 <StateMachine+0xec>
 80022cc:	a201      	add	r2, pc, #4	; (adr r2, 80022d4 <StateMachine+0x30>)
 80022ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d2:	bf00      	nop
 80022d4:	08002309 	.word	0x08002309
 80022d8:	08002315 	.word	0x08002315
 80022dc:	0800231f 	.word	0x0800231f
 80022e0:	0800232b 	.word	0x0800232b
 80022e4:	08002337 	.word	0x08002337
 80022e8:	08002341 	.word	0x08002341
 80022ec:	0800234b 	.word	0x0800234b
 80022f0:	08002355 	.word	0x08002355
 80022f4:	0800235f 	.word	0x0800235f
 80022f8:	08002369 	.word	0x08002369
 80022fc:	08002373 	.word	0x08002373
 8002300:	0800237d 	.word	0x0800237d
 8002304:	08002387 	.word	0x08002387
			{
			    case START_HANDLER:
			    	control = StartHandler(ctrl);
 8002308:	6838      	ldr	r0, [r7, #0]
 800230a:	f7ff ff65 	bl	80021d8 <StartHandler>
 800230e:	4603      	mov	r3, r0
 8002310:	607b      	str	r3, [r7, #4]
			    	break;
 8002312:	e055      	b.n	80023c0 <StateMachine+0x11c>
				case VALVE_CHECK:
					control = ValveCheck(ctrl);
 8002314:	6838      	ldr	r0, [r7, #0]
 8002316:	f001 f98f 	bl	8003638 <ValveCheck>
 800231a:	6078      	str	r0, [r7, #4]
					break;
 800231c:	e050      	b.n	80023c0 <StateMachine+0x11c>
				case LOX_PRE_FILL:
					control = LoxPreFill(ctrl);
 800231e:	6838      	ldr	r0, [r7, #0]
 8002320:	f7fe fd14 	bl	8000d4c <LoxPreFill>
 8002324:	4603      	mov	r3, r0
 8002326:	607b      	str	r3, [r7, #4]
					break;
 8002328:	e04a      	b.n	80023c0 <StateMachine+0x11c>
				case LOX_FILL:
					control = LoxFill(ctrl);
 800232a:	6838      	ldr	r0, [r7, #0]
 800232c:	f7fe fc90 	bl	8000c50 <LoxFill>
 8002330:	4603      	mov	r3, r0
 8002332:	607b      	str	r3, [r7, #4]
					break;
 8002334:	e044      	b.n	80023c0 <StateMachine+0x11c>
				case LOX_CHILL:
					control = LoxChill(ctrl);
 8002336:	6838      	ldr	r0, [r7, #0]
 8002338:	f7fe fc0c 	bl	8000b54 <LoxChill>
 800233c:	6078      	str	r0, [r7, #4]
				    break;
 800233e:	e03f      	b.n	80023c0 <StateMachine+0x11c>
			    case SAFETY:
					control = Safety(ctrl);
 8002340:	6838      	ldr	r0, [r7, #0]
 8002342:	f7ff fecb 	bl	80020dc <Safety>
 8002346:	6078      	str	r0, [r7, #4]
					break;
 8002348:	e03a      	b.n	80023c0 <StateMachine+0x11c>
				case PRESSURIZE:
					control = Pressurize(ctrl);
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	f7ff fdba 	bl	8001ec4 <Pressurize>
 8002350:	6078      	str	r0, [r7, #4]
					break;
 8002352:	e035      	b.n	80023c0 <StateMachine+0x11c>
				case IGNITION:
					control = Ignition(ctrl);
 8002354:	6838      	ldr	r0, [r7, #0]
 8002356:	f7fe fa35 	bl	80007c4 <Ignition>
 800235a:	6078      	str	r0, [r7, #4]
					break;
 800235c:	e030      	b.n	80023c0 <StateMachine+0x11c>
				case OXIDIZER_START:
					control = OxidizerStart(ctrl);
 800235e:	6838      	ldr	r0, [r7, #0]
 8002360:	f7ff fd1a 	bl	8001d98 <OxidizerStart>
 8002364:	6078      	str	r0, [r7, #4]
					break;
 8002366:	e02b      	b.n	80023c0 <StateMachine+0x11c>
				case FIRING:
					control = Firing(ctrl);
 8002368:	6838      	ldr	r0, [r7, #0]
 800236a:	f7fe f993 	bl	8000694 <Firing>
 800236e:	6078      	str	r0, [r7, #4]
					break;
 8002370:	e026      	b.n	80023c0 <StateMachine+0x11c>
				case PURGE:
					control = Purge(ctrl);
 8002372:	6838      	ldr	r0, [r7, #0]
 8002374:	f7ff fe1a 	bl	8001fac <Purge>
 8002378:	6078      	str	r0, [r7, #4]
					break;
 800237a:	e021      	b.n	80023c0 <StateMachine+0x11c>
				case TURN_OFF:
					control = TurnOff(ctrl);
 800237c:	6838      	ldr	r0, [r7, #0]
 800237e:	f000 f941 	bl	8002604 <TurnOff>
 8002382:	6078      	str	r0, [r7, #4]
					break;
 8002384:	e01c      	b.n	80023c0 <StateMachine+0x11c>
				case AUTOMATIC_SHUTDOWN:
					control = AutomaticShutdown(ctrl);
 8002386:	6838      	ldr	r0, [r7, #0]
 8002388:	f7fe f8fa 	bl	8000580 <AutomaticShutdown>
 800238c:	6078      	str	r0, [r7, #4]
					break;
 800238e:	e017      	b.n	80023c0 <StateMachine+0x11c>


				default:
					ctrl->currentState = AUTOMATIC_SHUTDOWN;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	220c      	movs	r2, #12
 8002394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
					break;
 8002398:	bf00      	nop
 800239a:	e011      	b.n	80023c0 <StateMachine+0x11c>
			}
		}else
		{
			ctrl->currentState = AUTOMATIC_SHUTDOWN;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	220c      	movs	r2, #12
 80023a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	    	// Log Invalid State
	    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023b0:	461a      	mov	r2, r3
 80023b2:	4807      	ldr	r0, [pc, #28]	; (80023d0 <StateMachine+0x12c>)
 80023b4:	f7ff fc94 	bl	8001ce0 <Get_Invalid_State_Error_Msg>
	    	UART_SendMessage(&huart2,Tx_Buffer);
 80023b8:	4905      	ldr	r1, [pc, #20]	; (80023d0 <StateMachine+0x12c>)
 80023ba:	4806      	ldr	r0, [pc, #24]	; (80023d4 <StateMachine+0x130>)
 80023bc:	f7fe fd76 	bl	8000eac <UART_SendMessage>
	while(TRUE == control)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	f43f af74 	beq.w	80022b0 <StateMachine+0xc>
			//ERROR HANDLE
		}
		// WD check
	}
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000188 	.word	0x20000188
 80023d4:	2000035c 	.word	0x2000035c

080023d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023de:	4b0f      	ldr	r3, [pc, #60]	; (800241c <HAL_MspInit+0x44>)
 80023e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e2:	4a0e      	ldr	r2, [pc, #56]	; (800241c <HAL_MspInit+0x44>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6613      	str	r3, [r2, #96]	; 0x60
 80023ea:	4b0c      	ldr	r3, [pc, #48]	; (800241c <HAL_MspInit+0x44>)
 80023ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	607b      	str	r3, [r7, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_MspInit+0x44>)
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fa:	4a08      	ldr	r2, [pc, #32]	; (800241c <HAL_MspInit+0x44>)
 80023fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002400:	6593      	str	r3, [r2, #88]	; 0x58
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_MspInit+0x44>)
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000

08002420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	; 0x28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a1b      	ldr	r2, [pc, #108]	; (80024ac <HAL_UART_MspInit+0x8c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d130      	bne.n	80024a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002442:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_UART_MspInit+0x90>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	4a1a      	ldr	r2, [pc, #104]	; (80024b0 <HAL_UART_MspInit+0x90>)
 8002448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800244c:	6593      	str	r3, [r2, #88]	; 0x58
 800244e:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <HAL_UART_MspInit+0x90>)
 8002450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_UART_MspInit+0x90>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245e:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <HAL_UART_MspInit+0x90>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002466:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_UART_MspInit+0x90>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002472:	230c      	movs	r3, #12
 8002474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002482:	2307      	movs	r3, #7
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002486:	f107 0314 	add.w	r3, r7, #20
 800248a:	4619      	mov	r1, r3
 800248c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002490:	f001 fb6e 	bl	8003b70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002494:	2200      	movs	r2, #0
 8002496:	2100      	movs	r1, #0
 8002498:	2026      	movs	r0, #38	; 0x26
 800249a:	f001 faf2 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800249e:	2026      	movs	r0, #38	; 0x26
 80024a0:	f001 fb0b 	bl	8003aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024a4:	bf00      	nop
 80024a6:	3728      	adds	r7, #40	; 0x28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40004400 	.word	0x40004400
 80024b0:	40021000 	.word	0x40021000

080024b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <NMI_Handler+0x4>

080024ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024be:	e7fe      	b.n	80024be <HardFault_Handler+0x4>

080024c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <MemManage_Handler+0x4>

080024c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ca:	e7fe      	b.n	80024ca <BusFault_Handler+0x4>

080024cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <UsageFault_Handler+0x4>

080024d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002500:	f001 f9a2 	bl	8003848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}

08002508 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <USART2_IRQHandler+0x10>)
 800250e:	f002 fcfd 	bl	8004f0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	2000035c 	.word	0x2000035c

0800251c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002520:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002524:	f001 fcfc 	bl	8003f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}

0800252c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002534:	4a14      	ldr	r2, [pc, #80]	; (8002588 <_sbrk+0x5c>)
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <_sbrk+0x60>)
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <_sbrk+0x64>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d102      	bne.n	800254e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <_sbrk+0x64>)
 800254a:	4a12      	ldr	r2, [pc, #72]	; (8002594 <_sbrk+0x68>)
 800254c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <_sbrk+0x64>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	429a      	cmp	r2, r3
 800255a:	d207      	bcs.n	800256c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800255c:	f003 fb22 	bl	8005ba4 <__errno>
 8002560:	4602      	mov	r2, r0
 8002562:	230c      	movs	r3, #12
 8002564:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002566:	f04f 33ff 	mov.w	r3, #4294967295
 800256a:	e009      	b.n	8002580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <_sbrk+0x64>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <_sbrk+0x64>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	4a05      	ldr	r2, [pc, #20]	; (8002590 <_sbrk+0x64>)
 800257c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800257e:	68fb      	ldr	r3, [r7, #12]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20018000 	.word	0x20018000
 800258c:	00000400 	.word	0x00000400
 8002590:	20000168 	.word	0x20000168
 8002594:	200003f0 	.word	0x200003f0

08002598 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800259c:	4b17      	ldr	r3, [pc, #92]	; (80025fc <SystemInit+0x64>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	4a16      	ldr	r2, [pc, #88]	; (80025fc <SystemInit+0x64>)
 80025a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80025ac:	4b14      	ldr	r3, [pc, #80]	; (8002600 <SystemInit+0x68>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a13      	ldr	r2, [pc, #76]	; (8002600 <SystemInit+0x68>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <SystemInit+0x68>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <SystemInit+0x68>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a0f      	ldr	r2, [pc, #60]	; (8002600 <SystemInit+0x68>)
 80025c4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80025c8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80025cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80025ce:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <SystemInit+0x68>)
 80025d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025d4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <SystemInit+0x68>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a09      	ldr	r2, [pc, #36]	; (8002600 <SystemInit+0x68>)
 80025dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80025e2:	4b07      	ldr	r3, [pc, #28]	; (8002600 <SystemInit+0x68>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <SystemInit+0x64>)
 80025ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025ee:	609a      	str	r2, [r3, #8]
#endif
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000ed00 	.word	0xe000ed00
 8002600:	40021000 	.word	0x40021000

08002604 <TurnOff>:
//  At this point the valves are opened and a log entry is created
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include <turnoff.h>

uint32_t TurnOff(struct StateVars *ctrl){
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]

	ctrl->valveConfiguration = StateConfiguration();
 8002610:	f000 f8f6 	bl	8002800 <StateConfiguration>
 8002614:	4602      	mov	r2, r0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV4  \
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2288      	movs	r2, #136	; 0x88
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
				  |(uint16_t)SOV8);

     //Todo Do we want to set all the valves OFF instead ????

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f8ae 	bl	8002788 <VerifyState>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d046      	beq.n	80026c0 <TurnOff+0xbc>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002638:	4618      	mov	r0, r3
 800263a:	f000 f8a5 	bl	8002788 <VerifyState>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d03d      	beq.n	80026c0 <TurnOff+0xbc>
    {
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800264a:	f003 030b 	and.w	r3, r3, #11
 800264e:	2b0b      	cmp	r3, #11
 8002650:	d129      	bne.n	80026a6 <TurnOff+0xa2>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8   SOV9  IG1
    		//|  0  |   0  |   0  |   1  |   0  |   0  |   0  |   1  |   0  | 0

    		StateStatus(ctrl);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f84e 	bl	80026f4 <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002664:	429a      	cmp	r2, r3
 8002666:	d003      	beq.n	8002670 <TurnOff+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fa1b 	bl	8002aa4 <StateInitialize>
 800266e:	60f8      	str	r0, [r7, #12]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	429a      	cmp	r2, r3
 800267a:	bf0c      	ite	eq
 800267c:	2301      	moveq	r3, #1
 800267e:	2300      	movne	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	60fb      	str	r3, [r7, #12]

			//STOP ANY PROCEDURES
			ctrl->isStateMachineRunning = FALSE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	629a      	str	r2, [r3, #40]	; 0x28

    		// Increment state counter
			ctrl->stateCounter++;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269c:	d11f      	bne.n	80026de <TurnOff+0xda>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 80026a4:	e01b      	b.n	80026de <TurnOff+0xda>

    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, TURN_OFF, ctrl->currentState);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ac:	461a      	mov	r2, r3
 80026ae:	210b      	movs	r1, #11
 80026b0:	480e      	ldr	r0, [pc, #56]	; (80026ec <TurnOff+0xe8>)
 80026b2:	f7ff fa9b 	bl	8001bec <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 80026b6:	490d      	ldr	r1, [pc, #52]	; (80026ec <TurnOff+0xe8>)
 80026b8:	480d      	ldr	r0, [pc, #52]	; (80026f0 <TurnOff+0xec>)
 80026ba:	f7fe fbf7 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 80026be:	e00e      	b.n	80026de <TurnOff+0xda>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026cc:	461a      	mov	r2, r3
 80026ce:	4807      	ldr	r0, [pc, #28]	; (80026ec <TurnOff+0xe8>)
 80026d0:	f7ff fb06 	bl	8001ce0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 80026d4:	4905      	ldr	r1, [pc, #20]	; (80026ec <TurnOff+0xe8>)
 80026d6:	4806      	ldr	r0, [pc, #24]	; (80026f0 <TurnOff+0xec>)
 80026d8:	f7fe fbe8 	bl	8000eac <UART_SendMessage>
 80026dc:	e000      	b.n	80026e0 <TurnOff+0xdc>
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 80026de:	bf00      	nop
    }

 return 0; // end the program
 80026e0:	2300      	movs	r3, #0

}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000188 	.word	0x20000188
 80026f0:	2000035c 	.word	0x2000035c

080026f4 <StateStatus>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "utilities.h"
#include "messages.h"
#include "valve_check.h"
//Function that sends the current state status to the user
void StateStatus(struct StateVars *ctrl){
 80026f4:	b5b0      	push	{r4, r5, r7, lr}
 80026f6:	b090      	sub	sp, #64	; 0x40
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]

     int state = ctrl->currentState;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002702:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char* naming[] = { [0] = "State : Start Handler\n\r", [1] = "State : Valve Check\n\r" ,	\
 8002704:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <StateStatus+0x84>)
 8002706:	f107 0408 	add.w	r4, r7, #8
 800270a:	461d      	mov	r5, r3
 800270c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800270e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002718:	682b      	ldr	r3, [r5, #0]
 800271a:	6023      	str	r3, [r4, #0]
		[2] = "State : Lox Pre Fill\n\r", [3] = "State : Lox Fill\n\r", [4] = "State : Lox Chill\n\r",	\
		[5] = "State : Safety\n\r", [6] = "State : Pressurize\n\r", [7] = "State : Ignition\n\r",	[8] = "\nState : Oxidizer Start\n\r",\
		[9] = "State : Firing\n\r", [10] = "State : Purge\n\r",	[11] = "State : Turn Off\n\r", [12] = "State : Automatic Shutdown\n\r"};

		if (ctrl->lastState  != ctrl->currentState){
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002728:	429a      	cmp	r2, r3
 800272a:	d00e      	beq.n	800274a <StateStatus+0x56>
			UART_SendMessage(&huart2, naming[state]);
 800272c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002734:	4413      	add	r3, r2
 8002736:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800273a:	4619      	mov	r1, r3
 800273c:	480f      	ldr	r0, [pc, #60]	; (800277c <StateStatus+0x88>)
 800273e:	f7fe fbb5 	bl	8000eac <UART_SendMessage>
			// Flag for the transitioning to the same state
			retransition = FALSE;
 8002742:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <StateStatus+0x8c>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
		{
			UART_SendMessage(&huart2, naming[state]);
			status = FALSE;

		}
}// end of function
 8002748:	e011      	b.n	800276e <StateStatus+0x7a>
		else if(status)
 800274a:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <StateStatus+0x90>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00d      	beq.n	800276e <StateStatus+0x7a>
			UART_SendMessage(&huart2, naming[state]);
 8002752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800275a:	4413      	add	r3, r2
 800275c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002760:	4619      	mov	r1, r3
 8002762:	4806      	ldr	r0, [pc, #24]	; (800277c <StateStatus+0x88>)
 8002764:	f7fe fba2 	bl	8000eac <UART_SendMessage>
			status = FALSE;
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <StateStatus+0x90>)
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
}// end of function
 800276e:	bf00      	nop
 8002770:	3740      	adds	r7, #64	; 0x40
 8002772:	46bd      	mov	sp, r7
 8002774:	bdb0      	pop	{r4, r5, r7, pc}
 8002776:	bf00      	nop
 8002778:	08006748 	.word	0x08006748
 800277c:	2000035c 	.word	0x2000035c
 8002780:	20000358 	.word	0x20000358
 8002784:	200003dc 	.word	0x200003dc

08002788 <VerifyState>:
 *  	success <uint32_t>: TRUE | FALSE | 1 | 0
 *
 *  Notes:
 */
uint32_t VerifyState(int state)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

	uint32_t success = FALSE;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
    if(state <= TURN_OFF && state >= START_HANDLER)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b0b      	cmp	r3, #11
 8002798:	dc27      	bgt.n	80027ea <VerifyState+0x62>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db24      	blt.n	80027ea <VerifyState+0x62>
    {
    	success = TRUE;
 80027a0:	2301      	movs	r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
		switch(state)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b0c      	cmp	r3, #12
 80027a8:	d81c      	bhi.n	80027e4 <VerifyState+0x5c>
 80027aa:	a201      	add	r2, pc, #4	; (adr r2, 80027b0 <VerifyState+0x28>)
 80027ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b0:	080027ef 	.word	0x080027ef
 80027b4:	080027ef 	.word	0x080027ef
 80027b8:	080027ef 	.word	0x080027ef
 80027bc:	080027ef 	.word	0x080027ef
 80027c0:	080027ef 	.word	0x080027ef
 80027c4:	080027ef 	.word	0x080027ef
 80027c8:	080027ef 	.word	0x080027ef
 80027cc:	080027ef 	.word	0x080027ef
 80027d0:	080027ef 	.word	0x080027ef
 80027d4:	080027ef 	.word	0x080027ef
 80027d8:	080027ef 	.word	0x080027ef
 80027dc:	080027ef 	.word	0x080027ef
 80027e0:	080027ef 	.word	0x080027ef
				break;
			case TURN_OFF:
				break;

			default:
				success = FALSE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
				break;
 80027e8:	e002      	b.n	80027f0 <VerifyState+0x68>
		}
    }
 80027ea:	bf00      	nop
 80027ec:	e000      	b.n	80027f0 <VerifyState+0x68>
				break;
 80027ee:	bf00      	nop
	return success;
 80027f0:	68fb      	ldr	r3, [r7, #12]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop

08002800 <StateConfiguration>:
 *
 *  Notes:
 */

uint32_t StateConfiguration()
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
	uint32_t vc = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	607b      	str	r3, [r7, #4]
	//SOV1 - Fuel Pressure (PA_11)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin) << 0);
 800280a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800280e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002812:	f001 fb55 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002816:	4603      	mov	r3, r0
 8002818:	461a      	mov	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4313      	orrs	r3, r2
 800281e:	607b      	str	r3, [r7, #4]

	//SOV2 - Lox Pressure (PA_12)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin) << 1);
 8002820:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002828:	f001 fb4a 	bl	8003ec0 <HAL_GPIO_ReadPin>
 800282c:	4603      	mov	r3, r0
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	461a      	mov	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4313      	orrs	r3, r2
 8002836:	607b      	str	r3, [r7, #4]

	//SOV3 - Fuel Purge N2 (PC_7)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin) << 2);
 8002838:	2180      	movs	r1, #128	; 0x80
 800283a:	482e      	ldr	r0, [pc, #184]	; (80028f4 <StateConfiguration+0xf4>)
 800283c:	f001 fb40 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002840:	4603      	mov	r3, r0
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	461a      	mov	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4313      	orrs	r3, r2
 800284a:	607b      	str	r3, [r7, #4]

	//SOV4 - Fuel Vent (PC_6)
	vc |= (uint32_t)(HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin) << 3);
 800284c:	2140      	movs	r1, #64	; 0x40
 800284e:	4829      	ldr	r0, [pc, #164]	; (80028f4 <StateConfiguration+0xf4>)
 8002850:	f001 fb36 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002854:	4603      	mov	r3, r0
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	461a      	mov	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4313      	orrs	r3, r2
 800285e:	607b      	str	r3, [r7, #4]

	//SOV5 - Fuel Main (PA_9)
	vc |= (uint32_t)(HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin) << 4);
 8002860:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002868:	f001 fb2a 	bl	8003ec0 <HAL_GPIO_ReadPin>
 800286c:	4603      	mov	r3, r0
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	461a      	mov	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4313      	orrs	r3, r2
 8002876:	607b      	str	r3, [r7, #4]

	//SOV6 - Lox Main (PA_8)
	vc |= (uint32_t)(HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin) << 5);
 8002878:	f44f 7180 	mov.w	r1, #256	; 0x100
 800287c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002880:	f001 fb1e 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002884:	4603      	mov	r3, r0
 8002886:	015b      	lsls	r3, r3, #5
 8002888:	461a      	mov	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4313      	orrs	r3, r2
 800288e:	607b      	str	r3, [r7, #4]

	//SOV7 - Lox Fill (PB_15)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin) << 6);
 8002890:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002894:	4818      	ldr	r0, [pc, #96]	; (80028f8 <StateConfiguration+0xf8>)
 8002896:	f001 fb13 	bl	8003ec0 <HAL_GPIO_ReadPin>
 800289a:	4603      	mov	r3, r0
 800289c:	019b      	lsls	r3, r3, #6
 800289e:	461a      	mov	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	607b      	str	r3, [r7, #4]

	//SOV8 - Lox Vent (PB_10)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin) << 7);
 80028a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028aa:	4813      	ldr	r0, [pc, #76]	; (80028f8 <StateConfiguration+0xf8>)
 80028ac:	f001 fb08 	bl	8003ec0 <HAL_GPIO_ReadPin>
 80028b0:	4603      	mov	r3, r0
 80028b2:	01db      	lsls	r3, r3, #7
 80028b4:	461a      	mov	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	607b      	str	r3, [r7, #4]

	//SOV9 - Lox Purge (PB_13)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin) << 8);
 80028bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028c0:	480d      	ldr	r0, [pc, #52]	; (80028f8 <StateConfiguration+0xf8>)
 80028c2:	f001 fafd 	bl	8003ec0 <HAL_GPIO_ReadPin>
 80028c6:	4603      	mov	r3, r0
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	461a      	mov	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	607b      	str	r3, [r7, #4]

	//IG1 - Igniter (PA_10)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 9);
 80028d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028da:	f001 faf1 	bl	8003ec0 <HAL_GPIO_ReadPin>
 80028de:	4603      	mov	r3, r0
 80028e0:	025b      	lsls	r3, r3, #9
 80028e2:	461a      	mov	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	607b      	str	r3, [r7, #4]

	return vc;
 80028ea:	687b      	ldr	r3, [r7, #4]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	48000800 	.word	0x48000800
 80028f8:	48000400 	.word	0x48000400

080028fc <ValveStateSetter>:
 *
 *  Notes:
 */

uint32_t ValveStateSetter(uint32_t vs)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
	//SOV1
	(vs & (uint32_t)SOV1) == (uint32_t)SOV1 \
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f003 0301 	and.w	r3, r3, #1
			? HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_RESET);
 800290e:	2b00      	cmp	r3, #0
 8002910:	d007      	beq.n	8002922 <ValveStateSetter+0x26>
			? HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_SET) \
 8002912:	2201      	movs	r2, #1
 8002914:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800291c:	f001 fae8 	bl	8003ef0 <HAL_GPIO_WritePin>
 8002920:	e006      	b.n	8002930 <ValveStateSetter+0x34>
			: HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_RESET);
 8002922:	2200      	movs	r2, #0
 8002924:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800292c:	f001 fae0 	bl	8003ef0 <HAL_GPIO_WritePin>

	//SOV2
	(vs & (uint32_t)SOV2) == (uint32_t)SOV2 \
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f003 0302 	and.w	r3, r3, #2
			? HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_RESET);
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <ValveStateSetter+0x4e>
			? HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_SET) \
 800293a:	2201      	movs	r2, #1
 800293c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002944:	f001 fad4 	bl	8003ef0 <HAL_GPIO_WritePin>
 8002948:	e006      	b.n	8002958 <ValveStateSetter+0x5c>
			: HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_RESET);
 800294a:	2200      	movs	r2, #0
 800294c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002954:	f001 facc 	bl	8003ef0 <HAL_GPIO_WritePin>

	//SOV3
	(vs & (uint32_t)SOV3) == (uint32_t)SOV3 \
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f003 0304 	and.w	r3, r3, #4
			? HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_RESET);
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <ValveStateSetter+0x72>
			? HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_SET) \
 8002962:	2201      	movs	r2, #1
 8002964:	2180      	movs	r1, #128	; 0x80
 8002966:	484d      	ldr	r0, [pc, #308]	; (8002a9c <ValveStateSetter+0x1a0>)
 8002968:	f001 fac2 	bl	8003ef0 <HAL_GPIO_WritePin>
 800296c:	e004      	b.n	8002978 <ValveStateSetter+0x7c>
			: HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_RESET);
 800296e:	2200      	movs	r2, #0
 8002970:	2180      	movs	r1, #128	; 0x80
 8002972:	484a      	ldr	r0, [pc, #296]	; (8002a9c <ValveStateSetter+0x1a0>)
 8002974:	f001 fabc 	bl	8003ef0 <HAL_GPIO_WritePin>

	//SOV4
	(vs & (uint32_t)SOV4) == (uint32_t)SOV4 \
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f003 0308 	and.w	r3, r3, #8
			? HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_RESET);
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <ValveStateSetter+0x92>
			? HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_SET) \
 8002982:	2201      	movs	r2, #1
 8002984:	2140      	movs	r1, #64	; 0x40
 8002986:	4845      	ldr	r0, [pc, #276]	; (8002a9c <ValveStateSetter+0x1a0>)
 8002988:	f001 fab2 	bl	8003ef0 <HAL_GPIO_WritePin>
 800298c:	e004      	b.n	8002998 <ValveStateSetter+0x9c>
			: HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_RESET);
 800298e:	2200      	movs	r2, #0
 8002990:	2140      	movs	r1, #64	; 0x40
 8002992:	4842      	ldr	r0, [pc, #264]	; (8002a9c <ValveStateSetter+0x1a0>)
 8002994:	f001 faac 	bl	8003ef0 <HAL_GPIO_WritePin>

	//SOV5
	(vs & (uint32_t)SOV5) == (uint32_t)SOV5 \
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f003 0310 	and.w	r3, r3, #16
			? HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_RESET);
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <ValveStateSetter+0xb6>
			? HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_SET) \
 80029a2:	2201      	movs	r2, #1
 80029a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ac:	f001 faa0 	bl	8003ef0 <HAL_GPIO_WritePin>
 80029b0:	e006      	b.n	80029c0 <ValveStateSetter+0xc4>
			: HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_RESET);
 80029b2:	2200      	movs	r2, #0
 80029b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029bc:	f001 fa98 	bl	8003ef0 <HAL_GPIO_WritePin>

	//SOV6
	(vs & (uint32_t)SOV6) == (uint32_t)SOV6 \
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f003 0320 	and.w	r3, r3, #32
			? HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_RESET);
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d007      	beq.n	80029da <ValveStateSetter+0xde>
			? HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_SET) \
 80029ca:	2201      	movs	r2, #1
 80029cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d4:	f001 fa8c 	bl	8003ef0 <HAL_GPIO_WritePin>
 80029d8:	e006      	b.n	80029e8 <ValveStateSetter+0xec>
			: HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_RESET);
 80029da:	2200      	movs	r2, #0
 80029dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e4:	f001 fa84 	bl	8003ef0 <HAL_GPIO_WritePin>

	//SOV7
	(vs & (uint32_t)SOV7) == (uint32_t)SOV7 \
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
			? HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin ,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin,GPIO_PIN_RESET);
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d006      	beq.n	8002a00 <ValveStateSetter+0x104>
			? HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin ,GPIO_PIN_SET) \
 80029f2:	2201      	movs	r2, #1
 80029f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029f8:	4829      	ldr	r0, [pc, #164]	; (8002aa0 <ValveStateSetter+0x1a4>)
 80029fa:	f001 fa79 	bl	8003ef0 <HAL_GPIO_WritePin>
 80029fe:	e005      	b.n	8002a0c <ValveStateSetter+0x110>
			: HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin,GPIO_PIN_RESET);
 8002a00:	2200      	movs	r2, #0
 8002a02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a06:	4826      	ldr	r0, [pc, #152]	; (8002aa0 <ValveStateSetter+0x1a4>)
 8002a08:	f001 fa72 	bl	8003ef0 <HAL_GPIO_WritePin>

	//SOV8
	(vs & (uint32_t)SOV8) == (uint32_t)SOV8 \
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
			? HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_RESET);
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d006      	beq.n	8002a24 <ValveStateSetter+0x128>
			? HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_SET) \
 8002a16:	2201      	movs	r2, #1
 8002a18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a1c:	4820      	ldr	r0, [pc, #128]	; (8002aa0 <ValveStateSetter+0x1a4>)
 8002a1e:	f001 fa67 	bl	8003ef0 <HAL_GPIO_WritePin>
 8002a22:	e005      	b.n	8002a30 <ValveStateSetter+0x134>
			: HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_RESET);
 8002a24:	2200      	movs	r2, #0
 8002a26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a2a:	481d      	ldr	r0, [pc, #116]	; (8002aa0 <ValveStateSetter+0x1a4>)
 8002a2c:	f001 fa60 	bl	8003ef0 <HAL_GPIO_WritePin>

	//SOV9
	(vs & (uint32_t)SOV9) == (uint32_t)SOV9 \
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
			? HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_RESET);
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d006      	beq.n	8002a48 <ValveStateSetter+0x14c>
			? HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_SET) \
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a40:	4817      	ldr	r0, [pc, #92]	; (8002aa0 <ValveStateSetter+0x1a4>)
 8002a42:	f001 fa55 	bl	8003ef0 <HAL_GPIO_WritePin>
 8002a46:	e005      	b.n	8002a54 <ValveStateSetter+0x158>
			: HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_RESET);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a4e:	4814      	ldr	r0, [pc, #80]	; (8002aa0 <ValveStateSetter+0x1a4>)
 8002a50:	f001 fa4e 	bl	8003ef0 <HAL_GPIO_WritePin>

	//IG1
	(vs & (uint32_t)IG1) == (uint32_t)IG1 \
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
			? HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <ValveStateSetter+0x172>
			? HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET) \
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a68:	f001 fa42 	bl	8003ef0 <HAL_GPIO_WritePin>
 8002a6c:	e006      	b.n	8002a7c <ValveStateSetter+0x180>
			: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a78:	f001 fa3a 	bl	8003ef0 <HAL_GPIO_WritePin>


	success = (vs == StateConfiguration() ? TRUE : FALSE);
 8002a7c:	f7ff fec0 	bl	8002800 <StateConfiguration>
 8002a80:	4602      	mov	r2, r0
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4293      	cmp	r3, r2
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	60fb      	str	r3, [r7, #12]

	return success;
 8002a90:	68fb      	ldr	r3, [r7, #12]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	48000800 	.word	0x48000800
 8002aa0:	48000400 	.word	0x48000400

08002aa4 <StateInitialize>:
 *  success <uint32_t>: TRUE | FALSE | 1 | 0
 *
 *  Notes:
 */
uint32_t StateInitialize(struct StateVars *ctrl)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
	// Reset state counter, log start
	ctrl->stateCounter = 0;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
	ctrl->timeStarted = HAL_GetTick();;
 8002ab6:	f000 fedb 	bl	8003870 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	601a      	str	r2, [r3, #0]

	// Change State conditions
	ctrl->lastState = ctrl->currentState;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	// Set Valve States
	ValveStateSetter(ctrl->valveTarget);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff13 	bl	80028fc <ValveStateSetter>
	ctrl->valveConfiguration = StateConfiguration();
 8002ad6:	f7ff fe93 	bl	8002800 <StateConfiguration>
 8002ada:	4602      	mov	r2, r0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	62da      	str	r2, [r3, #44]	; 0x2c

	///success = SendStatusMessage(ctrl);
	return success;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <ValveCheckCmd>:


//Function to handle individual valves (Part of the Valve check state)
void ValveCheckCmd(struct StateVars *ctrl){
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

	uint32_t success = TRUE;
 8002af4:	2301      	movs	r3, #1
 8002af6:	60fb      	str	r3, [r7, #12]

    	   if (command == IGON){
 8002af8:	4bb0      	ldr	r3, [pc, #704]	; (8002dbc <ValveCheckCmd+0x2d0>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4bb0      	ldr	r3, [pc, #704]	; (8002dc0 <ValveCheckCmd+0x2d4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d134      	bne.n	8002b6e <ValveCheckCmd+0x82>
				if (cmd_flag && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8002b04:	4baf      	ldr	r3, [pc, #700]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d018      	beq.n	8002b3e <ValveCheckCmd+0x52>
 8002b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b14:	f001 f9d4 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10f      	bne.n	8002b3e <ValveCheckCmd+0x52>
					valves_selected |= (uint16_t)IG1;
 8002b1e:	4baa      	ldr	r3, [pc, #680]	; (8002dc8 <ValveCheckCmd+0x2dc>)
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	4ba7      	ldr	r3, [pc, #668]	; (8002dc8 <ValveCheckCmd+0x2dc>)
 8002b2a:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " Igniter is ON...\n");
 8002b2c:	49a7      	ldr	r1, [pc, #668]	; (8002dcc <ValveCheckCmd+0x2e0>)
 8002b2e:	48a8      	ldr	r0, [pc, #672]	; (8002dd0 <ValveCheckCmd+0x2e4>)
 8002b30:	f7fe f9bc 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002b34:	4ba3      	ldr	r3, [pc, #652]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	f000 bd10 	b.w	800355e <ValveCheckCmd+0xa72>
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 8002b3e:	4ba1      	ldr	r3, [pc, #644]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 850b 	beq.w	800355e <ValveCheckCmd+0xa72>
 8002b48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b50:	f001 f9b6 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 8501 	beq.w	800355e <ValveCheckCmd+0xa72>
				{
					UART_SendMessage(&huart2, " Igniter is already ON...\n");
 8002b5c:	499d      	ldr	r1, [pc, #628]	; (8002dd4 <ValveCheckCmd+0x2e8>)
 8002b5e:	489c      	ldr	r0, [pc, #624]	; (8002dd0 <ValveCheckCmd+0x2e4>)
 8002b60:	f7fe f9a4 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002b64:	4b97      	ldr	r3, [pc, #604]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	f000 bcf8 	b.w	800355e <ValveCheckCmd+0xa72>
				}
			}
			else if (command == IGOFF){
 8002b6e:	4b93      	ldr	r3, [pc, #588]	; (8002dbc <ValveCheckCmd+0x2d0>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	4b99      	ldr	r3, [pc, #612]	; (8002dd8 <ValveCheckCmd+0x2ec>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d133      	bne.n	8002be2 <ValveCheckCmd+0xf6>
				if (cmd_flag && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8002b7a:	4b92      	ldr	r3, [pc, #584]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d017      	beq.n	8002bb2 <ValveCheckCmd+0xc6>
 8002b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8a:	f001 f999 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00e      	beq.n	8002bb2 <ValveCheckCmd+0xc6>
					valves_selected &= 0xFF;
 8002b94:	4b8c      	ldr	r3, [pc, #560]	; (8002dc8 <ValveCheckCmd+0x2dc>)
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	4b8a      	ldr	r3, [pc, #552]	; (8002dc8 <ValveCheckCmd+0x2dc>)
 8002b9e:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " Igniter is OFF...\n");
 8002ba0:	498e      	ldr	r1, [pc, #568]	; (8002ddc <ValveCheckCmd+0x2f0>)
 8002ba2:	488b      	ldr	r0, [pc, #556]	; (8002dd0 <ValveCheckCmd+0x2e4>)
 8002ba4:	f7fe f982 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002ba8:	4b86      	ldr	r3, [pc, #536]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	f000 bcd6 	b.w	800355e <ValveCheckCmd+0xa72>

				}
				else if (cmd_flag && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8002bb2:	4b84      	ldr	r3, [pc, #528]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 84d1 	beq.w	800355e <ValveCheckCmd+0xa72>
 8002bbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bc4:	f001 f97c 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f040 84c7 	bne.w	800355e <ValveCheckCmd+0xa72>
					UART_SendMessage(&huart2, " Igniter is already OFF...\n");
 8002bd0:	4983      	ldr	r1, [pc, #524]	; (8002de0 <ValveCheckCmd+0x2f4>)
 8002bd2:	487f      	ldr	r0, [pc, #508]	; (8002dd0 <ValveCheckCmd+0x2e4>)
 8002bd4:	f7fe f96a 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002bd8:	4b7a      	ldr	r3, [pc, #488]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	f000 bcbe 	b.w	800355e <ValveCheckCmd+0xa72>
				}

			}
			else if(command == SOV1ON){
 8002be2:	4b76      	ldr	r3, [pc, #472]	; (8002dbc <ValveCheckCmd+0x2d0>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4b7f      	ldr	r3, [pc, #508]	; (8002de4 <ValveCheckCmd+0x2f8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d134      	bne.n	8002c58 <ValveCheckCmd+0x16c>
				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 8002bee:	4b75      	ldr	r3, [pc, #468]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d018      	beq.n	8002c28 <ValveCheckCmd+0x13c>
 8002bf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bfe:	f001 f95f 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10f      	bne.n	8002c28 <ValveCheckCmd+0x13c>
					valves_selected |= (uint16_t)SOV1;
 8002c08:	4b6f      	ldr	r3, [pc, #444]	; (8002dc8 <ValveCheckCmd+0x2dc>)
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	4b6d      	ldr	r3, [pc, #436]	; (8002dc8 <ValveCheckCmd+0x2dc>)
 8002c14:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV1 is ON...\n");
 8002c16:	4974      	ldr	r1, [pc, #464]	; (8002de8 <ValveCheckCmd+0x2fc>)
 8002c18:	486d      	ldr	r0, [pc, #436]	; (8002dd0 <ValveCheckCmd+0x2e4>)
 8002c1a:	f7fe f947 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002c1e:	4b69      	ldr	r3, [pc, #420]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	f000 bc9b 	b.w	800355e <ValveCheckCmd+0xa72>
				}
				else if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 8002c28:	4b66      	ldr	r3, [pc, #408]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8496 	beq.w	800355e <ValveCheckCmd+0xa72>
 8002c32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c3a:	f001 f941 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 848c 	beq.w	800355e <ValveCheckCmd+0xa72>
					UART_SendMessage(&huart2, " SOV1 is already ON...\n");
 8002c46:	4969      	ldr	r1, [pc, #420]	; (8002dec <ValveCheckCmd+0x300>)
 8002c48:	4861      	ldr	r0, [pc, #388]	; (8002dd0 <ValveCheckCmd+0x2e4>)
 8002c4a:	f7fe f92f 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002c4e:	4b5d      	ldr	r3, [pc, #372]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	f000 bc83 	b.w	800355e <ValveCheckCmd+0xa72>
				}
			}
			else if (command == SOV1OFF){
 8002c58:	4b58      	ldr	r3, [pc, #352]	; (8002dbc <ValveCheckCmd+0x2d0>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b64      	ldr	r3, [pc, #400]	; (8002df0 <ValveCheckCmd+0x304>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d135      	bne.n	8002cd0 <ValveCheckCmd+0x1e4>
				if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 8002c64:	4b57      	ldr	r3, [pc, #348]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d019      	beq.n	8002ca0 <ValveCheckCmd+0x1b4>
 8002c6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c74:	f001 f924 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d010      	beq.n	8002ca0 <ValveCheckCmd+0x1b4>
					valves_selected &= 0x3FE;
 8002c7e:	4b52      	ldr	r3, [pc, #328]	; (8002dc8 <ValveCheckCmd+0x2dc>)
 8002c80:	881a      	ldrh	r2, [r3, #0]
 8002c82:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8002c86:	4013      	ands	r3, r2
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	4b4f      	ldr	r3, [pc, #316]	; (8002dc8 <ValveCheckCmd+0x2dc>)
 8002c8c:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV1 is OFF...\n");
 8002c8e:	4959      	ldr	r1, [pc, #356]	; (8002df4 <ValveCheckCmd+0x308>)
 8002c90:	484f      	ldr	r0, [pc, #316]	; (8002dd0 <ValveCheckCmd+0x2e4>)
 8002c92:	f7fe f90b 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002c96:	4b4b      	ldr	r3, [pc, #300]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	f000 bc5f 	b.w	800355e <ValveCheckCmd+0xa72>
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 8002ca0:	4b48      	ldr	r3, [pc, #288]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 845a 	beq.w	800355e <ValveCheckCmd+0xa72>
 8002caa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb2:	f001 f905 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f040 8450 	bne.w	800355e <ValveCheckCmd+0xa72>
					UART_SendMessage(&huart2, " SOV1 is already OFF...\n");
 8002cbe:	494e      	ldr	r1, [pc, #312]	; (8002df8 <ValveCheckCmd+0x30c>)
 8002cc0:	4843      	ldr	r0, [pc, #268]	; (8002dd0 <ValveCheckCmd+0x2e4>)
 8002cc2:	f7fe f8f3 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002cc6:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	f000 bc47 	b.w	800355e <ValveCheckCmd+0xa72>
				}
			}
			else if(command == SOV2ON){
 8002cd0:	4b3a      	ldr	r3, [pc, #232]	; (8002dbc <ValveCheckCmd+0x2d0>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b49      	ldr	r3, [pc, #292]	; (8002dfc <ValveCheckCmd+0x310>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d134      	bne.n	8002d46 <ValveCheckCmd+0x25a>
				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 8002cdc:	4b39      	ldr	r3, [pc, #228]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d018      	beq.n	8002d16 <ValveCheckCmd+0x22a>
 8002ce4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cec:	f001 f8e8 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10f      	bne.n	8002d16 <ValveCheckCmd+0x22a>
					valves_selected |= (uint16_t)SOV2;
 8002cf6:	4b34      	ldr	r3, [pc, #208]	; (8002dc8 <ValveCheckCmd+0x2dc>)
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	f043 0302 	orr.w	r3, r3, #2
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	4b31      	ldr	r3, [pc, #196]	; (8002dc8 <ValveCheckCmd+0x2dc>)
 8002d02:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV2 is ON...\n");
 8002d04:	493e      	ldr	r1, [pc, #248]	; (8002e00 <ValveCheckCmd+0x314>)
 8002d06:	4832      	ldr	r0, [pc, #200]	; (8002dd0 <ValveCheckCmd+0x2e4>)
 8002d08:	f7fe f8d0 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	f000 bc24 	b.w	800355e <ValveCheckCmd+0xa72>

				}
				else if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 8002d16:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 841f 	beq.w	800355e <ValveCheckCmd+0xa72>
 8002d20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d28:	f001 f8ca 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8415 	beq.w	800355e <ValveCheckCmd+0xa72>
					UART_SendMessage(&huart2, " SOV2 is already ON...\n");
 8002d34:	4933      	ldr	r1, [pc, #204]	; (8002e04 <ValveCheckCmd+0x318>)
 8002d36:	4826      	ldr	r0, [pc, #152]	; (8002dd0 <ValveCheckCmd+0x2e4>)
 8002d38:	f7fe f8b8 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002d3c:	4b21      	ldr	r3, [pc, #132]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	f000 bc0c 	b.w	800355e <ValveCheckCmd+0xa72>
				}

			}
			else if (command == SOV2OFF){
 8002d46:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <ValveCheckCmd+0x2d0>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4b2f      	ldr	r3, [pc, #188]	; (8002e08 <ValveCheckCmd+0x31c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d160      	bne.n	8002e14 <ValveCheckCmd+0x328>
				if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 8002d52:	4b1c      	ldr	r3, [pc, #112]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d018      	beq.n	8002d8c <ValveCheckCmd+0x2a0>
 8002d5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d62:	f001 f8ad 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00f      	beq.n	8002d8c <ValveCheckCmd+0x2a0>
					valves_selected &= 0x1FD;
 8002d6c:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <ValveCheckCmd+0x2dc>)
 8002d6e:	881a      	ldrh	r2, [r3, #0]
 8002d70:	f240 13fd 	movw	r3, #509	; 0x1fd
 8002d74:	4013      	ands	r3, r2
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <ValveCheckCmd+0x2dc>)
 8002d7a:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV2 is OFF...\n");
 8002d7c:	4923      	ldr	r1, [pc, #140]	; (8002e0c <ValveCheckCmd+0x320>)
 8002d7e:	4814      	ldr	r0, [pc, #80]	; (8002dd0 <ValveCheckCmd+0x2e4>)
 8002d80:	f7fe f894 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	e3e8      	b.n	800355e <ValveCheckCmd+0xa72>
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 83e4 	beq.w	800355e <ValveCheckCmd+0xa72>
 8002d96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d9e:	f001 f88f 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f040 83da 	bne.w	800355e <ValveCheckCmd+0xa72>
					UART_SendMessage(&huart2, " SOV2 is already OFF...\n");
 8002daa:	4919      	ldr	r1, [pc, #100]	; (8002e10 <ValveCheckCmd+0x324>)
 8002dac:	4808      	ldr	r0, [pc, #32]	; (8002dd0 <ValveCheckCmd+0x2e4>)
 8002dae:	f7fe f87d 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002db2:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <ValveCheckCmd+0x2d8>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	e3d1      	b.n	800355e <ValveCheckCmd+0xa72>
 8002dba:	bf00      	nop
 8002dbc:	20000184 	.word	0x20000184
 8002dc0:	20000090 	.word	0x20000090
 8002dc4:	200001f0 	.word	0x200001f0
 8002dc8:	200003e4 	.word	0x200003e4
 8002dcc:	0800677c 	.word	0x0800677c
 8002dd0:	2000035c 	.word	0x2000035c
 8002dd4:	08006790 	.word	0x08006790
 8002dd8:	20000094 	.word	0x20000094
 8002ddc:	080067ac 	.word	0x080067ac
 8002de0:	080067c0 	.word	0x080067c0
 8002de4:	20000098 	.word	0x20000098
 8002de8:	080067dc 	.word	0x080067dc
 8002dec:	080067ec 	.word	0x080067ec
 8002df0:	2000009c 	.word	0x2000009c
 8002df4:	08006804 	.word	0x08006804
 8002df8:	08006818 	.word	0x08006818
 8002dfc:	200000a0 	.word	0x200000a0
 8002e00:	08006834 	.word	0x08006834
 8002e04:	08006844 	.word	0x08006844
 8002e08:	200000a4 	.word	0x200000a4
 8002e0c:	0800685c 	.word	0x0800685c
 8002e10:	08006870 	.word	0x08006870
				}
			}
			else if(command == SOV3ON){
 8002e14:	4ba4      	ldr	r3, [pc, #656]	; (80030a8 <ValveCheckCmd+0x5bc>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4ba4      	ldr	r3, [pc, #656]	; (80030ac <ValveCheckCmd+0x5c0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d12e      	bne.n	8002e7e <ValveCheckCmd+0x392>
				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin))){
 8002e20:	4ba3      	ldr	r3, [pc, #652]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d015      	beq.n	8002e54 <ValveCheckCmd+0x368>
 8002e28:	2180      	movs	r1, #128	; 0x80
 8002e2a:	48a2      	ldr	r0, [pc, #648]	; (80030b4 <ValveCheckCmd+0x5c8>)
 8002e2c:	f001 f848 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10e      	bne.n	8002e54 <ValveCheckCmd+0x368>
					valves_selected |= (uint16_t)SOV3;
 8002e36:	4ba0      	ldr	r3, [pc, #640]	; (80030b8 <ValveCheckCmd+0x5cc>)
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	f043 0304 	orr.w	r3, r3, #4
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	4b9d      	ldr	r3, [pc, #628]	; (80030b8 <ValveCheckCmd+0x5cc>)
 8002e42:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV3 is ON...\n");
 8002e44:	499d      	ldr	r1, [pc, #628]	; (80030bc <ValveCheckCmd+0x5d0>)
 8002e46:	489e      	ldr	r0, [pc, #632]	; (80030c0 <ValveCheckCmd+0x5d4>)
 8002e48:	f7fe f830 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002e4c:	4b98      	ldr	r3, [pc, #608]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e384      	b.n	800355e <ValveCheckCmd+0xa72>
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin)){
 8002e54:	4b96      	ldr	r3, [pc, #600]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8380 	beq.w	800355e <ValveCheckCmd+0xa72>
 8002e5e:	2180      	movs	r1, #128	; 0x80
 8002e60:	4894      	ldr	r0, [pc, #592]	; (80030b4 <ValveCheckCmd+0x5c8>)
 8002e62:	f001 f82d 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 8378 	beq.w	800355e <ValveCheckCmd+0xa72>
					UART_SendMessage(&huart2, " SOV3 is already ON...\n");
 8002e6e:	4995      	ldr	r1, [pc, #596]	; (80030c4 <ValveCheckCmd+0x5d8>)
 8002e70:	4893      	ldr	r0, [pc, #588]	; (80030c0 <ValveCheckCmd+0x5d4>)
 8002e72:	f7fe f81b 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002e76:	4b8e      	ldr	r3, [pc, #568]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	e36f      	b.n	800355e <ValveCheckCmd+0xa72>
				}
			}
			else if (command == SOV3OFF){
 8002e7e:	4b8a      	ldr	r3, [pc, #552]	; (80030a8 <ValveCheckCmd+0x5bc>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4b91      	ldr	r3, [pc, #580]	; (80030c8 <ValveCheckCmd+0x5dc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d12f      	bne.n	8002eea <ValveCheckCmd+0x3fe>
				if (cmd_flag && HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin)){
 8002e8a:	4b89      	ldr	r3, [pc, #548]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d016      	beq.n	8002ec0 <ValveCheckCmd+0x3d4>
 8002e92:	2180      	movs	r1, #128	; 0x80
 8002e94:	4887      	ldr	r0, [pc, #540]	; (80030b4 <ValveCheckCmd+0x5c8>)
 8002e96:	f001 f813 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00f      	beq.n	8002ec0 <ValveCheckCmd+0x3d4>
					valves_selected &= 0x3FB;
 8002ea0:	4b85      	ldr	r3, [pc, #532]	; (80030b8 <ValveCheckCmd+0x5cc>)
 8002ea2:	881a      	ldrh	r2, [r3, #0]
 8002ea4:	f240 33fb 	movw	r3, #1019	; 0x3fb
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	4b82      	ldr	r3, [pc, #520]	; (80030b8 <ValveCheckCmd+0x5cc>)
 8002eae:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV3 is OFF...\n");
 8002eb0:	4986      	ldr	r1, [pc, #536]	; (80030cc <ValveCheckCmd+0x5e0>)
 8002eb2:	4883      	ldr	r0, [pc, #524]	; (80030c0 <ValveCheckCmd+0x5d4>)
 8002eb4:	f7fd fffa 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002eb8:	4b7d      	ldr	r3, [pc, #500]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	e34e      	b.n	800355e <ValveCheckCmd+0xa72>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin))) {
 8002ec0:	4b7b      	ldr	r3, [pc, #492]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 834a 	beq.w	800355e <ValveCheckCmd+0xa72>
 8002eca:	2180      	movs	r1, #128	; 0x80
 8002ecc:	4879      	ldr	r0, [pc, #484]	; (80030b4 <ValveCheckCmd+0x5c8>)
 8002ece:	f000 fff7 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f040 8342 	bne.w	800355e <ValveCheckCmd+0xa72>
					UART_SendMessage(&huart2, " SOV3 is already OFF...\n");
 8002eda:	497d      	ldr	r1, [pc, #500]	; (80030d0 <ValveCheckCmd+0x5e4>)
 8002edc:	4878      	ldr	r0, [pc, #480]	; (80030c0 <ValveCheckCmd+0x5d4>)
 8002ede:	f7fd ffe5 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002ee2:	4b73      	ldr	r3, [pc, #460]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	e339      	b.n	800355e <ValveCheckCmd+0xa72>
				}
			}
			else if(command == SOV4ON){
 8002eea:	4b6f      	ldr	r3, [pc, #444]	; (80030a8 <ValveCheckCmd+0x5bc>)
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	4b79      	ldr	r3, [pc, #484]	; (80030d4 <ValveCheckCmd+0x5e8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d12e      	bne.n	8002f54 <ValveCheckCmd+0x468>
				if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin))){
 8002ef6:	4b6e      	ldr	r3, [pc, #440]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d015      	beq.n	8002f2a <ValveCheckCmd+0x43e>
 8002efe:	2140      	movs	r1, #64	; 0x40
 8002f00:	486c      	ldr	r0, [pc, #432]	; (80030b4 <ValveCheckCmd+0x5c8>)
 8002f02:	f000 ffdd 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10e      	bne.n	8002f2a <ValveCheckCmd+0x43e>
					valves_selected |= (uint16_t)SOV4;
 8002f0c:	4b6a      	ldr	r3, [pc, #424]	; (80030b8 <ValveCheckCmd+0x5cc>)
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	f043 0308 	orr.w	r3, r3, #8
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	4b68      	ldr	r3, [pc, #416]	; (80030b8 <ValveCheckCmd+0x5cc>)
 8002f18:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV4 is ON...\n");
 8002f1a:	496f      	ldr	r1, [pc, #444]	; (80030d8 <ValveCheckCmd+0x5ec>)
 8002f1c:	4868      	ldr	r0, [pc, #416]	; (80030c0 <ValveCheckCmd+0x5d4>)
 8002f1e:	f7fd ffc5 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002f22:	4b63      	ldr	r3, [pc, #396]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e319      	b.n	800355e <ValveCheckCmd+0xa72>

				}
				else if (cmd_flag && HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin)){
 8002f2a:	4b61      	ldr	r3, [pc, #388]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8315 	beq.w	800355e <ValveCheckCmd+0xa72>
 8002f34:	2140      	movs	r1, #64	; 0x40
 8002f36:	485f      	ldr	r0, [pc, #380]	; (80030b4 <ValveCheckCmd+0x5c8>)
 8002f38:	f000 ffc2 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 830d 	beq.w	800355e <ValveCheckCmd+0xa72>
					UART_SendMessage(&huart2, " SOV4 is already ON...\n");
 8002f44:	4965      	ldr	r1, [pc, #404]	; (80030dc <ValveCheckCmd+0x5f0>)
 8002f46:	485e      	ldr	r0, [pc, #376]	; (80030c0 <ValveCheckCmd+0x5d4>)
 8002f48:	f7fd ffb0 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002f4c:	4b58      	ldr	r3, [pc, #352]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e304      	b.n	800355e <ValveCheckCmd+0xa72>
				}
			}
			else if (command == SOV4OFF){
 8002f54:	4b54      	ldr	r3, [pc, #336]	; (80030a8 <ValveCheckCmd+0x5bc>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b61      	ldr	r3, [pc, #388]	; (80030e0 <ValveCheckCmd+0x5f4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d12f      	bne.n	8002fc0 <ValveCheckCmd+0x4d4>


				if (cmd_flag && HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin)){
 8002f60:	4b53      	ldr	r3, [pc, #332]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d016      	beq.n	8002f96 <ValveCheckCmd+0x4aa>
 8002f68:	2140      	movs	r1, #64	; 0x40
 8002f6a:	4852      	ldr	r0, [pc, #328]	; (80030b4 <ValveCheckCmd+0x5c8>)
 8002f6c:	f000 ffa8 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00f      	beq.n	8002f96 <ValveCheckCmd+0x4aa>
					valves_selected &= 0x3F7;
 8002f76:	4b50      	ldr	r3, [pc, #320]	; (80030b8 <ValveCheckCmd+0x5cc>)
 8002f78:	881a      	ldrh	r2, [r3, #0]
 8002f7a:	f240 33f7 	movw	r3, #1015	; 0x3f7
 8002f7e:	4013      	ands	r3, r2
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	4b4d      	ldr	r3, [pc, #308]	; (80030b8 <ValveCheckCmd+0x5cc>)
 8002f84:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV4 is OFF...\n");
 8002f86:	4957      	ldr	r1, [pc, #348]	; (80030e4 <ValveCheckCmd+0x5f8>)
 8002f88:	484d      	ldr	r0, [pc, #308]	; (80030c0 <ValveCheckCmd+0x5d4>)
 8002f8a:	f7fd ff8f 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002f8e:	4b48      	ldr	r3, [pc, #288]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	e2e3      	b.n	800355e <ValveCheckCmd+0xa72>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin))){
 8002f96:	4b46      	ldr	r3, [pc, #280]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 82df 	beq.w	800355e <ValveCheckCmd+0xa72>
 8002fa0:	2140      	movs	r1, #64	; 0x40
 8002fa2:	4844      	ldr	r0, [pc, #272]	; (80030b4 <ValveCheckCmd+0x5c8>)
 8002fa4:	f000 ff8c 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f040 82d7 	bne.w	800355e <ValveCheckCmd+0xa72>
					UART_SendMessage(&huart2, " SOV4 is already OFF...\n");
 8002fb0:	494d      	ldr	r1, [pc, #308]	; (80030e8 <ValveCheckCmd+0x5fc>)
 8002fb2:	4843      	ldr	r0, [pc, #268]	; (80030c0 <ValveCheckCmd+0x5d4>)
 8002fb4:	f7fd ff7a 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002fb8:	4b3d      	ldr	r3, [pc, #244]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	e2ce      	b.n	800355e <ValveCheckCmd+0xa72>
				}
			}
			else if(command == SOV5ON){
 8002fc0:	4b39      	ldr	r3, [pc, #228]	; (80030a8 <ValveCheckCmd+0x5bc>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b49      	ldr	r3, [pc, #292]	; (80030ec <ValveCheckCmd+0x600>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d132      	bne.n	8003032 <ValveCheckCmd+0x546>
				if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin))){
 8002fcc:	4b38      	ldr	r3, [pc, #224]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d017      	beq.n	8003004 <ValveCheckCmd+0x518>
 8002fd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fdc:	f000 ff70 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10e      	bne.n	8003004 <ValveCheckCmd+0x518>
					valves_selected |= (uint16_t)SOV5;
 8002fe6:	4b34      	ldr	r3, [pc, #208]	; (80030b8 <ValveCheckCmd+0x5cc>)
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	f043 0310 	orr.w	r3, r3, #16
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	4b31      	ldr	r3, [pc, #196]	; (80030b8 <ValveCheckCmd+0x5cc>)
 8002ff2:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV5 is ON...\n");
 8002ff4:	493e      	ldr	r1, [pc, #248]	; (80030f0 <ValveCheckCmd+0x604>)
 8002ff6:	4832      	ldr	r0, [pc, #200]	; (80030c0 <ValveCheckCmd+0x5d4>)
 8002ff8:	f7fd ff58 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002ffc:	4b2c      	ldr	r3, [pc, #176]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	e2ac      	b.n	800355e <ValveCheckCmd+0xa72>
				}
				else if(cmd_flag && HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin)){
 8003004:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 82a8 	beq.w	800355e <ValveCheckCmd+0xa72>
 800300e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003016:	f000 ff53 	bl	8003ec0 <HAL_GPIO_ReadPin>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 829e 	beq.w	800355e <ValveCheckCmd+0xa72>
					UART_SendMessage(&huart2, " SOV5 is already ON...\n");
 8003022:	4934      	ldr	r1, [pc, #208]	; (80030f4 <ValveCheckCmd+0x608>)
 8003024:	4826      	ldr	r0, [pc, #152]	; (80030c0 <ValveCheckCmd+0x5d4>)
 8003026:	f7fd ff41 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 800302a:	4b21      	ldr	r3, [pc, #132]	; (80030b0 <ValveCheckCmd+0x5c4>)
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	e295      	b.n	800355e <ValveCheckCmd+0xa72>
				}
			}
			else if (command == SOV5OFF){
 8003032:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <ValveCheckCmd+0x5bc>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4b30      	ldr	r3, [pc, #192]	; (80030f8 <ValveCheckCmd+0x60c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d162      	bne.n	8003104 <ValveCheckCmd+0x618>


				if (cmd_flag && HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin)){
 800303e:	4b1c      	ldr	r3, [pc, #112]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d018      	beq.n	8003078 <ValveCheckCmd+0x58c>
 8003046:	f44f 7100 	mov.w	r1, #512	; 0x200
 800304a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800304e:	f000 ff37 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00f      	beq.n	8003078 <ValveCheckCmd+0x58c>
					valves_selected &= 0x3EF;
 8003058:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <ValveCheckCmd+0x5cc>)
 800305a:	881a      	ldrh	r2, [r3, #0]
 800305c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8003060:	4013      	ands	r3, r2
 8003062:	b29a      	uxth	r2, r3
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <ValveCheckCmd+0x5cc>)
 8003066:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV5 is OFF...\n");
 8003068:	4924      	ldr	r1, [pc, #144]	; (80030fc <ValveCheckCmd+0x610>)
 800306a:	4815      	ldr	r0, [pc, #84]	; (80030c0 <ValveCheckCmd+0x5d4>)
 800306c:	f7fd ff1e 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8003070:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <ValveCheckCmd+0x5c4>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	e272      	b.n	800355e <ValveCheckCmd+0xa72>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin))) {
 8003078:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <ValveCheckCmd+0x5c4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 826e 	beq.w	800355e <ValveCheckCmd+0xa72>
 8003082:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800308a:	f000 ff19 	bl	8003ec0 <HAL_GPIO_ReadPin>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	f040 8264 	bne.w	800355e <ValveCheckCmd+0xa72>
					UART_SendMessage(&huart2, " SOV5 is already OFF...\n");
 8003096:	491a      	ldr	r1, [pc, #104]	; (8003100 <ValveCheckCmd+0x614>)
 8003098:	4809      	ldr	r0, [pc, #36]	; (80030c0 <ValveCheckCmd+0x5d4>)
 800309a:	f7fd ff07 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <ValveCheckCmd+0x5c4>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	e25b      	b.n	800355e <ValveCheckCmd+0xa72>
 80030a6:	bf00      	nop
 80030a8:	20000184 	.word	0x20000184
 80030ac:	200000a8 	.word	0x200000a8
 80030b0:	200001f0 	.word	0x200001f0
 80030b4:	48000800 	.word	0x48000800
 80030b8:	200003e4 	.word	0x200003e4
 80030bc:	0800688c 	.word	0x0800688c
 80030c0:	2000035c 	.word	0x2000035c
 80030c4:	0800689c 	.word	0x0800689c
 80030c8:	200000ac 	.word	0x200000ac
 80030cc:	080068b4 	.word	0x080068b4
 80030d0:	080068c8 	.word	0x080068c8
 80030d4:	200000b0 	.word	0x200000b0
 80030d8:	080068e4 	.word	0x080068e4
 80030dc:	080068f4 	.word	0x080068f4
 80030e0:	200000b4 	.word	0x200000b4
 80030e4:	0800690c 	.word	0x0800690c
 80030e8:	08006920 	.word	0x08006920
 80030ec:	200000b8 	.word	0x200000b8
 80030f0:	0800693c 	.word	0x0800693c
 80030f4:	0800694c 	.word	0x0800694c
 80030f8:	200000bc 	.word	0x200000bc
 80030fc:	08006964 	.word	0x08006964
 8003100:	08006978 	.word	0x08006978
				}
			}
			else if(command == SOV6ON){
 8003104:	4ba8      	ldr	r3, [pc, #672]	; (80033a8 <ValveCheckCmd+0x8bc>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4ba8      	ldr	r3, [pc, #672]	; (80033ac <ValveCheckCmd+0x8c0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d132      	bne.n	8003176 <ValveCheckCmd+0x68a>
				if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin))){
 8003110:	4ba7      	ldr	r3, [pc, #668]	; (80033b0 <ValveCheckCmd+0x8c4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d017      	beq.n	8003148 <ValveCheckCmd+0x65c>
 8003118:	f44f 7180 	mov.w	r1, #256	; 0x100
 800311c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003120:	f000 fece 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10e      	bne.n	8003148 <ValveCheckCmd+0x65c>
				valves_selected |= (uint16_t)SOV6;
 800312a:	4ba2      	ldr	r3, [pc, #648]	; (80033b4 <ValveCheckCmd+0x8c8>)
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	f043 0320 	orr.w	r3, r3, #32
 8003132:	b29a      	uxth	r2, r3
 8003134:	4b9f      	ldr	r3, [pc, #636]	; (80033b4 <ValveCheckCmd+0x8c8>)
 8003136:	801a      	strh	r2, [r3, #0]
				UART_SendMessage(&huart2, " SOV6 is ON...\n");
 8003138:	499f      	ldr	r1, [pc, #636]	; (80033b8 <ValveCheckCmd+0x8cc>)
 800313a:	48a0      	ldr	r0, [pc, #640]	; (80033bc <ValveCheckCmd+0x8d0>)
 800313c:	f7fd feb6 	bl	8000eac <UART_SendMessage>
				cmd_flag = FALSE;
 8003140:	4b9b      	ldr	r3, [pc, #620]	; (80033b0 <ValveCheckCmd+0x8c4>)
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	e20a      	b.n	800355e <ValveCheckCmd+0xa72>

				}
				else if (cmd_flag && HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin)){
 8003148:	4b99      	ldr	r3, [pc, #612]	; (80033b0 <ValveCheckCmd+0x8c4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 8206 	beq.w	800355e <ValveCheckCmd+0xa72>
 8003152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003156:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800315a:	f000 feb1 	bl	8003ec0 <HAL_GPIO_ReadPin>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 81fc 	beq.w	800355e <ValveCheckCmd+0xa72>
					UART_SendMessage(&huart2, " SOV6 is already ON...\n");
 8003166:	4996      	ldr	r1, [pc, #600]	; (80033c0 <ValveCheckCmd+0x8d4>)
 8003168:	4894      	ldr	r0, [pc, #592]	; (80033bc <ValveCheckCmd+0x8d0>)
 800316a:	f7fd fe9f 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 800316e:	4b90      	ldr	r3, [pc, #576]	; (80033b0 <ValveCheckCmd+0x8c4>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	e1f3      	b.n	800355e <ValveCheckCmd+0xa72>
				}
			}
			else if (command == SOV6OFF){
 8003176:	4b8c      	ldr	r3, [pc, #560]	; (80033a8 <ValveCheckCmd+0x8bc>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4b92      	ldr	r3, [pc, #584]	; (80033c4 <ValveCheckCmd+0x8d8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d133      	bne.n	80031ea <ValveCheckCmd+0x6fe>

				if (cmd_flag && HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin)){
 8003182:	4b8b      	ldr	r3, [pc, #556]	; (80033b0 <ValveCheckCmd+0x8c4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d018      	beq.n	80031bc <ValveCheckCmd+0x6d0>
 800318a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800318e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003192:	f000 fe95 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00f      	beq.n	80031bc <ValveCheckCmd+0x6d0>
					valves_selected &= 0x3DF;
 800319c:	4b85      	ldr	r3, [pc, #532]	; (80033b4 <ValveCheckCmd+0x8c8>)
 800319e:	881a      	ldrh	r2, [r3, #0]
 80031a0:	f240 33df 	movw	r3, #991	; 0x3df
 80031a4:	4013      	ands	r3, r2
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	4b82      	ldr	r3, [pc, #520]	; (80033b4 <ValveCheckCmd+0x8c8>)
 80031aa:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV6 is OFF...\n");
 80031ac:	4986      	ldr	r1, [pc, #536]	; (80033c8 <ValveCheckCmd+0x8dc>)
 80031ae:	4883      	ldr	r0, [pc, #524]	; (80033bc <ValveCheckCmd+0x8d0>)
 80031b0:	f7fd fe7c 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 80031b4:	4b7e      	ldr	r3, [pc, #504]	; (80033b0 <ValveCheckCmd+0x8c4>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	e1d0      	b.n	800355e <ValveCheckCmd+0xa72>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin))){
 80031bc:	4b7c      	ldr	r3, [pc, #496]	; (80033b0 <ValveCheckCmd+0x8c4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 81cc 	beq.w	800355e <ValveCheckCmd+0xa72>
 80031c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031ce:	f000 fe77 	bl	8003ec0 <HAL_GPIO_ReadPin>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f040 81c2 	bne.w	800355e <ValveCheckCmd+0xa72>
					UART_SendMessage(&huart2, " SOV6 is already OFF...\n");
 80031da:	497c      	ldr	r1, [pc, #496]	; (80033cc <ValveCheckCmd+0x8e0>)
 80031dc:	4877      	ldr	r0, [pc, #476]	; (80033bc <ValveCheckCmd+0x8d0>)
 80031de:	f7fd fe65 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 80031e2:	4b73      	ldr	r3, [pc, #460]	; (80033b0 <ValveCheckCmd+0x8c4>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	e1b9      	b.n	800355e <ValveCheckCmd+0xa72>
				}
			}
			else if(command == SOV7ON){
 80031ea:	4b6f      	ldr	r3, [pc, #444]	; (80033a8 <ValveCheckCmd+0x8bc>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b78      	ldr	r3, [pc, #480]	; (80033d0 <ValveCheckCmd+0x8e4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d130      	bne.n	8003258 <ValveCheckCmd+0x76c>


				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin))){
 80031f6:	4b6e      	ldr	r3, [pc, #440]	; (80033b0 <ValveCheckCmd+0x8c4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <ValveCheckCmd+0x740>
 80031fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003202:	4874      	ldr	r0, [pc, #464]	; (80033d4 <ValveCheckCmd+0x8e8>)
 8003204:	f000 fe5c 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10e      	bne.n	800322c <ValveCheckCmd+0x740>
					valves_selected |= (uint16_t)SOV7;
 800320e:	4b69      	ldr	r3, [pc, #420]	; (80033b4 <ValveCheckCmd+0x8c8>)
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003216:	b29a      	uxth	r2, r3
 8003218:	4b66      	ldr	r3, [pc, #408]	; (80033b4 <ValveCheckCmd+0x8c8>)
 800321a:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV7 is ON...\n");
 800321c:	496e      	ldr	r1, [pc, #440]	; (80033d8 <ValveCheckCmd+0x8ec>)
 800321e:	4867      	ldr	r0, [pc, #412]	; (80033bc <ValveCheckCmd+0x8d0>)
 8003220:	f7fd fe44 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8003224:	4b62      	ldr	r3, [pc, #392]	; (80033b0 <ValveCheckCmd+0x8c4>)
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e198      	b.n	800355e <ValveCheckCmd+0xa72>
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin)){
 800322c:	4b60      	ldr	r3, [pc, #384]	; (80033b0 <ValveCheckCmd+0x8c4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8194 	beq.w	800355e <ValveCheckCmd+0xa72>
 8003236:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800323a:	4866      	ldr	r0, [pc, #408]	; (80033d4 <ValveCheckCmd+0x8e8>)
 800323c:	f000 fe40 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 818b 	beq.w	800355e <ValveCheckCmd+0xa72>
					UART_SendMessage(&huart2, " SOV7 is already ON...\n");
 8003248:	4964      	ldr	r1, [pc, #400]	; (80033dc <ValveCheckCmd+0x8f0>)
 800324a:	485c      	ldr	r0, [pc, #368]	; (80033bc <ValveCheckCmd+0x8d0>)
 800324c:	f7fd fe2e 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8003250:	4b57      	ldr	r3, [pc, #348]	; (80033b0 <ValveCheckCmd+0x8c4>)
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e182      	b.n	800355e <ValveCheckCmd+0xa72>
				}
			}
			else if (command == SOV7OFF){
 8003258:	4b53      	ldr	r3, [pc, #332]	; (80033a8 <ValveCheckCmd+0x8bc>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b60      	ldr	r3, [pc, #384]	; (80033e0 <ValveCheckCmd+0x8f4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d131      	bne.n	80032c8 <ValveCheckCmd+0x7dc>


				if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin)){
 8003264:	4b52      	ldr	r3, [pc, #328]	; (80033b0 <ValveCheckCmd+0x8c4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d017      	beq.n	800329c <ValveCheckCmd+0x7b0>
 800326c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003270:	4858      	ldr	r0, [pc, #352]	; (80033d4 <ValveCheckCmd+0x8e8>)
 8003272:	f000 fe25 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00f      	beq.n	800329c <ValveCheckCmd+0x7b0>

					valves_selected &= 0x3BF;
 800327c:	4b4d      	ldr	r3, [pc, #308]	; (80033b4 <ValveCheckCmd+0x8c8>)
 800327e:	881a      	ldrh	r2, [r3, #0]
 8003280:	f240 33bf 	movw	r3, #959	; 0x3bf
 8003284:	4013      	ands	r3, r2
 8003286:	b29a      	uxth	r2, r3
 8003288:	4b4a      	ldr	r3, [pc, #296]	; (80033b4 <ValveCheckCmd+0x8c8>)
 800328a:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV7 is OFF...\n");
 800328c:	4955      	ldr	r1, [pc, #340]	; (80033e4 <ValveCheckCmd+0x8f8>)
 800328e:	484b      	ldr	r0, [pc, #300]	; (80033bc <ValveCheckCmd+0x8d0>)
 8003290:	f7fd fe0c 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8003294:	4b46      	ldr	r3, [pc, #280]	; (80033b0 <ValveCheckCmd+0x8c4>)
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	e160      	b.n	800355e <ValveCheckCmd+0xa72>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin))) {
 800329c:	4b44      	ldr	r3, [pc, #272]	; (80033b0 <ValveCheckCmd+0x8c4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 815c 	beq.w	800355e <ValveCheckCmd+0xa72>
 80032a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032aa:	484a      	ldr	r0, [pc, #296]	; (80033d4 <ValveCheckCmd+0x8e8>)
 80032ac:	f000 fe08 	bl	8003ec0 <HAL_GPIO_ReadPin>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f040 8153 	bne.w	800355e <ValveCheckCmd+0xa72>
					UART_SendMessage(&huart2, " SOV7 is already OFF...\n");
 80032b8:	494b      	ldr	r1, [pc, #300]	; (80033e8 <ValveCheckCmd+0x8fc>)
 80032ba:	4840      	ldr	r0, [pc, #256]	; (80033bc <ValveCheckCmd+0x8d0>)
 80032bc:	f7fd fdf6 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 80032c0:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <ValveCheckCmd+0x8c4>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	e14a      	b.n	800355e <ValveCheckCmd+0xa72>
				}
			}
			else if(command == SOV8ON){
 80032c8:	4b37      	ldr	r3, [pc, #220]	; (80033a8 <ValveCheckCmd+0x8bc>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b47      	ldr	r3, [pc, #284]	; (80033ec <ValveCheckCmd+0x900>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d130      	bne.n	8003336 <ValveCheckCmd+0x84a>


				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin))){
 80032d4:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <ValveCheckCmd+0x8c4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d016      	beq.n	800330a <ValveCheckCmd+0x81e>
 80032dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032e0:	483c      	ldr	r0, [pc, #240]	; (80033d4 <ValveCheckCmd+0x8e8>)
 80032e2:	f000 fded 	bl	8003ec0 <HAL_GPIO_ReadPin>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10e      	bne.n	800330a <ValveCheckCmd+0x81e>
					valves_selected |= (uint16_t)SOV8;
 80032ec:	4b31      	ldr	r3, [pc, #196]	; (80033b4 <ValveCheckCmd+0x8c8>)
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	4b2f      	ldr	r3, [pc, #188]	; (80033b4 <ValveCheckCmd+0x8c8>)
 80032f8:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV8 is ON...\n");
 80032fa:	493d      	ldr	r1, [pc, #244]	; (80033f0 <ValveCheckCmd+0x904>)
 80032fc:	482f      	ldr	r0, [pc, #188]	; (80033bc <ValveCheckCmd+0x8d0>)
 80032fe:	f7fd fdd5 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8003302:	4b2b      	ldr	r3, [pc, #172]	; (80033b0 <ValveCheckCmd+0x8c4>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	e129      	b.n	800355e <ValveCheckCmd+0xa72>
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin)){
 800330a:	4b29      	ldr	r3, [pc, #164]	; (80033b0 <ValveCheckCmd+0x8c4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8125 	beq.w	800355e <ValveCheckCmd+0xa72>
 8003314:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003318:	482e      	ldr	r0, [pc, #184]	; (80033d4 <ValveCheckCmd+0x8e8>)
 800331a:	f000 fdd1 	bl	8003ec0 <HAL_GPIO_ReadPin>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 811c 	beq.w	800355e <ValveCheckCmd+0xa72>
					UART_SendMessage(&huart2, " SOV8 is already ON...\n");
 8003326:	4933      	ldr	r1, [pc, #204]	; (80033f4 <ValveCheckCmd+0x908>)
 8003328:	4824      	ldr	r0, [pc, #144]	; (80033bc <ValveCheckCmd+0x8d0>)
 800332a:	f7fd fdbf 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <ValveCheckCmd+0x8c4>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e113      	b.n	800355e <ValveCheckCmd+0xa72>
				}
			}
			else if (command == SOV8OFF){
 8003336:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <ValveCheckCmd+0x8bc>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <ValveCheckCmd+0x90c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d160      	bne.n	8003404 <ValveCheckCmd+0x918>

				if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin)){
 8003342:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <ValveCheckCmd+0x8c4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d017      	beq.n	800337a <ValveCheckCmd+0x88e>
 800334a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800334e:	4821      	ldr	r0, [pc, #132]	; (80033d4 <ValveCheckCmd+0x8e8>)
 8003350:	f000 fdb6 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00f      	beq.n	800337a <ValveCheckCmd+0x88e>
					valves_selected &= 0X37F;
 800335a:	4b16      	ldr	r3, [pc, #88]	; (80033b4 <ValveCheckCmd+0x8c8>)
 800335c:	881a      	ldrh	r2, [r3, #0]
 800335e:	f240 337f 	movw	r3, #895	; 0x37f
 8003362:	4013      	ands	r3, r2
 8003364:	b29a      	uxth	r2, r3
 8003366:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <ValveCheckCmd+0x8c8>)
 8003368:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV8 is OFF...\n");
 800336a:	4924      	ldr	r1, [pc, #144]	; (80033fc <ValveCheckCmd+0x910>)
 800336c:	4813      	ldr	r0, [pc, #76]	; (80033bc <ValveCheckCmd+0x8d0>)
 800336e:	f7fd fd9d 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8003372:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <ValveCheckCmd+0x8c4>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e0f1      	b.n	800355e <ValveCheckCmd+0xa72>
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin))){
 800337a:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <ValveCheckCmd+0x8c4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 80ed 	beq.w	800355e <ValveCheckCmd+0xa72>
 8003384:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003388:	4812      	ldr	r0, [pc, #72]	; (80033d4 <ValveCheckCmd+0x8e8>)
 800338a:	f000 fd99 	bl	8003ec0 <HAL_GPIO_ReadPin>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	f040 80e4 	bne.w	800355e <ValveCheckCmd+0xa72>
					UART_SendMessage(&huart2, " SOV8 is already OFF...\n");
 8003396:	491a      	ldr	r1, [pc, #104]	; (8003400 <ValveCheckCmd+0x914>)
 8003398:	4808      	ldr	r0, [pc, #32]	; (80033bc <ValveCheckCmd+0x8d0>)
 800339a:	f7fd fd87 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 800339e:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <ValveCheckCmd+0x8c4>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	e0db      	b.n	800355e <ValveCheckCmd+0xa72>
 80033a6:	bf00      	nop
 80033a8:	20000184 	.word	0x20000184
 80033ac:	200000c0 	.word	0x200000c0
 80033b0:	200001f0 	.word	0x200001f0
 80033b4:	200003e4 	.word	0x200003e4
 80033b8:	08006994 	.word	0x08006994
 80033bc:	2000035c 	.word	0x2000035c
 80033c0:	080069a4 	.word	0x080069a4
 80033c4:	200000c4 	.word	0x200000c4
 80033c8:	080069bc 	.word	0x080069bc
 80033cc:	080069d0 	.word	0x080069d0
 80033d0:	200000c8 	.word	0x200000c8
 80033d4:	48000400 	.word	0x48000400
 80033d8:	080069ec 	.word	0x080069ec
 80033dc:	080069fc 	.word	0x080069fc
 80033e0:	200000cc 	.word	0x200000cc
 80033e4:	08006a14 	.word	0x08006a14
 80033e8:	08006a28 	.word	0x08006a28
 80033ec:	200000d0 	.word	0x200000d0
 80033f0:	08006a44 	.word	0x08006a44
 80033f4:	08006a54 	.word	0x08006a54
 80033f8:	200000d4 	.word	0x200000d4
 80033fc:	08006a6c 	.word	0x08006a6c
 8003400:	08006a80 	.word	0x08006a80
				}
			}
			else if(command == SOV9ON){
 8003404:	4b61      	ldr	r3, [pc, #388]	; (800358c <ValveCheckCmd+0xaa0>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b61      	ldr	r3, [pc, #388]	; (8003590 <ValveCheckCmd+0xaa4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d12f      	bne.n	8003470 <ValveCheckCmd+0x984>


				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin))){
 8003410:	4b60      	ldr	r3, [pc, #384]	; (8003594 <ValveCheckCmd+0xaa8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d016      	beq.n	8003446 <ValveCheckCmd+0x95a>
 8003418:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800341c:	485e      	ldr	r0, [pc, #376]	; (8003598 <ValveCheckCmd+0xaac>)
 800341e:	f000 fd4f 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10e      	bne.n	8003446 <ValveCheckCmd+0x95a>
					valves_selected |= (uint16_t)SOV9;
 8003428:	4b5c      	ldr	r3, [pc, #368]	; (800359c <ValveCheckCmd+0xab0>)
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003430:	b29a      	uxth	r2, r3
 8003432:	4b5a      	ldr	r3, [pc, #360]	; (800359c <ValveCheckCmd+0xab0>)
 8003434:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV9 is ON...\n");
 8003436:	495a      	ldr	r1, [pc, #360]	; (80035a0 <ValveCheckCmd+0xab4>)
 8003438:	485a      	ldr	r0, [pc, #360]	; (80035a4 <ValveCheckCmd+0xab8>)
 800343a:	f7fd fd37 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 800343e:	4b55      	ldr	r3, [pc, #340]	; (8003594 <ValveCheckCmd+0xaa8>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	e08b      	b.n	800355e <ValveCheckCmd+0xa72>
				}
				else if(cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin)){
 8003446:	4b53      	ldr	r3, [pc, #332]	; (8003594 <ValveCheckCmd+0xaa8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 8087 	beq.w	800355e <ValveCheckCmd+0xa72>
 8003450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003454:	4850      	ldr	r0, [pc, #320]	; (8003598 <ValveCheckCmd+0xaac>)
 8003456:	f000 fd33 	bl	8003ec0 <HAL_GPIO_ReadPin>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d07e      	beq.n	800355e <ValveCheckCmd+0xa72>
					UART_SendMessage(&huart2, " SOV9 is already ON...\n");
 8003460:	4951      	ldr	r1, [pc, #324]	; (80035a8 <ValveCheckCmd+0xabc>)
 8003462:	4850      	ldr	r0, [pc, #320]	; (80035a4 <ValveCheckCmd+0xab8>)
 8003464:	f7fd fd22 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8003468:	4b4a      	ldr	r3, [pc, #296]	; (8003594 <ValveCheckCmd+0xaa8>)
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	e076      	b.n	800355e <ValveCheckCmd+0xa72>

				}
			}
			else if (command == SOV9OFF){
 8003470:	4b46      	ldr	r3, [pc, #280]	; (800358c <ValveCheckCmd+0xaa0>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b4d      	ldr	r3, [pc, #308]	; (80035ac <ValveCheckCmd+0xac0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d12f      	bne.n	80034dc <ValveCheckCmd+0x9f0>


				if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin)){
 800347c:	4b45      	ldr	r3, [pc, #276]	; (8003594 <ValveCheckCmd+0xaa8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d017      	beq.n	80034b4 <ValveCheckCmd+0x9c8>
 8003484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003488:	4843      	ldr	r0, [pc, #268]	; (8003598 <ValveCheckCmd+0xaac>)
 800348a:	f000 fd19 	bl	8003ec0 <HAL_GPIO_ReadPin>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00f      	beq.n	80034b4 <ValveCheckCmd+0x9c8>
					valves_selected &= 0X2FF;
 8003494:	4b41      	ldr	r3, [pc, #260]	; (800359c <ValveCheckCmd+0xab0>)
 8003496:	881a      	ldrh	r2, [r3, #0]
 8003498:	f240 23ff 	movw	r3, #767	; 0x2ff
 800349c:	4013      	ands	r3, r2
 800349e:	b29a      	uxth	r2, r3
 80034a0:	4b3e      	ldr	r3, [pc, #248]	; (800359c <ValveCheckCmd+0xab0>)
 80034a2:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV9 is OFF...\n");
 80034a4:	4942      	ldr	r1, [pc, #264]	; (80035b0 <ValveCheckCmd+0xac4>)
 80034a6:	483f      	ldr	r0, [pc, #252]	; (80035a4 <ValveCheckCmd+0xab8>)
 80034a8:	f7fd fd00 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 80034ac:	4b39      	ldr	r3, [pc, #228]	; (8003594 <ValveCheckCmd+0xaa8>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	e054      	b.n	800355e <ValveCheckCmd+0xa72>
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin))){
 80034b4:	4b37      	ldr	r3, [pc, #220]	; (8003594 <ValveCheckCmd+0xaa8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d050      	beq.n	800355e <ValveCheckCmd+0xa72>
 80034bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034c0:	4835      	ldr	r0, [pc, #212]	; (8003598 <ValveCheckCmd+0xaac>)
 80034c2:	f000 fcfd 	bl	8003ec0 <HAL_GPIO_ReadPin>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d148      	bne.n	800355e <ValveCheckCmd+0xa72>
					UART_SendMessage(&huart2, " SOV9 is already OFF...\n");
 80034cc:	4939      	ldr	r1, [pc, #228]	; (80035b4 <ValveCheckCmd+0xac8>)
 80034ce:	4835      	ldr	r0, [pc, #212]	; (80035a4 <ValveCheckCmd+0xab8>)
 80034d0:	f7fd fcec 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 80034d4:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <ValveCheckCmd+0xaa8>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e040      	b.n	800355e <ValveCheckCmd+0xa72>
				}
			}
            /*********************************************/
            // Auto cycling valves
			else if (command == cycle_valves && cmd_flag ){
 80034dc:	4b2b      	ldr	r3, [pc, #172]	; (800358c <ValveCheckCmd+0xaa0>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4b35      	ldr	r3, [pc, #212]	; (80035b8 <ValveCheckCmd+0xacc>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d121      	bne.n	800352c <ValveCheckCmd+0xa40>
 80034e8:	4b2a      	ldr	r3, [pc, #168]	; (8003594 <ValveCheckCmd+0xaa8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01d      	beq.n	800352c <ValveCheckCmd+0xa40>
				    UART_SendMessage(&huart2, " Auto cycling valves...\n");
 80034f0:	4932      	ldr	r1, [pc, #200]	; (80035bc <ValveCheckCmd+0xad0>)
 80034f2:	482c      	ldr	r0, [pc, #176]	; (80035a4 <ValveCheckCmd+0xab8>)
 80034f4:	f7fd fcda 	bl	8000eac <UART_SendMessage>
			    	cmd_flag = FALSE;
 80034f8:	4b26      	ldr	r3, [pc, #152]	; (8003594 <ValveCheckCmd+0xaa8>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]

                 //Set all the valves off before starting
			    	valves_selected = 0;
 80034fe:	4b27      	ldr	r3, [pc, #156]	; (800359c <ValveCheckCmd+0xab0>)
 8003500:	2200      	movs	r2, #0
 8003502:	801a      	strh	r2, [r3, #0]
			    	ctrl->valveTarget  = valves_selected;
 8003504:	4b25      	ldr	r3, [pc, #148]	; (800359c <ValveCheckCmd+0xab0>)
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	631a      	str	r2, [r3, #48]	; 0x30

			    	while(command == cycle_valves){
 800350e:	e006      	b.n	800351e <ValveCheckCmd+0xa32>
			    			success &= CycleValves(ctrl);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f859 	bl	80035c8 <CycleValves>
 8003516:	4602      	mov	r2, r0
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4013      	ands	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]
			    	while(command == cycle_valves){
 800351e:	4b1b      	ldr	r3, [pc, #108]	; (800358c <ValveCheckCmd+0xaa0>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4b25      	ldr	r3, [pc, #148]	; (80035b8 <ValveCheckCmd+0xacc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d0f2      	beq.n	8003510 <ValveCheckCmd+0xa24>
			else if (command == cycle_valves && cmd_flag ){
 800352a:	e018      	b.n	800355e <ValveCheckCmd+0xa72>
			    		}// end of while loop
			}


			else if(command == cycle_voff && cmd_flag){
 800352c:	4b17      	ldr	r3, [pc, #92]	; (800358c <ValveCheckCmd+0xaa0>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b23      	ldr	r3, [pc, #140]	; (80035c0 <ValveCheckCmd+0xad4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d112      	bne.n	800355e <ValveCheckCmd+0xa72>
 8003538:	4b16      	ldr	r3, [pc, #88]	; (8003594 <ValveCheckCmd+0xaa8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00e      	beq.n	800355e <ValveCheckCmd+0xa72>
			    		//Set all the valves off before starting
			    		valves_selected = 0;
 8003540:	4b16      	ldr	r3, [pc, #88]	; (800359c <ValveCheckCmd+0xab0>)
 8003542:	2200      	movs	r2, #0
 8003544:	801a      	strh	r2, [r3, #0]
			    		ctrl->valveTarget  = valves_selected;
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <ValveCheckCmd+0xab0>)
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	631a      	str	r2, [r3, #48]	; 0x30
			    		UART_SendMessage(&huart2, " Auto cycling valves OFF...\n");
 8003550:	491c      	ldr	r1, [pc, #112]	; (80035c4 <ValveCheckCmd+0xad8>)
 8003552:	4814      	ldr	r0, [pc, #80]	; (80035a4 <ValveCheckCmd+0xab8>)
 8003554:	f7fd fcaa 	bl	8000eac <UART_SendMessage>
			    		cmd_flag = FALSE;
 8003558:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <ValveCheckCmd+0xaa8>)
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
			   } // end of else if for cycle_valves
            /*************************************************************/

    	   // Set valves
			ctrl->valveTarget = valves_selected;
 800355e:	4b0f      	ldr	r3, [pc, #60]	; (800359c <ValveCheckCmd+0xab0>)
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
			success &= ValveStateSetter(ctrl->valveTarget);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff f9c5 	bl	80028fc <ValveStateSetter>
 8003572:	4602      	mov	r2, r0
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4013      	ands	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
			ctrl->valveConfiguration = StateConfiguration();
 800357a:	f7ff f941 	bl	8002800 <StateConfiguration>
 800357e:	4602      	mov	r2, r0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003584:	bf00      	nop
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20000184 	.word	0x20000184
 8003590:	200000d8 	.word	0x200000d8
 8003594:	200001f0 	.word	0x200001f0
 8003598:	48000400 	.word	0x48000400
 800359c:	200003e4 	.word	0x200003e4
 80035a0:	08006a9c 	.word	0x08006a9c
 80035a4:	2000035c 	.word	0x2000035c
 80035a8:	08006aac 	.word	0x08006aac
 80035ac:	200000dc 	.word	0x200000dc
 80035b0:	08006ac4 	.word	0x08006ac4
 80035b4:	08006ad8 	.word	0x08006ad8
 80035b8:	20000088 	.word	0x20000088
 80035bc:	08006af4 	.word	0x08006af4
 80035c0:	2000008c 	.word	0x2000008c
 80035c4:	08006b10 	.word	0x08006b10

080035c8 <CycleValves>:

uint32_t CycleValves(struct StateVars *ctrl)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	uint32_t success = TRUE;
 80035d0:	2301      	movs	r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
	HAL_Delay(900);
 80035d4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80035d8:	f000 f956 	bl	8003888 <HAL_Delay>

	if(ctrl->valveTarget == 0)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d103      	bne.n	80035ec <CycleValves+0x24>
	{
		ctrl->valveTarget = 0x1;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	631a      	str	r2, [r3, #48]	; 0x30
 80035ea:	e012      	b.n	8003612 <CycleValves+0x4a>
	}
	else if (ctrl->valveTarget <=512){
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035f4:	d805      	bhi.n	8003602 <CycleValves+0x3a>

		ctrl->valveTarget *= 2;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	005a      	lsls	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003600:	e007      	b.n	8003612 <CycleValves+0x4a>
	}
	else if (ctrl->valveTarget > 512){
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800360a:	d902      	bls.n	8003612 <CycleValves+0x4a>
		ctrl->valveTarget = 0 ;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	631a      	str	r2, [r3, #48]	; 0x30
	}


	success &= ValveStateSetter(ctrl->valveTarget);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff f970 	bl	80028fc <ValveStateSetter>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4013      	ands	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 8003624:	f7ff f8ec 	bl	8002800 <StateConfiguration>
 8003628:	4602      	mov	r2, r0
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	62da      	str	r2, [r3, #44]	; 0x2c

	return success;
 800362e:	68fb      	ldr	r3, [r7, #12]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <ValveCheck>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include <valve_check.h>
#include <messages.h>

uint32_t ValveCheck(struct StateVars *ctrl)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	uint32_t success = TRUE;
 8003640:	2301      	movs	r3, #1
 8003642:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 8003644:	f7ff f8dc 	bl	8002800 <StateConfiguration>
 8003648:	4602      	mov	r2, r0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	62da      	str	r2, [r3, #44]	; 0x2c


    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff f897 	bl	8002788 <VerifyState>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d051      	beq.n	8003704 <ValveCheck+0xcc>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff f88e 	bl	8002788 <VerifyState>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d048      	beq.n	8003704 <ValveCheck+0xcc>
    {
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d034      	beq.n	80036ea <ValveCheck+0xb2>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8   SOV9  IG1
    		//|  01 |  01  |  01  |   01  |  01  |  01 |  01  |  01  |  01 |  01 |

    		StateStatus(ctrl);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff f837 	bl	80026f4 <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003692:	429a      	cmp	r2, r3
 8003694:	d009      	beq.n	80036aa <ValveCheck+0x72>
    	    {
    			ctrl->valveTarget  = !((uint16_t)SOV1 \
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	; 0x30
    					|(uint16_t)SOV6 \
    					|(uint16_t)SOV7 \
    					|(uint16_t)SOV8 \
    					|(uint16_t)SOV9 \
						|(uint16_t)IG1   );
    		    valves_selected = 0;
 800369c:	4b24      	ldr	r3, [pc, #144]	; (8003730 <ValveCheck+0xf8>)
 800369e:	2200      	movs	r2, #0
 80036a0:	801a      	strh	r2, [r3, #0]
    			success = StateInitialize(ctrl);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff f9fe 	bl	8002aa4 <StateInitialize>
 80036a8:	60f8      	str	r0, [r7, #12]
    	    }


    		// Function to handle individual commands
    		ValveCheckCmd(ctrl);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff fa1e 	bl	8002aec <ValveCheckCmd>

    		ProcessCommands(ctrl);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7fd fd9f 	bl	80011f4 <ProcessCommands>

    		success &= (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	429a      	cmp	r2, r3
 80036c0:	d101      	bne.n	80036c6 <ValveCheck+0x8e>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <ValveCheck+0x90>
 80036c6:	2300      	movs	r3, #0
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4013      	ands	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

    		// Increment state counter
			ctrl->stateCounter++;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e0:	d11f      	bne.n	8003722 <ValveCheck+0xea>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 80036e8:	e01b      	b.n	8003722 <ValveCheck+0xea>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, VALVE_CHECK, ctrl->currentState);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036f0:	461a      	mov	r2, r3
 80036f2:	2101      	movs	r1, #1
 80036f4:	480f      	ldr	r0, [pc, #60]	; (8003734 <ValveCheck+0xfc>)
 80036f6:	f7fe fa79 	bl	8001bec <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 80036fa:	490e      	ldr	r1, [pc, #56]	; (8003734 <ValveCheck+0xfc>)
 80036fc:	480e      	ldr	r0, [pc, #56]	; (8003738 <ValveCheck+0x100>)
 80036fe:	f7fd fbd5 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 8003702:	e00e      	b.n	8003722 <ValveCheck+0xea>
    	}
    }else{
    	    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003710:	461a      	mov	r2, r3
 8003712:	4808      	ldr	r0, [pc, #32]	; (8003734 <ValveCheck+0xfc>)
 8003714:	f7fe fae4 	bl	8001ce0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8003718:	4906      	ldr	r1, [pc, #24]	; (8003734 <ValveCheck+0xfc>)
 800371a:	4807      	ldr	r0, [pc, #28]	; (8003738 <ValveCheck+0x100>)
 800371c:	f7fd fbc6 	bl	8000eac <UART_SendMessage>
 8003720:	e000      	b.n	8003724 <ValveCheck+0xec>
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 8003722:	bf00      	nop
    }
	return success;
 8003724:	68fb      	ldr	r3, [r7, #12]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	200003e4 	.word	0x200003e4
 8003734:	20000188 	.word	0x20000188
 8003738:	2000035c 	.word	0x2000035c

0800373c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800373c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003774 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003740:	f7fe ff2a 	bl	8002598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003744:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003746:	e003      	b.n	8003750 <LoopCopyDataInit>

08003748 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800374a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800374c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800374e:	3104      	adds	r1, #4

08003750 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003750:	480a      	ldr	r0, [pc, #40]	; (800377c <LoopForever+0xa>)
	ldr	r3, =_edata
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003754:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003756:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003758:	d3f6      	bcc.n	8003748 <CopyDataInit>
	ldr	r2, =_sbss
 800375a:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <LoopForever+0x12>)
	b	LoopFillZerobss
 800375c:	e002      	b.n	8003764 <LoopFillZerobss>

0800375e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800375e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003760:	f842 3b04 	str.w	r3, [r2], #4

08003764 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <LoopForever+0x16>)
	cmp	r2, r3
 8003766:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003768:	d3f9      	bcc.n	800375e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800376a:	f002 fa21 	bl	8005bb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800376e:	f7fd fb6d 	bl	8000e4c <main>

08003772 <LoopForever>:

LoopForever:
    b LoopForever
 8003772:	e7fe      	b.n	8003772 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003774:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003778:	08006bbc 	.word	0x08006bbc
	ldr	r0, =_sdata
 800377c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003780:	2000014c 	.word	0x2000014c
	ldr	r2, =_sbss
 8003784:	2000014c 	.word	0x2000014c
	ldr	r3, = _ebss
 8003788:	200003f0 	.word	0x200003f0

0800378c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800378c:	e7fe      	b.n	800378c <ADC1_2_IRQHandler>
	...

08003790 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800379a:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <HAL_Init+0x3c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a0b      	ldr	r2, [pc, #44]	; (80037cc <HAL_Init+0x3c>)
 80037a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037a6:	2003      	movs	r0, #3
 80037a8:	f000 f960 	bl	8003a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037ac:	2000      	movs	r0, #0
 80037ae:	f000 f80f 	bl	80037d0 <HAL_InitTick>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	71fb      	strb	r3, [r7, #7]
 80037bc:	e001      	b.n	80037c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037be:	f7fe fe0b 	bl	80023d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037c2:	79fb      	ldrb	r3, [r7, #7]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40022000 	.word	0x40022000

080037d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80037dc:	4b17      	ldr	r3, [pc, #92]	; (800383c <HAL_InitTick+0x6c>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d023      	beq.n	800382c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80037e4:	4b16      	ldr	r3, [pc, #88]	; (8003840 <HAL_InitTick+0x70>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	4b14      	ldr	r3, [pc, #80]	; (800383c <HAL_InitTick+0x6c>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	4619      	mov	r1, r3
 80037ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f96b 	bl	8003ad6 <HAL_SYSTICK_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10f      	bne.n	8003826 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b0f      	cmp	r3, #15
 800380a:	d809      	bhi.n	8003820 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800380c:	2200      	movs	r2, #0
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	f04f 30ff 	mov.w	r0, #4294967295
 8003814:	f000 f935 	bl	8003a82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003818:	4a0a      	ldr	r2, [pc, #40]	; (8003844 <HAL_InitTick+0x74>)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e007      	b.n	8003830 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
 8003824:	e004      	b.n	8003830 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
 800382a:	e001      	b.n	8003830 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003830:	7bfb      	ldrb	r3, [r7, #15]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	200000e4 	.word	0x200000e4
 8003840:	20000084 	.word	0x20000084
 8003844:	200000e0 	.word	0x200000e0

08003848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_IncTick+0x20>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_IncTick+0x24>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4413      	add	r3, r2
 8003858:	4a04      	ldr	r2, [pc, #16]	; (800386c <HAL_IncTick+0x24>)
 800385a:	6013      	str	r3, [r2, #0]
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	200000e4 	.word	0x200000e4
 800386c:	200003e8 	.word	0x200003e8

08003870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return uwTick;
 8003874:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_GetTick+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	200003e8 	.word	0x200003e8

08003888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003890:	f7ff ffee 	bl	8003870 <HAL_GetTick>
 8003894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d005      	beq.n	80038ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80038a2:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <HAL_Delay+0x40>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038ae:	bf00      	nop
 80038b0:	f7ff ffde 	bl	8003870 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d8f7      	bhi.n	80038b0 <HAL_Delay+0x28>
  {
  }
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	200000e4 	.word	0x200000e4

080038cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <__NVIC_SetPriorityGrouping+0x44>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038e8:	4013      	ands	r3, r2
 80038ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038fe:	4a04      	ldr	r2, [pc, #16]	; (8003910 <__NVIC_SetPriorityGrouping+0x44>)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	60d3      	str	r3, [r2, #12]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003918:	4b04      	ldr	r3, [pc, #16]	; (800392c <__NVIC_GetPriorityGrouping+0x18>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	0a1b      	lsrs	r3, r3, #8
 800391e:	f003 0307 	and.w	r3, r3, #7
}
 8003922:	4618      	mov	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	2b00      	cmp	r3, #0
 8003940:	db0b      	blt.n	800395a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	f003 021f 	and.w	r2, r3, #31
 8003948:	4907      	ldr	r1, [pc, #28]	; (8003968 <__NVIC_EnableIRQ+0x38>)
 800394a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	2001      	movs	r0, #1
 8003952:	fa00 f202 	lsl.w	r2, r0, r2
 8003956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	e000e100 	.word	0xe000e100

0800396c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	6039      	str	r1, [r7, #0]
 8003976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397c:	2b00      	cmp	r3, #0
 800397e:	db0a      	blt.n	8003996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	b2da      	uxtb	r2, r3
 8003984:	490c      	ldr	r1, [pc, #48]	; (80039b8 <__NVIC_SetPriority+0x4c>)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	0112      	lsls	r2, r2, #4
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	440b      	add	r3, r1
 8003990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003994:	e00a      	b.n	80039ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	4908      	ldr	r1, [pc, #32]	; (80039bc <__NVIC_SetPriority+0x50>)
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	3b04      	subs	r3, #4
 80039a4:	0112      	lsls	r2, r2, #4
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	440b      	add	r3, r1
 80039aa:	761a      	strb	r2, [r3, #24]
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000e100 	.word	0xe000e100
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b089      	sub	sp, #36	; 0x24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f1c3 0307 	rsb	r3, r3, #7
 80039da:	2b04      	cmp	r3, #4
 80039dc:	bf28      	it	cs
 80039de:	2304      	movcs	r3, #4
 80039e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3304      	adds	r3, #4
 80039e6:	2b06      	cmp	r3, #6
 80039e8:	d902      	bls.n	80039f0 <NVIC_EncodePriority+0x30>
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	3b03      	subs	r3, #3
 80039ee:	e000      	b.n	80039f2 <NVIC_EncodePriority+0x32>
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f4:	f04f 32ff 	mov.w	r2, #4294967295
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43da      	mvns	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	401a      	ands	r2, r3
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a08:	f04f 31ff 	mov.w	r1, #4294967295
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a12:	43d9      	mvns	r1, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a18:	4313      	orrs	r3, r2
         );
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3724      	adds	r7, #36	; 0x24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a38:	d301      	bcc.n	8003a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e00f      	b.n	8003a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a3e:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <SysTick_Config+0x40>)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a46:	210f      	movs	r1, #15
 8003a48:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4c:	f7ff ff8e 	bl	800396c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <SysTick_Config+0x40>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a56:	4b04      	ldr	r3, [pc, #16]	; (8003a68 <SysTick_Config+0x40>)
 8003a58:	2207      	movs	r2, #7
 8003a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	e000e010 	.word	0xe000e010

08003a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff ff29 	bl	80038cc <__NVIC_SetPriorityGrouping>
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b086      	sub	sp, #24
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	4603      	mov	r3, r0
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a94:	f7ff ff3e 	bl	8003914 <__NVIC_GetPriorityGrouping>
 8003a98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	68b9      	ldr	r1, [r7, #8]
 8003a9e:	6978      	ldr	r0, [r7, #20]
 8003aa0:	f7ff ff8e 	bl	80039c0 <NVIC_EncodePriority>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aaa:	4611      	mov	r1, r2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ff5d 	bl	800396c <__NVIC_SetPriority>
}
 8003ab2:	bf00      	nop
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ff31 	bl	8003930 <__NVIC_EnableIRQ>
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff ffa2 	bl	8003a28 <SysTick_Config>
 8003ae4:	4603      	mov	r3, r0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d005      	beq.n	8003b12 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2204      	movs	r2, #4
 8003b0a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
 8003b10:	e029      	b.n	8003b66 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 020e 	bic.w	r2, r2, #14
 8003b20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	f003 021c 	and.w	r2, r3, #28
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	2101      	movs	r1, #1
 8003b40:	fa01 f202 	lsl.w	r2, r1, r2
 8003b44:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	4798      	blx	r3
    }
  }
  return status;
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b7e:	e17f      	b.n	8003e80 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	2101      	movs	r1, #1
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 8171 	beq.w	8003e7a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d00b      	beq.n	8003bb8 <HAL_GPIO_Init+0x48>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d007      	beq.n	8003bb8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bac:	2b11      	cmp	r3, #17
 8003bae:	d003      	beq.n	8003bb8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b12      	cmp	r3, #18
 8003bb6:	d130      	bne.n	8003c1a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bee:	2201      	movs	r2, #1
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	091b      	lsrs	r3, r3, #4
 8003c04:	f003 0201 	and.w	r2, r3, #1
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d118      	bne.n	8003c58 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	08db      	lsrs	r3, r3, #3
 8003c42:	f003 0201 	and.w	r2, r3, #1
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	2203      	movs	r2, #3
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d003      	beq.n	8003c98 <HAL_GPIO_Init+0x128>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b12      	cmp	r3, #18
 8003c96:	d123      	bne.n	8003ce0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	08da      	lsrs	r2, r3, #3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3208      	adds	r2, #8
 8003ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	220f      	movs	r2, #15
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	08da      	lsrs	r2, r3, #3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3208      	adds	r2, #8
 8003cda:	6939      	ldr	r1, [r7, #16]
 8003cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	2203      	movs	r2, #3
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 0203 	and.w	r2, r3, #3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80ac 	beq.w	8003e7a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d22:	4b5e      	ldr	r3, [pc, #376]	; (8003e9c <HAL_GPIO_Init+0x32c>)
 8003d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d26:	4a5d      	ldr	r2, [pc, #372]	; (8003e9c <HAL_GPIO_Init+0x32c>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	6613      	str	r3, [r2, #96]	; 0x60
 8003d2e:	4b5b      	ldr	r3, [pc, #364]	; (8003e9c <HAL_GPIO_Init+0x32c>)
 8003d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	60bb      	str	r3, [r7, #8]
 8003d38:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d3a:	4a59      	ldr	r2, [pc, #356]	; (8003ea0 <HAL_GPIO_Init+0x330>)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	089b      	lsrs	r3, r3, #2
 8003d40:	3302      	adds	r3, #2
 8003d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	220f      	movs	r2, #15
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d64:	d025      	beq.n	8003db2 <HAL_GPIO_Init+0x242>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a4e      	ldr	r2, [pc, #312]	; (8003ea4 <HAL_GPIO_Init+0x334>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01f      	beq.n	8003dae <HAL_GPIO_Init+0x23e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a4d      	ldr	r2, [pc, #308]	; (8003ea8 <HAL_GPIO_Init+0x338>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d019      	beq.n	8003daa <HAL_GPIO_Init+0x23a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a4c      	ldr	r2, [pc, #304]	; (8003eac <HAL_GPIO_Init+0x33c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <HAL_GPIO_Init+0x236>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a4b      	ldr	r2, [pc, #300]	; (8003eb0 <HAL_GPIO_Init+0x340>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00d      	beq.n	8003da2 <HAL_GPIO_Init+0x232>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a4a      	ldr	r2, [pc, #296]	; (8003eb4 <HAL_GPIO_Init+0x344>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d007      	beq.n	8003d9e <HAL_GPIO_Init+0x22e>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a49      	ldr	r2, [pc, #292]	; (8003eb8 <HAL_GPIO_Init+0x348>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d101      	bne.n	8003d9a <HAL_GPIO_Init+0x22a>
 8003d96:	2306      	movs	r3, #6
 8003d98:	e00c      	b.n	8003db4 <HAL_GPIO_Init+0x244>
 8003d9a:	2307      	movs	r3, #7
 8003d9c:	e00a      	b.n	8003db4 <HAL_GPIO_Init+0x244>
 8003d9e:	2305      	movs	r3, #5
 8003da0:	e008      	b.n	8003db4 <HAL_GPIO_Init+0x244>
 8003da2:	2304      	movs	r3, #4
 8003da4:	e006      	b.n	8003db4 <HAL_GPIO_Init+0x244>
 8003da6:	2303      	movs	r3, #3
 8003da8:	e004      	b.n	8003db4 <HAL_GPIO_Init+0x244>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e002      	b.n	8003db4 <HAL_GPIO_Init+0x244>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <HAL_GPIO_Init+0x244>
 8003db2:	2300      	movs	r3, #0
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	f002 0203 	and.w	r2, r2, #3
 8003dba:	0092      	lsls	r2, r2, #2
 8003dbc:	4093      	lsls	r3, r2
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dc4:	4936      	ldr	r1, [pc, #216]	; (8003ea0 <HAL_GPIO_Init+0x330>)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	089b      	lsrs	r3, r3, #2
 8003dca:	3302      	adds	r3, #2
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003dd2:	4b3a      	ldr	r3, [pc, #232]	; (8003ebc <HAL_GPIO_Init+0x34c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4013      	ands	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003df6:	4a31      	ldr	r2, [pc, #196]	; (8003ebc <HAL_GPIO_Init+0x34c>)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003dfc:	4b2f      	ldr	r3, [pc, #188]	; (8003ebc <HAL_GPIO_Init+0x34c>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e20:	4a26      	ldr	r2, [pc, #152]	; (8003ebc <HAL_GPIO_Init+0x34c>)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e26:	4b25      	ldr	r3, [pc, #148]	; (8003ebc <HAL_GPIO_Init+0x34c>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4013      	ands	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e4a:	4a1c      	ldr	r2, [pc, #112]	; (8003ebc <HAL_GPIO_Init+0x34c>)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e50:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <HAL_GPIO_Init+0x34c>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e74:	4a11      	ldr	r2, [pc, #68]	; (8003ebc <HAL_GPIO_Init+0x34c>)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f47f ae78 	bne.w	8003b80 <HAL_GPIO_Init+0x10>
  }
}
 8003e90:	bf00      	nop
 8003e92:	371c      	adds	r7, #28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	40010000 	.word	0x40010000
 8003ea4:	48000400 	.word	0x48000400
 8003ea8:	48000800 	.word	0x48000800
 8003eac:	48000c00 	.word	0x48000c00
 8003eb0:	48001000 	.word	0x48001000
 8003eb4:	48001400 	.word	0x48001400
 8003eb8:	48001800 	.word	0x48001800
 8003ebc:	40010400 	.word	0x40010400

08003ec0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	887b      	ldrh	r3, [r7, #2]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
 8003edc:	e001      	b.n	8003ee2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	807b      	strh	r3, [r7, #2]
 8003efc:	4613      	mov	r3, r2
 8003efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f00:	787b      	ldrb	r3, [r7, #1]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f06:	887a      	ldrh	r2, [r7, #2]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f0c:	e002      	b.n	8003f14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f0e:	887a      	ldrh	r2, [r7, #2]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f2a:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f2c:	695a      	ldr	r2, [r3, #20]
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d006      	beq.n	8003f44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f36:	4a05      	ldr	r2, [pc, #20]	; (8003f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f3c:	88fb      	ldrh	r3, [r7, #6]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 f806 	bl	8003f50 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f44:	bf00      	nop
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40010400 	.word	0x40010400

08003f50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f6c:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40007000 	.word	0x40007000

08003f84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f92:	d130      	bne.n	8003ff6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f94:	4b23      	ldr	r3, [pc, #140]	; (8004024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa0:	d038      	beq.n	8004014 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fa2:	4b20      	ldr	r3, [pc, #128]	; (8004024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003faa:	4a1e      	ldr	r2, [pc, #120]	; (8004024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fb0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fb2:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2232      	movs	r2, #50	; 0x32
 8003fb8:	fb02 f303 	mul.w	r3, r2, r3
 8003fbc:	4a1b      	ldr	r2, [pc, #108]	; (800402c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	0c9b      	lsrs	r3, r3, #18
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fc8:	e002      	b.n	8003fd0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fd0:	4b14      	ldr	r3, [pc, #80]	; (8004024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fdc:	d102      	bne.n	8003fe4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1f2      	bne.n	8003fca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fe4:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff0:	d110      	bne.n	8004014 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e00f      	b.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004002:	d007      	beq.n	8004014 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004004:	4b07      	ldr	r3, [pc, #28]	; (8004024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800400c:	4a05      	ldr	r2, [pc, #20]	; (8004024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800400e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004012:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40007000 	.word	0x40007000
 8004028:	20000084 	.word	0x20000084
 800402c:	431bde83 	.word	0x431bde83

08004030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e3d4      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004042:	4ba1      	ldr	r3, [pc, #644]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 030c 	and.w	r3, r3, #12
 800404a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800404c:	4b9e      	ldr	r3, [pc, #632]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0303 	and.w	r3, r3, #3
 8004054:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 80e4 	beq.w	800422c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d007      	beq.n	800407a <HAL_RCC_OscConfig+0x4a>
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	2b0c      	cmp	r3, #12
 800406e:	f040 808b 	bne.w	8004188 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2b01      	cmp	r3, #1
 8004076:	f040 8087 	bne.w	8004188 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800407a:	4b93      	ldr	r3, [pc, #588]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d005      	beq.n	8004092 <HAL_RCC_OscConfig+0x62>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e3ac      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1a      	ldr	r2, [r3, #32]
 8004096:	4b8c      	ldr	r3, [pc, #560]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d004      	beq.n	80040ac <HAL_RCC_OscConfig+0x7c>
 80040a2:	4b89      	ldr	r3, [pc, #548]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040aa:	e005      	b.n	80040b8 <HAL_RCC_OscConfig+0x88>
 80040ac:	4b86      	ldr	r3, [pc, #536]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80040ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b2:	091b      	lsrs	r3, r3, #4
 80040b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d223      	bcs.n	8004104 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fd3f 	bl	8004b44 <RCC_SetFlashLatencyFromMSIRange>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e38d      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040d0:	4b7d      	ldr	r3, [pc, #500]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a7c      	ldr	r2, [pc, #496]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80040d6:	f043 0308 	orr.w	r3, r3, #8
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	4b7a      	ldr	r3, [pc, #488]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	4977      	ldr	r1, [pc, #476]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040ee:	4b76      	ldr	r3, [pc, #472]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	021b      	lsls	r3, r3, #8
 80040fc:	4972      	ldr	r1, [pc, #456]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	604b      	str	r3, [r1, #4]
 8004102:	e025      	b.n	8004150 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004104:	4b70      	ldr	r3, [pc, #448]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a6f      	ldr	r2, [pc, #444]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 800410a:	f043 0308 	orr.w	r3, r3, #8
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	4b6d      	ldr	r3, [pc, #436]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	496a      	ldr	r1, [pc, #424]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004122:	4b69      	ldr	r3, [pc, #420]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	4965      	ldr	r1, [pc, #404]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 8004132:	4313      	orrs	r3, r2
 8004134:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d109      	bne.n	8004150 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fcff 	bl	8004b44 <RCC_SetFlashLatencyFromMSIRange>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e34d      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004150:	f000 fc36 	bl	80049c0 <HAL_RCC_GetSysClockFreq>
 8004154:	4601      	mov	r1, r0
 8004156:	4b5c      	ldr	r3, [pc, #368]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	091b      	lsrs	r3, r3, #4
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	4a5a      	ldr	r2, [pc, #360]	; (80042cc <HAL_RCC_OscConfig+0x29c>)
 8004162:	5cd3      	ldrb	r3, [r2, r3]
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	fa21 f303 	lsr.w	r3, r1, r3
 800416c:	4a58      	ldr	r2, [pc, #352]	; (80042d0 <HAL_RCC_OscConfig+0x2a0>)
 800416e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004170:	4b58      	ldr	r3, [pc, #352]	; (80042d4 <HAL_RCC_OscConfig+0x2a4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff fb2b 	bl	80037d0 <HAL_InitTick>
 800417a:	4603      	mov	r3, r0
 800417c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800417e:	7bfb      	ldrb	r3, [r7, #15]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d052      	beq.n	800422a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004184:	7bfb      	ldrb	r3, [r7, #15]
 8004186:	e331      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d032      	beq.n	80041f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004190:	4b4d      	ldr	r3, [pc, #308]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a4c      	ldr	r2, [pc, #304]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 8004196:	f043 0301 	orr.w	r3, r3, #1
 800419a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800419c:	f7ff fb68 	bl	8003870 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041a4:	f7ff fb64 	bl	8003870 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e31a      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041b6:	4b44      	ldr	r3, [pc, #272]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041c2:	4b41      	ldr	r3, [pc, #260]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a40      	ldr	r2, [pc, #256]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80041c8:	f043 0308 	orr.w	r3, r3, #8
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	4b3e      	ldr	r3, [pc, #248]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	493b      	ldr	r1, [pc, #236]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041e0:	4b39      	ldr	r3, [pc, #228]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	4936      	ldr	r1, [pc, #216]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	604b      	str	r3, [r1, #4]
 80041f4:	e01a      	b.n	800422c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041f6:	4b34      	ldr	r3, [pc, #208]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a33      	ldr	r2, [pc, #204]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80041fc:	f023 0301 	bic.w	r3, r3, #1
 8004200:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004202:	f7ff fb35 	bl	8003870 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800420a:	f7ff fb31 	bl	8003870 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e2e7      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800421c:	4b2a      	ldr	r3, [pc, #168]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1f0      	bne.n	800420a <HAL_RCC_OscConfig+0x1da>
 8004228:	e000      	b.n	800422c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800422a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d074      	beq.n	8004322 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b08      	cmp	r3, #8
 800423c:	d005      	beq.n	800424a <HAL_RCC_OscConfig+0x21a>
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b0c      	cmp	r3, #12
 8004242:	d10e      	bne.n	8004262 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2b03      	cmp	r3, #3
 8004248:	d10b      	bne.n	8004262 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424a:	4b1f      	ldr	r3, [pc, #124]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d064      	beq.n	8004320 <HAL_RCC_OscConfig+0x2f0>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d160      	bne.n	8004320 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e2c4      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426a:	d106      	bne.n	800427a <HAL_RCC_OscConfig+0x24a>
 800426c:	4b16      	ldr	r3, [pc, #88]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a15      	ldr	r2, [pc, #84]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 8004272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	e01d      	b.n	80042b6 <HAL_RCC_OscConfig+0x286>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004282:	d10c      	bne.n	800429e <HAL_RCC_OscConfig+0x26e>
 8004284:	4b10      	ldr	r3, [pc, #64]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a0f      	ldr	r2, [pc, #60]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 800428a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a0c      	ldr	r2, [pc, #48]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 8004296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	e00b      	b.n	80042b6 <HAL_RCC_OscConfig+0x286>
 800429e:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a09      	ldr	r2, [pc, #36]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80042a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a06      	ldr	r2, [pc, #24]	; (80042c8 <HAL_RCC_OscConfig+0x298>)
 80042b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01c      	beq.n	80042f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042be:	f7ff fad7 	bl	8003870 <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042c4:	e011      	b.n	80042ea <HAL_RCC_OscConfig+0x2ba>
 80042c6:	bf00      	nop
 80042c8:	40021000 	.word	0x40021000
 80042cc:	08006b30 	.word	0x08006b30
 80042d0:	20000084 	.word	0x20000084
 80042d4:	200000e0 	.word	0x200000e0
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d8:	f7ff faca 	bl	8003870 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	; 0x64
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e280      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ea:	4baf      	ldr	r3, [pc, #700]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCC_OscConfig+0x2a8>
 80042f6:	e014      	b.n	8004322 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f8:	f7ff faba 	bl	8003870 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004300:	f7ff fab6 	bl	8003870 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b64      	cmp	r3, #100	; 0x64
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e26c      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004312:	4ba5      	ldr	r3, [pc, #660]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0x2d0>
 800431e:	e000      	b.n	8004322 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d060      	beq.n	80043f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b04      	cmp	r3, #4
 8004332:	d005      	beq.n	8004340 <HAL_RCC_OscConfig+0x310>
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b0c      	cmp	r3, #12
 8004338:	d119      	bne.n	800436e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d116      	bne.n	800436e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004340:	4b99      	ldr	r3, [pc, #612]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_RCC_OscConfig+0x328>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e249      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004358:	4b93      	ldr	r3, [pc, #588]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	061b      	lsls	r3, r3, #24
 8004366:	4990      	ldr	r1, [pc, #576]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 8004368:	4313      	orrs	r3, r2
 800436a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800436c:	e040      	b.n	80043f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d023      	beq.n	80043be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004376:	4b8c      	ldr	r3, [pc, #560]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a8b      	ldr	r2, [pc, #556]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 800437c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004382:	f7ff fa75 	bl	8003870 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800438a:	f7ff fa71 	bl	8003870 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e227      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800439c:	4b82      	ldr	r3, [pc, #520]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a8:	4b7f      	ldr	r3, [pc, #508]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	061b      	lsls	r3, r3, #24
 80043b6:	497c      	ldr	r1, [pc, #496]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	604b      	str	r3, [r1, #4]
 80043bc:	e018      	b.n	80043f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043be:	4b7a      	ldr	r3, [pc, #488]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a79      	ldr	r2, [pc, #484]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 80043c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ca:	f7ff fa51 	bl	8003870 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d2:	f7ff fa4d 	bl	8003870 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e203      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043e4:	4b70      	ldr	r3, [pc, #448]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1f0      	bne.n	80043d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d03c      	beq.n	8004476 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01c      	beq.n	800443e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004404:	4b68      	ldr	r3, [pc, #416]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 8004406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800440a:	4a67      	ldr	r2, [pc, #412]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004414:	f7ff fa2c 	bl	8003870 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800441c:	f7ff fa28 	bl	8003870 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e1de      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800442e:	4b5e      	ldr	r3, [pc, #376]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 8004430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0ef      	beq.n	800441c <HAL_RCC_OscConfig+0x3ec>
 800443c:	e01b      	b.n	8004476 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800443e:	4b5a      	ldr	r3, [pc, #360]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 8004440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004444:	4a58      	ldr	r2, [pc, #352]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 8004446:	f023 0301 	bic.w	r3, r3, #1
 800444a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444e:	f7ff fa0f 	bl	8003870 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004456:	f7ff fa0b 	bl	8003870 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e1c1      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004468:	4b4f      	ldr	r3, [pc, #316]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 800446a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1ef      	bne.n	8004456 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 80a6 	beq.w	80045d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004484:	2300      	movs	r3, #0
 8004486:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004488:	4b47      	ldr	r3, [pc, #284]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 800448a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10d      	bne.n	80044b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004494:	4b44      	ldr	r3, [pc, #272]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 8004496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004498:	4a43      	ldr	r2, [pc, #268]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 800449a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449e:	6593      	str	r3, [r2, #88]	; 0x58
 80044a0:	4b41      	ldr	r3, [pc, #260]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 80044a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ac:	2301      	movs	r3, #1
 80044ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b0:	4b3e      	ldr	r3, [pc, #248]	; (80045ac <HAL_RCC_OscConfig+0x57c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d118      	bne.n	80044ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044bc:	4b3b      	ldr	r3, [pc, #236]	; (80045ac <HAL_RCC_OscConfig+0x57c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a3a      	ldr	r2, [pc, #232]	; (80045ac <HAL_RCC_OscConfig+0x57c>)
 80044c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044c8:	f7ff f9d2 	bl	8003870 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d0:	f7ff f9ce 	bl	8003870 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e184      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044e2:	4b32      	ldr	r3, [pc, #200]	; (80045ac <HAL_RCC_OscConfig+0x57c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d108      	bne.n	8004508 <HAL_RCC_OscConfig+0x4d8>
 80044f6:	4b2c      	ldr	r3, [pc, #176]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 80044f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fc:	4a2a      	ldr	r2, [pc, #168]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 80044fe:	f043 0301 	orr.w	r3, r3, #1
 8004502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004506:	e024      	b.n	8004552 <HAL_RCC_OscConfig+0x522>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b05      	cmp	r3, #5
 800450e:	d110      	bne.n	8004532 <HAL_RCC_OscConfig+0x502>
 8004510:	4b25      	ldr	r3, [pc, #148]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	4a24      	ldr	r2, [pc, #144]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 8004518:	f043 0304 	orr.w	r3, r3, #4
 800451c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004520:	4b21      	ldr	r3, [pc, #132]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004526:	4a20      	ldr	r2, [pc, #128]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 8004528:	f043 0301 	orr.w	r3, r3, #1
 800452c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004530:	e00f      	b.n	8004552 <HAL_RCC_OscConfig+0x522>
 8004532:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	4a1b      	ldr	r2, [pc, #108]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004542:	4b19      	ldr	r3, [pc, #100]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 8004544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004548:	4a17      	ldr	r2, [pc, #92]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 800454a:	f023 0304 	bic.w	r3, r3, #4
 800454e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d016      	beq.n	8004588 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455a:	f7ff f989 	bl	8003870 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004560:	e00a      	b.n	8004578 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004562:	f7ff f985 	bl	8003870 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004570:	4293      	cmp	r3, r2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e139      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_RCC_OscConfig+0x578>)
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0ed      	beq.n	8004562 <HAL_RCC_OscConfig+0x532>
 8004586:	e01a      	b.n	80045be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004588:	f7ff f972 	bl	8003870 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800458e:	e00f      	b.n	80045b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004590:	f7ff f96e 	bl	8003870 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	f241 3288 	movw	r2, #5000	; 0x1388
 800459e:	4293      	cmp	r3, r2
 80045a0:	d906      	bls.n	80045b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e122      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045b0:	4b90      	ldr	r3, [pc, #576]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e8      	bne.n	8004590 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045be:	7ffb      	ldrb	r3, [r7, #31]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d105      	bne.n	80045d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c4:	4b8b      	ldr	r3, [pc, #556]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 80045c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c8:	4a8a      	ldr	r2, [pc, #552]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 80045ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 8108 	beq.w	80047ea <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045de:	2b02      	cmp	r3, #2
 80045e0:	f040 80d0 	bne.w	8004784 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80045e4:	4b83      	ldr	r3, [pc, #524]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f003 0203 	and.w	r2, r3, #3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d130      	bne.n	800465a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	3b01      	subs	r3, #1
 8004604:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004606:	429a      	cmp	r2, r3
 8004608:	d127      	bne.n	800465a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004614:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004616:	429a      	cmp	r2, r3
 8004618:	d11f      	bne.n	800465a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004624:	2a07      	cmp	r2, #7
 8004626:	bf14      	ite	ne
 8004628:	2201      	movne	r2, #1
 800462a:	2200      	moveq	r2, #0
 800462c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800462e:	4293      	cmp	r3, r2
 8004630:	d113      	bne.n	800465a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463c:	085b      	lsrs	r3, r3, #1
 800463e:	3b01      	subs	r3, #1
 8004640:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004642:	429a      	cmp	r2, r3
 8004644:	d109      	bne.n	800465a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	085b      	lsrs	r3, r3, #1
 8004652:	3b01      	subs	r3, #1
 8004654:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004656:	429a      	cmp	r2, r3
 8004658:	d06e      	beq.n	8004738 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2b0c      	cmp	r3, #12
 800465e:	d069      	beq.n	8004734 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004660:	4b64      	ldr	r3, [pc, #400]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d105      	bne.n	8004678 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800466c:	4b61      	ldr	r3, [pc, #388]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e0b7      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800467c:	4b5d      	ldr	r3, [pc, #372]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a5c      	ldr	r2, [pc, #368]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 8004682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004686:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004688:	f7ff f8f2 	bl	8003870 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004690:	f7ff f8ee 	bl	8003870 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e0a4      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a2:	4b54      	ldr	r3, [pc, #336]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f0      	bne.n	8004690 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ae:	4b51      	ldr	r3, [pc, #324]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	4b51      	ldr	r3, [pc, #324]	; (80047f8 <HAL_RCC_OscConfig+0x7c8>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046be:	3a01      	subs	r2, #1
 80046c0:	0112      	lsls	r2, r2, #4
 80046c2:	4311      	orrs	r1, r2
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046c8:	0212      	lsls	r2, r2, #8
 80046ca:	4311      	orrs	r1, r2
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046d0:	0852      	lsrs	r2, r2, #1
 80046d2:	3a01      	subs	r2, #1
 80046d4:	0552      	lsls	r2, r2, #21
 80046d6:	4311      	orrs	r1, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046dc:	0852      	lsrs	r2, r2, #1
 80046de:	3a01      	subs	r2, #1
 80046e0:	0652      	lsls	r2, r2, #25
 80046e2:	4311      	orrs	r1, r2
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046e8:	0912      	lsrs	r2, r2, #4
 80046ea:	0452      	lsls	r2, r2, #17
 80046ec:	430a      	orrs	r2, r1
 80046ee:	4941      	ldr	r1, [pc, #260]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046f4:	4b3f      	ldr	r3, [pc, #252]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a3e      	ldr	r2, [pc, #248]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 80046fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004700:	4b3c      	ldr	r3, [pc, #240]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4a3b      	ldr	r2, [pc, #236]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 8004706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800470a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800470c:	f7ff f8b0 	bl	8003870 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004714:	f7ff f8ac 	bl	8003870 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e062      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004726:	4b33      	ldr	r3, [pc, #204]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004732:	e05a      	b.n	80047ea <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e059      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004738:	4b2e      	ldr	r3, [pc, #184]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d152      	bne.n	80047ea <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004744:	4b2b      	ldr	r3, [pc, #172]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a2a      	ldr	r2, [pc, #168]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 800474a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800474e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004750:	4b28      	ldr	r3, [pc, #160]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4a27      	ldr	r2, [pc, #156]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 8004756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800475a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800475c:	f7ff f888 	bl	8003870 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004764:	f7ff f884 	bl	8003870 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e03a      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004776:	4b1f      	ldr	r3, [pc, #124]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x734>
 8004782:	e032      	b.n	80047ea <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b0c      	cmp	r3, #12
 8004788:	d02d      	beq.n	80047e6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478a:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a19      	ldr	r2, [pc, #100]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 8004790:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004794:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004796:	4b17      	ldr	r3, [pc, #92]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d105      	bne.n	80047ae <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80047a2:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	4a13      	ldr	r2, [pc, #76]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 80047a8:	f023 0303 	bic.w	r3, r3, #3
 80047ac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80047ae:	4b11      	ldr	r3, [pc, #68]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	4a10      	ldr	r2, [pc, #64]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 80047b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80047b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047be:	f7ff f857 	bl	8003870 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c6:	f7ff f853 	bl	8003870 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e009      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <HAL_RCC_OscConfig+0x7c4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1f0      	bne.n	80047c6 <HAL_RCC_OscConfig+0x796>
 80047e4:	e001      	b.n	80047ea <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3720      	adds	r7, #32
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40021000 	.word	0x40021000
 80047f8:	f99d808c 	.word	0xf99d808c

080047fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e0c8      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004810:	4b66      	ldr	r3, [pc, #408]	; (80049ac <HAL_RCC_ClockConfig+0x1b0>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d910      	bls.n	8004840 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481e:	4b63      	ldr	r3, [pc, #396]	; (80049ac <HAL_RCC_ClockConfig+0x1b0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 0207 	bic.w	r2, r3, #7
 8004826:	4961      	ldr	r1, [pc, #388]	; (80049ac <HAL_RCC_ClockConfig+0x1b0>)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	4313      	orrs	r3, r2
 800482c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800482e:	4b5f      	ldr	r3, [pc, #380]	; (80049ac <HAL_RCC_ClockConfig+0x1b0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0b0      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	d04c      	beq.n	80048e6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b03      	cmp	r3, #3
 8004852:	d107      	bne.n	8004864 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004854:	4b56      	ldr	r3, [pc, #344]	; (80049b0 <HAL_RCC_ClockConfig+0x1b4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d121      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e09e      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b02      	cmp	r3, #2
 800486a:	d107      	bne.n	800487c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800486c:	4b50      	ldr	r3, [pc, #320]	; (80049b0 <HAL_RCC_ClockConfig+0x1b4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d115      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e092      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d107      	bne.n	8004894 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004884:	4b4a      	ldr	r3, [pc, #296]	; (80049b0 <HAL_RCC_ClockConfig+0x1b4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d109      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e086      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004894:	4b46      	ldr	r3, [pc, #280]	; (80049b0 <HAL_RCC_ClockConfig+0x1b4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e07e      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048a4:	4b42      	ldr	r3, [pc, #264]	; (80049b0 <HAL_RCC_ClockConfig+0x1b4>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f023 0203 	bic.w	r2, r3, #3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	493f      	ldr	r1, [pc, #252]	; (80049b0 <HAL_RCC_ClockConfig+0x1b4>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b6:	f7fe ffdb 	bl	8003870 <HAL_GetTick>
 80048ba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048bc:	e00a      	b.n	80048d4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048be:	f7fe ffd7 	bl	8003870 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e066      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d4:	4b36      	ldr	r3, [pc, #216]	; (80049b0 <HAL_RCC_ClockConfig+0x1b4>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 020c 	and.w	r2, r3, #12
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d1eb      	bne.n	80048be <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f2:	4b2f      	ldr	r3, [pc, #188]	; (80049b0 <HAL_RCC_ClockConfig+0x1b4>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	492c      	ldr	r1, [pc, #176]	; (80049b0 <HAL_RCC_ClockConfig+0x1b4>)
 8004900:	4313      	orrs	r3, r2
 8004902:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004904:	4b29      	ldr	r3, [pc, #164]	; (80049ac <HAL_RCC_ClockConfig+0x1b0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d210      	bcs.n	8004934 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004912:	4b26      	ldr	r3, [pc, #152]	; (80049ac <HAL_RCC_ClockConfig+0x1b0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f023 0207 	bic.w	r2, r3, #7
 800491a:	4924      	ldr	r1, [pc, #144]	; (80049ac <HAL_RCC_ClockConfig+0x1b0>)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	4313      	orrs	r3, r2
 8004920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004922:	4b22      	ldr	r3, [pc, #136]	; (80049ac <HAL_RCC_ClockConfig+0x1b0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d001      	beq.n	8004934 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e036      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d008      	beq.n	8004952 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004940:	4b1b      	ldr	r3, [pc, #108]	; (80049b0 <HAL_RCC_ClockConfig+0x1b4>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	4918      	ldr	r1, [pc, #96]	; (80049b0 <HAL_RCC_ClockConfig+0x1b4>)
 800494e:	4313      	orrs	r3, r2
 8004950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d009      	beq.n	8004972 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800495e:	4b14      	ldr	r3, [pc, #80]	; (80049b0 <HAL_RCC_ClockConfig+0x1b4>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4910      	ldr	r1, [pc, #64]	; (80049b0 <HAL_RCC_ClockConfig+0x1b4>)
 800496e:	4313      	orrs	r3, r2
 8004970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004972:	f000 f825 	bl	80049c0 <HAL_RCC_GetSysClockFreq>
 8004976:	4601      	mov	r1, r0
 8004978:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <HAL_RCC_ClockConfig+0x1b4>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	4a0c      	ldr	r2, [pc, #48]	; (80049b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004984:	5cd3      	ldrb	r3, [r2, r3]
 8004986:	f003 031f 	and.w	r3, r3, #31
 800498a:	fa21 f303 	lsr.w	r3, r1, r3
 800498e:	4a0a      	ldr	r2, [pc, #40]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004992:	4b0a      	ldr	r3, [pc, #40]	; (80049bc <HAL_RCC_ClockConfig+0x1c0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f7fe ff1a 	bl	80037d0 <HAL_InitTick>
 800499c:	4603      	mov	r3, r0
 800499e:	72fb      	strb	r3, [r7, #11]

  return status;
 80049a0:	7afb      	ldrb	r3, [r7, #11]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40022000 	.word	0x40022000
 80049b0:	40021000 	.word	0x40021000
 80049b4:	08006b30 	.word	0x08006b30
 80049b8:	20000084 	.word	0x20000084
 80049bc:	200000e0 	.word	0x200000e0

080049c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b089      	sub	sp, #36	; 0x24
 80049c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
 80049ca:	2300      	movs	r3, #0
 80049cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ce:	4b3d      	ldr	r3, [pc, #244]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x104>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 030c 	and.w	r3, r3, #12
 80049d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049d8:	4b3a      	ldr	r3, [pc, #232]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x104>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_RCC_GetSysClockFreq+0x34>
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b0c      	cmp	r3, #12
 80049ec:	d121      	bne.n	8004a32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d11e      	bne.n	8004a32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049f4:	4b33      	ldr	r3, [pc, #204]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x104>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d107      	bne.n	8004a10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a00:	4b30      	ldr	r3, [pc, #192]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a06:	0a1b      	lsrs	r3, r3, #8
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	e005      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a10:	4b2c      	ldr	r3, [pc, #176]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	091b      	lsrs	r3, r3, #4
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a1c:	4a2a      	ldr	r2, [pc, #168]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10d      	bne.n	8004a48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a30:	e00a      	b.n	8004a48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d102      	bne.n	8004a3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a38:	4b24      	ldr	r3, [pc, #144]	; (8004acc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a3a:	61bb      	str	r3, [r7, #24]
 8004a3c:	e004      	b.n	8004a48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d101      	bne.n	8004a48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a44:	4b22      	ldr	r3, [pc, #136]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	2b0c      	cmp	r3, #12
 8004a4c:	d133      	bne.n	8004ab6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a4e:	4b1d      	ldr	r3, [pc, #116]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d002      	beq.n	8004a64 <HAL_RCC_GetSysClockFreq+0xa4>
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d003      	beq.n	8004a6a <HAL_RCC_GetSysClockFreq+0xaa>
 8004a62:	e005      	b.n	8004a70 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a64:	4b19      	ldr	r3, [pc, #100]	; (8004acc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a66:	617b      	str	r3, [r7, #20]
      break;
 8004a68:	e005      	b.n	8004a76 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a6a:	4b19      	ldr	r3, [pc, #100]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a6c:	617b      	str	r3, [r7, #20]
      break;
 8004a6e:	e002      	b.n	8004a76 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	617b      	str	r3, [r7, #20]
      break;
 8004a74:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a76:	4b13      	ldr	r3, [pc, #76]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	091b      	lsrs	r3, r3, #4
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	3301      	adds	r3, #1
 8004a82:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a84:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	0a1b      	lsrs	r3, r3, #8
 8004a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	fb02 f203 	mul.w	r2, r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a9c:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	0e5b      	lsrs	r3, r3, #25
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ab6:	69bb      	ldr	r3, [r7, #24]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3724      	adds	r7, #36	; 0x24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	08006b48 	.word	0x08006b48
 8004acc:	00f42400 	.word	0x00f42400
 8004ad0:	007a1200 	.word	0x007a1200

08004ad4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad8:	4b03      	ldr	r3, [pc, #12]	; (8004ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ada:	681b      	ldr	r3, [r3, #0]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	20000084 	.word	0x20000084

08004aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004af0:	f7ff fff0 	bl	8004ad4 <HAL_RCC_GetHCLKFreq>
 8004af4:	4601      	mov	r1, r0
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	0a1b      	lsrs	r3, r3, #8
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	4a04      	ldr	r2, [pc, #16]	; (8004b14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b02:	5cd3      	ldrb	r3, [r2, r3]
 8004b04:	f003 031f 	and.w	r3, r3, #31
 8004b08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40021000 	.word	0x40021000
 8004b14:	08006b40 	.word	0x08006b40

08004b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b1c:	f7ff ffda 	bl	8004ad4 <HAL_RCC_GetHCLKFreq>
 8004b20:	4601      	mov	r1, r0
 8004b22:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	0adb      	lsrs	r3, r3, #11
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	4a04      	ldr	r2, [pc, #16]	; (8004b40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b2e:	5cd3      	ldrb	r3, [r2, r3]
 8004b30:	f003 031f 	and.w	r3, r3, #31
 8004b34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	08006b40 	.word	0x08006b40

08004b44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b50:	4b2a      	ldr	r3, [pc, #168]	; (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b5c:	f7ff fa04 	bl	8003f68 <HAL_PWREx_GetVoltageRange>
 8004b60:	6178      	str	r0, [r7, #20]
 8004b62:	e014      	b.n	8004b8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b64:	4b25      	ldr	r3, [pc, #148]	; (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b68:	4a24      	ldr	r2, [pc, #144]	; (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6e:	6593      	str	r3, [r2, #88]	; 0x58
 8004b70:	4b22      	ldr	r3, [pc, #136]	; (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b7c:	f7ff f9f4 	bl	8003f68 <HAL_PWREx_GetVoltageRange>
 8004b80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b82:	4b1e      	ldr	r3, [pc, #120]	; (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b86:	4a1d      	ldr	r2, [pc, #116]	; (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b94:	d10b      	bne.n	8004bae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b80      	cmp	r3, #128	; 0x80
 8004b9a:	d919      	bls.n	8004bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2ba0      	cmp	r3, #160	; 0xa0
 8004ba0:	d902      	bls.n	8004ba8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	613b      	str	r3, [r7, #16]
 8004ba6:	e013      	b.n	8004bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ba8:	2301      	movs	r3, #1
 8004baa:	613b      	str	r3, [r7, #16]
 8004bac:	e010      	b.n	8004bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b80      	cmp	r3, #128	; 0x80
 8004bb2:	d902      	bls.n	8004bba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	e00a      	b.n	8004bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b80      	cmp	r3, #128	; 0x80
 8004bbe:	d102      	bne.n	8004bc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	e004      	b.n	8004bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b70      	cmp	r3, #112	; 0x70
 8004bca:	d101      	bne.n	8004bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bcc:	2301      	movs	r3, #1
 8004bce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f023 0207 	bic.w	r2, r3, #7
 8004bd8:	4909      	ldr	r1, [pc, #36]	; (8004c00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004be0:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d001      	beq.n	8004bf2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e000      	b.n	8004bf4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	40022000 	.word	0x40022000

08004c04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e040      	b.n	8004c98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fd fbfa 	bl	8002420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2224      	movs	r2, #36	; 0x24
 8004c30:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0201 	bic.w	r2, r2, #1
 8004c40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fabe 	bl	80051c4 <UART_SetConfig>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e022      	b.n	8004c98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fd3c 	bl	80056d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fdc3 	bl	800581c <UART_CheckIdleState>
 8004c96:	4603      	mov	r3, r0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	; 0x28
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	4613      	mov	r3, r2
 8004cae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	f040 8081 	bne.w	8004dbc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <HAL_UART_Transmit+0x26>
 8004cc0:	88fb      	ldrh	r3, [r7, #6]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e079      	b.n	8004dbe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_UART_Transmit+0x38>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e072      	b.n	8004dbe <HAL_UART_Transmit+0x11e>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2221      	movs	r2, #33	; 0x21
 8004cea:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004cec:	f7fe fdc0 	bl	8003870 <HAL_GetTick>
 8004cf0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	88fa      	ldrh	r2, [r7, #6]
 8004cf6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	88fa      	ldrh	r2, [r7, #6]
 8004cfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0a:	d108      	bne.n	8004d1e <HAL_UART_Transmit+0x7e>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d104      	bne.n	8004d1e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	61bb      	str	r3, [r7, #24]
 8004d1c:	e003      	b.n	8004d26 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004d2e:	e02d      	b.n	8004d8c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2200      	movs	r2, #0
 8004d38:	2180      	movs	r1, #128	; 0x80
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 fdb3 	bl	80058a6 <UART_WaitOnFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e039      	b.n	8004dbe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10b      	bne.n	8004d68 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	881a      	ldrh	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d5c:	b292      	uxth	r2, r2
 8004d5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	3302      	adds	r3, #2
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	e008      	b.n	8004d7a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	781a      	ldrb	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	b292      	uxth	r2, r2
 8004d72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	3301      	adds	r3, #1
 8004d78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1cb      	bne.n	8004d30 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2140      	movs	r1, #64	; 0x40
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 fd7f 	bl	80058a6 <UART_WaitOnFlagUntilTimeout>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e005      	b.n	8004dbe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2220      	movs	r2, #32
 8004db6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	e000      	b.n	8004dbe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004dbc:	2302      	movs	r3, #2
  }
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3720      	adds	r7, #32
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dda:	2b20      	cmp	r3, #32
 8004ddc:	f040 808a 	bne.w	8004ef4 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <HAL_UART_Receive_IT+0x24>
 8004de6:	88fb      	ldrh	r3, [r7, #6]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e082      	b.n	8004ef6 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_UART_Receive_IT+0x36>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e07b      	b.n	8004ef6 <HAL_UART_Receive_IT+0x12e>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	88fa      	ldrh	r2, [r7, #6]
 8004e10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	88fa      	ldrh	r2, [r7, #6]
 8004e18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e2a:	d10e      	bne.n	8004e4a <HAL_UART_Receive_IT+0x82>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d105      	bne.n	8004e40 <HAL_UART_Receive_IT+0x78>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004e3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e3e:	e02d      	b.n	8004e9c <HAL_UART_Receive_IT+0xd4>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	22ff      	movs	r2, #255	; 0xff
 8004e44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e48:	e028      	b.n	8004e9c <HAL_UART_Receive_IT+0xd4>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10d      	bne.n	8004e6e <HAL_UART_Receive_IT+0xa6>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d104      	bne.n	8004e64 <HAL_UART_Receive_IT+0x9c>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	22ff      	movs	r2, #255	; 0xff
 8004e5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e62:	e01b      	b.n	8004e9c <HAL_UART_Receive_IT+0xd4>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	227f      	movs	r2, #127	; 0x7f
 8004e68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e6c:	e016      	b.n	8004e9c <HAL_UART_Receive_IT+0xd4>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e76:	d10d      	bne.n	8004e94 <HAL_UART_Receive_IT+0xcc>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d104      	bne.n	8004e8a <HAL_UART_Receive_IT+0xc2>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	227f      	movs	r2, #127	; 0x7f
 8004e84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e88:	e008      	b.n	8004e9c <HAL_UART_Receive_IT+0xd4>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	223f      	movs	r2, #63	; 0x3f
 8004e8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e92:	e003      	b.n	8004e9c <HAL_UART_Receive_IT+0xd4>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2222      	movs	r2, #34	; 0x22
 8004ea6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec0:	d107      	bne.n	8004ed2 <HAL_UART_Receive_IT+0x10a>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d103      	bne.n	8004ed2 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a0d      	ldr	r2, [pc, #52]	; (8004f04 <HAL_UART_Receive_IT+0x13c>)
 8004ece:	661a      	str	r2, [r3, #96]	; 0x60
 8004ed0:	e002      	b.n	8004ed8 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4a0c      	ldr	r2, [pc, #48]	; (8004f08 <HAL_UART_Receive_IT+0x140>)
 8004ed6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004eee:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	e000      	b.n	8004ef6 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004ef4:	2302      	movs	r3, #2
  }
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	08005ae5 	.word	0x08005ae5
 8004f08:	08005a3b 	.word	0x08005a3b

08004f0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f2c:	69fa      	ldr	r2, [r7, #28]
 8004f2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f32:	4013      	ands	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d113      	bne.n	8004f64 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00e      	beq.n	8004f64 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d009      	beq.n	8004f64 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 8114 	beq.w	8005182 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	4798      	blx	r3
      }
      return;
 8004f62:	e10e      	b.n	8005182 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 80d6 	beq.w	8005118 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d105      	bne.n	8004f82 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	4b86      	ldr	r3, [pc, #536]	; (8005194 <HAL_UART_IRQHandler+0x288>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80cb 	beq.w	8005118 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00e      	beq.n	8004faa <HAL_UART_IRQHandler+0x9e>
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fa2:	f043 0201 	orr.w	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_UART_IRQHandler+0xc6>
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fca:	f043 0204 	orr.w	r2, r3, #4
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00e      	beq.n	8004ffa <HAL_UART_IRQHandler+0xee>
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d009      	beq.n	8004ffa <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2204      	movs	r2, #4
 8004fec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ff2:	f043 0202 	orr.w	r2, r3, #2
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b00      	cmp	r3, #0
 8005002:	d013      	beq.n	800502c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b00      	cmp	r3, #0
 800500c:	d104      	bne.n	8005018 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005014:	2b00      	cmp	r3, #0
 8005016:	d009      	beq.n	800502c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2208      	movs	r2, #8
 800501e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005024:	f043 0208 	orr.w	r2, r3, #8
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00f      	beq.n	8005056 <HAL_UART_IRQHandler+0x14a>
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005048:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800504e:	f043 0220 	orr.w	r2, r3, #32
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 8093 	beq.w	8005186 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00c      	beq.n	8005084 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005088:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b40      	cmp	r3, #64	; 0x40
 8005096:	d004      	beq.n	80050a2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d031      	beq.n	8005106 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fc7a 	bl	800599c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b2:	2b40      	cmp	r3, #64	; 0x40
 80050b4:	d123      	bne.n	80050fe <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d013      	beq.n	80050f6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050d2:	4a31      	ldr	r2, [pc, #196]	; (8005198 <HAL_UART_IRQHandler+0x28c>)
 80050d4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe fd07 	bl	8003aee <HAL_DMA_Abort_IT>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d016      	beq.n	8005114 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80050f0:	4610      	mov	r0, r2
 80050f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f4:	e00e      	b.n	8005114 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f85a 	bl	80051b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050fc:	e00a      	b.n	8005114 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f856 	bl	80051b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005104:	e006      	b.n	8005114 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f852 	bl	80051b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005112:	e038      	b.n	8005186 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005114:	bf00      	nop
    return;
 8005116:	e036      	b.n	8005186 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00d      	beq.n	800513e <HAL_UART_IRQHandler+0x232>
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d008      	beq.n	800513e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005134:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fd29 	bl	8005b8e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800513c:	e026      	b.n	800518c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00d      	beq.n	8005164 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514e:	2b00      	cmp	r3, #0
 8005150:	d008      	beq.n	8005164 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005156:	2b00      	cmp	r3, #0
 8005158:	d017      	beq.n	800518a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	4798      	blx	r3
    }
    return;
 8005162:	e012      	b.n	800518a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00e      	beq.n	800518c <HAL_UART_IRQHandler+0x280>
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005174:	2b00      	cmp	r3, #0
 8005176:	d009      	beq.n	800518c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fc45 	bl	8005a08 <UART_EndTransmit_IT>
    return;
 800517e:	bf00      	nop
 8005180:	e004      	b.n	800518c <HAL_UART_IRQHandler+0x280>
      return;
 8005182:	bf00      	nop
 8005184:	e002      	b.n	800518c <HAL_UART_IRQHandler+0x280>
    return;
 8005186:	bf00      	nop
 8005188:	e000      	b.n	800518c <HAL_UART_IRQHandler+0x280>
    return;
 800518a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800518c:	3720      	adds	r7, #32
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	04000120 	.word	0x04000120
 8005198:	080059dd 	.word	0x080059dd

0800519c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051c4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80051c8:	b088      	sub	sp, #32
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	4bac      	ldr	r3, [pc, #688]	; (80054a4 <UART_SetConfig+0x2e0>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6812      	ldr	r2, [r2, #0]
 80051f8:	69f9      	ldr	r1, [r7, #28]
 80051fa:	430b      	orrs	r3, r1
 80051fc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4aa2      	ldr	r2, [pc, #648]	; (80054a8 <UART_SetConfig+0x2e4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d004      	beq.n	800522e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	4313      	orrs	r3, r2
 800522c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	69fa      	ldr	r2, [r7, #28]
 800523e:	430a      	orrs	r2, r1
 8005240:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a99      	ldr	r2, [pc, #612]	; (80054ac <UART_SetConfig+0x2e8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d121      	bne.n	8005290 <UART_SetConfig+0xcc>
 800524c:	4b98      	ldr	r3, [pc, #608]	; (80054b0 <UART_SetConfig+0x2ec>)
 800524e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b03      	cmp	r3, #3
 8005258:	d816      	bhi.n	8005288 <UART_SetConfig+0xc4>
 800525a:	a201      	add	r2, pc, #4	; (adr r2, 8005260 <UART_SetConfig+0x9c>)
 800525c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005260:	08005271 	.word	0x08005271
 8005264:	0800527d 	.word	0x0800527d
 8005268:	08005277 	.word	0x08005277
 800526c:	08005283 	.word	0x08005283
 8005270:	2301      	movs	r3, #1
 8005272:	76fb      	strb	r3, [r7, #27]
 8005274:	e0e8      	b.n	8005448 <UART_SetConfig+0x284>
 8005276:	2302      	movs	r3, #2
 8005278:	76fb      	strb	r3, [r7, #27]
 800527a:	e0e5      	b.n	8005448 <UART_SetConfig+0x284>
 800527c:	2304      	movs	r3, #4
 800527e:	76fb      	strb	r3, [r7, #27]
 8005280:	e0e2      	b.n	8005448 <UART_SetConfig+0x284>
 8005282:	2308      	movs	r3, #8
 8005284:	76fb      	strb	r3, [r7, #27]
 8005286:	e0df      	b.n	8005448 <UART_SetConfig+0x284>
 8005288:	2310      	movs	r3, #16
 800528a:	76fb      	strb	r3, [r7, #27]
 800528c:	bf00      	nop
 800528e:	e0db      	b.n	8005448 <UART_SetConfig+0x284>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a87      	ldr	r2, [pc, #540]	; (80054b4 <UART_SetConfig+0x2f0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d134      	bne.n	8005304 <UART_SetConfig+0x140>
 800529a:	4b85      	ldr	r3, [pc, #532]	; (80054b0 <UART_SetConfig+0x2ec>)
 800529c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a0:	f003 030c 	and.w	r3, r3, #12
 80052a4:	2b0c      	cmp	r3, #12
 80052a6:	d829      	bhi.n	80052fc <UART_SetConfig+0x138>
 80052a8:	a201      	add	r2, pc, #4	; (adr r2, 80052b0 <UART_SetConfig+0xec>)
 80052aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ae:	bf00      	nop
 80052b0:	080052e5 	.word	0x080052e5
 80052b4:	080052fd 	.word	0x080052fd
 80052b8:	080052fd 	.word	0x080052fd
 80052bc:	080052fd 	.word	0x080052fd
 80052c0:	080052f1 	.word	0x080052f1
 80052c4:	080052fd 	.word	0x080052fd
 80052c8:	080052fd 	.word	0x080052fd
 80052cc:	080052fd 	.word	0x080052fd
 80052d0:	080052eb 	.word	0x080052eb
 80052d4:	080052fd 	.word	0x080052fd
 80052d8:	080052fd 	.word	0x080052fd
 80052dc:	080052fd 	.word	0x080052fd
 80052e0:	080052f7 	.word	0x080052f7
 80052e4:	2300      	movs	r3, #0
 80052e6:	76fb      	strb	r3, [r7, #27]
 80052e8:	e0ae      	b.n	8005448 <UART_SetConfig+0x284>
 80052ea:	2302      	movs	r3, #2
 80052ec:	76fb      	strb	r3, [r7, #27]
 80052ee:	e0ab      	b.n	8005448 <UART_SetConfig+0x284>
 80052f0:	2304      	movs	r3, #4
 80052f2:	76fb      	strb	r3, [r7, #27]
 80052f4:	e0a8      	b.n	8005448 <UART_SetConfig+0x284>
 80052f6:	2308      	movs	r3, #8
 80052f8:	76fb      	strb	r3, [r7, #27]
 80052fa:	e0a5      	b.n	8005448 <UART_SetConfig+0x284>
 80052fc:	2310      	movs	r3, #16
 80052fe:	76fb      	strb	r3, [r7, #27]
 8005300:	bf00      	nop
 8005302:	e0a1      	b.n	8005448 <UART_SetConfig+0x284>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a6b      	ldr	r2, [pc, #428]	; (80054b8 <UART_SetConfig+0x2f4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d120      	bne.n	8005350 <UART_SetConfig+0x18c>
 800530e:	4b68      	ldr	r3, [pc, #416]	; (80054b0 <UART_SetConfig+0x2ec>)
 8005310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005314:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005318:	2b10      	cmp	r3, #16
 800531a:	d00f      	beq.n	800533c <UART_SetConfig+0x178>
 800531c:	2b10      	cmp	r3, #16
 800531e:	d802      	bhi.n	8005326 <UART_SetConfig+0x162>
 8005320:	2b00      	cmp	r3, #0
 8005322:	d005      	beq.n	8005330 <UART_SetConfig+0x16c>
 8005324:	e010      	b.n	8005348 <UART_SetConfig+0x184>
 8005326:	2b20      	cmp	r3, #32
 8005328:	d005      	beq.n	8005336 <UART_SetConfig+0x172>
 800532a:	2b30      	cmp	r3, #48	; 0x30
 800532c:	d009      	beq.n	8005342 <UART_SetConfig+0x17e>
 800532e:	e00b      	b.n	8005348 <UART_SetConfig+0x184>
 8005330:	2300      	movs	r3, #0
 8005332:	76fb      	strb	r3, [r7, #27]
 8005334:	e088      	b.n	8005448 <UART_SetConfig+0x284>
 8005336:	2302      	movs	r3, #2
 8005338:	76fb      	strb	r3, [r7, #27]
 800533a:	e085      	b.n	8005448 <UART_SetConfig+0x284>
 800533c:	2304      	movs	r3, #4
 800533e:	76fb      	strb	r3, [r7, #27]
 8005340:	e082      	b.n	8005448 <UART_SetConfig+0x284>
 8005342:	2308      	movs	r3, #8
 8005344:	76fb      	strb	r3, [r7, #27]
 8005346:	e07f      	b.n	8005448 <UART_SetConfig+0x284>
 8005348:	2310      	movs	r3, #16
 800534a:	76fb      	strb	r3, [r7, #27]
 800534c:	bf00      	nop
 800534e:	e07b      	b.n	8005448 <UART_SetConfig+0x284>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a59      	ldr	r2, [pc, #356]	; (80054bc <UART_SetConfig+0x2f8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d120      	bne.n	800539c <UART_SetConfig+0x1d8>
 800535a:	4b55      	ldr	r3, [pc, #340]	; (80054b0 <UART_SetConfig+0x2ec>)
 800535c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005360:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005364:	2b40      	cmp	r3, #64	; 0x40
 8005366:	d00f      	beq.n	8005388 <UART_SetConfig+0x1c4>
 8005368:	2b40      	cmp	r3, #64	; 0x40
 800536a:	d802      	bhi.n	8005372 <UART_SetConfig+0x1ae>
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <UART_SetConfig+0x1b8>
 8005370:	e010      	b.n	8005394 <UART_SetConfig+0x1d0>
 8005372:	2b80      	cmp	r3, #128	; 0x80
 8005374:	d005      	beq.n	8005382 <UART_SetConfig+0x1be>
 8005376:	2bc0      	cmp	r3, #192	; 0xc0
 8005378:	d009      	beq.n	800538e <UART_SetConfig+0x1ca>
 800537a:	e00b      	b.n	8005394 <UART_SetConfig+0x1d0>
 800537c:	2300      	movs	r3, #0
 800537e:	76fb      	strb	r3, [r7, #27]
 8005380:	e062      	b.n	8005448 <UART_SetConfig+0x284>
 8005382:	2302      	movs	r3, #2
 8005384:	76fb      	strb	r3, [r7, #27]
 8005386:	e05f      	b.n	8005448 <UART_SetConfig+0x284>
 8005388:	2304      	movs	r3, #4
 800538a:	76fb      	strb	r3, [r7, #27]
 800538c:	e05c      	b.n	8005448 <UART_SetConfig+0x284>
 800538e:	2308      	movs	r3, #8
 8005390:	76fb      	strb	r3, [r7, #27]
 8005392:	e059      	b.n	8005448 <UART_SetConfig+0x284>
 8005394:	2310      	movs	r3, #16
 8005396:	76fb      	strb	r3, [r7, #27]
 8005398:	bf00      	nop
 800539a:	e055      	b.n	8005448 <UART_SetConfig+0x284>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a47      	ldr	r2, [pc, #284]	; (80054c0 <UART_SetConfig+0x2fc>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d124      	bne.n	80053f0 <UART_SetConfig+0x22c>
 80053a6:	4b42      	ldr	r3, [pc, #264]	; (80054b0 <UART_SetConfig+0x2ec>)
 80053a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b4:	d012      	beq.n	80053dc <UART_SetConfig+0x218>
 80053b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ba:	d802      	bhi.n	80053c2 <UART_SetConfig+0x1fe>
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d007      	beq.n	80053d0 <UART_SetConfig+0x20c>
 80053c0:	e012      	b.n	80053e8 <UART_SetConfig+0x224>
 80053c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053c6:	d006      	beq.n	80053d6 <UART_SetConfig+0x212>
 80053c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053cc:	d009      	beq.n	80053e2 <UART_SetConfig+0x21e>
 80053ce:	e00b      	b.n	80053e8 <UART_SetConfig+0x224>
 80053d0:	2300      	movs	r3, #0
 80053d2:	76fb      	strb	r3, [r7, #27]
 80053d4:	e038      	b.n	8005448 <UART_SetConfig+0x284>
 80053d6:	2302      	movs	r3, #2
 80053d8:	76fb      	strb	r3, [r7, #27]
 80053da:	e035      	b.n	8005448 <UART_SetConfig+0x284>
 80053dc:	2304      	movs	r3, #4
 80053de:	76fb      	strb	r3, [r7, #27]
 80053e0:	e032      	b.n	8005448 <UART_SetConfig+0x284>
 80053e2:	2308      	movs	r3, #8
 80053e4:	76fb      	strb	r3, [r7, #27]
 80053e6:	e02f      	b.n	8005448 <UART_SetConfig+0x284>
 80053e8:	2310      	movs	r3, #16
 80053ea:	76fb      	strb	r3, [r7, #27]
 80053ec:	bf00      	nop
 80053ee:	e02b      	b.n	8005448 <UART_SetConfig+0x284>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a2c      	ldr	r2, [pc, #176]	; (80054a8 <UART_SetConfig+0x2e4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d124      	bne.n	8005444 <UART_SetConfig+0x280>
 80053fa:	4b2d      	ldr	r3, [pc, #180]	; (80054b0 <UART_SetConfig+0x2ec>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005400:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005408:	d012      	beq.n	8005430 <UART_SetConfig+0x26c>
 800540a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540e:	d802      	bhi.n	8005416 <UART_SetConfig+0x252>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d007      	beq.n	8005424 <UART_SetConfig+0x260>
 8005414:	e012      	b.n	800543c <UART_SetConfig+0x278>
 8005416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800541a:	d006      	beq.n	800542a <UART_SetConfig+0x266>
 800541c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005420:	d009      	beq.n	8005436 <UART_SetConfig+0x272>
 8005422:	e00b      	b.n	800543c <UART_SetConfig+0x278>
 8005424:	2300      	movs	r3, #0
 8005426:	76fb      	strb	r3, [r7, #27]
 8005428:	e00e      	b.n	8005448 <UART_SetConfig+0x284>
 800542a:	2302      	movs	r3, #2
 800542c:	76fb      	strb	r3, [r7, #27]
 800542e:	e00b      	b.n	8005448 <UART_SetConfig+0x284>
 8005430:	2304      	movs	r3, #4
 8005432:	76fb      	strb	r3, [r7, #27]
 8005434:	e008      	b.n	8005448 <UART_SetConfig+0x284>
 8005436:	2308      	movs	r3, #8
 8005438:	76fb      	strb	r3, [r7, #27]
 800543a:	e005      	b.n	8005448 <UART_SetConfig+0x284>
 800543c:	2310      	movs	r3, #16
 800543e:	76fb      	strb	r3, [r7, #27]
 8005440:	bf00      	nop
 8005442:	e001      	b.n	8005448 <UART_SetConfig+0x284>
 8005444:	2310      	movs	r3, #16
 8005446:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a16      	ldr	r2, [pc, #88]	; (80054a8 <UART_SetConfig+0x2e4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	f040 8087 	bne.w	8005562 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005454:	7efb      	ldrb	r3, [r7, #27]
 8005456:	2b08      	cmp	r3, #8
 8005458:	d836      	bhi.n	80054c8 <UART_SetConfig+0x304>
 800545a:	a201      	add	r2, pc, #4	; (adr r2, 8005460 <UART_SetConfig+0x29c>)
 800545c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005460:	08005485 	.word	0x08005485
 8005464:	080054c9 	.word	0x080054c9
 8005468:	0800548d 	.word	0x0800548d
 800546c:	080054c9 	.word	0x080054c9
 8005470:	08005493 	.word	0x08005493
 8005474:	080054c9 	.word	0x080054c9
 8005478:	080054c9 	.word	0x080054c9
 800547c:	080054c9 	.word	0x080054c9
 8005480:	0800549b 	.word	0x0800549b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005484:	f7ff fb32 	bl	8004aec <HAL_RCC_GetPCLK1Freq>
 8005488:	6178      	str	r0, [r7, #20]
        break;
 800548a:	e022      	b.n	80054d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800548c:	4b0d      	ldr	r3, [pc, #52]	; (80054c4 <UART_SetConfig+0x300>)
 800548e:	617b      	str	r3, [r7, #20]
        break;
 8005490:	e01f      	b.n	80054d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005492:	f7ff fa95 	bl	80049c0 <HAL_RCC_GetSysClockFreq>
 8005496:	6178      	str	r0, [r7, #20]
        break;
 8005498:	e01b      	b.n	80054d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800549a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800549e:	617b      	str	r3, [r7, #20]
        break;
 80054a0:	e017      	b.n	80054d2 <UART_SetConfig+0x30e>
 80054a2:	bf00      	nop
 80054a4:	efff69f3 	.word	0xefff69f3
 80054a8:	40008000 	.word	0x40008000
 80054ac:	40013800 	.word	0x40013800
 80054b0:	40021000 	.word	0x40021000
 80054b4:	40004400 	.word	0x40004400
 80054b8:	40004800 	.word	0x40004800
 80054bc:	40004c00 	.word	0x40004c00
 80054c0:	40005000 	.word	0x40005000
 80054c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	76bb      	strb	r3, [r7, #26]
        break;
 80054d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 80f1 	beq.w	80056bc <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	4613      	mov	r3, r2
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	4413      	add	r3, r2
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d305      	bcc.n	80054f6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d902      	bls.n	80054fc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	76bb      	strb	r3, [r7, #26]
 80054fa:	e0df      	b.n	80056bc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	4619      	mov	r1, r3
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	f04f 0400 	mov.w	r4, #0
 800550c:	0214      	lsls	r4, r2, #8
 800550e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005512:	020b      	lsls	r3, r1, #8
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6852      	ldr	r2, [r2, #4]
 8005518:	0852      	lsrs	r2, r2, #1
 800551a:	4611      	mov	r1, r2
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	eb13 0b01 	adds.w	fp, r3, r1
 8005524:	eb44 0c02 	adc.w	ip, r4, r2
 8005528:	4658      	mov	r0, fp
 800552a:	4661      	mov	r1, ip
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f04f 0400 	mov.w	r4, #0
 8005534:	461a      	mov	r2, r3
 8005536:	4623      	mov	r3, r4
 8005538:	f7fa fea2 	bl	8000280 <__aeabi_uldivmod>
 800553c:	4603      	mov	r3, r0
 800553e:	460c      	mov	r4, r1
 8005540:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005548:	d308      	bcc.n	800555c <UART_SetConfig+0x398>
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005550:	d204      	bcs.n	800555c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	60da      	str	r2, [r3, #12]
 800555a:	e0af      	b.n	80056bc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	76bb      	strb	r3, [r7, #26]
 8005560:	e0ac      	b.n	80056bc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800556a:	d15b      	bne.n	8005624 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800556c:	7efb      	ldrb	r3, [r7, #27]
 800556e:	2b08      	cmp	r3, #8
 8005570:	d827      	bhi.n	80055c2 <UART_SetConfig+0x3fe>
 8005572:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <UART_SetConfig+0x3b4>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	0800559d 	.word	0x0800559d
 800557c:	080055a5 	.word	0x080055a5
 8005580:	080055ad 	.word	0x080055ad
 8005584:	080055c3 	.word	0x080055c3
 8005588:	080055b3 	.word	0x080055b3
 800558c:	080055c3 	.word	0x080055c3
 8005590:	080055c3 	.word	0x080055c3
 8005594:	080055c3 	.word	0x080055c3
 8005598:	080055bb 	.word	0x080055bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800559c:	f7ff faa6 	bl	8004aec <HAL_RCC_GetPCLK1Freq>
 80055a0:	6178      	str	r0, [r7, #20]
        break;
 80055a2:	e013      	b.n	80055cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055a4:	f7ff fab8 	bl	8004b18 <HAL_RCC_GetPCLK2Freq>
 80055a8:	6178      	str	r0, [r7, #20]
        break;
 80055aa:	e00f      	b.n	80055cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055ac:	4b49      	ldr	r3, [pc, #292]	; (80056d4 <UART_SetConfig+0x510>)
 80055ae:	617b      	str	r3, [r7, #20]
        break;
 80055b0:	e00c      	b.n	80055cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055b2:	f7ff fa05 	bl	80049c0 <HAL_RCC_GetSysClockFreq>
 80055b6:	6178      	str	r0, [r7, #20]
        break;
 80055b8:	e008      	b.n	80055cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055be:	617b      	str	r3, [r7, #20]
        break;
 80055c0:	e004      	b.n	80055cc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	76bb      	strb	r3, [r7, #26]
        break;
 80055ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d074      	beq.n	80056bc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	005a      	lsls	r2, r3, #1
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	085b      	lsrs	r3, r3, #1
 80055dc:	441a      	add	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	2b0f      	cmp	r3, #15
 80055ee:	d916      	bls.n	800561e <UART_SetConfig+0x45a>
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f6:	d212      	bcs.n	800561e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	f023 030f 	bic.w	r3, r3, #15
 8005600:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	085b      	lsrs	r3, r3, #1
 8005606:	b29b      	uxth	r3, r3
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	b29a      	uxth	r2, r3
 800560e:	89fb      	ldrh	r3, [r7, #14]
 8005610:	4313      	orrs	r3, r2
 8005612:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	89fa      	ldrh	r2, [r7, #14]
 800561a:	60da      	str	r2, [r3, #12]
 800561c:	e04e      	b.n	80056bc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	76bb      	strb	r3, [r7, #26]
 8005622:	e04b      	b.n	80056bc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005624:	7efb      	ldrb	r3, [r7, #27]
 8005626:	2b08      	cmp	r3, #8
 8005628:	d827      	bhi.n	800567a <UART_SetConfig+0x4b6>
 800562a:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <UART_SetConfig+0x46c>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	08005655 	.word	0x08005655
 8005634:	0800565d 	.word	0x0800565d
 8005638:	08005665 	.word	0x08005665
 800563c:	0800567b 	.word	0x0800567b
 8005640:	0800566b 	.word	0x0800566b
 8005644:	0800567b 	.word	0x0800567b
 8005648:	0800567b 	.word	0x0800567b
 800564c:	0800567b 	.word	0x0800567b
 8005650:	08005673 	.word	0x08005673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005654:	f7ff fa4a 	bl	8004aec <HAL_RCC_GetPCLK1Freq>
 8005658:	6178      	str	r0, [r7, #20]
        break;
 800565a:	e013      	b.n	8005684 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800565c:	f7ff fa5c 	bl	8004b18 <HAL_RCC_GetPCLK2Freq>
 8005660:	6178      	str	r0, [r7, #20]
        break;
 8005662:	e00f      	b.n	8005684 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005664:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <UART_SetConfig+0x510>)
 8005666:	617b      	str	r3, [r7, #20]
        break;
 8005668:	e00c      	b.n	8005684 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800566a:	f7ff f9a9 	bl	80049c0 <HAL_RCC_GetSysClockFreq>
 800566e:	6178      	str	r0, [r7, #20]
        break;
 8005670:	e008      	b.n	8005684 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005676:	617b      	str	r3, [r7, #20]
        break;
 8005678:	e004      	b.n	8005684 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	76bb      	strb	r3, [r7, #26]
        break;
 8005682:	bf00      	nop
    }

    if (pclk != 0U)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d018      	beq.n	80056bc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	085a      	lsrs	r2, r3, #1
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	441a      	add	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	fbb2 f3f3 	udiv	r3, r2, r3
 800569c:	b29b      	uxth	r3, r3
 800569e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	2b0f      	cmp	r3, #15
 80056a4:	d908      	bls.n	80056b8 <UART_SetConfig+0x4f4>
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ac:	d204      	bcs.n	80056b8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	60da      	str	r2, [r3, #12]
 80056b6:	e001      	b.n	80056bc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80056c8:	7ebb      	ldrb	r3, [r7, #26]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3720      	adds	r7, #32
 80056ce:	46bd      	mov	sp, r7
 80056d0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80056d4:	00f42400 	.word	0x00f42400

080056d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00a      	beq.n	8005746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01a      	beq.n	80057ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057d6:	d10a      	bne.n	80057ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	605a      	str	r2, [r3, #4]
  }
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af02      	add	r7, sp, #8
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800582a:	f7fe f821 	bl	8003870 <HAL_GetTick>
 800582e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b08      	cmp	r3, #8
 800583c:	d10e      	bne.n	800585c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800583e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f82a 	bl	80058a6 <UART_WaitOnFlagUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e020      	b.n	800589e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0304 	and.w	r3, r3, #4
 8005866:	2b04      	cmp	r3, #4
 8005868:	d10e      	bne.n	8005888 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800586a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f814 	bl	80058a6 <UART_WaitOnFlagUntilTimeout>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e00a      	b.n	800589e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2220      	movs	r2, #32
 8005892:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b084      	sub	sp, #16
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	603b      	str	r3, [r7, #0]
 80058b2:	4613      	mov	r3, r2
 80058b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b6:	e05d      	b.n	8005974 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058be:	d059      	beq.n	8005974 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c0:	f7fd ffd6 	bl	8003870 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d302      	bcc.n	80058d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d11b      	bne.n	800590e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058e4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0201 	bic.w	r2, r2, #1
 80058f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2220      	movs	r2, #32
 80058fa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2220      	movs	r2, #32
 8005900:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e042      	b.n	8005994 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d02b      	beq.n	8005974 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800592a:	d123      	bne.n	8005974 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005934:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005944:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0201 	bic.w	r2, r2, #1
 8005954:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2220      	movs	r2, #32
 800595a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2220      	movs	r2, #32
 8005960:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2220      	movs	r2, #32
 8005966:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e00f      	b.n	8005994 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	69da      	ldr	r2, [r3, #28]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4013      	ands	r3, r2
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	429a      	cmp	r2, r3
 8005982:	bf0c      	ite	eq
 8005984:	2301      	moveq	r3, #1
 8005986:	2300      	movne	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	461a      	mov	r2, r3
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	429a      	cmp	r2, r3
 8005990:	d092      	beq.n	80058b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059b2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0201 	bic.w	r2, r2, #1
 80059c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2220      	movs	r2, #32
 80059c8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	661a      	str	r2, [r3, #96]	; 0x60
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f7ff fbd8 	bl	80051b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a00:	bf00      	nop
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a1e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2220      	movs	r2, #32
 8005a24:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff fbb5 	bl	800519c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a48:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a4e:	2b22      	cmp	r3, #34	; 0x22
 8005a50:	d13a      	bne.n	8005ac8 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a58:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a5a:	89bb      	ldrh	r3, [r7, #12]
 8005a5c:	b2d9      	uxtb	r1, r3
 8005a5e:	89fb      	ldrh	r3, [r7, #14]
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a66:	400a      	ands	r2, r1
 8005a68:	b2d2      	uxtb	r2, r2
 8005a6a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d123      	bne.n	8005adc <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005aa2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0201 	bic.w	r2, r2, #1
 8005ab2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7fb fa15 	bl	8000ef0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ac6:	e009      	b.n	8005adc <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	8b1b      	ldrh	r3, [r3, #24]
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0208 	orr.w	r2, r2, #8
 8005ad8:	b292      	uxth	r2, r2
 8005ada:	831a      	strh	r2, [r3, #24]
}
 8005adc:	bf00      	nop
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005af2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005af8:	2b22      	cmp	r3, #34	; 0x22
 8005afa:	d13a      	bne.n	8005b72 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005b02:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b08:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b0a:	89ba      	ldrh	r2, [r7, #12]
 8005b0c:	89fb      	ldrh	r3, [r7, #14]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1a:	1c9a      	adds	r2, r3, #2
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d123      	bne.n	8005b86 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b4c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0201 	bic.w	r2, r2, #1
 8005b5c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2220      	movs	r2, #32
 8005b62:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7fb f9c0 	bl	8000ef0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b70:	e009      	b.n	8005b86 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	8b1b      	ldrh	r3, [r3, #24]
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0208 	orr.w	r2, r2, #8
 8005b82:	b292      	uxth	r2, r2
 8005b84:	831a      	strh	r2, [r3, #24]
}
 8005b86:	bf00      	nop
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
	...

08005ba4 <__errno>:
 8005ba4:	4b01      	ldr	r3, [pc, #4]	; (8005bac <__errno+0x8>)
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	200000e8 	.word	0x200000e8

08005bb0 <__libc_init_array>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	4e0d      	ldr	r6, [pc, #52]	; (8005be8 <__libc_init_array+0x38>)
 8005bb4:	4c0d      	ldr	r4, [pc, #52]	; (8005bec <__libc_init_array+0x3c>)
 8005bb6:	1ba4      	subs	r4, r4, r6
 8005bb8:	10a4      	asrs	r4, r4, #2
 8005bba:	2500      	movs	r5, #0
 8005bbc:	42a5      	cmp	r5, r4
 8005bbe:	d109      	bne.n	8005bd4 <__libc_init_array+0x24>
 8005bc0:	4e0b      	ldr	r6, [pc, #44]	; (8005bf0 <__libc_init_array+0x40>)
 8005bc2:	4c0c      	ldr	r4, [pc, #48]	; (8005bf4 <__libc_init_array+0x44>)
 8005bc4:	f000 fc3e 	bl	8006444 <_init>
 8005bc8:	1ba4      	subs	r4, r4, r6
 8005bca:	10a4      	asrs	r4, r4, #2
 8005bcc:	2500      	movs	r5, #0
 8005bce:	42a5      	cmp	r5, r4
 8005bd0:	d105      	bne.n	8005bde <__libc_init_array+0x2e>
 8005bd2:	bd70      	pop	{r4, r5, r6, pc}
 8005bd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bd8:	4798      	blx	r3
 8005bda:	3501      	adds	r5, #1
 8005bdc:	e7ee      	b.n	8005bbc <__libc_init_array+0xc>
 8005bde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005be2:	4798      	blx	r3
 8005be4:	3501      	adds	r5, #1
 8005be6:	e7f2      	b.n	8005bce <__libc_init_array+0x1e>
 8005be8:	08006bb4 	.word	0x08006bb4
 8005bec:	08006bb4 	.word	0x08006bb4
 8005bf0:	08006bb4 	.word	0x08006bb4
 8005bf4:	08006bb8 	.word	0x08006bb8

08005bf8 <memset>:
 8005bf8:	4402      	add	r2, r0
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d100      	bne.n	8005c02 <memset+0xa>
 8005c00:	4770      	bx	lr
 8005c02:	f803 1b01 	strb.w	r1, [r3], #1
 8005c06:	e7f9      	b.n	8005bfc <memset+0x4>

08005c08 <siprintf>:
 8005c08:	b40e      	push	{r1, r2, r3}
 8005c0a:	b500      	push	{lr}
 8005c0c:	b09c      	sub	sp, #112	; 0x70
 8005c0e:	ab1d      	add	r3, sp, #116	; 0x74
 8005c10:	9002      	str	r0, [sp, #8]
 8005c12:	9006      	str	r0, [sp, #24]
 8005c14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c18:	4809      	ldr	r0, [pc, #36]	; (8005c40 <siprintf+0x38>)
 8005c1a:	9107      	str	r1, [sp, #28]
 8005c1c:	9104      	str	r1, [sp, #16]
 8005c1e:	4909      	ldr	r1, [pc, #36]	; (8005c44 <siprintf+0x3c>)
 8005c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c24:	9105      	str	r1, [sp, #20]
 8005c26:	6800      	ldr	r0, [r0, #0]
 8005c28:	9301      	str	r3, [sp, #4]
 8005c2a:	a902      	add	r1, sp, #8
 8005c2c:	f000 f87e 	bl	8005d2c <_svfiprintf_r>
 8005c30:	9b02      	ldr	r3, [sp, #8]
 8005c32:	2200      	movs	r2, #0
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	b01c      	add	sp, #112	; 0x70
 8005c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c3c:	b003      	add	sp, #12
 8005c3e:	4770      	bx	lr
 8005c40:	200000e8 	.word	0x200000e8
 8005c44:	ffff0208 	.word	0xffff0208

08005c48 <strcat>:
 8005c48:	b510      	push	{r4, lr}
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	781a      	ldrb	r2, [r3, #0]
 8005c4e:	1c5c      	adds	r4, r3, #1
 8005c50:	b93a      	cbnz	r2, 8005c62 <strcat+0x1a>
 8005c52:	3b01      	subs	r3, #1
 8005c54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c58:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c5c:	2a00      	cmp	r2, #0
 8005c5e:	d1f9      	bne.n	8005c54 <strcat+0xc>
 8005c60:	bd10      	pop	{r4, pc}
 8005c62:	4623      	mov	r3, r4
 8005c64:	e7f2      	b.n	8005c4c <strcat+0x4>

08005c66 <strcpy>:
 8005c66:	4603      	mov	r3, r0
 8005c68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c6c:	f803 2b01 	strb.w	r2, [r3], #1
 8005c70:	2a00      	cmp	r2, #0
 8005c72:	d1f9      	bne.n	8005c68 <strcpy+0x2>
 8005c74:	4770      	bx	lr

08005c76 <__ssputs_r>:
 8005c76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c7a:	688e      	ldr	r6, [r1, #8]
 8005c7c:	429e      	cmp	r6, r3
 8005c7e:	4682      	mov	sl, r0
 8005c80:	460c      	mov	r4, r1
 8005c82:	4690      	mov	r8, r2
 8005c84:	4699      	mov	r9, r3
 8005c86:	d837      	bhi.n	8005cf8 <__ssputs_r+0x82>
 8005c88:	898a      	ldrh	r2, [r1, #12]
 8005c8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c8e:	d031      	beq.n	8005cf4 <__ssputs_r+0x7e>
 8005c90:	6825      	ldr	r5, [r4, #0]
 8005c92:	6909      	ldr	r1, [r1, #16]
 8005c94:	1a6f      	subs	r7, r5, r1
 8005c96:	6965      	ldr	r5, [r4, #20]
 8005c98:	2302      	movs	r3, #2
 8005c9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c9e:	fb95 f5f3 	sdiv	r5, r5, r3
 8005ca2:	f109 0301 	add.w	r3, r9, #1
 8005ca6:	443b      	add	r3, r7
 8005ca8:	429d      	cmp	r5, r3
 8005caa:	bf38      	it	cc
 8005cac:	461d      	movcc	r5, r3
 8005cae:	0553      	lsls	r3, r2, #21
 8005cb0:	d530      	bpl.n	8005d14 <__ssputs_r+0x9e>
 8005cb2:	4629      	mov	r1, r5
 8005cb4:	f000 fb2c 	bl	8006310 <_malloc_r>
 8005cb8:	4606      	mov	r6, r0
 8005cba:	b950      	cbnz	r0, 8005cd2 <__ssputs_r+0x5c>
 8005cbc:	230c      	movs	r3, #12
 8005cbe:	f8ca 3000 	str.w	r3, [sl]
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cc8:	81a3      	strh	r3, [r4, #12]
 8005cca:	f04f 30ff 	mov.w	r0, #4294967295
 8005cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd2:	463a      	mov	r2, r7
 8005cd4:	6921      	ldr	r1, [r4, #16]
 8005cd6:	f000 faa9 	bl	800622c <memcpy>
 8005cda:	89a3      	ldrh	r3, [r4, #12]
 8005cdc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce4:	81a3      	strh	r3, [r4, #12]
 8005ce6:	6126      	str	r6, [r4, #16]
 8005ce8:	6165      	str	r5, [r4, #20]
 8005cea:	443e      	add	r6, r7
 8005cec:	1bed      	subs	r5, r5, r7
 8005cee:	6026      	str	r6, [r4, #0]
 8005cf0:	60a5      	str	r5, [r4, #8]
 8005cf2:	464e      	mov	r6, r9
 8005cf4:	454e      	cmp	r6, r9
 8005cf6:	d900      	bls.n	8005cfa <__ssputs_r+0x84>
 8005cf8:	464e      	mov	r6, r9
 8005cfa:	4632      	mov	r2, r6
 8005cfc:	4641      	mov	r1, r8
 8005cfe:	6820      	ldr	r0, [r4, #0]
 8005d00:	f000 fa9f 	bl	8006242 <memmove>
 8005d04:	68a3      	ldr	r3, [r4, #8]
 8005d06:	1b9b      	subs	r3, r3, r6
 8005d08:	60a3      	str	r3, [r4, #8]
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	441e      	add	r6, r3
 8005d0e:	6026      	str	r6, [r4, #0]
 8005d10:	2000      	movs	r0, #0
 8005d12:	e7dc      	b.n	8005cce <__ssputs_r+0x58>
 8005d14:	462a      	mov	r2, r5
 8005d16:	f000 fb55 	bl	80063c4 <_realloc_r>
 8005d1a:	4606      	mov	r6, r0
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d1e2      	bne.n	8005ce6 <__ssputs_r+0x70>
 8005d20:	6921      	ldr	r1, [r4, #16]
 8005d22:	4650      	mov	r0, sl
 8005d24:	f000 faa6 	bl	8006274 <_free_r>
 8005d28:	e7c8      	b.n	8005cbc <__ssputs_r+0x46>
	...

08005d2c <_svfiprintf_r>:
 8005d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d30:	461d      	mov	r5, r3
 8005d32:	898b      	ldrh	r3, [r1, #12]
 8005d34:	061f      	lsls	r7, r3, #24
 8005d36:	b09d      	sub	sp, #116	; 0x74
 8005d38:	4680      	mov	r8, r0
 8005d3a:	460c      	mov	r4, r1
 8005d3c:	4616      	mov	r6, r2
 8005d3e:	d50f      	bpl.n	8005d60 <_svfiprintf_r+0x34>
 8005d40:	690b      	ldr	r3, [r1, #16]
 8005d42:	b96b      	cbnz	r3, 8005d60 <_svfiprintf_r+0x34>
 8005d44:	2140      	movs	r1, #64	; 0x40
 8005d46:	f000 fae3 	bl	8006310 <_malloc_r>
 8005d4a:	6020      	str	r0, [r4, #0]
 8005d4c:	6120      	str	r0, [r4, #16]
 8005d4e:	b928      	cbnz	r0, 8005d5c <_svfiprintf_r+0x30>
 8005d50:	230c      	movs	r3, #12
 8005d52:	f8c8 3000 	str.w	r3, [r8]
 8005d56:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5a:	e0c8      	b.n	8005eee <_svfiprintf_r+0x1c2>
 8005d5c:	2340      	movs	r3, #64	; 0x40
 8005d5e:	6163      	str	r3, [r4, #20]
 8005d60:	2300      	movs	r3, #0
 8005d62:	9309      	str	r3, [sp, #36]	; 0x24
 8005d64:	2320      	movs	r3, #32
 8005d66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d6a:	2330      	movs	r3, #48	; 0x30
 8005d6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d70:	9503      	str	r5, [sp, #12]
 8005d72:	f04f 0b01 	mov.w	fp, #1
 8005d76:	4637      	mov	r7, r6
 8005d78:	463d      	mov	r5, r7
 8005d7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d7e:	b10b      	cbz	r3, 8005d84 <_svfiprintf_r+0x58>
 8005d80:	2b25      	cmp	r3, #37	; 0x25
 8005d82:	d13e      	bne.n	8005e02 <_svfiprintf_r+0xd6>
 8005d84:	ebb7 0a06 	subs.w	sl, r7, r6
 8005d88:	d00b      	beq.n	8005da2 <_svfiprintf_r+0x76>
 8005d8a:	4653      	mov	r3, sl
 8005d8c:	4632      	mov	r2, r6
 8005d8e:	4621      	mov	r1, r4
 8005d90:	4640      	mov	r0, r8
 8005d92:	f7ff ff70 	bl	8005c76 <__ssputs_r>
 8005d96:	3001      	adds	r0, #1
 8005d98:	f000 80a4 	beq.w	8005ee4 <_svfiprintf_r+0x1b8>
 8005d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d9e:	4453      	add	r3, sl
 8005da0:	9309      	str	r3, [sp, #36]	; 0x24
 8005da2:	783b      	ldrb	r3, [r7, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 809d 	beq.w	8005ee4 <_svfiprintf_r+0x1b8>
 8005daa:	2300      	movs	r3, #0
 8005dac:	f04f 32ff 	mov.w	r2, #4294967295
 8005db0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005db4:	9304      	str	r3, [sp, #16]
 8005db6:	9307      	str	r3, [sp, #28]
 8005db8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dbc:	931a      	str	r3, [sp, #104]	; 0x68
 8005dbe:	462f      	mov	r7, r5
 8005dc0:	2205      	movs	r2, #5
 8005dc2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005dc6:	4850      	ldr	r0, [pc, #320]	; (8005f08 <_svfiprintf_r+0x1dc>)
 8005dc8:	f7fa fa0a 	bl	80001e0 <memchr>
 8005dcc:	9b04      	ldr	r3, [sp, #16]
 8005dce:	b9d0      	cbnz	r0, 8005e06 <_svfiprintf_r+0xda>
 8005dd0:	06d9      	lsls	r1, r3, #27
 8005dd2:	bf44      	itt	mi
 8005dd4:	2220      	movmi	r2, #32
 8005dd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005dda:	071a      	lsls	r2, r3, #28
 8005ddc:	bf44      	itt	mi
 8005dde:	222b      	movmi	r2, #43	; 0x2b
 8005de0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005de4:	782a      	ldrb	r2, [r5, #0]
 8005de6:	2a2a      	cmp	r2, #42	; 0x2a
 8005de8:	d015      	beq.n	8005e16 <_svfiprintf_r+0xea>
 8005dea:	9a07      	ldr	r2, [sp, #28]
 8005dec:	462f      	mov	r7, r5
 8005dee:	2000      	movs	r0, #0
 8005df0:	250a      	movs	r5, #10
 8005df2:	4639      	mov	r1, r7
 8005df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005df8:	3b30      	subs	r3, #48	; 0x30
 8005dfa:	2b09      	cmp	r3, #9
 8005dfc:	d94d      	bls.n	8005e9a <_svfiprintf_r+0x16e>
 8005dfe:	b1b8      	cbz	r0, 8005e30 <_svfiprintf_r+0x104>
 8005e00:	e00f      	b.n	8005e22 <_svfiprintf_r+0xf6>
 8005e02:	462f      	mov	r7, r5
 8005e04:	e7b8      	b.n	8005d78 <_svfiprintf_r+0x4c>
 8005e06:	4a40      	ldr	r2, [pc, #256]	; (8005f08 <_svfiprintf_r+0x1dc>)
 8005e08:	1a80      	subs	r0, r0, r2
 8005e0a:	fa0b f000 	lsl.w	r0, fp, r0
 8005e0e:	4318      	orrs	r0, r3
 8005e10:	9004      	str	r0, [sp, #16]
 8005e12:	463d      	mov	r5, r7
 8005e14:	e7d3      	b.n	8005dbe <_svfiprintf_r+0x92>
 8005e16:	9a03      	ldr	r2, [sp, #12]
 8005e18:	1d11      	adds	r1, r2, #4
 8005e1a:	6812      	ldr	r2, [r2, #0]
 8005e1c:	9103      	str	r1, [sp, #12]
 8005e1e:	2a00      	cmp	r2, #0
 8005e20:	db01      	blt.n	8005e26 <_svfiprintf_r+0xfa>
 8005e22:	9207      	str	r2, [sp, #28]
 8005e24:	e004      	b.n	8005e30 <_svfiprintf_r+0x104>
 8005e26:	4252      	negs	r2, r2
 8005e28:	f043 0302 	orr.w	r3, r3, #2
 8005e2c:	9207      	str	r2, [sp, #28]
 8005e2e:	9304      	str	r3, [sp, #16]
 8005e30:	783b      	ldrb	r3, [r7, #0]
 8005e32:	2b2e      	cmp	r3, #46	; 0x2e
 8005e34:	d10c      	bne.n	8005e50 <_svfiprintf_r+0x124>
 8005e36:	787b      	ldrb	r3, [r7, #1]
 8005e38:	2b2a      	cmp	r3, #42	; 0x2a
 8005e3a:	d133      	bne.n	8005ea4 <_svfiprintf_r+0x178>
 8005e3c:	9b03      	ldr	r3, [sp, #12]
 8005e3e:	1d1a      	adds	r2, r3, #4
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	9203      	str	r2, [sp, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	bfb8      	it	lt
 8005e48:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e4c:	3702      	adds	r7, #2
 8005e4e:	9305      	str	r3, [sp, #20]
 8005e50:	4d2e      	ldr	r5, [pc, #184]	; (8005f0c <_svfiprintf_r+0x1e0>)
 8005e52:	7839      	ldrb	r1, [r7, #0]
 8005e54:	2203      	movs	r2, #3
 8005e56:	4628      	mov	r0, r5
 8005e58:	f7fa f9c2 	bl	80001e0 <memchr>
 8005e5c:	b138      	cbz	r0, 8005e6e <_svfiprintf_r+0x142>
 8005e5e:	2340      	movs	r3, #64	; 0x40
 8005e60:	1b40      	subs	r0, r0, r5
 8005e62:	fa03 f000 	lsl.w	r0, r3, r0
 8005e66:	9b04      	ldr	r3, [sp, #16]
 8005e68:	4303      	orrs	r3, r0
 8005e6a:	3701      	adds	r7, #1
 8005e6c:	9304      	str	r3, [sp, #16]
 8005e6e:	7839      	ldrb	r1, [r7, #0]
 8005e70:	4827      	ldr	r0, [pc, #156]	; (8005f10 <_svfiprintf_r+0x1e4>)
 8005e72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e76:	2206      	movs	r2, #6
 8005e78:	1c7e      	adds	r6, r7, #1
 8005e7a:	f7fa f9b1 	bl	80001e0 <memchr>
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	d038      	beq.n	8005ef4 <_svfiprintf_r+0x1c8>
 8005e82:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <_svfiprintf_r+0x1e8>)
 8005e84:	bb13      	cbnz	r3, 8005ecc <_svfiprintf_r+0x1a0>
 8005e86:	9b03      	ldr	r3, [sp, #12]
 8005e88:	3307      	adds	r3, #7
 8005e8a:	f023 0307 	bic.w	r3, r3, #7
 8005e8e:	3308      	adds	r3, #8
 8005e90:	9303      	str	r3, [sp, #12]
 8005e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e94:	444b      	add	r3, r9
 8005e96:	9309      	str	r3, [sp, #36]	; 0x24
 8005e98:	e76d      	b.n	8005d76 <_svfiprintf_r+0x4a>
 8005e9a:	fb05 3202 	mla	r2, r5, r2, r3
 8005e9e:	2001      	movs	r0, #1
 8005ea0:	460f      	mov	r7, r1
 8005ea2:	e7a6      	b.n	8005df2 <_svfiprintf_r+0xc6>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	3701      	adds	r7, #1
 8005ea8:	9305      	str	r3, [sp, #20]
 8005eaa:	4619      	mov	r1, r3
 8005eac:	250a      	movs	r5, #10
 8005eae:	4638      	mov	r0, r7
 8005eb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005eb4:	3a30      	subs	r2, #48	; 0x30
 8005eb6:	2a09      	cmp	r2, #9
 8005eb8:	d903      	bls.n	8005ec2 <_svfiprintf_r+0x196>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0c8      	beq.n	8005e50 <_svfiprintf_r+0x124>
 8005ebe:	9105      	str	r1, [sp, #20]
 8005ec0:	e7c6      	b.n	8005e50 <_svfiprintf_r+0x124>
 8005ec2:	fb05 2101 	mla	r1, r5, r1, r2
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	4607      	mov	r7, r0
 8005eca:	e7f0      	b.n	8005eae <_svfiprintf_r+0x182>
 8005ecc:	ab03      	add	r3, sp, #12
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	4622      	mov	r2, r4
 8005ed2:	4b11      	ldr	r3, [pc, #68]	; (8005f18 <_svfiprintf_r+0x1ec>)
 8005ed4:	a904      	add	r1, sp, #16
 8005ed6:	4640      	mov	r0, r8
 8005ed8:	f3af 8000 	nop.w
 8005edc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005ee0:	4681      	mov	r9, r0
 8005ee2:	d1d6      	bne.n	8005e92 <_svfiprintf_r+0x166>
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	065b      	lsls	r3, r3, #25
 8005ee8:	f53f af35 	bmi.w	8005d56 <_svfiprintf_r+0x2a>
 8005eec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005eee:	b01d      	add	sp, #116	; 0x74
 8005ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef4:	ab03      	add	r3, sp, #12
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	4622      	mov	r2, r4
 8005efa:	4b07      	ldr	r3, [pc, #28]	; (8005f18 <_svfiprintf_r+0x1ec>)
 8005efc:	a904      	add	r1, sp, #16
 8005efe:	4640      	mov	r0, r8
 8005f00:	f000 f882 	bl	8006008 <_printf_i>
 8005f04:	e7ea      	b.n	8005edc <_svfiprintf_r+0x1b0>
 8005f06:	bf00      	nop
 8005f08:	08006b78 	.word	0x08006b78
 8005f0c:	08006b7e 	.word	0x08006b7e
 8005f10:	08006b82 	.word	0x08006b82
 8005f14:	00000000 	.word	0x00000000
 8005f18:	08005c77 	.word	0x08005c77

08005f1c <_printf_common>:
 8005f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f20:	4691      	mov	r9, r2
 8005f22:	461f      	mov	r7, r3
 8005f24:	688a      	ldr	r2, [r1, #8]
 8005f26:	690b      	ldr	r3, [r1, #16]
 8005f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	bfb8      	it	lt
 8005f30:	4613      	movlt	r3, r2
 8005f32:	f8c9 3000 	str.w	r3, [r9]
 8005f36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f3a:	4606      	mov	r6, r0
 8005f3c:	460c      	mov	r4, r1
 8005f3e:	b112      	cbz	r2, 8005f46 <_printf_common+0x2a>
 8005f40:	3301      	adds	r3, #1
 8005f42:	f8c9 3000 	str.w	r3, [r9]
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	0699      	lsls	r1, r3, #26
 8005f4a:	bf42      	ittt	mi
 8005f4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f50:	3302      	addmi	r3, #2
 8005f52:	f8c9 3000 	strmi.w	r3, [r9]
 8005f56:	6825      	ldr	r5, [r4, #0]
 8005f58:	f015 0506 	ands.w	r5, r5, #6
 8005f5c:	d107      	bne.n	8005f6e <_printf_common+0x52>
 8005f5e:	f104 0a19 	add.w	sl, r4, #25
 8005f62:	68e3      	ldr	r3, [r4, #12]
 8005f64:	f8d9 2000 	ldr.w	r2, [r9]
 8005f68:	1a9b      	subs	r3, r3, r2
 8005f6a:	42ab      	cmp	r3, r5
 8005f6c:	dc28      	bgt.n	8005fc0 <_printf_common+0xa4>
 8005f6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f72:	6822      	ldr	r2, [r4, #0]
 8005f74:	3300      	adds	r3, #0
 8005f76:	bf18      	it	ne
 8005f78:	2301      	movne	r3, #1
 8005f7a:	0692      	lsls	r2, r2, #26
 8005f7c:	d42d      	bmi.n	8005fda <_printf_common+0xbe>
 8005f7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f82:	4639      	mov	r1, r7
 8005f84:	4630      	mov	r0, r6
 8005f86:	47c0      	blx	r8
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d020      	beq.n	8005fce <_printf_common+0xb2>
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	68e5      	ldr	r5, [r4, #12]
 8005f90:	f8d9 2000 	ldr.w	r2, [r9]
 8005f94:	f003 0306 	and.w	r3, r3, #6
 8005f98:	2b04      	cmp	r3, #4
 8005f9a:	bf08      	it	eq
 8005f9c:	1aad      	subeq	r5, r5, r2
 8005f9e:	68a3      	ldr	r3, [r4, #8]
 8005fa0:	6922      	ldr	r2, [r4, #16]
 8005fa2:	bf0c      	ite	eq
 8005fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fa8:	2500      	movne	r5, #0
 8005faa:	4293      	cmp	r3, r2
 8005fac:	bfc4      	itt	gt
 8005fae:	1a9b      	subgt	r3, r3, r2
 8005fb0:	18ed      	addgt	r5, r5, r3
 8005fb2:	f04f 0900 	mov.w	r9, #0
 8005fb6:	341a      	adds	r4, #26
 8005fb8:	454d      	cmp	r5, r9
 8005fba:	d11a      	bne.n	8005ff2 <_printf_common+0xd6>
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	e008      	b.n	8005fd2 <_printf_common+0xb6>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	4652      	mov	r2, sl
 8005fc4:	4639      	mov	r1, r7
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	47c0      	blx	r8
 8005fca:	3001      	adds	r0, #1
 8005fcc:	d103      	bne.n	8005fd6 <_printf_common+0xba>
 8005fce:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd6:	3501      	adds	r5, #1
 8005fd8:	e7c3      	b.n	8005f62 <_printf_common+0x46>
 8005fda:	18e1      	adds	r1, r4, r3
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	2030      	movs	r0, #48	; 0x30
 8005fe0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fe4:	4422      	add	r2, r4
 8005fe6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fee:	3302      	adds	r3, #2
 8005ff0:	e7c5      	b.n	8005f7e <_printf_common+0x62>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	4622      	mov	r2, r4
 8005ff6:	4639      	mov	r1, r7
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	47c0      	blx	r8
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d0e6      	beq.n	8005fce <_printf_common+0xb2>
 8006000:	f109 0901 	add.w	r9, r9, #1
 8006004:	e7d8      	b.n	8005fb8 <_printf_common+0x9c>
	...

08006008 <_printf_i>:
 8006008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800600c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006010:	460c      	mov	r4, r1
 8006012:	7e09      	ldrb	r1, [r1, #24]
 8006014:	b085      	sub	sp, #20
 8006016:	296e      	cmp	r1, #110	; 0x6e
 8006018:	4617      	mov	r7, r2
 800601a:	4606      	mov	r6, r0
 800601c:	4698      	mov	r8, r3
 800601e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006020:	f000 80b3 	beq.w	800618a <_printf_i+0x182>
 8006024:	d822      	bhi.n	800606c <_printf_i+0x64>
 8006026:	2963      	cmp	r1, #99	; 0x63
 8006028:	d036      	beq.n	8006098 <_printf_i+0x90>
 800602a:	d80a      	bhi.n	8006042 <_printf_i+0x3a>
 800602c:	2900      	cmp	r1, #0
 800602e:	f000 80b9 	beq.w	80061a4 <_printf_i+0x19c>
 8006032:	2958      	cmp	r1, #88	; 0x58
 8006034:	f000 8083 	beq.w	800613e <_printf_i+0x136>
 8006038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800603c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006040:	e032      	b.n	80060a8 <_printf_i+0xa0>
 8006042:	2964      	cmp	r1, #100	; 0x64
 8006044:	d001      	beq.n	800604a <_printf_i+0x42>
 8006046:	2969      	cmp	r1, #105	; 0x69
 8006048:	d1f6      	bne.n	8006038 <_printf_i+0x30>
 800604a:	6820      	ldr	r0, [r4, #0]
 800604c:	6813      	ldr	r3, [r2, #0]
 800604e:	0605      	lsls	r5, r0, #24
 8006050:	f103 0104 	add.w	r1, r3, #4
 8006054:	d52a      	bpl.n	80060ac <_printf_i+0xa4>
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6011      	str	r1, [r2, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	da03      	bge.n	8006066 <_printf_i+0x5e>
 800605e:	222d      	movs	r2, #45	; 0x2d
 8006060:	425b      	negs	r3, r3
 8006062:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006066:	486f      	ldr	r0, [pc, #444]	; (8006224 <_printf_i+0x21c>)
 8006068:	220a      	movs	r2, #10
 800606a:	e039      	b.n	80060e0 <_printf_i+0xd8>
 800606c:	2973      	cmp	r1, #115	; 0x73
 800606e:	f000 809d 	beq.w	80061ac <_printf_i+0x1a4>
 8006072:	d808      	bhi.n	8006086 <_printf_i+0x7e>
 8006074:	296f      	cmp	r1, #111	; 0x6f
 8006076:	d020      	beq.n	80060ba <_printf_i+0xb2>
 8006078:	2970      	cmp	r1, #112	; 0x70
 800607a:	d1dd      	bne.n	8006038 <_printf_i+0x30>
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	f043 0320 	orr.w	r3, r3, #32
 8006082:	6023      	str	r3, [r4, #0]
 8006084:	e003      	b.n	800608e <_printf_i+0x86>
 8006086:	2975      	cmp	r1, #117	; 0x75
 8006088:	d017      	beq.n	80060ba <_printf_i+0xb2>
 800608a:	2978      	cmp	r1, #120	; 0x78
 800608c:	d1d4      	bne.n	8006038 <_printf_i+0x30>
 800608e:	2378      	movs	r3, #120	; 0x78
 8006090:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006094:	4864      	ldr	r0, [pc, #400]	; (8006228 <_printf_i+0x220>)
 8006096:	e055      	b.n	8006144 <_printf_i+0x13c>
 8006098:	6813      	ldr	r3, [r2, #0]
 800609a:	1d19      	adds	r1, r3, #4
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6011      	str	r1, [r2, #0]
 80060a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060a8:	2301      	movs	r3, #1
 80060aa:	e08c      	b.n	80061c6 <_printf_i+0x1be>
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6011      	str	r1, [r2, #0]
 80060b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060b4:	bf18      	it	ne
 80060b6:	b21b      	sxthne	r3, r3
 80060b8:	e7cf      	b.n	800605a <_printf_i+0x52>
 80060ba:	6813      	ldr	r3, [r2, #0]
 80060bc:	6825      	ldr	r5, [r4, #0]
 80060be:	1d18      	adds	r0, r3, #4
 80060c0:	6010      	str	r0, [r2, #0]
 80060c2:	0628      	lsls	r0, r5, #24
 80060c4:	d501      	bpl.n	80060ca <_printf_i+0xc2>
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	e002      	b.n	80060d0 <_printf_i+0xc8>
 80060ca:	0668      	lsls	r0, r5, #25
 80060cc:	d5fb      	bpl.n	80060c6 <_printf_i+0xbe>
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	4854      	ldr	r0, [pc, #336]	; (8006224 <_printf_i+0x21c>)
 80060d2:	296f      	cmp	r1, #111	; 0x6f
 80060d4:	bf14      	ite	ne
 80060d6:	220a      	movne	r2, #10
 80060d8:	2208      	moveq	r2, #8
 80060da:	2100      	movs	r1, #0
 80060dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060e0:	6865      	ldr	r5, [r4, #4]
 80060e2:	60a5      	str	r5, [r4, #8]
 80060e4:	2d00      	cmp	r5, #0
 80060e6:	f2c0 8095 	blt.w	8006214 <_printf_i+0x20c>
 80060ea:	6821      	ldr	r1, [r4, #0]
 80060ec:	f021 0104 	bic.w	r1, r1, #4
 80060f0:	6021      	str	r1, [r4, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d13d      	bne.n	8006172 <_printf_i+0x16a>
 80060f6:	2d00      	cmp	r5, #0
 80060f8:	f040 808e 	bne.w	8006218 <_printf_i+0x210>
 80060fc:	4665      	mov	r5, ip
 80060fe:	2a08      	cmp	r2, #8
 8006100:	d10b      	bne.n	800611a <_printf_i+0x112>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	07db      	lsls	r3, r3, #31
 8006106:	d508      	bpl.n	800611a <_printf_i+0x112>
 8006108:	6923      	ldr	r3, [r4, #16]
 800610a:	6862      	ldr	r2, [r4, #4]
 800610c:	429a      	cmp	r2, r3
 800610e:	bfde      	ittt	le
 8006110:	2330      	movle	r3, #48	; 0x30
 8006112:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006116:	f105 35ff 	addle.w	r5, r5, #4294967295
 800611a:	ebac 0305 	sub.w	r3, ip, r5
 800611e:	6123      	str	r3, [r4, #16]
 8006120:	f8cd 8000 	str.w	r8, [sp]
 8006124:	463b      	mov	r3, r7
 8006126:	aa03      	add	r2, sp, #12
 8006128:	4621      	mov	r1, r4
 800612a:	4630      	mov	r0, r6
 800612c:	f7ff fef6 	bl	8005f1c <_printf_common>
 8006130:	3001      	adds	r0, #1
 8006132:	d14d      	bne.n	80061d0 <_printf_i+0x1c8>
 8006134:	f04f 30ff 	mov.w	r0, #4294967295
 8006138:	b005      	add	sp, #20
 800613a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800613e:	4839      	ldr	r0, [pc, #228]	; (8006224 <_printf_i+0x21c>)
 8006140:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006144:	6813      	ldr	r3, [r2, #0]
 8006146:	6821      	ldr	r1, [r4, #0]
 8006148:	1d1d      	adds	r5, r3, #4
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6015      	str	r5, [r2, #0]
 800614e:	060a      	lsls	r2, r1, #24
 8006150:	d50b      	bpl.n	800616a <_printf_i+0x162>
 8006152:	07ca      	lsls	r2, r1, #31
 8006154:	bf44      	itt	mi
 8006156:	f041 0120 	orrmi.w	r1, r1, #32
 800615a:	6021      	strmi	r1, [r4, #0]
 800615c:	b91b      	cbnz	r3, 8006166 <_printf_i+0x15e>
 800615e:	6822      	ldr	r2, [r4, #0]
 8006160:	f022 0220 	bic.w	r2, r2, #32
 8006164:	6022      	str	r2, [r4, #0]
 8006166:	2210      	movs	r2, #16
 8006168:	e7b7      	b.n	80060da <_printf_i+0xd2>
 800616a:	064d      	lsls	r5, r1, #25
 800616c:	bf48      	it	mi
 800616e:	b29b      	uxthmi	r3, r3
 8006170:	e7ef      	b.n	8006152 <_printf_i+0x14a>
 8006172:	4665      	mov	r5, ip
 8006174:	fbb3 f1f2 	udiv	r1, r3, r2
 8006178:	fb02 3311 	mls	r3, r2, r1, r3
 800617c:	5cc3      	ldrb	r3, [r0, r3]
 800617e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006182:	460b      	mov	r3, r1
 8006184:	2900      	cmp	r1, #0
 8006186:	d1f5      	bne.n	8006174 <_printf_i+0x16c>
 8006188:	e7b9      	b.n	80060fe <_printf_i+0xf6>
 800618a:	6813      	ldr	r3, [r2, #0]
 800618c:	6825      	ldr	r5, [r4, #0]
 800618e:	6961      	ldr	r1, [r4, #20]
 8006190:	1d18      	adds	r0, r3, #4
 8006192:	6010      	str	r0, [r2, #0]
 8006194:	0628      	lsls	r0, r5, #24
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	d501      	bpl.n	800619e <_printf_i+0x196>
 800619a:	6019      	str	r1, [r3, #0]
 800619c:	e002      	b.n	80061a4 <_printf_i+0x19c>
 800619e:	066a      	lsls	r2, r5, #25
 80061a0:	d5fb      	bpl.n	800619a <_printf_i+0x192>
 80061a2:	8019      	strh	r1, [r3, #0]
 80061a4:	2300      	movs	r3, #0
 80061a6:	6123      	str	r3, [r4, #16]
 80061a8:	4665      	mov	r5, ip
 80061aa:	e7b9      	b.n	8006120 <_printf_i+0x118>
 80061ac:	6813      	ldr	r3, [r2, #0]
 80061ae:	1d19      	adds	r1, r3, #4
 80061b0:	6011      	str	r1, [r2, #0]
 80061b2:	681d      	ldr	r5, [r3, #0]
 80061b4:	6862      	ldr	r2, [r4, #4]
 80061b6:	2100      	movs	r1, #0
 80061b8:	4628      	mov	r0, r5
 80061ba:	f7fa f811 	bl	80001e0 <memchr>
 80061be:	b108      	cbz	r0, 80061c4 <_printf_i+0x1bc>
 80061c0:	1b40      	subs	r0, r0, r5
 80061c2:	6060      	str	r0, [r4, #4]
 80061c4:	6863      	ldr	r3, [r4, #4]
 80061c6:	6123      	str	r3, [r4, #16]
 80061c8:	2300      	movs	r3, #0
 80061ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ce:	e7a7      	b.n	8006120 <_printf_i+0x118>
 80061d0:	6923      	ldr	r3, [r4, #16]
 80061d2:	462a      	mov	r2, r5
 80061d4:	4639      	mov	r1, r7
 80061d6:	4630      	mov	r0, r6
 80061d8:	47c0      	blx	r8
 80061da:	3001      	adds	r0, #1
 80061dc:	d0aa      	beq.n	8006134 <_printf_i+0x12c>
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	079b      	lsls	r3, r3, #30
 80061e2:	d413      	bmi.n	800620c <_printf_i+0x204>
 80061e4:	68e0      	ldr	r0, [r4, #12]
 80061e6:	9b03      	ldr	r3, [sp, #12]
 80061e8:	4298      	cmp	r0, r3
 80061ea:	bfb8      	it	lt
 80061ec:	4618      	movlt	r0, r3
 80061ee:	e7a3      	b.n	8006138 <_printf_i+0x130>
 80061f0:	2301      	movs	r3, #1
 80061f2:	464a      	mov	r2, r9
 80061f4:	4639      	mov	r1, r7
 80061f6:	4630      	mov	r0, r6
 80061f8:	47c0      	blx	r8
 80061fa:	3001      	adds	r0, #1
 80061fc:	d09a      	beq.n	8006134 <_printf_i+0x12c>
 80061fe:	3501      	adds	r5, #1
 8006200:	68e3      	ldr	r3, [r4, #12]
 8006202:	9a03      	ldr	r2, [sp, #12]
 8006204:	1a9b      	subs	r3, r3, r2
 8006206:	42ab      	cmp	r3, r5
 8006208:	dcf2      	bgt.n	80061f0 <_printf_i+0x1e8>
 800620a:	e7eb      	b.n	80061e4 <_printf_i+0x1dc>
 800620c:	2500      	movs	r5, #0
 800620e:	f104 0919 	add.w	r9, r4, #25
 8006212:	e7f5      	b.n	8006200 <_printf_i+0x1f8>
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1ac      	bne.n	8006172 <_printf_i+0x16a>
 8006218:	7803      	ldrb	r3, [r0, #0]
 800621a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800621e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006222:	e76c      	b.n	80060fe <_printf_i+0xf6>
 8006224:	08006b89 	.word	0x08006b89
 8006228:	08006b9a 	.word	0x08006b9a

0800622c <memcpy>:
 800622c:	b510      	push	{r4, lr}
 800622e:	1e43      	subs	r3, r0, #1
 8006230:	440a      	add	r2, r1
 8006232:	4291      	cmp	r1, r2
 8006234:	d100      	bne.n	8006238 <memcpy+0xc>
 8006236:	bd10      	pop	{r4, pc}
 8006238:	f811 4b01 	ldrb.w	r4, [r1], #1
 800623c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006240:	e7f7      	b.n	8006232 <memcpy+0x6>

08006242 <memmove>:
 8006242:	4288      	cmp	r0, r1
 8006244:	b510      	push	{r4, lr}
 8006246:	eb01 0302 	add.w	r3, r1, r2
 800624a:	d807      	bhi.n	800625c <memmove+0x1a>
 800624c:	1e42      	subs	r2, r0, #1
 800624e:	4299      	cmp	r1, r3
 8006250:	d00a      	beq.n	8006268 <memmove+0x26>
 8006252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006256:	f802 4f01 	strb.w	r4, [r2, #1]!
 800625a:	e7f8      	b.n	800624e <memmove+0xc>
 800625c:	4283      	cmp	r3, r0
 800625e:	d9f5      	bls.n	800624c <memmove+0xa>
 8006260:	1881      	adds	r1, r0, r2
 8006262:	1ad2      	subs	r2, r2, r3
 8006264:	42d3      	cmn	r3, r2
 8006266:	d100      	bne.n	800626a <memmove+0x28>
 8006268:	bd10      	pop	{r4, pc}
 800626a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800626e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006272:	e7f7      	b.n	8006264 <memmove+0x22>

08006274 <_free_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	4605      	mov	r5, r0
 8006278:	2900      	cmp	r1, #0
 800627a:	d045      	beq.n	8006308 <_free_r+0x94>
 800627c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006280:	1f0c      	subs	r4, r1, #4
 8006282:	2b00      	cmp	r3, #0
 8006284:	bfb8      	it	lt
 8006286:	18e4      	addlt	r4, r4, r3
 8006288:	f000 f8d2 	bl	8006430 <__malloc_lock>
 800628c:	4a1f      	ldr	r2, [pc, #124]	; (800630c <_free_r+0x98>)
 800628e:	6813      	ldr	r3, [r2, #0]
 8006290:	4610      	mov	r0, r2
 8006292:	b933      	cbnz	r3, 80062a2 <_free_r+0x2e>
 8006294:	6063      	str	r3, [r4, #4]
 8006296:	6014      	str	r4, [r2, #0]
 8006298:	4628      	mov	r0, r5
 800629a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800629e:	f000 b8c8 	b.w	8006432 <__malloc_unlock>
 80062a2:	42a3      	cmp	r3, r4
 80062a4:	d90c      	bls.n	80062c0 <_free_r+0x4c>
 80062a6:	6821      	ldr	r1, [r4, #0]
 80062a8:	1862      	adds	r2, r4, r1
 80062aa:	4293      	cmp	r3, r2
 80062ac:	bf04      	itt	eq
 80062ae:	681a      	ldreq	r2, [r3, #0]
 80062b0:	685b      	ldreq	r3, [r3, #4]
 80062b2:	6063      	str	r3, [r4, #4]
 80062b4:	bf04      	itt	eq
 80062b6:	1852      	addeq	r2, r2, r1
 80062b8:	6022      	streq	r2, [r4, #0]
 80062ba:	6004      	str	r4, [r0, #0]
 80062bc:	e7ec      	b.n	8006298 <_free_r+0x24>
 80062be:	4613      	mov	r3, r2
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	b10a      	cbz	r2, 80062c8 <_free_r+0x54>
 80062c4:	42a2      	cmp	r2, r4
 80062c6:	d9fa      	bls.n	80062be <_free_r+0x4a>
 80062c8:	6819      	ldr	r1, [r3, #0]
 80062ca:	1858      	adds	r0, r3, r1
 80062cc:	42a0      	cmp	r0, r4
 80062ce:	d10b      	bne.n	80062e8 <_free_r+0x74>
 80062d0:	6820      	ldr	r0, [r4, #0]
 80062d2:	4401      	add	r1, r0
 80062d4:	1858      	adds	r0, r3, r1
 80062d6:	4282      	cmp	r2, r0
 80062d8:	6019      	str	r1, [r3, #0]
 80062da:	d1dd      	bne.n	8006298 <_free_r+0x24>
 80062dc:	6810      	ldr	r0, [r2, #0]
 80062de:	6852      	ldr	r2, [r2, #4]
 80062e0:	605a      	str	r2, [r3, #4]
 80062e2:	4401      	add	r1, r0
 80062e4:	6019      	str	r1, [r3, #0]
 80062e6:	e7d7      	b.n	8006298 <_free_r+0x24>
 80062e8:	d902      	bls.n	80062f0 <_free_r+0x7c>
 80062ea:	230c      	movs	r3, #12
 80062ec:	602b      	str	r3, [r5, #0]
 80062ee:	e7d3      	b.n	8006298 <_free_r+0x24>
 80062f0:	6820      	ldr	r0, [r4, #0]
 80062f2:	1821      	adds	r1, r4, r0
 80062f4:	428a      	cmp	r2, r1
 80062f6:	bf04      	itt	eq
 80062f8:	6811      	ldreq	r1, [r2, #0]
 80062fa:	6852      	ldreq	r2, [r2, #4]
 80062fc:	6062      	str	r2, [r4, #4]
 80062fe:	bf04      	itt	eq
 8006300:	1809      	addeq	r1, r1, r0
 8006302:	6021      	streq	r1, [r4, #0]
 8006304:	605c      	str	r4, [r3, #4]
 8006306:	e7c7      	b.n	8006298 <_free_r+0x24>
 8006308:	bd38      	pop	{r3, r4, r5, pc}
 800630a:	bf00      	nop
 800630c:	2000016c 	.word	0x2000016c

08006310 <_malloc_r>:
 8006310:	b570      	push	{r4, r5, r6, lr}
 8006312:	1ccd      	adds	r5, r1, #3
 8006314:	f025 0503 	bic.w	r5, r5, #3
 8006318:	3508      	adds	r5, #8
 800631a:	2d0c      	cmp	r5, #12
 800631c:	bf38      	it	cc
 800631e:	250c      	movcc	r5, #12
 8006320:	2d00      	cmp	r5, #0
 8006322:	4606      	mov	r6, r0
 8006324:	db01      	blt.n	800632a <_malloc_r+0x1a>
 8006326:	42a9      	cmp	r1, r5
 8006328:	d903      	bls.n	8006332 <_malloc_r+0x22>
 800632a:	230c      	movs	r3, #12
 800632c:	6033      	str	r3, [r6, #0]
 800632e:	2000      	movs	r0, #0
 8006330:	bd70      	pop	{r4, r5, r6, pc}
 8006332:	f000 f87d 	bl	8006430 <__malloc_lock>
 8006336:	4a21      	ldr	r2, [pc, #132]	; (80063bc <_malloc_r+0xac>)
 8006338:	6814      	ldr	r4, [r2, #0]
 800633a:	4621      	mov	r1, r4
 800633c:	b991      	cbnz	r1, 8006364 <_malloc_r+0x54>
 800633e:	4c20      	ldr	r4, [pc, #128]	; (80063c0 <_malloc_r+0xb0>)
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	b91b      	cbnz	r3, 800634c <_malloc_r+0x3c>
 8006344:	4630      	mov	r0, r6
 8006346:	f000 f863 	bl	8006410 <_sbrk_r>
 800634a:	6020      	str	r0, [r4, #0]
 800634c:	4629      	mov	r1, r5
 800634e:	4630      	mov	r0, r6
 8006350:	f000 f85e 	bl	8006410 <_sbrk_r>
 8006354:	1c43      	adds	r3, r0, #1
 8006356:	d124      	bne.n	80063a2 <_malloc_r+0x92>
 8006358:	230c      	movs	r3, #12
 800635a:	6033      	str	r3, [r6, #0]
 800635c:	4630      	mov	r0, r6
 800635e:	f000 f868 	bl	8006432 <__malloc_unlock>
 8006362:	e7e4      	b.n	800632e <_malloc_r+0x1e>
 8006364:	680b      	ldr	r3, [r1, #0]
 8006366:	1b5b      	subs	r3, r3, r5
 8006368:	d418      	bmi.n	800639c <_malloc_r+0x8c>
 800636a:	2b0b      	cmp	r3, #11
 800636c:	d90f      	bls.n	800638e <_malloc_r+0x7e>
 800636e:	600b      	str	r3, [r1, #0]
 8006370:	50cd      	str	r5, [r1, r3]
 8006372:	18cc      	adds	r4, r1, r3
 8006374:	4630      	mov	r0, r6
 8006376:	f000 f85c 	bl	8006432 <__malloc_unlock>
 800637a:	f104 000b 	add.w	r0, r4, #11
 800637e:	1d23      	adds	r3, r4, #4
 8006380:	f020 0007 	bic.w	r0, r0, #7
 8006384:	1ac3      	subs	r3, r0, r3
 8006386:	d0d3      	beq.n	8006330 <_malloc_r+0x20>
 8006388:	425a      	negs	r2, r3
 800638a:	50e2      	str	r2, [r4, r3]
 800638c:	e7d0      	b.n	8006330 <_malloc_r+0x20>
 800638e:	428c      	cmp	r4, r1
 8006390:	684b      	ldr	r3, [r1, #4]
 8006392:	bf16      	itet	ne
 8006394:	6063      	strne	r3, [r4, #4]
 8006396:	6013      	streq	r3, [r2, #0]
 8006398:	460c      	movne	r4, r1
 800639a:	e7eb      	b.n	8006374 <_malloc_r+0x64>
 800639c:	460c      	mov	r4, r1
 800639e:	6849      	ldr	r1, [r1, #4]
 80063a0:	e7cc      	b.n	800633c <_malloc_r+0x2c>
 80063a2:	1cc4      	adds	r4, r0, #3
 80063a4:	f024 0403 	bic.w	r4, r4, #3
 80063a8:	42a0      	cmp	r0, r4
 80063aa:	d005      	beq.n	80063b8 <_malloc_r+0xa8>
 80063ac:	1a21      	subs	r1, r4, r0
 80063ae:	4630      	mov	r0, r6
 80063b0:	f000 f82e 	bl	8006410 <_sbrk_r>
 80063b4:	3001      	adds	r0, #1
 80063b6:	d0cf      	beq.n	8006358 <_malloc_r+0x48>
 80063b8:	6025      	str	r5, [r4, #0]
 80063ba:	e7db      	b.n	8006374 <_malloc_r+0x64>
 80063bc:	2000016c 	.word	0x2000016c
 80063c0:	20000170 	.word	0x20000170

080063c4 <_realloc_r>:
 80063c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c6:	4607      	mov	r7, r0
 80063c8:	4614      	mov	r4, r2
 80063ca:	460e      	mov	r6, r1
 80063cc:	b921      	cbnz	r1, 80063d8 <_realloc_r+0x14>
 80063ce:	4611      	mov	r1, r2
 80063d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063d4:	f7ff bf9c 	b.w	8006310 <_malloc_r>
 80063d8:	b922      	cbnz	r2, 80063e4 <_realloc_r+0x20>
 80063da:	f7ff ff4b 	bl	8006274 <_free_r>
 80063de:	4625      	mov	r5, r4
 80063e0:	4628      	mov	r0, r5
 80063e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063e4:	f000 f826 	bl	8006434 <_malloc_usable_size_r>
 80063e8:	42a0      	cmp	r0, r4
 80063ea:	d20f      	bcs.n	800640c <_realloc_r+0x48>
 80063ec:	4621      	mov	r1, r4
 80063ee:	4638      	mov	r0, r7
 80063f0:	f7ff ff8e 	bl	8006310 <_malloc_r>
 80063f4:	4605      	mov	r5, r0
 80063f6:	2800      	cmp	r0, #0
 80063f8:	d0f2      	beq.n	80063e0 <_realloc_r+0x1c>
 80063fa:	4631      	mov	r1, r6
 80063fc:	4622      	mov	r2, r4
 80063fe:	f7ff ff15 	bl	800622c <memcpy>
 8006402:	4631      	mov	r1, r6
 8006404:	4638      	mov	r0, r7
 8006406:	f7ff ff35 	bl	8006274 <_free_r>
 800640a:	e7e9      	b.n	80063e0 <_realloc_r+0x1c>
 800640c:	4635      	mov	r5, r6
 800640e:	e7e7      	b.n	80063e0 <_realloc_r+0x1c>

08006410 <_sbrk_r>:
 8006410:	b538      	push	{r3, r4, r5, lr}
 8006412:	4c06      	ldr	r4, [pc, #24]	; (800642c <_sbrk_r+0x1c>)
 8006414:	2300      	movs	r3, #0
 8006416:	4605      	mov	r5, r0
 8006418:	4608      	mov	r0, r1
 800641a:	6023      	str	r3, [r4, #0]
 800641c:	f7fc f886 	bl	800252c <_sbrk>
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	d102      	bne.n	800642a <_sbrk_r+0x1a>
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	b103      	cbz	r3, 800642a <_sbrk_r+0x1a>
 8006428:	602b      	str	r3, [r5, #0]
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	200003ec 	.word	0x200003ec

08006430 <__malloc_lock>:
 8006430:	4770      	bx	lr

08006432 <__malloc_unlock>:
 8006432:	4770      	bx	lr

08006434 <_malloc_usable_size_r>:
 8006434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006438:	1f18      	subs	r0, r3, #4
 800643a:	2b00      	cmp	r3, #0
 800643c:	bfbc      	itt	lt
 800643e:	580b      	ldrlt	r3, [r1, r0]
 8006440:	18c0      	addlt	r0, r0, r3
 8006442:	4770      	bx	lr

08006444 <_init>:
 8006444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006446:	bf00      	nop
 8006448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800644a:	bc08      	pop	{r3}
 800644c:	469e      	mov	lr, r3
 800644e:	4770      	bx	lr

08006450 <_fini>:
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006452:	bf00      	nop
 8006454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006456:	bc08      	pop	{r3}
 8006458:	469e      	mov	lr, r3
 800645a:	4770      	bx	lr

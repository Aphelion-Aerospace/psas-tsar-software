
AC_Firmware_Rev_3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006458  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  080065e8  080065e8  000165e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dd0  08006dd0  00020154  2**0
                  CONTENTS
  4 .ARM          00000008  08006dd0  08006dd0  00016dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dd8  08006dd8  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dd8  08006dd8  00016dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ddc  08006ddc  00016ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  08006de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000154  08006f34  00020154  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08006f34  00020420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022db4  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d40  00000000  00000000  00042f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b38  00000000  00000000  00046c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000950  00000000  00000000  000477b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a1c4  00000000  00000000  00048100  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012083  00000000  00000000  000722c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9c5a  00000000  00000000  00084347  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016dfa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b18  00000000  00000000  0016e01c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000154 	.word	0x20000154
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065d0 	.word	0x080065d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000158 	.word	0x20000158
 80001cc:	080065d0 	.word	0x080065d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <AutomaticShutdown>:
#include "utilities.h"

//Automatic shutdown : Purge and go back to SAFETY

uint32_t AutomaticShutdown(struct StateVars *ctrl)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
	ctrl->valveConfiguration = StateConfiguration();
 800058c:	f002 f942 	bl	8002814 <StateConfiguration>
 8000590:	4602      	mov	r2, r0
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	62da      	str	r2, [r3, #44]	; 0x2c

	/*FUEL PURGE N2  - LOX PURGE N2*/
	ctrl->valveTarget  = ((uint16_t)SOV3 	\
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f44f 7282 	mov.w	r2, #260	; 0x104
 800059c:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV9);


	uint32_t TIMEOUT = 3000; // 3 second time out
 800059e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005a2:	613b      	str	r3, [r7, #16]
	
    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 f8f6 	bl	800279c <VerifyState>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d054      	beq.n	8000660 <AutomaticShutdown+0xe0>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 f8ed 	bl	800279c <VerifyState>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d04b      	beq.n	8000660 <AutomaticShutdown+0xe0>
    {
    	if((ctrl->currentState & AUTOMATIC_SHUTDOWN) == AUTOMATIC_SHUTDOWN){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80005ce:	f003 030c 	and.w	r3, r3, #12
 80005d2:	2b0c      	cmp	r3, #12
 80005d4:	d137      	bne.n	8000646 <AutomaticShutdown+0xc6>


    		StateStatus(ctrl);
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f002 f896 	bl	8002708 <StateStatus>

    		uint32_t now = HAL_GetTick();
 80005dc:	f003 fa0e 	bl	80039fc <HAL_GetTick>
 80005e0:	60f8      	str	r0, [r7, #12]
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d003      	beq.n	80005fa <AutomaticShutdown+0x7a>
    	    {
    			success = StateInitialize(ctrl);
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f002 fa60 	bl	8002ab8 <StateInitialize>
 80005f8:	6178      	str	r0, [r7, #20]
    	    }


    		success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	429a      	cmp	r2, r3
 8000604:	bf0c      	ite	eq
 8000606:	2301      	moveq	r3, #1
 8000608:	2300      	movne	r3, #0
 800060a:	b2db      	uxtb	r3, r3
 800060c:	617b      	str	r3, [r7, #20]

    		 if(now - ctrl->timeStarted > TIMEOUT && success)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	429a      	cmp	r2, r3
 800061a:	d206      	bcs.n	800062a <AutomaticShutdown+0xaa>
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d003      	beq.n	800062a <AutomaticShutdown+0xaa>
    		   {
    		       ctrl->currentState= SAFETY;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2205      	movs	r2, #5
 8000626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		   }

    		 // Increment state counter
			ctrl->stateCounter++;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	1c5a      	adds	r2, r3, #1
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800063c:	d11f      	bne.n	800067e <AutomaticShutdown+0xfe>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & AUTOMATIC_SHUTDOWN) == AUTOMATIC_SHUTDOWN){
 8000644:	e01b      	b.n	800067e <AutomaticShutdown+0xfe>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, AUTOMATIC_SHUTDOWN, ctrl->currentState);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800064c:	461a      	mov	r2, r3
 800064e:	210c      	movs	r1, #12
 8000650:	480e      	ldr	r0, [pc, #56]	; (800068c <AutomaticShutdown+0x10c>)
 8000652:	f001 fad3 	bl	8001bfc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2, Tx_Buffer);
 8000656:	490d      	ldr	r1, [pc, #52]	; (800068c <AutomaticShutdown+0x10c>)
 8000658:	480d      	ldr	r0, [pc, #52]	; (8000690 <AutomaticShutdown+0x110>)
 800065a:	f000 fc27 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & AUTOMATIC_SHUTDOWN) == AUTOMATIC_SHUTDOWN){
 800065e:	e00e      	b.n	800067e <AutomaticShutdown+0xfe>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800066c:	461a      	mov	r2, r3
 800066e:	4807      	ldr	r0, [pc, #28]	; (800068c <AutomaticShutdown+0x10c>)
 8000670:	f001 fb3e 	bl	8001cf0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8000674:	4905      	ldr	r1, [pc, #20]	; (800068c <AutomaticShutdown+0x10c>)
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <AutomaticShutdown+0x110>)
 8000678:	f000 fc18 	bl	8000eac <UART_SendMessage>
 800067c:	e000      	b.n	8000680 <AutomaticShutdown+0x100>
    	if((ctrl->currentState & AUTOMATIC_SHUTDOWN) == AUTOMATIC_SHUTDOWN){
 800067e:	bf00      	nop
    }
	return success;
 8000680:	697b      	ldr	r3, [r7, #20]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200001a0 	.word	0x200001a0
 8000690:	20000384 	.word	0x20000384

08000694 <Firing>:
#include <firing.h>
#include "messages.h"
#include "utilities.h"

uint32_t Firing(struct StateVars *ctrl)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
	ctrl->valveConfiguration = StateConfiguration();
 80006a0:	f002 f8b8 	bl	8002814 <StateConfiguration>
 80006a4:	4602      	mov	r2, r0
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV1 	\
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2233      	movs	r2, #51	; 0x33
 80006ae:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV2 	\
			 |(uint16_t)SOV5 	\
			 |(uint16_t)SOV6);

	uint32_t TIMEOUT = 3000;// 3 second time out
 80006b0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80006b4:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 f86d 	bl	800279c <VerifyState>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d05f      	beq.n	8000788 <Firing+0xf4>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 f864 	bl	800279c <VerifyState>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d056      	beq.n	8000788 <Firing+0xf4>
    {
    	if((ctrl->currentState & FIRING) == FIRING){
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80006e0:	f003 0309 	and.w	r3, r3, #9
 80006e4:	2b09      	cmp	r3, #9
 80006e6:	d142      	bne.n	800076e <Firing+0xda>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  1  |   1  |   0  |   0  |   1  |   1  |   0  |   0  |  0  |  0

    		StateStatus(ctrl);
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f002 f80d 	bl	8002708 <StateStatus>
    		nominal = NominalValueCheck(ctrl, Rx_Buffer);
 80006ee:	4931      	ldr	r1, [pc, #196]	; (80007b4 <Firing+0x120>)
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f001 fa75 	bl	8001be0 <NominalValueCheck>
 80006f6:	4602      	mov	r2, r0
 80006f8:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <Firing+0x124>)
 80006fa:	601a      	str	r2, [r3, #0]

    		uint32_t now = HAL_GetTick();
 80006fc:	f003 f97e 	bl	80039fc <HAL_GetTick>
 8000700:	60f8      	str	r0, [r7, #12]
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800070e:	429a      	cmp	r2, r3
 8000710:	d003      	beq.n	800071a <Firing+0x86>
    	    {
    			success = StateInitialize(ctrl);
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f002 f9d0 	bl	8002ab8 <StateInitialize>
 8000718:	6178      	str	r0, [r7, #20]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	429a      	cmp	r2, r3
 8000724:	bf0c      	ite	eq
 8000726:	2301      	moveq	r3, #1
 8000728:	2300      	movne	r3, #0
 800072a:	b2db      	uxtb	r3, r3
 800072c:	617b      	str	r3, [r7, #20]


    		if(now - ctrl->timeStarted > TIMEOUT && success && nominal)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	429a      	cmp	r2, r3
 800073a:	d20a      	bcs.n	8000752 <Firing+0xbe>
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d007      	beq.n	8000752 <Firing+0xbe>
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <Firing+0x124>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d003      	beq.n	8000752 <Firing+0xbe>
    		{
        		ctrl->currentState= PURGE;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	220a      	movs	r2, #10
 800074e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}



    		// Increment state counter
    		ctrl->stateCounter++;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	1c5a      	adds	r2, r3, #1
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	609a      	str	r2, [r3, #8]
    		if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000764:	d11f      	bne.n	80007a6 <Firing+0x112>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & FIRING) == FIRING){
 800076c:	e01b      	b.n	80007a6 <Firing+0x112>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, FIRING, ctrl->currentState);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000774:	461a      	mov	r2, r3
 8000776:	2109      	movs	r1, #9
 8000778:	4810      	ldr	r0, [pc, #64]	; (80007bc <Firing+0x128>)
 800077a:	f001 fa3f 	bl	8001bfc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 800077e:	490f      	ldr	r1, [pc, #60]	; (80007bc <Firing+0x128>)
 8000780:	480f      	ldr	r0, [pc, #60]	; (80007c0 <Firing+0x12c>)
 8000782:	f000 fb93 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & FIRING) == FIRING){
 8000786:	e00e      	b.n	80007a6 <Firing+0x112>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000794:	461a      	mov	r2, r3
 8000796:	4809      	ldr	r0, [pc, #36]	; (80007bc <Firing+0x128>)
 8000798:	f001 faaa 	bl	8001cf0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 800079c:	4907      	ldr	r1, [pc, #28]	; (80007bc <Firing+0x128>)
 800079e:	4808      	ldr	r0, [pc, #32]	; (80007c0 <Firing+0x12c>)
 80007a0:	f000 fb84 	bl	8000eac <UART_SendMessage>
 80007a4:	e000      	b.n	80007a8 <Firing+0x114>
    	if((ctrl->currentState & FIRING) == FIRING){
 80007a6:	bf00      	nop
    }
	return success;
 80007a8:	697b      	ldr	r3, [r7, #20]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000318 	.word	0x20000318
 80007b8:	20000188 	.word	0x20000188
 80007bc:	200001a0 	.word	0x200001a0
 80007c0:	20000384 	.word	0x20000384

080007c4 <Ignition>:
#include <ignition.h>
#include "messages.h"
#include "utilities.h"

uint32_t Ignition(struct StateVars *ctrl)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
	ctrl->valveConfiguration = StateConfiguration();
 80007d0:	f002 f820 	bl	8002814 <StateConfiguration>
 80007d4:	4602      	mov	r2, r0
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV1 	\
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f240 2203 	movw	r2, #515	; 0x203
 80007e0:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV2 |(uint16_t)IG1);

	uint32_t TIMEOUT = 5000;//5 second time out
 80007e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80007e6:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 ffd4 	bl	800279c <VerifyState>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d05f      	beq.n	80008ba <Ignition+0xf6>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000800:	4618      	mov	r0, r3
 8000802:	f001 ffcb 	bl	800279c <VerifyState>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d056      	beq.n	80008ba <Ignition+0xf6>
    {
    	if((ctrl->currentState & IGNITION) == IGNITION){
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	2b07      	cmp	r3, #7
 8000818:	d142      	bne.n	80008a0 <Ignition+0xdc>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  1  |   1  |   0  |   0  |   0  |   0  |   0  |   0  |  0  |  1

    		StateStatus(ctrl);
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f001 ff74 	bl	8002708 <StateStatus>
    		nominal = NominalValueCheck(ctrl, Rx_Buffer);
 8000820:	4930      	ldr	r1, [pc, #192]	; (80008e4 <Ignition+0x120>)
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f001 f9dc 	bl	8001be0 <NominalValueCheck>
 8000828:	4602      	mov	r2, r0
 800082a:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <Ignition+0x124>)
 800082c:	601a      	str	r2, [r3, #0]

    		uint32_t now = HAL_GetTick();//should return the number of milliseconds elapsed since startup
 800082e:	f003 f8e5 	bl	80039fc <HAL_GetTick>
 8000832:	60f8      	str	r0, [r7, #12]
    	    // If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000840:	429a      	cmp	r2, r3
 8000842:	d003      	beq.n	800084c <Ignition+0x88>
    	    {
    			success = StateInitialize(ctrl);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f002 f937 	bl	8002ab8 <StateInitialize>
 800084a:	6178      	str	r0, [r7, #20]
    	    }


			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	429a      	cmp	r2, r3
 8000856:	bf0c      	ite	eq
 8000858:	2301      	moveq	r3, #1
 800085a:	2300      	movne	r3, #0
 800085c:	b2db      	uxtb	r3, r3
 800085e:	617b      	str	r3, [r7, #20]

    		if((now - ctrl->timeStarted >= TIMEOUT) && success && nominal)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	429a      	cmp	r2, r3
 800086c:	d80a      	bhi.n	8000884 <Ignition+0xc0>
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d007      	beq.n	8000884 <Ignition+0xc0>
 8000874:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <Ignition+0x124>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d003      	beq.n	8000884 <Ignition+0xc0>
    		{
        		ctrl->currentState= OXIDIZER_START;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2208      	movs	r2, #8
 8000880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}

    		// Increment state counter
			ctrl->stateCounter++;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	1c5a      	adds	r2, r3, #1
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000896:	d11f      	bne.n	80008d8 <Ignition+0x114>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & IGNITION) == IGNITION){
 800089e:	e01b      	b.n	80008d8 <Ignition+0x114>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, IGNITION, ctrl->currentState);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008a6:	461a      	mov	r2, r3
 80008a8:	2107      	movs	r1, #7
 80008aa:	4810      	ldr	r0, [pc, #64]	; (80008ec <Ignition+0x128>)
 80008ac:	f001 f9a6 	bl	8001bfc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 80008b0:	490e      	ldr	r1, [pc, #56]	; (80008ec <Ignition+0x128>)
 80008b2:	480f      	ldr	r0, [pc, #60]	; (80008f0 <Ignition+0x12c>)
 80008b4:	f000 fafa 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & IGNITION) == IGNITION){
 80008b8:	e00e      	b.n	80008d8 <Ignition+0x114>
    	}

    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80008c6:	461a      	mov	r2, r3
 80008c8:	4808      	ldr	r0, [pc, #32]	; (80008ec <Ignition+0x128>)
 80008ca:	f001 fa11 	bl	8001cf0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 80008ce:	4907      	ldr	r1, [pc, #28]	; (80008ec <Ignition+0x128>)
 80008d0:	4807      	ldr	r0, [pc, #28]	; (80008f0 <Ignition+0x12c>)
 80008d2:	f000 faeb 	bl	8000eac <UART_SendMessage>
 80008d6:	e000      	b.n	80008da <Ignition+0x116>
    	if((ctrl->currentState & IGNITION) == IGNITION){
 80008d8:	bf00      	nop
    }
	return success;
 80008da:	697b      	ldr	r3, [r7, #20]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000318 	.word	0x20000318
 80008e8:	20000188 	.word	0x20000188
 80008ec:	200001a0 	.word	0x200001a0
 80008f0:	20000384 	.word	0x20000384

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b096      	sub	sp, #88	; 0x58
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	2244      	movs	r2, #68	; 0x44
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f005 fa3e 	bl	8005d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	463b      	mov	r3, r7
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000916:	2302      	movs	r3, #2
 8000918:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800091a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800091e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000920:	2310      	movs	r3, #16
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000924:	2302      	movs	r3, #2
 8000926:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000928:	2302      	movs	r3, #2
 800092a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800092c:	2301      	movs	r3, #1
 800092e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000930:	230a      	movs	r3, #10
 8000932:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000934:	2307      	movs	r3, #7
 8000936:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800093c:	2302      	movs	r3, #2
 800093e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4618      	mov	r0, r3
 8000946:	f003 fc39 	bl	80041bc <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000950:	f000 f8fc 	bl	8000b4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000958:	2303      	movs	r3, #3
 800095a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	2104      	movs	r1, #4
 800096c:	4618      	mov	r0, r3
 800096e:	f004 f80b 	bl	8004988 <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000978:	f000 f8e8 	bl	8000b4c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800097c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000980:	f003 fbc6 	bl	8004110 <HAL_PWREx_ControlVoltageScaling>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800098a:	f000 f8df 	bl	8000b4c <Error_Handler>
  }
}
 800098e:	bf00      	nop
 8000990:	3758      	adds	r7, #88	; 0x58
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <MX_USART2_UART_Init>:
    * @brief USART1 Initialization Function
    * @param None
    * @retval None
    */
void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 800099e:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <MX_USART2_UART_Init+0x5c>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009dc:	f004 f9d8 	bl	8004d90 <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009e6:	f000 f8b1 	bl	8000b4c <Error_Handler>
  }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

  }
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000384 	.word	0x20000384
 80009f4:	40004400 	.word	0x40004400

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	4b4b      	ldr	r3, [pc, #300]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	4a4a      	ldr	r2, [pc, #296]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1a:	4b48      	ldr	r3, [pc, #288]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a26:	4b45      	ldr	r3, [pc, #276]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a44      	ldr	r2, [pc, #272]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b42      	ldr	r3, [pc, #264]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b3f      	ldr	r3, [pc, #252]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	4a3e      	ldr	r2, [pc, #248]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4a:	4b3c      	ldr	r3, [pc, #240]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a38      	ldr	r2, [pc, #224]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b36      	ldr	r3, [pc, #216]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LOX_MAIN_Pin|FUEL_MAIN_Pin|IGNITION1_Pin
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 51f9 	mov.w	r1, #7968	; 0x1f20
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f003 fb00 	bl	800407c <HAL_GPIO_WritePin>
                          |FUEL_PRESSURE_Pin|LOX_PRESSURE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin|LOX_PURGE_Pin|LOX_FILL_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 4124 	mov.w	r1, #41984	; 0xa400
 8000a82:	482f      	ldr	r0, [pc, #188]	; (8000b40 <MX_GPIO_Init+0x148>)
 8000a84:	f003 fafa 	bl	800407c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin|FUEL_PURGE_N2_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	21c0      	movs	r1, #192	; 0xc0
 8000a8c:	482d      	ldr	r0, [pc, #180]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000a8e:	f003 faf5 	bl	800407c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <MX_GPIO_Init+0x150>)
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4827      	ldr	r0, [pc, #156]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000aa8:	f003 f928 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aac:	2320      	movs	r3, #32
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac6:	f003 f919 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LOX_VENT_Pin LOX_PURGE_Pin LOX_FILL_Pin */
  GPIO_InitStruct.Pin = LOX_VENT_Pin|LOX_PURGE_Pin|LOX_FILL_Pin;
 8000aca:	f44f 4324 	mov.w	r3, #41984	; 0xa400
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4817      	ldr	r0, [pc, #92]	; (8000b40 <MX_GPIO_Init+0x148>)
 8000ae4:	f003 f90a 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : FUEL_VENT_Pin FUEL_PURGE_N2_Pin */
  GPIO_InitStruct.Pin = FUEL_VENT_Pin|FUEL_PURGE_N2_Pin;
 8000ae8:	23c0      	movs	r3, #192	; 0xc0
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4811      	ldr	r0, [pc, #68]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000b00:	f003 f8fc 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LOX_MAIN_Pin FUEL_MAIN_Pin IGNITION1_Pin FUEL_PRESSURE_Pin
                           LOX_PRESSURE_Pin */
  GPIO_InitStruct.Pin = LOX_MAIN_Pin|FUEL_MAIN_Pin|IGNITION1_Pin|FUEL_PRESSURE_Pin
 8000b04:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000b08:	617b      	str	r3, [r7, #20]
                          |LOX_PRESSURE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f003 f8ec 	bl	8003cfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	2028      	movs	r0, #40	; 0x28
 8000b2a:	f003 f870 	bl	8003c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b2e:	2028      	movs	r0, #40	; 0x28
 8000b30:	f003 f889 	bl	8003c46 <HAL_NVIC_EnableIRQ>

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	48000400 	.word	0x48000400
 8000b44:	48000800 	.word	0x48000800
 8000b48:	10210000 	.word	0x10210000

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <Error_Handler+0x6>

08000b54 <LoxChill>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include <lox_chill.h>
#include "messages.h"

uint32_t LoxChill(struct StateVars *ctrl)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 8000b60:	f001 fe58 	bl	8002814 <StateConfiguration>
 8000b64:	4602      	mov	r2, r0
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV4 	\
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	22a8      	movs	r2, #168	; 0xa8
 8000b6e:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV6 	\
			 |(uint16_t)SOV8);

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 fe10 	bl	800279c <VerifyState>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d04a      	beq.n	8000c18 <LoxChill+0xc4>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 fe07 	bl	800279c <VerifyState>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d041      	beq.n	8000c18 <LoxChill+0xc4>
    {
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d02d      	beq.n	8000bfe <LoxChill+0xaa>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8
    		//|  0  |   0  |   0  |   1  |   0  |   1  |   0  |   1  |

    		StateStatus(ctrl);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f001 fdb0 	bl	8002708 <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d003      	beq.n	8000bc0 <LoxChill+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f001 ff7d 	bl	8002ab8 <StateInitialize>
 8000bbe:	60f8      	str	r0, [r7, #12]
    	    }

    		//check if command changed
    		ProcessCommands(ctrl);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f000 fb17 	bl	80011f4 <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2301      	moveq	r3, #1
 8000bd4:	2300      	movne	r3, #0
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	60fb      	str	r3, [r7, #12]

			NominalValueCheck(ctrl, Rx_Buffer);
 8000bda:	491a      	ldr	r1, [pc, #104]	; (8000c44 <LoxChill+0xf0>)
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 ffff 	bl	8001be0 <NominalValueCheck>

    		// Increment state counter
			ctrl->stateCounter++;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf4:	d11f      	bne.n	8000c36 <LoxChill+0xe2>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000bfc:	e01b      	b.n	8000c36 <LoxChill+0xe2>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, LOX_CHILL, ctrl->currentState);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c04:	461a      	mov	r2, r3
 8000c06:	2104      	movs	r1, #4
 8000c08:	480f      	ldr	r0, [pc, #60]	; (8000c48 <LoxChill+0xf4>)
 8000c0a:	f000 fff7 	bl	8001bfc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8000c0e:	490e      	ldr	r1, [pc, #56]	; (8000c48 <LoxChill+0xf4>)
 8000c10:	480e      	ldr	r0, [pc, #56]	; (8000c4c <LoxChill+0xf8>)
 8000c12:	f000 f94b 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000c16:	e00e      	b.n	8000c36 <LoxChill+0xe2>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c24:	461a      	mov	r2, r3
 8000c26:	4808      	ldr	r0, [pc, #32]	; (8000c48 <LoxChill+0xf4>)
 8000c28:	f001 f862 	bl	8001cf0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8000c2c:	4906      	ldr	r1, [pc, #24]	; (8000c48 <LoxChill+0xf4>)
 8000c2e:	4807      	ldr	r0, [pc, #28]	; (8000c4c <LoxChill+0xf8>)
 8000c30:	f000 f93c 	bl	8000eac <UART_SendMessage>
 8000c34:	e000      	b.n	8000c38 <LoxChill+0xe4>
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000c36:	bf00      	nop
    }
	return success;
 8000c38:	68fb      	ldr	r3, [r7, #12]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000318 	.word	0x20000318
 8000c48:	200001a0 	.word	0x200001a0
 8000c4c:	20000384 	.word	0x20000384

08000c50 <LoxFill>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include <lox_fill.h>
#include <messages.h>

uint32_t LoxFill(struct StateVars *ctrl){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 8000c5c:	f001 fdda 	bl	8002814 <StateConfiguration>
 8000c60:	4602      	mov	r2, r0
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV4 	\
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	22c8      	movs	r2, #200	; 0xc8
 8000c6a:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV7 	\
			 |(uint16_t)SOV8);

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 fd92 	bl	800279c <VerifyState>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d04a      	beq.n	8000d14 <LoxFill+0xc4>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c84:	4618      	mov	r0, r3
 8000c86:	f001 fd89 	bl	800279c <VerifyState>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d041      	beq.n	8000d14 <LoxFill+0xc4>
    {
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c96:	f003 0303 	and.w	r3, r3, #3
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d12d      	bne.n	8000cfa <LoxFill+0xaa>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  0  |   0  |   0  |   1  |   0  |   0  |   1  |   1  |  0  |  0

    		StateStatus(ctrl);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f001 fd32 	bl	8002708 <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d003      	beq.n	8000cbc <LoxFill+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f001 feff 	bl	8002ab8 <StateInitialize>
 8000cba:	60f8      	str	r0, [r7, #12]
    	    }


    		ProcessCommands(ctrl);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 fa99 	bl	80011f4 <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	bf0c      	ite	eq
 8000cce:	2301      	moveq	r3, #1
 8000cd0:	2300      	movne	r3, #0
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	60fb      	str	r3, [r7, #12]

			NominalValueCheck(ctrl, Rx_Buffer);
 8000cd6:	491a      	ldr	r1, [pc, #104]	; (8000d40 <LoxFill+0xf0>)
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f000 ff81 	bl	8001be0 <NominalValueCheck>

    		// Increment state counter
			ctrl->stateCounter++;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf0:	d11f      	bne.n	8000d32 <LoxFill+0xe2>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000cf8:	e01b      	b.n	8000d32 <LoxFill+0xe2>

    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, LOX_FILL, ctrl->currentState);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d00:	461a      	mov	r2, r3
 8000d02:	2103      	movs	r1, #3
 8000d04:	480f      	ldr	r0, [pc, #60]	; (8000d44 <LoxFill+0xf4>)
 8000d06:	f000 ff79 	bl	8001bfc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8000d0a:	490e      	ldr	r1, [pc, #56]	; (8000d44 <LoxFill+0xf4>)
 8000d0c:	480e      	ldr	r0, [pc, #56]	; (8000d48 <LoxFill+0xf8>)
 8000d0e:	f000 f8cd 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000d12:	e00e      	b.n	8000d32 <LoxFill+0xe2>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d20:	461a      	mov	r2, r3
 8000d22:	4808      	ldr	r0, [pc, #32]	; (8000d44 <LoxFill+0xf4>)
 8000d24:	f000 ffe4 	bl	8001cf0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 8000d28:	4906      	ldr	r1, [pc, #24]	; (8000d44 <LoxFill+0xf4>)
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <LoxFill+0xf8>)
 8000d2c:	f000 f8be 	bl	8000eac <UART_SendMessage>
 8000d30:	e000      	b.n	8000d34 <LoxFill+0xe4>
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000d32:	bf00      	nop
    }
	return success;
 8000d34:	68fb      	ldr	r3, [r7, #12]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000318 	.word	0x20000318
 8000d44:	200001a0 	.word	0x200001a0
 8000d48:	20000384 	.word	0x20000384

08000d4c <LoxPreFill>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include <lox_pre_fill.h>
#include <messages.h>

uint32_t LoxPreFill(struct StateVars *ctrl)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]

	ctrl->valveConfiguration = StateConfiguration();
 8000d58:	f001 fd5c 	bl	8002814 <StateConfiguration>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV2 | (uint16_t)SOV4 |(uint16_t)SOV6);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	222a      	movs	r2, #42	; 0x2a
 8000d66:	631a      	str	r2, [r3, #48]	; 0x30


    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fd14 	bl	800279c <VerifyState>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d04d      	beq.n	8000e16 <LoxPreFill+0xca>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d80:	4618      	mov	r0, r3
 8000d82:	f001 fd0b 	bl	800279c <VerifyState>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d044      	beq.n	8000e16 <LoxPreFill+0xca>
    {
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d030      	beq.n	8000dfc <LoxPreFill+0xb0>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8   SOV9   IG1
    		// | 0	|   1  |   0  |   1  |   0  |   1  |   0  |   0  |   0  |  0
    		StateStatus(ctrl);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f001 fcb4 	bl	8002708 <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d003      	beq.n	8000db8 <LoxPreFill+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f001 fe81 	bl	8002ab8 <StateInitialize>
 8000db6:	60f8      	str	r0, [r7, #12]
    	    }

    		StateStatus(ctrl);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f001 fca5 	bl	8002708 <StateStatus>

    		ProcessCommands(ctrl);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 fa18 	bl	80011f4 <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	bf0c      	ite	eq
 8000dd0:	2301      	moveq	r3, #1
 8000dd2:	2300      	movne	r3, #0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	60fb      	str	r3, [r7, #12]

			NominalValueCheck(ctrl, Rx_Buffer);
 8000dd8:	4919      	ldr	r1, [pc, #100]	; (8000e40 <LoxPreFill+0xf4>)
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f000 ff00 	bl	8001be0 <NominalValueCheck>
    		// Increment state counter
    		ctrl->stateCounter++;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	609a      	str	r2, [r3, #8]
    		if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df2:	d11f      	bne.n	8000e34 <LoxPreFill+0xe8>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000dfa:	e01b      	b.n	8000e34 <LoxPreFill+0xe8>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, LOX_PRE_FILL, ctrl->currentState);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e02:	461a      	mov	r2, r3
 8000e04:	2102      	movs	r1, #2
 8000e06:	480f      	ldr	r0, [pc, #60]	; (8000e44 <LoxPreFill+0xf8>)
 8000e08:	f000 fef8 	bl	8001bfc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2, Tx_Buffer);
 8000e0c:	490d      	ldr	r1, [pc, #52]	; (8000e44 <LoxPreFill+0xf8>)
 8000e0e:	480e      	ldr	r0, [pc, #56]	; (8000e48 <LoxPreFill+0xfc>)
 8000e10:	f000 f84c 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000e14:	e00e      	b.n	8000e34 <LoxPreFill+0xe8>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e22:	461a      	mov	r2, r3
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <LoxPreFill+0xf8>)
 8000e26:	f000 ff63 	bl	8001cf0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8000e2a:	4906      	ldr	r1, [pc, #24]	; (8000e44 <LoxPreFill+0xf8>)
 8000e2c:	4806      	ldr	r0, [pc, #24]	; (8000e48 <LoxPreFill+0xfc>)
 8000e2e:	f000 f83d 	bl	8000eac <UART_SendMessage>
 8000e32:	e000      	b.n	8000e36 <LoxPreFill+0xea>
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000e34:	bf00      	nop
    }
	return success;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000318 	.word	0x20000318
 8000e44:	200001a0 	.word	0x200001a0
 8000e48:	20000384 	.word	0x20000384

08000e4c <main>:
#include "states_def.h"
#include "init.h"

int main(void)

{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b090      	sub	sp, #64	; 0x40
 8000e50:	af00      	add	r7, sp, #0
struct StateVars controls = {
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	223c      	movs	r2, #60	; 0x3c
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f004 ff93 	bl	8005d84 <memset>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e62:	230b      	movs	r3, #11
 8000e64:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
		TURN_OFF,	//lastState
		START_HANDLER, 	//currentState
		&controls	//this address.
		};

	HAL_Init();
 8000e6c:	f002 fd56 	bl	800391c <HAL_Init>

	SystemClock_Config();
 8000e70:	f7ff fd40 	bl	80008f4 <SystemClock_Config>
	MX_GPIO_Init();
 8000e74:	f7ff fdc0 	bl	80009f8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000e78:	f7ff fd8e 	bl	8000998 <MX_USART2_UART_Init>

	 HAL_UART_Receive_IT(&huart2,(uint8_t *)Rx_data, 1); // Asserts UART Interrupt every time 1 byte is received.
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4909      	ldr	r1, [pc, #36]	; (8000ea4 <main+0x58>)
 8000e80:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <main+0x5c>)
 8000e82:	f004 f867 	bl	8004f54 <HAL_UART_Receive_IT>


	while(controls.isStateMachineRunning)
 8000e86:	e005      	b.n	8000e94 <main+0x48>
	{

	  StateMachine(controls.isStateMachineRunning,controls.adr);
 8000e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 fa12 	bl	80022b8 <StateMachine>
	while(controls.isStateMachineRunning)
 8000e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1f6      	bne.n	8000e88 <main+0x3c>
 8000e9a:	2300      	movs	r3, #0
	}

}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3740      	adds	r7, #64	; 0x40
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000190 	.word	0x20000190
 8000ea8:	20000384 	.word	0x20000384

08000eac <UART_SendMessage>:

#include "messages.h"

// Function to send the messages over serial communication
void UART_SendMessage(UART_HandleTypeDef *huart, char* message)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	  int len = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
	  uint32_t success = FALSE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
	  sprintf(buffer, message);
 8000ebe:	6839      	ldr	r1, [r7, #0]
 8000ec0:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <UART_SendMessage+0x3c>)
 8000ec2:	f004 ff67 	bl	8005d94 <siprintf>
	  len =strlen(buffer);
 8000ec6:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <UART_SendMessage+0x3c>)
 8000ec8:	f7ff f982 	bl	80001d0 <strlen>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed8:	4903      	ldr	r1, [pc, #12]	; (8000ee8 <UART_SendMessage+0x3c>)
 8000eda:	4804      	ldr	r0, [pc, #16]	; (8000eec <UART_SendMessage+0x40>)
 8000edc:	f003 ffa6 	bl	8004e2c <HAL_UART_Transmit>
	  return success;
 8000ee0:	bf00      	nop
}
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000214 	.word	0x20000214
 8000eec:	20000384 	.word	0x20000384

08000ef0 <HAL_UART_RxCpltCallback>:

//Receiving the command
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	 uint32_t success = FALSE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
	 uint8_t i;
	    if (huart->Instance == USART2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a66      	ldr	r2, [pc, #408]	; (800109c <HAL_UART_RxCpltCallback+0x1ac>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	f040 80c5 	bne.w	8001092 <HAL_UART_RxCpltCallback+0x1a2>
	     {

	        if (Rx_indx==0) { for (i=0;i<100;i++) Rx_Buffer[i]=0; }   //clear Rx_Buffer before receiving new data
 8000f08:	4b65      	ldr	r3, [pc, #404]	; (80010a0 <HAL_UART_RxCpltCallback+0x1b0>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10c      	bne.n	8000f2a <HAL_UART_RxCpltCallback+0x3a>
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	e006      	b.n	8000f24 <HAL_UART_RxCpltCallback+0x34>
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	4a62      	ldr	r2, [pc, #392]	; (80010a4 <HAL_UART_RxCpltCallback+0x1b4>)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	54d1      	strb	r1, [r2, r3]
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	3301      	adds	r3, #1
 8000f22:	73fb      	strb	r3, [r7, #15]
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	2b63      	cmp	r3, #99	; 0x63
 8000f28:	d9f5      	bls.n	8000f16 <HAL_UART_RxCpltCallback+0x26>



	        if (Rx_data[0] != 13) //if received data different from ascii 13 (enter)
 8000f2a:	4b5f      	ldr	r3, [pc, #380]	; (80010a8 <HAL_UART_RxCpltCallback+0x1b8>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b0d      	cmp	r3, #13
 8000f30:	d00b      	beq.n	8000f4a <HAL_UART_RxCpltCallback+0x5a>
	            {
	            Rx_Buffer[Rx_indx++]=Rx_data[0];    //add data to Rx_Buffer
 8000f32:	4b5b      	ldr	r3, [pc, #364]	; (80010a0 <HAL_UART_RxCpltCallback+0x1b0>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	b2d1      	uxtb	r1, r2
 8000f3a:	4a59      	ldr	r2, [pc, #356]	; (80010a0 <HAL_UART_RxCpltCallback+0x1b0>)
 8000f3c:	7011      	strb	r1, [r2, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b59      	ldr	r3, [pc, #356]	; (80010a8 <HAL_UART_RxCpltCallback+0x1b8>)
 8000f42:	7819      	ldrb	r1, [r3, #0]
 8000f44:	4b57      	ldr	r3, [pc, #348]	; (80010a4 <HAL_UART_RxCpltCallback+0x1b4>)
 8000f46:	5499      	strb	r1, [r3, r2]
 8000f48:	e09e      	b.n	8001088 <HAL_UART_RxCpltCallback+0x198>
	            }
	        else            //if the receiving is complete
	            {
	                 Rx_indx=0;
 8000f4a:	4b55      	ldr	r3, [pc, #340]	; (80010a0 <HAL_UART_RxCpltCallback+0x1b0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
	                 retransition = TRUE;
 8000f50:	4b56      	ldr	r3, [pc, #344]	; (80010ac <HAL_UART_RxCpltCallback+0x1bc>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	601a      	str	r2, [r3, #0]
	                 inv_flag = TRUE;
 8000f56:	4b56      	ldr	r3, [pc, #344]	; (80010b0 <HAL_UART_RxCpltCallback+0x1c0>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]
	                 RxTxFlags |= 0x1;
 8000f5c:	4b55      	ldr	r3, [pc, #340]	; (80010b4 <HAL_UART_RxCpltCallback+0x1c4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	4a53      	ldr	r2, [pc, #332]	; (80010b4 <HAL_UART_RxCpltCallback+0x1c4>)
 8000f66:	6013      	str	r3, [r2, #0]
	                 success = TRUE;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
	                 hexadecimalToDecimal(Rx_Buffer);
 8000f6c:	484d      	ldr	r0, [pc, #308]	; (80010a4 <HAL_UART_RxCpltCallback+0x1b4>)
 8000f6e:	f000 f8eb 	bl	8001148 <hexadecimalToDecimal>
	                 // variable for the status command

	                 if(command ==state_status){
 8000f72:	4b51      	ldr	r3, [pc, #324]	; (80010b8 <HAL_UART_RxCpltCallback+0x1c8>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4b51      	ldr	r3, [pc, #324]	; (80010bc <HAL_UART_RxCpltCallback+0x1cc>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d103      	bne.n	8000f86 <HAL_UART_RxCpltCallback+0x96>
	                	 status= TRUE;
 8000f7e:	4b50      	ldr	r3, [pc, #320]	; (80010c0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	e080      	b.n	8001088 <HAL_UART_RxCpltCallback+0x198>
	                 }
	                 else if (command ==  power_off || stop || valve_check || lox_fill || lox_chill || pressurizing || lox_pre_fill || ignition ||start_handler \
 8000f86:	4b4c      	ldr	r3, [pc, #304]	; (80010b8 <HAL_UART_RxCpltCallback+0x1c8>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4b4e      	ldr	r3, [pc, #312]	; (80010c4 <HAL_UART_RxCpltCallback+0x1d4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d077      	beq.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000f92:	4b4d      	ldr	r3, [pc, #308]	; (80010c8 <HAL_UART_RxCpltCallback+0x1d8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d173      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000f9a:	4b4c      	ldr	r3, [pc, #304]	; (80010cc <HAL_UART_RxCpltCallback+0x1dc>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d16f      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000fa2:	4b4b      	ldr	r3, [pc, #300]	; (80010d0 <HAL_UART_RxCpltCallback+0x1e0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d16b      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000faa:	4b4a      	ldr	r3, [pc, #296]	; (80010d4 <HAL_UART_RxCpltCallback+0x1e4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d167      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000fb2:	4b49      	ldr	r3, [pc, #292]	; (80010d8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d163      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000fba:	4b48      	ldr	r3, [pc, #288]	; (80010dc <HAL_UART_RxCpltCallback+0x1ec>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d15f      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000fc2:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <HAL_UART_RxCpltCallback+0x1f0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d15b      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000fca:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <HAL_UART_RxCpltCallback+0x1f4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d157      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
	             			|| cycle_valves || cycle_voff || IGON || IGOFF || SOV1ON || SOV1OFF || SOV2ON || SOV2OFF || SOV3ON || SOV3OFF || SOV4ON || SOV4OFF || SOV5ON || SOV5OFF ||\
 8000fd2:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d153      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000fda:	4b44      	ldr	r3, [pc, #272]	; (80010ec <HAL_UART_RxCpltCallback+0x1fc>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d14f      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000fe2:	4b43      	ldr	r3, [pc, #268]	; (80010f0 <HAL_UART_RxCpltCallback+0x200>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d14b      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000fea:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <HAL_UART_RxCpltCallback+0x204>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d147      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000ff2:	4b41      	ldr	r3, [pc, #260]	; (80010f8 <HAL_UART_RxCpltCallback+0x208>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d143      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8000ffa:	4b40      	ldr	r3, [pc, #256]	; (80010fc <HAL_UART_RxCpltCallback+0x20c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d13f      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8001002:	4b3f      	ldr	r3, [pc, #252]	; (8001100 <HAL_UART_RxCpltCallback+0x210>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d13b      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 800100a:	4b3e      	ldr	r3, [pc, #248]	; (8001104 <HAL_UART_RxCpltCallback+0x214>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d137      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8001012:	4b3d      	ldr	r3, [pc, #244]	; (8001108 <HAL_UART_RxCpltCallback+0x218>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d133      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 800101a:	4b3c      	ldr	r3, [pc, #240]	; (800110c <HAL_UART_RxCpltCallback+0x21c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d12f      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8001022:	4b3b      	ldr	r3, [pc, #236]	; (8001110 <HAL_UART_RxCpltCallback+0x220>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d12b      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 800102a:	4b3a      	ldr	r3, [pc, #232]	; (8001114 <HAL_UART_RxCpltCallback+0x224>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d127      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8001032:	4b39      	ldr	r3, [pc, #228]	; (8001118 <HAL_UART_RxCpltCallback+0x228>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d123      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <HAL_UART_RxCpltCallback+0x22c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d11f      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8001042:	4b37      	ldr	r3, [pc, #220]	; (8001120 <HAL_UART_RxCpltCallback+0x230>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d11b      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
	             			 SOV6ON || SOV6OFF || SOV7ON || SOV7OFF || SOV8ON || SOV8OFF || SOV9ON || SOV9OFF ){
 800104a:	4b36      	ldr	r3, [pc, #216]	; (8001124 <HAL_UART_RxCpltCallback+0x234>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d117      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8001052:	4b35      	ldr	r3, [pc, #212]	; (8001128 <HAL_UART_RxCpltCallback+0x238>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d113      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 800105a:	4b34      	ldr	r3, [pc, #208]	; (800112c <HAL_UART_RxCpltCallback+0x23c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10f      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8001062:	4b33      	ldr	r3, [pc, #204]	; (8001130 <HAL_UART_RxCpltCallback+0x240>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10b      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 800106a:	4b32      	ldr	r3, [pc, #200]	; (8001134 <HAL_UART_RxCpltCallback+0x244>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d107      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 8001072:	4b31      	ldr	r3, [pc, #196]	; (8001138 <HAL_UART_RxCpltCallback+0x248>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d103      	bne.n	8001082 <HAL_UART_RxCpltCallback+0x192>
 800107a:	4b30      	ldr	r3, [pc, #192]	; (800113c <HAL_UART_RxCpltCallback+0x24c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d002      	beq.n	8001088 <HAL_UART_RxCpltCallback+0x198>

	                	 cmd_flag = TRUE;
 8001082:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <HAL_UART_RxCpltCallback+0x250>)
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]

	                 }

	            }
	        HAL_UART_Receive_IT(&huart2, Rx_data, 1);   //activate UART receive interrupt every time
 8001088:	2201      	movs	r2, #1
 800108a:	4907      	ldr	r1, [pc, #28]	; (80010a8 <HAL_UART_RxCpltCallback+0x1b8>)
 800108c:	482d      	ldr	r0, [pc, #180]	; (8001144 <HAL_UART_RxCpltCallback+0x254>)
 800108e:	f003 ff61 	bl	8004f54 <HAL_UART_Receive_IT>

	}// end of if  (huart->Instance == USART2)
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40004400 	.word	0x40004400
 80010a0:	20000180 	.word	0x20000180
 80010a4:	20000318 	.word	0x20000318
 80010a8:	20000190 	.word	0x20000190
 80010ac:	20000380 	.word	0x20000380
 80010b0:	2000020c 	.word	0x2000020c
 80010b4:	2000017c 	.word	0x2000017c
 80010b8:	20000194 	.word	0x20000194
 80010bc:	20000028 	.word	0x20000028
 80010c0:	20000404 	.word	0x20000404
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000004 	.word	0x20000004
 80010cc:	20000008 	.word	0x20000008
 80010d0:	2000000c 	.word	0x2000000c
 80010d4:	20000010 	.word	0x20000010
 80010d8:	20000018 	.word	0x20000018
 80010dc:	20000014 	.word	0x20000014
 80010e0:	20000020 	.word	0x20000020
 80010e4:	20000024 	.word	0x20000024
 80010e8:	20000030 	.word	0x20000030
 80010ec:	20000034 	.word	0x20000034
 80010f0:	20000038 	.word	0x20000038
 80010f4:	2000003c 	.word	0x2000003c
 80010f8:	20000040 	.word	0x20000040
 80010fc:	20000044 	.word	0x20000044
 8001100:	20000048 	.word	0x20000048
 8001104:	2000004c 	.word	0x2000004c
 8001108:	20000050 	.word	0x20000050
 800110c:	20000054 	.word	0x20000054
 8001110:	20000058 	.word	0x20000058
 8001114:	2000005c 	.word	0x2000005c
 8001118:	20000060 	.word	0x20000060
 800111c:	20000064 	.word	0x20000064
 8001120:	20000068 	.word	0x20000068
 8001124:	2000006c 	.word	0x2000006c
 8001128:	20000070 	.word	0x20000070
 800112c:	20000074 	.word	0x20000074
 8001130:	20000078 	.word	0x20000078
 8001134:	2000007c 	.word	0x2000007c
 8001138:	20000080 	.word	0x20000080
 800113c:	20000084 	.word	0x20000084
 8001140:	20000210 	.word	0x20000210
 8001144:	20000384 	.word	0x20000384

08001148 <hexadecimalToDecimal>:

//HEX to decimal
void hexadecimalToDecimal(char* hexVal)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	uint32_t len = strlen(hexVal);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f83d 	bl	80001d0 <strlen>
 8001156:	60b8      	str	r0, [r7, #8]

    // Initializing base value to 1 ( 16^0, 16^1, 16^2, etc )
     uint32_t base = 1;
 8001158:	2301      	movs	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
     uint32_t dec_val = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]

    // Extracting characters as digits from last character
    for (int i=len-1; i>=0; i--)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	3b01      	subs	r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	e039      	b.n	80011dc <hexadecimalToDecimal+0x94>
    {
        // if ASCII char is between (0-9)
        if (hexVal[i]>='0' && hexVal[i]<='9')
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b2f      	cmp	r3, #47	; 0x2f
 8001172:	d915      	bls.n	80011a0 <hexadecimalToDecimal+0x58>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b39      	cmp	r3, #57	; 0x39
 800117e:	d80f      	bhi.n	80011a0 <hexadecimalToDecimal+0x58>
        {
            dec_val += (hexVal[i] - 48)*base;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	3b30      	subs	r3, #48	; 0x30
 800118a:	461a      	mov	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fb03 f302 	mul.w	r3, r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4413      	add	r3, r2
 8001196:	613b      	str	r3, [r7, #16]

            // incrementing the base by power
            base = base * 16;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	e01a      	b.n	80011d6 <hexadecimalToDecimal+0x8e>
        }

        // if ASCII char is between(A-F)
        else if (hexVal[i]>='A' && hexVal[i]<='F')
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b40      	cmp	r3, #64	; 0x40
 80011aa:	d914      	bls.n	80011d6 <hexadecimalToDecimal+0x8e>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b46      	cmp	r3, #70	; 0x46
 80011b6:	d80e      	bhi.n	80011d6 <hexadecimalToDecimal+0x8e>
        {
            dec_val += (hexVal[i] - 55)*base;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	3b37      	subs	r3, #55	; 0x37
 80011c2:	461a      	mov	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fb03 f302 	mul.w	r3, r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4413      	add	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]

            // incrementing the base by power
            base = base*16;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	617b      	str	r3, [r7, #20]
    for (int i=len-1; i>=0; i--)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3b01      	subs	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	dac2      	bge.n	8001168 <hexadecimalToDecimal+0x20>
        }
    }
    command = dec_val;
 80011e2:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <hexadecimalToDecimal+0xa8>)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000194 	.word	0x20000194

080011f4 <ProcessCommands>:

//Function to process the command messages
uint32_t ProcessCommands(struct StateVars * ctrl)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
	// LOX_PRE_FILL command
	if((ctrl->currentState == START_HANDLER) && command == lox_pre_fill )
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001206:	2b00      	cmp	r3, #0
 8001208:	d112      	bne.n	8001230 <ProcessCommands+0x3c>
 800120a:	4ba0      	ldr	r3, [pc, #640]	; (800148c <ProcessCommands+0x298>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4ba0      	ldr	r3, [pc, #640]	; (8001490 <ProcessCommands+0x29c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d10c      	bne.n	8001230 <ProcessCommands+0x3c>
	{
		ctrl ->currentState = LOX_PRE_FILL;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2202      	movs	r2, #2
 800121a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 800121e:	2301      	movs	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
		RxTxFlags &= !RX_DATA_READY;
 8001222:	4b9c      	ldr	r3, [pc, #624]	; (8001494 <ProcessCommands+0x2a0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4b9b      	ldr	r3, [pc, #620]	; (8001494 <ProcessCommands+0x2a0>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	f000 bc9d 	b.w	8001b6a <ProcessCommands+0x976>
	}
    // TURN_OFF command
	else if((command == power_off) && (ctrl->currentState== VALVE_CHECK || \
 8001230:	4b96      	ldr	r3, [pc, #600]	; (800148c <ProcessCommands+0x298>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b98      	ldr	r3, [pc, #608]	; (8001498 <ProcessCommands+0x2a4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d116      	bne.n	800126a <ProcessCommands+0x76>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001242:	2b01      	cmp	r3, #1
 8001244:	d004      	beq.n	8001250 <ProcessCommands+0x5c>
			 ctrl->currentState == SAFETY))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == power_off) && (ctrl->currentState== VALVE_CHECK || \
 800124c:	2b05      	cmp	r3, #5
 800124e:	d10c      	bne.n	800126a <ProcessCommands+0x76>
	{
		ctrl ->currentState = TURN_OFF;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	220b      	movs	r2, #11
 8001254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 8001258:	2301      	movs	r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
		RxTxFlags &= !RX_DATA_READY;
 800125c:	4b8d      	ldr	r3, [pc, #564]	; (8001494 <ProcessCommands+0x2a0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4b8c      	ldr	r3, [pc, #560]	; (8001494 <ProcessCommands+0x2a0>)
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	f000 bc80 	b.w	8001b6a <ProcessCommands+0x976>
	}
    // STOP command
	else if((command == stop) && ( ctrl->currentState== LOX_PRE_FILL || \
 800126a:	4b88      	ldr	r3, [pc, #544]	; (800148c <ProcessCommands+0x298>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b8b      	ldr	r3, [pc, #556]	; (800149c <ProcessCommands+0x2a8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d120      	bne.n	80012b8 <ProcessCommands+0xc4>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800127c:	2b02      	cmp	r3, #2
 800127e:	d00e      	beq.n	800129e <ProcessCommands+0xaa>
			  ctrl->currentState == LOX_CHILL|| \
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == stop) && ( ctrl->currentState== LOX_PRE_FILL || \
 8001286:	2b04      	cmp	r3, #4
 8001288:	d009      	beq.n	800129e <ProcessCommands+0xaa>
			  ctrl->currentState == LOX_FILL 	|| \
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
			  ctrl->currentState == LOX_CHILL|| \
 8001290:	2b03      	cmp	r3, #3
 8001292:	d004      	beq.n	800129e <ProcessCommands+0xaa>
			  /*ctrl->currentState == VALVE_CHECK|| \*/ //dont want valve_check to end up in safety
			  ctrl->currentState == START_HANDLER) )
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
			  ctrl->currentState == LOX_FILL 	|| \
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10c      	bne.n	80012b8 <ProcessCommands+0xc4>
	{
		ctrl->currentState = SAFETY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2205      	movs	r2, #5
 80012a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 80012a6:	2301      	movs	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 80012aa:	4b7a      	ldr	r3, [pc, #488]	; (8001494 <ProcessCommands+0x2a0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4b79      	ldr	r3, [pc, #484]	; (8001494 <ProcessCommands+0x2a0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	f000 bc59 	b.w	8001b6a <ProcessCommands+0x976>
	}

	// LOX_FILL command
	else if(( ctrl->currentState == LOX_PRE_FILL) && (command == lox_fill))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d112      	bne.n	80012e8 <ProcessCommands+0xf4>
 80012c2:	4b72      	ldr	r3, [pc, #456]	; (800148c <ProcessCommands+0x298>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b76      	ldr	r3, [pc, #472]	; (80014a0 <ProcessCommands+0x2ac>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d10c      	bne.n	80012e8 <ProcessCommands+0xf4>
	{
		ctrl->currentState = LOX_FILL;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2203      	movs	r2, #3
 80012d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 80012d6:	2301      	movs	r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 80012da:	4b6e      	ldr	r3, [pc, #440]	; (8001494 <ProcessCommands+0x2a0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4b6d      	ldr	r3, [pc, #436]	; (8001494 <ProcessCommands+0x2a0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	f000 bc41 	b.w	8001b6a <ProcessCommands+0x976>
	}
    // LOX_FILL command
	else if((ctrl->currentState == LOX_FILL) && (command == lox_chill))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d112      	bne.n	8001318 <ProcessCommands+0x124>
 80012f2:	4b66      	ldr	r3, [pc, #408]	; (800148c <ProcessCommands+0x298>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b6b      	ldr	r3, [pc, #428]	; (80014a4 <ProcessCommands+0x2b0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d10c      	bne.n	8001318 <ProcessCommands+0x124>
	{
		ctrl->currentState = LOX_CHILL;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2204      	movs	r2, #4
 8001302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 8001306:	2301      	movs	r3, #1
 8001308:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 800130a:	4b62      	ldr	r3, [pc, #392]	; (8001494 <ProcessCommands+0x2a0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4b61      	ldr	r3, [pc, #388]	; (8001494 <ProcessCommands+0x2a0>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	f000 bc29 	b.w	8001b6a <ProcessCommands+0x976>
	}
    // LOX_CHILL command
	else if(( ctrl->currentState == LOX_CHILL) && (command == safety))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800131e:	2b04      	cmp	r3, #4
 8001320:	d112      	bne.n	8001348 <ProcessCommands+0x154>
 8001322:	4b5a      	ldr	r3, [pc, #360]	; (800148c <ProcessCommands+0x298>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b60      	ldr	r3, [pc, #384]	; (80014a8 <ProcessCommands+0x2b4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d10c      	bne.n	8001348 <ProcessCommands+0x154>
	{
		ctrl->currentState = SAFETY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2205      	movs	r2, #5
 8001332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 8001336:	2301      	movs	r3, #1
 8001338:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 800133a:	4b56      	ldr	r3, [pc, #344]	; (8001494 <ProcessCommands+0x2a0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4b55      	ldr	r3, [pc, #340]	; (8001494 <ProcessCommands+0x2a0>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	f000 bc11 	b.w	8001b6a <ProcessCommands+0x976>
	}
    // VALVE_CHECK command
	else if(( ctrl->currentState == START_HANDLER ) && (command == valve_check))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800134e:	2b00      	cmp	r3, #0
 8001350:	d111      	bne.n	8001376 <ProcessCommands+0x182>
 8001352:	4b4e      	ldr	r3, [pc, #312]	; (800148c <ProcessCommands+0x298>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b55      	ldr	r3, [pc, #340]	; (80014ac <ProcessCommands+0x2b8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	d10b      	bne.n	8001376 <ProcessCommands+0x182>
	{
		ctrl->currentState = VALVE_CHECK;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 8001366:	2301      	movs	r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 800136a:	4b4a      	ldr	r3, [pc, #296]	; (8001494 <ProcessCommands+0x2a0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4b49      	ldr	r3, [pc, #292]	; (8001494 <ProcessCommands+0x2a0>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e3f9      	b.n	8001b6a <ProcessCommands+0x976>
	}

    // PRESSURIZE command
	else if((ctrl->currentState == SAFETY) && (command == pressurizing))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800137c:	2b05      	cmp	r3, #5
 800137e:	d111      	bne.n	80013a4 <ProcessCommands+0x1b0>
 8001380:	4b42      	ldr	r3, [pc, #264]	; (800148c <ProcessCommands+0x298>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b4a      	ldr	r3, [pc, #296]	; (80014b0 <ProcessCommands+0x2bc>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d10b      	bne.n	80013a4 <ProcessCommands+0x1b0>
	{
		ctrl->currentState = PRESSURIZE;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2206      	movs	r2, #6
 8001390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 8001394:	2301      	movs	r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 8001398:	4b3e      	ldr	r3, [pc, #248]	; (8001494 <ProcessCommands+0x2a0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <ProcessCommands+0x2a0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e3e2      	b.n	8001b6a <ProcessCommands+0x976>
	}
    // IGNITION command
	else if((ctrl->currentState == PRESSURIZE) && (command == ignition))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d111      	bne.n	80013d2 <ProcessCommands+0x1de>
 80013ae:	4b37      	ldr	r3, [pc, #220]	; (800148c <ProcessCommands+0x298>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <ProcessCommands+0x2c0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d10b      	bne.n	80013d2 <ProcessCommands+0x1de>
	{
		ctrl->currentState = IGNITION; //START of the FSM
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2207      	movs	r2, #7
 80013be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 80013c2:	2301      	movs	r3, #1
 80013c4:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 80013c6:	4b33      	ldr	r3, [pc, #204]	; (8001494 <ProcessCommands+0x2a0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4b32      	ldr	r3, [pc, #200]	; (8001494 <ProcessCommands+0x2a0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	e3cb      	b.n	8001b6a <ProcessCommands+0x976>
	}


	//State status
	else if((command ==state_status) && (
 80013d2:	4b2e      	ldr	r3, [pc, #184]	; (800148c <ProcessCommands+0x298>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b38      	ldr	r3, [pc, #224]	; (80014b8 <ProcessCommands+0x2c4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d132      	bne.n	8001444 <ProcessCommands+0x250>
				  ctrl->currentState == START_HANDLER || \
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command ==state_status) && (
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d022      	beq.n	800142e <ProcessCommands+0x23a>
				  ctrl->currentState == LOX_PRE_FILL || \
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == START_HANDLER || \
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d01d      	beq.n	800142e <ProcessCommands+0x23a>
				  ctrl->currentState == LOX_CHILL|| \
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == LOX_PRE_FILL || \
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d018      	beq.n	800142e <ProcessCommands+0x23a>
				  ctrl->currentState == LOX_FILL 	|| \
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == LOX_CHILL|| \
 8001402:	2b03      	cmp	r3, #3
 8001404:	d013      	beq.n	800142e <ProcessCommands+0x23a>
				  ctrl->currentState == VALVE_CHECK|| \
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == LOX_FILL 	|| \
 800140c:	2b01      	cmp	r3, #1
 800140e:	d00e      	beq.n	800142e <ProcessCommands+0x23a>
				  ctrl->currentState == PRESSURIZE  ||   \
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == VALVE_CHECK|| \
 8001416:	2b06      	cmp	r3, #6
 8001418:	d009      	beq.n	800142e <ProcessCommands+0x23a>
				  ctrl->currentState == TURN_OFF || \
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == PRESSURIZE  ||   \
 8001420:	2b0b      	cmp	r3, #11
 8001422:	d004      	beq.n	800142e <ProcessCommands+0x23a>
				  ctrl->currentState == SAFETY \
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == TURN_OFF || \
 800142a:	2b05      	cmp	r3, #5
 800142c:	d10a      	bne.n	8001444 <ProcessCommands+0x250>
				  ))
		{

		    StateStatus(ctrl);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f001 f96a 	bl	8002708 <StateStatus>
			success = TRUE;
 8001434:	2301      	movs	r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
			// Clear data read flag
			RxTxFlags &= !RX_DATA_READY;
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <ProcessCommands+0x2a0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <ProcessCommands+0x2a0>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	e392      	b.n	8001b6a <ProcessCommands+0x976>
		}
	// Handling invalid transitions
	else if ((command == stop) && (ctrl->currentState==VALVE_CHECK || ctrl->currentState == START_HANDLER)){
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <ProcessCommands+0x298>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <ProcessCommands+0x2a8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d13b      	bne.n	80014c8 <ProcessCommands+0x2d4>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001456:	2b01      	cmp	r3, #1
 8001458:	d004      	beq.n	8001464 <ProcessCommands+0x270>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001460:	2b00      	cmp	r3, #0
 8001462:	d131      	bne.n	80014c8 <ProcessCommands+0x2d4>
					if (cmd_flag)
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <ProcessCommands+0x2c8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d006      	beq.n	800147a <ProcessCommands+0x286>
				 	  {
				 	 	  UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 800146c:	4914      	ldr	r1, [pc, #80]	; (80014c0 <ProcessCommands+0x2cc>)
 800146e:	4815      	ldr	r0, [pc, #84]	; (80014c4 <ProcessCommands+0x2d0>)
 8001470:	f7ff fd1c 	bl	8000eac <UART_SendMessage>
				 	 	  cmd_flag = FALSE;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <ProcessCommands+0x2c8>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
				 	 }
						success = TRUE;
 800147a:	2301      	movs	r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
						// Clear data read flag
						RxTxFlags &= !RX_DATA_READY;
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <ProcessCommands+0x2a0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <ProcessCommands+0x2a0>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e36f      	b.n	8001b6a <ProcessCommands+0x976>
 800148a:	bf00      	nop
 800148c:	20000194 	.word	0x20000194
 8001490:	20000014 	.word	0x20000014
 8001494:	2000017c 	.word	0x2000017c
 8001498:	20000000 	.word	0x20000000
 800149c:	20000004 	.word	0x20000004
 80014a0:	2000000c 	.word	0x2000000c
 80014a4:	20000010 	.word	0x20000010
 80014a8:	2000001c 	.word	0x2000001c
 80014ac:	20000008 	.word	0x20000008
 80014b0:	20000018 	.word	0x20000018
 80014b4:	20000020 	.word	0x20000020
 80014b8:	20000028 	.word	0x20000028
 80014bc:	20000210 	.word	0x20000210
 80014c0:	080065e8 	.word	0x080065e8
 80014c4:	20000384 	.word	0x20000384
		}
	else if((command == lox_fill) && (
 80014c8:	4ba2      	ldr	r3, [pc, #648]	; (8001754 <ProcessCommands+0x560>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4ba2      	ldr	r3, [pc, #648]	; (8001758 <ProcessCommands+0x564>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d130      	bne.n	8001536 <ProcessCommands+0x342>
					  ctrl->currentState == START_HANDLER|| \
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == lox_fill) && (
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d018      	beq.n	8001510 <ProcessCommands+0x31c>
					  ctrl->currentState == LOX_CHILL	|| \
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == START_HANDLER|| \
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d013      	beq.n	8001510 <ProcessCommands+0x31c>
					  ctrl->currentState == VALVE_CHECK|| \
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == LOX_CHILL	|| \
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d00e      	beq.n	8001510 <ProcessCommands+0x31c>
					  ctrl->currentState == PRESSURIZE  ||   \
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == VALVE_CHECK|| \
 80014f8:	2b06      	cmp	r3, #6
 80014fa:	d009      	beq.n	8001510 <ProcessCommands+0x31c>
					  ctrl->currentState == TURN_OFF || \
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == PRESSURIZE  ||   \
 8001502:	2b0b      	cmp	r3, #11
 8001504:	d004      	beq.n	8001510 <ProcessCommands+0x31c>
					  ctrl->currentState == SAFETY \
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == TURN_OFF || \
 800150c:	2b05      	cmp	r3, #5
 800150e:	d112      	bne.n	8001536 <ProcessCommands+0x342>
					  )){

					if (cmd_flag)
 8001510:	4b92      	ldr	r3, [pc, #584]	; (800175c <ProcessCommands+0x568>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <ProcessCommands+0x332>
		 	 	 	 	 {
		 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 8001518:	4991      	ldr	r1, [pc, #580]	; (8001760 <ProcessCommands+0x56c>)
 800151a:	4892      	ldr	r0, [pc, #584]	; (8001764 <ProcessCommands+0x570>)
 800151c:	f7ff fcc6 	bl	8000eac <UART_SendMessage>
		 	 	 		 	cmd_flag = FALSE;
 8001520:	4b8e      	ldr	r3, [pc, #568]	; (800175c <ProcessCommands+0x568>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
		 	 	 	 	 }
				success = TRUE;
 8001526:	2301      	movs	r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
				// Clear data read flag
				RxTxFlags &= !RX_DATA_READY;
 800152a:	4b8f      	ldr	r3, [pc, #572]	; (8001768 <ProcessCommands+0x574>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4b8e      	ldr	r3, [pc, #568]	; (8001768 <ProcessCommands+0x574>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	e319      	b.n	8001b6a <ProcessCommands+0x976>
			}
	else if((command == lox_chill) && (
 8001536:	4b87      	ldr	r3, [pc, #540]	; (8001754 <ProcessCommands+0x560>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b8c      	ldr	r3, [pc, #560]	; (800176c <ProcessCommands+0x578>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d130      	bne.n	80015a4 <ProcessCommands+0x3b0>
						  ctrl->currentState == START_HANDLER|| \
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == lox_chill) && (
 8001548:	2b00      	cmp	r3, #0
 800154a:	d018      	beq.n	800157e <ProcessCommands+0x38a>
						  ctrl->currentState == LOX_PRE_FILL	|| \
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == START_HANDLER|| \
 8001552:	2b02      	cmp	r3, #2
 8001554:	d013      	beq.n	800157e <ProcessCommands+0x38a>
						  ctrl->currentState == VALVE_CHECK|| \
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_PRE_FILL	|| \
 800155c:	2b01      	cmp	r3, #1
 800155e:	d00e      	beq.n	800157e <ProcessCommands+0x38a>
						  ctrl->currentState == PRESSURIZE  ||   \
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == VALVE_CHECK|| \
 8001566:	2b06      	cmp	r3, #6
 8001568:	d009      	beq.n	800157e <ProcessCommands+0x38a>
						  ctrl->currentState == TURN_OFF || \
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == PRESSURIZE  ||   \
 8001570:	2b0b      	cmp	r3, #11
 8001572:	d004      	beq.n	800157e <ProcessCommands+0x38a>
						  ctrl->currentState == SAFETY \
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == TURN_OFF || \
 800157a:	2b05      	cmp	r3, #5
 800157c:	d112      	bne.n	80015a4 <ProcessCommands+0x3b0>
						  ))
				{

							if (cmd_flag)
 800157e:	4b77      	ldr	r3, [pc, #476]	; (800175c <ProcessCommands+0x568>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d006      	beq.n	8001594 <ProcessCommands+0x3a0>
				 	 	 	 	 {
				 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 8001586:	4976      	ldr	r1, [pc, #472]	; (8001760 <ProcessCommands+0x56c>)
 8001588:	4876      	ldr	r0, [pc, #472]	; (8001764 <ProcessCommands+0x570>)
 800158a:	f7ff fc8f 	bl	8000eac <UART_SendMessage>
				 	 	 		 	cmd_flag = FALSE;
 800158e:	4b73      	ldr	r3, [pc, #460]	; (800175c <ProcessCommands+0x568>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
				 	 	 	 	 }
					success = TRUE;
 8001594:	2301      	movs	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
					// Clear data read flag
					RxTxFlags &= !RX_DATA_READY;
 8001598:	4b73      	ldr	r3, [pc, #460]	; (8001768 <ProcessCommands+0x574>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4b72      	ldr	r3, [pc, #456]	; (8001768 <ProcessCommands+0x574>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e2e2      	b.n	8001b6a <ProcessCommands+0x976>
				}
	else if((command == safety) && (
 80015a4:	4b6b      	ldr	r3, [pc, #428]	; (8001754 <ProcessCommands+0x560>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b71      	ldr	r3, [pc, #452]	; (8001770 <ProcessCommands+0x57c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d130      	bne.n	8001612 <ProcessCommands+0x41e>
						  ctrl->currentState == START_HANDLER|| \
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == safety) && (
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d018      	beq.n	80015ec <ProcessCommands+0x3f8>
						  ctrl->currentState == LOX_FILL	|| \
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == START_HANDLER|| \
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d013      	beq.n	80015ec <ProcessCommands+0x3f8>
						  ctrl->currentState == VALVE_CHECK|| \
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_FILL	|| \
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d00e      	beq.n	80015ec <ProcessCommands+0x3f8>
						  ctrl->currentState == PRESSURIZE  ||   \
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == VALVE_CHECK|| \
 80015d4:	2b06      	cmp	r3, #6
 80015d6:	d009      	beq.n	80015ec <ProcessCommands+0x3f8>
						  ctrl->currentState == TURN_OFF ||\
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == PRESSURIZE  ||   \
 80015de:	2b0b      	cmp	r3, #11
 80015e0:	d004      	beq.n	80015ec <ProcessCommands+0x3f8>
						  ctrl->currentState == LOX_PRE_FILL \
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == TURN_OFF ||\
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d112      	bne.n	8001612 <ProcessCommands+0x41e>
						  ))
				{
						if (cmd_flag)
 80015ec:	4b5b      	ldr	r3, [pc, #364]	; (800175c <ProcessCommands+0x568>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <ProcessCommands+0x40e>
				 	 	 	 	 {
				 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 80015f4:	495a      	ldr	r1, [pc, #360]	; (8001760 <ProcessCommands+0x56c>)
 80015f6:	485b      	ldr	r0, [pc, #364]	; (8001764 <ProcessCommands+0x570>)
 80015f8:	f7ff fc58 	bl	8000eac <UART_SendMessage>
				 	 	 		 	cmd_flag = FALSE;
 80015fc:	4b57      	ldr	r3, [pc, #348]	; (800175c <ProcessCommands+0x568>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
				 	 	 	 	 }
					success = TRUE;
 8001602:	2301      	movs	r3, #1
 8001604:	60fb      	str	r3, [r7, #12]
					// Clear data read flag
					RxTxFlags &= !RX_DATA_READY;
 8001606:	4b58      	ldr	r3, [pc, #352]	; (8001768 <ProcessCommands+0x574>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4b57      	ldr	r3, [pc, #348]	; (8001768 <ProcessCommands+0x574>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	e2ab      	b.n	8001b6a <ProcessCommands+0x976>
				}
	else if((command == valve_check) && (
 8001612:	4b50      	ldr	r3, [pc, #320]	; (8001754 <ProcessCommands+0x560>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b57      	ldr	r3, [pc, #348]	; (8001774 <ProcessCommands+0x580>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d130      	bne.n	8001680 <ProcessCommands+0x48c>
						  ctrl->currentState == LOX_PRE_FILL|| \
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == valve_check) && (
 8001624:	2b02      	cmp	r3, #2
 8001626:	d018      	beq.n	800165a <ProcessCommands+0x466>
						  ctrl->currentState == LOX_CHILL	|| \
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_PRE_FILL|| \
 800162e:	2b04      	cmp	r3, #4
 8001630:	d013      	beq.n	800165a <ProcessCommands+0x466>
						  ctrl->currentState == LOX_FILL|| \
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_CHILL	|| \
 8001638:	2b03      	cmp	r3, #3
 800163a:	d00e      	beq.n	800165a <ProcessCommands+0x466>
						  ctrl->currentState == PRESSURIZE  ||   \
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_FILL|| \
 8001642:	2b06      	cmp	r3, #6
 8001644:	d009      	beq.n	800165a <ProcessCommands+0x466>
						  ctrl->currentState == TURN_OFF || \
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == PRESSURIZE  ||   \
 800164c:	2b0b      	cmp	r3, #11
 800164e:	d004      	beq.n	800165a <ProcessCommands+0x466>
						  ctrl->currentState == SAFETY \
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == TURN_OFF || \
 8001656:	2b05      	cmp	r3, #5
 8001658:	d112      	bne.n	8001680 <ProcessCommands+0x48c>
						  ))
				{
						if (cmd_flag)
 800165a:	4b40      	ldr	r3, [pc, #256]	; (800175c <ProcessCommands+0x568>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d006      	beq.n	8001670 <ProcessCommands+0x47c>
				 	 	 	 	 {
				 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 8001662:	493f      	ldr	r1, [pc, #252]	; (8001760 <ProcessCommands+0x56c>)
 8001664:	483f      	ldr	r0, [pc, #252]	; (8001764 <ProcessCommands+0x570>)
 8001666:	f7ff fc21 	bl	8000eac <UART_SendMessage>
				 	 	 		 	cmd_flag = FALSE;
 800166a:	4b3c      	ldr	r3, [pc, #240]	; (800175c <ProcessCommands+0x568>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
				 	 	 	 	 }
					success = TRUE;
 8001670:	2301      	movs	r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
					// Clear data read flag
					RxTxFlags &= !RX_DATA_READY;
 8001674:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <ProcessCommands+0x574>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <ProcessCommands+0x574>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e274      	b.n	8001b6a <ProcessCommands+0x976>

				}
	else if((command == lox_pre_fill) && (
 8001680:	4b34      	ldr	r3, [pc, #208]	; (8001754 <ProcessCommands+0x560>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b3c      	ldr	r3, [pc, #240]	; (8001778 <ProcessCommands+0x584>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d130      	bne.n	80016ee <ProcessCommands+0x4fa>
							  ctrl->currentState == LOX_CHILL || \
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == lox_pre_fill) && (
 8001692:	2b04      	cmp	r3, #4
 8001694:	d018      	beq.n	80016c8 <ProcessCommands+0x4d4>
							  ctrl->currentState == SAFETY|| \
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == LOX_CHILL || \
 800169c:	2b05      	cmp	r3, #5
 800169e:	d013      	beq.n	80016c8 <ProcessCommands+0x4d4>
							  ctrl->currentState == LOX_FILL	|| \
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == SAFETY|| \
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d00e      	beq.n	80016c8 <ProcessCommands+0x4d4>
							  ctrl->currentState == VALVE_CHECK|| \
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == LOX_FILL	|| \
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d009      	beq.n	80016c8 <ProcessCommands+0x4d4>
							  ctrl->currentState == PRESSURIZE  ||   \
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == VALVE_CHECK|| \
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d004      	beq.n	80016c8 <ProcessCommands+0x4d4>
							  ctrl->currentState == TURN_OFF ))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == PRESSURIZE  ||   \
 80016c4:	2b0b      	cmp	r3, #11
 80016c6:	d112      	bne.n	80016ee <ProcessCommands+0x4fa>
					{
							if (cmd_flag)
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <ProcessCommands+0x568>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d006      	beq.n	80016de <ProcessCommands+0x4ea>
					 	 	 	 	 {
					 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 80016d0:	4923      	ldr	r1, [pc, #140]	; (8001760 <ProcessCommands+0x56c>)
 80016d2:	4824      	ldr	r0, [pc, #144]	; (8001764 <ProcessCommands+0x570>)
 80016d4:	f7ff fbea 	bl	8000eac <UART_SendMessage>
					 	 	 		 	cmd_flag = FALSE;
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <ProcessCommands+0x568>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
					 	 	 	 	 }
						success = TRUE;
 80016de:	2301      	movs	r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
						// Clear data read flag
						RxTxFlags &= !RX_DATA_READY;
 80016e2:	4b21      	ldr	r3, [pc, #132]	; (8001768 <ProcessCommands+0x574>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <ProcessCommands+0x574>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	e23d      	b.n	8001b6a <ProcessCommands+0x976>
					}
	else if((command == pressurizing) && (
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <ProcessCommands+0x560>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4b22      	ldr	r3, [pc, #136]	; (800177c <ProcessCommands+0x588>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d142      	bne.n	8001780 <ProcessCommands+0x58c>
								  ctrl->currentState == LOX_PRE_FILL || \
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == pressurizing) && (
 8001700:	2b02      	cmp	r3, #2
 8001702:	d013      	beq.n	800172c <ProcessCommands+0x538>
								  ctrl->currentState == LOX_CHILL || \
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == LOX_PRE_FILL || \
 800170a:	2b04      	cmp	r3, #4
 800170c:	d00e      	beq.n	800172c <ProcessCommands+0x538>
								  ctrl->currentState == LOX_FILL	|| \
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == LOX_CHILL || \
 8001714:	2b03      	cmp	r3, #3
 8001716:	d009      	beq.n	800172c <ProcessCommands+0x538>
								  ctrl->currentState == VALVE_CHECK|| \
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == LOX_FILL	|| \
 800171e:	2b01      	cmp	r3, #1
 8001720:	d004      	beq.n	800172c <ProcessCommands+0x538>
								  ctrl->currentState == TURN_OFF ))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == VALVE_CHECK|| \
 8001728:	2b0b      	cmp	r3, #11
 800172a:	d129      	bne.n	8001780 <ProcessCommands+0x58c>
						{
								if (cmd_flag)
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <ProcessCommands+0x568>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <ProcessCommands+0x54e>
						 	 	 	 	 {
						 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 8001734:	490a      	ldr	r1, [pc, #40]	; (8001760 <ProcessCommands+0x56c>)
 8001736:	480b      	ldr	r0, [pc, #44]	; (8001764 <ProcessCommands+0x570>)
 8001738:	f7ff fbb8 	bl	8000eac <UART_SendMessage>
						 	 	 		 	cmd_flag = FALSE;
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <ProcessCommands+0x568>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
						 	 	 	 	 }
							success = TRUE;
 8001742:	2301      	movs	r3, #1
 8001744:	60fb      	str	r3, [r7, #12]
							// Clear data read flag
							RxTxFlags &= !RX_DATA_READY;
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <ProcessCommands+0x574>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4b07      	ldr	r3, [pc, #28]	; (8001768 <ProcessCommands+0x574>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e20b      	b.n	8001b6a <ProcessCommands+0x976>
 8001752:	bf00      	nop
 8001754:	20000194 	.word	0x20000194
 8001758:	2000000c 	.word	0x2000000c
 800175c:	20000210 	.word	0x20000210
 8001760:	080065e8 	.word	0x080065e8
 8001764:	20000384 	.word	0x20000384
 8001768:	2000017c 	.word	0x2000017c
 800176c:	20000010 	.word	0x20000010
 8001770:	2000001c 	.word	0x2000001c
 8001774:	20000008 	.word	0x20000008
 8001778:	20000014 	.word	0x20000014
 800177c:	20000018 	.word	0x20000018
						}

	//Handle trying to transition to the same state
	else if ((command == lox_pre_fill && ctrl->currentState == LOX_PRE_FILL)||\
 8001780:	4b84      	ldr	r3, [pc, #528]	; (8001994 <ProcessCommands+0x7a0>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b84      	ldr	r3, [pc, #528]	; (8001998 <ProcessCommands+0x7a4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d104      	bne.n	8001796 <ProcessCommands+0x5a2>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001792:	2b02      	cmp	r3, #2
 8001794:	d04c      	beq.n	8001830 <ProcessCommands+0x63c>
			 (command == lox_fill && ctrl->currentState == LOX_FILL)|| \
 8001796:	4b7f      	ldr	r3, [pc, #508]	; (8001994 <ProcessCommands+0x7a0>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b80      	ldr	r3, [pc, #512]	; (800199c <ProcessCommands+0x7a8>)
 800179c:	681b      	ldr	r3, [r3, #0]
	else if ((command == lox_pre_fill && ctrl->currentState == LOX_PRE_FILL)||\
 800179e:	429a      	cmp	r2, r3
 80017a0:	d104      	bne.n	80017ac <ProcessCommands+0x5b8>
			 (command == lox_fill && ctrl->currentState == LOX_FILL)|| \
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d041      	beq.n	8001830 <ProcessCommands+0x63c>
			 (command == lox_chill && ctrl->currentState == LOX_CHILL)||\
 80017ac:	4b79      	ldr	r3, [pc, #484]	; (8001994 <ProcessCommands+0x7a0>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b7b      	ldr	r3, [pc, #492]	; (80019a0 <ProcessCommands+0x7ac>)
 80017b2:	681b      	ldr	r3, [r3, #0]
			 (command == lox_fill && ctrl->currentState == LOX_FILL)|| \
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d104      	bne.n	80017c2 <ProcessCommands+0x5ce>
			 (command == lox_chill && ctrl->currentState == LOX_CHILL)||\
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d036      	beq.n	8001830 <ProcessCommands+0x63c>
			 (command == safety && ctrl->currentState == SAFETY)||\
 80017c2:	4b74      	ldr	r3, [pc, #464]	; (8001994 <ProcessCommands+0x7a0>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b77      	ldr	r3, [pc, #476]	; (80019a4 <ProcessCommands+0x7b0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
			 (command == lox_chill && ctrl->currentState == LOX_CHILL)||\
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d104      	bne.n	80017d8 <ProcessCommands+0x5e4>
			 (command == safety && ctrl->currentState == SAFETY)||\
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017d4:	2b05      	cmp	r3, #5
 80017d6:	d02b      	beq.n	8001830 <ProcessCommands+0x63c>
			 (command == valve_check && ctrl->currentState == VALVE_CHECK)||\
 80017d8:	4b6e      	ldr	r3, [pc, #440]	; (8001994 <ProcessCommands+0x7a0>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b72      	ldr	r3, [pc, #456]	; (80019a8 <ProcessCommands+0x7b4>)
 80017de:	681b      	ldr	r3, [r3, #0]
			 (command == safety && ctrl->currentState == SAFETY)||\
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d104      	bne.n	80017ee <ProcessCommands+0x5fa>
			 (command == valve_check && ctrl->currentState == VALVE_CHECK)||\
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d020      	beq.n	8001830 <ProcessCommands+0x63c>
			 (command == pressurizing && ctrl->currentState == PRESSURIZE) ||\
 80017ee:	4b69      	ldr	r3, [pc, #420]	; (8001994 <ProcessCommands+0x7a0>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4b6e      	ldr	r3, [pc, #440]	; (80019ac <ProcessCommands+0x7b8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
			 (command == valve_check && ctrl->currentState == VALVE_CHECK)||\
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d104      	bne.n	8001804 <ProcessCommands+0x610>
			 (command == pressurizing && ctrl->currentState == PRESSURIZE) ||\
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001800:	2b06      	cmp	r3, #6
 8001802:	d015      	beq.n	8001830 <ProcessCommands+0x63c>
		     (command == stop && ctrl->currentState == SAFETY)||\
 8001804:	4b63      	ldr	r3, [pc, #396]	; (8001994 <ProcessCommands+0x7a0>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b69      	ldr	r3, [pc, #420]	; (80019b0 <ProcessCommands+0x7bc>)
 800180a:	681b      	ldr	r3, [r3, #0]
			 (command == pressurizing && ctrl->currentState == PRESSURIZE) ||\
 800180c:	429a      	cmp	r2, r3
 800180e:	d104      	bne.n	800181a <ProcessCommands+0x626>
		     (command == stop && ctrl->currentState == SAFETY)||\
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001816:	2b05      	cmp	r3, #5
 8001818:	d00a      	beq.n	8001830 <ProcessCommands+0x63c>
			 (command == start_handler && ctrl->currentState == START_HANDLER)){
 800181a:	4b5e      	ldr	r3, [pc, #376]	; (8001994 <ProcessCommands+0x7a0>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4b65      	ldr	r3, [pc, #404]	; (80019b4 <ProcessCommands+0x7c0>)
 8001820:	681b      	ldr	r3, [r3, #0]
		     (command == stop && ctrl->currentState == SAFETY)||\
 8001822:	429a      	cmp	r2, r3
 8001824:	d116      	bne.n	8001854 <ProcessCommands+0x660>
			 (command == start_handler && ctrl->currentState == START_HANDLER)){
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800182c:	2b00      	cmp	r3, #0
 800182e:	d111      	bne.n	8001854 <ProcessCommands+0x660>

								if (cmd_flag && retransition)
 8001830:	4b61      	ldr	r3, [pc, #388]	; (80019b8 <ProcessCommands+0x7c4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 8197 	beq.w	8001b68 <ProcessCommands+0x974>
 800183a:	4b60      	ldr	r3, [pc, #384]	; (80019bc <ProcessCommands+0x7c8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8192 	beq.w	8001b68 <ProcessCommands+0x974>
						 	 	 	 	 {
						 	 	 		 	 UART_SendMessage(&huart2, " Currently in the state you are intending to transition to...\n");
 8001844:	495e      	ldr	r1, [pc, #376]	; (80019c0 <ProcessCommands+0x7cc>)
 8001846:	485f      	ldr	r0, [pc, #380]	; (80019c4 <ProcessCommands+0x7d0>)
 8001848:	f7ff fb30 	bl	8000eac <UART_SendMessage>
						 	 	 		 	cmd_flag = FALSE;
 800184c:	4b5a      	ldr	r3, [pc, #360]	; (80019b8 <ProcessCommands+0x7c4>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
								if (cmd_flag && retransition)
 8001852:	e189      	b.n	8001b68 <ProcessCommands+0x974>
						 	 	 	 	 }
	}

	//Handle the case of an unknown command
	else if (!(command == power_off || stop || valve_check || lox_fill || lox_chill || pressurizing || lox_pre_fill || ignition ||start_handler \
 8001854:	4b4f      	ldr	r3, [pc, #316]	; (8001994 <ProcessCommands+0x7a0>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b5b      	ldr	r3, [pc, #364]	; (80019c8 <ProcessCommands+0x7d4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	f000 80e7 	beq.w	8001a30 <ProcessCommands+0x83c>
 8001862:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <ProcessCommands+0x7bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f040 80e2 	bne.w	8001a30 <ProcessCommands+0x83c>
 800186c:	4b4e      	ldr	r3, [pc, #312]	; (80019a8 <ProcessCommands+0x7b4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	f040 80dd 	bne.w	8001a30 <ProcessCommands+0x83c>
 8001876:	4b49      	ldr	r3, [pc, #292]	; (800199c <ProcessCommands+0x7a8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	f040 80d8 	bne.w	8001a30 <ProcessCommands+0x83c>
 8001880:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <ProcessCommands+0x7ac>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	f040 80d3 	bne.w	8001a30 <ProcessCommands+0x83c>
 800188a:	4b48      	ldr	r3, [pc, #288]	; (80019ac <ProcessCommands+0x7b8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f040 80ce 	bne.w	8001a30 <ProcessCommands+0x83c>
 8001894:	4b40      	ldr	r3, [pc, #256]	; (8001998 <ProcessCommands+0x7a4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f040 80c9 	bne.w	8001a30 <ProcessCommands+0x83c>
 800189e:	4b4b      	ldr	r3, [pc, #300]	; (80019cc <ProcessCommands+0x7d8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 80c4 	bne.w	8001a30 <ProcessCommands+0x83c>
 80018a8:	4b42      	ldr	r3, [pc, #264]	; (80019b4 <ProcessCommands+0x7c0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f040 80bf 	bne.w	8001a30 <ProcessCommands+0x83c>
			|| cycle_valves || cycle_voff || IGON || IGOFF || SOV1ON || SOV1OFF || SOV2ON || SOV2OFF || SOV3ON || SOV3OFF || SOV4ON || SOV4OFF || SOV5ON || SOV5OFF ||\
 80018b2:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <ProcessCommands+0x7dc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f040 80ba 	bne.w	8001a30 <ProcessCommands+0x83c>
 80018bc:	4b45      	ldr	r3, [pc, #276]	; (80019d4 <ProcessCommands+0x7e0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f040 80b5 	bne.w	8001a30 <ProcessCommands+0x83c>
 80018c6:	4b44      	ldr	r3, [pc, #272]	; (80019d8 <ProcessCommands+0x7e4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f040 80b0 	bne.w	8001a30 <ProcessCommands+0x83c>
 80018d0:	4b42      	ldr	r3, [pc, #264]	; (80019dc <ProcessCommands+0x7e8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f040 80ab 	bne.w	8001a30 <ProcessCommands+0x83c>
 80018da:	4b41      	ldr	r3, [pc, #260]	; (80019e0 <ProcessCommands+0x7ec>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f040 80a6 	bne.w	8001a30 <ProcessCommands+0x83c>
 80018e4:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <ProcessCommands+0x7f0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f040 80a1 	bne.w	8001a30 <ProcessCommands+0x83c>
 80018ee:	4b3e      	ldr	r3, [pc, #248]	; (80019e8 <ProcessCommands+0x7f4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 809c 	bne.w	8001a30 <ProcessCommands+0x83c>
 80018f8:	4b3c      	ldr	r3, [pc, #240]	; (80019ec <ProcessCommands+0x7f8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f040 8097 	bne.w	8001a30 <ProcessCommands+0x83c>
 8001902:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <ProcessCommands+0x7fc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 8092 	bne.w	8001a30 <ProcessCommands+0x83c>
 800190c:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <ProcessCommands+0x800>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	f040 808d 	bne.w	8001a30 <ProcessCommands+0x83c>
 8001916:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <ProcessCommands+0x804>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f040 8088 	bne.w	8001a30 <ProcessCommands+0x83c>
 8001920:	4b36      	ldr	r3, [pc, #216]	; (80019fc <ProcessCommands+0x808>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	f040 8083 	bne.w	8001a30 <ProcessCommands+0x83c>
 800192a:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <ProcessCommands+0x80c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d17e      	bne.n	8001a30 <ProcessCommands+0x83c>
 8001932:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <ProcessCommands+0x810>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d17a      	bne.n	8001a30 <ProcessCommands+0x83c>
 800193a:	4b33      	ldr	r3, [pc, #204]	; (8001a08 <ProcessCommands+0x814>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d176      	bne.n	8001a30 <ProcessCommands+0x83c>
			 SOV6ON || SOV6OFF || SOV7ON || SOV7OFF || SOV8ON || SOV8OFF || SOV9ON || SOV9OFF )){
 8001942:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <ProcessCommands+0x818>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d172      	bne.n	8001a30 <ProcessCommands+0x83c>
 800194a:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <ProcessCommands+0x81c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d16e      	bne.n	8001a30 <ProcessCommands+0x83c>
 8001952:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <ProcessCommands+0x820>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d16a      	bne.n	8001a30 <ProcessCommands+0x83c>
 800195a:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <ProcessCommands+0x824>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d166      	bne.n	8001a30 <ProcessCommands+0x83c>
 8001962:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <ProcessCommands+0x828>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d162      	bne.n	8001a30 <ProcessCommands+0x83c>
 800196a:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <ProcessCommands+0x82c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d15e      	bne.n	8001a30 <ProcessCommands+0x83c>
 8001972:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <ProcessCommands+0x830>)
 8001974:	681b      	ldr	r3, [r3, #0]
	else if (!(command == power_off || stop || valve_check || lox_fill || lox_chill || pressurizing || lox_pre_fill || ignition ||start_handler \
 8001976:	2b00      	cmp	r3, #0
 8001978:	d15a      	bne.n	8001a30 <ProcessCommands+0x83c>

		if (inv_flag){
 800197a:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <ProcessCommands+0x834>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80f3 	beq.w	8001b6a <ProcessCommands+0x976>
		UART_SendMessage(&huart2, " Invalid command !...\n");
 8001984:	4929      	ldr	r1, [pc, #164]	; (8001a2c <ProcessCommands+0x838>)
 8001986:	480f      	ldr	r0, [pc, #60]	; (80019c4 <ProcessCommands+0x7d0>)
 8001988:	f7ff fa90 	bl	8000eac <UART_SendMessage>
		 inv_flag = FALSE;
 800198c:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <ProcessCommands+0x834>)
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
		if (inv_flag){
 8001992:	e0ea      	b.n	8001b6a <ProcessCommands+0x976>
 8001994:	20000194 	.word	0x20000194
 8001998:	20000014 	.word	0x20000014
 800199c:	2000000c 	.word	0x2000000c
 80019a0:	20000010 	.word	0x20000010
 80019a4:	2000001c 	.word	0x2000001c
 80019a8:	20000008 	.word	0x20000008
 80019ac:	20000018 	.word	0x20000018
 80019b0:	20000004 	.word	0x20000004
 80019b4:	20000024 	.word	0x20000024
 80019b8:	20000210 	.word	0x20000210
 80019bc:	20000380 	.word	0x20000380
 80019c0:	08006630 	.word	0x08006630
 80019c4:	20000384 	.word	0x20000384
 80019c8:	20000000 	.word	0x20000000
 80019cc:	20000020 	.word	0x20000020
 80019d0:	20000030 	.word	0x20000030
 80019d4:	20000034 	.word	0x20000034
 80019d8:	20000038 	.word	0x20000038
 80019dc:	2000003c 	.word	0x2000003c
 80019e0:	20000040 	.word	0x20000040
 80019e4:	20000044 	.word	0x20000044
 80019e8:	20000048 	.word	0x20000048
 80019ec:	2000004c 	.word	0x2000004c
 80019f0:	20000050 	.word	0x20000050
 80019f4:	20000054 	.word	0x20000054
 80019f8:	20000058 	.word	0x20000058
 80019fc:	2000005c 	.word	0x2000005c
 8001a00:	20000060 	.word	0x20000060
 8001a04:	20000064 	.word	0x20000064
 8001a08:	20000068 	.word	0x20000068
 8001a0c:	2000006c 	.word	0x2000006c
 8001a10:	20000070 	.word	0x20000070
 8001a14:	20000074 	.word	0x20000074
 8001a18:	20000078 	.word	0x20000078
 8001a1c:	2000007c 	.word	0x2000007c
 8001a20:	20000080 	.word	0x20000080
 8001a24:	20000084 	.word	0x20000084
 8001a28:	2000020c 	.word	0x2000020c
 8001a2c:	08006670 	.word	0x08006670
		}

	}

	//Handle the case of commands outside valve check state
	else if (command == valve_status || command == cycle_valves ||command == cycle_voff ||command == IGON ||command ==IGOFF \
 8001a30:	4b50      	ldr	r3, [pc, #320]	; (8001b74 <ProcessCommands+0x980>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <ProcessCommands+0x984>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	f000 8084 	beq.w	8001b46 <ProcessCommands+0x952>
 8001a3e:	4b4d      	ldr	r3, [pc, #308]	; (8001b74 <ProcessCommands+0x980>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b4e      	ldr	r3, [pc, #312]	; (8001b7c <ProcessCommands+0x988>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d07d      	beq.n	8001b46 <ProcessCommands+0x952>
 8001a4a:	4b4a      	ldr	r3, [pc, #296]	; (8001b74 <ProcessCommands+0x980>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4b4c      	ldr	r3, [pc, #304]	; (8001b80 <ProcessCommands+0x98c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d077      	beq.n	8001b46 <ProcessCommands+0x952>
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <ProcessCommands+0x980>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4b4a      	ldr	r3, [pc, #296]	; (8001b84 <ProcessCommands+0x990>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d071      	beq.n	8001b46 <ProcessCommands+0x952>
 8001a62:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <ProcessCommands+0x980>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4b48      	ldr	r3, [pc, #288]	; (8001b88 <ProcessCommands+0x994>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d06b      	beq.n	8001b46 <ProcessCommands+0x952>
			||command == SOV1ON ||command == SOV1OFF ||command == SOV2ON ||command == SOV2OFF || command ==SOV3ON \
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <ProcessCommands+0x980>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b46      	ldr	r3, [pc, #280]	; (8001b8c <ProcessCommands+0x998>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d065      	beq.n	8001b46 <ProcessCommands+0x952>
 8001a7a:	4b3e      	ldr	r3, [pc, #248]	; (8001b74 <ProcessCommands+0x980>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	4b44      	ldr	r3, [pc, #272]	; (8001b90 <ProcessCommands+0x99c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d05f      	beq.n	8001b46 <ProcessCommands+0x952>
 8001a86:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <ProcessCommands+0x980>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b42      	ldr	r3, [pc, #264]	; (8001b94 <ProcessCommands+0x9a0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d059      	beq.n	8001b46 <ProcessCommands+0x952>
 8001a92:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <ProcessCommands+0x980>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <ProcessCommands+0x9a4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d053      	beq.n	8001b46 <ProcessCommands+0x952>
 8001a9e:	4b35      	ldr	r3, [pc, #212]	; (8001b74 <ProcessCommands+0x980>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b3e      	ldr	r3, [pc, #248]	; (8001b9c <ProcessCommands+0x9a8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d04d      	beq.n	8001b46 <ProcessCommands+0x952>
			||command ==SOV3OFF ||command == SOV4ON ||command == SOV4OFF ||command == SOV5ON ||command ==SOV5OFF \
 8001aaa:	4b32      	ldr	r3, [pc, #200]	; (8001b74 <ProcessCommands+0x980>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4b3c      	ldr	r3, [pc, #240]	; (8001ba0 <ProcessCommands+0x9ac>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d047      	beq.n	8001b46 <ProcessCommands+0x952>
 8001ab6:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <ProcessCommands+0x980>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b3a      	ldr	r3, [pc, #232]	; (8001ba4 <ProcessCommands+0x9b0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d041      	beq.n	8001b46 <ProcessCommands+0x952>
 8001ac2:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <ProcessCommands+0x980>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4b38      	ldr	r3, [pc, #224]	; (8001ba8 <ProcessCommands+0x9b4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d03b      	beq.n	8001b46 <ProcessCommands+0x952>
 8001ace:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <ProcessCommands+0x980>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	4b36      	ldr	r3, [pc, #216]	; (8001bac <ProcessCommands+0x9b8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d035      	beq.n	8001b46 <ProcessCommands+0x952>
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <ProcessCommands+0x980>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b34      	ldr	r3, [pc, #208]	; (8001bb0 <ProcessCommands+0x9bc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d02f      	beq.n	8001b46 <ProcessCommands+0x952>
			||command ==SOV6ON ||command == SOV6OFF ||command == SOV7ON ||command == SOV7OFF ||command == SOV8ON \
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <ProcessCommands+0x980>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4b32      	ldr	r3, [pc, #200]	; (8001bb4 <ProcessCommands+0x9c0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d029      	beq.n	8001b46 <ProcessCommands+0x952>
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <ProcessCommands+0x980>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <ProcessCommands+0x9c4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d023      	beq.n	8001b46 <ProcessCommands+0x952>
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <ProcessCommands+0x980>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <ProcessCommands+0x9c8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d01d      	beq.n	8001b46 <ProcessCommands+0x952>
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <ProcessCommands+0x980>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <ProcessCommands+0x9cc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d017      	beq.n	8001b46 <ProcessCommands+0x952>
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <ProcessCommands+0x980>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <ProcessCommands+0x9d0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d011      	beq.n	8001b46 <ProcessCommands+0x952>
			||command ==SOV8OFF || command ==SOV9ON || command ==SOV9OFF){
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <ProcessCommands+0x980>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <ProcessCommands+0x9d4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d00b      	beq.n	8001b46 <ProcessCommands+0x952>
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <ProcessCommands+0x980>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <ProcessCommands+0x9d8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d005      	beq.n	8001b46 <ProcessCommands+0x952>
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <ProcessCommands+0x980>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <ProcessCommands+0x9dc>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d111      	bne.n	8001b6a <ProcessCommands+0x976>

			if (cmd_flag && !(ctrl->currentState == VALVE_CHECK)){
 8001b46:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <ProcessCommands+0x9e0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00d      	beq.n	8001b6a <ProcessCommands+0x976>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d008      	beq.n	8001b6a <ProcessCommands+0x976>
				UART_SendMessage(&huart2, " This command is only valid under the valve check state...\n");
 8001b58:	491f      	ldr	r1, [pc, #124]	; (8001bd8 <ProcessCommands+0x9e4>)
 8001b5a:	4820      	ldr	r0, [pc, #128]	; (8001bdc <ProcessCommands+0x9e8>)
 8001b5c:	f7ff f9a6 	bl	8000eac <UART_SendMessage>
				cmd_flag = FALSE;
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <ProcessCommands+0x9e0>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	e000      	b.n	8001b6a <ProcessCommands+0x976>
								if (cmd_flag && retransition)
 8001b68:	bf00      	nop
			}

	}


		return success;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000194 	.word	0x20000194
 8001b78:	2000002c 	.word	0x2000002c
 8001b7c:	20000030 	.word	0x20000030
 8001b80:	20000034 	.word	0x20000034
 8001b84:	20000038 	.word	0x20000038
 8001b88:	2000003c 	.word	0x2000003c
 8001b8c:	20000040 	.word	0x20000040
 8001b90:	20000044 	.word	0x20000044
 8001b94:	20000048 	.word	0x20000048
 8001b98:	2000004c 	.word	0x2000004c
 8001b9c:	20000050 	.word	0x20000050
 8001ba0:	20000054 	.word	0x20000054
 8001ba4:	20000058 	.word	0x20000058
 8001ba8:	2000005c 	.word	0x2000005c
 8001bac:	20000060 	.word	0x20000060
 8001bb0:	20000064 	.word	0x20000064
 8001bb4:	20000068 	.word	0x20000068
 8001bb8:	2000006c 	.word	0x2000006c
 8001bbc:	20000070 	.word	0x20000070
 8001bc0:	20000074 	.word	0x20000074
 8001bc4:	20000078 	.word	0x20000078
 8001bc8:	2000007c 	.word	0x2000007c
 8001bcc:	20000080 	.word	0x20000080
 8001bd0:	20000084 	.word	0x20000084
 8001bd4:	20000210 	.word	0x20000210
 8001bd8:	08006688 	.word	0x08006688
 8001bdc:	20000384 	.word	0x20000384

08001be0 <NominalValueCheck>:
	return n;
}
// Function in charge of determining that the Sensor Values are Nominal
// Need to know what is the Nominal Range
uint32_t NominalValueCheck(struct StateVars *ctrl, char marionette[])
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
	        }
	    }

	    if (j == 9){ nominal= TRUE;}//If all the values are correct
*/
	nominal = TRUE; // just for testing
 8001bea:	2301      	movs	r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
 return nominal;
 8001bee:	68fb      	ldr	r3, [r7, #12]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <Get_State_Disagree_Error_Msg>:


void Get_State_Disagree_Error_Msg(char *errorMessage, enum StateName expectedState, \
			enum StateName passedState)
{
 8001bfc:	b5b0      	push	{r4, r5, r7, lr}
 8001bfe:	b0a2      	sub	sp, #136	; 0x88
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	70fb      	strb	r3, [r7, #3]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	70bb      	strb	r3, [r7, #2]
	char state_disagree[VALVE_STATE_BUFFER_SIZE] = "ERROR: Expected State, Passed State Disagree. ";
 8001c0c:	4b34      	ldr	r3, [pc, #208]	; (8001ce0 <Get_State_Disagree_Error_Msg+0xe4>)
 8001c0e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001c12:	461d      	mov	r5, r3
 8001c14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001c20:	c407      	stmia	r4!, {r0, r1, r2}
 8001c22:	8023      	strh	r3, [r4, #0]
 8001c24:	3402      	adds	r4, #2
 8001c26:	0c1b      	lsrs	r3, r3, #16
 8001c28:	7023      	strb	r3, [r4, #0]
 8001c2a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001c2e:	2231      	movs	r2, #49	; 0x31
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f004 f8a6 	bl	8005d84 <memset>
	char temp[32];
	strcat(state_disagree, "Expected: ");
 8001c38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fac7 	bl	80001d0 <strlen>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4925      	ldr	r1, [pc, #148]	; (8001ce4 <Get_State_Disagree_Error_Msg+0xe8>)
 8001c4e:	461a      	mov	r2, r3
 8001c50:	460b      	mov	r3, r1
 8001c52:	cb03      	ldmia	r3!, {r0, r1}
 8001c54:	6010      	str	r0, [r2, #0]
 8001c56:	6051      	str	r1, [r2, #4]
 8001c58:	8819      	ldrh	r1, [r3, #0]
 8001c5a:	789b      	ldrb	r3, [r3, #2]
 8001c5c:	8111      	strh	r1, [r2, #8]
 8001c5e:	7293      	strb	r3, [r2, #10]
	sprintf(temp, "%d", expectedState);
 8001c60:	78fa      	ldrb	r2, [r7, #3]
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	4920      	ldr	r1, [pc, #128]	; (8001ce8 <Get_State_Disagree_Error_Msg+0xec>)
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f004 f893 	bl	8005d94 <siprintf>
	strcat(state_disagree, temp);
 8001c6e:	f107 0208 	add.w	r2, r7, #8
 8001c72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f004 f8ab 	bl	8005dd4 <strcat>
	strcat(state_disagree,"Passed: ");
 8001c7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe faa4 	bl	80001d0 <strlen>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c90:	4413      	add	r3, r2
 8001c92:	4916      	ldr	r1, [pc, #88]	; (8001cec <Get_State_Disagree_Error_Msg+0xf0>)
 8001c94:	461a      	mov	r2, r3
 8001c96:	460b      	mov	r3, r1
 8001c98:	cb03      	ldmia	r3!, {r0, r1}
 8001c9a:	6010      	str	r0, [r2, #0]
 8001c9c:	6051      	str	r1, [r2, #4]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	7213      	strb	r3, [r2, #8]
	sprintf(temp, "%d", passedState);
 8001ca2:	78ba      	ldrb	r2, [r7, #2]
 8001ca4:	f107 0308 	add.w	r3, r7, #8
 8001ca8:	490f      	ldr	r1, [pc, #60]	; (8001ce8 <Get_State_Disagree_Error_Msg+0xec>)
 8001caa:	4618      	mov	r0, r3
 8001cac:	f004 f872 	bl	8005d94 <siprintf>
	strcat(state_disagree, temp);
 8001cb0:	f107 0208 	add.w	r2, r7, #8
 8001cb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f004 f88a 	bl	8005dd4 <strcat>
	memset(errorMessage, '\0', VALVE_STATE_BUFFER_SIZE);
 8001cc0:	2260      	movs	r2, #96	; 0x60
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f004 f85d 	bl	8005d84 <memset>
	strcpy(errorMessage, state_disagree);
 8001cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cce:	4619      	mov	r1, r3
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f004 f88e 	bl	8005df2 <strcpy>
}
 8001cd6:	bf00      	nop
 8001cd8:	3788      	adds	r7, #136	; 0x88
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	080066e0 	.word	0x080066e0
 8001ce4:	080066c4 	.word	0x080066c4
 8001ce8:	080066d0 	.word	0x080066d0
 8001cec:	080066d4 	.word	0x080066d4

08001cf0 <Get_Invalid_State_Error_Msg>:

void Get_Invalid_State_Error_Msg(char *errorMessage, enum StateName state, enum StateName lastState)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b0a3      	sub	sp, #140	; 0x8c
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	70fb      	strb	r3, [r7, #3]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	70bb      	strb	r3, [r7, #2]
	char state_invalid[VALVE_STATE_BUFFER_SIZE] = "Invalid State: ";
 8001d00:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <Get_Invalid_State_Error_Msg+0xac>)
 8001d02:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001d06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d10:	2250      	movs	r2, #80	; 0x50
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f004 f835 	bl	8005d84 <memset>
	char temp[32];
	sprintf(temp, "%d",state);
 8001d1a:	78fa      	ldrb	r2, [r7, #3]
 8001d1c:	f107 0308 	add.w	r3, r7, #8
 8001d20:	491f      	ldr	r1, [pc, #124]	; (8001da0 <Get_Invalid_State_Error_Msg+0xb0>)
 8001d22:	4618      	mov	r0, r3
 8001d24:	f004 f836 	bl	8005d94 <siprintf>
	strcat(state_invalid, temp);
 8001d28:	f107 0208 	add.w	r2, r7, #8
 8001d2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f004 f84e 	bl	8005dd4 <strcat>
	strcat(state_invalid, ", lastState: ");
 8001d38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fa47 	bl	80001d0 <strlen>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461a      	mov	r2, r3
 8001d46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a15      	ldr	r2, [pc, #84]	; (8001da4 <Get_Invalid_State_Error_Msg+0xb4>)
 8001d4e:	461c      	mov	r4, r3
 8001d50:	4613      	mov	r3, r2
 8001d52:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001d54:	6020      	str	r0, [r4, #0]
 8001d56:	6061      	str	r1, [r4, #4]
 8001d58:	60a2      	str	r2, [r4, #8]
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	81a3      	strh	r3, [r4, #12]
	sprintf(temp, "%d", lastState);
 8001d5e:	78ba      	ldrb	r2, [r7, #2]
 8001d60:	f107 0308 	add.w	r3, r7, #8
 8001d64:	490e      	ldr	r1, [pc, #56]	; (8001da0 <Get_Invalid_State_Error_Msg+0xb0>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f004 f814 	bl	8005d94 <siprintf>
	strcat(state_invalid, temp);
 8001d6c:	f107 0208 	add.w	r2, r7, #8
 8001d70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d74:	4611      	mov	r1, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f004 f82c 	bl	8005dd4 <strcat>
	memset(errorMessage, '\0', VALVE_STATE_BUFFER_SIZE);
 8001d7c:	2260      	movs	r2, #96	; 0x60
 8001d7e:	2100      	movs	r1, #0
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f003 ffff 	bl	8005d84 <memset>
	strcpy(errorMessage, state_invalid);
 8001d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f004 f830 	bl	8005df2 <strcpy>
}
 8001d92:	bf00      	nop
 8001d94:	378c      	adds	r7, #140	; 0x8c
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd90      	pop	{r4, r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	08006750 	.word	0x08006750
 8001da0:	080066d0 	.word	0x080066d0
 8001da4:	08006740 	.word	0x08006740

08001da8 <OxidizerStart>:

#include <oxidizer_start.h>
#include "messages.h"
#include "utilities.h"

uint32_t OxidizerStart(struct StateVars *ctrl){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

	uint32_t success = FALSE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]

	ctrl->valveConfiguration = StateConfiguration();
 8001db4:	f000 fd2e 	bl	8002814 <StateConfiguration>
 8001db8:	4602      	mov	r2, r0
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV1 	\
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2223      	movs	r2, #35	; 0x23
 8001dc2:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV6);

	


	uint32_t TIMEOUT = 200;// .2 second time out
 8001dc4:	23c8      	movs	r3, #200	; 0xc8
 8001dc6:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fce4 	bl	800279c <VerifyState>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d05f      	beq.n	8001e9a <OxidizerStart+0xf2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 fcdb 	bl	800279c <VerifyState>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d056      	beq.n	8001e9a <OxidizerStart+0xf2>
    {
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d042      	beq.n	8001e80 <OxidizerStart+0xd8>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  1  |   1   |  0  |   0  |   0  |   1  |   0   |  0  |  0  |  0

    		StateStatus(ctrl);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 fc84 	bl	8002708 <StateStatus>
    		nominal = NominalValueCheck(ctrl, Rx_Buffer);
 8001e00:	4930      	ldr	r1, [pc, #192]	; (8001ec4 <OxidizerStart+0x11c>)
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff feec 	bl	8001be0 <NominalValueCheck>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <OxidizerStart+0x120>)
 8001e0c:	601a      	str	r2, [r3, #0]

    		uint32_t now = HAL_GetTick();
 8001e0e:	f001 fdf5 	bl	80039fc <HAL_GetTick>
 8001e12:	60f8      	str	r0, [r7, #12]
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d003      	beq.n	8001e2c <OxidizerStart+0x84>
    	    {
    			success = StateInitialize(ctrl);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 fe47 	bl	8002ab8 <StateInitialize>
 8001e2a:	6178      	str	r0, [r7, #20]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	429a      	cmp	r2, r3
 8001e36:	bf0c      	ite	eq
 8001e38:	2301      	moveq	r3, #1
 8001e3a:	2300      	movne	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	617b      	str	r3, [r7, #20]



    		if(now - ctrl->timeStarted > TIMEOUT && success && nominal)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d20a      	bcs.n	8001e64 <OxidizerStart+0xbc>
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d007      	beq.n	8001e64 <OxidizerStart+0xbc>
 8001e54:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <OxidizerStart+0x120>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <OxidizerStart+0xbc>
    		{
        		ctrl->currentState = FIRING;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2209      	movs	r2, #9
 8001e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}

    		// Increment state counter
			ctrl->stateCounter++;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e76:	d11f      	bne.n	8001eb8 <OxidizerStart+0x110>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 8001e7e:	e01b      	b.n	8001eb8 <OxidizerStart+0x110>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, OXIDIZER_START, ctrl->currentState);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e86:	461a      	mov	r2, r3
 8001e88:	2108      	movs	r1, #8
 8001e8a:	4810      	ldr	r0, [pc, #64]	; (8001ecc <OxidizerStart+0x124>)
 8001e8c:	f7ff feb6 	bl	8001bfc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2, Tx_Buffer);
 8001e90:	490e      	ldr	r1, [pc, #56]	; (8001ecc <OxidizerStart+0x124>)
 8001e92:	480f      	ldr	r0, [pc, #60]	; (8001ed0 <OxidizerStart+0x128>)
 8001e94:	f7ff f80a 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 8001e98:	e00e      	b.n	8001eb8 <OxidizerStart+0x110>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4808      	ldr	r0, [pc, #32]	; (8001ecc <OxidizerStart+0x124>)
 8001eaa:	f7ff ff21 	bl	8001cf0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8001eae:	4907      	ldr	r1, [pc, #28]	; (8001ecc <OxidizerStart+0x124>)
 8001eb0:	4807      	ldr	r0, [pc, #28]	; (8001ed0 <OxidizerStart+0x128>)
 8001eb2:	f7fe fffb 	bl	8000eac <UART_SendMessage>
 8001eb6:	e000      	b.n	8001eba <OxidizerStart+0x112>
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 8001eb8:	bf00      	nop
    }
	return success;
 8001eba:	697b      	ldr	r3, [r7, #20]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000318 	.word	0x20000318
 8001ec8:	20000188 	.word	0x20000188
 8001ecc:	200001a0 	.word	0x200001a0
 8001ed0:	20000384 	.word	0x20000384

08001ed4 <Pressurize>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "pressurize.h"
#include <messages.h>

uint32_t Pressurize(struct StateVars *ctrl){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]

	ctrl->valveConfiguration = StateConfiguration();
 8001ee0:	f000 fc98 	bl	8002814 <StateConfiguration>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget = ((uint16_t)SOV1 	\
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2203      	movs	r2, #3
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)SOV2);

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fc50 	bl	800279c <VerifyState>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d040      	beq.n	8001f84 <Pressurize+0xb0>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 fc47 	bl	800279c <VerifyState>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d037      	beq.n	8001f84 <Pressurize+0xb0>
    {
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f1a:	f003 0306 	and.w	r3, r3, #6
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d123      	bne.n	8001f6a <Pressurize+0x96>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8    SOV9   IG1
    		//|  1  |   1  |   0  |   0  |   0  |   0  |   0  |   0  |   0   |  0

    		StateStatus(ctrl);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fbf0 	bl	8002708 <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d003      	beq.n	8001f40 <Pressurize+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fdbd 	bl	8002ab8 <StateInitialize>
 8001f3e:	60f8      	str	r0, [r7, #12]
    	    }

    		ProcessCommands(ctrl);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff f957 	bl	80011f4 <ProcessCommands>

    		//Check the nominal value
			NominalValueCheck(ctrl, Rx_Buffer);
 8001f46:	491a      	ldr	r1, [pc, #104]	; (8001fb0 <Pressurize+0xdc>)
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff fe49 	bl	8001be0 <NominalValueCheck>

    		// Increment state counter
			ctrl->stateCounter++;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f60:	d11f      	bne.n	8001fa2 <Pressurize+0xce>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 8001f68:	e01b      	b.n	8001fa2 <Pressurize+0xce>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, PRESSURIZE, ctrl->currentState);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f70:	461a      	mov	r2, r3
 8001f72:	2106      	movs	r1, #6
 8001f74:	480f      	ldr	r0, [pc, #60]	; (8001fb4 <Pressurize+0xe0>)
 8001f76:	f7ff fe41 	bl	8001bfc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8001f7a:	490e      	ldr	r1, [pc, #56]	; (8001fb4 <Pressurize+0xe0>)
 8001f7c:	480e      	ldr	r0, [pc, #56]	; (8001fb8 <Pressurize+0xe4>)
 8001f7e:	f7fe ff95 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 8001f82:	e00e      	b.n	8001fa2 <Pressurize+0xce>
    	}
    }else{
    	    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f90:	461a      	mov	r2, r3
 8001f92:	4808      	ldr	r0, [pc, #32]	; (8001fb4 <Pressurize+0xe0>)
 8001f94:	f7ff feac 	bl	8001cf0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 8001f98:	4906      	ldr	r1, [pc, #24]	; (8001fb4 <Pressurize+0xe0>)
 8001f9a:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <Pressurize+0xe4>)
 8001f9c:	f7fe ff86 	bl	8000eac <UART_SendMessage>
 8001fa0:	e000      	b.n	8001fa4 <Pressurize+0xd0>
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 8001fa2:	bf00      	nop
    }
	return success;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000318 	.word	0x20000318
 8001fb4:	200001a0 	.word	0x200001a0
 8001fb8:	20000384 	.word	0x20000384

08001fbc <Purge>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "purge.h"
#include "messages.h"
#include "utilities.h"

uint32_t Purge(struct StateVars *ctrl){
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]

	ctrl->valveConfiguration = StateConfiguration();
 8001fc8:	f000 fc24 	bl	8002814 <StateConfiguration>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV3  \
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fd8:	631a      	str	r2, [r3, #48]	; 0x30
			  |(uint16_t)SOV9);


	uint32_t TIMEOUT = 3000; // 3 second time out
 8001fda:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001fde:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fbd8 	bl	800279c <VerifyState>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d05f      	beq.n	80020b2 <Purge+0xf6>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fbcf 	bl	800279c <VerifyState>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d056      	beq.n	80020b2 <Purge+0xf6>
    {
    	if((ctrl->currentState & PURGE) == PURGE){
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800200a:	f003 030a 	and.w	r3, r3, #10
 800200e:	2b0a      	cmp	r3, #10
 8002010:	d142      	bne.n	8002098 <Purge+0xdc>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
    		//|  0  |   0  |   1  |   0  |   0  |   0  |   0  |   0  |  1  |  0

    		StateStatus(ctrl);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 fb78 	bl	8002708 <StateStatus>
    		nominal = NominalValueCheck(ctrl, Rx_Buffer);
 8002018:	4930      	ldr	r1, [pc, #192]	; (80020dc <Purge+0x120>)
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fde0 	bl	8001be0 <NominalValueCheck>
 8002020:	4602      	mov	r2, r0
 8002022:	4b2f      	ldr	r3, [pc, #188]	; (80020e0 <Purge+0x124>)
 8002024:	601a      	str	r2, [r3, #0]


    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002032:	429a      	cmp	r2, r3
 8002034:	d003      	beq.n	800203e <Purge+0x82>
    	    {
    			success = StateInitialize(ctrl);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fd3e 	bl	8002ab8 <StateInitialize>
 800203c:	6178      	str	r0, [r7, #20]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	429a      	cmp	r2, r3
 8002048:	bf0c      	ite	eq
 800204a:	2301      	moveq	r3, #1
 800204c:	2300      	movne	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	617b      	str	r3, [r7, #20]


			uint32_t now = HAL_GetTick();
 8002052:	f001 fcd3 	bl	80039fc <HAL_GetTick>
 8002056:	60f8      	str	r0, [r7, #12]

    		if(now - ctrl->timeStarted > TIMEOUT && success && nominal)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	429a      	cmp	r2, r3
 8002064:	d20a      	bcs.n	800207c <Purge+0xc0>
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d007      	beq.n	800207c <Purge+0xc0>
 800206c:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <Purge+0x124>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <Purge+0xc0>
    		{
        		ctrl->currentState= SAFETY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2205      	movs	r2, #5
 8002078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}

    		// Increment state counter
			ctrl->stateCounter++;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208e:	d11f      	bne.n	80020d0 <Purge+0x114>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & PURGE) == PURGE){
 8002096:	e01b      	b.n	80020d0 <Purge+0x114>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, PURGE, ctrl->currentState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800209e:	461a      	mov	r2, r3
 80020a0:	210a      	movs	r1, #10
 80020a2:	4810      	ldr	r0, [pc, #64]	; (80020e4 <Purge+0x128>)
 80020a4:	f7ff fdaa 	bl	8001bfc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 80020a8:	490e      	ldr	r1, [pc, #56]	; (80020e4 <Purge+0x128>)
 80020aa:	480f      	ldr	r0, [pc, #60]	; (80020e8 <Purge+0x12c>)
 80020ac:	f7fe fefe 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & PURGE) == PURGE){
 80020b0:	e00e      	b.n	80020d0 <Purge+0x114>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020be:	461a      	mov	r2, r3
 80020c0:	4808      	ldr	r0, [pc, #32]	; (80020e4 <Purge+0x128>)
 80020c2:	f7ff fe15 	bl	8001cf0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 80020c6:	4907      	ldr	r1, [pc, #28]	; (80020e4 <Purge+0x128>)
 80020c8:	4807      	ldr	r0, [pc, #28]	; (80020e8 <Purge+0x12c>)
 80020ca:	f7fe feef 	bl	8000eac <UART_SendMessage>
 80020ce:	e000      	b.n	80020d2 <Purge+0x116>
    	if((ctrl->currentState & PURGE) == PURGE){
 80020d0:	bf00      	nop
    }
	return success;
 80020d2:	697b      	ldr	r3, [r7, #20]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000318 	.word	0x20000318
 80020e0:	20000188 	.word	0x20000188
 80020e4:	200001a0 	.word	0x200001a0
 80020e8:	20000384 	.word	0x20000384

080020ec <Safety>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "safety.h"
#include <messages.h>

uint32_t Safety(struct StateVars *ctrl) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

	uint32_t success = FALSE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]

	ctrl->valveConfiguration = StateConfiguration();
 80020f8:	f000 fb8c 	bl	8002814 <StateConfiguration>
 80020fc:	4602      	mov	r2, r0
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = (uint16_t) SOV4 | (uint16_t) SOV8;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2288      	movs	r2, #136	; 0x88
 8002106:	631a      	str	r2, [r3, #48]	; 0x30

	if (VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState)) {
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800210e:	4618      	mov	r0, r3
 8002110:	f000 fb44 	bl	800279c <VerifyState>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d04a      	beq.n	80021b0 <Safety+0xc4>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002120:	4618      	mov	r0, r3
 8002122:	f000 fb3b 	bl	800279c <VerifyState>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d041      	beq.n	80021b0 <Safety+0xc4>
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002132:	f003 0305 	and.w	r3, r3, #5
 8002136:	2b05      	cmp	r3, #5
 8002138:	d12d      	bne.n	8002196 <Safety+0xaa>
			// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8  SOV9   IG1
			// | 0  |   0  |   0  |   1  |   0  |   0  |    0|    1  |  0  |  0

			StateStatus(ctrl);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fae4 	bl	8002708 <StateStatus>
			// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800214c:	429a      	cmp	r2, r3
 800214e:	d003      	beq.n	8002158 <Safety+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 fcb1 	bl	8002ab8 <StateInitialize>
 8002156:	60f8      	str	r0, [r7, #12]
    	    }

            ProcessCommands(ctrl);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff f84b 	bl	80011f4 <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	429a      	cmp	r2, r3
 8002168:	bf0c      	ite	eq
 800216a:	2301      	moveq	r3, #1
 800216c:	2300      	movne	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	60fb      	str	r3, [r7, #12]

			NominalValueCheck(ctrl, Rx_Buffer);
 8002172:	491a      	ldr	r1, [pc, #104]	; (80021dc <Safety+0xf0>)
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff fd33 	bl	8001be0 <NominalValueCheck>

			ctrl->stateCounter++;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218c:	d11f      	bne.n	80021ce <Safety+0xe2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 8002194:	e01b      	b.n	80021ce <Safety+0xe2>

		} else {
			// Log Expected State != Passed State
			Get_State_Disagree_Error_Msg(Tx_Buffer, SAFETY, ctrl->currentState);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800219c:	461a      	mov	r2, r3
 800219e:	2105      	movs	r1, #5
 80021a0:	480f      	ldr	r0, [pc, #60]	; (80021e0 <Safety+0xf4>)
 80021a2:	f7ff fd2b 	bl	8001bfc <Get_State_Disagree_Error_Msg>
			UART_SendMessage(&huart2,Tx_Buffer);
 80021a6:	490e      	ldr	r1, [pc, #56]	; (80021e0 <Safety+0xf4>)
 80021a8:	480e      	ldr	r0, [pc, #56]	; (80021e4 <Safety+0xf8>)
 80021aa:	f7fe fe7f 	bl	8000eac <UART_SendMessage>
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 80021ae:	e00e      	b.n	80021ce <Safety+0xe2>
		}
	} else {
		// Log Invalid State
		Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021bc:	461a      	mov	r2, r3
 80021be:	4808      	ldr	r0, [pc, #32]	; (80021e0 <Safety+0xf4>)
 80021c0:	f7ff fd96 	bl	8001cf0 <Get_Invalid_State_Error_Msg>
		UART_SendMessage(&huart2,Tx_Buffer);
 80021c4:	4906      	ldr	r1, [pc, #24]	; (80021e0 <Safety+0xf4>)
 80021c6:	4807      	ldr	r0, [pc, #28]	; (80021e4 <Safety+0xf8>)
 80021c8:	f7fe fe70 	bl	8000eac <UART_SendMessage>
 80021cc:	e000      	b.n	80021d0 <Safety+0xe4>
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 80021ce:	bf00      	nop
	}
	return success;
 80021d0:	68fb      	ldr	r3, [r7, #12]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000318 	.word	0x20000318
 80021e0:	200001a0 	.word	0x200001a0
 80021e4:	20000384 	.word	0x20000384

080021e8 <StartHandler>:
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include <start_handler.h>
#include <messages.h>

uint32_t StartHandler(struct StateVars *ctrl){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

	uint32_t success = FALSE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 80021f4:	f000 fb0e 	bl	8002814 <StateConfiguration>
 80021f8:	4602      	mov	r2, r0
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	62da      	str	r2, [r3, #44]	; 0x2c

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState)){
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fac9 	bl	800279c <VerifyState>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d038      	beq.n	8002282 <StartHandler+0x9a>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fac0 	bl	800279c <VerifyState>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d02f      	beq.n	8002282 <StartHandler+0x9a>




    		// If this is the first time, initialize state
     		if(ctrl->currentState != ctrl->lastState)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800222e:	429a      	cmp	r2, r3
 8002230:	d006      	beq.n	8002240 <StartHandler+0x58>
    	    {
     			ctrl->valveTarget  = !((uint16_t)SOV1 \
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
     			    					|(uint16_t)SOV6 \
     			    					|(uint16_t)SOV7 \
     			    					|(uint16_t)SOV8 \
     			    					|(uint16_t)SOV9 \
     									|(uint16_t)IG1 );
    	    	success = StateInitialize(ctrl);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 fc3d 	bl	8002ab8 <StateInitialize>
 800223e:	60f8      	str	r0, [r7, #12]
    	    }

    		ProcessCommands(ctrl);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7fe ffd7 	bl	80011f4 <ProcessCommands>

			success &= (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	429a      	cmp	r2, r3
 8002250:	d101      	bne.n	8002256 <StartHandler+0x6e>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <StartHandler+0x70>
 8002256:	2300      	movs	r3, #0
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	4013      	ands	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]

			NominalValueCheck(ctrl, Rx_Buffer);
 800225e:	4913      	ldr	r1, [pc, #76]	; (80022ac <StartHandler+0xc4>)
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff fcbd 	bl	8001be0 <NominalValueCheck>

    		// Increment state counter
			ctrl->stateCounter++;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002278:	d112      	bne.n	80022a0 <StartHandler+0xb8>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & START_HANDLER) == START_HANDLER){
 8002280:	e00e      	b.n	80022a0 <StartHandler+0xb8>
    		Get_State_Disagree_Error_Msg(Tx_Buffer, START_HANDLER, ctrl->currentState);
    		UART_SendMessage(&huart2,Tx_Buffer);
    	}
    }else{
    	    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800228e:	461a      	mov	r2, r3
 8002290:	4807      	ldr	r0, [pc, #28]	; (80022b0 <StartHandler+0xc8>)
 8002292:	f7ff fd2d 	bl	8001cf0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8002296:	4906      	ldr	r1, [pc, #24]	; (80022b0 <StartHandler+0xc8>)
 8002298:	4806      	ldr	r0, [pc, #24]	; (80022b4 <StartHandler+0xcc>)
 800229a:	f7fe fe07 	bl	8000eac <UART_SendMessage>
 800229e:	e000      	b.n	80022a2 <StartHandler+0xba>
    	if((ctrl->currentState & START_HANDLER) == START_HANDLER){
 80022a0:	bf00      	nop
    }
	return success;
 80022a2:	68fb      	ldr	r3, [r7, #12]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000318 	.word	0x20000318
 80022b0:	200001a0 	.word	0x200001a0
 80022b4:	20000384 	.word	0x20000384

080022b8 <StateMachine>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)

#include "state_machine.h"

void StateMachine(uint32_t control, struct StateVars *ctrl)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
	while(TRUE == control)
 80022c2:	e087      	b.n	80023d4 <StateMachine+0x11c>
	{
		if(VerifyState(ctrl->currentState))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fa66 	bl	800279c <VerifyState>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d06c      	beq.n	80023b0 <StateMachine+0xf8>
		{
			switch(ctrl->currentState)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022dc:	2b0c      	cmp	r3, #12
 80022de:	d861      	bhi.n	80023a4 <StateMachine+0xec>
 80022e0:	a201      	add	r2, pc, #4	; (adr r2, 80022e8 <StateMachine+0x30>)
 80022e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e6:	bf00      	nop
 80022e8:	0800231d 	.word	0x0800231d
 80022ec:	08002329 	.word	0x08002329
 80022f0:	08002333 	.word	0x08002333
 80022f4:	0800233f 	.word	0x0800233f
 80022f8:	0800234b 	.word	0x0800234b
 80022fc:	08002355 	.word	0x08002355
 8002300:	0800235f 	.word	0x0800235f
 8002304:	08002369 	.word	0x08002369
 8002308:	08002373 	.word	0x08002373
 800230c:	0800237d 	.word	0x0800237d
 8002310:	08002387 	.word	0x08002387
 8002314:	08002391 	.word	0x08002391
 8002318:	0800239b 	.word	0x0800239b
			{
			    case START_HANDLER:
			    	control = StartHandler(ctrl);
 800231c:	6838      	ldr	r0, [r7, #0]
 800231e:	f7ff ff63 	bl	80021e8 <StartHandler>
 8002322:	4603      	mov	r3, r0
 8002324:	607b      	str	r3, [r7, #4]
			    	break;
 8002326:	e055      	b.n	80023d4 <StateMachine+0x11c>
				case VALVE_CHECK:
					control = ValveCheck(ctrl);
 8002328:	6838      	ldr	r0, [r7, #0]
 800232a:	f001 fa4b 	bl	80037c4 <ValveCheck>
 800232e:	6078      	str	r0, [r7, #4]
					break;
 8002330:	e050      	b.n	80023d4 <StateMachine+0x11c>
				case LOX_PRE_FILL:
					control = LoxPreFill(ctrl);
 8002332:	6838      	ldr	r0, [r7, #0]
 8002334:	f7fe fd0a 	bl	8000d4c <LoxPreFill>
 8002338:	4603      	mov	r3, r0
 800233a:	607b      	str	r3, [r7, #4]
					break;
 800233c:	e04a      	b.n	80023d4 <StateMachine+0x11c>
				case LOX_FILL:
					control = LoxFill(ctrl);
 800233e:	6838      	ldr	r0, [r7, #0]
 8002340:	f7fe fc86 	bl	8000c50 <LoxFill>
 8002344:	4603      	mov	r3, r0
 8002346:	607b      	str	r3, [r7, #4]
					break;
 8002348:	e044      	b.n	80023d4 <StateMachine+0x11c>
				case LOX_CHILL:
					control = LoxChill(ctrl);
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	f7fe fc02 	bl	8000b54 <LoxChill>
 8002350:	6078      	str	r0, [r7, #4]
				    break;
 8002352:	e03f      	b.n	80023d4 <StateMachine+0x11c>
			    case SAFETY:
					control = Safety(ctrl);
 8002354:	6838      	ldr	r0, [r7, #0]
 8002356:	f7ff fec9 	bl	80020ec <Safety>
 800235a:	6078      	str	r0, [r7, #4]
					break;
 800235c:	e03a      	b.n	80023d4 <StateMachine+0x11c>
				case PRESSURIZE:
					control = Pressurize(ctrl);
 800235e:	6838      	ldr	r0, [r7, #0]
 8002360:	f7ff fdb8 	bl	8001ed4 <Pressurize>
 8002364:	6078      	str	r0, [r7, #4]
					break;
 8002366:	e035      	b.n	80023d4 <StateMachine+0x11c>
				case IGNITION:
					control = Ignition(ctrl);
 8002368:	6838      	ldr	r0, [r7, #0]
 800236a:	f7fe fa2b 	bl	80007c4 <Ignition>
 800236e:	6078      	str	r0, [r7, #4]
					break;
 8002370:	e030      	b.n	80023d4 <StateMachine+0x11c>
				case OXIDIZER_START:
					control = OxidizerStart(ctrl);
 8002372:	6838      	ldr	r0, [r7, #0]
 8002374:	f7ff fd18 	bl	8001da8 <OxidizerStart>
 8002378:	6078      	str	r0, [r7, #4]
					break;
 800237a:	e02b      	b.n	80023d4 <StateMachine+0x11c>
				case FIRING:
					control = Firing(ctrl);
 800237c:	6838      	ldr	r0, [r7, #0]
 800237e:	f7fe f989 	bl	8000694 <Firing>
 8002382:	6078      	str	r0, [r7, #4]
					break;
 8002384:	e026      	b.n	80023d4 <StateMachine+0x11c>
				case PURGE:
					control = Purge(ctrl);
 8002386:	6838      	ldr	r0, [r7, #0]
 8002388:	f7ff fe18 	bl	8001fbc <Purge>
 800238c:	6078      	str	r0, [r7, #4]
					break;
 800238e:	e021      	b.n	80023d4 <StateMachine+0x11c>
				case TURN_OFF:
					control = TurnOff(ctrl);
 8002390:	6838      	ldr	r0, [r7, #0]
 8002392:	f000 f941 	bl	8002618 <TurnOff>
 8002396:	6078      	str	r0, [r7, #4]
					break;
 8002398:	e01c      	b.n	80023d4 <StateMachine+0x11c>
				case AUTOMATIC_SHUTDOWN:
					control = AutomaticShutdown(ctrl);
 800239a:	6838      	ldr	r0, [r7, #0]
 800239c:	f7fe f8f0 	bl	8000580 <AutomaticShutdown>
 80023a0:	6078      	str	r0, [r7, #4]
					break;
 80023a2:	e017      	b.n	80023d4 <StateMachine+0x11c>


				default:
					ctrl->currentState = AUTOMATIC_SHUTDOWN;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	220c      	movs	r2, #12
 80023a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
					break;
 80023ac:	bf00      	nop
 80023ae:	e011      	b.n	80023d4 <StateMachine+0x11c>
			}
		}else
		{
			ctrl->currentState = AUTOMATIC_SHUTDOWN;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	220c      	movs	r2, #12
 80023b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	    	// Log Invalid State
	    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023c4:	461a      	mov	r2, r3
 80023c6:	4807      	ldr	r0, [pc, #28]	; (80023e4 <StateMachine+0x12c>)
 80023c8:	f7ff fc92 	bl	8001cf0 <Get_Invalid_State_Error_Msg>
	    	UART_SendMessage(&huart2,Tx_Buffer);
 80023cc:	4905      	ldr	r1, [pc, #20]	; (80023e4 <StateMachine+0x12c>)
 80023ce:	4806      	ldr	r0, [pc, #24]	; (80023e8 <StateMachine+0x130>)
 80023d0:	f7fe fd6c 	bl	8000eac <UART_SendMessage>
	while(TRUE == control)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	f43f af74 	beq.w	80022c4 <StateMachine+0xc>
			//ERROR HANDLE
		}
		// WD check
	}
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	200001a0 	.word	0x200001a0
 80023e8:	20000384 	.word	0x20000384

080023ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <HAL_MspInit+0x44>)
 80023f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f6:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <HAL_MspInit+0x44>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6613      	str	r3, [r2, #96]	; 0x60
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <HAL_MspInit+0x44>)
 8002400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_MspInit+0x44>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	4a08      	ldr	r2, [pc, #32]	; (8002430 <HAL_MspInit+0x44>)
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002414:	6593      	str	r3, [r2, #88]	; 0x58
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_MspInit+0x44>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000

08002434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08a      	sub	sp, #40	; 0x28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <HAL_UART_MspInit+0x8c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d130      	bne.n	80024b8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002456:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_UART_MspInit+0x90>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	4a1a      	ldr	r2, [pc, #104]	; (80024c4 <HAL_UART_MspInit+0x90>)
 800245c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002460:	6593      	str	r3, [r2, #88]	; 0x58
 8002462:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <HAL_UART_MspInit+0x90>)
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <HAL_UART_MspInit+0x90>)
 8002470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002472:	4a14      	ldr	r2, [pc, #80]	; (80024c4 <HAL_UART_MspInit+0x90>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_UART_MspInit+0x90>)
 800247c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002486:	230c      	movs	r3, #12
 8002488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	2302      	movs	r3, #2
 800248c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002492:	2303      	movs	r3, #3
 8002494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002496:	2307      	movs	r3, #7
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249a:	f107 0314 	add.w	r3, r7, #20
 800249e:	4619      	mov	r1, r3
 80024a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024a4:	f001 fc2a 	bl	8003cfc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024a8:	2200      	movs	r2, #0
 80024aa:	2100      	movs	r1, #0
 80024ac:	2026      	movs	r0, #38	; 0x26
 80024ae:	f001 fbae 	bl	8003c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024b2:	2026      	movs	r0, #38	; 0x26
 80024b4:	f001 fbc7 	bl	8003c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024b8:	bf00      	nop
 80024ba:	3728      	adds	r7, #40	; 0x28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40004400 	.word	0x40004400
 80024c4:	40021000 	.word	0x40021000

080024c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024cc:	e7fe      	b.n	80024cc <NMI_Handler+0x4>

080024ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024d2:	e7fe      	b.n	80024d2 <HardFault_Handler+0x4>

080024d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d8:	e7fe      	b.n	80024d8 <MemManage_Handler+0x4>

080024da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024de:	e7fe      	b.n	80024de <BusFault_Handler+0x4>

080024e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <UsageFault_Handler+0x4>

080024e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002514:	f001 fa5e 	bl	80039d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}

0800251c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <USART2_IRQHandler+0x10>)
 8002522:	f002 fdb9 	bl	8005098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000384 	.word	0x20000384

08002530 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002534:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002538:	f001 fdb8 	bl	80040ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}

08002540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <_sbrk+0x5c>)
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <_sbrk+0x60>)
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <_sbrk+0x64>)
 800255e:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <_sbrk+0x68>)
 8002560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	429a      	cmp	r2, r3
 800256e:	d207      	bcs.n	8002580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002570:	f003 fbde 	bl	8005d30 <__errno>
 8002574:	4602      	mov	r2, r0
 8002576:	230c      	movs	r3, #12
 8002578:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
 800257e:	e009      	b.n	8002594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <_sbrk+0x64>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <_sbrk+0x64>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <_sbrk+0x64>)
 8002590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002592:	68fb      	ldr	r3, [r7, #12]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20018000 	.word	0x20018000
 80025a0:	00000400 	.word	0x00000400
 80025a4:	20000170 	.word	0x20000170
 80025a8:	20000420 	.word	0x20000420

080025ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <SystemInit+0x64>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	4a16      	ldr	r2, [pc, #88]	; (8002610 <SystemInit+0x64>)
 80025b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <SystemInit+0x68>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a13      	ldr	r2, [pc, #76]	; (8002614 <SystemInit+0x68>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <SystemInit+0x68>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <SystemInit+0x68>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <SystemInit+0x68>)
 80025d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80025dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80025e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <SystemInit+0x68>)
 80025e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <SystemInit+0x68>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a09      	ldr	r2, [pc, #36]	; (8002614 <SystemInit+0x68>)
 80025f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <SystemInit+0x68>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <SystemInit+0x64>)
 80025fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002602:	609a      	str	r2, [r3, #8]
#endif
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000ed00 	.word	0xe000ed00
 8002614:	40021000 	.word	0x40021000

08002618 <TurnOff>:
//  At this point the valves are opened and a log entry is created
//
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include <turnoff.h>

uint32_t TurnOff(struct StateVars *ctrl){
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]

	ctrl->valveConfiguration = StateConfiguration();
 8002624:	f000 f8f6 	bl	8002814 <StateConfiguration>
 8002628:	4602      	mov	r2, r0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)SOV4  \
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2288      	movs	r2, #136	; 0x88
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
				  |(uint16_t)SOV8);

     //Todo Do we want to set all the valves OFF instead ????

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f8ae 	bl	800279c <VerifyState>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d046      	beq.n	80026d4 <TurnOff+0xbc>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800264c:	4618      	mov	r0, r3
 800264e:	f000 f8a5 	bl	800279c <VerifyState>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d03d      	beq.n	80026d4 <TurnOff+0xbc>
    {
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800265e:	f003 030b 	and.w	r3, r3, #11
 8002662:	2b0b      	cmp	r3, #11
 8002664:	d129      	bne.n	80026ba <TurnOff+0xa2>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8   SOV9  IG1
    		//|  0  |   0  |   0  |   1  |   0  |   0  |   0  |   1  |   0  | 0

    		StateStatus(ctrl);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f84e 	bl	8002708 <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002678:	429a      	cmp	r2, r3
 800267a:	d003      	beq.n	8002684 <TurnOff+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 fa1b 	bl	8002ab8 <StateInitialize>
 8002682:	60f8      	str	r0, [r7, #12]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	429a      	cmp	r2, r3
 800268e:	bf0c      	ite	eq
 8002690:	2301      	moveq	r3, #1
 8002692:	2300      	movne	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	60fb      	str	r3, [r7, #12]

			//STOP ANY PROCEDURES
			ctrl->isStateMachineRunning = FALSE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	629a      	str	r2, [r3, #40]	; 0x28

    		// Increment state counter
			ctrl->stateCounter++;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d11f      	bne.n	80026f2 <TurnOff+0xda>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 80026b8:	e01b      	b.n	80026f2 <TurnOff+0xda>

    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, TURN_OFF, ctrl->currentState);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c0:	461a      	mov	r2, r3
 80026c2:	210b      	movs	r1, #11
 80026c4:	480e      	ldr	r0, [pc, #56]	; (8002700 <TurnOff+0xe8>)
 80026c6:	f7ff fa99 	bl	8001bfc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 80026ca:	490d      	ldr	r1, [pc, #52]	; (8002700 <TurnOff+0xe8>)
 80026cc:	480d      	ldr	r0, [pc, #52]	; (8002704 <TurnOff+0xec>)
 80026ce:	f7fe fbed 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 80026d2:	e00e      	b.n	80026f2 <TurnOff+0xda>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026e0:	461a      	mov	r2, r3
 80026e2:	4807      	ldr	r0, [pc, #28]	; (8002700 <TurnOff+0xe8>)
 80026e4:	f7ff fb04 	bl	8001cf0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 80026e8:	4905      	ldr	r1, [pc, #20]	; (8002700 <TurnOff+0xe8>)
 80026ea:	4806      	ldr	r0, [pc, #24]	; (8002704 <TurnOff+0xec>)
 80026ec:	f7fe fbde 	bl	8000eac <UART_SendMessage>
 80026f0:	e000      	b.n	80026f4 <TurnOff+0xdc>
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 80026f2:	bf00      	nop
    }

 return 0; // end the program
 80026f4:	2300      	movs	r3, #0

}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200001a0 	.word	0x200001a0
 8002704:	20000384 	.word	0x20000384

08002708 <StateStatus>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "utilities.h"
#include "messages.h"
#include "valve_check.h"
//Function that sends the current state status to the user
void StateStatus(struct StateVars *ctrl){
 8002708:	b5b0      	push	{r4, r5, r7, lr}
 800270a:	b090      	sub	sp, #64	; 0x40
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

     int state = ctrl->currentState;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002716:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char* naming[] = { [0] = "State : Start Handler\n\r", [1] = "State : Valve Check\n\r" ,	\
 8002718:	4b1c      	ldr	r3, [pc, #112]	; (800278c <StateStatus+0x84>)
 800271a:	f107 0408 	add.w	r4, r7, #8
 800271e:	461d      	mov	r5, r3
 8002720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800272a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800272c:	682b      	ldr	r3, [r5, #0]
 800272e:	6023      	str	r3, [r4, #0]
		[2] = "State : Lox Pre Fill\n\r", [3] = "State : Lox Fill\n\r", [4] = "State : Lox Chill\n\r",	\
		[5] = "State : Safety\n\r", [6] = "State : Pressurize\n\r", [7] = "State : Ignition\n\r",	[8] = "\nState : Oxidizer Start\n\r",\
		[9] = "State : Firing\n\r", [10] = "State : Purge\n\r",	[11] = "State : Turn Off\n\r", [12] = "State : Automatic Shutdown\n\r"};

		if (ctrl->lastState  != ctrl->currentState){
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800273c:	429a      	cmp	r2, r3
 800273e:	d00e      	beq.n	800275e <StateStatus+0x56>
			UART_SendMessage(&huart2, naming[state]);
 8002740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002748:	4413      	add	r3, r2
 800274a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800274e:	4619      	mov	r1, r3
 8002750:	480f      	ldr	r0, [pc, #60]	; (8002790 <StateStatus+0x88>)
 8002752:	f7fe fbab 	bl	8000eac <UART_SendMessage>
			// Flag for the transitioning to the same state
			retransition = FALSE;
 8002756:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <StateStatus+0x8c>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
		{
			UART_SendMessage(&huart2, naming[state]);
			status = FALSE;

		}
}// end of function
 800275c:	e011      	b.n	8002782 <StateStatus+0x7a>
		else if(status)
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <StateStatus+0x90>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00d      	beq.n	8002782 <StateStatus+0x7a>
			UART_SendMessage(&huart2, naming[state]);
 8002766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800276e:	4413      	add	r3, r2
 8002770:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002774:	4619      	mov	r1, r3
 8002776:	4806      	ldr	r0, [pc, #24]	; (8002790 <StateStatus+0x88>)
 8002778:	f7fe fb98 	bl	8000eac <UART_SendMessage>
			status = FALSE;
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <StateStatus+0x90>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
}// end of function
 8002782:	bf00      	nop
 8002784:	3740      	adds	r7, #64	; 0x40
 8002786:	46bd      	mov	sp, r7
 8002788:	bdb0      	pop	{r4, r5, r7, pc}
 800278a:	bf00      	nop
 800278c:	080068d4 	.word	0x080068d4
 8002790:	20000384 	.word	0x20000384
 8002794:	20000380 	.word	0x20000380
 8002798:	20000404 	.word	0x20000404

0800279c <VerifyState>:
 *  	success <uint32_t>: TRUE | FALSE | 1 | 0
 *
 *  Notes:
 */
uint32_t VerifyState(int state)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

	uint32_t success = FALSE;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
    if(state <= TURN_OFF && state >= START_HANDLER)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b0b      	cmp	r3, #11
 80027ac:	dc27      	bgt.n	80027fe <VerifyState+0x62>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	db24      	blt.n	80027fe <VerifyState+0x62>
    {
    	success = TRUE;
 80027b4:	2301      	movs	r3, #1
 80027b6:	60fb      	str	r3, [r7, #12]
		switch(state)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b0c      	cmp	r3, #12
 80027bc:	d81c      	bhi.n	80027f8 <VerifyState+0x5c>
 80027be:	a201      	add	r2, pc, #4	; (adr r2, 80027c4 <VerifyState+0x28>)
 80027c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c4:	08002803 	.word	0x08002803
 80027c8:	08002803 	.word	0x08002803
 80027cc:	08002803 	.word	0x08002803
 80027d0:	08002803 	.word	0x08002803
 80027d4:	08002803 	.word	0x08002803
 80027d8:	08002803 	.word	0x08002803
 80027dc:	08002803 	.word	0x08002803
 80027e0:	08002803 	.word	0x08002803
 80027e4:	08002803 	.word	0x08002803
 80027e8:	08002803 	.word	0x08002803
 80027ec:	08002803 	.word	0x08002803
 80027f0:	08002803 	.word	0x08002803
 80027f4:	08002803 	.word	0x08002803
				break;
			case TURN_OFF:
				break;

			default:
				success = FALSE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
				break;
 80027fc:	e002      	b.n	8002804 <VerifyState+0x68>
		}
    }
 80027fe:	bf00      	nop
 8002800:	e000      	b.n	8002804 <VerifyState+0x68>
				break;
 8002802:	bf00      	nop
	return success;
 8002804:	68fb      	ldr	r3, [r7, #12]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop

08002814 <StateConfiguration>:
 *
 *  Notes:
 */

uint32_t StateConfiguration()
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
	uint32_t vc = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
	//SOV1 - Fuel Pressure (PA_11)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin) << 0);
 800281e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002826:	f001 fc11 	bl	800404c <HAL_GPIO_ReadPin>
 800282a:	4603      	mov	r3, r0
 800282c:	461a      	mov	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4313      	orrs	r3, r2
 8002832:	607b      	str	r3, [r7, #4]

	//SOV2 - Lox Pressure (PA_12)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin) << 1);
 8002834:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800283c:	f001 fc06 	bl	800404c <HAL_GPIO_ReadPin>
 8002840:	4603      	mov	r3, r0
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	461a      	mov	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4313      	orrs	r3, r2
 800284a:	607b      	str	r3, [r7, #4]

	//SOV3 - Fuel Purge N2 (PC_7)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin) << 2);
 800284c:	2180      	movs	r1, #128	; 0x80
 800284e:	482e      	ldr	r0, [pc, #184]	; (8002908 <StateConfiguration+0xf4>)
 8002850:	f001 fbfc 	bl	800404c <HAL_GPIO_ReadPin>
 8002854:	4603      	mov	r3, r0
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	461a      	mov	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4313      	orrs	r3, r2
 800285e:	607b      	str	r3, [r7, #4]

	//SOV4 - Fuel Vent (PC_6)
	vc |= (uint32_t)(HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin) << 3);
 8002860:	2140      	movs	r1, #64	; 0x40
 8002862:	4829      	ldr	r0, [pc, #164]	; (8002908 <StateConfiguration+0xf4>)
 8002864:	f001 fbf2 	bl	800404c <HAL_GPIO_ReadPin>
 8002868:	4603      	mov	r3, r0
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	461a      	mov	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4313      	orrs	r3, r2
 8002872:	607b      	str	r3, [r7, #4]

	//SOV5 - Fuel Main (PA_9)
	vc |= (uint32_t)(HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin) << 4);
 8002874:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800287c:	f001 fbe6 	bl	800404c <HAL_GPIO_ReadPin>
 8002880:	4603      	mov	r3, r0
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	461a      	mov	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4313      	orrs	r3, r2
 800288a:	607b      	str	r3, [r7, #4]

	//SOV6 - Lox Main (PA_8)
	vc |= (uint32_t)(HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin) << 5);
 800288c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002894:	f001 fbda 	bl	800404c <HAL_GPIO_ReadPin>
 8002898:	4603      	mov	r3, r0
 800289a:	015b      	lsls	r3, r3, #5
 800289c:	461a      	mov	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	607b      	str	r3, [r7, #4]

	//SOV7 - Lox Fill (PB_15)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin) << 6);
 80028a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028a8:	4818      	ldr	r0, [pc, #96]	; (800290c <StateConfiguration+0xf8>)
 80028aa:	f001 fbcf 	bl	800404c <HAL_GPIO_ReadPin>
 80028ae:	4603      	mov	r3, r0
 80028b0:	019b      	lsls	r3, r3, #6
 80028b2:	461a      	mov	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	607b      	str	r3, [r7, #4]

	//SOV8 - Lox Vent (PB_10)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin) << 7);
 80028ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028be:	4813      	ldr	r0, [pc, #76]	; (800290c <StateConfiguration+0xf8>)
 80028c0:	f001 fbc4 	bl	800404c <HAL_GPIO_ReadPin>
 80028c4:	4603      	mov	r3, r0
 80028c6:	01db      	lsls	r3, r3, #7
 80028c8:	461a      	mov	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	607b      	str	r3, [r7, #4]

	//SOV9 - Lox Purge (PB_13)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin) << 8);
 80028d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028d4:	480d      	ldr	r0, [pc, #52]	; (800290c <StateConfiguration+0xf8>)
 80028d6:	f001 fbb9 	bl	800404c <HAL_GPIO_ReadPin>
 80028da:	4603      	mov	r3, r0
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	461a      	mov	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	607b      	str	r3, [r7, #4]

	//IG1 - Igniter (PA_10)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 9);
 80028e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ee:	f001 fbad 	bl	800404c <HAL_GPIO_ReadPin>
 80028f2:	4603      	mov	r3, r0
 80028f4:	025b      	lsls	r3, r3, #9
 80028f6:	461a      	mov	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	607b      	str	r3, [r7, #4]

	return vc;
 80028fe:	687b      	ldr	r3, [r7, #4]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	48000800 	.word	0x48000800
 800290c:	48000400 	.word	0x48000400

08002910 <ValveStateSetter>:
 *
 *  Notes:
 */

uint32_t ValveStateSetter(uint32_t vs)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
	//SOV1
	(vs & (uint32_t)SOV1) == (uint32_t)SOV1 \
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f003 0301 	and.w	r3, r3, #1
			? HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_RESET);
 8002922:	2b00      	cmp	r3, #0
 8002924:	d007      	beq.n	8002936 <ValveStateSetter+0x26>
			? HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_SET) \
 8002926:	2201      	movs	r2, #1
 8002928:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800292c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002930:	f001 fba4 	bl	800407c <HAL_GPIO_WritePin>
 8002934:	e006      	b.n	8002944 <ValveStateSetter+0x34>
			: HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_RESET);
 8002936:	2200      	movs	r2, #0
 8002938:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800293c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002940:	f001 fb9c 	bl	800407c <HAL_GPIO_WritePin>

	//SOV2
	(vs & (uint32_t)SOV2) == (uint32_t)SOV2 \
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f003 0302 	and.w	r3, r3, #2
			? HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_RESET);
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <ValveStateSetter+0x4e>
			? HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_SET) \
 800294e:	2201      	movs	r2, #1
 8002950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002958:	f001 fb90 	bl	800407c <HAL_GPIO_WritePin>
 800295c:	e006      	b.n	800296c <ValveStateSetter+0x5c>
			: HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_RESET);
 800295e:	2200      	movs	r2, #0
 8002960:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002968:	f001 fb88 	bl	800407c <HAL_GPIO_WritePin>

	//SOV3
	(vs & (uint32_t)SOV3) == (uint32_t)SOV3 \
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f003 0304 	and.w	r3, r3, #4
			? HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_RESET);
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <ValveStateSetter+0x72>
			? HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_SET) \
 8002976:	2201      	movs	r2, #1
 8002978:	2180      	movs	r1, #128	; 0x80
 800297a:	484d      	ldr	r0, [pc, #308]	; (8002ab0 <ValveStateSetter+0x1a0>)
 800297c:	f001 fb7e 	bl	800407c <HAL_GPIO_WritePin>
 8002980:	e004      	b.n	800298c <ValveStateSetter+0x7c>
			: HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_RESET);
 8002982:	2200      	movs	r2, #0
 8002984:	2180      	movs	r1, #128	; 0x80
 8002986:	484a      	ldr	r0, [pc, #296]	; (8002ab0 <ValveStateSetter+0x1a0>)
 8002988:	f001 fb78 	bl	800407c <HAL_GPIO_WritePin>

	//SOV4
	(vs & (uint32_t)SOV4) == (uint32_t)SOV4 \
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f003 0308 	and.w	r3, r3, #8
			? HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_RESET);
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <ValveStateSetter+0x92>
			? HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_SET) \
 8002996:	2201      	movs	r2, #1
 8002998:	2140      	movs	r1, #64	; 0x40
 800299a:	4845      	ldr	r0, [pc, #276]	; (8002ab0 <ValveStateSetter+0x1a0>)
 800299c:	f001 fb6e 	bl	800407c <HAL_GPIO_WritePin>
 80029a0:	e004      	b.n	80029ac <ValveStateSetter+0x9c>
			: HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_RESET);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2140      	movs	r1, #64	; 0x40
 80029a6:	4842      	ldr	r0, [pc, #264]	; (8002ab0 <ValveStateSetter+0x1a0>)
 80029a8:	f001 fb68 	bl	800407c <HAL_GPIO_WritePin>

	//SOV5
	(vs & (uint32_t)SOV5) == (uint32_t)SOV5 \
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f003 0310 	and.w	r3, r3, #16
			? HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_RESET);
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d007      	beq.n	80029c6 <ValveStateSetter+0xb6>
			? HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_SET) \
 80029b6:	2201      	movs	r2, #1
 80029b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c0:	f001 fb5c 	bl	800407c <HAL_GPIO_WritePin>
 80029c4:	e006      	b.n	80029d4 <ValveStateSetter+0xc4>
			: HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_RESET);
 80029c6:	2200      	movs	r2, #0
 80029c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d0:	f001 fb54 	bl	800407c <HAL_GPIO_WritePin>

	//SOV6
	(vs & (uint32_t)SOV6) == (uint32_t)SOV6 \
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f003 0320 	and.w	r3, r3, #32
			? HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_RESET);
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <ValveStateSetter+0xde>
			? HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_SET) \
 80029de:	2201      	movs	r2, #1
 80029e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e8:	f001 fb48 	bl	800407c <HAL_GPIO_WritePin>
 80029ec:	e006      	b.n	80029fc <ValveStateSetter+0xec>
			: HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_RESET);
 80029ee:	2200      	movs	r2, #0
 80029f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f8:	f001 fb40 	bl	800407c <HAL_GPIO_WritePin>

	//SOV7
	(vs & (uint32_t)SOV7) == (uint32_t)SOV7 \
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
			? HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin ,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin,GPIO_PIN_RESET);
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d006      	beq.n	8002a14 <ValveStateSetter+0x104>
			? HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin ,GPIO_PIN_SET) \
 8002a06:	2201      	movs	r2, #1
 8002a08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a0c:	4829      	ldr	r0, [pc, #164]	; (8002ab4 <ValveStateSetter+0x1a4>)
 8002a0e:	f001 fb35 	bl	800407c <HAL_GPIO_WritePin>
 8002a12:	e005      	b.n	8002a20 <ValveStateSetter+0x110>
			: HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin,GPIO_PIN_RESET);
 8002a14:	2200      	movs	r2, #0
 8002a16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a1a:	4826      	ldr	r0, [pc, #152]	; (8002ab4 <ValveStateSetter+0x1a4>)
 8002a1c:	f001 fb2e 	bl	800407c <HAL_GPIO_WritePin>

	//SOV8
	(vs & (uint32_t)SOV8) == (uint32_t)SOV8 \
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
			? HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_RESET);
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <ValveStateSetter+0x128>
			? HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_SET) \
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a30:	4820      	ldr	r0, [pc, #128]	; (8002ab4 <ValveStateSetter+0x1a4>)
 8002a32:	f001 fb23 	bl	800407c <HAL_GPIO_WritePin>
 8002a36:	e005      	b.n	8002a44 <ValveStateSetter+0x134>
			: HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_RESET);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a3e:	481d      	ldr	r0, [pc, #116]	; (8002ab4 <ValveStateSetter+0x1a4>)
 8002a40:	f001 fb1c 	bl	800407c <HAL_GPIO_WritePin>

	//SOV9
	(vs & (uint32_t)SOV9) == (uint32_t)SOV9 \
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
			? HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_RESET);
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d006      	beq.n	8002a5c <ValveStateSetter+0x14c>
			? HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_SET) \
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a54:	4817      	ldr	r0, [pc, #92]	; (8002ab4 <ValveStateSetter+0x1a4>)
 8002a56:	f001 fb11 	bl	800407c <HAL_GPIO_WritePin>
 8002a5a:	e005      	b.n	8002a68 <ValveStateSetter+0x158>
			: HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_RESET);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a62:	4814      	ldr	r0, [pc, #80]	; (8002ab4 <ValveStateSetter+0x1a4>)
 8002a64:	f001 fb0a 	bl	800407c <HAL_GPIO_WritePin>

	//IG1
	(vs & (uint32_t)IG1) == (uint32_t)IG1 \
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
			? HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d007      	beq.n	8002a82 <ValveStateSetter+0x172>
			? HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET) \
 8002a72:	2201      	movs	r2, #1
 8002a74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a7c:	f001 fafe 	bl	800407c <HAL_GPIO_WritePin>
 8002a80:	e006      	b.n	8002a90 <ValveStateSetter+0x180>
			: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
 8002a82:	2200      	movs	r2, #0
 8002a84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a8c:	f001 faf6 	bl	800407c <HAL_GPIO_WritePin>


	success = (vs == StateConfiguration() ? TRUE : FALSE);
 8002a90:	f7ff fec0 	bl	8002814 <StateConfiguration>
 8002a94:	4602      	mov	r2, r0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	60fb      	str	r3, [r7, #12]

	return success;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	48000800 	.word	0x48000800
 8002ab4:	48000400 	.word	0x48000400

08002ab8 <StateInitialize>:
 *  success <uint32_t>: TRUE | FALSE | 1 | 0
 *
 *  Notes:
 */
uint32_t StateInitialize(struct StateVars *ctrl)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
	// Reset state counter, log start
	ctrl->stateCounter = 0;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	609a      	str	r2, [r3, #8]
	ctrl->timeStarted = HAL_GetTick();;
 8002aca:	f000 ff97 	bl	80039fc <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	601a      	str	r2, [r3, #0]

	// Change State conditions
	ctrl->lastState = ctrl->currentState;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	// Set Valve States
	ValveStateSetter(ctrl->valveTarget);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff13 	bl	8002910 <ValveStateSetter>
	ctrl->valveConfiguration = StateConfiguration();
 8002aea:	f7ff fe93 	bl	8002814 <StateConfiguration>
 8002aee:	4602      	mov	r2, r0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	62da      	str	r2, [r3, #44]	; 0x2c

	///success = SendStatusMessage(ctrl);
	return success;
 8002af4:	68fb      	ldr	r3, [r7, #12]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <ValveCheckCmd>:


//Function to handle individual valves (Part of the Valve check state)
void ValveCheckCmd(struct StateVars *ctrl){
 8002b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b02:	b08f      	sub	sp, #60	; 0x3c
 8002b04:	af08      	add	r7, sp, #32
 8002b06:	60f8      	str	r0, [r7, #12]

	uint32_t success = TRUE;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	617b      	str	r3, [r7, #20]

    	   if (command == IGON){
 8002b0c:	4bae      	ldr	r3, [pc, #696]	; (8002dc8 <ValveCheckCmd+0x2c8>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4bae      	ldr	r3, [pc, #696]	; (8002dcc <ValveCheckCmd+0x2cc>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d137      	bne.n	8002b88 <ValveCheckCmd+0x88>
				if (cmd_flag && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8002b18:	4bad      	ldr	r3, [pc, #692]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d01b      	beq.n	8002b58 <ValveCheckCmd+0x58>
 8002b20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b28:	f001 fa90 	bl	800404c <HAL_GPIO_ReadPin>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d112      	bne.n	8002b58 <ValveCheckCmd+0x58>
					valves_selected |= (uint16_t)IG1;
 8002b32:	4ba8      	ldr	r3, [pc, #672]	; (8002dd4 <ValveCheckCmd+0x2d4>)
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	4ba5      	ldr	r3, [pc, #660]	; (8002dd4 <ValveCheckCmd+0x2d4>)
 8002b3e:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " Igniter is ON...\n");
 8002b40:	49a5      	ldr	r1, [pc, #660]	; (8002dd8 <ValveCheckCmd+0x2d8>)
 8002b42:	48a6      	ldr	r0, [pc, #664]	; (8002ddc <ValveCheckCmd+0x2dc>)
 8002b44:	f7fe f9b2 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002b48:	4ba1      	ldr	r3, [pc, #644]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
					ignit = 1;
 8002b4e:	4ba4      	ldr	r3, [pc, #656]	; (8002de0 <ValveCheckCmd+0x2e0>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	f000 bddb 	b.w	800370e <ValveCheckCmd+0xc0e>
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 8002b58:	4b9d      	ldr	r3, [pc, #628]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 85d6 	beq.w	800370e <ValveCheckCmd+0xc0e>
 8002b62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b6a:	f001 fa6f 	bl	800404c <HAL_GPIO_ReadPin>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 85cc 	beq.w	800370e <ValveCheckCmd+0xc0e>
				{
					UART_SendMessage(&huart2, " Igniter is already ON...\n");
 8002b76:	499b      	ldr	r1, [pc, #620]	; (8002de4 <ValveCheckCmd+0x2e4>)
 8002b78:	4898      	ldr	r0, [pc, #608]	; (8002ddc <ValveCheckCmd+0x2dc>)
 8002b7a:	f7fe f997 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002b7e:	4b94      	ldr	r3, [pc, #592]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	f000 bdc3 	b.w	800370e <ValveCheckCmd+0xc0e>
				}
			}
			else if (command == IGOFF){
 8002b88:	4b8f      	ldr	r3, [pc, #572]	; (8002dc8 <ValveCheckCmd+0x2c8>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b96      	ldr	r3, [pc, #600]	; (8002de8 <ValveCheckCmd+0x2e8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d136      	bne.n	8002c02 <ValveCheckCmd+0x102>
				if (cmd_flag && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8002b94:	4b8e      	ldr	r3, [pc, #568]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01a      	beq.n	8002bd2 <ValveCheckCmd+0xd2>
 8002b9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba4:	f001 fa52 	bl	800404c <HAL_GPIO_ReadPin>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d011      	beq.n	8002bd2 <ValveCheckCmd+0xd2>
					valves_selected &= 0xFF;
 8002bae:	4b89      	ldr	r3, [pc, #548]	; (8002dd4 <ValveCheckCmd+0x2d4>)
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	4b87      	ldr	r3, [pc, #540]	; (8002dd4 <ValveCheckCmd+0x2d4>)
 8002bb8:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " Igniter is OFF...\n");
 8002bba:	498c      	ldr	r1, [pc, #560]	; (8002dec <ValveCheckCmd+0x2ec>)
 8002bbc:	4887      	ldr	r0, [pc, #540]	; (8002ddc <ValveCheckCmd+0x2dc>)
 8002bbe:	f7fe f975 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002bc2:	4b83      	ldr	r3, [pc, #524]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
					ignit = 0;
 8002bc8:	4b85      	ldr	r3, [pc, #532]	; (8002de0 <ValveCheckCmd+0x2e0>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	f000 bd9e 	b.w	800370e <ValveCheckCmd+0xc0e>

				}
				else if (cmd_flag && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8002bd2:	4b7f      	ldr	r3, [pc, #508]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8599 	beq.w	800370e <ValveCheckCmd+0xc0e>
 8002bdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be4:	f001 fa32 	bl	800404c <HAL_GPIO_ReadPin>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 858f 	bne.w	800370e <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " Igniter is already OFF...\n");
 8002bf0:	497f      	ldr	r1, [pc, #508]	; (8002df0 <ValveCheckCmd+0x2f0>)
 8002bf2:	487a      	ldr	r0, [pc, #488]	; (8002ddc <ValveCheckCmd+0x2dc>)
 8002bf4:	f7fe f95a 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002bf8:	4b75      	ldr	r3, [pc, #468]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	f000 bd86 	b.w	800370e <ValveCheckCmd+0xc0e>
				}

			}
			else if(command == SOV1ON){
 8002c02:	4b71      	ldr	r3, [pc, #452]	; (8002dc8 <ValveCheckCmd+0x2c8>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	4b7b      	ldr	r3, [pc, #492]	; (8002df4 <ValveCheckCmd+0x2f4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d137      	bne.n	8002c7e <ValveCheckCmd+0x17e>
				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 8002c0e:	4b70      	ldr	r3, [pc, #448]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d01b      	beq.n	8002c4e <ValveCheckCmd+0x14e>
 8002c16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c1e:	f001 fa15 	bl	800404c <HAL_GPIO_ReadPin>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d112      	bne.n	8002c4e <ValveCheckCmd+0x14e>
					valves_selected |= (uint16_t)SOV1;
 8002c28:	4b6a      	ldr	r3, [pc, #424]	; (8002dd4 <ValveCheckCmd+0x2d4>)
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	4b68      	ldr	r3, [pc, #416]	; (8002dd4 <ValveCheckCmd+0x2d4>)
 8002c34:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV1 is ON...\n");
 8002c36:	4970      	ldr	r1, [pc, #448]	; (8002df8 <ValveCheckCmd+0x2f8>)
 8002c38:	4868      	ldr	r0, [pc, #416]	; (8002ddc <ValveCheckCmd+0x2dc>)
 8002c3a:	f7fe f937 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002c3e:	4b64      	ldr	r3, [pc, #400]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
					v1 =1;
 8002c44:	4b6d      	ldr	r3, [pc, #436]	; (8002dfc <ValveCheckCmd+0x2fc>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	f000 bd60 	b.w	800370e <ValveCheckCmd+0xc0e>
				}
				else if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 8002c4e:	4b60      	ldr	r3, [pc, #384]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 855b 	beq.w	800370e <ValveCheckCmd+0xc0e>
 8002c58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c60:	f001 f9f4 	bl	800404c <HAL_GPIO_ReadPin>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 8551 	beq.w	800370e <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV1 is already ON...\n");
 8002c6c:	4964      	ldr	r1, [pc, #400]	; (8002e00 <ValveCheckCmd+0x300>)
 8002c6e:	485b      	ldr	r0, [pc, #364]	; (8002ddc <ValveCheckCmd+0x2dc>)
 8002c70:	f7fe f91c 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002c74:	4b56      	ldr	r3, [pc, #344]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	f000 bd48 	b.w	800370e <ValveCheckCmd+0xc0e>
				}
			}
			else if (command == SOV1OFF){
 8002c7e:	4b52      	ldr	r3, [pc, #328]	; (8002dc8 <ValveCheckCmd+0x2c8>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4b60      	ldr	r3, [pc, #384]	; (8002e04 <ValveCheckCmd+0x304>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d138      	bne.n	8002cfc <ValveCheckCmd+0x1fc>
				if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 8002c8a:	4b51      	ldr	r3, [pc, #324]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01c      	beq.n	8002ccc <ValveCheckCmd+0x1cc>
 8002c92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c9a:	f001 f9d7 	bl	800404c <HAL_GPIO_ReadPin>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d013      	beq.n	8002ccc <ValveCheckCmd+0x1cc>
					valves_selected &= 0x3FE;
 8002ca4:	4b4b      	ldr	r3, [pc, #300]	; (8002dd4 <ValveCheckCmd+0x2d4>)
 8002ca6:	881a      	ldrh	r2, [r3, #0]
 8002ca8:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8002cac:	4013      	ands	r3, r2
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	4b48      	ldr	r3, [pc, #288]	; (8002dd4 <ValveCheckCmd+0x2d4>)
 8002cb2:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV1 is OFF...\n");
 8002cb4:	4954      	ldr	r1, [pc, #336]	; (8002e08 <ValveCheckCmd+0x308>)
 8002cb6:	4849      	ldr	r0, [pc, #292]	; (8002ddc <ValveCheckCmd+0x2dc>)
 8002cb8:	f7fe f8f8 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002cbc:	4b44      	ldr	r3, [pc, #272]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
					v1=0;
 8002cc2:	4b4e      	ldr	r3, [pc, #312]	; (8002dfc <ValveCheckCmd+0x2fc>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	f000 bd21 	b.w	800370e <ValveCheckCmd+0xc0e>
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 8002ccc:	4b40      	ldr	r3, [pc, #256]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 851c 	beq.w	800370e <ValveCheckCmd+0xc0e>
 8002cd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cde:	f001 f9b5 	bl	800404c <HAL_GPIO_ReadPin>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f040 8512 	bne.w	800370e <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV1 is already OFF...\n");
 8002cea:	4948      	ldr	r1, [pc, #288]	; (8002e0c <ValveCheckCmd+0x30c>)
 8002cec:	483b      	ldr	r0, [pc, #236]	; (8002ddc <ValveCheckCmd+0x2dc>)
 8002cee:	f7fe f8dd 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002cf2:	4b37      	ldr	r3, [pc, #220]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	f000 bd09 	b.w	800370e <ValveCheckCmd+0xc0e>
				}
			}
			else if(command == SOV2ON){
 8002cfc:	4b32      	ldr	r3, [pc, #200]	; (8002dc8 <ValveCheckCmd+0x2c8>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b43      	ldr	r3, [pc, #268]	; (8002e10 <ValveCheckCmd+0x310>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d137      	bne.n	8002d78 <ValveCheckCmd+0x278>
				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 8002d08:	4b31      	ldr	r3, [pc, #196]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d01b      	beq.n	8002d48 <ValveCheckCmd+0x248>
 8002d10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d18:	f001 f998 	bl	800404c <HAL_GPIO_ReadPin>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d112      	bne.n	8002d48 <ValveCheckCmd+0x248>
					valves_selected |= (uint16_t)SOV2;
 8002d22:	4b2c      	ldr	r3, [pc, #176]	; (8002dd4 <ValveCheckCmd+0x2d4>)
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	f043 0302 	orr.w	r3, r3, #2
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <ValveCheckCmd+0x2d4>)
 8002d2e:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV2 is ON...\n");
 8002d30:	4938      	ldr	r1, [pc, #224]	; (8002e14 <ValveCheckCmd+0x314>)
 8002d32:	482a      	ldr	r0, [pc, #168]	; (8002ddc <ValveCheckCmd+0x2dc>)
 8002d34:	f7fe f8ba 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002d38:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
					v2=1;
 8002d3e:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <ValveCheckCmd+0x318>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	f000 bce3 	b.w	800370e <ValveCheckCmd+0xc0e>

				}
				else if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 8002d48:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 84de 	beq.w	800370e <ValveCheckCmd+0xc0e>
 8002d52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d5a:	f001 f977 	bl	800404c <HAL_GPIO_ReadPin>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 84d4 	beq.w	800370e <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV2 is already ON...\n");
 8002d66:	492d      	ldr	r1, [pc, #180]	; (8002e1c <ValveCheckCmd+0x31c>)
 8002d68:	481c      	ldr	r0, [pc, #112]	; (8002ddc <ValveCheckCmd+0x2dc>)
 8002d6a:	f7fe f89f 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002d6e:	4b18      	ldr	r3, [pc, #96]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	f000 bccb 	b.w	800370e <ValveCheckCmd+0xc0e>
				}

			}
			else if (command == SOV2OFF){
 8002d78:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <ValveCheckCmd+0x2c8>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <ValveCheckCmd+0x320>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d169      	bne.n	8002e58 <ValveCheckCmd+0x358>
				if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 8002d84:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d04d      	beq.n	8002e28 <ValveCheckCmd+0x328>
 8002d8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d94:	f001 f95a 	bl	800404c <HAL_GPIO_ReadPin>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d044      	beq.n	8002e28 <ValveCheckCmd+0x328>
					valves_selected &= 0x1FD;
 8002d9e:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <ValveCheckCmd+0x2d4>)
 8002da0:	881a      	ldrh	r2, [r3, #0]
 8002da2:	f240 13fd 	movw	r3, #509	; 0x1fd
 8002da6:	4013      	ands	r3, r2
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <ValveCheckCmd+0x2d4>)
 8002dac:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV2 is OFF...\n");
 8002dae:	491d      	ldr	r1, [pc, #116]	; (8002e24 <ValveCheckCmd+0x324>)
 8002db0:	480a      	ldr	r0, [pc, #40]	; (8002ddc <ValveCheckCmd+0x2dc>)
 8002db2:	f7fe f87b 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <ValveCheckCmd+0x2d0>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
					v2=0;
 8002dbc:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <ValveCheckCmd+0x318>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	f000 bca4 	b.w	800370e <ValveCheckCmd+0xc0e>
 8002dc6:	bf00      	nop
 8002dc8:	20000194 	.word	0x20000194
 8002dcc:	20000098 	.word	0x20000098
 8002dd0:	20000210 	.word	0x20000210
 8002dd4:	20000414 	.word	0x20000414
 8002dd8:	08006908 	.word	0x08006908
 8002ddc:	20000384 	.word	0x20000384
 8002de0:	20000208 	.word	0x20000208
 8002de4:	0800691c 	.word	0x0800691c
 8002de8:	2000009c 	.word	0x2000009c
 8002dec:	08006938 	.word	0x08006938
 8002df0:	0800694c 	.word	0x0800694c
 8002df4:	200000a0 	.word	0x200000a0
 8002df8:	08006968 	.word	0x08006968
 8002dfc:	2000018c 	.word	0x2000018c
 8002e00:	08006978 	.word	0x08006978
 8002e04:	200000a4 	.word	0x200000a4
 8002e08:	08006990 	.word	0x08006990
 8002e0c:	080069a4 	.word	0x080069a4
 8002e10:	200000a8 	.word	0x200000a8
 8002e14:	080069c0 	.word	0x080069c0
 8002e18:	20000314 	.word	0x20000314
 8002e1c:	080069d0 	.word	0x080069d0
 8002e20:	200000ac 	.word	0x200000ac
 8002e24:	080069e8 	.word	0x080069e8
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 8002e28:	4b9b      	ldr	r3, [pc, #620]	; (8003098 <ValveCheckCmd+0x598>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 846e 	beq.w	800370e <ValveCheckCmd+0xc0e>
 8002e32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e3a:	f001 f907 	bl	800404c <HAL_GPIO_ReadPin>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f040 8464 	bne.w	800370e <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV2 is already OFF...\n");
 8002e46:	4995      	ldr	r1, [pc, #596]	; (800309c <ValveCheckCmd+0x59c>)
 8002e48:	4895      	ldr	r0, [pc, #596]	; (80030a0 <ValveCheckCmd+0x5a0>)
 8002e4a:	f7fe f82f 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002e4e:	4b92      	ldr	r3, [pc, #584]	; (8003098 <ValveCheckCmd+0x598>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	f000 bc5b 	b.w	800370e <ValveCheckCmd+0xc0e>
				}
			}
			else if(command == SOV3ON){
 8002e58:	4b92      	ldr	r3, [pc, #584]	; (80030a4 <ValveCheckCmd+0x5a4>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b92      	ldr	r3, [pc, #584]	; (80030a8 <ValveCheckCmd+0x5a8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d133      	bne.n	8002ecc <ValveCheckCmd+0x3cc>
				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin))){
 8002e64:	4b8c      	ldr	r3, [pc, #560]	; (8003098 <ValveCheckCmd+0x598>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d019      	beq.n	8002ea0 <ValveCheckCmd+0x3a0>
 8002e6c:	2180      	movs	r1, #128	; 0x80
 8002e6e:	488f      	ldr	r0, [pc, #572]	; (80030ac <ValveCheckCmd+0x5ac>)
 8002e70:	f001 f8ec 	bl	800404c <HAL_GPIO_ReadPin>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d112      	bne.n	8002ea0 <ValveCheckCmd+0x3a0>
					valves_selected |= (uint16_t)SOV3;
 8002e7a:	4b8d      	ldr	r3, [pc, #564]	; (80030b0 <ValveCheckCmd+0x5b0>)
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	f043 0304 	orr.w	r3, r3, #4
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	4b8a      	ldr	r3, [pc, #552]	; (80030b0 <ValveCheckCmd+0x5b0>)
 8002e86:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV3 is ON...\n");
 8002e88:	498a      	ldr	r1, [pc, #552]	; (80030b4 <ValveCheckCmd+0x5b4>)
 8002e8a:	4885      	ldr	r0, [pc, #532]	; (80030a0 <ValveCheckCmd+0x5a0>)
 8002e8c:	f7fe f80e 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002e90:	4b81      	ldr	r3, [pc, #516]	; (8003098 <ValveCheckCmd+0x598>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
					v3=1;
 8002e96:	4b88      	ldr	r3, [pc, #544]	; (80030b8 <ValveCheckCmd+0x5b8>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	f000 bc37 	b.w	800370e <ValveCheckCmd+0xc0e>
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin)){
 8002ea0:	4b7d      	ldr	r3, [pc, #500]	; (8003098 <ValveCheckCmd+0x598>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 8432 	beq.w	800370e <ValveCheckCmd+0xc0e>
 8002eaa:	2180      	movs	r1, #128	; 0x80
 8002eac:	487f      	ldr	r0, [pc, #508]	; (80030ac <ValveCheckCmd+0x5ac>)
 8002eae:	f001 f8cd 	bl	800404c <HAL_GPIO_ReadPin>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 842a 	beq.w	800370e <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV3 is already ON...\n");
 8002eba:	4980      	ldr	r1, [pc, #512]	; (80030bc <ValveCheckCmd+0x5bc>)
 8002ebc:	4878      	ldr	r0, [pc, #480]	; (80030a0 <ValveCheckCmd+0x5a0>)
 8002ebe:	f7fd fff5 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002ec2:	4b75      	ldr	r3, [pc, #468]	; (8003098 <ValveCheckCmd+0x598>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	f000 bc21 	b.w	800370e <ValveCheckCmd+0xc0e>
				}
			}
			else if (command == SOV3OFF){
 8002ecc:	4b75      	ldr	r3, [pc, #468]	; (80030a4 <ValveCheckCmd+0x5a4>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4b7b      	ldr	r3, [pc, #492]	; (80030c0 <ValveCheckCmd+0x5c0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d132      	bne.n	8002f3e <ValveCheckCmd+0x43e>
				if (cmd_flag && HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin)){
 8002ed8:	4b6f      	ldr	r3, [pc, #444]	; (8003098 <ValveCheckCmd+0x598>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d019      	beq.n	8002f14 <ValveCheckCmd+0x414>
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	4872      	ldr	r0, [pc, #456]	; (80030ac <ValveCheckCmd+0x5ac>)
 8002ee4:	f001 f8b2 	bl	800404c <HAL_GPIO_ReadPin>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d012      	beq.n	8002f14 <ValveCheckCmd+0x414>
					valves_selected &= 0x3FB;
 8002eee:	4b70      	ldr	r3, [pc, #448]	; (80030b0 <ValveCheckCmd+0x5b0>)
 8002ef0:	881a      	ldrh	r2, [r3, #0]
 8002ef2:	f240 33fb 	movw	r3, #1019	; 0x3fb
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	4b6d      	ldr	r3, [pc, #436]	; (80030b0 <ValveCheckCmd+0x5b0>)
 8002efc:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV3 is OFF...\n");
 8002efe:	4971      	ldr	r1, [pc, #452]	; (80030c4 <ValveCheckCmd+0x5c4>)
 8002f00:	4867      	ldr	r0, [pc, #412]	; (80030a0 <ValveCheckCmd+0x5a0>)
 8002f02:	f7fd ffd3 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002f06:	4b64      	ldr	r3, [pc, #400]	; (8003098 <ValveCheckCmd+0x598>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
					v3=0;
 8002f0c:	4b6a      	ldr	r3, [pc, #424]	; (80030b8 <ValveCheckCmd+0x5b8>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	e3fc      	b.n	800370e <ValveCheckCmd+0xc0e>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin))) {
 8002f14:	4b60      	ldr	r3, [pc, #384]	; (8003098 <ValveCheckCmd+0x598>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 83f8 	beq.w	800370e <ValveCheckCmd+0xc0e>
 8002f1e:	2180      	movs	r1, #128	; 0x80
 8002f20:	4862      	ldr	r0, [pc, #392]	; (80030ac <ValveCheckCmd+0x5ac>)
 8002f22:	f001 f893 	bl	800404c <HAL_GPIO_ReadPin>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f040 83f0 	bne.w	800370e <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV3 is already OFF...\n");
 8002f2e:	4966      	ldr	r1, [pc, #408]	; (80030c8 <ValveCheckCmd+0x5c8>)
 8002f30:	485b      	ldr	r0, [pc, #364]	; (80030a0 <ValveCheckCmd+0x5a0>)
 8002f32:	f7fd ffbb 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002f36:	4b58      	ldr	r3, [pc, #352]	; (8003098 <ValveCheckCmd+0x598>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	e3e7      	b.n	800370e <ValveCheckCmd+0xc0e>
				}
			}
			else if(command == SOV4ON){
 8002f3e:	4b59      	ldr	r3, [pc, #356]	; (80030a4 <ValveCheckCmd+0x5a4>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4b62      	ldr	r3, [pc, #392]	; (80030cc <ValveCheckCmd+0x5cc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d131      	bne.n	8002fae <ValveCheckCmd+0x4ae>
				if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin))){
 8002f4a:	4b53      	ldr	r3, [pc, #332]	; (8003098 <ValveCheckCmd+0x598>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d018      	beq.n	8002f84 <ValveCheckCmd+0x484>
 8002f52:	2140      	movs	r1, #64	; 0x40
 8002f54:	4855      	ldr	r0, [pc, #340]	; (80030ac <ValveCheckCmd+0x5ac>)
 8002f56:	f001 f879 	bl	800404c <HAL_GPIO_ReadPin>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d111      	bne.n	8002f84 <ValveCheckCmd+0x484>
					valves_selected |= (uint16_t)SOV4;
 8002f60:	4b53      	ldr	r3, [pc, #332]	; (80030b0 <ValveCheckCmd+0x5b0>)
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	f043 0308 	orr.w	r3, r3, #8
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	4b51      	ldr	r3, [pc, #324]	; (80030b0 <ValveCheckCmd+0x5b0>)
 8002f6c:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV4 is ON...\n");
 8002f6e:	4958      	ldr	r1, [pc, #352]	; (80030d0 <ValveCheckCmd+0x5d0>)
 8002f70:	484b      	ldr	r0, [pc, #300]	; (80030a0 <ValveCheckCmd+0x5a0>)
 8002f72:	f7fd ff9b 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002f76:	4b48      	ldr	r3, [pc, #288]	; (8003098 <ValveCheckCmd+0x598>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
					v4=1;
 8002f7c:	4b55      	ldr	r3, [pc, #340]	; (80030d4 <ValveCheckCmd+0x5d4>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	e3c4      	b.n	800370e <ValveCheckCmd+0xc0e>

				}
				else if (cmd_flag && HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin)){
 8002f84:	4b44      	ldr	r3, [pc, #272]	; (8003098 <ValveCheckCmd+0x598>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 83c0 	beq.w	800370e <ValveCheckCmd+0xc0e>
 8002f8e:	2140      	movs	r1, #64	; 0x40
 8002f90:	4846      	ldr	r0, [pc, #280]	; (80030ac <ValveCheckCmd+0x5ac>)
 8002f92:	f001 f85b 	bl	800404c <HAL_GPIO_ReadPin>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 83b8 	beq.w	800370e <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV4 is already ON...\n");
 8002f9e:	494e      	ldr	r1, [pc, #312]	; (80030d8 <ValveCheckCmd+0x5d8>)
 8002fa0:	483f      	ldr	r0, [pc, #252]	; (80030a0 <ValveCheckCmd+0x5a0>)
 8002fa2:	f7fd ff83 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002fa6:	4b3c      	ldr	r3, [pc, #240]	; (8003098 <ValveCheckCmd+0x598>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	e3af      	b.n	800370e <ValveCheckCmd+0xc0e>
				}
			}
			else if (command == SOV4OFF){
 8002fae:	4b3d      	ldr	r3, [pc, #244]	; (80030a4 <ValveCheckCmd+0x5a4>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	4b4a      	ldr	r3, [pc, #296]	; (80030dc <ValveCheckCmd+0x5dc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d132      	bne.n	8003020 <ValveCheckCmd+0x520>


				if (cmd_flag && HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin)){
 8002fba:	4b37      	ldr	r3, [pc, #220]	; (8003098 <ValveCheckCmd+0x598>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d019      	beq.n	8002ff6 <ValveCheckCmd+0x4f6>
 8002fc2:	2140      	movs	r1, #64	; 0x40
 8002fc4:	4839      	ldr	r0, [pc, #228]	; (80030ac <ValveCheckCmd+0x5ac>)
 8002fc6:	f001 f841 	bl	800404c <HAL_GPIO_ReadPin>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d012      	beq.n	8002ff6 <ValveCheckCmd+0x4f6>
					valves_selected &= 0x3F7;
 8002fd0:	4b37      	ldr	r3, [pc, #220]	; (80030b0 <ValveCheckCmd+0x5b0>)
 8002fd2:	881a      	ldrh	r2, [r3, #0]
 8002fd4:	f240 33f7 	movw	r3, #1015	; 0x3f7
 8002fd8:	4013      	ands	r3, r2
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	4b34      	ldr	r3, [pc, #208]	; (80030b0 <ValveCheckCmd+0x5b0>)
 8002fde:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV4 is OFF...\n");
 8002fe0:	493f      	ldr	r1, [pc, #252]	; (80030e0 <ValveCheckCmd+0x5e0>)
 8002fe2:	482f      	ldr	r0, [pc, #188]	; (80030a0 <ValveCheckCmd+0x5a0>)
 8002fe4:	f7fd ff62 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8002fe8:	4b2b      	ldr	r3, [pc, #172]	; (8003098 <ValveCheckCmd+0x598>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
					v4=0;
 8002fee:	4b39      	ldr	r3, [pc, #228]	; (80030d4 <ValveCheckCmd+0x5d4>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e38b      	b.n	800370e <ValveCheckCmd+0xc0e>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin))){
 8002ff6:	4b28      	ldr	r3, [pc, #160]	; (8003098 <ValveCheckCmd+0x598>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8387 	beq.w	800370e <ValveCheckCmd+0xc0e>
 8003000:	2140      	movs	r1, #64	; 0x40
 8003002:	482a      	ldr	r0, [pc, #168]	; (80030ac <ValveCheckCmd+0x5ac>)
 8003004:	f001 f822 	bl	800404c <HAL_GPIO_ReadPin>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	f040 837f 	bne.w	800370e <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV4 is already OFF...\n");
 8003010:	4934      	ldr	r1, [pc, #208]	; (80030e4 <ValveCheckCmd+0x5e4>)
 8003012:	4823      	ldr	r0, [pc, #140]	; (80030a0 <ValveCheckCmd+0x5a0>)
 8003014:	f7fd ff4a 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8003018:	4b1f      	ldr	r3, [pc, #124]	; (8003098 <ValveCheckCmd+0x598>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	e376      	b.n	800370e <ValveCheckCmd+0xc0e>
				}
			}
			else if(command == SOV5ON){
 8003020:	4b20      	ldr	r3, [pc, #128]	; (80030a4 <ValveCheckCmd+0x5a4>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <ValveCheckCmd+0x5e8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d165      	bne.n	80030f8 <ValveCheckCmd+0x5f8>
				if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin))){
 800302c:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <ValveCheckCmd+0x598>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01a      	beq.n	800306a <ValveCheckCmd+0x56a>
 8003034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800303c:	f001 f806 	bl	800404c <HAL_GPIO_ReadPin>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d111      	bne.n	800306a <ValveCheckCmd+0x56a>
					valves_selected |= (uint16_t)SOV5;
 8003046:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <ValveCheckCmd+0x5b0>)
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	f043 0310 	orr.w	r3, r3, #16
 800304e:	b29a      	uxth	r2, r3
 8003050:	4b17      	ldr	r3, [pc, #92]	; (80030b0 <ValveCheckCmd+0x5b0>)
 8003052:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV5 is ON...\n");
 8003054:	4925      	ldr	r1, [pc, #148]	; (80030ec <ValveCheckCmd+0x5ec>)
 8003056:	4812      	ldr	r0, [pc, #72]	; (80030a0 <ValveCheckCmd+0x5a0>)
 8003058:	f7fd ff28 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 800305c:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <ValveCheckCmd+0x598>)
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
					v5=1;
 8003062:	4b23      	ldr	r3, [pc, #140]	; (80030f0 <ValveCheckCmd+0x5f0>)
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e351      	b.n	800370e <ValveCheckCmd+0xc0e>
				}
				else if(cmd_flag && HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin)){
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <ValveCheckCmd+0x598>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 834d 	beq.w	800370e <ValveCheckCmd+0xc0e>
 8003074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800307c:	f000 ffe6 	bl	800404c <HAL_GPIO_ReadPin>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 8343 	beq.w	800370e <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV5 is already ON...\n");
 8003088:	491a      	ldr	r1, [pc, #104]	; (80030f4 <ValveCheckCmd+0x5f4>)
 800308a:	4805      	ldr	r0, [pc, #20]	; (80030a0 <ValveCheckCmd+0x5a0>)
 800308c:	f7fd ff0e 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8003090:	4b01      	ldr	r3, [pc, #4]	; (8003098 <ValveCheckCmd+0x598>)
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e33a      	b.n	800370e <ValveCheckCmd+0xc0e>
 8003098:	20000210 	.word	0x20000210
 800309c:	080069fc 	.word	0x080069fc
 80030a0:	20000384 	.word	0x20000384
 80030a4:	20000194 	.word	0x20000194
 80030a8:	200000b0 	.word	0x200000b0
 80030ac:	48000800 	.word	0x48000800
 80030b0:	20000414 	.word	0x20000414
 80030b4:	08006a18 	.word	0x08006a18
 80030b8:	20000204 	.word	0x20000204
 80030bc:	08006a28 	.word	0x08006a28
 80030c0:	200000b4 	.word	0x200000b4
 80030c4:	08006a40 	.word	0x08006a40
 80030c8:	08006a54 	.word	0x08006a54
 80030cc:	200000b8 	.word	0x200000b8
 80030d0:	08006a70 	.word	0x08006a70
 80030d4:	2000040c 	.word	0x2000040c
 80030d8:	08006a80 	.word	0x08006a80
 80030dc:	200000bc 	.word	0x200000bc
 80030e0:	08006a98 	.word	0x08006a98
 80030e4:	08006aac 	.word	0x08006aac
 80030e8:	200000c0 	.word	0x200000c0
 80030ec:	08006ac8 	.word	0x08006ac8
 80030f0:	2000037c 	.word	0x2000037c
 80030f4:	08006ad8 	.word	0x08006ad8
				}
			}
			else if (command == SOV5OFF){
 80030f8:	4ba7      	ldr	r3, [pc, #668]	; (8003398 <ValveCheckCmd+0x898>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4ba7      	ldr	r3, [pc, #668]	; (800339c <ValveCheckCmd+0x89c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d136      	bne.n	8003172 <ValveCheckCmd+0x672>


				if (cmd_flag && HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin)){
 8003104:	4ba6      	ldr	r3, [pc, #664]	; (80033a0 <ValveCheckCmd+0x8a0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01b      	beq.n	8003144 <ValveCheckCmd+0x644>
 800310c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003114:	f000 ff9a 	bl	800404c <HAL_GPIO_ReadPin>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d012      	beq.n	8003144 <ValveCheckCmd+0x644>
					valves_selected &= 0x3EF;
 800311e:	4ba1      	ldr	r3, [pc, #644]	; (80033a4 <ValveCheckCmd+0x8a4>)
 8003120:	881a      	ldrh	r2, [r3, #0]
 8003122:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8003126:	4013      	ands	r3, r2
 8003128:	b29a      	uxth	r2, r3
 800312a:	4b9e      	ldr	r3, [pc, #632]	; (80033a4 <ValveCheckCmd+0x8a4>)
 800312c:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV5 is OFF...\n");
 800312e:	499e      	ldr	r1, [pc, #632]	; (80033a8 <ValveCheckCmd+0x8a8>)
 8003130:	489e      	ldr	r0, [pc, #632]	; (80033ac <ValveCheckCmd+0x8ac>)
 8003132:	f7fd febb 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8003136:	4b9a      	ldr	r3, [pc, #616]	; (80033a0 <ValveCheckCmd+0x8a0>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
					v5=0;
 800313c:	4b9c      	ldr	r3, [pc, #624]	; (80033b0 <ValveCheckCmd+0x8b0>)
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	e2e4      	b.n	800370e <ValveCheckCmd+0xc0e>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin))) {
 8003144:	4b96      	ldr	r3, [pc, #600]	; (80033a0 <ValveCheckCmd+0x8a0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 82e0 	beq.w	800370e <ValveCheckCmd+0xc0e>
 800314e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003156:	f000 ff79 	bl	800404c <HAL_GPIO_ReadPin>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	f040 82d6 	bne.w	800370e <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV5 is already OFF...\n");
 8003162:	4994      	ldr	r1, [pc, #592]	; (80033b4 <ValveCheckCmd+0x8b4>)
 8003164:	4891      	ldr	r0, [pc, #580]	; (80033ac <ValveCheckCmd+0x8ac>)
 8003166:	f7fd fea1 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 800316a:	4b8d      	ldr	r3, [pc, #564]	; (80033a0 <ValveCheckCmd+0x8a0>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	e2cd      	b.n	800370e <ValveCheckCmd+0xc0e>
				}
			}
			else if(command == SOV6ON){
 8003172:	4b89      	ldr	r3, [pc, #548]	; (8003398 <ValveCheckCmd+0x898>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b90      	ldr	r3, [pc, #576]	; (80033b8 <ValveCheckCmd+0x8b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d135      	bne.n	80031ea <ValveCheckCmd+0x6ea>
				if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin))){
 800317e:	4b88      	ldr	r3, [pc, #544]	; (80033a0 <ValveCheckCmd+0x8a0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d01a      	beq.n	80031bc <ValveCheckCmd+0x6bc>
 8003186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800318a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800318e:	f000 ff5d 	bl	800404c <HAL_GPIO_ReadPin>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d111      	bne.n	80031bc <ValveCheckCmd+0x6bc>
				valves_selected |= (uint16_t)SOV6;
 8003198:	4b82      	ldr	r3, [pc, #520]	; (80033a4 <ValveCheckCmd+0x8a4>)
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	f043 0320 	orr.w	r3, r3, #32
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	4b80      	ldr	r3, [pc, #512]	; (80033a4 <ValveCheckCmd+0x8a4>)
 80031a4:	801a      	strh	r2, [r3, #0]
				UART_SendMessage(&huart2, " SOV6 is ON...\n");
 80031a6:	4985      	ldr	r1, [pc, #532]	; (80033bc <ValveCheckCmd+0x8bc>)
 80031a8:	4880      	ldr	r0, [pc, #512]	; (80033ac <ValveCheckCmd+0x8ac>)
 80031aa:	f7fd fe7f 	bl	8000eac <UART_SendMessage>
				cmd_flag = FALSE;
 80031ae:	4b7c      	ldr	r3, [pc, #496]	; (80033a0 <ValveCheckCmd+0x8a0>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
				v6=1;
 80031b4:	4b82      	ldr	r3, [pc, #520]	; (80033c0 <ValveCheckCmd+0x8c0>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	e2a8      	b.n	800370e <ValveCheckCmd+0xc0e>

				}
				else if (cmd_flag && HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin)){
 80031bc:	4b78      	ldr	r3, [pc, #480]	; (80033a0 <ValveCheckCmd+0x8a0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 82a4 	beq.w	800370e <ValveCheckCmd+0xc0e>
 80031c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031ce:	f000 ff3d 	bl	800404c <HAL_GPIO_ReadPin>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 829a 	beq.w	800370e <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV6 is already ON...\n");
 80031da:	497a      	ldr	r1, [pc, #488]	; (80033c4 <ValveCheckCmd+0x8c4>)
 80031dc:	4873      	ldr	r0, [pc, #460]	; (80033ac <ValveCheckCmd+0x8ac>)
 80031de:	f7fd fe65 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 80031e2:	4b6f      	ldr	r3, [pc, #444]	; (80033a0 <ValveCheckCmd+0x8a0>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	e291      	b.n	800370e <ValveCheckCmd+0xc0e>
				}
			}
			else if (command == SOV6OFF){
 80031ea:	4b6b      	ldr	r3, [pc, #428]	; (8003398 <ValveCheckCmd+0x898>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b76      	ldr	r3, [pc, #472]	; (80033c8 <ValveCheckCmd+0x8c8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d136      	bne.n	8003264 <ValveCheckCmd+0x764>

				if (cmd_flag && HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin)){
 80031f6:	4b6a      	ldr	r3, [pc, #424]	; (80033a0 <ValveCheckCmd+0x8a0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d01b      	beq.n	8003236 <ValveCheckCmd+0x736>
 80031fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003206:	f000 ff21 	bl	800404c <HAL_GPIO_ReadPin>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d012      	beq.n	8003236 <ValveCheckCmd+0x736>
					valves_selected &= 0x3DF;
 8003210:	4b64      	ldr	r3, [pc, #400]	; (80033a4 <ValveCheckCmd+0x8a4>)
 8003212:	881a      	ldrh	r2, [r3, #0]
 8003214:	f240 33df 	movw	r3, #991	; 0x3df
 8003218:	4013      	ands	r3, r2
 800321a:	b29a      	uxth	r2, r3
 800321c:	4b61      	ldr	r3, [pc, #388]	; (80033a4 <ValveCheckCmd+0x8a4>)
 800321e:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV6 is OFF...\n");
 8003220:	496a      	ldr	r1, [pc, #424]	; (80033cc <ValveCheckCmd+0x8cc>)
 8003222:	4862      	ldr	r0, [pc, #392]	; (80033ac <ValveCheckCmd+0x8ac>)
 8003224:	f7fd fe42 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8003228:	4b5d      	ldr	r3, [pc, #372]	; (80033a0 <ValveCheckCmd+0x8a0>)
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
					v6=0;
 800322e:	4b64      	ldr	r3, [pc, #400]	; (80033c0 <ValveCheckCmd+0x8c0>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	e26b      	b.n	800370e <ValveCheckCmd+0xc0e>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin))){
 8003236:	4b5a      	ldr	r3, [pc, #360]	; (80033a0 <ValveCheckCmd+0x8a0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 8267 	beq.w	800370e <ValveCheckCmd+0xc0e>
 8003240:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003248:	f000 ff00 	bl	800404c <HAL_GPIO_ReadPin>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	f040 825d 	bne.w	800370e <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV6 is already OFF...\n");
 8003254:	495e      	ldr	r1, [pc, #376]	; (80033d0 <ValveCheckCmd+0x8d0>)
 8003256:	4855      	ldr	r0, [pc, #340]	; (80033ac <ValveCheckCmd+0x8ac>)
 8003258:	f7fd fe28 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 800325c:	4b50      	ldr	r3, [pc, #320]	; (80033a0 <ValveCheckCmd+0x8a0>)
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e254      	b.n	800370e <ValveCheckCmd+0xc0e>
				}
			}
			else if(command == SOV7ON){
 8003264:	4b4c      	ldr	r3, [pc, #304]	; (8003398 <ValveCheckCmd+0x898>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b5a      	ldr	r3, [pc, #360]	; (80033d4 <ValveCheckCmd+0x8d4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d133      	bne.n	80032d8 <ValveCheckCmd+0x7d8>


				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin))){
 8003270:	4b4b      	ldr	r3, [pc, #300]	; (80033a0 <ValveCheckCmd+0x8a0>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d019      	beq.n	80032ac <ValveCheckCmd+0x7ac>
 8003278:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800327c:	4856      	ldr	r0, [pc, #344]	; (80033d8 <ValveCheckCmd+0x8d8>)
 800327e:	f000 fee5 	bl	800404c <HAL_GPIO_ReadPin>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d111      	bne.n	80032ac <ValveCheckCmd+0x7ac>
					valves_selected |= (uint16_t)SOV7;
 8003288:	4b46      	ldr	r3, [pc, #280]	; (80033a4 <ValveCheckCmd+0x8a4>)
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003290:	b29a      	uxth	r2, r3
 8003292:	4b44      	ldr	r3, [pc, #272]	; (80033a4 <ValveCheckCmd+0x8a4>)
 8003294:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV7 is ON...\n");
 8003296:	4951      	ldr	r1, [pc, #324]	; (80033dc <ValveCheckCmd+0x8dc>)
 8003298:	4844      	ldr	r0, [pc, #272]	; (80033ac <ValveCheckCmd+0x8ac>)
 800329a:	f7fd fe07 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 800329e:	4b40      	ldr	r3, [pc, #256]	; (80033a0 <ValveCheckCmd+0x8a0>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
					v7=1;
 80032a4:	4b4e      	ldr	r3, [pc, #312]	; (80033e0 <ValveCheckCmd+0x8e0>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	e230      	b.n	800370e <ValveCheckCmd+0xc0e>
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin)){
 80032ac:	4b3c      	ldr	r3, [pc, #240]	; (80033a0 <ValveCheckCmd+0x8a0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 822c 	beq.w	800370e <ValveCheckCmd+0xc0e>
 80032b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032ba:	4847      	ldr	r0, [pc, #284]	; (80033d8 <ValveCheckCmd+0x8d8>)
 80032bc:	f000 fec6 	bl	800404c <HAL_GPIO_ReadPin>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 8223 	beq.w	800370e <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV7 is already ON...\n");
 80032c8:	4946      	ldr	r1, [pc, #280]	; (80033e4 <ValveCheckCmd+0x8e4>)
 80032ca:	4838      	ldr	r0, [pc, #224]	; (80033ac <ValveCheckCmd+0x8ac>)
 80032cc:	f7fd fdee 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 80032d0:	4b33      	ldr	r3, [pc, #204]	; (80033a0 <ValveCheckCmd+0x8a0>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	e21a      	b.n	800370e <ValveCheckCmd+0xc0e>
				}
			}
			else if (command == SOV7OFF){
 80032d8:	4b2f      	ldr	r3, [pc, #188]	; (8003398 <ValveCheckCmd+0x898>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	4b42      	ldr	r3, [pc, #264]	; (80033e8 <ValveCheckCmd+0x8e8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d134      	bne.n	800334e <ValveCheckCmd+0x84e>


				if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin)){
 80032e4:	4b2e      	ldr	r3, [pc, #184]	; (80033a0 <ValveCheckCmd+0x8a0>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01a      	beq.n	8003322 <ValveCheckCmd+0x822>
 80032ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032f0:	4839      	ldr	r0, [pc, #228]	; (80033d8 <ValveCheckCmd+0x8d8>)
 80032f2:	f000 feab 	bl	800404c <HAL_GPIO_ReadPin>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d012      	beq.n	8003322 <ValveCheckCmd+0x822>

					valves_selected &= 0x3BF;
 80032fc:	4b29      	ldr	r3, [pc, #164]	; (80033a4 <ValveCheckCmd+0x8a4>)
 80032fe:	881a      	ldrh	r2, [r3, #0]
 8003300:	f240 33bf 	movw	r3, #959	; 0x3bf
 8003304:	4013      	ands	r3, r2
 8003306:	b29a      	uxth	r2, r3
 8003308:	4b26      	ldr	r3, [pc, #152]	; (80033a4 <ValveCheckCmd+0x8a4>)
 800330a:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV7 is OFF...\n");
 800330c:	4937      	ldr	r1, [pc, #220]	; (80033ec <ValveCheckCmd+0x8ec>)
 800330e:	4827      	ldr	r0, [pc, #156]	; (80033ac <ValveCheckCmd+0x8ac>)
 8003310:	f7fd fdcc 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8003314:	4b22      	ldr	r3, [pc, #136]	; (80033a0 <ValveCheckCmd+0x8a0>)
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
					v7=0;
 800331a:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <ValveCheckCmd+0x8e0>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	e1f5      	b.n	800370e <ValveCheckCmd+0xc0e>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin))) {
 8003322:	4b1f      	ldr	r3, [pc, #124]	; (80033a0 <ValveCheckCmd+0x8a0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 81f1 	beq.w	800370e <ValveCheckCmd+0xc0e>
 800332c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003330:	4829      	ldr	r0, [pc, #164]	; (80033d8 <ValveCheckCmd+0x8d8>)
 8003332:	f000 fe8b 	bl	800404c <HAL_GPIO_ReadPin>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	f040 81e8 	bne.w	800370e <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV7 is already OFF...\n");
 800333e:	492c      	ldr	r1, [pc, #176]	; (80033f0 <ValveCheckCmd+0x8f0>)
 8003340:	481a      	ldr	r0, [pc, #104]	; (80033ac <ValveCheckCmd+0x8ac>)
 8003342:	f7fd fdb3 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8003346:	4b16      	ldr	r3, [pc, #88]	; (80033a0 <ValveCheckCmd+0x8a0>)
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	e1df      	b.n	800370e <ValveCheckCmd+0xc0e>
				}
			}
			else if(command == SOV8ON){
 800334e:	4b12      	ldr	r3, [pc, #72]	; (8003398 <ValveCheckCmd+0x898>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <ValveCheckCmd+0x8f4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d168      	bne.n	800342c <ValveCheckCmd+0x92c>


				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin))){
 800335a:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <ValveCheckCmd+0x8a0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d04e      	beq.n	8003400 <ValveCheckCmd+0x900>
 8003362:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003366:	481c      	ldr	r0, [pc, #112]	; (80033d8 <ValveCheckCmd+0x8d8>)
 8003368:	f000 fe70 	bl	800404c <HAL_GPIO_ReadPin>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d146      	bne.n	8003400 <ValveCheckCmd+0x900>
					valves_selected |= (uint16_t)SOV8;
 8003372:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <ValveCheckCmd+0x8a4>)
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800337a:	b29a      	uxth	r2, r3
 800337c:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <ValveCheckCmd+0x8a4>)
 800337e:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV8 is ON...\n");
 8003380:	491d      	ldr	r1, [pc, #116]	; (80033f8 <ValveCheckCmd+0x8f8>)
 8003382:	480a      	ldr	r0, [pc, #40]	; (80033ac <ValveCheckCmd+0x8ac>)
 8003384:	f7fd fd92 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <ValveCheckCmd+0x8a0>)
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
					v8=1;
 800338e:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <ValveCheckCmd+0x8fc>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	e1bb      	b.n	800370e <ValveCheckCmd+0xc0e>
 8003396:	bf00      	nop
 8003398:	20000194 	.word	0x20000194
 800339c:	200000c4 	.word	0x200000c4
 80033a0:	20000210 	.word	0x20000210
 80033a4:	20000414 	.word	0x20000414
 80033a8:	08006af0 	.word	0x08006af0
 80033ac:	20000384 	.word	0x20000384
 80033b0:	2000037c 	.word	0x2000037c
 80033b4:	08006b04 	.word	0x08006b04
 80033b8:	200000c8 	.word	0x200000c8
 80033bc:	08006b20 	.word	0x08006b20
 80033c0:	20000184 	.word	0x20000184
 80033c4:	08006b30 	.word	0x08006b30
 80033c8:	200000cc 	.word	0x200000cc
 80033cc:	08006b48 	.word	0x08006b48
 80033d0:	08006b5c 	.word	0x08006b5c
 80033d4:	200000d0 	.word	0x200000d0
 80033d8:	48000400 	.word	0x48000400
 80033dc:	08006b78 	.word	0x08006b78
 80033e0:	2000019c 	.word	0x2000019c
 80033e4:	08006b88 	.word	0x08006b88
 80033e8:	200000d4 	.word	0x200000d4
 80033ec:	08006ba0 	.word	0x08006ba0
 80033f0:	08006bb4 	.word	0x08006bb4
 80033f4:	200000d8 	.word	0x200000d8
 80033f8:	08006bd0 	.word	0x08006bd0
 80033fc:	20000408 	.word	0x20000408
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin)){
 8003400:	4b98      	ldr	r3, [pc, #608]	; (8003664 <ValveCheckCmd+0xb64>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 8182 	beq.w	800370e <ValveCheckCmd+0xc0e>
 800340a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800340e:	4896      	ldr	r0, [pc, #600]	; (8003668 <ValveCheckCmd+0xb68>)
 8003410:	f000 fe1c 	bl	800404c <HAL_GPIO_ReadPin>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 8179 	beq.w	800370e <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV8 is already ON...\n");
 800341c:	4993      	ldr	r1, [pc, #588]	; (800366c <ValveCheckCmd+0xb6c>)
 800341e:	4894      	ldr	r0, [pc, #592]	; (8003670 <ValveCheckCmd+0xb70>)
 8003420:	f7fd fd44 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8003424:	4b8f      	ldr	r3, [pc, #572]	; (8003664 <ValveCheckCmd+0xb64>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e170      	b.n	800370e <ValveCheckCmd+0xc0e>
				}
			}
			else if (command == SOV8OFF){
 800342c:	4b91      	ldr	r3, [pc, #580]	; (8003674 <ValveCheckCmd+0xb74>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4b91      	ldr	r3, [pc, #580]	; (8003678 <ValveCheckCmd+0xb78>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d134      	bne.n	80034a2 <ValveCheckCmd+0x9a2>

				if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin)){
 8003438:	4b8a      	ldr	r3, [pc, #552]	; (8003664 <ValveCheckCmd+0xb64>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d01a      	beq.n	8003476 <ValveCheckCmd+0x976>
 8003440:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003444:	4888      	ldr	r0, [pc, #544]	; (8003668 <ValveCheckCmd+0xb68>)
 8003446:	f000 fe01 	bl	800404c <HAL_GPIO_ReadPin>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d012      	beq.n	8003476 <ValveCheckCmd+0x976>
					valves_selected &= 0X37F;
 8003450:	4b8a      	ldr	r3, [pc, #552]	; (800367c <ValveCheckCmd+0xb7c>)
 8003452:	881a      	ldrh	r2, [r3, #0]
 8003454:	f240 337f 	movw	r3, #895	; 0x37f
 8003458:	4013      	ands	r3, r2
 800345a:	b29a      	uxth	r2, r3
 800345c:	4b87      	ldr	r3, [pc, #540]	; (800367c <ValveCheckCmd+0xb7c>)
 800345e:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV8 is OFF...\n");
 8003460:	4987      	ldr	r1, [pc, #540]	; (8003680 <ValveCheckCmd+0xb80>)
 8003462:	4883      	ldr	r0, [pc, #524]	; (8003670 <ValveCheckCmd+0xb70>)
 8003464:	f7fd fd22 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8003468:	4b7e      	ldr	r3, [pc, #504]	; (8003664 <ValveCheckCmd+0xb64>)
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
					v8=0;
 800346e:	4b85      	ldr	r3, [pc, #532]	; (8003684 <ValveCheckCmd+0xb84>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	e14b      	b.n	800370e <ValveCheckCmd+0xc0e>
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin))){
 8003476:	4b7b      	ldr	r3, [pc, #492]	; (8003664 <ValveCheckCmd+0xb64>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 8147 	beq.w	800370e <ValveCheckCmd+0xc0e>
 8003480:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003484:	4878      	ldr	r0, [pc, #480]	; (8003668 <ValveCheckCmd+0xb68>)
 8003486:	f000 fde1 	bl	800404c <HAL_GPIO_ReadPin>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	f040 813e 	bne.w	800370e <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV8 is already OFF...\n");
 8003492:	497d      	ldr	r1, [pc, #500]	; (8003688 <ValveCheckCmd+0xb88>)
 8003494:	4876      	ldr	r0, [pc, #472]	; (8003670 <ValveCheckCmd+0xb70>)
 8003496:	f7fd fd09 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 800349a:	4b72      	ldr	r3, [pc, #456]	; (8003664 <ValveCheckCmd+0xb64>)
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	e135      	b.n	800370e <ValveCheckCmd+0xc0e>
				}
			}
			else if(command == SOV9ON){
 80034a2:	4b74      	ldr	r3, [pc, #464]	; (8003674 <ValveCheckCmd+0xb74>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	4b79      	ldr	r3, [pc, #484]	; (800368c <ValveCheckCmd+0xb8c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d133      	bne.n	8003516 <ValveCheckCmd+0xa16>


				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin))){
 80034ae:	4b6d      	ldr	r3, [pc, #436]	; (8003664 <ValveCheckCmd+0xb64>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d019      	beq.n	80034ea <ValveCheckCmd+0x9ea>
 80034b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034ba:	486b      	ldr	r0, [pc, #428]	; (8003668 <ValveCheckCmd+0xb68>)
 80034bc:	f000 fdc6 	bl	800404c <HAL_GPIO_ReadPin>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d111      	bne.n	80034ea <ValveCheckCmd+0x9ea>
					valves_selected |= (uint16_t)SOV9;
 80034c6:	4b6d      	ldr	r3, [pc, #436]	; (800367c <ValveCheckCmd+0xb7c>)
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	4b6a      	ldr	r3, [pc, #424]	; (800367c <ValveCheckCmd+0xb7c>)
 80034d2:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV9 is ON...\n");
 80034d4:	496e      	ldr	r1, [pc, #440]	; (8003690 <ValveCheckCmd+0xb90>)
 80034d6:	4866      	ldr	r0, [pc, #408]	; (8003670 <ValveCheckCmd+0xb70>)
 80034d8:	f7fd fce8 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 80034dc:	4b61      	ldr	r3, [pc, #388]	; (8003664 <ValveCheckCmd+0xb64>)
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
					v9=1;
 80034e2:	4b6c      	ldr	r3, [pc, #432]	; (8003694 <ValveCheckCmd+0xb94>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	e111      	b.n	800370e <ValveCheckCmd+0xc0e>
				}
				else if(cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin)){
 80034ea:	4b5e      	ldr	r3, [pc, #376]	; (8003664 <ValveCheckCmd+0xb64>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 810d 	beq.w	800370e <ValveCheckCmd+0xc0e>
 80034f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034f8:	485b      	ldr	r0, [pc, #364]	; (8003668 <ValveCheckCmd+0xb68>)
 80034fa:	f000 fda7 	bl	800404c <HAL_GPIO_ReadPin>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8104 	beq.w	800370e <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV9 is already ON...\n");
 8003506:	4964      	ldr	r1, [pc, #400]	; (8003698 <ValveCheckCmd+0xb98>)
 8003508:	4859      	ldr	r0, [pc, #356]	; (8003670 <ValveCheckCmd+0xb70>)
 800350a:	f7fd fccf 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 800350e:	4b55      	ldr	r3, [pc, #340]	; (8003664 <ValveCheckCmd+0xb64>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	e0fb      	b.n	800370e <ValveCheckCmd+0xc0e>

				}
			}
			else if (command == SOV9OFF){
 8003516:	4b57      	ldr	r3, [pc, #348]	; (8003674 <ValveCheckCmd+0xb74>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4b60      	ldr	r3, [pc, #384]	; (800369c <ValveCheckCmd+0xb9c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d134      	bne.n	800358c <ValveCheckCmd+0xa8c>


				if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin)){
 8003522:	4b50      	ldr	r3, [pc, #320]	; (8003664 <ValveCheckCmd+0xb64>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01a      	beq.n	8003560 <ValveCheckCmd+0xa60>
 800352a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800352e:	484e      	ldr	r0, [pc, #312]	; (8003668 <ValveCheckCmd+0xb68>)
 8003530:	f000 fd8c 	bl	800404c <HAL_GPIO_ReadPin>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d012      	beq.n	8003560 <ValveCheckCmd+0xa60>
					valves_selected &= 0X2FF;
 800353a:	4b50      	ldr	r3, [pc, #320]	; (800367c <ValveCheckCmd+0xb7c>)
 800353c:	881a      	ldrh	r2, [r3, #0]
 800353e:	f240 23ff 	movw	r3, #767	; 0x2ff
 8003542:	4013      	ands	r3, r2
 8003544:	b29a      	uxth	r2, r3
 8003546:	4b4d      	ldr	r3, [pc, #308]	; (800367c <ValveCheckCmd+0xb7c>)
 8003548:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " SOV9 is OFF...\n");
 800354a:	4955      	ldr	r1, [pc, #340]	; (80036a0 <ValveCheckCmd+0xba0>)
 800354c:	4848      	ldr	r0, [pc, #288]	; (8003670 <ValveCheckCmd+0xb70>)
 800354e:	f7fd fcad 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8003552:	4b44      	ldr	r3, [pc, #272]	; (8003664 <ValveCheckCmd+0xb64>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
					v9=0;
 8003558:	4b4e      	ldr	r3, [pc, #312]	; (8003694 <ValveCheckCmd+0xb94>)
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e0d6      	b.n	800370e <ValveCheckCmd+0xc0e>
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin))){
 8003560:	4b40      	ldr	r3, [pc, #256]	; (8003664 <ValveCheckCmd+0xb64>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80d2 	beq.w	800370e <ValveCheckCmd+0xc0e>
 800356a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800356e:	483e      	ldr	r0, [pc, #248]	; (8003668 <ValveCheckCmd+0xb68>)
 8003570:	f000 fd6c 	bl	800404c <HAL_GPIO_ReadPin>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	f040 80c9 	bne.w	800370e <ValveCheckCmd+0xc0e>
					UART_SendMessage(&huart2, " SOV9 is already OFF...\n");
 800357c:	4949      	ldr	r1, [pc, #292]	; (80036a4 <ValveCheckCmd+0xba4>)
 800357e:	483c      	ldr	r0, [pc, #240]	; (8003670 <ValveCheckCmd+0xb70>)
 8003580:	f7fd fc94 	bl	8000eac <UART_SendMessage>
					cmd_flag = FALSE;
 8003584:	4b37      	ldr	r3, [pc, #220]	; (8003664 <ValveCheckCmd+0xb64>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	e0c0      	b.n	800370e <ValveCheckCmd+0xc0e>
				}
			}
			else if (command == valve_status && cmd_flag){
 800358c:	4b39      	ldr	r3, [pc, #228]	; (8003674 <ValveCheckCmd+0xb74>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4b45      	ldr	r3, [pc, #276]	; (80036a8 <ValveCheckCmd+0xba8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d13c      	bne.n	8003612 <ValveCheckCmd+0xb12>
 8003598:	4b32      	ldr	r3, [pc, #200]	; (8003664 <ValveCheckCmd+0xb64>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d038      	beq.n	8003612 <ValveCheckCmd+0xb12>

				 int len = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	613b      	str	r3, [r7, #16]
				  sprintf(buffer,"\n*** Valves and Igniters Status ***\r\n\n SOV1: %d\r\n"
 80035a4:	4b41      	ldr	r3, [pc, #260]	; (80036ac <ValveCheckCmd+0xbac>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	4b41      	ldr	r3, [pc, #260]	; (80036b0 <ValveCheckCmd+0xbb0>)
 80035ac:	6819      	ldr	r1, [r3, #0]
 80035ae:	6079      	str	r1, [r7, #4]
 80035b0:	4b40      	ldr	r3, [pc, #256]	; (80036b4 <ValveCheckCmd+0xbb4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a40      	ldr	r2, [pc, #256]	; (80036b8 <ValveCheckCmd+0xbb8>)
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	4940      	ldr	r1, [pc, #256]	; (80036bc <ValveCheckCmd+0xbbc>)
 80035ba:	6809      	ldr	r1, [r1, #0]
 80035bc:	4840      	ldr	r0, [pc, #256]	; (80036c0 <ValveCheckCmd+0xbc0>)
 80035be:	6800      	ldr	r0, [r0, #0]
 80035c0:	6038      	str	r0, [r7, #0]
 80035c2:	4c40      	ldr	r4, [pc, #256]	; (80036c4 <ValveCheckCmd+0xbc4>)
 80035c4:	6824      	ldr	r4, [r4, #0]
 80035c6:	4d2f      	ldr	r5, [pc, #188]	; (8003684 <ValveCheckCmd+0xb84>)
 80035c8:	682d      	ldr	r5, [r5, #0]
 80035ca:	4e32      	ldr	r6, [pc, #200]	; (8003694 <ValveCheckCmd+0xb94>)
 80035cc:	6836      	ldr	r6, [r6, #0]
 80035ce:	483e      	ldr	r0, [pc, #248]	; (80036c8 <ValveCheckCmd+0xbc8>)
 80035d0:	6800      	ldr	r0, [r0, #0]
 80035d2:	9007      	str	r0, [sp, #28]
 80035d4:	9606      	str	r6, [sp, #24]
 80035d6:	9505      	str	r5, [sp, #20]
 80035d8:	9404      	str	r4, [sp, #16]
 80035da:	6838      	ldr	r0, [r7, #0]
 80035dc:	9003      	str	r0, [sp, #12]
 80035de:	9102      	str	r1, [sp, #8]
 80035e0:	9201      	str	r2, [sp, #4]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	4938      	ldr	r1, [pc, #224]	; (80036cc <ValveCheckCmd+0xbcc>)
 80035ea:	4839      	ldr	r0, [pc, #228]	; (80036d0 <ValveCheckCmd+0xbd0>)
 80035ec:	f002 fbd2 	bl	8005d94 <siprintf>
						                   " SOV2: %d\r\n SOV3: %d\r\n SOV4: %d\r\n SOV5: %d\r\n SOV6: %d\r\n"
						                   " SOV7: %d\r\n SOV8: %d\r\n SOV9: %d\r\n IG:   %d\r\n",v1, v2, v3,\
										   v4,v5,v6,v7,v8,v9,ignit);
				  len =strlen(buffer);
 80035f0:	4837      	ldr	r0, [pc, #220]	; (80036d0 <ValveCheckCmd+0xbd0>)
 80035f2:	f7fc fded 	bl	80001d0 <strlen>
 80035f6:	4603      	mov	r3, r0
 80035f8:	613b      	str	r3, [r7, #16]
				  HAL_UART_Transmit(&huart2, buffer, len, 1000);
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003602:	4933      	ldr	r1, [pc, #204]	; (80036d0 <ValveCheckCmd+0xbd0>)
 8003604:	481a      	ldr	r0, [pc, #104]	; (8003670 <ValveCheckCmd+0xb70>)
 8003606:	f001 fc11 	bl	8004e2c <HAL_UART_Transmit>
				  cmd_flag = FALSE;
 800360a:	4b16      	ldr	r3, [pc, #88]	; (8003664 <ValveCheckCmd+0xb64>)
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
			else if (command == valve_status && cmd_flag){
 8003610:	e07d      	b.n	800370e <ValveCheckCmd+0xc0e>
			}
            /*********************************************/
            // Auto cycling valves
			else if (command == cycle_valves && cmd_flag ){
 8003612:	4b18      	ldr	r3, [pc, #96]	; (8003674 <ValveCheckCmd+0xb74>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4b2f      	ldr	r3, [pc, #188]	; (80036d4 <ValveCheckCmd+0xbd4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d15e      	bne.n	80036dc <ValveCheckCmd+0xbdc>
 800361e:	4b11      	ldr	r3, [pc, #68]	; (8003664 <ValveCheckCmd+0xb64>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d05a      	beq.n	80036dc <ValveCheckCmd+0xbdc>
				    UART_SendMessage(&huart2, " Auto cycling valves...\n");
 8003626:	492c      	ldr	r1, [pc, #176]	; (80036d8 <ValveCheckCmd+0xbd8>)
 8003628:	4811      	ldr	r0, [pc, #68]	; (8003670 <ValveCheckCmd+0xb70>)
 800362a:	f7fd fc3f 	bl	8000eac <UART_SendMessage>
			    	cmd_flag = FALSE;
 800362e:	4b0d      	ldr	r3, [pc, #52]	; (8003664 <ValveCheckCmd+0xb64>)
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]

                 //Set all the valves off before starting
			    	valves_selected = 0;
 8003634:	4b11      	ldr	r3, [pc, #68]	; (800367c <ValveCheckCmd+0xb7c>)
 8003636:	2200      	movs	r2, #0
 8003638:	801a      	strh	r2, [r3, #0]
			    	ctrl->valveTarget  = valves_selected;
 800363a:	4b10      	ldr	r3, [pc, #64]	; (800367c <ValveCheckCmd+0xb7c>)
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	631a      	str	r2, [r3, #48]	; 0x30

			    	while(command == cycle_valves){
 8003644:	e006      	b.n	8003654 <ValveCheckCmd+0xb54>
			    			success &= CycleValves(ctrl);
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f884 	bl	8003754 <CycleValves>
 800364c:	4602      	mov	r2, r0
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	4013      	ands	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
			    	while(command == cycle_valves){
 8003654:	4b07      	ldr	r3, [pc, #28]	; (8003674 <ValveCheckCmd+0xb74>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4b1e      	ldr	r3, [pc, #120]	; (80036d4 <ValveCheckCmd+0xbd4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d0f2      	beq.n	8003646 <ValveCheckCmd+0xb46>
			else if (command == cycle_valves && cmd_flag ){
 8003660:	e055      	b.n	800370e <ValveCheckCmd+0xc0e>
 8003662:	bf00      	nop
 8003664:	20000210 	.word	0x20000210
 8003668:	48000400 	.word	0x48000400
 800366c:	08006be0 	.word	0x08006be0
 8003670:	20000384 	.word	0x20000384
 8003674:	20000194 	.word	0x20000194
 8003678:	200000dc 	.word	0x200000dc
 800367c:	20000414 	.word	0x20000414
 8003680:	08006bf8 	.word	0x08006bf8
 8003684:	20000408 	.word	0x20000408
 8003688:	08006c0c 	.word	0x08006c0c
 800368c:	200000e0 	.word	0x200000e0
 8003690:	08006c28 	.word	0x08006c28
 8003694:	20000198 	.word	0x20000198
 8003698:	08006c38 	.word	0x08006c38
 800369c:	200000e4 	.word	0x200000e4
 80036a0:	08006c50 	.word	0x08006c50
 80036a4:	08006c64 	.word	0x08006c64
 80036a8:	2000008c 	.word	0x2000008c
 80036ac:	2000018c 	.word	0x2000018c
 80036b0:	20000314 	.word	0x20000314
 80036b4:	20000204 	.word	0x20000204
 80036b8:	2000040c 	.word	0x2000040c
 80036bc:	2000037c 	.word	0x2000037c
 80036c0:	20000184 	.word	0x20000184
 80036c4:	2000019c 	.word	0x2000019c
 80036c8:	20000208 	.word	0x20000208
 80036cc:	08006c80 	.word	0x08006c80
 80036d0:	20000214 	.word	0x20000214
 80036d4:	20000090 	.word	0x20000090
 80036d8:	08006d18 	.word	0x08006d18
			    		}// end of while loop
			}


			else if(command == cycle_voff && cmd_flag){
 80036dc:	4b17      	ldr	r3, [pc, #92]	; (800373c <ValveCheckCmd+0xc3c>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4b17      	ldr	r3, [pc, #92]	; (8003740 <ValveCheckCmd+0xc40>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d112      	bne.n	800370e <ValveCheckCmd+0xc0e>
 80036e8:	4b16      	ldr	r3, [pc, #88]	; (8003744 <ValveCheckCmd+0xc44>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00e      	beq.n	800370e <ValveCheckCmd+0xc0e>
			    		//Set all the valves off before starting
			    		valves_selected = 0;
 80036f0:	4b15      	ldr	r3, [pc, #84]	; (8003748 <ValveCheckCmd+0xc48>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	801a      	strh	r2, [r3, #0]
			    		ctrl->valveTarget  = valves_selected;
 80036f6:	4b14      	ldr	r3, [pc, #80]	; (8003748 <ValveCheckCmd+0xc48>)
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
			    		UART_SendMessage(&huart2, " Auto cycling valves OFF...\n");
 8003700:	4912      	ldr	r1, [pc, #72]	; (800374c <ValveCheckCmd+0xc4c>)
 8003702:	4813      	ldr	r0, [pc, #76]	; (8003750 <ValveCheckCmd+0xc50>)
 8003704:	f7fd fbd2 	bl	8000eac <UART_SendMessage>
			    		cmd_flag = FALSE;
 8003708:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <ValveCheckCmd+0xc44>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
			   } // end of else if for cycle_valves
            /*************************************************************/

    	   // Set valves
			ctrl->valveTarget = valves_selected;
 800370e:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <ValveCheckCmd+0xc48>)
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
			success &= ValveStateSetter(ctrl->valveTarget);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff f8f7 	bl	8002910 <ValveStateSetter>
 8003722:	4602      	mov	r2, r0
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	4013      	ands	r3, r2
 8003728:	617b      	str	r3, [r7, #20]
			ctrl->valveConfiguration = StateConfiguration();
 800372a:	f7ff f873 	bl	8002814 <StateConfiguration>
 800372e:	4602      	mov	r2, r0
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003734:	bf00      	nop
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800373c:	20000194 	.word	0x20000194
 8003740:	20000094 	.word	0x20000094
 8003744:	20000210 	.word	0x20000210
 8003748:	20000414 	.word	0x20000414
 800374c:	08006d34 	.word	0x08006d34
 8003750:	20000384 	.word	0x20000384

08003754 <CycleValves>:

uint32_t CycleValves(struct StateVars *ctrl)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	uint32_t success = TRUE;
 800375c:	2301      	movs	r3, #1
 800375e:	60fb      	str	r3, [r7, #12]
	HAL_Delay(900);
 8003760:	f44f 7061 	mov.w	r0, #900	; 0x384
 8003764:	f000 f956 	bl	8003a14 <HAL_Delay>

	if(ctrl->valveTarget == 0)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	2b00      	cmp	r3, #0
 800376e:	d103      	bne.n	8003778 <CycleValves+0x24>
	{
		ctrl->valveTarget = 0x1;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
 8003776:	e012      	b.n	800379e <CycleValves+0x4a>
	}
	else if (ctrl->valveTarget <=512){
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003780:	d805      	bhi.n	800378e <CycleValves+0x3a>

		ctrl->valveTarget *= 2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	005a      	lsls	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	631a      	str	r2, [r3, #48]	; 0x30
 800378c:	e007      	b.n	800379e <CycleValves+0x4a>
	}
	else if (ctrl->valveTarget > 512){
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003796:	d902      	bls.n	800379e <CycleValves+0x4a>
		ctrl->valveTarget = 0 ;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
	}


	success &= ValveStateSetter(ctrl->valveTarget);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff f8b4 	bl	8002910 <ValveStateSetter>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4013      	ands	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 80037b0:	f7ff f830 	bl	8002814 <StateConfiguration>
 80037b4:	4602      	mov	r2, r0
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	62da      	str	r2, [r3, #44]	; 0x2c

	return success;
 80037ba:	68fb      	ldr	r3, [r7, #12]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <ValveCheck>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include <valve_check.h>
#include <messages.h>

uint32_t ValveCheck(struct StateVars *ctrl)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
	uint32_t success = TRUE;
 80037cc:	2301      	movs	r3, #1
 80037ce:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 80037d0:	f7ff f820 	bl	8002814 <StateConfiguration>
 80037d4:	4602      	mov	r2, r0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	62da      	str	r2, [r3, #44]	; 0x2c


    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fe ffdb 	bl	800279c <VerifyState>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d051      	beq.n	8003890 <ValveCheck+0xcc>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fe ffd2 	bl	800279c <VerifyState>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d048      	beq.n	8003890 <ValveCheck+0xcc>
    {
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d034      	beq.n	8003876 <ValveCheck+0xb2>
    		// SOV1   SOV2   SOV3   SOV4   SOV5   SOV6   SOV7   SOV8   SOV9  IG1
    		//|  01 |  01  |  01  |   01  |  01  |  01 |  01  |  01  |  01 |  01 |

    		StateStatus(ctrl);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7fe ff7b 	bl	8002708 <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800381e:	429a      	cmp	r2, r3
 8003820:	d009      	beq.n	8003836 <ValveCheck+0x72>
    	    {
    			ctrl->valveTarget  = !((uint16_t)SOV1 \
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
    					|(uint16_t)SOV6 \
    					|(uint16_t)SOV7 \
    					|(uint16_t)SOV8 \
    					|(uint16_t)SOV9 \
						|(uint16_t)IG1);
    		    valves_selected = 0;
 8003828:	4b24      	ldr	r3, [pc, #144]	; (80038bc <ValveCheck+0xf8>)
 800382a:	2200      	movs	r2, #0
 800382c:	801a      	strh	r2, [r3, #0]
    			success = StateInitialize(ctrl);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff f942 	bl	8002ab8 <StateInitialize>
 8003834:	60f8      	str	r0, [r7, #12]
    	    }


    		// Function to handle individual commands
    		ValveCheckCmd(ctrl);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff f962 	bl	8002b00 <ValveCheckCmd>

    		ProcessCommands(ctrl);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7fd fcd9 	bl	80011f4 <ProcessCommands>

    		success &= (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	429a      	cmp	r2, r3
 800384c:	d101      	bne.n	8003852 <ValveCheck+0x8e>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <ValveCheck+0x90>
 8003852:	2300      	movs	r3, #0
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4013      	ands	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]

    		// Increment state counter
			ctrl->stateCounter++;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386c:	d11f      	bne.n	80038ae <ValveCheck+0xea>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 8003874:	e01b      	b.n	80038ae <ValveCheck+0xea>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, VALVE_CHECK, ctrl->currentState);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800387c:	461a      	mov	r2, r3
 800387e:	2101      	movs	r1, #1
 8003880:	480f      	ldr	r0, [pc, #60]	; (80038c0 <ValveCheck+0xfc>)
 8003882:	f7fe f9bb 	bl	8001bfc <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8003886:	490e      	ldr	r1, [pc, #56]	; (80038c0 <ValveCheck+0xfc>)
 8003888:	480e      	ldr	r0, [pc, #56]	; (80038c4 <ValveCheck+0x100>)
 800388a:	f7fd fb0f 	bl	8000eac <UART_SendMessage>
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 800388e:	e00e      	b.n	80038ae <ValveCheck+0xea>
    	}
    }else{
    	    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800389c:	461a      	mov	r2, r3
 800389e:	4808      	ldr	r0, [pc, #32]	; (80038c0 <ValveCheck+0xfc>)
 80038a0:	f7fe fa26 	bl	8001cf0 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 80038a4:	4906      	ldr	r1, [pc, #24]	; (80038c0 <ValveCheck+0xfc>)
 80038a6:	4807      	ldr	r0, [pc, #28]	; (80038c4 <ValveCheck+0x100>)
 80038a8:	f7fd fb00 	bl	8000eac <UART_SendMessage>
 80038ac:	e000      	b.n	80038b0 <ValveCheck+0xec>
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 80038ae:	bf00      	nop
    }
	return success;
 80038b0:	68fb      	ldr	r3, [r7, #12]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000414 	.word	0x20000414
 80038c0:	200001a0 	.word	0x200001a0
 80038c4:	20000384 	.word	0x20000384

080038c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80038c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003900 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80038cc:	f7fe fe6e 	bl	80025ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80038d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80038d2:	e003      	b.n	80038dc <LoopCopyDataInit>

080038d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80038d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80038d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80038da:	3104      	adds	r1, #4

080038dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80038dc:	480a      	ldr	r0, [pc, #40]	; (8003908 <LoopForever+0xa>)
	ldr	r3, =_edata
 80038de:	4b0b      	ldr	r3, [pc, #44]	; (800390c <LoopForever+0xe>)
	adds	r2, r0, r1
 80038e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80038e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80038e4:	d3f6      	bcc.n	80038d4 <CopyDataInit>
	ldr	r2, =_sbss
 80038e6:	4a0a      	ldr	r2, [pc, #40]	; (8003910 <LoopForever+0x12>)
	b	LoopFillZerobss
 80038e8:	e002      	b.n	80038f0 <LoopFillZerobss>

080038ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80038ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80038ec:	f842 3b04 	str.w	r3, [r2], #4

080038f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <LoopForever+0x16>)
	cmp	r2, r3
 80038f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80038f4:	d3f9      	bcc.n	80038ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038f6:	f002 fa21 	bl	8005d3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80038fa:	f7fd faa7 	bl	8000e4c <main>

080038fe <LoopForever>:

LoopForever:
    b LoopForever
 80038fe:	e7fe      	b.n	80038fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003900:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003904:	08006de0 	.word	0x08006de0
	ldr	r0, =_sdata
 8003908:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800390c:	20000154 	.word	0x20000154
	ldr	r2, =_sbss
 8003910:	20000154 	.word	0x20000154
	ldr	r3, = _ebss
 8003914:	20000420 	.word	0x20000420

08003918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003918:	e7fe      	b.n	8003918 <ADC1_2_IRQHandler>
	...

0800391c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003926:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <HAL_Init+0x3c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <HAL_Init+0x3c>)
 800392c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003930:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003932:	2003      	movs	r0, #3
 8003934:	f000 f960 	bl	8003bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003938:	2000      	movs	r0, #0
 800393a:	f000 f80f 	bl	800395c <HAL_InitTick>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	71fb      	strb	r3, [r7, #7]
 8003948:	e001      	b.n	800394e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800394a:	f7fe fd4f 	bl	80023ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800394e:	79fb      	ldrb	r3, [r7, #7]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40022000 	.word	0x40022000

0800395c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003968:	4b17      	ldr	r3, [pc, #92]	; (80039c8 <HAL_InitTick+0x6c>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d023      	beq.n	80039b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003970:	4b16      	ldr	r3, [pc, #88]	; (80039cc <HAL_InitTick+0x70>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <HAL_InitTick+0x6c>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	4619      	mov	r1, r3
 800397a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800397e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003982:	fbb2 f3f3 	udiv	r3, r2, r3
 8003986:	4618      	mov	r0, r3
 8003988:	f000 f96b 	bl	8003c62 <HAL_SYSTICK_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10f      	bne.n	80039b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b0f      	cmp	r3, #15
 8003996:	d809      	bhi.n	80039ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003998:	2200      	movs	r2, #0
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	f04f 30ff 	mov.w	r0, #4294967295
 80039a0:	f000 f935 	bl	8003c0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039a4:	4a0a      	ldr	r2, [pc, #40]	; (80039d0 <HAL_InitTick+0x74>)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	e007      	b.n	80039bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
 80039b0:	e004      	b.n	80039bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	73fb      	strb	r3, [r7, #15]
 80039b6:	e001      	b.n	80039bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	200000ec 	.word	0x200000ec
 80039cc:	20000088 	.word	0x20000088
 80039d0:	200000e8 	.word	0x200000e8

080039d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039d8:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <HAL_IncTick+0x20>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_IncTick+0x24>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4413      	add	r3, r2
 80039e4:	4a04      	ldr	r2, [pc, #16]	; (80039f8 <HAL_IncTick+0x24>)
 80039e6:	6013      	str	r3, [r2, #0]
}
 80039e8:	bf00      	nop
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	200000ec 	.word	0x200000ec
 80039f8:	20000418 	.word	0x20000418

080039fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003a00:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <HAL_GetTick+0x14>)
 8003a02:	681b      	ldr	r3, [r3, #0]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20000418 	.word	0x20000418

08003a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a1c:	f7ff ffee 	bl	80039fc <HAL_GetTick>
 8003a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d005      	beq.n	8003a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003a2e:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <HAL_Delay+0x40>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4413      	add	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a3a:	bf00      	nop
 8003a3c:	f7ff ffde 	bl	80039fc <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d8f7      	bhi.n	8003a3c <HAL_Delay+0x28>
  {
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	200000ec 	.word	0x200000ec

08003a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a68:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <__NVIC_SetPriorityGrouping+0x44>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a74:	4013      	ands	r3, r2
 8003a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a8a:	4a04      	ldr	r2, [pc, #16]	; (8003a9c <__NVIC_SetPriorityGrouping+0x44>)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	60d3      	str	r3, [r2, #12]
}
 8003a90:	bf00      	nop
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	e000ed00 	.word	0xe000ed00

08003aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aa4:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	0a1b      	lsrs	r3, r3, #8
 8003aaa:	f003 0307 	and.w	r3, r3, #7
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	e000ed00 	.word	0xe000ed00

08003abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	db0b      	blt.n	8003ae6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	f003 021f 	and.w	r2, r3, #31
 8003ad4:	4907      	ldr	r1, [pc, #28]	; (8003af4 <__NVIC_EnableIRQ+0x38>)
 8003ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	2001      	movs	r0, #1
 8003ade:	fa00 f202 	lsl.w	r2, r0, r2
 8003ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	e000e100 	.word	0xe000e100

08003af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	6039      	str	r1, [r7, #0]
 8003b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	db0a      	blt.n	8003b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	490c      	ldr	r1, [pc, #48]	; (8003b44 <__NVIC_SetPriority+0x4c>)
 8003b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b16:	0112      	lsls	r2, r2, #4
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b20:	e00a      	b.n	8003b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	4908      	ldr	r1, [pc, #32]	; (8003b48 <__NVIC_SetPriority+0x50>)
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	3b04      	subs	r3, #4
 8003b30:	0112      	lsls	r2, r2, #4
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	440b      	add	r3, r1
 8003b36:	761a      	strb	r2, [r3, #24]
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	e000e100 	.word	0xe000e100
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b089      	sub	sp, #36	; 0x24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f1c3 0307 	rsb	r3, r3, #7
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	bf28      	it	cs
 8003b6a:	2304      	movcs	r3, #4
 8003b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	3304      	adds	r3, #4
 8003b72:	2b06      	cmp	r3, #6
 8003b74:	d902      	bls.n	8003b7c <NVIC_EncodePriority+0x30>
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	3b03      	subs	r3, #3
 8003b7a:	e000      	b.n	8003b7e <NVIC_EncodePriority+0x32>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b80:	f04f 32ff 	mov.w	r2, #4294967295
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43da      	mvns	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	401a      	ands	r2, r3
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b94:	f04f 31ff 	mov.w	r1, #4294967295
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9e:	43d9      	mvns	r1, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba4:	4313      	orrs	r3, r2
         );
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3724      	adds	r7, #36	; 0x24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
	...

08003bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bc4:	d301      	bcc.n	8003bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e00f      	b.n	8003bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bca:	4a0a      	ldr	r2, [pc, #40]	; (8003bf4 <SysTick_Config+0x40>)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bd2:	210f      	movs	r1, #15
 8003bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd8:	f7ff ff8e 	bl	8003af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <SysTick_Config+0x40>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003be2:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <SysTick_Config+0x40>)
 8003be4:	2207      	movs	r2, #7
 8003be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	e000e010 	.word	0xe000e010

08003bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff ff29 	bl	8003a58 <__NVIC_SetPriorityGrouping>
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b086      	sub	sp, #24
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	4603      	mov	r3, r0
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	607a      	str	r2, [r7, #4]
 8003c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c20:	f7ff ff3e 	bl	8003aa0 <__NVIC_GetPriorityGrouping>
 8003c24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	6978      	ldr	r0, [r7, #20]
 8003c2c:	f7ff ff8e 	bl	8003b4c <NVIC_EncodePriority>
 8003c30:	4602      	mov	r2, r0
 8003c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c36:	4611      	mov	r1, r2
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff ff5d 	bl	8003af8 <__NVIC_SetPriority>
}
 8003c3e:	bf00      	nop
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff ff31 	bl	8003abc <__NVIC_EnableIRQ>
}
 8003c5a:	bf00      	nop
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff ffa2 	bl	8003bb4 <SysTick_Config>
 8003c70:	4603      	mov	r3, r0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d005      	beq.n	8003c9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2204      	movs	r2, #4
 8003c96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
 8003c9c:	e029      	b.n	8003cf2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 020e 	bic.w	r2, r2, #14
 8003cac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0201 	bic.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	f003 021c 	and.w	r2, r3, #28
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	2101      	movs	r1, #1
 8003ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4798      	blx	r3
    }
  }
  return status;
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d0a:	e17f      	b.n	800400c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	2101      	movs	r1, #1
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	fa01 f303 	lsl.w	r3, r1, r3
 8003d18:	4013      	ands	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 8171 	beq.w	8004006 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d00b      	beq.n	8003d44 <HAL_GPIO_Init+0x48>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d007      	beq.n	8003d44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d38:	2b11      	cmp	r3, #17
 8003d3a:	d003      	beq.n	8003d44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b12      	cmp	r3, #18
 8003d42:	d130      	bne.n	8003da6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	2203      	movs	r2, #3
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	43db      	mvns	r3, r3
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43db      	mvns	r3, r3
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4013      	ands	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	091b      	lsrs	r3, r3, #4
 8003d90:	f003 0201 	and.w	r2, r3, #1
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d118      	bne.n	8003de4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003db8:	2201      	movs	r2, #1
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	08db      	lsrs	r3, r3, #3
 8003dce:	f003 0201 	and.w	r2, r3, #1
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	2203      	movs	r2, #3
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d003      	beq.n	8003e24 <HAL_GPIO_Init+0x128>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b12      	cmp	r3, #18
 8003e22:	d123      	bne.n	8003e6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	08da      	lsrs	r2, r3, #3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3208      	adds	r2, #8
 8003e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	220f      	movs	r2, #15
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	08da      	lsrs	r2, r3, #3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3208      	adds	r2, #8
 8003e66:	6939      	ldr	r1, [r7, #16]
 8003e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	2203      	movs	r2, #3
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4013      	ands	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 0203 	and.w	r2, r3, #3
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 80ac 	beq.w	8004006 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eae:	4b5e      	ldr	r3, [pc, #376]	; (8004028 <HAL_GPIO_Init+0x32c>)
 8003eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb2:	4a5d      	ldr	r2, [pc, #372]	; (8004028 <HAL_GPIO_Init+0x32c>)
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	6613      	str	r3, [r2, #96]	; 0x60
 8003eba:	4b5b      	ldr	r3, [pc, #364]	; (8004028 <HAL_GPIO_Init+0x32c>)
 8003ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ec6:	4a59      	ldr	r2, [pc, #356]	; (800402c <HAL_GPIO_Init+0x330>)
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	089b      	lsrs	r3, r3, #2
 8003ecc:	3302      	adds	r3, #2
 8003ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	220f      	movs	r2, #15
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ef0:	d025      	beq.n	8003f3e <HAL_GPIO_Init+0x242>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a4e      	ldr	r2, [pc, #312]	; (8004030 <HAL_GPIO_Init+0x334>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01f      	beq.n	8003f3a <HAL_GPIO_Init+0x23e>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a4d      	ldr	r2, [pc, #308]	; (8004034 <HAL_GPIO_Init+0x338>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d019      	beq.n	8003f36 <HAL_GPIO_Init+0x23a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a4c      	ldr	r2, [pc, #304]	; (8004038 <HAL_GPIO_Init+0x33c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d013      	beq.n	8003f32 <HAL_GPIO_Init+0x236>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a4b      	ldr	r2, [pc, #300]	; (800403c <HAL_GPIO_Init+0x340>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00d      	beq.n	8003f2e <HAL_GPIO_Init+0x232>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a4a      	ldr	r2, [pc, #296]	; (8004040 <HAL_GPIO_Init+0x344>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d007      	beq.n	8003f2a <HAL_GPIO_Init+0x22e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a49      	ldr	r2, [pc, #292]	; (8004044 <HAL_GPIO_Init+0x348>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d101      	bne.n	8003f26 <HAL_GPIO_Init+0x22a>
 8003f22:	2306      	movs	r3, #6
 8003f24:	e00c      	b.n	8003f40 <HAL_GPIO_Init+0x244>
 8003f26:	2307      	movs	r3, #7
 8003f28:	e00a      	b.n	8003f40 <HAL_GPIO_Init+0x244>
 8003f2a:	2305      	movs	r3, #5
 8003f2c:	e008      	b.n	8003f40 <HAL_GPIO_Init+0x244>
 8003f2e:	2304      	movs	r3, #4
 8003f30:	e006      	b.n	8003f40 <HAL_GPIO_Init+0x244>
 8003f32:	2303      	movs	r3, #3
 8003f34:	e004      	b.n	8003f40 <HAL_GPIO_Init+0x244>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e002      	b.n	8003f40 <HAL_GPIO_Init+0x244>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <HAL_GPIO_Init+0x244>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	f002 0203 	and.w	r2, r2, #3
 8003f46:	0092      	lsls	r2, r2, #2
 8003f48:	4093      	lsls	r3, r2
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f50:	4936      	ldr	r1, [pc, #216]	; (800402c <HAL_GPIO_Init+0x330>)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	089b      	lsrs	r3, r3, #2
 8003f56:	3302      	adds	r3, #2
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f5e:	4b3a      	ldr	r3, [pc, #232]	; (8004048 <HAL_GPIO_Init+0x34c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	43db      	mvns	r3, r3
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f82:	4a31      	ldr	r2, [pc, #196]	; (8004048 <HAL_GPIO_Init+0x34c>)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003f88:	4b2f      	ldr	r3, [pc, #188]	; (8004048 <HAL_GPIO_Init+0x34c>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4013      	ands	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fac:	4a26      	ldr	r2, [pc, #152]	; (8004048 <HAL_GPIO_Init+0x34c>)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fb2:	4b25      	ldr	r3, [pc, #148]	; (8004048 <HAL_GPIO_Init+0x34c>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fd6:	4a1c      	ldr	r2, [pc, #112]	; (8004048 <HAL_GPIO_Init+0x34c>)
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <HAL_GPIO_Init+0x34c>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004000:	4a11      	ldr	r2, [pc, #68]	; (8004048 <HAL_GPIO_Init+0x34c>)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	3301      	adds	r3, #1
 800400a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	fa22 f303 	lsr.w	r3, r2, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	f47f ae78 	bne.w	8003d0c <HAL_GPIO_Init+0x10>
  }
}
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40021000 	.word	0x40021000
 800402c:	40010000 	.word	0x40010000
 8004030:	48000400 	.word	0x48000400
 8004034:	48000800 	.word	0x48000800
 8004038:	48000c00 	.word	0x48000c00
 800403c:	48001000 	.word	0x48001000
 8004040:	48001400 	.word	0x48001400
 8004044:	48001800 	.word	0x48001800
 8004048:	40010400 	.word	0x40010400

0800404c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	887b      	ldrh	r3, [r7, #2]
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
 8004068:	e001      	b.n	800406e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800406a:	2300      	movs	r3, #0
 800406c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800406e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	807b      	strh	r3, [r7, #2]
 8004088:	4613      	mov	r3, r2
 800408a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800408c:	787b      	ldrb	r3, [r7, #1]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004092:	887a      	ldrh	r2, [r7, #2]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004098:	e002      	b.n	80040a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800409a:	887a      	ldrh	r2, [r7, #2]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040b6:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	88fb      	ldrh	r3, [r7, #6]
 80040bc:	4013      	ands	r3, r2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d006      	beq.n	80040d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040c2:	4a05      	ldr	r2, [pc, #20]	; (80040d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040c4:	88fb      	ldrh	r3, [r7, #6]
 80040c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 f806 	bl	80040dc <HAL_GPIO_EXTI_Callback>
  }
}
 80040d0:	bf00      	nop
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40010400 	.word	0x40010400

080040dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <HAL_PWREx_GetVoltageRange+0x18>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004100:	4618      	mov	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40007000 	.word	0x40007000

08004110 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800411e:	d130      	bne.n	8004182 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004120:	4b23      	ldr	r3, [pc, #140]	; (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800412c:	d038      	beq.n	80041a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800412e:	4b20      	ldr	r3, [pc, #128]	; (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004136:	4a1e      	ldr	r2, [pc, #120]	; (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800413c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800413e:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2232      	movs	r2, #50	; 0x32
 8004144:	fb02 f303 	mul.w	r3, r2, r3
 8004148:	4a1b      	ldr	r2, [pc, #108]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	0c9b      	lsrs	r3, r3, #18
 8004150:	3301      	adds	r3, #1
 8004152:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004154:	e002      	b.n	800415c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3b01      	subs	r3, #1
 800415a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800415c:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004168:	d102      	bne.n	8004170 <HAL_PWREx_ControlVoltageScaling+0x60>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f2      	bne.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004170:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417c:	d110      	bne.n	80041a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e00f      	b.n	80041a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004182:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800418a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418e:	d007      	beq.n	80041a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004190:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004198:	4a05      	ldr	r2, [pc, #20]	; (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800419a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800419e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40007000 	.word	0x40007000
 80041b4:	20000088 	.word	0x20000088
 80041b8:	431bde83 	.word	0x431bde83

080041bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e3d4      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ce:	4ba1      	ldr	r3, [pc, #644]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041d8:	4b9e      	ldr	r3, [pc, #632]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0310 	and.w	r3, r3, #16
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80e4 	beq.w	80043b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <HAL_RCC_OscConfig+0x4a>
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2b0c      	cmp	r3, #12
 80041fa:	f040 808b 	bne.w	8004314 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b01      	cmp	r3, #1
 8004202:	f040 8087 	bne.w	8004314 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004206:	4b93      	ldr	r3, [pc, #588]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <HAL_RCC_OscConfig+0x62>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e3ac      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1a      	ldr	r2, [r3, #32]
 8004222:	4b8c      	ldr	r3, [pc, #560]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d004      	beq.n	8004238 <HAL_RCC_OscConfig+0x7c>
 800422e:	4b89      	ldr	r3, [pc, #548]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004236:	e005      	b.n	8004244 <HAL_RCC_OscConfig+0x88>
 8004238:	4b86      	ldr	r3, [pc, #536]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800423a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800423e:	091b      	lsrs	r3, r3, #4
 8004240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004244:	4293      	cmp	r3, r2
 8004246:	d223      	bcs.n	8004290 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fd3f 	bl	8004cd0 <RCC_SetFlashLatencyFromMSIRange>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e38d      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800425c:	4b7d      	ldr	r3, [pc, #500]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a7c      	ldr	r2, [pc, #496]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004262:	f043 0308 	orr.w	r3, r3, #8
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	4b7a      	ldr	r3, [pc, #488]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	4977      	ldr	r1, [pc, #476]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004276:	4313      	orrs	r3, r2
 8004278:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800427a:	4b76      	ldr	r3, [pc, #472]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	4972      	ldr	r1, [pc, #456]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800428a:	4313      	orrs	r3, r2
 800428c:	604b      	str	r3, [r1, #4]
 800428e:	e025      	b.n	80042dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004290:	4b70      	ldr	r3, [pc, #448]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a6f      	ldr	r2, [pc, #444]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004296:	f043 0308 	orr.w	r3, r3, #8
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	4b6d      	ldr	r3, [pc, #436]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	496a      	ldr	r1, [pc, #424]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042ae:	4b69      	ldr	r3, [pc, #420]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	4965      	ldr	r1, [pc, #404]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d109      	bne.n	80042dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fcff 	bl	8004cd0 <RCC_SetFlashLatencyFromMSIRange>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e34d      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042dc:	f000 fc36 	bl	8004b4c <HAL_RCC_GetSysClockFreq>
 80042e0:	4601      	mov	r1, r0
 80042e2:	4b5c      	ldr	r3, [pc, #368]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	091b      	lsrs	r3, r3, #4
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	4a5a      	ldr	r2, [pc, #360]	; (8004458 <HAL_RCC_OscConfig+0x29c>)
 80042ee:	5cd3      	ldrb	r3, [r2, r3]
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	fa21 f303 	lsr.w	r3, r1, r3
 80042f8:	4a58      	ldr	r2, [pc, #352]	; (800445c <HAL_RCC_OscConfig+0x2a0>)
 80042fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042fc:	4b58      	ldr	r3, [pc, #352]	; (8004460 <HAL_RCC_OscConfig+0x2a4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff fb2b 	bl	800395c <HAL_InitTick>
 8004306:	4603      	mov	r3, r0
 8004308:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d052      	beq.n	80043b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	e331      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d032      	beq.n	8004382 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800431c:	4b4d      	ldr	r3, [pc, #308]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a4c      	ldr	r2, [pc, #304]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004322:	f043 0301 	orr.w	r3, r3, #1
 8004326:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004328:	f7ff fb68 	bl	80039fc <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004330:	f7ff fb64 	bl	80039fc <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e31a      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004342:	4b44      	ldr	r3, [pc, #272]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800434e:	4b41      	ldr	r3, [pc, #260]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a40      	ldr	r2, [pc, #256]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004354:	f043 0308 	orr.w	r3, r3, #8
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	4b3e      	ldr	r3, [pc, #248]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	493b      	ldr	r1, [pc, #236]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004368:	4313      	orrs	r3, r2
 800436a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800436c:	4b39      	ldr	r3, [pc, #228]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	4936      	ldr	r1, [pc, #216]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]
 8004380:	e01a      	b.n	80043b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004382:	4b34      	ldr	r3, [pc, #208]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a33      	ldr	r2, [pc, #204]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004388:	f023 0301 	bic.w	r3, r3, #1
 800438c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800438e:	f7ff fb35 	bl	80039fc <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004396:	f7ff fb31 	bl	80039fc <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e2e7      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043a8:	4b2a      	ldr	r3, [pc, #168]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f0      	bne.n	8004396 <HAL_RCC_OscConfig+0x1da>
 80043b4:	e000      	b.n	80043b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d074      	beq.n	80044ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d005      	beq.n	80043d6 <HAL_RCC_OscConfig+0x21a>
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b0c      	cmp	r3, #12
 80043ce:	d10e      	bne.n	80043ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	d10b      	bne.n	80043ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d6:	4b1f      	ldr	r3, [pc, #124]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d064      	beq.n	80044ac <HAL_RCC_OscConfig+0x2f0>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d160      	bne.n	80044ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e2c4      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f6:	d106      	bne.n	8004406 <HAL_RCC_OscConfig+0x24a>
 80043f8:	4b16      	ldr	r3, [pc, #88]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a15      	ldr	r2, [pc, #84]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80043fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	e01d      	b.n	8004442 <HAL_RCC_OscConfig+0x286>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800440e:	d10c      	bne.n	800442a <HAL_RCC_OscConfig+0x26e>
 8004410:	4b10      	ldr	r3, [pc, #64]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a0f      	ldr	r2, [pc, #60]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004416:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0c      	ldr	r2, [pc, #48]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	e00b      	b.n	8004442 <HAL_RCC_OscConfig+0x286>
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	4b07      	ldr	r3, [pc, #28]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a06      	ldr	r2, [pc, #24]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800443c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004440:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01c      	beq.n	8004484 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444a:	f7ff fad7 	bl	80039fc <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004450:	e011      	b.n	8004476 <HAL_RCC_OscConfig+0x2ba>
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000
 8004458:	08006d54 	.word	0x08006d54
 800445c:	20000088 	.word	0x20000088
 8004460:	200000e8 	.word	0x200000e8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004464:	f7ff faca 	bl	80039fc <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b64      	cmp	r3, #100	; 0x64
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e280      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004476:	4baf      	ldr	r3, [pc, #700]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCC_OscConfig+0x2a8>
 8004482:	e014      	b.n	80044ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7ff faba 	bl	80039fc <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800448c:	f7ff fab6 	bl	80039fc <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	; 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e26c      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800449e:	4ba5      	ldr	r3, [pc, #660]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x2d0>
 80044aa:	e000      	b.n	80044ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d060      	beq.n	800457c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d005      	beq.n	80044cc <HAL_RCC_OscConfig+0x310>
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	2b0c      	cmp	r3, #12
 80044c4:	d119      	bne.n	80044fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d116      	bne.n	80044fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044cc:	4b99      	ldr	r3, [pc, #612]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_RCC_OscConfig+0x328>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e249      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e4:	4b93      	ldr	r3, [pc, #588]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	061b      	lsls	r3, r3, #24
 80044f2:	4990      	ldr	r1, [pc, #576]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044f8:	e040      	b.n	800457c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d023      	beq.n	800454a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004502:	4b8c      	ldr	r3, [pc, #560]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a8b      	ldr	r2, [pc, #556]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800450c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450e:	f7ff fa75 	bl	80039fc <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004516:	f7ff fa71 	bl	80039fc <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e227      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004528:	4b82      	ldr	r3, [pc, #520]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004534:	4b7f      	ldr	r3, [pc, #508]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	497c      	ldr	r1, [pc, #496]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004544:	4313      	orrs	r3, r2
 8004546:	604b      	str	r3, [r1, #4]
 8004548:	e018      	b.n	800457c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454a:	4b7a      	ldr	r3, [pc, #488]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a79      	ldr	r2, [pc, #484]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004556:	f7ff fa51 	bl	80039fc <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455e:	f7ff fa4d 	bl	80039fc <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e203      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004570:	4b70      	ldr	r3, [pc, #448]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1f0      	bne.n	800455e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d03c      	beq.n	8004602 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01c      	beq.n	80045ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004590:	4b68      	ldr	r3, [pc, #416]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004596:	4a67      	ldr	r2, [pc, #412]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a0:	f7ff fa2c 	bl	80039fc <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a8:	f7ff fa28 	bl	80039fc <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e1de      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045ba:	4b5e      	ldr	r3, [pc, #376]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80045bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0ef      	beq.n	80045a8 <HAL_RCC_OscConfig+0x3ec>
 80045c8:	e01b      	b.n	8004602 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ca:	4b5a      	ldr	r3, [pc, #360]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80045cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d0:	4a58      	ldr	r2, [pc, #352]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045da:	f7ff fa0f 	bl	80039fc <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e2:	f7ff fa0b 	bl	80039fc <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e1c1      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045f4:	4b4f      	ldr	r3, [pc, #316]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80045f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1ef      	bne.n	80045e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80a6 	beq.w	800475c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004610:	2300      	movs	r3, #0
 8004612:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004614:	4b47      	ldr	r3, [pc, #284]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10d      	bne.n	800463c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004620:	4b44      	ldr	r3, [pc, #272]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004624:	4a43      	ldr	r2, [pc, #268]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462a:	6593      	str	r3, [r2, #88]	; 0x58
 800462c:	4b41      	ldr	r3, [pc, #260]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 800462e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004634:	60bb      	str	r3, [r7, #8]
 8004636:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004638:	2301      	movs	r3, #1
 800463a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800463c:	4b3e      	ldr	r3, [pc, #248]	; (8004738 <HAL_RCC_OscConfig+0x57c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d118      	bne.n	800467a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004648:	4b3b      	ldr	r3, [pc, #236]	; (8004738 <HAL_RCC_OscConfig+0x57c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a3a      	ldr	r2, [pc, #232]	; (8004738 <HAL_RCC_OscConfig+0x57c>)
 800464e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004652:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004654:	f7ff f9d2 	bl	80039fc <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465c:	f7ff f9ce 	bl	80039fc <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e184      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800466e:	4b32      	ldr	r3, [pc, #200]	; (8004738 <HAL_RCC_OscConfig+0x57c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d108      	bne.n	8004694 <HAL_RCC_OscConfig+0x4d8>
 8004682:	4b2c      	ldr	r3, [pc, #176]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004688:	4a2a      	ldr	r2, [pc, #168]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004692:	e024      	b.n	80046de <HAL_RCC_OscConfig+0x522>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b05      	cmp	r3, #5
 800469a:	d110      	bne.n	80046be <HAL_RCC_OscConfig+0x502>
 800469c:	4b25      	ldr	r3, [pc, #148]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a2:	4a24      	ldr	r2, [pc, #144]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80046a4:	f043 0304 	orr.w	r3, r3, #4
 80046a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046ac:	4b21      	ldr	r3, [pc, #132]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	4a20      	ldr	r2, [pc, #128]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046bc:	e00f      	b.n	80046de <HAL_RCC_OscConfig+0x522>
 80046be:	4b1d      	ldr	r3, [pc, #116]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c4:	4a1b      	ldr	r2, [pc, #108]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80046c6:	f023 0301 	bic.w	r3, r3, #1
 80046ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046ce:	4b19      	ldr	r3, [pc, #100]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80046d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d4:	4a17      	ldr	r2, [pc, #92]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80046d6:	f023 0304 	bic.w	r3, r3, #4
 80046da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d016      	beq.n	8004714 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e6:	f7ff f989 	bl	80039fc <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ec:	e00a      	b.n	8004704 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ee:	f7ff f985 	bl	80039fc <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e139      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0ed      	beq.n	80046ee <HAL_RCC_OscConfig+0x532>
 8004712:	e01a      	b.n	800474a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004714:	f7ff f972 	bl	80039fc <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800471a:	e00f      	b.n	800473c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471c:	f7ff f96e 	bl	80039fc <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	f241 3288 	movw	r2, #5000	; 0x1388
 800472a:	4293      	cmp	r3, r2
 800472c:	d906      	bls.n	800473c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e122      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
 8004732:	bf00      	nop
 8004734:	40021000 	.word	0x40021000
 8004738:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800473c:	4b90      	ldr	r3, [pc, #576]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e8      	bne.n	800471c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800474a:	7ffb      	ldrb	r3, [r7, #31]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d105      	bne.n	800475c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004750:	4b8b      	ldr	r3, [pc, #556]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004754:	4a8a      	ldr	r2, [pc, #552]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800475a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 8108 	beq.w	8004976 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	2b02      	cmp	r3, #2
 800476c:	f040 80d0 	bne.w	8004910 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004770:	4b83      	ldr	r3, [pc, #524]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f003 0203 	and.w	r2, r3, #3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	429a      	cmp	r2, r3
 8004782:	d130      	bne.n	80047e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	3b01      	subs	r3, #1
 8004790:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004792:	429a      	cmp	r2, r3
 8004794:	d127      	bne.n	80047e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d11f      	bne.n	80047e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047b0:	2a07      	cmp	r2, #7
 80047b2:	bf14      	ite	ne
 80047b4:	2201      	movne	r2, #1
 80047b6:	2200      	moveq	r2, #0
 80047b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d113      	bne.n	80047e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c8:	085b      	lsrs	r3, r3, #1
 80047ca:	3b01      	subs	r3, #1
 80047cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d109      	bne.n	80047e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	085b      	lsrs	r3, r3, #1
 80047de:	3b01      	subs	r3, #1
 80047e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d06e      	beq.n	80048c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b0c      	cmp	r3, #12
 80047ea:	d069      	beq.n	80048c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047ec:	4b64      	ldr	r3, [pc, #400]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d105      	bne.n	8004804 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80047f8:	4b61      	ldr	r3, [pc, #388]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0b7      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004808:	4b5d      	ldr	r3, [pc, #372]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a5c      	ldr	r2, [pc, #368]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 800480e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004812:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004814:	f7ff f8f2 	bl	80039fc <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481c:	f7ff f8ee 	bl	80039fc <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e0a4      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800482e:	4b54      	ldr	r3, [pc, #336]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800483a:	4b51      	ldr	r3, [pc, #324]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	4b51      	ldr	r3, [pc, #324]	; (8004984 <HAL_RCC_OscConfig+0x7c8>)
 8004840:	4013      	ands	r3, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800484a:	3a01      	subs	r2, #1
 800484c:	0112      	lsls	r2, r2, #4
 800484e:	4311      	orrs	r1, r2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004854:	0212      	lsls	r2, r2, #8
 8004856:	4311      	orrs	r1, r2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800485c:	0852      	lsrs	r2, r2, #1
 800485e:	3a01      	subs	r2, #1
 8004860:	0552      	lsls	r2, r2, #21
 8004862:	4311      	orrs	r1, r2
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004868:	0852      	lsrs	r2, r2, #1
 800486a:	3a01      	subs	r2, #1
 800486c:	0652      	lsls	r2, r2, #25
 800486e:	4311      	orrs	r1, r2
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004874:	0912      	lsrs	r2, r2, #4
 8004876:	0452      	lsls	r2, r2, #17
 8004878:	430a      	orrs	r2, r1
 800487a:	4941      	ldr	r1, [pc, #260]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 800487c:	4313      	orrs	r3, r2
 800487e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004880:	4b3f      	ldr	r3, [pc, #252]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a3e      	ldr	r2, [pc, #248]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800488a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800488c:	4b3c      	ldr	r3, [pc, #240]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	4a3b      	ldr	r2, [pc, #236]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004896:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004898:	f7ff f8b0 	bl	80039fc <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a0:	f7ff f8ac 	bl	80039fc <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e062      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b2:	4b33      	ldr	r3, [pc, #204]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f0      	beq.n	80048a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048be:	e05a      	b.n	8004976 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e059      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048c4:	4b2e      	ldr	r3, [pc, #184]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d152      	bne.n	8004976 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048d0:	4b2b      	ldr	r3, [pc, #172]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a2a      	ldr	r2, [pc, #168]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 80048d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048dc:	4b28      	ldr	r3, [pc, #160]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	4a27      	ldr	r2, [pc, #156]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 80048e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048e8:	f7ff f888 	bl	80039fc <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f0:	f7ff f884 	bl	80039fc <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e03a      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004902:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x734>
 800490e:	e032      	b.n	8004976 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	2b0c      	cmp	r3, #12
 8004914:	d02d      	beq.n	8004972 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004916:	4b1a      	ldr	r3, [pc, #104]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a19      	ldr	r2, [pc, #100]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 800491c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004920:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004922:	4b17      	ldr	r3, [pc, #92]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d105      	bne.n	800493a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800492e:	4b14      	ldr	r3, [pc, #80]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	4a13      	ldr	r2, [pc, #76]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004934:	f023 0303 	bic.w	r3, r3, #3
 8004938:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800493a:	4b11      	ldr	r3, [pc, #68]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	4a10      	ldr	r2, [pc, #64]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004940:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004948:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494a:	f7ff f857 	bl	80039fc <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004952:	f7ff f853 	bl	80039fc <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e009      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004964:	4b06      	ldr	r3, [pc, #24]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1f0      	bne.n	8004952 <HAL_RCC_OscConfig+0x796>
 8004970:	e001      	b.n	8004976 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3720      	adds	r7, #32
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40021000 	.word	0x40021000
 8004984:	f99d808c 	.word	0xf99d808c

08004988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e0c8      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800499c:	4b66      	ldr	r3, [pc, #408]	; (8004b38 <HAL_RCC_ClockConfig+0x1b0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d910      	bls.n	80049cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049aa:	4b63      	ldr	r3, [pc, #396]	; (8004b38 <HAL_RCC_ClockConfig+0x1b0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f023 0207 	bic.w	r2, r3, #7
 80049b2:	4961      	ldr	r1, [pc, #388]	; (8004b38 <HAL_RCC_ClockConfig+0x1b0>)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	4b5f      	ldr	r3, [pc, #380]	; (8004b38 <HAL_RCC_ClockConfig+0x1b0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0b0      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d04c      	beq.n	8004a72 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d107      	bne.n	80049f0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e0:	4b56      	ldr	r3, [pc, #344]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d121      	bne.n	8004a30 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e09e      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d107      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049f8:	4b50      	ldr	r3, [pc, #320]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d115      	bne.n	8004a30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e092      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a10:	4b4a      	ldr	r3, [pc, #296]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d109      	bne.n	8004a30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e086      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a20:	4b46      	ldr	r3, [pc, #280]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e07e      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a30:	4b42      	ldr	r3, [pc, #264]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f023 0203 	bic.w	r2, r3, #3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	493f      	ldr	r1, [pc, #252]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a42:	f7fe ffdb 	bl	80039fc <HAL_GetTick>
 8004a46:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a48:	e00a      	b.n	8004a60 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a4a:	f7fe ffd7 	bl	80039fc <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e066      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a60:	4b36      	ldr	r3, [pc, #216]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 020c 	and.w	r2, r3, #12
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d1eb      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a7e:	4b2f      	ldr	r3, [pc, #188]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	492c      	ldr	r1, [pc, #176]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a90:	4b29      	ldr	r3, [pc, #164]	; (8004b38 <HAL_RCC_ClockConfig+0x1b0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d210      	bcs.n	8004ac0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9e:	4b26      	ldr	r3, [pc, #152]	; (8004b38 <HAL_RCC_ClockConfig+0x1b0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f023 0207 	bic.w	r2, r3, #7
 8004aa6:	4924      	ldr	r1, [pc, #144]	; (8004b38 <HAL_RCC_ClockConfig+0x1b0>)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aae:	4b22      	ldr	r3, [pc, #136]	; (8004b38 <HAL_RCC_ClockConfig+0x1b0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d001      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e036      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d008      	beq.n	8004ade <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004acc:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4918      	ldr	r1, [pc, #96]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aea:	4b14      	ldr	r3, [pc, #80]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	4910      	ldr	r1, [pc, #64]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004afe:	f000 f825 	bl	8004b4c <HAL_RCC_GetSysClockFreq>
 8004b02:	4601      	mov	r1, r0
 8004b04:	4b0d      	ldr	r3, [pc, #52]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	091b      	lsrs	r3, r3, #4
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	4a0c      	ldr	r2, [pc, #48]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 8004b10:	5cd3      	ldrb	r3, [r2, r3]
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	fa21 f303 	lsr.w	r3, r1, r3
 8004b1a:	4a0a      	ldr	r2, [pc, #40]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b1e:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <HAL_RCC_ClockConfig+0x1c0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fe ff1a 	bl	800395c <HAL_InitTick>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b2c:	7afb      	ldrb	r3, [r7, #11]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40022000 	.word	0x40022000
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	08006d54 	.word	0x08006d54
 8004b44:	20000088 	.word	0x20000088
 8004b48:	200000e8 	.word	0x200000e8

08004b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b089      	sub	sp, #36	; 0x24
 8004b50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	2300      	movs	r3, #0
 8004b58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b5a:	4b3d      	ldr	r3, [pc, #244]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b64:	4b3a      	ldr	r3, [pc, #232]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0303 	and.w	r3, r3, #3
 8004b6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_RCC_GetSysClockFreq+0x34>
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b0c      	cmp	r3, #12
 8004b78:	d121      	bne.n	8004bbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d11e      	bne.n	8004bbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b80:	4b33      	ldr	r3, [pc, #204]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d107      	bne.n	8004b9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b8c:	4b30      	ldr	r3, [pc, #192]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b92:	0a1b      	lsrs	r3, r3, #8
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	61fb      	str	r3, [r7, #28]
 8004b9a:	e005      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b9c:	4b2c      	ldr	r3, [pc, #176]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	091b      	lsrs	r3, r3, #4
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ba8:	4a2a      	ldr	r2, [pc, #168]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10d      	bne.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bbc:	e00a      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d102      	bne.n	8004bca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bc4:	4b24      	ldr	r3, [pc, #144]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004bc6:	61bb      	str	r3, [r7, #24]
 8004bc8:	e004      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d101      	bne.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bd0:	4b22      	ldr	r3, [pc, #136]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x110>)
 8004bd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	2b0c      	cmp	r3, #12
 8004bd8:	d133      	bne.n	8004c42 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bda:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d002      	beq.n	8004bf0 <HAL_RCC_GetSysClockFreq+0xa4>
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCC_GetSysClockFreq+0xaa>
 8004bee:	e005      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bf0:	4b19      	ldr	r3, [pc, #100]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004bf2:	617b      	str	r3, [r7, #20]
      break;
 8004bf4:	e005      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004bf6:	4b19      	ldr	r3, [pc, #100]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x110>)
 8004bf8:	617b      	str	r3, [r7, #20]
      break;
 8004bfa:	e002      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	617b      	str	r3, [r7, #20]
      break;
 8004c00:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c02:	4b13      	ldr	r3, [pc, #76]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	091b      	lsrs	r3, r3, #4
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c10:	4b0f      	ldr	r3, [pc, #60]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	0a1b      	lsrs	r3, r3, #8
 8004c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	fb02 f203 	mul.w	r2, r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c28:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	0e5b      	lsrs	r3, r3, #25
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	3301      	adds	r3, #1
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c40:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c42:	69bb      	ldr	r3, [r7, #24]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3724      	adds	r7, #36	; 0x24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	40021000 	.word	0x40021000
 8004c54:	08006d6c 	.word	0x08006d6c
 8004c58:	00f42400 	.word	0x00f42400
 8004c5c:	007a1200 	.word	0x007a1200

08004c60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c64:	4b03      	ldr	r3, [pc, #12]	; (8004c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c66:	681b      	ldr	r3, [r3, #0]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	20000088 	.word	0x20000088

08004c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c7c:	f7ff fff0 	bl	8004c60 <HAL_RCC_GetHCLKFreq>
 8004c80:	4601      	mov	r1, r0
 8004c82:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	0a1b      	lsrs	r3, r3, #8
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	4a04      	ldr	r2, [pc, #16]	; (8004ca0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c8e:	5cd3      	ldrb	r3, [r2, r3]
 8004c90:	f003 031f 	and.w	r3, r3, #31
 8004c94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	08006d64 	.word	0x08006d64

08004ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ca8:	f7ff ffda 	bl	8004c60 <HAL_RCC_GetHCLKFreq>
 8004cac:	4601      	mov	r1, r0
 8004cae:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	0adb      	lsrs	r3, r3, #11
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	4a04      	ldr	r2, [pc, #16]	; (8004ccc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cba:	5cd3      	ldrb	r3, [r2, r3]
 8004cbc:	f003 031f 	and.w	r3, r3, #31
 8004cc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	08006d64 	.word	0x08006d64

08004cd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004cd8:	2300      	movs	r3, #0
 8004cda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004cdc:	4b2a      	ldr	r3, [pc, #168]	; (8004d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ce8:	f7ff fa04 	bl	80040f4 <HAL_PWREx_GetVoltageRange>
 8004cec:	6178      	str	r0, [r7, #20]
 8004cee:	e014      	b.n	8004d1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cf0:	4b25      	ldr	r3, [pc, #148]	; (8004d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf4:	4a24      	ldr	r2, [pc, #144]	; (8004d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8004cfc:	4b22      	ldr	r3, [pc, #136]	; (8004d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d08:	f7ff f9f4 	bl	80040f4 <HAL_PWREx_GetVoltageRange>
 8004d0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d0e:	4b1e      	ldr	r3, [pc, #120]	; (8004d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d12:	4a1d      	ldr	r2, [pc, #116]	; (8004d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d20:	d10b      	bne.n	8004d3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b80      	cmp	r3, #128	; 0x80
 8004d26:	d919      	bls.n	8004d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2ba0      	cmp	r3, #160	; 0xa0
 8004d2c:	d902      	bls.n	8004d34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d2e:	2302      	movs	r3, #2
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	e013      	b.n	8004d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d34:	2301      	movs	r3, #1
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	e010      	b.n	8004d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b80      	cmp	r3, #128	; 0x80
 8004d3e:	d902      	bls.n	8004d46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d40:	2303      	movs	r3, #3
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	e00a      	b.n	8004d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b80      	cmp	r3, #128	; 0x80
 8004d4a:	d102      	bne.n	8004d52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	e004      	b.n	8004d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b70      	cmp	r3, #112	; 0x70
 8004d56:	d101      	bne.n	8004d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d58:	2301      	movs	r3, #1
 8004d5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d5c:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f023 0207 	bic.w	r2, r3, #7
 8004d64:	4909      	ldr	r1, [pc, #36]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d6c:	4b07      	ldr	r3, [pc, #28]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d001      	beq.n	8004d7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	40022000 	.word	0x40022000

08004d90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e040      	b.n	8004e24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fd fb3e 	bl	8002434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2224      	movs	r2, #36	; 0x24
 8004dbc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0201 	bic.w	r2, r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fabe 	bl	8005350 <UART_SetConfig>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e022      	b.n	8004e24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fd3c 	bl	8005864 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 fdc3 	bl	80059a8 <UART_CheckIdleState>
 8004e22:	4603      	mov	r3, r0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08a      	sub	sp, #40	; 0x28
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	f040 8081 	bne.w	8004f48 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <HAL_UART_Transmit+0x26>
 8004e4c:	88fb      	ldrh	r3, [r7, #6]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e079      	b.n	8004f4a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_UART_Transmit+0x38>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e072      	b.n	8004f4a <HAL_UART_Transmit+0x11e>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2221      	movs	r2, #33	; 0x21
 8004e76:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004e78:	f7fe fdc0 	bl	80039fc <HAL_GetTick>
 8004e7c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	88fa      	ldrh	r2, [r7, #6]
 8004e82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	88fa      	ldrh	r2, [r7, #6]
 8004e8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e96:	d108      	bne.n	8004eaa <HAL_UART_Transmit+0x7e>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d104      	bne.n	8004eaa <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	61bb      	str	r3, [r7, #24]
 8004ea8:	e003      	b.n	8004eb2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004eba:	e02d      	b.n	8004f18 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2180      	movs	r1, #128	; 0x80
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fdb3 	bl	8005a32 <UART_WaitOnFlagUntilTimeout>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e039      	b.n	8004f4a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	881a      	ldrh	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ee8:	b292      	uxth	r2, r2
 8004eea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	3302      	adds	r3, #2
 8004ef0:	61bb      	str	r3, [r7, #24]
 8004ef2:	e008      	b.n	8004f06 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	781a      	ldrb	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	b292      	uxth	r2, r2
 8004efe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	3301      	adds	r3, #1
 8004f04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1cb      	bne.n	8004ebc <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2140      	movs	r1, #64	; 0x40
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 fd7f 	bl	8005a32 <UART_WaitOnFlagUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e005      	b.n	8004f4a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004f44:	2300      	movs	r3, #0
 8004f46:	e000      	b.n	8004f4a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004f48:	2302      	movs	r3, #2
  }
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f66:	2b20      	cmp	r3, #32
 8004f68:	f040 808a 	bne.w	8005080 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <HAL_UART_Receive_IT+0x24>
 8004f72:	88fb      	ldrh	r3, [r7, #6]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e082      	b.n	8005082 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d101      	bne.n	8004f8a <HAL_UART_Receive_IT+0x36>
 8004f86:	2302      	movs	r3, #2
 8004f88:	e07b      	b.n	8005082 <HAL_UART_Receive_IT+0x12e>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	88fa      	ldrh	r2, [r7, #6]
 8004f9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	88fa      	ldrh	r2, [r7, #6]
 8004fa4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb6:	d10e      	bne.n	8004fd6 <HAL_UART_Receive_IT+0x82>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d105      	bne.n	8004fcc <HAL_UART_Receive_IT+0x78>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004fc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fca:	e02d      	b.n	8005028 <HAL_UART_Receive_IT+0xd4>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	22ff      	movs	r2, #255	; 0xff
 8004fd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fd4:	e028      	b.n	8005028 <HAL_UART_Receive_IT+0xd4>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10d      	bne.n	8004ffa <HAL_UART_Receive_IT+0xa6>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d104      	bne.n	8004ff0 <HAL_UART_Receive_IT+0x9c>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	22ff      	movs	r2, #255	; 0xff
 8004fea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fee:	e01b      	b.n	8005028 <HAL_UART_Receive_IT+0xd4>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	227f      	movs	r2, #127	; 0x7f
 8004ff4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ff8:	e016      	b.n	8005028 <HAL_UART_Receive_IT+0xd4>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005002:	d10d      	bne.n	8005020 <HAL_UART_Receive_IT+0xcc>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d104      	bne.n	8005016 <HAL_UART_Receive_IT+0xc2>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	227f      	movs	r2, #127	; 0x7f
 8005010:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005014:	e008      	b.n	8005028 <HAL_UART_Receive_IT+0xd4>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	223f      	movs	r2, #63	; 0x3f
 800501a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800501e:	e003      	b.n	8005028 <HAL_UART_Receive_IT+0xd4>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2222      	movs	r2, #34	; 0x22
 8005032:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800504c:	d107      	bne.n	800505e <HAL_UART_Receive_IT+0x10a>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d103      	bne.n	800505e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4a0d      	ldr	r2, [pc, #52]	; (8005090 <HAL_UART_Receive_IT+0x13c>)
 800505a:	661a      	str	r2, [r3, #96]	; 0x60
 800505c:	e002      	b.n	8005064 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4a0c      	ldr	r2, [pc, #48]	; (8005094 <HAL_UART_Receive_IT+0x140>)
 8005062:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800507a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	e000      	b.n	8005082 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8005080:	2302      	movs	r3, #2
  }
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	08005c71 	.word	0x08005c71
 8005094:	08005bc7 	.word	0x08005bc7

08005098 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80050be:	4013      	ands	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d113      	bne.n	80050f0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00e      	beq.n	80050f0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d009      	beq.n	80050f0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 8114 	beq.w	800530e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	4798      	blx	r3
      }
      return;
 80050ee:	e10e      	b.n	800530e <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 80d6 	beq.w	80052a4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d105      	bne.n	800510e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	4b86      	ldr	r3, [pc, #536]	; (8005320 <HAL_UART_IRQHandler+0x288>)
 8005106:	4013      	ands	r3, r2
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 80cb 	beq.w	80052a4 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00e      	beq.n	8005136 <HAL_UART_IRQHandler+0x9e>
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d009      	beq.n	8005136 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2201      	movs	r2, #1
 8005128:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800512e:	f043 0201 	orr.w	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00e      	beq.n	800515e <HAL_UART_IRQHandler+0xc6>
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d009      	beq.n	800515e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2202      	movs	r2, #2
 8005150:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005156:	f043 0204 	orr.w	r2, r3, #4
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00e      	beq.n	8005186 <HAL_UART_IRQHandler+0xee>
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d009      	beq.n	8005186 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2204      	movs	r2, #4
 8005178:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800517e:	f043 0202 	orr.w	r2, r3, #2
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	f003 0308 	and.w	r3, r3, #8
 800518c:	2b00      	cmp	r3, #0
 800518e:	d013      	beq.n	80051b8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b00      	cmp	r3, #0
 8005198:	d104      	bne.n	80051a4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d009      	beq.n	80051b8 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2208      	movs	r2, #8
 80051aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051b0:	f043 0208 	orr.w	r2, r3, #8
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00f      	beq.n	80051e2 <HAL_UART_IRQHandler+0x14a>
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051da:	f043 0220 	orr.w	r2, r3, #32
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 8093 	beq.w	8005312 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00c      	beq.n	8005210 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	f003 0320 	and.w	r3, r3, #32
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d007      	beq.n	8005210 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005214:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005220:	2b40      	cmp	r3, #64	; 0x40
 8005222:	d004      	beq.n	800522e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800522a:	2b00      	cmp	r3, #0
 800522c:	d031      	beq.n	8005292 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fc7a 	bl	8005b28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523e:	2b40      	cmp	r3, #64	; 0x40
 8005240:	d123      	bne.n	800528a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005250:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005256:	2b00      	cmp	r3, #0
 8005258:	d013      	beq.n	8005282 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800525e:	4a31      	ldr	r2, [pc, #196]	; (8005324 <HAL_UART_IRQHandler+0x28c>)
 8005260:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005266:	4618      	mov	r0, r3
 8005268:	f7fe fd07 	bl	8003c7a <HAL_DMA_Abort_IT>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d016      	beq.n	80052a0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800527c:	4610      	mov	r0, r2
 800527e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005280:	e00e      	b.n	80052a0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f85a 	bl	800533c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005288:	e00a      	b.n	80052a0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f856 	bl	800533c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005290:	e006      	b.n	80052a0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f852 	bl	800533c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800529e:	e038      	b.n	8005312 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a0:	bf00      	nop
    return;
 80052a2:	e036      	b.n	8005312 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00d      	beq.n	80052ca <HAL_UART_IRQHandler+0x232>
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d008      	beq.n	80052ca <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80052c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fd29 	bl	8005d1a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052c8:	e026      	b.n	8005318 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00d      	beq.n	80052f0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d008      	beq.n	80052f0 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d017      	beq.n	8005316 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	4798      	blx	r3
    }
    return;
 80052ee:	e012      	b.n	8005316 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00e      	beq.n	8005318 <HAL_UART_IRQHandler+0x280>
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005300:	2b00      	cmp	r3, #0
 8005302:	d009      	beq.n	8005318 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fc45 	bl	8005b94 <UART_EndTransmit_IT>
    return;
 800530a:	bf00      	nop
 800530c:	e004      	b.n	8005318 <HAL_UART_IRQHandler+0x280>
      return;
 800530e:	bf00      	nop
 8005310:	e002      	b.n	8005318 <HAL_UART_IRQHandler+0x280>
    return;
 8005312:	bf00      	nop
 8005314:	e000      	b.n	8005318 <HAL_UART_IRQHandler+0x280>
    return;
 8005316:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	04000120 	.word	0x04000120
 8005324:	08005b69 	.word	0x08005b69

08005328 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005350:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005354:	b088      	sub	sp, #32
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	4313      	orrs	r3, r2
 8005374:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	4bac      	ldr	r3, [pc, #688]	; (8005630 <UART_SetConfig+0x2e0>)
 800537e:	4013      	ands	r3, r2
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6812      	ldr	r2, [r2, #0]
 8005384:	69f9      	ldr	r1, [r7, #28]
 8005386:	430b      	orrs	r3, r1
 8005388:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4aa2      	ldr	r2, [pc, #648]	; (8005634 <UART_SetConfig+0x2e4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d004      	beq.n	80053ba <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	69fa      	ldr	r2, [r7, #28]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69fa      	ldr	r2, [r7, #28]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a99      	ldr	r2, [pc, #612]	; (8005638 <UART_SetConfig+0x2e8>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d121      	bne.n	800541c <UART_SetConfig+0xcc>
 80053d8:	4b98      	ldr	r3, [pc, #608]	; (800563c <UART_SetConfig+0x2ec>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d816      	bhi.n	8005414 <UART_SetConfig+0xc4>
 80053e6:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <UART_SetConfig+0x9c>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	080053fd 	.word	0x080053fd
 80053f0:	08005409 	.word	0x08005409
 80053f4:	08005403 	.word	0x08005403
 80053f8:	0800540f 	.word	0x0800540f
 80053fc:	2301      	movs	r3, #1
 80053fe:	76fb      	strb	r3, [r7, #27]
 8005400:	e0e8      	b.n	80055d4 <UART_SetConfig+0x284>
 8005402:	2302      	movs	r3, #2
 8005404:	76fb      	strb	r3, [r7, #27]
 8005406:	e0e5      	b.n	80055d4 <UART_SetConfig+0x284>
 8005408:	2304      	movs	r3, #4
 800540a:	76fb      	strb	r3, [r7, #27]
 800540c:	e0e2      	b.n	80055d4 <UART_SetConfig+0x284>
 800540e:	2308      	movs	r3, #8
 8005410:	76fb      	strb	r3, [r7, #27]
 8005412:	e0df      	b.n	80055d4 <UART_SetConfig+0x284>
 8005414:	2310      	movs	r3, #16
 8005416:	76fb      	strb	r3, [r7, #27]
 8005418:	bf00      	nop
 800541a:	e0db      	b.n	80055d4 <UART_SetConfig+0x284>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a87      	ldr	r2, [pc, #540]	; (8005640 <UART_SetConfig+0x2f0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d134      	bne.n	8005490 <UART_SetConfig+0x140>
 8005426:	4b85      	ldr	r3, [pc, #532]	; (800563c <UART_SetConfig+0x2ec>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	f003 030c 	and.w	r3, r3, #12
 8005430:	2b0c      	cmp	r3, #12
 8005432:	d829      	bhi.n	8005488 <UART_SetConfig+0x138>
 8005434:	a201      	add	r2, pc, #4	; (adr r2, 800543c <UART_SetConfig+0xec>)
 8005436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543a:	bf00      	nop
 800543c:	08005471 	.word	0x08005471
 8005440:	08005489 	.word	0x08005489
 8005444:	08005489 	.word	0x08005489
 8005448:	08005489 	.word	0x08005489
 800544c:	0800547d 	.word	0x0800547d
 8005450:	08005489 	.word	0x08005489
 8005454:	08005489 	.word	0x08005489
 8005458:	08005489 	.word	0x08005489
 800545c:	08005477 	.word	0x08005477
 8005460:	08005489 	.word	0x08005489
 8005464:	08005489 	.word	0x08005489
 8005468:	08005489 	.word	0x08005489
 800546c:	08005483 	.word	0x08005483
 8005470:	2300      	movs	r3, #0
 8005472:	76fb      	strb	r3, [r7, #27]
 8005474:	e0ae      	b.n	80055d4 <UART_SetConfig+0x284>
 8005476:	2302      	movs	r3, #2
 8005478:	76fb      	strb	r3, [r7, #27]
 800547a:	e0ab      	b.n	80055d4 <UART_SetConfig+0x284>
 800547c:	2304      	movs	r3, #4
 800547e:	76fb      	strb	r3, [r7, #27]
 8005480:	e0a8      	b.n	80055d4 <UART_SetConfig+0x284>
 8005482:	2308      	movs	r3, #8
 8005484:	76fb      	strb	r3, [r7, #27]
 8005486:	e0a5      	b.n	80055d4 <UART_SetConfig+0x284>
 8005488:	2310      	movs	r3, #16
 800548a:	76fb      	strb	r3, [r7, #27]
 800548c:	bf00      	nop
 800548e:	e0a1      	b.n	80055d4 <UART_SetConfig+0x284>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a6b      	ldr	r2, [pc, #428]	; (8005644 <UART_SetConfig+0x2f4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d120      	bne.n	80054dc <UART_SetConfig+0x18c>
 800549a:	4b68      	ldr	r3, [pc, #416]	; (800563c <UART_SetConfig+0x2ec>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054a4:	2b10      	cmp	r3, #16
 80054a6:	d00f      	beq.n	80054c8 <UART_SetConfig+0x178>
 80054a8:	2b10      	cmp	r3, #16
 80054aa:	d802      	bhi.n	80054b2 <UART_SetConfig+0x162>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d005      	beq.n	80054bc <UART_SetConfig+0x16c>
 80054b0:	e010      	b.n	80054d4 <UART_SetConfig+0x184>
 80054b2:	2b20      	cmp	r3, #32
 80054b4:	d005      	beq.n	80054c2 <UART_SetConfig+0x172>
 80054b6:	2b30      	cmp	r3, #48	; 0x30
 80054b8:	d009      	beq.n	80054ce <UART_SetConfig+0x17e>
 80054ba:	e00b      	b.n	80054d4 <UART_SetConfig+0x184>
 80054bc:	2300      	movs	r3, #0
 80054be:	76fb      	strb	r3, [r7, #27]
 80054c0:	e088      	b.n	80055d4 <UART_SetConfig+0x284>
 80054c2:	2302      	movs	r3, #2
 80054c4:	76fb      	strb	r3, [r7, #27]
 80054c6:	e085      	b.n	80055d4 <UART_SetConfig+0x284>
 80054c8:	2304      	movs	r3, #4
 80054ca:	76fb      	strb	r3, [r7, #27]
 80054cc:	e082      	b.n	80055d4 <UART_SetConfig+0x284>
 80054ce:	2308      	movs	r3, #8
 80054d0:	76fb      	strb	r3, [r7, #27]
 80054d2:	e07f      	b.n	80055d4 <UART_SetConfig+0x284>
 80054d4:	2310      	movs	r3, #16
 80054d6:	76fb      	strb	r3, [r7, #27]
 80054d8:	bf00      	nop
 80054da:	e07b      	b.n	80055d4 <UART_SetConfig+0x284>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a59      	ldr	r2, [pc, #356]	; (8005648 <UART_SetConfig+0x2f8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d120      	bne.n	8005528 <UART_SetConfig+0x1d8>
 80054e6:	4b55      	ldr	r3, [pc, #340]	; (800563c <UART_SetConfig+0x2ec>)
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054f0:	2b40      	cmp	r3, #64	; 0x40
 80054f2:	d00f      	beq.n	8005514 <UART_SetConfig+0x1c4>
 80054f4:	2b40      	cmp	r3, #64	; 0x40
 80054f6:	d802      	bhi.n	80054fe <UART_SetConfig+0x1ae>
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d005      	beq.n	8005508 <UART_SetConfig+0x1b8>
 80054fc:	e010      	b.n	8005520 <UART_SetConfig+0x1d0>
 80054fe:	2b80      	cmp	r3, #128	; 0x80
 8005500:	d005      	beq.n	800550e <UART_SetConfig+0x1be>
 8005502:	2bc0      	cmp	r3, #192	; 0xc0
 8005504:	d009      	beq.n	800551a <UART_SetConfig+0x1ca>
 8005506:	e00b      	b.n	8005520 <UART_SetConfig+0x1d0>
 8005508:	2300      	movs	r3, #0
 800550a:	76fb      	strb	r3, [r7, #27]
 800550c:	e062      	b.n	80055d4 <UART_SetConfig+0x284>
 800550e:	2302      	movs	r3, #2
 8005510:	76fb      	strb	r3, [r7, #27]
 8005512:	e05f      	b.n	80055d4 <UART_SetConfig+0x284>
 8005514:	2304      	movs	r3, #4
 8005516:	76fb      	strb	r3, [r7, #27]
 8005518:	e05c      	b.n	80055d4 <UART_SetConfig+0x284>
 800551a:	2308      	movs	r3, #8
 800551c:	76fb      	strb	r3, [r7, #27]
 800551e:	e059      	b.n	80055d4 <UART_SetConfig+0x284>
 8005520:	2310      	movs	r3, #16
 8005522:	76fb      	strb	r3, [r7, #27]
 8005524:	bf00      	nop
 8005526:	e055      	b.n	80055d4 <UART_SetConfig+0x284>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a47      	ldr	r2, [pc, #284]	; (800564c <UART_SetConfig+0x2fc>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d124      	bne.n	800557c <UART_SetConfig+0x22c>
 8005532:	4b42      	ldr	r3, [pc, #264]	; (800563c <UART_SetConfig+0x2ec>)
 8005534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005540:	d012      	beq.n	8005568 <UART_SetConfig+0x218>
 8005542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005546:	d802      	bhi.n	800554e <UART_SetConfig+0x1fe>
 8005548:	2b00      	cmp	r3, #0
 800554a:	d007      	beq.n	800555c <UART_SetConfig+0x20c>
 800554c:	e012      	b.n	8005574 <UART_SetConfig+0x224>
 800554e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005552:	d006      	beq.n	8005562 <UART_SetConfig+0x212>
 8005554:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005558:	d009      	beq.n	800556e <UART_SetConfig+0x21e>
 800555a:	e00b      	b.n	8005574 <UART_SetConfig+0x224>
 800555c:	2300      	movs	r3, #0
 800555e:	76fb      	strb	r3, [r7, #27]
 8005560:	e038      	b.n	80055d4 <UART_SetConfig+0x284>
 8005562:	2302      	movs	r3, #2
 8005564:	76fb      	strb	r3, [r7, #27]
 8005566:	e035      	b.n	80055d4 <UART_SetConfig+0x284>
 8005568:	2304      	movs	r3, #4
 800556a:	76fb      	strb	r3, [r7, #27]
 800556c:	e032      	b.n	80055d4 <UART_SetConfig+0x284>
 800556e:	2308      	movs	r3, #8
 8005570:	76fb      	strb	r3, [r7, #27]
 8005572:	e02f      	b.n	80055d4 <UART_SetConfig+0x284>
 8005574:	2310      	movs	r3, #16
 8005576:	76fb      	strb	r3, [r7, #27]
 8005578:	bf00      	nop
 800557a:	e02b      	b.n	80055d4 <UART_SetConfig+0x284>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a2c      	ldr	r2, [pc, #176]	; (8005634 <UART_SetConfig+0x2e4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d124      	bne.n	80055d0 <UART_SetConfig+0x280>
 8005586:	4b2d      	ldr	r3, [pc, #180]	; (800563c <UART_SetConfig+0x2ec>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005594:	d012      	beq.n	80055bc <UART_SetConfig+0x26c>
 8005596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800559a:	d802      	bhi.n	80055a2 <UART_SetConfig+0x252>
 800559c:	2b00      	cmp	r3, #0
 800559e:	d007      	beq.n	80055b0 <UART_SetConfig+0x260>
 80055a0:	e012      	b.n	80055c8 <UART_SetConfig+0x278>
 80055a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a6:	d006      	beq.n	80055b6 <UART_SetConfig+0x266>
 80055a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055ac:	d009      	beq.n	80055c2 <UART_SetConfig+0x272>
 80055ae:	e00b      	b.n	80055c8 <UART_SetConfig+0x278>
 80055b0:	2300      	movs	r3, #0
 80055b2:	76fb      	strb	r3, [r7, #27]
 80055b4:	e00e      	b.n	80055d4 <UART_SetConfig+0x284>
 80055b6:	2302      	movs	r3, #2
 80055b8:	76fb      	strb	r3, [r7, #27]
 80055ba:	e00b      	b.n	80055d4 <UART_SetConfig+0x284>
 80055bc:	2304      	movs	r3, #4
 80055be:	76fb      	strb	r3, [r7, #27]
 80055c0:	e008      	b.n	80055d4 <UART_SetConfig+0x284>
 80055c2:	2308      	movs	r3, #8
 80055c4:	76fb      	strb	r3, [r7, #27]
 80055c6:	e005      	b.n	80055d4 <UART_SetConfig+0x284>
 80055c8:	2310      	movs	r3, #16
 80055ca:	76fb      	strb	r3, [r7, #27]
 80055cc:	bf00      	nop
 80055ce:	e001      	b.n	80055d4 <UART_SetConfig+0x284>
 80055d0:	2310      	movs	r3, #16
 80055d2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a16      	ldr	r2, [pc, #88]	; (8005634 <UART_SetConfig+0x2e4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	f040 8087 	bne.w	80056ee <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055e0:	7efb      	ldrb	r3, [r7, #27]
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d836      	bhi.n	8005654 <UART_SetConfig+0x304>
 80055e6:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <UART_SetConfig+0x29c>)
 80055e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ec:	08005611 	.word	0x08005611
 80055f0:	08005655 	.word	0x08005655
 80055f4:	08005619 	.word	0x08005619
 80055f8:	08005655 	.word	0x08005655
 80055fc:	0800561f 	.word	0x0800561f
 8005600:	08005655 	.word	0x08005655
 8005604:	08005655 	.word	0x08005655
 8005608:	08005655 	.word	0x08005655
 800560c:	08005627 	.word	0x08005627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005610:	f7ff fb32 	bl	8004c78 <HAL_RCC_GetPCLK1Freq>
 8005614:	6178      	str	r0, [r7, #20]
        break;
 8005616:	e022      	b.n	800565e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005618:	4b0d      	ldr	r3, [pc, #52]	; (8005650 <UART_SetConfig+0x300>)
 800561a:	617b      	str	r3, [r7, #20]
        break;
 800561c:	e01f      	b.n	800565e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800561e:	f7ff fa95 	bl	8004b4c <HAL_RCC_GetSysClockFreq>
 8005622:	6178      	str	r0, [r7, #20]
        break;
 8005624:	e01b      	b.n	800565e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800562a:	617b      	str	r3, [r7, #20]
        break;
 800562c:	e017      	b.n	800565e <UART_SetConfig+0x30e>
 800562e:	bf00      	nop
 8005630:	efff69f3 	.word	0xefff69f3
 8005634:	40008000 	.word	0x40008000
 8005638:	40013800 	.word	0x40013800
 800563c:	40021000 	.word	0x40021000
 8005640:	40004400 	.word	0x40004400
 8005644:	40004800 	.word	0x40004800
 8005648:	40004c00 	.word	0x40004c00
 800564c:	40005000 	.word	0x40005000
 8005650:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	76bb      	strb	r3, [r7, #26]
        break;
 800565c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 80f1 	beq.w	8005848 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	4613      	mov	r3, r2
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	4413      	add	r3, r2
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	429a      	cmp	r2, r3
 8005674:	d305      	bcc.n	8005682 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	429a      	cmp	r2, r3
 8005680:	d902      	bls.n	8005688 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	76bb      	strb	r3, [r7, #26]
 8005686:	e0df      	b.n	8005848 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	4619      	mov	r1, r3
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	f04f 0400 	mov.w	r4, #0
 8005698:	0214      	lsls	r4, r2, #8
 800569a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800569e:	020b      	lsls	r3, r1, #8
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6852      	ldr	r2, [r2, #4]
 80056a4:	0852      	lsrs	r2, r2, #1
 80056a6:	4611      	mov	r1, r2
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	eb13 0b01 	adds.w	fp, r3, r1
 80056b0:	eb44 0c02 	adc.w	ip, r4, r2
 80056b4:	4658      	mov	r0, fp
 80056b6:	4661      	mov	r1, ip
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f04f 0400 	mov.w	r4, #0
 80056c0:	461a      	mov	r2, r3
 80056c2:	4623      	mov	r3, r4
 80056c4:	f7fa fddc 	bl	8000280 <__aeabi_uldivmod>
 80056c8:	4603      	mov	r3, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056d4:	d308      	bcc.n	80056e8 <UART_SetConfig+0x398>
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056dc:	d204      	bcs.n	80056e8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	60da      	str	r2, [r3, #12]
 80056e6:	e0af      	b.n	8005848 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	76bb      	strb	r3, [r7, #26]
 80056ec:	e0ac      	b.n	8005848 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056f6:	d15b      	bne.n	80057b0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80056f8:	7efb      	ldrb	r3, [r7, #27]
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d827      	bhi.n	800574e <UART_SetConfig+0x3fe>
 80056fe:	a201      	add	r2, pc, #4	; (adr r2, 8005704 <UART_SetConfig+0x3b4>)
 8005700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005704:	08005729 	.word	0x08005729
 8005708:	08005731 	.word	0x08005731
 800570c:	08005739 	.word	0x08005739
 8005710:	0800574f 	.word	0x0800574f
 8005714:	0800573f 	.word	0x0800573f
 8005718:	0800574f 	.word	0x0800574f
 800571c:	0800574f 	.word	0x0800574f
 8005720:	0800574f 	.word	0x0800574f
 8005724:	08005747 	.word	0x08005747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005728:	f7ff faa6 	bl	8004c78 <HAL_RCC_GetPCLK1Freq>
 800572c:	6178      	str	r0, [r7, #20]
        break;
 800572e:	e013      	b.n	8005758 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005730:	f7ff fab8 	bl	8004ca4 <HAL_RCC_GetPCLK2Freq>
 8005734:	6178      	str	r0, [r7, #20]
        break;
 8005736:	e00f      	b.n	8005758 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005738:	4b49      	ldr	r3, [pc, #292]	; (8005860 <UART_SetConfig+0x510>)
 800573a:	617b      	str	r3, [r7, #20]
        break;
 800573c:	e00c      	b.n	8005758 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800573e:	f7ff fa05 	bl	8004b4c <HAL_RCC_GetSysClockFreq>
 8005742:	6178      	str	r0, [r7, #20]
        break;
 8005744:	e008      	b.n	8005758 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800574a:	617b      	str	r3, [r7, #20]
        break;
 800574c:	e004      	b.n	8005758 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	76bb      	strb	r3, [r7, #26]
        break;
 8005756:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d074      	beq.n	8005848 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	005a      	lsls	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	085b      	lsrs	r3, r3, #1
 8005768:	441a      	add	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005772:	b29b      	uxth	r3, r3
 8005774:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	2b0f      	cmp	r3, #15
 800577a:	d916      	bls.n	80057aa <UART_SetConfig+0x45a>
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005782:	d212      	bcs.n	80057aa <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	b29b      	uxth	r3, r3
 8005788:	f023 030f 	bic.w	r3, r3, #15
 800578c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	085b      	lsrs	r3, r3, #1
 8005792:	b29b      	uxth	r3, r3
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	b29a      	uxth	r2, r3
 800579a:	89fb      	ldrh	r3, [r7, #14]
 800579c:	4313      	orrs	r3, r2
 800579e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	89fa      	ldrh	r2, [r7, #14]
 80057a6:	60da      	str	r2, [r3, #12]
 80057a8:	e04e      	b.n	8005848 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	76bb      	strb	r3, [r7, #26]
 80057ae:	e04b      	b.n	8005848 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057b0:	7efb      	ldrb	r3, [r7, #27]
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d827      	bhi.n	8005806 <UART_SetConfig+0x4b6>
 80057b6:	a201      	add	r2, pc, #4	; (adr r2, 80057bc <UART_SetConfig+0x46c>)
 80057b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057bc:	080057e1 	.word	0x080057e1
 80057c0:	080057e9 	.word	0x080057e9
 80057c4:	080057f1 	.word	0x080057f1
 80057c8:	08005807 	.word	0x08005807
 80057cc:	080057f7 	.word	0x080057f7
 80057d0:	08005807 	.word	0x08005807
 80057d4:	08005807 	.word	0x08005807
 80057d8:	08005807 	.word	0x08005807
 80057dc:	080057ff 	.word	0x080057ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e0:	f7ff fa4a 	bl	8004c78 <HAL_RCC_GetPCLK1Freq>
 80057e4:	6178      	str	r0, [r7, #20]
        break;
 80057e6:	e013      	b.n	8005810 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057e8:	f7ff fa5c 	bl	8004ca4 <HAL_RCC_GetPCLK2Freq>
 80057ec:	6178      	str	r0, [r7, #20]
        break;
 80057ee:	e00f      	b.n	8005810 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057f0:	4b1b      	ldr	r3, [pc, #108]	; (8005860 <UART_SetConfig+0x510>)
 80057f2:	617b      	str	r3, [r7, #20]
        break;
 80057f4:	e00c      	b.n	8005810 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057f6:	f7ff f9a9 	bl	8004b4c <HAL_RCC_GetSysClockFreq>
 80057fa:	6178      	str	r0, [r7, #20]
        break;
 80057fc:	e008      	b.n	8005810 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005802:	617b      	str	r3, [r7, #20]
        break;
 8005804:	e004      	b.n	8005810 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	76bb      	strb	r3, [r7, #26]
        break;
 800580e:	bf00      	nop
    }

    if (pclk != 0U)
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d018      	beq.n	8005848 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	085a      	lsrs	r2, r3, #1
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	441a      	add	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	fbb2 f3f3 	udiv	r3, r2, r3
 8005828:	b29b      	uxth	r3, r3
 800582a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2b0f      	cmp	r3, #15
 8005830:	d908      	bls.n	8005844 <UART_SetConfig+0x4f4>
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005838:	d204      	bcs.n	8005844 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	60da      	str	r2, [r3, #12]
 8005842:	e001      	b.n	8005848 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005854:	7ebb      	ldrb	r3, [r7, #26]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3720      	adds	r7, #32
 800585a:	46bd      	mov	sp, r7
 800585c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005860:	00f42400 	.word	0x00f42400

08005864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01a      	beq.n	800597a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005962:	d10a      	bne.n	800597a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	605a      	str	r2, [r3, #4]
  }
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80059b6:	f7fe f821 	bl	80039fc <HAL_GetTick>
 80059ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d10e      	bne.n	80059e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f82a 	bl	8005a32 <UART_WaitOnFlagUntilTimeout>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e020      	b.n	8005a2a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d10e      	bne.n	8005a14 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f814 	bl	8005a32 <UART_WaitOnFlagUntilTimeout>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e00a      	b.n	8005a2a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2220      	movs	r2, #32
 8005a18:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	60f8      	str	r0, [r7, #12]
 8005a3a:	60b9      	str	r1, [r7, #8]
 8005a3c:	603b      	str	r3, [r7, #0]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a42:	e05d      	b.n	8005b00 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4a:	d059      	beq.n	8005b00 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4c:	f7fd ffd6 	bl	80039fc <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d302      	bcc.n	8005a62 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d11b      	bne.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a70:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0201 	bic.w	r2, r2, #1
 8005a80:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2220      	movs	r2, #32
 8005a86:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e042      	b.n	8005b20 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d02b      	beq.n	8005b00 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ab6:	d123      	bne.n	8005b00 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ac0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ad0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0201 	bic.w	r2, r2, #1
 8005ae0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2220      	movs	r2, #32
 8005aec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e00f      	b.n	8005b20 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	69da      	ldr	r2, [r3, #28]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	bf0c      	ite	eq
 8005b10:	2301      	moveq	r3, #1
 8005b12:	2300      	movne	r3, #0
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d092      	beq.n	8005a44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b3e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689a      	ldr	r2, [r3, #8]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0201 	bic.w	r2, r2, #1
 8005b4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f7ff fbd8 	bl	800533c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b8c:	bf00      	nop
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005baa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff fbb5 	bl	8005328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bd4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bda:	2b22      	cmp	r3, #34	; 0x22
 8005bdc:	d13a      	bne.n	8005c54 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005be4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005be6:	89bb      	ldrh	r3, [r7, #12]
 8005be8:	b2d9      	uxtb	r1, r3
 8005bea:	89fb      	ldrh	r3, [r7, #14]
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf2:	400a      	ands	r2, r1
 8005bf4:	b2d2      	uxtb	r2, r2
 8005bf6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d123      	bne.n	8005c68 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c2e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0201 	bic.w	r2, r2, #1
 8005c3e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2220      	movs	r2, #32
 8005c44:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7fb f94f 	bl	8000ef0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c52:	e009      	b.n	8005c68 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	8b1b      	ldrh	r3, [r3, #24]
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0208 	orr.w	r2, r2, #8
 8005c64:	b292      	uxth	r2, r2
 8005c66:	831a      	strh	r2, [r3, #24]
}
 8005c68:	bf00      	nop
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c7e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c84:	2b22      	cmp	r3, #34	; 0x22
 8005c86:	d13a      	bne.n	8005cfe <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c8e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c94:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c96:	89ba      	ldrh	r2, [r7, #12]
 8005c98:	89fb      	ldrh	r3, [r7, #14]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca6:	1c9a      	adds	r2, r3, #2
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d123      	bne.n	8005d12 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005cd8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0201 	bic.w	r2, r2, #1
 8005ce8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fb f8fa 	bl	8000ef0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cfc:	e009      	b.n	8005d12 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	8b1b      	ldrh	r3, [r3, #24]
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0208 	orr.w	r2, r2, #8
 8005d0e:	b292      	uxth	r2, r2
 8005d10:	831a      	strh	r2, [r3, #24]
}
 8005d12:	bf00      	nop
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
	...

08005d30 <__errno>:
 8005d30:	4b01      	ldr	r3, [pc, #4]	; (8005d38 <__errno+0x8>)
 8005d32:	6818      	ldr	r0, [r3, #0]
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	200000f0 	.word	0x200000f0

08005d3c <__libc_init_array>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	4e0d      	ldr	r6, [pc, #52]	; (8005d74 <__libc_init_array+0x38>)
 8005d40:	4c0d      	ldr	r4, [pc, #52]	; (8005d78 <__libc_init_array+0x3c>)
 8005d42:	1ba4      	subs	r4, r4, r6
 8005d44:	10a4      	asrs	r4, r4, #2
 8005d46:	2500      	movs	r5, #0
 8005d48:	42a5      	cmp	r5, r4
 8005d4a:	d109      	bne.n	8005d60 <__libc_init_array+0x24>
 8005d4c:	4e0b      	ldr	r6, [pc, #44]	; (8005d7c <__libc_init_array+0x40>)
 8005d4e:	4c0c      	ldr	r4, [pc, #48]	; (8005d80 <__libc_init_array+0x44>)
 8005d50:	f000 fc3e 	bl	80065d0 <_init>
 8005d54:	1ba4      	subs	r4, r4, r6
 8005d56:	10a4      	asrs	r4, r4, #2
 8005d58:	2500      	movs	r5, #0
 8005d5a:	42a5      	cmp	r5, r4
 8005d5c:	d105      	bne.n	8005d6a <__libc_init_array+0x2e>
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}
 8005d60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d64:	4798      	blx	r3
 8005d66:	3501      	adds	r5, #1
 8005d68:	e7ee      	b.n	8005d48 <__libc_init_array+0xc>
 8005d6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d6e:	4798      	blx	r3
 8005d70:	3501      	adds	r5, #1
 8005d72:	e7f2      	b.n	8005d5a <__libc_init_array+0x1e>
 8005d74:	08006dd8 	.word	0x08006dd8
 8005d78:	08006dd8 	.word	0x08006dd8
 8005d7c:	08006dd8 	.word	0x08006dd8
 8005d80:	08006ddc 	.word	0x08006ddc

08005d84 <memset>:
 8005d84:	4402      	add	r2, r0
 8005d86:	4603      	mov	r3, r0
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d100      	bne.n	8005d8e <memset+0xa>
 8005d8c:	4770      	bx	lr
 8005d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d92:	e7f9      	b.n	8005d88 <memset+0x4>

08005d94 <siprintf>:
 8005d94:	b40e      	push	{r1, r2, r3}
 8005d96:	b500      	push	{lr}
 8005d98:	b09c      	sub	sp, #112	; 0x70
 8005d9a:	ab1d      	add	r3, sp, #116	; 0x74
 8005d9c:	9002      	str	r0, [sp, #8]
 8005d9e:	9006      	str	r0, [sp, #24]
 8005da0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005da4:	4809      	ldr	r0, [pc, #36]	; (8005dcc <siprintf+0x38>)
 8005da6:	9107      	str	r1, [sp, #28]
 8005da8:	9104      	str	r1, [sp, #16]
 8005daa:	4909      	ldr	r1, [pc, #36]	; (8005dd0 <siprintf+0x3c>)
 8005dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8005db0:	9105      	str	r1, [sp, #20]
 8005db2:	6800      	ldr	r0, [r0, #0]
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	a902      	add	r1, sp, #8
 8005db8:	f000 f87e 	bl	8005eb8 <_svfiprintf_r>
 8005dbc:	9b02      	ldr	r3, [sp, #8]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	b01c      	add	sp, #112	; 0x70
 8005dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dc8:	b003      	add	sp, #12
 8005dca:	4770      	bx	lr
 8005dcc:	200000f0 	.word	0x200000f0
 8005dd0:	ffff0208 	.word	0xffff0208

08005dd4 <strcat>:
 8005dd4:	b510      	push	{r4, lr}
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	781a      	ldrb	r2, [r3, #0]
 8005dda:	1c5c      	adds	r4, r3, #1
 8005ddc:	b93a      	cbnz	r2, 8005dee <strcat+0x1a>
 8005dde:	3b01      	subs	r3, #1
 8005de0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005de4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005de8:	2a00      	cmp	r2, #0
 8005dea:	d1f9      	bne.n	8005de0 <strcat+0xc>
 8005dec:	bd10      	pop	{r4, pc}
 8005dee:	4623      	mov	r3, r4
 8005df0:	e7f2      	b.n	8005dd8 <strcat+0x4>

08005df2 <strcpy>:
 8005df2:	4603      	mov	r3, r0
 8005df4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005df8:	f803 2b01 	strb.w	r2, [r3], #1
 8005dfc:	2a00      	cmp	r2, #0
 8005dfe:	d1f9      	bne.n	8005df4 <strcpy+0x2>
 8005e00:	4770      	bx	lr

08005e02 <__ssputs_r>:
 8005e02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e06:	688e      	ldr	r6, [r1, #8]
 8005e08:	429e      	cmp	r6, r3
 8005e0a:	4682      	mov	sl, r0
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	4690      	mov	r8, r2
 8005e10:	4699      	mov	r9, r3
 8005e12:	d837      	bhi.n	8005e84 <__ssputs_r+0x82>
 8005e14:	898a      	ldrh	r2, [r1, #12]
 8005e16:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e1a:	d031      	beq.n	8005e80 <__ssputs_r+0x7e>
 8005e1c:	6825      	ldr	r5, [r4, #0]
 8005e1e:	6909      	ldr	r1, [r1, #16]
 8005e20:	1a6f      	subs	r7, r5, r1
 8005e22:	6965      	ldr	r5, [r4, #20]
 8005e24:	2302      	movs	r3, #2
 8005e26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e2a:	fb95 f5f3 	sdiv	r5, r5, r3
 8005e2e:	f109 0301 	add.w	r3, r9, #1
 8005e32:	443b      	add	r3, r7
 8005e34:	429d      	cmp	r5, r3
 8005e36:	bf38      	it	cc
 8005e38:	461d      	movcc	r5, r3
 8005e3a:	0553      	lsls	r3, r2, #21
 8005e3c:	d530      	bpl.n	8005ea0 <__ssputs_r+0x9e>
 8005e3e:	4629      	mov	r1, r5
 8005e40:	f000 fb2c 	bl	800649c <_malloc_r>
 8005e44:	4606      	mov	r6, r0
 8005e46:	b950      	cbnz	r0, 8005e5e <__ssputs_r+0x5c>
 8005e48:	230c      	movs	r3, #12
 8005e4a:	f8ca 3000 	str.w	r3, [sl]
 8005e4e:	89a3      	ldrh	r3, [r4, #12]
 8005e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e54:	81a3      	strh	r3, [r4, #12]
 8005e56:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e5e:	463a      	mov	r2, r7
 8005e60:	6921      	ldr	r1, [r4, #16]
 8005e62:	f000 faa9 	bl	80063b8 <memcpy>
 8005e66:	89a3      	ldrh	r3, [r4, #12]
 8005e68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e70:	81a3      	strh	r3, [r4, #12]
 8005e72:	6126      	str	r6, [r4, #16]
 8005e74:	6165      	str	r5, [r4, #20]
 8005e76:	443e      	add	r6, r7
 8005e78:	1bed      	subs	r5, r5, r7
 8005e7a:	6026      	str	r6, [r4, #0]
 8005e7c:	60a5      	str	r5, [r4, #8]
 8005e7e:	464e      	mov	r6, r9
 8005e80:	454e      	cmp	r6, r9
 8005e82:	d900      	bls.n	8005e86 <__ssputs_r+0x84>
 8005e84:	464e      	mov	r6, r9
 8005e86:	4632      	mov	r2, r6
 8005e88:	4641      	mov	r1, r8
 8005e8a:	6820      	ldr	r0, [r4, #0]
 8005e8c:	f000 fa9f 	bl	80063ce <memmove>
 8005e90:	68a3      	ldr	r3, [r4, #8]
 8005e92:	1b9b      	subs	r3, r3, r6
 8005e94:	60a3      	str	r3, [r4, #8]
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	441e      	add	r6, r3
 8005e9a:	6026      	str	r6, [r4, #0]
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	e7dc      	b.n	8005e5a <__ssputs_r+0x58>
 8005ea0:	462a      	mov	r2, r5
 8005ea2:	f000 fb55 	bl	8006550 <_realloc_r>
 8005ea6:	4606      	mov	r6, r0
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d1e2      	bne.n	8005e72 <__ssputs_r+0x70>
 8005eac:	6921      	ldr	r1, [r4, #16]
 8005eae:	4650      	mov	r0, sl
 8005eb0:	f000 faa6 	bl	8006400 <_free_r>
 8005eb4:	e7c8      	b.n	8005e48 <__ssputs_r+0x46>
	...

08005eb8 <_svfiprintf_r>:
 8005eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ebc:	461d      	mov	r5, r3
 8005ebe:	898b      	ldrh	r3, [r1, #12]
 8005ec0:	061f      	lsls	r7, r3, #24
 8005ec2:	b09d      	sub	sp, #116	; 0x74
 8005ec4:	4680      	mov	r8, r0
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	4616      	mov	r6, r2
 8005eca:	d50f      	bpl.n	8005eec <_svfiprintf_r+0x34>
 8005ecc:	690b      	ldr	r3, [r1, #16]
 8005ece:	b96b      	cbnz	r3, 8005eec <_svfiprintf_r+0x34>
 8005ed0:	2140      	movs	r1, #64	; 0x40
 8005ed2:	f000 fae3 	bl	800649c <_malloc_r>
 8005ed6:	6020      	str	r0, [r4, #0]
 8005ed8:	6120      	str	r0, [r4, #16]
 8005eda:	b928      	cbnz	r0, 8005ee8 <_svfiprintf_r+0x30>
 8005edc:	230c      	movs	r3, #12
 8005ede:	f8c8 3000 	str.w	r3, [r8]
 8005ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee6:	e0c8      	b.n	800607a <_svfiprintf_r+0x1c2>
 8005ee8:	2340      	movs	r3, #64	; 0x40
 8005eea:	6163      	str	r3, [r4, #20]
 8005eec:	2300      	movs	r3, #0
 8005eee:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef0:	2320      	movs	r3, #32
 8005ef2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ef6:	2330      	movs	r3, #48	; 0x30
 8005ef8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005efc:	9503      	str	r5, [sp, #12]
 8005efe:	f04f 0b01 	mov.w	fp, #1
 8005f02:	4637      	mov	r7, r6
 8005f04:	463d      	mov	r5, r7
 8005f06:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f0a:	b10b      	cbz	r3, 8005f10 <_svfiprintf_r+0x58>
 8005f0c:	2b25      	cmp	r3, #37	; 0x25
 8005f0e:	d13e      	bne.n	8005f8e <_svfiprintf_r+0xd6>
 8005f10:	ebb7 0a06 	subs.w	sl, r7, r6
 8005f14:	d00b      	beq.n	8005f2e <_svfiprintf_r+0x76>
 8005f16:	4653      	mov	r3, sl
 8005f18:	4632      	mov	r2, r6
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	4640      	mov	r0, r8
 8005f1e:	f7ff ff70 	bl	8005e02 <__ssputs_r>
 8005f22:	3001      	adds	r0, #1
 8005f24:	f000 80a4 	beq.w	8006070 <_svfiprintf_r+0x1b8>
 8005f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f2a:	4453      	add	r3, sl
 8005f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f2e:	783b      	ldrb	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 809d 	beq.w	8006070 <_svfiprintf_r+0x1b8>
 8005f36:	2300      	movs	r3, #0
 8005f38:	f04f 32ff 	mov.w	r2, #4294967295
 8005f3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f40:	9304      	str	r3, [sp, #16]
 8005f42:	9307      	str	r3, [sp, #28]
 8005f44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f48:	931a      	str	r3, [sp, #104]	; 0x68
 8005f4a:	462f      	mov	r7, r5
 8005f4c:	2205      	movs	r2, #5
 8005f4e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005f52:	4850      	ldr	r0, [pc, #320]	; (8006094 <_svfiprintf_r+0x1dc>)
 8005f54:	f7fa f944 	bl	80001e0 <memchr>
 8005f58:	9b04      	ldr	r3, [sp, #16]
 8005f5a:	b9d0      	cbnz	r0, 8005f92 <_svfiprintf_r+0xda>
 8005f5c:	06d9      	lsls	r1, r3, #27
 8005f5e:	bf44      	itt	mi
 8005f60:	2220      	movmi	r2, #32
 8005f62:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f66:	071a      	lsls	r2, r3, #28
 8005f68:	bf44      	itt	mi
 8005f6a:	222b      	movmi	r2, #43	; 0x2b
 8005f6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f70:	782a      	ldrb	r2, [r5, #0]
 8005f72:	2a2a      	cmp	r2, #42	; 0x2a
 8005f74:	d015      	beq.n	8005fa2 <_svfiprintf_r+0xea>
 8005f76:	9a07      	ldr	r2, [sp, #28]
 8005f78:	462f      	mov	r7, r5
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	250a      	movs	r5, #10
 8005f7e:	4639      	mov	r1, r7
 8005f80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f84:	3b30      	subs	r3, #48	; 0x30
 8005f86:	2b09      	cmp	r3, #9
 8005f88:	d94d      	bls.n	8006026 <_svfiprintf_r+0x16e>
 8005f8a:	b1b8      	cbz	r0, 8005fbc <_svfiprintf_r+0x104>
 8005f8c:	e00f      	b.n	8005fae <_svfiprintf_r+0xf6>
 8005f8e:	462f      	mov	r7, r5
 8005f90:	e7b8      	b.n	8005f04 <_svfiprintf_r+0x4c>
 8005f92:	4a40      	ldr	r2, [pc, #256]	; (8006094 <_svfiprintf_r+0x1dc>)
 8005f94:	1a80      	subs	r0, r0, r2
 8005f96:	fa0b f000 	lsl.w	r0, fp, r0
 8005f9a:	4318      	orrs	r0, r3
 8005f9c:	9004      	str	r0, [sp, #16]
 8005f9e:	463d      	mov	r5, r7
 8005fa0:	e7d3      	b.n	8005f4a <_svfiprintf_r+0x92>
 8005fa2:	9a03      	ldr	r2, [sp, #12]
 8005fa4:	1d11      	adds	r1, r2, #4
 8005fa6:	6812      	ldr	r2, [r2, #0]
 8005fa8:	9103      	str	r1, [sp, #12]
 8005faa:	2a00      	cmp	r2, #0
 8005fac:	db01      	blt.n	8005fb2 <_svfiprintf_r+0xfa>
 8005fae:	9207      	str	r2, [sp, #28]
 8005fb0:	e004      	b.n	8005fbc <_svfiprintf_r+0x104>
 8005fb2:	4252      	negs	r2, r2
 8005fb4:	f043 0302 	orr.w	r3, r3, #2
 8005fb8:	9207      	str	r2, [sp, #28]
 8005fba:	9304      	str	r3, [sp, #16]
 8005fbc:	783b      	ldrb	r3, [r7, #0]
 8005fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8005fc0:	d10c      	bne.n	8005fdc <_svfiprintf_r+0x124>
 8005fc2:	787b      	ldrb	r3, [r7, #1]
 8005fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fc6:	d133      	bne.n	8006030 <_svfiprintf_r+0x178>
 8005fc8:	9b03      	ldr	r3, [sp, #12]
 8005fca:	1d1a      	adds	r2, r3, #4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	9203      	str	r2, [sp, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	bfb8      	it	lt
 8005fd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fd8:	3702      	adds	r7, #2
 8005fda:	9305      	str	r3, [sp, #20]
 8005fdc:	4d2e      	ldr	r5, [pc, #184]	; (8006098 <_svfiprintf_r+0x1e0>)
 8005fde:	7839      	ldrb	r1, [r7, #0]
 8005fe0:	2203      	movs	r2, #3
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	f7fa f8fc 	bl	80001e0 <memchr>
 8005fe8:	b138      	cbz	r0, 8005ffa <_svfiprintf_r+0x142>
 8005fea:	2340      	movs	r3, #64	; 0x40
 8005fec:	1b40      	subs	r0, r0, r5
 8005fee:	fa03 f000 	lsl.w	r0, r3, r0
 8005ff2:	9b04      	ldr	r3, [sp, #16]
 8005ff4:	4303      	orrs	r3, r0
 8005ff6:	3701      	adds	r7, #1
 8005ff8:	9304      	str	r3, [sp, #16]
 8005ffa:	7839      	ldrb	r1, [r7, #0]
 8005ffc:	4827      	ldr	r0, [pc, #156]	; (800609c <_svfiprintf_r+0x1e4>)
 8005ffe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006002:	2206      	movs	r2, #6
 8006004:	1c7e      	adds	r6, r7, #1
 8006006:	f7fa f8eb 	bl	80001e0 <memchr>
 800600a:	2800      	cmp	r0, #0
 800600c:	d038      	beq.n	8006080 <_svfiprintf_r+0x1c8>
 800600e:	4b24      	ldr	r3, [pc, #144]	; (80060a0 <_svfiprintf_r+0x1e8>)
 8006010:	bb13      	cbnz	r3, 8006058 <_svfiprintf_r+0x1a0>
 8006012:	9b03      	ldr	r3, [sp, #12]
 8006014:	3307      	adds	r3, #7
 8006016:	f023 0307 	bic.w	r3, r3, #7
 800601a:	3308      	adds	r3, #8
 800601c:	9303      	str	r3, [sp, #12]
 800601e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006020:	444b      	add	r3, r9
 8006022:	9309      	str	r3, [sp, #36]	; 0x24
 8006024:	e76d      	b.n	8005f02 <_svfiprintf_r+0x4a>
 8006026:	fb05 3202 	mla	r2, r5, r2, r3
 800602a:	2001      	movs	r0, #1
 800602c:	460f      	mov	r7, r1
 800602e:	e7a6      	b.n	8005f7e <_svfiprintf_r+0xc6>
 8006030:	2300      	movs	r3, #0
 8006032:	3701      	adds	r7, #1
 8006034:	9305      	str	r3, [sp, #20]
 8006036:	4619      	mov	r1, r3
 8006038:	250a      	movs	r5, #10
 800603a:	4638      	mov	r0, r7
 800603c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006040:	3a30      	subs	r2, #48	; 0x30
 8006042:	2a09      	cmp	r2, #9
 8006044:	d903      	bls.n	800604e <_svfiprintf_r+0x196>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0c8      	beq.n	8005fdc <_svfiprintf_r+0x124>
 800604a:	9105      	str	r1, [sp, #20]
 800604c:	e7c6      	b.n	8005fdc <_svfiprintf_r+0x124>
 800604e:	fb05 2101 	mla	r1, r5, r1, r2
 8006052:	2301      	movs	r3, #1
 8006054:	4607      	mov	r7, r0
 8006056:	e7f0      	b.n	800603a <_svfiprintf_r+0x182>
 8006058:	ab03      	add	r3, sp, #12
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	4622      	mov	r2, r4
 800605e:	4b11      	ldr	r3, [pc, #68]	; (80060a4 <_svfiprintf_r+0x1ec>)
 8006060:	a904      	add	r1, sp, #16
 8006062:	4640      	mov	r0, r8
 8006064:	f3af 8000 	nop.w
 8006068:	f1b0 3fff 	cmp.w	r0, #4294967295
 800606c:	4681      	mov	r9, r0
 800606e:	d1d6      	bne.n	800601e <_svfiprintf_r+0x166>
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	065b      	lsls	r3, r3, #25
 8006074:	f53f af35 	bmi.w	8005ee2 <_svfiprintf_r+0x2a>
 8006078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800607a:	b01d      	add	sp, #116	; 0x74
 800607c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006080:	ab03      	add	r3, sp, #12
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	4622      	mov	r2, r4
 8006086:	4b07      	ldr	r3, [pc, #28]	; (80060a4 <_svfiprintf_r+0x1ec>)
 8006088:	a904      	add	r1, sp, #16
 800608a:	4640      	mov	r0, r8
 800608c:	f000 f882 	bl	8006194 <_printf_i>
 8006090:	e7ea      	b.n	8006068 <_svfiprintf_r+0x1b0>
 8006092:	bf00      	nop
 8006094:	08006d9c 	.word	0x08006d9c
 8006098:	08006da2 	.word	0x08006da2
 800609c:	08006da6 	.word	0x08006da6
 80060a0:	00000000 	.word	0x00000000
 80060a4:	08005e03 	.word	0x08005e03

080060a8 <_printf_common>:
 80060a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ac:	4691      	mov	r9, r2
 80060ae:	461f      	mov	r7, r3
 80060b0:	688a      	ldr	r2, [r1, #8]
 80060b2:	690b      	ldr	r3, [r1, #16]
 80060b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060b8:	4293      	cmp	r3, r2
 80060ba:	bfb8      	it	lt
 80060bc:	4613      	movlt	r3, r2
 80060be:	f8c9 3000 	str.w	r3, [r9]
 80060c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060c6:	4606      	mov	r6, r0
 80060c8:	460c      	mov	r4, r1
 80060ca:	b112      	cbz	r2, 80060d2 <_printf_common+0x2a>
 80060cc:	3301      	adds	r3, #1
 80060ce:	f8c9 3000 	str.w	r3, [r9]
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	0699      	lsls	r1, r3, #26
 80060d6:	bf42      	ittt	mi
 80060d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80060dc:	3302      	addmi	r3, #2
 80060de:	f8c9 3000 	strmi.w	r3, [r9]
 80060e2:	6825      	ldr	r5, [r4, #0]
 80060e4:	f015 0506 	ands.w	r5, r5, #6
 80060e8:	d107      	bne.n	80060fa <_printf_common+0x52>
 80060ea:	f104 0a19 	add.w	sl, r4, #25
 80060ee:	68e3      	ldr	r3, [r4, #12]
 80060f0:	f8d9 2000 	ldr.w	r2, [r9]
 80060f4:	1a9b      	subs	r3, r3, r2
 80060f6:	42ab      	cmp	r3, r5
 80060f8:	dc28      	bgt.n	800614c <_printf_common+0xa4>
 80060fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80060fe:	6822      	ldr	r2, [r4, #0]
 8006100:	3300      	adds	r3, #0
 8006102:	bf18      	it	ne
 8006104:	2301      	movne	r3, #1
 8006106:	0692      	lsls	r2, r2, #26
 8006108:	d42d      	bmi.n	8006166 <_printf_common+0xbe>
 800610a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800610e:	4639      	mov	r1, r7
 8006110:	4630      	mov	r0, r6
 8006112:	47c0      	blx	r8
 8006114:	3001      	adds	r0, #1
 8006116:	d020      	beq.n	800615a <_printf_common+0xb2>
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	68e5      	ldr	r5, [r4, #12]
 800611c:	f8d9 2000 	ldr.w	r2, [r9]
 8006120:	f003 0306 	and.w	r3, r3, #6
 8006124:	2b04      	cmp	r3, #4
 8006126:	bf08      	it	eq
 8006128:	1aad      	subeq	r5, r5, r2
 800612a:	68a3      	ldr	r3, [r4, #8]
 800612c:	6922      	ldr	r2, [r4, #16]
 800612e:	bf0c      	ite	eq
 8006130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006134:	2500      	movne	r5, #0
 8006136:	4293      	cmp	r3, r2
 8006138:	bfc4      	itt	gt
 800613a:	1a9b      	subgt	r3, r3, r2
 800613c:	18ed      	addgt	r5, r5, r3
 800613e:	f04f 0900 	mov.w	r9, #0
 8006142:	341a      	adds	r4, #26
 8006144:	454d      	cmp	r5, r9
 8006146:	d11a      	bne.n	800617e <_printf_common+0xd6>
 8006148:	2000      	movs	r0, #0
 800614a:	e008      	b.n	800615e <_printf_common+0xb6>
 800614c:	2301      	movs	r3, #1
 800614e:	4652      	mov	r2, sl
 8006150:	4639      	mov	r1, r7
 8006152:	4630      	mov	r0, r6
 8006154:	47c0      	blx	r8
 8006156:	3001      	adds	r0, #1
 8006158:	d103      	bne.n	8006162 <_printf_common+0xba>
 800615a:	f04f 30ff 	mov.w	r0, #4294967295
 800615e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006162:	3501      	adds	r5, #1
 8006164:	e7c3      	b.n	80060ee <_printf_common+0x46>
 8006166:	18e1      	adds	r1, r4, r3
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	2030      	movs	r0, #48	; 0x30
 800616c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006170:	4422      	add	r2, r4
 8006172:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006176:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800617a:	3302      	adds	r3, #2
 800617c:	e7c5      	b.n	800610a <_printf_common+0x62>
 800617e:	2301      	movs	r3, #1
 8006180:	4622      	mov	r2, r4
 8006182:	4639      	mov	r1, r7
 8006184:	4630      	mov	r0, r6
 8006186:	47c0      	blx	r8
 8006188:	3001      	adds	r0, #1
 800618a:	d0e6      	beq.n	800615a <_printf_common+0xb2>
 800618c:	f109 0901 	add.w	r9, r9, #1
 8006190:	e7d8      	b.n	8006144 <_printf_common+0x9c>
	...

08006194 <_printf_i>:
 8006194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006198:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800619c:	460c      	mov	r4, r1
 800619e:	7e09      	ldrb	r1, [r1, #24]
 80061a0:	b085      	sub	sp, #20
 80061a2:	296e      	cmp	r1, #110	; 0x6e
 80061a4:	4617      	mov	r7, r2
 80061a6:	4606      	mov	r6, r0
 80061a8:	4698      	mov	r8, r3
 80061aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061ac:	f000 80b3 	beq.w	8006316 <_printf_i+0x182>
 80061b0:	d822      	bhi.n	80061f8 <_printf_i+0x64>
 80061b2:	2963      	cmp	r1, #99	; 0x63
 80061b4:	d036      	beq.n	8006224 <_printf_i+0x90>
 80061b6:	d80a      	bhi.n	80061ce <_printf_i+0x3a>
 80061b8:	2900      	cmp	r1, #0
 80061ba:	f000 80b9 	beq.w	8006330 <_printf_i+0x19c>
 80061be:	2958      	cmp	r1, #88	; 0x58
 80061c0:	f000 8083 	beq.w	80062ca <_printf_i+0x136>
 80061c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80061cc:	e032      	b.n	8006234 <_printf_i+0xa0>
 80061ce:	2964      	cmp	r1, #100	; 0x64
 80061d0:	d001      	beq.n	80061d6 <_printf_i+0x42>
 80061d2:	2969      	cmp	r1, #105	; 0x69
 80061d4:	d1f6      	bne.n	80061c4 <_printf_i+0x30>
 80061d6:	6820      	ldr	r0, [r4, #0]
 80061d8:	6813      	ldr	r3, [r2, #0]
 80061da:	0605      	lsls	r5, r0, #24
 80061dc:	f103 0104 	add.w	r1, r3, #4
 80061e0:	d52a      	bpl.n	8006238 <_printf_i+0xa4>
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6011      	str	r1, [r2, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da03      	bge.n	80061f2 <_printf_i+0x5e>
 80061ea:	222d      	movs	r2, #45	; 0x2d
 80061ec:	425b      	negs	r3, r3
 80061ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80061f2:	486f      	ldr	r0, [pc, #444]	; (80063b0 <_printf_i+0x21c>)
 80061f4:	220a      	movs	r2, #10
 80061f6:	e039      	b.n	800626c <_printf_i+0xd8>
 80061f8:	2973      	cmp	r1, #115	; 0x73
 80061fa:	f000 809d 	beq.w	8006338 <_printf_i+0x1a4>
 80061fe:	d808      	bhi.n	8006212 <_printf_i+0x7e>
 8006200:	296f      	cmp	r1, #111	; 0x6f
 8006202:	d020      	beq.n	8006246 <_printf_i+0xb2>
 8006204:	2970      	cmp	r1, #112	; 0x70
 8006206:	d1dd      	bne.n	80061c4 <_printf_i+0x30>
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	f043 0320 	orr.w	r3, r3, #32
 800620e:	6023      	str	r3, [r4, #0]
 8006210:	e003      	b.n	800621a <_printf_i+0x86>
 8006212:	2975      	cmp	r1, #117	; 0x75
 8006214:	d017      	beq.n	8006246 <_printf_i+0xb2>
 8006216:	2978      	cmp	r1, #120	; 0x78
 8006218:	d1d4      	bne.n	80061c4 <_printf_i+0x30>
 800621a:	2378      	movs	r3, #120	; 0x78
 800621c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006220:	4864      	ldr	r0, [pc, #400]	; (80063b4 <_printf_i+0x220>)
 8006222:	e055      	b.n	80062d0 <_printf_i+0x13c>
 8006224:	6813      	ldr	r3, [r2, #0]
 8006226:	1d19      	adds	r1, r3, #4
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6011      	str	r1, [r2, #0]
 800622c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006234:	2301      	movs	r3, #1
 8006236:	e08c      	b.n	8006352 <_printf_i+0x1be>
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6011      	str	r1, [r2, #0]
 800623c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006240:	bf18      	it	ne
 8006242:	b21b      	sxthne	r3, r3
 8006244:	e7cf      	b.n	80061e6 <_printf_i+0x52>
 8006246:	6813      	ldr	r3, [r2, #0]
 8006248:	6825      	ldr	r5, [r4, #0]
 800624a:	1d18      	adds	r0, r3, #4
 800624c:	6010      	str	r0, [r2, #0]
 800624e:	0628      	lsls	r0, r5, #24
 8006250:	d501      	bpl.n	8006256 <_printf_i+0xc2>
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	e002      	b.n	800625c <_printf_i+0xc8>
 8006256:	0668      	lsls	r0, r5, #25
 8006258:	d5fb      	bpl.n	8006252 <_printf_i+0xbe>
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	4854      	ldr	r0, [pc, #336]	; (80063b0 <_printf_i+0x21c>)
 800625e:	296f      	cmp	r1, #111	; 0x6f
 8006260:	bf14      	ite	ne
 8006262:	220a      	movne	r2, #10
 8006264:	2208      	moveq	r2, #8
 8006266:	2100      	movs	r1, #0
 8006268:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800626c:	6865      	ldr	r5, [r4, #4]
 800626e:	60a5      	str	r5, [r4, #8]
 8006270:	2d00      	cmp	r5, #0
 8006272:	f2c0 8095 	blt.w	80063a0 <_printf_i+0x20c>
 8006276:	6821      	ldr	r1, [r4, #0]
 8006278:	f021 0104 	bic.w	r1, r1, #4
 800627c:	6021      	str	r1, [r4, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d13d      	bne.n	80062fe <_printf_i+0x16a>
 8006282:	2d00      	cmp	r5, #0
 8006284:	f040 808e 	bne.w	80063a4 <_printf_i+0x210>
 8006288:	4665      	mov	r5, ip
 800628a:	2a08      	cmp	r2, #8
 800628c:	d10b      	bne.n	80062a6 <_printf_i+0x112>
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	07db      	lsls	r3, r3, #31
 8006292:	d508      	bpl.n	80062a6 <_printf_i+0x112>
 8006294:	6923      	ldr	r3, [r4, #16]
 8006296:	6862      	ldr	r2, [r4, #4]
 8006298:	429a      	cmp	r2, r3
 800629a:	bfde      	ittt	le
 800629c:	2330      	movle	r3, #48	; 0x30
 800629e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062a6:	ebac 0305 	sub.w	r3, ip, r5
 80062aa:	6123      	str	r3, [r4, #16]
 80062ac:	f8cd 8000 	str.w	r8, [sp]
 80062b0:	463b      	mov	r3, r7
 80062b2:	aa03      	add	r2, sp, #12
 80062b4:	4621      	mov	r1, r4
 80062b6:	4630      	mov	r0, r6
 80062b8:	f7ff fef6 	bl	80060a8 <_printf_common>
 80062bc:	3001      	adds	r0, #1
 80062be:	d14d      	bne.n	800635c <_printf_i+0x1c8>
 80062c0:	f04f 30ff 	mov.w	r0, #4294967295
 80062c4:	b005      	add	sp, #20
 80062c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062ca:	4839      	ldr	r0, [pc, #228]	; (80063b0 <_printf_i+0x21c>)
 80062cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80062d0:	6813      	ldr	r3, [r2, #0]
 80062d2:	6821      	ldr	r1, [r4, #0]
 80062d4:	1d1d      	adds	r5, r3, #4
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6015      	str	r5, [r2, #0]
 80062da:	060a      	lsls	r2, r1, #24
 80062dc:	d50b      	bpl.n	80062f6 <_printf_i+0x162>
 80062de:	07ca      	lsls	r2, r1, #31
 80062e0:	bf44      	itt	mi
 80062e2:	f041 0120 	orrmi.w	r1, r1, #32
 80062e6:	6021      	strmi	r1, [r4, #0]
 80062e8:	b91b      	cbnz	r3, 80062f2 <_printf_i+0x15e>
 80062ea:	6822      	ldr	r2, [r4, #0]
 80062ec:	f022 0220 	bic.w	r2, r2, #32
 80062f0:	6022      	str	r2, [r4, #0]
 80062f2:	2210      	movs	r2, #16
 80062f4:	e7b7      	b.n	8006266 <_printf_i+0xd2>
 80062f6:	064d      	lsls	r5, r1, #25
 80062f8:	bf48      	it	mi
 80062fa:	b29b      	uxthmi	r3, r3
 80062fc:	e7ef      	b.n	80062de <_printf_i+0x14a>
 80062fe:	4665      	mov	r5, ip
 8006300:	fbb3 f1f2 	udiv	r1, r3, r2
 8006304:	fb02 3311 	mls	r3, r2, r1, r3
 8006308:	5cc3      	ldrb	r3, [r0, r3]
 800630a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800630e:	460b      	mov	r3, r1
 8006310:	2900      	cmp	r1, #0
 8006312:	d1f5      	bne.n	8006300 <_printf_i+0x16c>
 8006314:	e7b9      	b.n	800628a <_printf_i+0xf6>
 8006316:	6813      	ldr	r3, [r2, #0]
 8006318:	6825      	ldr	r5, [r4, #0]
 800631a:	6961      	ldr	r1, [r4, #20]
 800631c:	1d18      	adds	r0, r3, #4
 800631e:	6010      	str	r0, [r2, #0]
 8006320:	0628      	lsls	r0, r5, #24
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	d501      	bpl.n	800632a <_printf_i+0x196>
 8006326:	6019      	str	r1, [r3, #0]
 8006328:	e002      	b.n	8006330 <_printf_i+0x19c>
 800632a:	066a      	lsls	r2, r5, #25
 800632c:	d5fb      	bpl.n	8006326 <_printf_i+0x192>
 800632e:	8019      	strh	r1, [r3, #0]
 8006330:	2300      	movs	r3, #0
 8006332:	6123      	str	r3, [r4, #16]
 8006334:	4665      	mov	r5, ip
 8006336:	e7b9      	b.n	80062ac <_printf_i+0x118>
 8006338:	6813      	ldr	r3, [r2, #0]
 800633a:	1d19      	adds	r1, r3, #4
 800633c:	6011      	str	r1, [r2, #0]
 800633e:	681d      	ldr	r5, [r3, #0]
 8006340:	6862      	ldr	r2, [r4, #4]
 8006342:	2100      	movs	r1, #0
 8006344:	4628      	mov	r0, r5
 8006346:	f7f9 ff4b 	bl	80001e0 <memchr>
 800634a:	b108      	cbz	r0, 8006350 <_printf_i+0x1bc>
 800634c:	1b40      	subs	r0, r0, r5
 800634e:	6060      	str	r0, [r4, #4]
 8006350:	6863      	ldr	r3, [r4, #4]
 8006352:	6123      	str	r3, [r4, #16]
 8006354:	2300      	movs	r3, #0
 8006356:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800635a:	e7a7      	b.n	80062ac <_printf_i+0x118>
 800635c:	6923      	ldr	r3, [r4, #16]
 800635e:	462a      	mov	r2, r5
 8006360:	4639      	mov	r1, r7
 8006362:	4630      	mov	r0, r6
 8006364:	47c0      	blx	r8
 8006366:	3001      	adds	r0, #1
 8006368:	d0aa      	beq.n	80062c0 <_printf_i+0x12c>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	079b      	lsls	r3, r3, #30
 800636e:	d413      	bmi.n	8006398 <_printf_i+0x204>
 8006370:	68e0      	ldr	r0, [r4, #12]
 8006372:	9b03      	ldr	r3, [sp, #12]
 8006374:	4298      	cmp	r0, r3
 8006376:	bfb8      	it	lt
 8006378:	4618      	movlt	r0, r3
 800637a:	e7a3      	b.n	80062c4 <_printf_i+0x130>
 800637c:	2301      	movs	r3, #1
 800637e:	464a      	mov	r2, r9
 8006380:	4639      	mov	r1, r7
 8006382:	4630      	mov	r0, r6
 8006384:	47c0      	blx	r8
 8006386:	3001      	adds	r0, #1
 8006388:	d09a      	beq.n	80062c0 <_printf_i+0x12c>
 800638a:	3501      	adds	r5, #1
 800638c:	68e3      	ldr	r3, [r4, #12]
 800638e:	9a03      	ldr	r2, [sp, #12]
 8006390:	1a9b      	subs	r3, r3, r2
 8006392:	42ab      	cmp	r3, r5
 8006394:	dcf2      	bgt.n	800637c <_printf_i+0x1e8>
 8006396:	e7eb      	b.n	8006370 <_printf_i+0x1dc>
 8006398:	2500      	movs	r5, #0
 800639a:	f104 0919 	add.w	r9, r4, #25
 800639e:	e7f5      	b.n	800638c <_printf_i+0x1f8>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1ac      	bne.n	80062fe <_printf_i+0x16a>
 80063a4:	7803      	ldrb	r3, [r0, #0]
 80063a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063ae:	e76c      	b.n	800628a <_printf_i+0xf6>
 80063b0:	08006dad 	.word	0x08006dad
 80063b4:	08006dbe 	.word	0x08006dbe

080063b8 <memcpy>:
 80063b8:	b510      	push	{r4, lr}
 80063ba:	1e43      	subs	r3, r0, #1
 80063bc:	440a      	add	r2, r1
 80063be:	4291      	cmp	r1, r2
 80063c0:	d100      	bne.n	80063c4 <memcpy+0xc>
 80063c2:	bd10      	pop	{r4, pc}
 80063c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063cc:	e7f7      	b.n	80063be <memcpy+0x6>

080063ce <memmove>:
 80063ce:	4288      	cmp	r0, r1
 80063d0:	b510      	push	{r4, lr}
 80063d2:	eb01 0302 	add.w	r3, r1, r2
 80063d6:	d807      	bhi.n	80063e8 <memmove+0x1a>
 80063d8:	1e42      	subs	r2, r0, #1
 80063da:	4299      	cmp	r1, r3
 80063dc:	d00a      	beq.n	80063f4 <memmove+0x26>
 80063de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063e2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80063e6:	e7f8      	b.n	80063da <memmove+0xc>
 80063e8:	4283      	cmp	r3, r0
 80063ea:	d9f5      	bls.n	80063d8 <memmove+0xa>
 80063ec:	1881      	adds	r1, r0, r2
 80063ee:	1ad2      	subs	r2, r2, r3
 80063f0:	42d3      	cmn	r3, r2
 80063f2:	d100      	bne.n	80063f6 <memmove+0x28>
 80063f4:	bd10      	pop	{r4, pc}
 80063f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063fa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80063fe:	e7f7      	b.n	80063f0 <memmove+0x22>

08006400 <_free_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4605      	mov	r5, r0
 8006404:	2900      	cmp	r1, #0
 8006406:	d045      	beq.n	8006494 <_free_r+0x94>
 8006408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800640c:	1f0c      	subs	r4, r1, #4
 800640e:	2b00      	cmp	r3, #0
 8006410:	bfb8      	it	lt
 8006412:	18e4      	addlt	r4, r4, r3
 8006414:	f000 f8d2 	bl	80065bc <__malloc_lock>
 8006418:	4a1f      	ldr	r2, [pc, #124]	; (8006498 <_free_r+0x98>)
 800641a:	6813      	ldr	r3, [r2, #0]
 800641c:	4610      	mov	r0, r2
 800641e:	b933      	cbnz	r3, 800642e <_free_r+0x2e>
 8006420:	6063      	str	r3, [r4, #4]
 8006422:	6014      	str	r4, [r2, #0]
 8006424:	4628      	mov	r0, r5
 8006426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800642a:	f000 b8c8 	b.w	80065be <__malloc_unlock>
 800642e:	42a3      	cmp	r3, r4
 8006430:	d90c      	bls.n	800644c <_free_r+0x4c>
 8006432:	6821      	ldr	r1, [r4, #0]
 8006434:	1862      	adds	r2, r4, r1
 8006436:	4293      	cmp	r3, r2
 8006438:	bf04      	itt	eq
 800643a:	681a      	ldreq	r2, [r3, #0]
 800643c:	685b      	ldreq	r3, [r3, #4]
 800643e:	6063      	str	r3, [r4, #4]
 8006440:	bf04      	itt	eq
 8006442:	1852      	addeq	r2, r2, r1
 8006444:	6022      	streq	r2, [r4, #0]
 8006446:	6004      	str	r4, [r0, #0]
 8006448:	e7ec      	b.n	8006424 <_free_r+0x24>
 800644a:	4613      	mov	r3, r2
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	b10a      	cbz	r2, 8006454 <_free_r+0x54>
 8006450:	42a2      	cmp	r2, r4
 8006452:	d9fa      	bls.n	800644a <_free_r+0x4a>
 8006454:	6819      	ldr	r1, [r3, #0]
 8006456:	1858      	adds	r0, r3, r1
 8006458:	42a0      	cmp	r0, r4
 800645a:	d10b      	bne.n	8006474 <_free_r+0x74>
 800645c:	6820      	ldr	r0, [r4, #0]
 800645e:	4401      	add	r1, r0
 8006460:	1858      	adds	r0, r3, r1
 8006462:	4282      	cmp	r2, r0
 8006464:	6019      	str	r1, [r3, #0]
 8006466:	d1dd      	bne.n	8006424 <_free_r+0x24>
 8006468:	6810      	ldr	r0, [r2, #0]
 800646a:	6852      	ldr	r2, [r2, #4]
 800646c:	605a      	str	r2, [r3, #4]
 800646e:	4401      	add	r1, r0
 8006470:	6019      	str	r1, [r3, #0]
 8006472:	e7d7      	b.n	8006424 <_free_r+0x24>
 8006474:	d902      	bls.n	800647c <_free_r+0x7c>
 8006476:	230c      	movs	r3, #12
 8006478:	602b      	str	r3, [r5, #0]
 800647a:	e7d3      	b.n	8006424 <_free_r+0x24>
 800647c:	6820      	ldr	r0, [r4, #0]
 800647e:	1821      	adds	r1, r4, r0
 8006480:	428a      	cmp	r2, r1
 8006482:	bf04      	itt	eq
 8006484:	6811      	ldreq	r1, [r2, #0]
 8006486:	6852      	ldreq	r2, [r2, #4]
 8006488:	6062      	str	r2, [r4, #4]
 800648a:	bf04      	itt	eq
 800648c:	1809      	addeq	r1, r1, r0
 800648e:	6021      	streq	r1, [r4, #0]
 8006490:	605c      	str	r4, [r3, #4]
 8006492:	e7c7      	b.n	8006424 <_free_r+0x24>
 8006494:	bd38      	pop	{r3, r4, r5, pc}
 8006496:	bf00      	nop
 8006498:	20000174 	.word	0x20000174

0800649c <_malloc_r>:
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	1ccd      	adds	r5, r1, #3
 80064a0:	f025 0503 	bic.w	r5, r5, #3
 80064a4:	3508      	adds	r5, #8
 80064a6:	2d0c      	cmp	r5, #12
 80064a8:	bf38      	it	cc
 80064aa:	250c      	movcc	r5, #12
 80064ac:	2d00      	cmp	r5, #0
 80064ae:	4606      	mov	r6, r0
 80064b0:	db01      	blt.n	80064b6 <_malloc_r+0x1a>
 80064b2:	42a9      	cmp	r1, r5
 80064b4:	d903      	bls.n	80064be <_malloc_r+0x22>
 80064b6:	230c      	movs	r3, #12
 80064b8:	6033      	str	r3, [r6, #0]
 80064ba:	2000      	movs	r0, #0
 80064bc:	bd70      	pop	{r4, r5, r6, pc}
 80064be:	f000 f87d 	bl	80065bc <__malloc_lock>
 80064c2:	4a21      	ldr	r2, [pc, #132]	; (8006548 <_malloc_r+0xac>)
 80064c4:	6814      	ldr	r4, [r2, #0]
 80064c6:	4621      	mov	r1, r4
 80064c8:	b991      	cbnz	r1, 80064f0 <_malloc_r+0x54>
 80064ca:	4c20      	ldr	r4, [pc, #128]	; (800654c <_malloc_r+0xb0>)
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	b91b      	cbnz	r3, 80064d8 <_malloc_r+0x3c>
 80064d0:	4630      	mov	r0, r6
 80064d2:	f000 f863 	bl	800659c <_sbrk_r>
 80064d6:	6020      	str	r0, [r4, #0]
 80064d8:	4629      	mov	r1, r5
 80064da:	4630      	mov	r0, r6
 80064dc:	f000 f85e 	bl	800659c <_sbrk_r>
 80064e0:	1c43      	adds	r3, r0, #1
 80064e2:	d124      	bne.n	800652e <_malloc_r+0x92>
 80064e4:	230c      	movs	r3, #12
 80064e6:	6033      	str	r3, [r6, #0]
 80064e8:	4630      	mov	r0, r6
 80064ea:	f000 f868 	bl	80065be <__malloc_unlock>
 80064ee:	e7e4      	b.n	80064ba <_malloc_r+0x1e>
 80064f0:	680b      	ldr	r3, [r1, #0]
 80064f2:	1b5b      	subs	r3, r3, r5
 80064f4:	d418      	bmi.n	8006528 <_malloc_r+0x8c>
 80064f6:	2b0b      	cmp	r3, #11
 80064f8:	d90f      	bls.n	800651a <_malloc_r+0x7e>
 80064fa:	600b      	str	r3, [r1, #0]
 80064fc:	50cd      	str	r5, [r1, r3]
 80064fe:	18cc      	adds	r4, r1, r3
 8006500:	4630      	mov	r0, r6
 8006502:	f000 f85c 	bl	80065be <__malloc_unlock>
 8006506:	f104 000b 	add.w	r0, r4, #11
 800650a:	1d23      	adds	r3, r4, #4
 800650c:	f020 0007 	bic.w	r0, r0, #7
 8006510:	1ac3      	subs	r3, r0, r3
 8006512:	d0d3      	beq.n	80064bc <_malloc_r+0x20>
 8006514:	425a      	negs	r2, r3
 8006516:	50e2      	str	r2, [r4, r3]
 8006518:	e7d0      	b.n	80064bc <_malloc_r+0x20>
 800651a:	428c      	cmp	r4, r1
 800651c:	684b      	ldr	r3, [r1, #4]
 800651e:	bf16      	itet	ne
 8006520:	6063      	strne	r3, [r4, #4]
 8006522:	6013      	streq	r3, [r2, #0]
 8006524:	460c      	movne	r4, r1
 8006526:	e7eb      	b.n	8006500 <_malloc_r+0x64>
 8006528:	460c      	mov	r4, r1
 800652a:	6849      	ldr	r1, [r1, #4]
 800652c:	e7cc      	b.n	80064c8 <_malloc_r+0x2c>
 800652e:	1cc4      	adds	r4, r0, #3
 8006530:	f024 0403 	bic.w	r4, r4, #3
 8006534:	42a0      	cmp	r0, r4
 8006536:	d005      	beq.n	8006544 <_malloc_r+0xa8>
 8006538:	1a21      	subs	r1, r4, r0
 800653a:	4630      	mov	r0, r6
 800653c:	f000 f82e 	bl	800659c <_sbrk_r>
 8006540:	3001      	adds	r0, #1
 8006542:	d0cf      	beq.n	80064e4 <_malloc_r+0x48>
 8006544:	6025      	str	r5, [r4, #0]
 8006546:	e7db      	b.n	8006500 <_malloc_r+0x64>
 8006548:	20000174 	.word	0x20000174
 800654c:	20000178 	.word	0x20000178

08006550 <_realloc_r>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	4607      	mov	r7, r0
 8006554:	4614      	mov	r4, r2
 8006556:	460e      	mov	r6, r1
 8006558:	b921      	cbnz	r1, 8006564 <_realloc_r+0x14>
 800655a:	4611      	mov	r1, r2
 800655c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006560:	f7ff bf9c 	b.w	800649c <_malloc_r>
 8006564:	b922      	cbnz	r2, 8006570 <_realloc_r+0x20>
 8006566:	f7ff ff4b 	bl	8006400 <_free_r>
 800656a:	4625      	mov	r5, r4
 800656c:	4628      	mov	r0, r5
 800656e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006570:	f000 f826 	bl	80065c0 <_malloc_usable_size_r>
 8006574:	42a0      	cmp	r0, r4
 8006576:	d20f      	bcs.n	8006598 <_realloc_r+0x48>
 8006578:	4621      	mov	r1, r4
 800657a:	4638      	mov	r0, r7
 800657c:	f7ff ff8e 	bl	800649c <_malloc_r>
 8006580:	4605      	mov	r5, r0
 8006582:	2800      	cmp	r0, #0
 8006584:	d0f2      	beq.n	800656c <_realloc_r+0x1c>
 8006586:	4631      	mov	r1, r6
 8006588:	4622      	mov	r2, r4
 800658a:	f7ff ff15 	bl	80063b8 <memcpy>
 800658e:	4631      	mov	r1, r6
 8006590:	4638      	mov	r0, r7
 8006592:	f7ff ff35 	bl	8006400 <_free_r>
 8006596:	e7e9      	b.n	800656c <_realloc_r+0x1c>
 8006598:	4635      	mov	r5, r6
 800659a:	e7e7      	b.n	800656c <_realloc_r+0x1c>

0800659c <_sbrk_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	4c06      	ldr	r4, [pc, #24]	; (80065b8 <_sbrk_r+0x1c>)
 80065a0:	2300      	movs	r3, #0
 80065a2:	4605      	mov	r5, r0
 80065a4:	4608      	mov	r0, r1
 80065a6:	6023      	str	r3, [r4, #0]
 80065a8:	f7fb ffca 	bl	8002540 <_sbrk>
 80065ac:	1c43      	adds	r3, r0, #1
 80065ae:	d102      	bne.n	80065b6 <_sbrk_r+0x1a>
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	b103      	cbz	r3, 80065b6 <_sbrk_r+0x1a>
 80065b4:	602b      	str	r3, [r5, #0]
 80065b6:	bd38      	pop	{r3, r4, r5, pc}
 80065b8:	2000041c 	.word	0x2000041c

080065bc <__malloc_lock>:
 80065bc:	4770      	bx	lr

080065be <__malloc_unlock>:
 80065be:	4770      	bx	lr

080065c0 <_malloc_usable_size_r>:
 80065c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065c4:	1f18      	subs	r0, r3, #4
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	bfbc      	itt	lt
 80065ca:	580b      	ldrlt	r3, [r1, r0]
 80065cc:	18c0      	addlt	r0, r0, r3
 80065ce:	4770      	bx	lr

080065d0 <_init>:
 80065d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d2:	bf00      	nop
 80065d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d6:	bc08      	pop	{r3}
 80065d8:	469e      	mov	lr, r3
 80065da:	4770      	bx	lr

080065dc <_fini>:
 80065dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065de:	bf00      	nop
 80065e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e2:	bc08      	pop	{r3}
 80065e4:	469e      	mov	lr, r3
 80065e6:	4770      	bx	lr

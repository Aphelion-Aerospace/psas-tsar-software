
AC_Firmware_Rev_4.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c1c  08007778  08007778  00017778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008394  08008394  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  08008394  08008394  00018394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800839c  0800839c  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800839c  0800839c  0001839c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083a0  080083a0  000183a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  080083a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015d0  2000015c  08008500  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000172c  08008500  0002172c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028bab  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044fc  00000000  00000000  00048d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0004d238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  0004de58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b012  00000000  00000000  0004e880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167d8  00000000  00000000  00079892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea6d4  00000000  00000000  0009006a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017a73e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f74  00000000  00000000  0017a794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007760 	.word	0x08007760

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	08007760 	.word	0x08007760

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <Firing>:
#include "messages.h"
#include "utilities.h"
#include "ring_buffer.h"

uint32_t Firing(struct StateVars *ctrl)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
	ctrl->valveConfiguration = StateConfiguration();
 8000584:	f002 fafa 	bl	8002b7c <StateConfiguration>
 8000588:	4602      	mov	r2, r0
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)pvf01 	\
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	22bb      	movs	r2, #187	; 0xbb
 8000592:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)pvl01 | (uint16_t)sovf01 | (uint16_t)pvf02	\
			 |(uint16_t)pvl03 | (uint16_t)pvl02);

	uint32_t TIMEOUT = 3000;// 3 second time out
 8000594:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000598:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 fab1 	bl	8002b08 <VerifyState>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d056      	beq.n	800065a <Firing+0xe2>
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 faa8 	bl	8002b08 <VerifyState>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d04d      	beq.n	800065a <Firing+0xe2>
    {
    	if((ctrl->currentState & FIRING) == FIRING){
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80005c4:	f003 0308 	and.w	r3, r3, #8
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d039      	beq.n	8000640 <Firing+0xc8>
    		// pvf01   pvl01   pvp01   sovf01   pvf02   pvl03   pvlf01   pvl02  pvp02   IG1
    		//|  1  |   1  |   0  |   0  |   1  |   1  |   0  |   0  |  0  |  0

    		StateStatus(ctrl);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f002 fa45 	bl	8002a5c <StateStatus>
    		//nominal = NominalValueCheck(ctrl, Rx_Buffer);
    		ringBufferRead();
 80005d2:	f001 fdf1 	bl	80021b8 <ringBufferRead>

    		uint32_t now = HAL_GetTick();
 80005d6:	f003 fdd9 	bl	800418c <HAL_GetTick>
 80005da:	60f8      	str	r0, [r7, #12]
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d003      	beq.n	80005f4 <Firing+0x7c>
    	    {
    			success = StateInitialize(ctrl);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f002 fc17 	bl	8002e20 <StateInitialize>
 80005f2:	6178      	str	r0, [r7, #20]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fc:	429a      	cmp	r2, r3
 80005fe:	bf0c      	ite	eq
 8000600:	2301      	moveq	r3, #1
 8000602:	2300      	movne	r3, #0
 8000604:	b2db      	uxtb	r3, r3
 8000606:	617b      	str	r3, [r7, #20]


    		if(now - ctrl->timeStarted > TIMEOUT && success)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	68fa      	ldr	r2, [r7, #12]
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	429a      	cmp	r2, r3
 8000614:	d206      	bcs.n	8000624 <Firing+0xac>
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d003      	beq.n	8000624 <Firing+0xac>
    		{
        		ctrl->currentState= PURGE;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2209      	movs	r2, #9
 8000620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}



    		// Increment state counter
    		ctrl->stateCounter++;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	1c5a      	adds	r2, r3, #1
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	609a      	str	r2, [r3, #8]
    		if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000636:	d11f      	bne.n	8000678 <Firing+0x100>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & FIRING) == FIRING){
 800063e:	e01b      	b.n	8000678 <Firing+0x100>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, FIRING, ctrl->currentState);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000646:	461a      	mov	r2, r3
 8000648:	2108      	movs	r1, #8
 800064a:	480e      	ldr	r0, [pc, #56]	; (8000684 <Firing+0x10c>)
 800064c:	f001 fac0 	bl	8001bd0 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8000650:	490c      	ldr	r1, [pc, #48]	; (8000684 <Firing+0x10c>)
 8000652:	480d      	ldr	r0, [pc, #52]	; (8000688 <Firing+0x110>)
 8000654:	f000 fc00 	bl	8000e58 <UART_SendMessage>
    	if((ctrl->currentState & FIRING) == FIRING){
 8000658:	e00e      	b.n	8000678 <Firing+0x100>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000666:	461a      	mov	r2, r3
 8000668:	4806      	ldr	r0, [pc, #24]	; (8000684 <Firing+0x10c>)
 800066a:	f001 fb2b 	bl	8001cc4 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 800066e:	4905      	ldr	r1, [pc, #20]	; (8000684 <Firing+0x10c>)
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <Firing+0x110>)
 8000672:	f000 fbf1 	bl	8000e58 <UART_SendMessage>
 8000676:	e000      	b.n	800067a <Firing+0x102>
    	if((ctrl->currentState & FIRING) == FIRING){
 8000678:	bf00      	nop
    }
	return success;
 800067a:	697b      	ldr	r3, [r7, #20]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3718      	adds	r7, #24
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000360 	.word	0x20000360
 8000688:	20001650 	.word	0x20001650

0800068c <Ignition>:
#include "messages.h"
#include "utilities.h"
#include "ring_buffer.h"

uint32_t Ignition(struct StateVars *ctrl)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
	ctrl->valveConfiguration = StateConfiguration();
 8000698:	f002 fa70 	bl	8002b7c <StateConfiguration>
 800069c:	4602      	mov	r2, r0
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)pvf01 	\
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f240 228b 	movw	r2, #651	; 0x28b
 80006a8:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)pvl01 |(uint16_t)IG1 | (uint16_t)sovf01 | (uint16_t)pvl02);

	uint32_t TIMEOUT = 5000;//5 second time out
 80006aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80006ae:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 fa26 	bl	8002b08 <VerifyState>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d056      	beq.n	8000770 <Ignition+0xe4>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 fa1d 	bl	8002b08 <VerifyState>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d04d      	beq.n	8000770 <Ignition+0xe4>
    {
    	if((ctrl->currentState & IGNITION) == IGNITION){
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80006da:	f003 0306 	and.w	r3, r3, #6
 80006de:	2b06      	cmp	r3, #6
 80006e0:	d139      	bne.n	8000756 <Ignition+0xca>
    		// pvf01   pvl01   pvp01   sovf01   pvf02   pvl03   pvlf01   pvl02  pvp02   IG1
    		//|  1  |   1  |   0  |   0  |   0  |   0  |   0  |   0  |  0  |  1

    		StateStatus(ctrl);
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f002 f9ba 	bl	8002a5c <StateStatus>
    		//nominal = NominalValueCheck(ctrl, Rx_Buffer);
    		ringBufferRead();
 80006e8:	f001 fd66 	bl	80021b8 <ringBufferRead>

    		uint32_t now = HAL_GetTick();//should return the number of milliseconds elapsed since startup
 80006ec:	f003 fd4e 	bl	800418c <HAL_GetTick>
 80006f0:	60f8      	str	r0, [r7, #12]
    	    // If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80006fe:	429a      	cmp	r2, r3
 8000700:	d003      	beq.n	800070a <Ignition+0x7e>
    	    {
    			success = StateInitialize(ctrl);
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f002 fb8c 	bl	8002e20 <StateInitialize>
 8000708:	6178      	str	r0, [r7, #20]
    	    }


			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	429a      	cmp	r2, r3
 8000714:	bf0c      	ite	eq
 8000716:	2301      	moveq	r3, #1
 8000718:	2300      	movne	r3, #0
 800071a:	b2db      	uxtb	r3, r3
 800071c:	617b      	str	r3, [r7, #20]

    		if((now - ctrl->timeStarted >= TIMEOUT) && success)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	429a      	cmp	r2, r3
 800072a:	d806      	bhi.n	800073a <Ignition+0xae>
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d003      	beq.n	800073a <Ignition+0xae>
    		{
        		ctrl->currentState= OXIDIZER_START;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2207      	movs	r2, #7
 8000736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}

    		// Increment state counter
			ctrl->stateCounter++;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	1c5a      	adds	r2, r3, #1
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800074c:	d11f      	bne.n	800078e <Ignition+0x102>
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & IGNITION) == IGNITION){
 8000754:	e01b      	b.n	800078e <Ignition+0x102>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, IGNITION, ctrl->currentState);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800075c:	461a      	mov	r2, r3
 800075e:	2106      	movs	r1, #6
 8000760:	480e      	ldr	r0, [pc, #56]	; (800079c <Ignition+0x110>)
 8000762:	f001 fa35 	bl	8001bd0 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8000766:	490d      	ldr	r1, [pc, #52]	; (800079c <Ignition+0x110>)
 8000768:	480d      	ldr	r0, [pc, #52]	; (80007a0 <Ignition+0x114>)
 800076a:	f000 fb75 	bl	8000e58 <UART_SendMessage>
    	if((ctrl->currentState & IGNITION) == IGNITION){
 800076e:	e00e      	b.n	800078e <Ignition+0x102>
    	}

    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800077c:	461a      	mov	r2, r3
 800077e:	4807      	ldr	r0, [pc, #28]	; (800079c <Ignition+0x110>)
 8000780:	f001 faa0 	bl	8001cc4 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 8000784:	4905      	ldr	r1, [pc, #20]	; (800079c <Ignition+0x110>)
 8000786:	4806      	ldr	r0, [pc, #24]	; (80007a0 <Ignition+0x114>)
 8000788:	f000 fb66 	bl	8000e58 <UART_SendMessage>
 800078c:	e000      	b.n	8000790 <Ignition+0x104>
    	if((ctrl->currentState & IGNITION) == IGNITION){
 800078e:	bf00      	nop
    }
	return success;
 8000790:	697b      	ldr	r3, [r7, #20]
}
 8000792:	4618      	mov	r0, r3
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000360 	.word	0x20000360
 80007a0:	20001650 	.word	0x20001650

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b0b8      	sub	sp, #224	; 0xe0
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007ae:	2244      	movs	r2, #68	; 0x44
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f006 fb88 	bl	8006ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c8:	463b      	mov	r3, r7
 80007ca:	2288      	movs	r2, #136	; 0x88
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f006 fb7a 	bl	8006ec8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d4:	2302      	movs	r3, #2
 80007d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e2:	2310      	movs	r3, #16
 80007e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ee:	2302      	movs	r3, #2
 80007f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007f4:	2301      	movs	r3, #1
 80007f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007fa:	230a      	movs	r3, #10
 80007fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000800:	2307      	movs	r3, #7
 8000802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000806:	2302      	movs	r3, #2
 8000808:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800080c:	2302      	movs	r3, #2
 800080e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000812:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000816:	4618      	mov	r0, r3
 8000818:	f004 f8b6 	bl	8004988 <HAL_RCC_OscConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000822:	f000 f941 	bl	8000aa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000826:	230f      	movs	r3, #15
 8000828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082c:	2303      	movs	r3, #3
 800082e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000844:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000848:	2104      	movs	r1, #4
 800084a:	4618      	mov	r0, r3
 800084c:	f004 fc82 	bl	8005154 <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000856:	f000 f927 	bl	8000aa8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800085a:	2306      	movs	r3, #6
 800085c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800085e:	2300      	movs	r3, #0
 8000860:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000862:	2300      	movs	r3, #0
 8000864:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	4618      	mov	r0, r3
 800086a:	f004 fe79 	bl	8005560 <HAL_RCCEx_PeriphCLKConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000874:	f000 f918 	bl	8000aa8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000878:	f44f 7000 	mov.w	r0, #512	; 0x200
 800087c:	f004 f82e 	bl	80048dc <HAL_PWREx_ControlVoltageScaling>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000886:	f000 f90f 	bl	8000aa8 <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	37e0      	adds	r7, #224	; 0xe0
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <MX_USART2_UART_Init>:
    * @brief USART1 Initialization Function
    * @param None
    * @retval None
    */
void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_USART2_UART_Init+0x58>)
 800089a:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <MX_USART2_UART_Init+0x5c>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008d8:	f005 fafe 	bl	8005ed8 <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008e2:	f000 f8e1 	bl	8000aa8 <Error_Handler>
  }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

  }
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20001650 	.word	0x20001650
 80008f0:	40004400 	.word	0x40004400

080008f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_USART3_UART_Init+0x58>)
 80008fa:	4a15      	ldr	r2, [pc, #84]	; (8000950 <MX_USART3_UART_Init+0x5c>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000900:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000904:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_USART3_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_USART3_UART_Init+0x58>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_USART3_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000938:	f005 face 	bl	8005ed8 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000942:	f000 f8b1 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000250 	.word	0x20000250
 8000950:	40004800 	.word	0x40004800

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	4b4b      	ldr	r3, [pc, #300]	; (8000a98 <MX_GPIO_Init+0x144>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4a4a      	ldr	r2, [pc, #296]	; (8000a98 <MX_GPIO_Init+0x144>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4b48      	ldr	r3, [pc, #288]	; (8000a98 <MX_GPIO_Init+0x144>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000982:	4b45      	ldr	r3, [pc, #276]	; (8000a98 <MX_GPIO_Init+0x144>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a44      	ldr	r2, [pc, #272]	; (8000a98 <MX_GPIO_Init+0x144>)
 8000988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b42      	ldr	r3, [pc, #264]	; (8000a98 <MX_GPIO_Init+0x144>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b3f      	ldr	r3, [pc, #252]	; (8000a98 <MX_GPIO_Init+0x144>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4a3e      	ldr	r2, [pc, #248]	; (8000a98 <MX_GPIO_Init+0x144>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4b3c      	ldr	r3, [pc, #240]	; (8000a98 <MX_GPIO_Init+0x144>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4b39      	ldr	r3, [pc, #228]	; (8000a98 <MX_GPIO_Init+0x144>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a38      	ldr	r2, [pc, #224]	; (8000a98 <MX_GPIO_Init+0x144>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b36      	ldr	r3, [pc, #216]	; (8000a98 <MX_GPIO_Init+0x144>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LOX_MAIN_Pin|FUEL_MAIN_Pin|IGNITION1_Pin
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 51f9 	mov.w	r1, #7968	; 0x1f20
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d4:	f003 ff38 	bl	8004848 <HAL_GPIO_WritePin>
                          |FUEL_PRESSURE_Pin|LOX_PRESSURE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin|LOX_PURGE_Pin|LOX_FILL_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 4124 	mov.w	r1, #41984	; 0xa400
 80009de:	482f      	ldr	r0, [pc, #188]	; (8000a9c <MX_GPIO_Init+0x148>)
 80009e0:	f003 ff32 	bl	8004848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin|FUEL_PURGE_N2_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	21c0      	movs	r1, #192	; 0xc0
 80009e8:	482d      	ldr	r0, [pc, #180]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009ea:	f003 ff2d 	bl	8004848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f4:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <MX_GPIO_Init+0x150>)
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4827      	ldr	r0, [pc, #156]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 8000a04:	f003 fd5e 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a08:	2320      	movs	r3, #32
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a22:	f003 fd4f 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOX_VENT_Pin LOX_PURGE_Pin LOX_FILL_Pin */
  GPIO_InitStruct.Pin = LOX_VENT_Pin|LOX_PURGE_Pin|LOX_FILL_Pin;
 8000a26:	f44f 4324 	mov.w	r3, #41984	; 0xa400
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4817      	ldr	r0, [pc, #92]	; (8000a9c <MX_GPIO_Init+0x148>)
 8000a40:	f003 fd40 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FUEL_VENT_Pin FUEL_PURGE_N2_Pin */
  GPIO_InitStruct.Pin = FUEL_VENT_Pin|FUEL_PURGE_N2_Pin;
 8000a44:	23c0      	movs	r3, #192	; 0xc0
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 8000a5c:	f003 fd32 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOX_MAIN_Pin FUEL_MAIN_Pin IGNITION1_Pin FUEL_PRESSURE_Pin
                           LOX_PRESSURE_Pin */
  GPIO_InitStruct.Pin = LOX_MAIN_Pin|FUEL_MAIN_Pin|IGNITION1_Pin|FUEL_PRESSURE_Pin
 8000a60:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000a64:	617b      	str	r3, [r7, #20]
                          |LOX_PRESSURE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7c:	f003 fd22 	bl	80044c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	2028      	movs	r0, #40	; 0x28
 8000a86:	f003 fca2 	bl	80043ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a8a:	2028      	movs	r0, #40	; 0x28
 8000a8c:	f003 fcbb 	bl	8004406 <HAL_NVIC_EnableIRQ>

}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	; 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	48000400 	.word	0x48000400
 8000aa0:	48000800 	.word	0x48000800
 8000aa4:	10210000 	.word	0x10210000

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <Error_Handler+0x8>
	...

08000ab4 <LoxChill>:
#include "lox_chill.h"
#include "messages.h"
#include "ring_buffer.h"

uint32_t LoxChill(struct StateVars *ctrl)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 8000ac0:	f002 f85c 	bl	8002b7c <StateConfiguration>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)pvl03 );
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2220      	movs	r2, #32
 8000ace:	631a      	str	r2, [r3, #48]	; 0x30

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f002 f816 	bl	8002b08 <VerifyState>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d048      	beq.n	8000b74 <LoxChill+0xc0>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f002 f80d 	bl	8002b08 <VerifyState>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d03f      	beq.n	8000b74 <LoxChill+0xc0>
    {
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d02b      	beq.n	8000b5a <LoxChill+0xa6>
    		// pvf01   pvl01   pvp01   sovf01   pvf02   pvl03   pvlf01   pvl02
    		//|  0  |   0  |   0  |   0  |   0  |   1  |   0  |   0 |

    		StateStatus(ctrl);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f001 ffaa 	bl	8002a5c <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d003      	beq.n	8000b20 <LoxChill+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f002 f981 	bl	8002e20 <StateInitialize>
 8000b1e:	60f8      	str	r0, [r7, #12]
    	    }

    		//check if command changed
    		ProcessCommands(ctrl);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f000 fb83 	bl	800122c <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	bf0c      	ite	eq
 8000b32:	2301      	moveq	r3, #1
 8000b34:	2300      	movne	r3, #0
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	60fb      	str	r3, [r7, #12]

			//NominalValueCheck(ctrl, Rx_Buffer);
			ringBufferRead();
 8000b3a:	f001 fb3d 	bl	80021b8 <ringBufferRead>

    		// Increment state counter
			ctrl->stateCounter++;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b50:	d11f      	bne.n	8000b92 <LoxChill+0xde>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000b58:	e01b      	b.n	8000b92 <LoxChill+0xde>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, LOX_CHILL, ctrl->currentState);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b60:	461a      	mov	r2, r3
 8000b62:	2104      	movs	r1, #4
 8000b64:	480e      	ldr	r0, [pc, #56]	; (8000ba0 <LoxChill+0xec>)
 8000b66:	f001 f833 	bl	8001bd0 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8000b6a:	490d      	ldr	r1, [pc, #52]	; (8000ba0 <LoxChill+0xec>)
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <LoxChill+0xf0>)
 8000b6e:	f000 f973 	bl	8000e58 <UART_SendMessage>
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000b72:	e00e      	b.n	8000b92 <LoxChill+0xde>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000b80:	461a      	mov	r2, r3
 8000b82:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <LoxChill+0xec>)
 8000b84:	f001 f89e 	bl	8001cc4 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8000b88:	4905      	ldr	r1, [pc, #20]	; (8000ba0 <LoxChill+0xec>)
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <LoxChill+0xf0>)
 8000b8c:	f000 f964 	bl	8000e58 <UART_SendMessage>
 8000b90:	e000      	b.n	8000b94 <LoxChill+0xe0>
    	if((ctrl->currentState & LOX_CHILL) == LOX_CHILL){
 8000b92:	bf00      	nop
    }
	return success;
 8000b94:	68fb      	ldr	r3, [r7, #12]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000360 	.word	0x20000360
 8000ba4:	20001650 	.word	0x20001650

08000ba8 <LoxFill>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "lox_fill.h"
#include "messages.h"
#include "ring_buffer.h"

uint32_t LoxFill(struct StateVars *ctrl){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 8000bb4:	f001 ffe2 	bl	8002b7c <StateConfiguration>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)pvlf01 );
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2240      	movs	r2, #64	; 0x40
 8000bc2:	631a      	str	r2, [r3, #48]	; 0x30

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f001 ff9c 	bl	8002b08 <VerifyState>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d048      	beq.n	8000c68 <LoxFill+0xc0>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f001 ff93 	bl	8002b08 <VerifyState>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d03f      	beq.n	8000c68 <LoxFill+0xc0>
    {
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bee:	f003 0303 	and.w	r3, r3, #3
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d12b      	bne.n	8000c4e <LoxFill+0xa6>
    		// pvf01   pvl01   pvp01   sovf01   pvf02   pvl03   pvlf01   pvl02  pvp02   IG1
    		//|  0  |   0  |   0  |   0  |   0  |   0  |   1  |   0  |  0  |  0

    		StateStatus(ctrl);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f001 ff30 	bl	8002a5c <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d003      	beq.n	8000c14 <LoxFill+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f002 f907 	bl	8002e20 <StateInitialize>
 8000c12:	60f8      	str	r0, [r7, #12]
    	    }


    		ProcessCommands(ctrl);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f000 fb09 	bl	800122c <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	429a      	cmp	r2, r3
 8000c24:	bf0c      	ite	eq
 8000c26:	2301      	moveq	r3, #1
 8000c28:	2300      	movne	r3, #0
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	60fb      	str	r3, [r7, #12]

			//NominalValueCheck(ctrl, Rx_Buffer);
			ringBufferRead();
 8000c2e:	f001 fac3 	bl	80021b8 <ringBufferRead>

    		// Increment state counter
			ctrl->stateCounter++;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c44:	d11f      	bne.n	8000c86 <LoxFill+0xde>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000c4c:	e01b      	b.n	8000c86 <LoxFill+0xde>

    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, LOX_FILL, ctrl->currentState);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c54:	461a      	mov	r2, r3
 8000c56:	2103      	movs	r1, #3
 8000c58:	480e      	ldr	r0, [pc, #56]	; (8000c94 <LoxFill+0xec>)
 8000c5a:	f000 ffb9 	bl	8001bd0 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8000c5e:	490d      	ldr	r1, [pc, #52]	; (8000c94 <LoxFill+0xec>)
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <LoxFill+0xf0>)
 8000c62:	f000 f8f9 	bl	8000e58 <UART_SendMessage>
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000c66:	e00e      	b.n	8000c86 <LoxFill+0xde>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c74:	461a      	mov	r2, r3
 8000c76:	4807      	ldr	r0, [pc, #28]	; (8000c94 <LoxFill+0xec>)
 8000c78:	f001 f824 	bl	8001cc4 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 8000c7c:	4905      	ldr	r1, [pc, #20]	; (8000c94 <LoxFill+0xec>)
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <LoxFill+0xf0>)
 8000c80:	f000 f8ea 	bl	8000e58 <UART_SendMessage>
 8000c84:	e000      	b.n	8000c88 <LoxFill+0xe0>
    	if((ctrl->currentState & LOX_FILL) == LOX_FILL){
 8000c86:	bf00      	nop
    }

	return success;
 8000c88:	68fb      	ldr	r3, [r7, #12]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000360 	.word	0x20000360
 8000c98:	20001650 	.word	0x20001650

08000c9c <LoxPreFill>:
#include "messages.h"
#include "ring_buffer.h"


uint32_t LoxPreFill(struct StateVars *ctrl)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
    // The vent valves are open when off and they close when turned on
	//pvl02 is closed by turning it ON
	ctrl->valveConfiguration = StateConfiguration();
 8000ca8:	f001 ff68 	bl	8002b7c <StateConfiguration>
 8000cac:	4602      	mov	r2, r0
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)pvl01 | (uint16_t)pvl02 |(uint16_t)pvl03);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	22a2      	movs	r2, #162	; 0xa2
 8000cb6:	631a      	str	r2, [r3, #48]	; 0x30


    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 ff22 	bl	8002b08 <VerifyState>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d048      	beq.n	8000d5c <LoxPreFill+0xc0>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 ff19 	bl	8002b08 <VerifyState>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d03f      	beq.n	8000d5c <LoxPreFill+0xc0>
    {
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d02b      	beq.n	8000d42 <LoxPreFill+0xa6>
    		// pvf01   pvl01   pvp01   sovf01   pvf02   pvl03   pvlf01   pvl02   pvp02   IG1
    		// | 0	|   1  |   0  |   0  |   0  |   1  |   0  |   1  |   0  |  0
    		StateStatus(ctrl);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f001 feb6 	bl	8002a5c <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d003      	beq.n	8000d08 <LoxPreFill+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f002 f88d 	bl	8002e20 <StateInitialize>
 8000d06:	60f8      	str	r0, [r7, #12]
    	    }

    		//StateStatus(ctrl);

    		ProcessCommands(ctrl);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f000 fa8f 	bl	800122c <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	429a      	cmp	r2, r3
 8000d18:	bf0c      	ite	eq
 8000d1a:	2301      	moveq	r3, #1
 8000d1c:	2300      	movne	r3, #0
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	60fb      	str	r3, [r7, #12]

			//NominalValueCheck(ctrl, Rx_Buffer);
			ringBufferRead();
 8000d22:	f001 fa49 	bl	80021b8 <ringBufferRead>
    		// Increment state counter
    		ctrl->stateCounter++;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
    		if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d38:	d11f      	bne.n	8000d7a <LoxPreFill+0xde>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000d40:	e01b      	b.n	8000d7a <LoxPreFill+0xde>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, LOX_PRE_FILL, ctrl->currentState);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d48:	461a      	mov	r2, r3
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	480e      	ldr	r0, [pc, #56]	; (8000d88 <LoxPreFill+0xec>)
 8000d4e:	f000 ff3f 	bl	8001bd0 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2, Tx_Buffer);
 8000d52:	490d      	ldr	r1, [pc, #52]	; (8000d88 <LoxPreFill+0xec>)
 8000d54:	480d      	ldr	r0, [pc, #52]	; (8000d8c <LoxPreFill+0xf0>)
 8000d56:	f000 f87f 	bl	8000e58 <UART_SendMessage>
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000d5a:	e00e      	b.n	8000d7a <LoxPreFill+0xde>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4807      	ldr	r0, [pc, #28]	; (8000d88 <LoxPreFill+0xec>)
 8000d6c:	f000 ffaa 	bl	8001cc4 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8000d70:	4905      	ldr	r1, [pc, #20]	; (8000d88 <LoxPreFill+0xec>)
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <LoxPreFill+0xf0>)
 8000d74:	f000 f870 	bl	8000e58 <UART_SendMessage>
 8000d78:	e000      	b.n	8000d7c <LoxPreFill+0xe0>
    	if((ctrl->currentState & LOX_PRE_FILL) == LOX_PRE_FILL){
 8000d7a:	bf00      	nop
    }

	return success;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000360 	.word	0x20000360
 8000d8c:	20001650 	.word	0x20001650

08000d90 <main>:
#include "init.h"
#include "ring_buffer.h"
#include "messages.h"
int main(void)

{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0d8      	sub	sp, #352	; 0x160
 8000d94:	af00      	add	r7, sp, #0
struct StateVars controls = {
 8000d96:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000d9a:	223c      	movs	r2, #60	; 0x3c
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f006 f892 	bl	8006ec8 <memset>
 8000da4:	2301      	movs	r3, #1
 8000da6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000daa:	230b      	movs	r3, #11
 8000dac:	f887 3158 	strb.w	r3, [r7, #344]	; 0x158
 8000db0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000db4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
		TURN_OFF,	//lastState
		SAFETY, 	//currentState
		&controls	//this address.
		};

	HAL_Init();
 8000db8:	f003 f978 	bl	80040ac <HAL_Init>

	SystemClock_Config();
 8000dbc:	f7ff fcf2 	bl	80007a4 <SystemClock_Config>
	MX_GPIO_Init();
 8000dc0:	f7ff fdc8 	bl	8000954 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000dc4:	f7ff fd66 	bl	8000894 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000dc8:	f7ff fd94 	bl	80008f4 <MX_USART3_UART_Init>
    circular = 0; // Flag for circular buffer init
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <main+0xac>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
    bufferLength = 0, readIndex = 0, writeIndex = 0;
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <main+0xb0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <main+0xb4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <main+0xb8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
    char arr[31][6] = {0}; 						//to hold the separated sensor values.
 8000de4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000de8:	22ba      	movs	r2, #186	; 0xba
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f006 f86b 	bl	8006ec8 <memset>
    char notice[100] = {0}; 						//for the output message(wrong Data packet key)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2260      	movs	r2, #96	; 0x60
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f006 f862 	bl	8006ec8 <memset>
    initOnceFlag = TRUE;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <main+0xbc>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	601a      	str	r2, [r3, #0]

	 HAL_UART_Receive_IT(&huart2,Rx_data, 1); // Asserts UART Interrupt every time 1 byte is received.
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4910      	ldr	r1, [pc, #64]	; (8000e50 <main+0xc0>)
 8000e0e:	4811      	ldr	r0, [pc, #68]	; (8000e54 <main+0xc4>)
 8000e10:	f005 f944 	bl	800609c <HAL_UART_Receive_IT>


	while(controls.isStateMachineRunning)
 8000e14:	e007      	b.n	8000e26 <main+0x96>
	{

	  StateMachine(controls.isStateMachineRunning,controls.adr);
 8000e16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000e1a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 fb79 	bl	8002518 <StateMachine>
	while(controls.isStateMachineRunning)
 8000e26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1f3      	bne.n	8000e16 <main+0x86>
 8000e2e:	2300      	movs	r3, #0
	}

}
 8000e30:	4618      	mov	r0, r3
 8000e32:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20001374 	.word	0x20001374
 8000e40:	20000248 	.word	0x20000248
 8000e44:	200016f4 	.word	0x200016f4
 8000e48:	20001388 	.word	0x20001388
 8000e4c:	200002dc 	.word	0x200002dc
 8000e50:	20000350 	.word	0x20000350
 8000e54:	20001650 	.word	0x20001650

08000e58 <UART_SendMessage>:
//troubleshooting
int x = 0;

// Function to send the messages over serial communication
void UART_SendMessage(UART_HandleTypeDef *huart, char* message)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
	  int len = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
	  uint32_t success = FALSE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
	  sprintf(buffer, message);
 8000e6a:	6839      	ldr	r1, [r7, #0]
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <UART_SendMessage+0x3c>)
 8000e6e:	f006 f833 	bl	8006ed8 <siprintf>
	  len =strlen(buffer);
 8000e72:	4808      	ldr	r0, [pc, #32]	; (8000e94 <UART_SendMessage+0x3c>)
 8000e74:	f7ff f9ac 	bl	80001d0 <strlen>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e84:	4903      	ldr	r1, [pc, #12]	; (8000e94 <UART_SendMessage+0x3c>)
 8000e86:	4804      	ldr	r0, [pc, #16]	; (8000e98 <UART_SendMessage+0x40>)
 8000e88:	f005 f874 	bl	8005f74 <HAL_UART_Transmit>
	  return success;
 8000e8c:	bf00      	nop
}
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200013f0 	.word	0x200013f0
 8000e98:	20001650 	.word	0x20001650

08000e9c <UART_SendMessage_VI>:
//Function that sends the state transition message to the VI
void UART_SendMessage_VI(UART_HandleTypeDef *huart, char* message){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
		  int len = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
		  uint32_t success = FALSE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
		  sprintf(buffer, message);
 8000eae:	6839      	ldr	r1, [r7, #0]
 8000eb0:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <UART_SendMessage_VI+0x3c>)
 8000eb2:	f006 f811 	bl	8006ed8 <siprintf>
		  len =strlen(buffer);
 8000eb6:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <UART_SendMessage_VI+0x3c>)
 8000eb8:	f7ff f98a 	bl	80001d0 <strlen>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart3, buffer, len, 1000);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec8:	4903      	ldr	r1, [pc, #12]	; (8000ed8 <UART_SendMessage_VI+0x3c>)
 8000eca:	4804      	ldr	r0, [pc, #16]	; (8000edc <UART_SendMessage_VI+0x40>)
 8000ecc:	f005 f852 	bl	8005f74 <HAL_UART_Transmit>
		  return success;
 8000ed0:	bf00      	nop
}
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200013f0 	.word	0x200013f0
 8000edc:	20000250 	.word	0x20000250

08000ee0 <HAL_UART_RxCpltCallback>:

//Receiving the command
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	 uint32_t success = FALSE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
	 uint8_t i;
	    if (huart->Instance == USART2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a78      	ldr	r2, [pc, #480]	; (80010d4 <HAL_UART_RxCpltCallback+0x1f4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	f040 80e9 	bne.w	80010ca <HAL_UART_RxCpltCallback+0x1ea>
	     {
	    	//clear Rx_Buffer before receiving new data
	        if (Rx_indx==0){ for (i=0;i<200;i++) Rx_Buffer[i]=0; }
 8000ef8:	4b77      	ldr	r3, [pc, #476]	; (80010d8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d10c      	bne.n	8000f1a <HAL_UART_RxCpltCallback+0x3a>
 8000f00:	2300      	movs	r3, #0
 8000f02:	75fb      	strb	r3, [r7, #23]
 8000f04:	e006      	b.n	8000f14 <HAL_UART_RxCpltCallback+0x34>
 8000f06:	7dfb      	ldrb	r3, [r7, #23]
 8000f08:	4a74      	ldr	r2, [pc, #464]	; (80010dc <HAL_UART_RxCpltCallback+0x1fc>)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	54d1      	strb	r1, [r2, r3]
 8000f0e:	7dfb      	ldrb	r3, [r7, #23]
 8000f10:	3301      	adds	r3, #1
 8000f12:	75fb      	strb	r3, [r7, #23]
 8000f14:	7dfb      	ldrb	r3, [r7, #23]
 8000f16:	2bc7      	cmp	r3, #199	; 0xc7
 8000f18:	d9f5      	bls.n	8000f06 <HAL_UART_RxCpltCallback+0x26>

	        //if received data different from ascii 13 (Carriage Return) continue storing data.
	        if (Rx_data[0] != 13){
 8000f1a:	4b71      	ldr	r3, [pc, #452]	; (80010e0 <HAL_UART_RxCpltCallback+0x200>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b0d      	cmp	r3, #13
 8000f20:	d00b      	beq.n	8000f3a <HAL_UART_RxCpltCallback+0x5a>
	        		Rx_Buffer[Rx_indx++]=Rx_data[0];    //add data to Rx_Buffer
 8000f22:	4b6d      	ldr	r3, [pc, #436]	; (80010d8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	1c5a      	adds	r2, r3, #1
 8000f28:	b2d1      	uxtb	r1, r2
 8000f2a:	4a6b      	ldr	r2, [pc, #428]	; (80010d8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000f2c:	7011      	strb	r1, [r2, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b6b      	ldr	r3, [pc, #428]	; (80010e0 <HAL_UART_RxCpltCallback+0x200>)
 8000f32:	7819      	ldrb	r1, [r3, #0]
 8000f34:	4b69      	ldr	r3, [pc, #420]	; (80010dc <HAL_UART_RxCpltCallback+0x1fc>)
 8000f36:	5499      	strb	r1, [r3, r2]
 8000f38:	e0c2      	b.n	80010c0 <HAL_UART_RxCpltCallback+0x1e0>
	        	     //sprintf(notice, "\nData: %s", Rx_Buffer);
	        		        			    	   // Ok send the warning message
	        		 //UART_SendMessage(&huart2, notice);

	        	     // Flag variables
	        	     Rx_indx=0;            // Reset the Rx index to start reading data from the beginning.
 8000f3a:	4b67      	ldr	r3, [pc, #412]	; (80010d8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
	        	     retransition = TRUE;  // For message in case usr tries to transition to the current state.
 8000f40:	4b68      	ldr	r3, [pc, #416]	; (80010e4 <HAL_UART_RxCpltCallback+0x204>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]
					 inv_flag = TRUE;      // For message about invalid command.
 8000f46:	4b68      	ldr	r3, [pc, #416]	; (80010e8 <HAL_UART_RxCpltCallback+0x208>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
					 RxTxFlags |= 0x1;
 8000f4c:	4b67      	ldr	r3, [pc, #412]	; (80010ec <HAL_UART_RxCpltCallback+0x20c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	4a65      	ldr	r2, [pc, #404]	; (80010ec <HAL_UART_RxCpltCallback+0x20c>)
 8000f56:	6013      	str	r3, [r2, #0]
					 success = TRUE;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
					 // if data contains a Marionette data packet then checker = 8
					 // MAR_DATA_CHECK contains the number of values for the data packet.
					 // EX: Testing MAR_DATA_CHECK = 8 (3F99 and 7 sensor values)


					 uint32_t checker = splitValues(Rx_Buffer, arr);
 8000f5c:	4964      	ldr	r1, [pc, #400]	; (80010f0 <HAL_UART_RxCpltCallback+0x210>)
 8000f5e:	485f      	ldr	r0, [pc, #380]	; (80010dc <HAL_UART_RxCpltCallback+0x1fc>)
 8000f60:	f000 fd86 	bl	8001a70 <splitValues>
 8000f64:	60b8      	str	r0, [r7, #8]
                      // check how many items in the data
	        		  if (checker == MAR_DATA_CHECK){
 8000f66:	4b63      	ldr	r3, [pc, #396]	; (80010f4 <HAL_UART_RxCpltCallback+0x214>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d11e      	bne.n	8000fae <HAL_UART_RxCpltCallback+0xce>
                              // Make sure we have the correct Data Packet Key(3F99)


	        			      for(int i = 0; i<=3; i++){
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	e00b      	b.n	8000f8e <HAL_UART_RxCpltCallback+0xae>
	        			    	  marionette_key[i] = Rx_Buffer[i];
 8000f76:	4a59      	ldr	r2, [pc, #356]	; (80010dc <HAL_UART_RxCpltCallback+0x1fc>)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	7819      	ldrb	r1, [r3, #0]
 8000f7e:	4a5e      	ldr	r2, [pc, #376]	; (80010f8 <HAL_UART_RxCpltCallback+0x218>)
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4413      	add	r3, r2
 8000f84:	460a      	mov	r2, r1
 8000f86:	701a      	strb	r2, [r3, #0]
	        			      for(int i = 0; i<=3; i++){
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	ddf0      	ble.n	8000f76 <HAL_UART_RxCpltCallback+0x96>

	        			      }
	        			      //Only in the case where we have the right amount of values and the correct data key we add to the ring buffer
	        			      if (hexadecimalTouint32(marionette_key) == marionette_cmd){
 8000f94:	4858      	ldr	r0, [pc, #352]	; (80010f8 <HAL_UART_RxCpltCallback+0x218>)
 8000f96:	f000 f8f7 	bl	8001188 <hexadecimalTouint32>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	4b57      	ldr	r3, [pc, #348]	; (80010fc <HAL_UART_RxCpltCallback+0x21c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	f040 808d 	bne.w	80010c0 <HAL_UART_RxCpltCallback+0x1e0>
	        			    	  //send data packet to ring buffer
	        			    	  ringBuffer(Rx_Buffer);
 8000fa6:	484d      	ldr	r0, [pc, #308]	; (80010dc <HAL_UART_RxCpltCallback+0x1fc>)
 8000fa8:	f001 f870 	bl	800208c <ringBuffer>
 8000fac:	e088      	b.n	80010c0 <HAL_UART_RxCpltCallback+0x1e0>

	        	     }
	        		  else{
	        		  //Otherwise we have an user's command
	        		 // convert the hex command received into uint32_t
	        		 command =  hexadecimalTouint32(Rx_Buffer);
 8000fae:	484b      	ldr	r0, [pc, #300]	; (80010dc <HAL_UART_RxCpltCallback+0x1fc>)
 8000fb0:	f000 f8ea 	bl	8001188 <hexadecimalTouint32>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a52      	ldr	r2, [pc, #328]	; (8001100 <HAL_UART_RxCpltCallback+0x220>)
 8000fb8:	6013      	str	r3, [r2, #0]

	                 // command variable contains the uint32 conversion from the hex command
	                 if(command ==state_status){
 8000fba:	4b51      	ldr	r3, [pc, #324]	; (8001100 <HAL_UART_RxCpltCallback+0x220>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4b51      	ldr	r3, [pc, #324]	; (8001104 <HAL_UART_RxCpltCallback+0x224>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d103      	bne.n	8000fce <HAL_UART_RxCpltCallback+0xee>
	                	 status= TRUE;
 8000fc6:	4b50      	ldr	r3, [pc, #320]	; (8001108 <HAL_UART_RxCpltCallback+0x228>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	e078      	b.n	80010c0 <HAL_UART_RxCpltCallback+0x1e0>
	                 }
	                 else if (command ==  power_off || shutdown || valve_check || lox_fill || lox_chill || pressurizing || lox_pre_fill || ignition \
 8000fce:	4b4c      	ldr	r3, [pc, #304]	; (8001100 <HAL_UART_RxCpltCallback+0x220>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4b4e      	ldr	r3, [pc, #312]	; (800110c <HAL_UART_RxCpltCallback+0x22c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d06f      	beq.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 8000fda:	4b4d      	ldr	r3, [pc, #308]	; (8001110 <HAL_UART_RxCpltCallback+0x230>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d16b      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 8000fe2:	4b4c      	ldr	r3, [pc, #304]	; (8001114 <HAL_UART_RxCpltCallback+0x234>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d167      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 8000fea:	4b4b      	ldr	r3, [pc, #300]	; (8001118 <HAL_UART_RxCpltCallback+0x238>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d163      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 8000ff2:	4b4a      	ldr	r3, [pc, #296]	; (800111c <HAL_UART_RxCpltCallback+0x23c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d15f      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 8000ffa:	4b49      	ldr	r3, [pc, #292]	; (8001120 <HAL_UART_RxCpltCallback+0x240>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d15b      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 8001002:	4b48      	ldr	r3, [pc, #288]	; (8001124 <HAL_UART_RxCpltCallback+0x244>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d157      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 800100a:	4b47      	ldr	r3, [pc, #284]	; (8001128 <HAL_UART_RxCpltCallback+0x248>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d153      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
	             			|| cycle_valves || IGON || IGOFF || pvf01on || pvf01off || pvl01on || pvl01off || pvp01on || pvp01off || sovf01on || sovf01off || pvf02on || pvf02off ||\
 8001012:	4b46      	ldr	r3, [pc, #280]	; (800112c <HAL_UART_RxCpltCallback+0x24c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d14f      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 800101a:	4b45      	ldr	r3, [pc, #276]	; (8001130 <HAL_UART_RxCpltCallback+0x250>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d14b      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 8001022:	4b44      	ldr	r3, [pc, #272]	; (8001134 <HAL_UART_RxCpltCallback+0x254>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d147      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 800102a:	4b43      	ldr	r3, [pc, #268]	; (8001138 <HAL_UART_RxCpltCallback+0x258>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d143      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 8001032:	4b42      	ldr	r3, [pc, #264]	; (800113c <HAL_UART_RxCpltCallback+0x25c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d13f      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 800103a:	4b41      	ldr	r3, [pc, #260]	; (8001140 <HAL_UART_RxCpltCallback+0x260>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d13b      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 8001042:	4b40      	ldr	r3, [pc, #256]	; (8001144 <HAL_UART_RxCpltCallback+0x264>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d137      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 800104a:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <HAL_UART_RxCpltCallback+0x268>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d133      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 8001052:	4b3e      	ldr	r3, [pc, #248]	; (800114c <HAL_UART_RxCpltCallback+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d12f      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 800105a:	4b3d      	ldr	r3, [pc, #244]	; (8001150 <HAL_UART_RxCpltCallback+0x270>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d12b      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 8001062:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <HAL_UART_RxCpltCallback+0x274>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d127      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 800106a:	4b3b      	ldr	r3, [pc, #236]	; (8001158 <HAL_UART_RxCpltCallback+0x278>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d123      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 8001072:	4b3a      	ldr	r3, [pc, #232]	; (800115c <HAL_UART_RxCpltCallback+0x27c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d11f      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 800107a:	4b39      	ldr	r3, [pc, #228]	; (8001160 <HAL_UART_RxCpltCallback+0x280>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d11b      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
	             			 pvl03on || pvl03off || pvlf01on || pvlf01off || pvl02on || pvl02off || pvp02on || pvp02off ){
 8001082:	4b38      	ldr	r3, [pc, #224]	; (8001164 <HAL_UART_RxCpltCallback+0x284>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d117      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 800108a:	4b37      	ldr	r3, [pc, #220]	; (8001168 <HAL_UART_RxCpltCallback+0x288>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d113      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 8001092:	4b36      	ldr	r3, [pc, #216]	; (800116c <HAL_UART_RxCpltCallback+0x28c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10f      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 800109a:	4b35      	ldr	r3, [pc, #212]	; (8001170 <HAL_UART_RxCpltCallback+0x290>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10b      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 80010a2:	4b34      	ldr	r3, [pc, #208]	; (8001174 <HAL_UART_RxCpltCallback+0x294>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d107      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 80010aa:	4b33      	ldr	r3, [pc, #204]	; (8001178 <HAL_UART_RxCpltCallback+0x298>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d103      	bne.n	80010ba <HAL_UART_RxCpltCallback+0x1da>
 80010b2:	4b32      	ldr	r3, [pc, #200]	; (800117c <HAL_UART_RxCpltCallback+0x29c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <HAL_UART_RxCpltCallback+0x1e0>

	                	 cmd_flag = TRUE;// so that the transition to a state occur once and not re transition continuosly
 80010ba:	4b31      	ldr	r3, [pc, #196]	; (8001180 <HAL_UART_RxCpltCallback+0x2a0>)
 80010bc:	2201      	movs	r2, #1
 80010be:	601a      	str	r2, [r3, #0]
	                 }
	              }//end of else for user command

	            }// end of else for receive complete

	        HAL_UART_Receive_IT(&huart2, Rx_data, 1);   //activate UART receive interrupt for ascii byte every time.
 80010c0:	2201      	movs	r2, #1
 80010c2:	4907      	ldr	r1, [pc, #28]	; (80010e0 <HAL_UART_RxCpltCallback+0x200>)
 80010c4:	482f      	ldr	r0, [pc, #188]	; (8001184 <HAL_UART_RxCpltCallback+0x2a4>)
 80010c6:	f004 ffe9 	bl	800609c <HAL_UART_Receive_IT>

	}// end of if  (huart->Instance == USART2)
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40004400 	.word	0x40004400
 80010d8:	2000024c 	.word	0x2000024c
 80010dc:	200014f4 	.word	0x200014f4
 80010e0:	20000350 	.word	0x20000350
 80010e4:	200015d0 	.word	0x200015d0
 80010e8:	20001378 	.word	0x20001378
 80010ec:	20000244 	.word	0x20000244
 80010f0:	20000188 	.word	0x20000188
 80010f4:	20000000 	.word	0x20000000
 80010f8:	2000034c 	.word	0x2000034c
 80010fc:	20000088 	.word	0x20000088
 8001100:	20000354 	.word	0x20000354
 8001104:	20000028 	.word	0x20000028
 8001108:	20001700 	.word	0x20001700
 800110c:	20000004 	.word	0x20000004
 8001110:	20000008 	.word	0x20000008
 8001114:	2000000c 	.word	0x2000000c
 8001118:	20000010 	.word	0x20000010
 800111c:	20000014 	.word	0x20000014
 8001120:	2000001c 	.word	0x2000001c
 8001124:	20000018 	.word	0x20000018
 8001128:	20000024 	.word	0x20000024
 800112c:	20000034 	.word	0x20000034
 8001130:	20000038 	.word	0x20000038
 8001134:	2000003c 	.word	0x2000003c
 8001138:	20000040 	.word	0x20000040
 800113c:	20000044 	.word	0x20000044
 8001140:	20000048 	.word	0x20000048
 8001144:	2000004c 	.word	0x2000004c
 8001148:	20000050 	.word	0x20000050
 800114c:	20000054 	.word	0x20000054
 8001150:	20000058 	.word	0x20000058
 8001154:	2000005c 	.word	0x2000005c
 8001158:	20000060 	.word	0x20000060
 800115c:	20000064 	.word	0x20000064
 8001160:	20000068 	.word	0x20000068
 8001164:	2000006c 	.word	0x2000006c
 8001168:	20000070 	.word	0x20000070
 800116c:	20000074 	.word	0x20000074
 8001170:	20000078 	.word	0x20000078
 8001174:	2000007c 	.word	0x2000007c
 8001178:	20000080 	.word	0x20000080
 800117c:	20000084 	.word	0x20000084
 8001180:	20001384 	.word	0x20001384
 8001184:	20001650 	.word	0x20001650

08001188 <hexadecimalTouint32>:

//Convert HEX to uint32_t
uint32_t hexadecimalTouint32(char* hexVal)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	uint32_t len = strlen(hexVal);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff f81d 	bl	80001d0 <strlen>
 8001196:	60b8      	str	r0, [r7, #8]

    // Initializing base value to 1 ( 16^0, 16^1, 16^2, etc )
     uint32_t base = 1;
 8001198:	2301      	movs	r3, #1
 800119a:	617b      	str	r3, [r7, #20]
     uint32_t val = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]

    // Extracting characters as digits from last character
    for (int i=len-1; i>=0; i--)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	e039      	b.n	800121c <hexadecimalTouint32+0x94>
    {
        // if ASCII char is between (0-9)
        if (hexVal[i]>='0' && hexVal[i]<='9')
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b2f      	cmp	r3, #47	; 0x2f
 80011b2:	d915      	bls.n	80011e0 <hexadecimalTouint32+0x58>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b39      	cmp	r3, #57	; 0x39
 80011be:	d80f      	bhi.n	80011e0 <hexadecimalTouint32+0x58>
        {
            val += (hexVal[i] - 48)*base;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	3b30      	subs	r3, #48	; 0x30
 80011ca:	461a      	mov	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fb03 f302 	mul.w	r3, r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4413      	add	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]

            // incrementing the base by power
            base = base * 16;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	e01a      	b.n	8001216 <hexadecimalTouint32+0x8e>
        }

        // if ASCII char is between(A-F)
        else if (hexVal[i]>='A' && hexVal[i]<='F')
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b40      	cmp	r3, #64	; 0x40
 80011ea:	d914      	bls.n	8001216 <hexadecimalTouint32+0x8e>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b46      	cmp	r3, #70	; 0x46
 80011f6:	d80e      	bhi.n	8001216 <hexadecimalTouint32+0x8e>
        {
            val += (hexVal[i] - 55)*base;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	3b37      	subs	r3, #55	; 0x37
 8001202:	461a      	mov	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fb03 f302 	mul.w	r3, r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4413      	add	r3, r2
 800120e:	613b      	str	r3, [r7, #16]

            // incrementing the base by power
            base = base*16;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	011b      	lsls	r3, r3, #4
 8001214:	617b      	str	r3, [r7, #20]
    for (int i=len-1; i>=0; i--)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3b01      	subs	r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	dac2      	bge.n	80011a8 <hexadecimalTouint32+0x20>
        }
    }
    return val;
 8001222:	693b      	ldr	r3, [r7, #16]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <ProcessCommands>:

//Function to process the command messages
uint32_t ProcessCommands(struct StateVars * ctrl)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]

	// LOX_PRE_FILL command
	if((ctrl->currentState == SAFETY) && command == lox_pre_fill )
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800123e:	2b00      	cmp	r3, #0
 8001240:	d111      	bne.n	8001266 <ProcessCommands+0x3a>
 8001242:	4b9d      	ldr	r3, [pc, #628]	; (80014b8 <ProcessCommands+0x28c>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b9d      	ldr	r3, [pc, #628]	; (80014bc <ProcessCommands+0x290>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	d10b      	bne.n	8001266 <ProcessCommands+0x3a>
	{
		ctrl ->currentState = LOX_PRE_FILL;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2202      	movs	r2, #2
 8001252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 8001256:	2301      	movs	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
		RxTxFlags &= !RX_DATA_READY;
 800125a:	4b99      	ldr	r3, [pc, #612]	; (80014c0 <ProcessCommands+0x294>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4b98      	ldr	r3, [pc, #608]	; (80014c0 <ProcessCommands+0x294>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	e3b7      	b.n	80019d6 <ProcessCommands+0x7aa>
	}
	//Reset AC command
	else if((command == resetac)&&(ctrl->currentState== LOX_PRE_FILL || \
 8001266:	4b94      	ldr	r3, [pc, #592]	; (80014b8 <ProcessCommands+0x28c>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b96      	ldr	r3, [pc, #600]	; (80014c4 <ProcessCommands+0x298>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d134      	bne.n	80012dc <ProcessCommands+0xb0>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001278:	2b02      	cmp	r3, #2
 800127a:	d02c      	beq.n	80012d6 <ProcessCommands+0xaa>
			  ctrl->currentState == LOX_CHILL  || \
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == resetac)&&(ctrl->currentState== LOX_PRE_FILL || \
 8001282:	2b04      	cmp	r3, #4
 8001284:	d027      	beq.n	80012d6 <ProcessCommands+0xaa>
			  ctrl->currentState == LOX_FILL   || ctrl->currentState == VALVE_CHECK    || \
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
			  ctrl->currentState == LOX_CHILL  || \
 800128c:	2b03      	cmp	r3, #3
 800128e:	d022      	beq.n	80012d6 <ProcessCommands+0xaa>
			  ctrl->currentState == LOX_FILL   || ctrl->currentState == VALVE_CHECK    || \
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001296:	2b01      	cmp	r3, #1
 8001298:	d01d      	beq.n	80012d6 <ProcessCommands+0xaa>
			  ctrl->currentState == SAFETY     || ctrl->currentState == PRESSURIZE     || \
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
			  ctrl->currentState == LOX_FILL   || ctrl->currentState == VALVE_CHECK    || \
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d018      	beq.n	80012d6 <ProcessCommands+0xaa>
			  ctrl->currentState == SAFETY     || ctrl->currentState == PRESSURIZE     || \
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012aa:	2b05      	cmp	r3, #5
 80012ac:	d013      	beq.n	80012d6 <ProcessCommands+0xaa>
			  ctrl->currentState == IGNITION   || ctrl->currentState == OXIDIZER_START || \
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
			  ctrl->currentState == SAFETY     || ctrl->currentState == PRESSURIZE     || \
 80012b4:	2b06      	cmp	r3, #6
 80012b6:	d00e      	beq.n	80012d6 <ProcessCommands+0xaa>
			  ctrl->currentState == IGNITION   || ctrl->currentState == OXIDIZER_START || \
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012be:	2b07      	cmp	r3, #7
 80012c0:	d009      	beq.n	80012d6 <ProcessCommands+0xaa>
			  ctrl->currentState == FIRING     || ctrl->currentState == PURGE)){
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
			  ctrl->currentState == IGNITION   || ctrl->currentState == OXIDIZER_START || \
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d004      	beq.n	80012d6 <ProcessCommands+0xaa>
			  ctrl->currentState == FIRING     || ctrl->currentState == PURGE)){
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012d2:	2b09      	cmp	r3, #9
 80012d4:	d102      	bne.n	80012dc <ProcessCommands+0xb0>

		HAL_NVIC_SystemReset();// trigger a reset using the HAL drivers
 80012d6:	f003 f8a4 	bl	8004422 <HAL_NVIC_SystemReset>
 80012da:	e37c      	b.n	80019d6 <ProcessCommands+0x7aa>
	}
    // TURN_OFF command
	else if((command == power_off) && (ctrl->currentState== VALVE_CHECK || \
 80012dc:	4b76      	ldr	r3, [pc, #472]	; (80014b8 <ProcessCommands+0x28c>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b79      	ldr	r3, [pc, #484]	; (80014c8 <ProcessCommands+0x29c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d115      	bne.n	8001314 <ProcessCommands+0xe8>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d004      	beq.n	80012fc <ProcessCommands+0xd0>
			 ctrl->currentState == SAFETY))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == power_off) && (ctrl->currentState== VALVE_CHECK || \
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10b      	bne.n	8001314 <ProcessCommands+0xe8>
	{
		ctrl ->currentState = TURN_OFF;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	220b      	movs	r2, #11
 8001300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 8001304:	2301      	movs	r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
		RxTxFlags &= !RX_DATA_READY;
 8001308:	4b6d      	ldr	r3, [pc, #436]	; (80014c0 <ProcessCommands+0x294>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4b6c      	ldr	r3, [pc, #432]	; (80014c0 <ProcessCommands+0x294>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	e360      	b.n	80019d6 <ProcessCommands+0x7aa>
	}
    // shutdown command
	else if((command == shutdown) && ( ctrl->currentState== LOX_PRE_FILL || \
 8001314:	4b68      	ldr	r3, [pc, #416]	; (80014b8 <ProcessCommands+0x28c>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b6c      	ldr	r3, [pc, #432]	; (80014cc <ProcessCommands+0x2a0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d143      	bne.n	80013a8 <ProcessCommands+0x17c>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001326:	2b02      	cmp	r3, #2
 8001328:	d02c      	beq.n	8001384 <ProcessCommands+0x158>
			  ctrl->currentState == LOX_CHILL  || \
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == shutdown) && ( ctrl->currentState== LOX_PRE_FILL || \
 8001330:	2b04      	cmp	r3, #4
 8001332:	d027      	beq.n	8001384 <ProcessCommands+0x158>
			  ctrl->currentState == LOX_FILL   || ctrl->currentState == VALVE_CHECK    || \
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
			  ctrl->currentState == LOX_CHILL  || \
 800133a:	2b03      	cmp	r3, #3
 800133c:	d022      	beq.n	8001384 <ProcessCommands+0x158>
			  ctrl->currentState == LOX_FILL   || ctrl->currentState == VALVE_CHECK    || \
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001344:	2b01      	cmp	r3, #1
 8001346:	d01d      	beq.n	8001384 <ProcessCommands+0x158>
			  ctrl->currentState == SAFETY     || ctrl->currentState == PRESSURIZE     || \
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
			  ctrl->currentState == LOX_FILL   || ctrl->currentState == VALVE_CHECK    || \
 800134e:	2b00      	cmp	r3, #0
 8001350:	d018      	beq.n	8001384 <ProcessCommands+0x158>
			  ctrl->currentState == SAFETY     || ctrl->currentState == PRESSURIZE     || \
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001358:	2b05      	cmp	r3, #5
 800135a:	d013      	beq.n	8001384 <ProcessCommands+0x158>
			  ctrl->currentState == IGNITION   || ctrl->currentState == OXIDIZER_START || \
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
			  ctrl->currentState == SAFETY     || ctrl->currentState == PRESSURIZE     || \
 8001362:	2b06      	cmp	r3, #6
 8001364:	d00e      	beq.n	8001384 <ProcessCommands+0x158>
			  ctrl->currentState == IGNITION   || ctrl->currentState == OXIDIZER_START || \
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800136c:	2b07      	cmp	r3, #7
 800136e:	d009      	beq.n	8001384 <ProcessCommands+0x158>
			  ctrl->currentState == FIRING     || ctrl->currentState == PURGE) )
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
			  ctrl->currentState == IGNITION   || ctrl->currentState == OXIDIZER_START || \
 8001376:	2b08      	cmp	r3, #8
 8001378:	d004      	beq.n	8001384 <ProcessCommands+0x158>
			  ctrl->currentState == FIRING     || ctrl->currentState == PURGE) )
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001380:	2b09      	cmp	r3, #9
 8001382:	d111      	bne.n	80013a8 <ProcessCommands+0x17c>
	{
		ctrl->currentState = SHUTDOWN;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	220a      	movs	r2, #10
 8001388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 800138c:	2301      	movs	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
		one_time_flag = TRUE;
 8001390:	4b4f      	ldr	r3, [pc, #316]	; (80014d0 <ProcessCommands+0x2a4>)
 8001392:	2201      	movs	r2, #1
 8001394:	601a      	str	r2, [r3, #0]
		time_1 = TRUE;
 8001396:	4b4f      	ldr	r3, [pc, #316]	; (80014d4 <ProcessCommands+0x2a8>)
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 800139c:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <ProcessCommands+0x294>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4b47      	ldr	r3, [pc, #284]	; (80014c0 <ProcessCommands+0x294>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	e316      	b.n	80019d6 <ProcessCommands+0x7aa>
	}

	// LOX_FILL command
	else if(( ctrl->currentState == LOX_PRE_FILL) && (command == lox_fill))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d111      	bne.n	80013d6 <ProcessCommands+0x1aa>
 80013b2:	4b41      	ldr	r3, [pc, #260]	; (80014b8 <ProcessCommands+0x28c>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b48      	ldr	r3, [pc, #288]	; (80014d8 <ProcessCommands+0x2ac>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d10b      	bne.n	80013d6 <ProcessCommands+0x1aa>
	{
		ctrl->currentState = LOX_FILL;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2203      	movs	r2, #3
 80013c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 80013c6:	2301      	movs	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 80013ca:	4b3d      	ldr	r3, [pc, #244]	; (80014c0 <ProcessCommands+0x294>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4b3c      	ldr	r3, [pc, #240]	; (80014c0 <ProcessCommands+0x294>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	e2ff      	b.n	80019d6 <ProcessCommands+0x7aa>
	}
    // LOX_CHILL command
	else if((ctrl->currentState == LOX_FILL) && (command == lox_chill))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d111      	bne.n	8001404 <ProcessCommands+0x1d8>
 80013e0:	4b35      	ldr	r3, [pc, #212]	; (80014b8 <ProcessCommands+0x28c>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b3d      	ldr	r3, [pc, #244]	; (80014dc <ProcessCommands+0x2b0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d10b      	bne.n	8001404 <ProcessCommands+0x1d8>
	{
		ctrl->currentState = LOX_CHILL;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2204      	movs	r2, #4
 80013f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 80013f4:	2301      	movs	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 80013f8:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <ProcessCommands+0x294>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4b30      	ldr	r3, [pc, #192]	; (80014c0 <ProcessCommands+0x294>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	e2e8      	b.n	80019d6 <ProcessCommands+0x7aa>
	}
    // SAfety command
	//|| ctrl->currentState == SAFETY
	else if(( ctrl->currentState == LOX_CHILL || ctrl->currentState == VALVE_CHECK || ctrl->currentState == LOX_PRE_FILL || \
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800140a:	2b04      	cmp	r3, #4
 800140c:	d013      	beq.n	8001436 <ProcessCommands+0x20a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001414:	2b01      	cmp	r3, #1
 8001416:	d00e      	beq.n	8001436 <ProcessCommands+0x20a>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800141e:	2b02      	cmp	r3, #2
 8001420:	d009      	beq.n	8001436 <ProcessCommands+0x20a>
			  ctrl->currentState == LOX_FILL || ctrl->currentState == PRESSURIZE  ) && (command == safety))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if(( ctrl->currentState == LOX_CHILL || ctrl->currentState == VALVE_CHECK || ctrl->currentState == LOX_PRE_FILL || \
 8001428:	2b03      	cmp	r3, #3
 800142a:	d004      	beq.n	8001436 <ProcessCommands+0x20a>
			  ctrl->currentState == LOX_FILL || ctrl->currentState == PRESSURIZE  ) && (command == safety))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001432:	2b05      	cmp	r3, #5
 8001434:	d111      	bne.n	800145a <ProcessCommands+0x22e>
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <ProcessCommands+0x28c>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <ProcessCommands+0x2b4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d10b      	bne.n	800145a <ProcessCommands+0x22e>
	{
		ctrl->currentState = SAFETY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 800144a:	2301      	movs	r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <ProcessCommands+0x294>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <ProcessCommands+0x294>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e2bd      	b.n	80019d6 <ProcessCommands+0x7aa>
	}
    // VALVE_CHECK command
	else if(( ctrl->currentState == SAFETY ) && (command == valve_check))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001460:	2b00      	cmp	r3, #0
 8001462:	d111      	bne.n	8001488 <ProcessCommands+0x25c>
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <ProcessCommands+0x28c>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <ProcessCommands+0x2b8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d10b      	bne.n	8001488 <ProcessCommands+0x25c>
	{
		ctrl->currentState = VALVE_CHECK;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 8001478:	2301      	movs	r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 800147c:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <ProcessCommands+0x294>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <ProcessCommands+0x294>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	e2a6      	b.n	80019d6 <ProcessCommands+0x7aa>
	}

    // PRESSURIZE command
	else if((ctrl->currentState == SAFETY) && (command == pressurizing))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800148e:	2b00      	cmp	r3, #0
 8001490:	d12c      	bne.n	80014ec <ProcessCommands+0x2c0>
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <ProcessCommands+0x28c>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <ProcessCommands+0x2bc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d126      	bne.n	80014ec <ProcessCommands+0x2c0>
	{
		ctrl->currentState = PRESSURIZE;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2205      	movs	r2, #5
 80014a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 80014a6:	2301      	movs	r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <ProcessCommands+0x294>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <ProcessCommands+0x294>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	e28f      	b.n	80019d6 <ProcessCommands+0x7aa>
 80014b6:	bf00      	nop
 80014b8:	20000354 	.word	0x20000354
 80014bc:	20000018 	.word	0x20000018
 80014c0:	20000244 	.word	0x20000244
 80014c4:	20000030 	.word	0x20000030
 80014c8:	20000004 	.word	0x20000004
 80014cc:	20000008 	.word	0x20000008
 80014d0:	2000164c 	.word	0x2000164c
 80014d4:	20000348 	.word	0x20000348
 80014d8:	20000010 	.word	0x20000010
 80014dc:	20000014 	.word	0x20000014
 80014e0:	20000020 	.word	0x20000020
 80014e4:	2000000c 	.word	0x2000000c
 80014e8:	2000001c 	.word	0x2000001c
	}
    // IGNITION command
	else if((ctrl->currentState == PRESSURIZE) && (command == ignition))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014f2:	2b05      	cmp	r3, #5
 80014f4:	d111      	bne.n	800151a <ProcessCommands+0x2ee>
 80014f6:	4ba0      	ldr	r3, [pc, #640]	; (8001778 <ProcessCommands+0x54c>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4ba0      	ldr	r3, [pc, #640]	; (800177c <ProcessCommands+0x550>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d10b      	bne.n	800151a <ProcessCommands+0x2ee>
	{
		ctrl->currentState = IGNITION; //START of the automatic sequence
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2206      	movs	r2, #6
 8001506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		success = TRUE;
 800150a:	2301      	movs	r3, #1
 800150c:	60fb      	str	r3, [r7, #12]
		// Clear data read flag
		RxTxFlags &= !RX_DATA_READY;
 800150e:	4b9c      	ldr	r3, [pc, #624]	; (8001780 <ProcessCommands+0x554>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4b9b      	ldr	r3, [pc, #620]	; (8001780 <ProcessCommands+0x554>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	e25d      	b.n	80019d6 <ProcessCommands+0x7aa>
	}


	//State status
	else if((command ==state_status) && (
 800151a:	4b97      	ldr	r3, [pc, #604]	; (8001778 <ProcessCommands+0x54c>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b99      	ldr	r3, [pc, #612]	; (8001784 <ProcessCommands+0x558>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d12d      	bne.n	8001582 <ProcessCommands+0x356>
				  ctrl->currentState == LOX_PRE_FILL || ctrl->currentState == LOX_CHILL    || \
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command ==state_status) && (
 800152c:	2b02      	cmp	r3, #2
 800152e:	d01d      	beq.n	800156c <ProcessCommands+0x340>
				  ctrl->currentState == LOX_PRE_FILL || ctrl->currentState == LOX_CHILL    || \
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001536:	2b04      	cmp	r3, #4
 8001538:	d018      	beq.n	800156c <ProcessCommands+0x340>
				  ctrl->currentState == LOX_FILL 	 || ctrl->currentState == VALVE_CHECK  || \
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == LOX_PRE_FILL || ctrl->currentState == LOX_CHILL    || \
 8001540:	2b03      	cmp	r3, #3
 8001542:	d013      	beq.n	800156c <ProcessCommands+0x340>
				  ctrl->currentState == LOX_FILL 	 || ctrl->currentState == VALVE_CHECK  || \
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800154a:	2b01      	cmp	r3, #1
 800154c:	d00e      	beq.n	800156c <ProcessCommands+0x340>
				  ctrl->currentState == PRESSURIZE   || ctrl->currentState == TURN_OFF     || \
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == LOX_FILL 	 || ctrl->currentState == VALVE_CHECK  || \
 8001554:	2b05      	cmp	r3, #5
 8001556:	d009      	beq.n	800156c <ProcessCommands+0x340>
				  ctrl->currentState == PRESSURIZE   || ctrl->currentState == TURN_OFF     || \
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800155e:	2b0b      	cmp	r3, #11
 8001560:	d004      	beq.n	800156c <ProcessCommands+0x340>
				  ctrl->currentState == SAFETY ))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				  ctrl->currentState == PRESSURIZE   || ctrl->currentState == TURN_OFF     || \
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10a      	bne.n	8001582 <ProcessCommands+0x356>
		{

		    StateStatus(ctrl);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f001 fa75 	bl	8002a5c <StateStatus>
			success = TRUE;
 8001572:	2301      	movs	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
			// Clear data read flag
			RxTxFlags &= !RX_DATA_READY;
 8001576:	4b82      	ldr	r3, [pc, #520]	; (8001780 <ProcessCommands+0x554>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4b81      	ldr	r3, [pc, #516]	; (8001780 <ProcessCommands+0x554>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	e229      	b.n	80019d6 <ProcessCommands+0x7aa>
		}
	// Handling invalid transitions
	else if((command == lox_fill) && (
 8001582:	4b7d      	ldr	r3, [pc, #500]	; (8001778 <ProcessCommands+0x54c>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b80      	ldr	r3, [pc, #512]	; (8001788 <ProcessCommands+0x55c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d12b      	bne.n	80015e6 <ProcessCommands+0x3ba>
					  ctrl->currentState == SAFETY      || ctrl->currentState == LOX_CHILL   || \
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == lox_fill) && (
 8001594:	2b00      	cmp	r3, #0
 8001596:	d013      	beq.n	80015c0 <ProcessCommands+0x394>
					  ctrl->currentState == SAFETY      || ctrl->currentState == LOX_CHILL   || \
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d00e      	beq.n	80015c0 <ProcessCommands+0x394>
					  ctrl->currentState == VALVE_CHECK || ctrl->currentState == PRESSURIZE  ||  \
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == SAFETY      || ctrl->currentState == LOX_CHILL   || \
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d009      	beq.n	80015c0 <ProcessCommands+0x394>
					  ctrl->currentState == VALVE_CHECK || ctrl->currentState == PRESSURIZE  ||  \
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015b2:	2b05      	cmp	r3, #5
 80015b4:	d004      	beq.n	80015c0 <ProcessCommands+0x394>
					  ctrl->currentState == TURN_OFF)){
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
					  ctrl->currentState == VALVE_CHECK || ctrl->currentState == PRESSURIZE  ||  \
 80015bc:	2b0b      	cmp	r3, #11
 80015be:	d112      	bne.n	80015e6 <ProcessCommands+0x3ba>

					if (cmd_flag)
 80015c0:	4b72      	ldr	r3, [pc, #456]	; (800178c <ProcessCommands+0x560>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <ProcessCommands+0x3aa>
		 	 	 	 	 {
		 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 80015c8:	4971      	ldr	r1, [pc, #452]	; (8001790 <ProcessCommands+0x564>)
 80015ca:	4872      	ldr	r0, [pc, #456]	; (8001794 <ProcessCommands+0x568>)
 80015cc:	f7ff fc44 	bl	8000e58 <UART_SendMessage>
		 	 	 		 	cmd_flag = FALSE;
 80015d0:	4b6e      	ldr	r3, [pc, #440]	; (800178c <ProcessCommands+0x560>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
		 	 	 	 	 }
				success = TRUE;
 80015d6:	2301      	movs	r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
				// Clear data read flag
				RxTxFlags &= !RX_DATA_READY;
 80015da:	4b69      	ldr	r3, [pc, #420]	; (8001780 <ProcessCommands+0x554>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4b68      	ldr	r3, [pc, #416]	; (8001780 <ProcessCommands+0x554>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	e1f7      	b.n	80019d6 <ProcessCommands+0x7aa>
			}
	else if((command == lox_chill) && (
 80015e6:	4b64      	ldr	r3, [pc, #400]	; (8001778 <ProcessCommands+0x54c>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4b6b      	ldr	r3, [pc, #428]	; (8001798 <ProcessCommands+0x56c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d12b      	bne.n	800164a <ProcessCommands+0x41e>
						  ctrl->currentState == SAFETY         || \
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == lox_chill) && (
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d013      	beq.n	8001624 <ProcessCommands+0x3f8>
						  ctrl->currentState == LOX_PRE_FILL   || \
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == SAFETY         || \
 8001602:	2b02      	cmp	r3, #2
 8001604:	d00e      	beq.n	8001624 <ProcessCommands+0x3f8>
						  ctrl->currentState == VALVE_CHECK    || \
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_PRE_FILL   || \
 800160c:	2b01      	cmp	r3, #1
 800160e:	d009      	beq.n	8001624 <ProcessCommands+0x3f8>
						  ctrl->currentState == PRESSURIZE     || \
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == VALVE_CHECK    || \
 8001616:	2b05      	cmp	r3, #5
 8001618:	d004      	beq.n	8001624 <ProcessCommands+0x3f8>
						  ctrl->currentState == TURN_OFF ))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == PRESSURIZE     || \
 8001620:	2b0b      	cmp	r3, #11
 8001622:	d112      	bne.n	800164a <ProcessCommands+0x41e>
				{

							if (cmd_flag)
 8001624:	4b59      	ldr	r3, [pc, #356]	; (800178c <ProcessCommands+0x560>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d006      	beq.n	800163a <ProcessCommands+0x40e>
				 	 	 	 	 {
				 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 800162c:	4958      	ldr	r1, [pc, #352]	; (8001790 <ProcessCommands+0x564>)
 800162e:	4859      	ldr	r0, [pc, #356]	; (8001794 <ProcessCommands+0x568>)
 8001630:	f7ff fc12 	bl	8000e58 <UART_SendMessage>
				 	 	 		 	cmd_flag = FALSE;
 8001634:	4b55      	ldr	r3, [pc, #340]	; (800178c <ProcessCommands+0x560>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
				 	 	 	 	 }
					success = TRUE;
 800163a:	2301      	movs	r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
					// Clear data read flag
					RxTxFlags &= !RX_DATA_READY;
 800163e:	4b50      	ldr	r3, [pc, #320]	; (8001780 <ProcessCommands+0x554>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4b4f      	ldr	r3, [pc, #316]	; (8001780 <ProcessCommands+0x554>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e1c5      	b.n	80019d6 <ProcessCommands+0x7aa>
					success = TRUE;
					// Clear data read flag
					RxTxFlags &= !RX_DATA_READY;
				}
				*/
	else if((command == valve_check) && (
 800164a:	4b4b      	ldr	r3, [pc, #300]	; (8001778 <ProcessCommands+0x54c>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	4b53      	ldr	r3, [pc, #332]	; (800179c <ProcessCommands+0x570>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d12b      	bne.n	80016ae <ProcessCommands+0x482>
						  ctrl->currentState == LOX_PRE_FILL || \
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == valve_check) && (
 800165c:	2b02      	cmp	r3, #2
 800165e:	d013      	beq.n	8001688 <ProcessCommands+0x45c>
						  ctrl->currentState == LOX_CHILL	 || \
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_PRE_FILL || \
 8001666:	2b04      	cmp	r3, #4
 8001668:	d00e      	beq.n	8001688 <ProcessCommands+0x45c>
						  ctrl->currentState == LOX_FILL     || \
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_CHILL	 || \
 8001670:	2b03      	cmp	r3, #3
 8001672:	d009      	beq.n	8001688 <ProcessCommands+0x45c>
						  ctrl->currentState == PRESSURIZE   || \
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == LOX_FILL     || \
 800167a:	2b05      	cmp	r3, #5
 800167c:	d004      	beq.n	8001688 <ProcessCommands+0x45c>
						  ctrl->currentState == TURN_OFF))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
						  ctrl->currentState == PRESSURIZE   || \
 8001684:	2b0b      	cmp	r3, #11
 8001686:	d112      	bne.n	80016ae <ProcessCommands+0x482>
				{
						if (cmd_flag)
 8001688:	4b40      	ldr	r3, [pc, #256]	; (800178c <ProcessCommands+0x560>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <ProcessCommands+0x472>
				 	 	 	 	 {
				 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 8001690:	493f      	ldr	r1, [pc, #252]	; (8001790 <ProcessCommands+0x564>)
 8001692:	4840      	ldr	r0, [pc, #256]	; (8001794 <ProcessCommands+0x568>)
 8001694:	f7ff fbe0 	bl	8000e58 <UART_SendMessage>
				 	 	 		 	cmd_flag = FALSE;
 8001698:	4b3c      	ldr	r3, [pc, #240]	; (800178c <ProcessCommands+0x560>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
				 	 	 	 	 }
					success = TRUE;
 800169e:	2301      	movs	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
					// Clear data read flag
					RxTxFlags &= !RX_DATA_READY;
 80016a2:	4b37      	ldr	r3, [pc, #220]	; (8001780 <ProcessCommands+0x554>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4b36      	ldr	r3, [pc, #216]	; (8001780 <ProcessCommands+0x554>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	e193      	b.n	80019d6 <ProcessCommands+0x7aa>

				}
	else if((command == lox_pre_fill) && (
 80016ae:	4b32      	ldr	r3, [pc, #200]	; (8001778 <ProcessCommands+0x54c>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <ProcessCommands+0x574>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d12b      	bne.n	8001712 <ProcessCommands+0x4e6>
							  ctrl->currentState == LOX_CHILL   || \
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == lox_pre_fill) && (
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d013      	beq.n	80016ec <ProcessCommands+0x4c0>
							  /*ctrl->currentState == SAFETY      || \*/
							  ctrl->currentState == LOX_FILL	|| \
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == LOX_CHILL   || \
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d00e      	beq.n	80016ec <ProcessCommands+0x4c0>
							  ctrl->currentState == VALVE_CHECK || \
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == LOX_FILL	|| \
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d009      	beq.n	80016ec <ProcessCommands+0x4c0>
							  ctrl->currentState == PRESSURIZE  || \
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == VALVE_CHECK || \
 80016de:	2b05      	cmp	r3, #5
 80016e0:	d004      	beq.n	80016ec <ProcessCommands+0x4c0>
							  ctrl->currentState == TURN_OFF ))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
							  ctrl->currentState == PRESSURIZE  || \
 80016e8:	2b0b      	cmp	r3, #11
 80016ea:	d112      	bne.n	8001712 <ProcessCommands+0x4e6>
					{
							if (cmd_flag)
 80016ec:	4b27      	ldr	r3, [pc, #156]	; (800178c <ProcessCommands+0x560>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d006      	beq.n	8001702 <ProcessCommands+0x4d6>
					 	 	 	 	 {
					 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 80016f4:	4926      	ldr	r1, [pc, #152]	; (8001790 <ProcessCommands+0x564>)
 80016f6:	4827      	ldr	r0, [pc, #156]	; (8001794 <ProcessCommands+0x568>)
 80016f8:	f7ff fbae 	bl	8000e58 <UART_SendMessage>
					 	 	 		 	cmd_flag = FALSE;
 80016fc:	4b23      	ldr	r3, [pc, #140]	; (800178c <ProcessCommands+0x560>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
					 	 	 	 	 }
						success = TRUE;
 8001702:	2301      	movs	r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
						// Clear data read flag
						RxTxFlags &= !RX_DATA_READY;
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <ProcessCommands+0x554>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <ProcessCommands+0x554>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e161      	b.n	80019d6 <ProcessCommands+0x7aa>
					}
	else if((command == pressurizing) && (
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <ProcessCommands+0x54c>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <ProcessCommands+0x578>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d144      	bne.n	80017a8 <ProcessCommands+0x57c>
								  ctrl->currentState == LOX_PRE_FILL || \
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	else if((command == pressurizing) && (
 8001724:	2b02      	cmp	r3, #2
 8001726:	d013      	beq.n	8001750 <ProcessCommands+0x524>
								  ctrl->currentState == LOX_CHILL    || \
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == LOX_PRE_FILL || \
 800172e:	2b04      	cmp	r3, #4
 8001730:	d00e      	beq.n	8001750 <ProcessCommands+0x524>
								  ctrl->currentState == LOX_FILL	 || \
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == LOX_CHILL    || \
 8001738:	2b03      	cmp	r3, #3
 800173a:	d009      	beq.n	8001750 <ProcessCommands+0x524>
								  ctrl->currentState == VALVE_CHECK  || \
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == LOX_FILL	 || \
 8001742:	2b01      	cmp	r3, #1
 8001744:	d004      	beq.n	8001750 <ProcessCommands+0x524>
								  ctrl->currentState == TURN_OFF ))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
								  ctrl->currentState == VALVE_CHECK  || \
 800174c:	2b0b      	cmp	r3, #11
 800174e:	d12b      	bne.n	80017a8 <ProcessCommands+0x57c>
						{
								if (cmd_flag)
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <ProcessCommands+0x560>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <ProcessCommands+0x53a>
						 	 	 	 	 {
						 	 	 		 	 UART_SendMessage(&huart2, "Unauthorized transition, use the help command for valid transitions...\n");
 8001758:	490d      	ldr	r1, [pc, #52]	; (8001790 <ProcessCommands+0x564>)
 800175a:	480e      	ldr	r0, [pc, #56]	; (8001794 <ProcessCommands+0x568>)
 800175c:	f7ff fb7c 	bl	8000e58 <UART_SendMessage>
						 	 	 		 	cmd_flag = FALSE;
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <ProcessCommands+0x560>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
						 	 	 	 	 }
							success = TRUE;
 8001766:	2301      	movs	r3, #1
 8001768:	60fb      	str	r3, [r7, #12]
							// Clear data read flag
							RxTxFlags &= !RX_DATA_READY;
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <ProcessCommands+0x554>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <ProcessCommands+0x554>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	e12f      	b.n	80019d6 <ProcessCommands+0x7aa>
 8001776:	bf00      	nop
 8001778:	20000354 	.word	0x20000354
 800177c:	20000024 	.word	0x20000024
 8001780:	20000244 	.word	0x20000244
 8001784:	20000028 	.word	0x20000028
 8001788:	20000010 	.word	0x20000010
 800178c:	20001384 	.word	0x20001384
 8001790:	08007778 	.word	0x08007778
 8001794:	20001650 	.word	0x20001650
 8001798:	20000014 	.word	0x20000014
 800179c:	2000000c 	.word	0x2000000c
 80017a0:	20000018 	.word	0x20000018
 80017a4:	2000001c 	.word	0x2000001c
						 	 	 		 	cmd_flag = FALSE;
						 	 	 	 	 }
	}*/

	//Handle the case of an unknown command
	else if (!(command == power_off || shutdown  || valve_check || lox_fill || lox_chill || pressurizing || lox_pre_fill || ignition \
 80017a8:	4b8d      	ldr	r3, [pc, #564]	; (80019e0 <ProcessCommands+0x7b4>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b8d      	ldr	r3, [pc, #564]	; (80019e4 <ProcessCommands+0x7b8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d07c      	beq.n	80018ae <ProcessCommands+0x682>
 80017b4:	4b8c      	ldr	r3, [pc, #560]	; (80019e8 <ProcessCommands+0x7bc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d178      	bne.n	80018ae <ProcessCommands+0x682>
 80017bc:	4b8b      	ldr	r3, [pc, #556]	; (80019ec <ProcessCommands+0x7c0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d174      	bne.n	80018ae <ProcessCommands+0x682>
 80017c4:	4b8a      	ldr	r3, [pc, #552]	; (80019f0 <ProcessCommands+0x7c4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d170      	bne.n	80018ae <ProcessCommands+0x682>
 80017cc:	4b89      	ldr	r3, [pc, #548]	; (80019f4 <ProcessCommands+0x7c8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d16c      	bne.n	80018ae <ProcessCommands+0x682>
 80017d4:	4b88      	ldr	r3, [pc, #544]	; (80019f8 <ProcessCommands+0x7cc>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d168      	bne.n	80018ae <ProcessCommands+0x682>
 80017dc:	4b87      	ldr	r3, [pc, #540]	; (80019fc <ProcessCommands+0x7d0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d164      	bne.n	80018ae <ProcessCommands+0x682>
 80017e4:	4b86      	ldr	r3, [pc, #536]	; (8001a00 <ProcessCommands+0x7d4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d160      	bne.n	80018ae <ProcessCommands+0x682>
			|| cycle_valves || IGON || IGOFF || pvf01on     || pvf01off || pvl01on   || pvl01off     || pvp01on      || pvp01off || sovf01on || sovf01off || pvf02on || pvf02off ||\
 80017ec:	4b85      	ldr	r3, [pc, #532]	; (8001a04 <ProcessCommands+0x7d8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d15c      	bne.n	80018ae <ProcessCommands+0x682>
 80017f4:	4b84      	ldr	r3, [pc, #528]	; (8001a08 <ProcessCommands+0x7dc>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d158      	bne.n	80018ae <ProcessCommands+0x682>
 80017fc:	4b83      	ldr	r3, [pc, #524]	; (8001a0c <ProcessCommands+0x7e0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d154      	bne.n	80018ae <ProcessCommands+0x682>
 8001804:	4b82      	ldr	r3, [pc, #520]	; (8001a10 <ProcessCommands+0x7e4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d150      	bne.n	80018ae <ProcessCommands+0x682>
 800180c:	4b81      	ldr	r3, [pc, #516]	; (8001a14 <ProcessCommands+0x7e8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d14c      	bne.n	80018ae <ProcessCommands+0x682>
 8001814:	4b80      	ldr	r3, [pc, #512]	; (8001a18 <ProcessCommands+0x7ec>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d148      	bne.n	80018ae <ProcessCommands+0x682>
 800181c:	4b7f      	ldr	r3, [pc, #508]	; (8001a1c <ProcessCommands+0x7f0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d144      	bne.n	80018ae <ProcessCommands+0x682>
 8001824:	4b7e      	ldr	r3, [pc, #504]	; (8001a20 <ProcessCommands+0x7f4>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d140      	bne.n	80018ae <ProcessCommands+0x682>
 800182c:	4b7d      	ldr	r3, [pc, #500]	; (8001a24 <ProcessCommands+0x7f8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d13c      	bne.n	80018ae <ProcessCommands+0x682>
 8001834:	4b7c      	ldr	r3, [pc, #496]	; (8001a28 <ProcessCommands+0x7fc>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d138      	bne.n	80018ae <ProcessCommands+0x682>
 800183c:	4b7b      	ldr	r3, [pc, #492]	; (8001a2c <ProcessCommands+0x800>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d134      	bne.n	80018ae <ProcessCommands+0x682>
 8001844:	4b7a      	ldr	r3, [pc, #488]	; (8001a30 <ProcessCommands+0x804>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d130      	bne.n	80018ae <ProcessCommands+0x682>
 800184c:	4b79      	ldr	r3, [pc, #484]	; (8001a34 <ProcessCommands+0x808>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d12c      	bne.n	80018ae <ProcessCommands+0x682>
 8001854:	4b78      	ldr	r3, [pc, #480]	; (8001a38 <ProcessCommands+0x80c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d128      	bne.n	80018ae <ProcessCommands+0x682>
			 pvl03on || pvl03off || pvlf01on || pvlf01off   || pvl02on  || pvl02off  || pvp02on      || pvp02off )){
 800185c:	4b77      	ldr	r3, [pc, #476]	; (8001a3c <ProcessCommands+0x810>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d124      	bne.n	80018ae <ProcessCommands+0x682>
 8001864:	4b76      	ldr	r3, [pc, #472]	; (8001a40 <ProcessCommands+0x814>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d120      	bne.n	80018ae <ProcessCommands+0x682>
 800186c:	4b75      	ldr	r3, [pc, #468]	; (8001a44 <ProcessCommands+0x818>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d11c      	bne.n	80018ae <ProcessCommands+0x682>
 8001874:	4b74      	ldr	r3, [pc, #464]	; (8001a48 <ProcessCommands+0x81c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d118      	bne.n	80018ae <ProcessCommands+0x682>
 800187c:	4b73      	ldr	r3, [pc, #460]	; (8001a4c <ProcessCommands+0x820>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d114      	bne.n	80018ae <ProcessCommands+0x682>
 8001884:	4b72      	ldr	r3, [pc, #456]	; (8001a50 <ProcessCommands+0x824>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d110      	bne.n	80018ae <ProcessCommands+0x682>
 800188c:	4b71      	ldr	r3, [pc, #452]	; (8001a54 <ProcessCommands+0x828>)
 800188e:	681b      	ldr	r3, [r3, #0]
	else if (!(command == power_off || shutdown  || valve_check || lox_fill || lox_chill || pressurizing || lox_pre_fill || ignition \
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10c      	bne.n	80018ae <ProcessCommands+0x682>

		if (inv_flag){
 8001894:	4b70      	ldr	r3, [pc, #448]	; (8001a58 <ProcessCommands+0x82c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 809c 	beq.w	80019d6 <ProcessCommands+0x7aa>
		UART_SendMessage(&huart2, " Invalid command !...\n");
 800189e:	496f      	ldr	r1, [pc, #444]	; (8001a5c <ProcessCommands+0x830>)
 80018a0:	486f      	ldr	r0, [pc, #444]	; (8001a60 <ProcessCommands+0x834>)
 80018a2:	f7ff fad9 	bl	8000e58 <UART_SendMessage>
		 inv_flag = FALSE;
 80018a6:	4b6c      	ldr	r3, [pc, #432]	; (8001a58 <ProcessCommands+0x82c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
		if (inv_flag){
 80018ac:	e093      	b.n	80019d6 <ProcessCommands+0x7aa>
		}

	}

	//Handle the case of commands outside valve check state
	else if (command == valve_status || command == cycle_valves || command == IGON ||command ==IGOFF \
 80018ae:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <ProcessCommands+0x7b4>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4b6c      	ldr	r3, [pc, #432]	; (8001a64 <ProcessCommands+0x838>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d07d      	beq.n	80019b6 <ProcessCommands+0x78a>
 80018ba:	4b49      	ldr	r3, [pc, #292]	; (80019e0 <ProcessCommands+0x7b4>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	4b51      	ldr	r3, [pc, #324]	; (8001a04 <ProcessCommands+0x7d8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d077      	beq.n	80019b6 <ProcessCommands+0x78a>
 80018c6:	4b46      	ldr	r3, [pc, #280]	; (80019e0 <ProcessCommands+0x7b4>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4b4f      	ldr	r3, [pc, #316]	; (8001a08 <ProcessCommands+0x7dc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d071      	beq.n	80019b6 <ProcessCommands+0x78a>
 80018d2:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <ProcessCommands+0x7b4>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4b4d      	ldr	r3, [pc, #308]	; (8001a0c <ProcessCommands+0x7e0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d06b      	beq.n	80019b6 <ProcessCommands+0x78a>
			||command == pvf01on ||command == pvf01off ||command == pvl01on ||command == pvl01off || command ==pvp01on \
 80018de:	4b40      	ldr	r3, [pc, #256]	; (80019e0 <ProcessCommands+0x7b4>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4b4b      	ldr	r3, [pc, #300]	; (8001a10 <ProcessCommands+0x7e4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d065      	beq.n	80019b6 <ProcessCommands+0x78a>
 80018ea:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <ProcessCommands+0x7b4>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4b49      	ldr	r3, [pc, #292]	; (8001a14 <ProcessCommands+0x7e8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d05f      	beq.n	80019b6 <ProcessCommands+0x78a>
 80018f6:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <ProcessCommands+0x7b4>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <ProcessCommands+0x7ec>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d059      	beq.n	80019b6 <ProcessCommands+0x78a>
 8001902:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <ProcessCommands+0x7b4>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	4b45      	ldr	r3, [pc, #276]	; (8001a1c <ProcessCommands+0x7f0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d053      	beq.n	80019b6 <ProcessCommands+0x78a>
 800190e:	4b34      	ldr	r3, [pc, #208]	; (80019e0 <ProcessCommands+0x7b4>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	4b43      	ldr	r3, [pc, #268]	; (8001a20 <ProcessCommands+0x7f4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d04d      	beq.n	80019b6 <ProcessCommands+0x78a>
			||command ==pvp01off ||command == sovf01on ||command == sovf01off ||command == pvf02on ||command ==pvf02off \
 800191a:	4b31      	ldr	r3, [pc, #196]	; (80019e0 <ProcessCommands+0x7b4>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <ProcessCommands+0x7f8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d047      	beq.n	80019b6 <ProcessCommands+0x78a>
 8001926:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <ProcessCommands+0x7b4>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4b3f      	ldr	r3, [pc, #252]	; (8001a28 <ProcessCommands+0x7fc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d041      	beq.n	80019b6 <ProcessCommands+0x78a>
 8001932:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <ProcessCommands+0x7b4>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <ProcessCommands+0x800>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d03b      	beq.n	80019b6 <ProcessCommands+0x78a>
 800193e:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <ProcessCommands+0x7b4>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <ProcessCommands+0x804>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d035      	beq.n	80019b6 <ProcessCommands+0x78a>
 800194a:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <ProcessCommands+0x7b4>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4b39      	ldr	r3, [pc, #228]	; (8001a34 <ProcessCommands+0x808>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d02f      	beq.n	80019b6 <ProcessCommands+0x78a>
			||command ==pvl03on ||command == pvl03off ||command == pvlf01on ||command == pvlf01off ||command == pvl02on \
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <ProcessCommands+0x7b4>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <ProcessCommands+0x80c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d029      	beq.n	80019b6 <ProcessCommands+0x78a>
 8001962:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <ProcessCommands+0x7b4>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <ProcessCommands+0x810>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d023      	beq.n	80019b6 <ProcessCommands+0x78a>
 800196e:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <ProcessCommands+0x7b4>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4b33      	ldr	r3, [pc, #204]	; (8001a40 <ProcessCommands+0x814>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d01d      	beq.n	80019b6 <ProcessCommands+0x78a>
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <ProcessCommands+0x7b4>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <ProcessCommands+0x818>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d017      	beq.n	80019b6 <ProcessCommands+0x78a>
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <ProcessCommands+0x7b4>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <ProcessCommands+0x81c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d011      	beq.n	80019b6 <ProcessCommands+0x78a>
			||command ==pvl02off || command ==pvp02on || command ==pvp02off){
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <ProcessCommands+0x7b4>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <ProcessCommands+0x820>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d00b      	beq.n	80019b6 <ProcessCommands+0x78a>
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <ProcessCommands+0x7b4>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <ProcessCommands+0x824>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d005      	beq.n	80019b6 <ProcessCommands+0x78a>
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <ProcessCommands+0x7b4>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <ProcessCommands+0x828>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d10f      	bne.n	80019d6 <ProcessCommands+0x7aa>

			if (cmd_flag && !(ctrl->currentState == VALVE_CHECK)){
 80019b6:	4b2c      	ldr	r3, [pc, #176]	; (8001a68 <ProcessCommands+0x83c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00b      	beq.n	80019d6 <ProcessCommands+0x7aa>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d006      	beq.n	80019d6 <ProcessCommands+0x7aa>
				UART_SendMessage(&huart2, " This command is only valid under the valve check state...\n");
 80019c8:	4928      	ldr	r1, [pc, #160]	; (8001a6c <ProcessCommands+0x840>)
 80019ca:	4825      	ldr	r0, [pc, #148]	; (8001a60 <ProcessCommands+0x834>)
 80019cc:	f7ff fa44 	bl	8000e58 <UART_SendMessage>
				cmd_flag = FALSE;
 80019d0:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <ProcessCommands+0x83c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
			}

	}

		return success;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000354 	.word	0x20000354
 80019e4:	20000004 	.word	0x20000004
 80019e8:	20000008 	.word	0x20000008
 80019ec:	2000000c 	.word	0x2000000c
 80019f0:	20000010 	.word	0x20000010
 80019f4:	20000014 	.word	0x20000014
 80019f8:	2000001c 	.word	0x2000001c
 80019fc:	20000018 	.word	0x20000018
 8001a00:	20000024 	.word	0x20000024
 8001a04:	20000034 	.word	0x20000034
 8001a08:	20000038 	.word	0x20000038
 8001a0c:	2000003c 	.word	0x2000003c
 8001a10:	20000040 	.word	0x20000040
 8001a14:	20000044 	.word	0x20000044
 8001a18:	20000048 	.word	0x20000048
 8001a1c:	2000004c 	.word	0x2000004c
 8001a20:	20000050 	.word	0x20000050
 8001a24:	20000054 	.word	0x20000054
 8001a28:	20000058 	.word	0x20000058
 8001a2c:	2000005c 	.word	0x2000005c
 8001a30:	20000060 	.word	0x20000060
 8001a34:	20000064 	.word	0x20000064
 8001a38:	20000068 	.word	0x20000068
 8001a3c:	2000006c 	.word	0x2000006c
 8001a40:	20000070 	.word	0x20000070
 8001a44:	20000074 	.word	0x20000074
 8001a48:	20000078 	.word	0x20000078
 8001a4c:	2000007c 	.word	0x2000007c
 8001a50:	20000080 	.word	0x20000080
 8001a54:	20000084 	.word	0x20000084
 8001a58:	20001378 	.word	0x20001378
 8001a5c:	080077c0 	.word	0x080077c0
 8001a60:	20001650 	.word	0x20001650
 8001a64:	2000002c 	.word	0x2000002c
 8001a68:	20001384 	.word	0x20001384
 8001a6c:	080077d8 	.word	0x080077d8

08001a70 <splitValues>:
//
//Function to separate sensor values
//
uint32_t splitValues(char *marionette_data, char separated[31][6])
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
	int n=0,j=0, v=0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]

	//In the case where a ' ' is added by the HAL drivers
    if (marionette_data[0]  == ' ' ){
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b20      	cmp	r3, #32
 8001a8c:	d12b      	bne.n	8001ae6 <splitValues+0x76>
    	if (marionette_data[1] == '3'){
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3301      	adds	r3, #1
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b33      	cmp	r3, #51	; 0x33
 8001a96:	d126      	bne.n	8001ae6 <splitValues+0x76>
    		for(int s=1; TRUE; s++){
 8001a98:	2301      	movs	r3, #1
 8001a9a:	613b      	str	r3, [r7, #16]
    			Rx_Buffer[v] = marionette_data[s];
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	7819      	ldrb	r1, [r3, #0]
 8001aa4:	4a2f      	ldr	r2, [pc, #188]	; (8001b64 <splitValues+0xf4>)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	460a      	mov	r2, r1
 8001aac:	701a      	strb	r2, [r3, #0]
    			v += 1;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
    			if (marionette_data[s] == '\0'){
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10e      	bne.n	8001ade <splitValues+0x6e>
    				for (int q = s; q<100; q++ ){
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e007      	b.n	8001ad6 <splitValues+0x66>
    					Rx_Buffer[q] = '\0';
 8001ac6:	4a27      	ldr	r2, [pc, #156]	; (8001b64 <splitValues+0xf4>)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
    				for (int q = s; q<100; q++ ){
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b63      	cmp	r3, #99	; 0x63
 8001ada:	ddf4      	ble.n	8001ac6 <splitValues+0x56>
    				}
    				break;
 8001adc:	e003      	b.n	8001ae6 <splitValues+0x76>
    		for(int s=1; TRUE; s++){
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	613b      	str	r3, [r7, #16]
    			Rx_Buffer[v] = marionette_data[s];
 8001ae4:	e7da      	b.n	8001a9c <splitValues+0x2c>
    			}

    		}
    	}
    }
	for(int i=0;TRUE;i++)// Process the whole marionette data packet
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
	{
		if(marionette_data[i]!=' '){
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	4413      	add	r3, r2
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b20      	cmp	r3, #32
 8001af4:	d010      	beq.n	8001b18 <splitValues+0xa8>
			separated[n][j++]=marionette_data[i];
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	18d1      	adds	r1, r2, r3
 8001afc:	69fa      	ldr	r2, [r7, #28]
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	461a      	mov	r2, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	441a      	add	r2, r3
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	1c58      	adds	r0, r3, #1
 8001b10:	61b8      	str	r0, [r7, #24]
 8001b12:	7809      	ldrb	r1, [r1, #0]
 8001b14:	54d1      	strb	r1, [r2, r3]
 8001b16:	e011      	b.n	8001b3c <splitValues+0xcc>
		}
		else{// sensor value processed
			separated[n][j++]='\0';//insert NULL
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	461a      	mov	r2, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	441a      	add	r2, r3
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	1c59      	adds	r1, r3, #1
 8001b2c:	61b9      	str	r1, [r7, #24]
 8001b2e:	2100      	movs	r1, #0
 8001b30:	54d1      	strb	r1, [r2, r3]
			n++; // increase by one for every sensor value
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3301      	adds	r3, #1
 8001b36:	61fb      	str	r3, [r7, #28]
			j=0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61bb      	str	r3, [r7, #24]
		}
		if(marionette_data[i]=='\0')
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <splitValues+0xe0>
	for(int i=0;TRUE;i++)// Process the whole marionette data packet
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
		if(marionette_data[i]!=' '){
 8001b4e:	e7cc      	b.n	8001aea <splitValues+0x7a>
		    break;
 8001b50:	bf00      	nop
	}
	// n + 1 will give you how many items in the data you want to split when there is a space.
	return n+1;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3301      	adds	r3, #1
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	200014f4 	.word	0x200014f4

08001b68 <NominalValueCheck>:
// Function in charge of determining that the Sensor Values are Nominal.
void NominalValueCheck(struct StateVars *ctrl, char marionette[]){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]

		uint32_t amount, counter, sensor_value = 0; 	//number of hex and counter of valves.
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]



        //amount holds the amount of sensor values.
	    //this helps to know how many sensor values need to be processed.
		amount = splitValues(marionette,arr);
 8001b76:	4914      	ldr	r1, [pc, #80]	; (8001bc8 <NominalValueCheck+0x60>)
 8001b78:	6838      	ldr	r0, [r7, #0]
 8001b7a:	f7ff ff79 	bl	8001a70 <splitValues>
 8001b7e:	60f8      	str	r0, [r7, #12]

		//Check for valid marionette data packet key (3F99)
		if (hexadecimalTouint32(arr[0]) == marionette_cmd){
 8001b80:	4811      	ldr	r0, [pc, #68]	; (8001bc8 <NominalValueCheck+0x60>)
 8001b82:	f7ff fb01 	bl	8001188 <hexadecimalTouint32>
 8001b86:	4602      	mov	r2, r0
 8001b88:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <NominalValueCheck+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d116      	bne.n	8001bbe <NominalValueCheck+0x56>
			//Activate when ready
			//ValveStatus(NULL);

			//If the arr[0] contains the key then a sensor value will start at arr[1]
			//-9 becuase the last 9 values are just for valve opn/close positions
			for(int i=1; i<=amount-9; i++){
 8001b90:	2301      	movs	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	e00d      	b.n	8001bb2 <NominalValueCheck+0x4a>
				sensor_value = hexadecimalTouint32(arr[i]);
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <NominalValueCheck+0x60>)
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff faef 	bl	8001188 <hexadecimalTouint32>
 8001baa:	6138      	str	r0, [r7, #16]
			for(int i=1; i<=amount-9; i++){
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f1a3 0209 	sub.w	r2, r3, #9
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d2eb      	bcs.n	8001b96 <NominalValueCheck+0x2e>
                // Ok send the warning message
                //UART_SendMessage(&huart2, notice);

			}

}//end of NominalValueCheck()
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000188 	.word	0x20000188
 8001bcc:	20000088 	.word	0x20000088

08001bd0 <Get_State_Disagree_Error_Msg>:

// Function to Double check that we are transitioning to the correct state
void Get_State_Disagree_Error_Msg(char *errorMessage, enum StateName expectedState, \
			enum StateName passedState)
{
 8001bd0:	b5b0      	push	{r4, r5, r7, lr}
 8001bd2:	b0a2      	sub	sp, #136	; 0x88
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	70fb      	strb	r3, [r7, #3]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	70bb      	strb	r3, [r7, #2]
	char state_disagree[VALVE_STATE_BUFFER_SIZE] = "ERROR: Expected State, Passed State Disagree. ";
 8001be0:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <Get_State_Disagree_Error_Msg+0xe4>)
 8001be2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001be6:	461d      	mov	r5, r3
 8001be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bf0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001bf4:	c407      	stmia	r4!, {r0, r1, r2}
 8001bf6:	8023      	strh	r3, [r4, #0]
 8001bf8:	3402      	adds	r4, #2
 8001bfa:	0c1b      	lsrs	r3, r3, #16
 8001bfc:	7023      	strb	r3, [r4, #0]
 8001bfe:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001c02:	2231      	movs	r2, #49	; 0x31
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f005 f95e 	bl	8006ec8 <memset>
	char temp[32];
	strcat(state_disagree, "Expected: ");
 8001c0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fadd 	bl	80001d0 <strlen>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c1e:	4413      	add	r3, r2
 8001c20:	4925      	ldr	r1, [pc, #148]	; (8001cb8 <Get_State_Disagree_Error_Msg+0xe8>)
 8001c22:	461a      	mov	r2, r3
 8001c24:	460b      	mov	r3, r1
 8001c26:	cb03      	ldmia	r3!, {r0, r1}
 8001c28:	6010      	str	r0, [r2, #0]
 8001c2a:	6051      	str	r1, [r2, #4]
 8001c2c:	8819      	ldrh	r1, [r3, #0]
 8001c2e:	789b      	ldrb	r3, [r3, #2]
 8001c30:	8111      	strh	r1, [r2, #8]
 8001c32:	7293      	strb	r3, [r2, #10]
	sprintf(temp, "%d", expectedState);
 8001c34:	78fa      	ldrb	r2, [r7, #3]
 8001c36:	f107 0308 	add.w	r3, r7, #8
 8001c3a:	4920      	ldr	r1, [pc, #128]	; (8001cbc <Get_State_Disagree_Error_Msg+0xec>)
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f005 f94b 	bl	8006ed8 <siprintf>
	strcat(state_disagree, temp);
 8001c42:	f107 0208 	add.w	r2, r7, #8
 8001c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f005 f963 	bl	8006f18 <strcat>
	strcat(state_disagree,"Passed: ");
 8001c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe faba 	bl	80001d0 <strlen>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c64:	4413      	add	r3, r2
 8001c66:	4916      	ldr	r1, [pc, #88]	; (8001cc0 <Get_State_Disagree_Error_Msg+0xf0>)
 8001c68:	461a      	mov	r2, r3
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	cb03      	ldmia	r3!, {r0, r1}
 8001c6e:	6010      	str	r0, [r2, #0]
 8001c70:	6051      	str	r1, [r2, #4]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	7213      	strb	r3, [r2, #8]
	sprintf(temp, "%d", passedState);
 8001c76:	78ba      	ldrb	r2, [r7, #2]
 8001c78:	f107 0308 	add.w	r3, r7, #8
 8001c7c:	490f      	ldr	r1, [pc, #60]	; (8001cbc <Get_State_Disagree_Error_Msg+0xec>)
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f005 f92a 	bl	8006ed8 <siprintf>
	strcat(state_disagree, temp);
 8001c84:	f107 0208 	add.w	r2, r7, #8
 8001c88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f005 f942 	bl	8006f18 <strcat>
	memset(errorMessage, '\0', VALVE_STATE_BUFFER_SIZE);
 8001c94:	2260      	movs	r2, #96	; 0x60
 8001c96:	2100      	movs	r1, #0
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f005 f915 	bl	8006ec8 <memset>
	strcpy(errorMessage, state_disagree);
 8001c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f005 f946 	bl	8006f36 <strcpy>
}
 8001caa:	bf00      	nop
 8001cac:	3788      	adds	r7, #136	; 0x88
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	08007830 	.word	0x08007830
 8001cb8:	08007814 	.word	0x08007814
 8001cbc:	08007820 	.word	0x08007820
 8001cc0:	08007824 	.word	0x08007824

08001cc4 <Get_Invalid_State_Error_Msg>:

// Function to let the usr know which state transition is expected and which one is trying to transition being invalid.
void Get_Invalid_State_Error_Msg(char *errorMessage, enum StateName state, enum StateName lastState)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b0a3      	sub	sp, #140	; 0x8c
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	70fb      	strb	r3, [r7, #3]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	70bb      	strb	r3, [r7, #2]
	char state_invalid[VALVE_STATE_BUFFER_SIZE] = "Invalid State: ";
 8001cd4:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <Get_Invalid_State_Error_Msg+0xac>)
 8001cd6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ce0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ce4:	2250      	movs	r2, #80	; 0x50
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f005 f8ed 	bl	8006ec8 <memset>
	char temp[32];
	sprintf(temp, " %d ",state);
 8001cee:	78fa      	ldrb	r2, [r7, #3]
 8001cf0:	f107 0308 	add.w	r3, r7, #8
 8001cf4:	491f      	ldr	r1, [pc, #124]	; (8001d74 <Get_Invalid_State_Error_Msg+0xb0>)
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f005 f8ee 	bl	8006ed8 <siprintf>
	strcat(state_invalid, temp);
 8001cfc:	f107 0208 	add.w	r2, r7, #8
 8001d00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f005 f906 	bl	8006f18 <strcat>
	strcat(state_invalid, ", lastState: ");
 8001d0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fa5d 	bl	80001d0 <strlen>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <Get_Invalid_State_Error_Msg+0xb4>)
 8001d22:	461c      	mov	r4, r3
 8001d24:	4613      	mov	r3, r2
 8001d26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001d28:	6020      	str	r0, [r4, #0]
 8001d2a:	6061      	str	r1, [r4, #4]
 8001d2c:	60a2      	str	r2, [r4, #8]
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	81a3      	strh	r3, [r4, #12]
	sprintf(temp, " %d \n\n", lastState);
 8001d32:	78ba      	ldrb	r2, [r7, #2]
 8001d34:	f107 0308 	add.w	r3, r7, #8
 8001d38:	4910      	ldr	r1, [pc, #64]	; (8001d7c <Get_Invalid_State_Error_Msg+0xb8>)
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f005 f8cc 	bl	8006ed8 <siprintf>
	strcat(state_invalid, temp);
 8001d40:	f107 0208 	add.w	r2, r7, #8
 8001d44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f005 f8e4 	bl	8006f18 <strcat>
	memset(errorMessage, '\0', VALVE_STATE_BUFFER_SIZE);
 8001d50:	2260      	movs	r2, #96	; 0x60
 8001d52:	2100      	movs	r1, #0
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f005 f8b7 	bl	8006ec8 <memset>
	strcpy(errorMessage, state_invalid);
 8001d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d5e:	4619      	mov	r1, r3
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f005 f8e8 	bl	8006f36 <strcpy>
}
 8001d66:	bf00      	nop
 8001d68:	378c      	adds	r7, #140	; 0x8c
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd90      	pop	{r4, r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	080078b0 	.word	0x080078b0
 8001d74:	08007890 	.word	0x08007890
 8001d78:	08007898 	.word	0x08007898
 8001d7c:	080078a8 	.word	0x080078a8

08001d80 <OxidizerStart>:
#include "messages.h"
#include "utilities.h"
#include "ring_buffer.h"


uint32_t OxidizerStart(struct StateVars *ctrl){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

	uint32_t success = FALSE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]

	ctrl->valveConfiguration = StateConfiguration();
 8001d8c:	f000 fef6 	bl	8002b7c <StateConfiguration>
 8001d90:	4602      	mov	r2, r0
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)pvf01 	\
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	22ab      	movs	r2, #171	; 0xab
 8001d9a:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)pvl03);

	


	uint32_t TIMEOUT = 200;// .2 second time out
 8001d9c:	23c8      	movs	r3, #200	; 0xc8
 8001d9e:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 feae 	bl	8002b08 <VerifyState>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d056      	beq.n	8001e60 <OxidizerStart+0xe0>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 fea5 	bl	8002b08 <VerifyState>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d04d      	beq.n	8001e60 <OxidizerStart+0xe0>
    {
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	2b07      	cmp	r3, #7
 8001dd0:	d139      	bne.n	8001e46 <OxidizerStart+0xc6>
    		// pvf01   pvl01   pvp01   sovf01   pvf02   pvl03   pvlf01   pvl02  pvp02   IG1
    		//|  1  |   1   |  0  |   0  |   0  |   1  |   0   |  0  |  0  |  0

    		StateStatus(ctrl);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 fe42 	bl	8002a5c <StateStatus>
    		//nominal = NominalValueCheck(ctrl, Rx_Buffer);
    		ringBufferRead();
 8001dd8:	f000 f9ee 	bl	80021b8 <ringBufferRead>

    		uint32_t now = HAL_GetTick();
 8001ddc:	f002 f9d6 	bl	800418c <HAL_GetTick>
 8001de0:	60f8      	str	r0, [r7, #12]
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d003      	beq.n	8001dfa <OxidizerStart+0x7a>
    	    {
    			success = StateInitialize(ctrl);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f001 f814 	bl	8002e20 <StateInitialize>
 8001df8:	6178      	str	r0, [r7, #20]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	429a      	cmp	r2, r3
 8001e04:	bf0c      	ite	eq
 8001e06:	2301      	moveq	r3, #1
 8001e08:	2300      	movne	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	617b      	str	r3, [r7, #20]



    		if(now - ctrl->timeStarted > TIMEOUT && success)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d206      	bcs.n	8001e2a <OxidizerStart+0xaa>
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <OxidizerStart+0xaa>
    		{
        		ctrl->currentState = FIRING;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2208      	movs	r2, #8
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}

    		// Increment state counter
			ctrl->stateCounter++;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d11f      	bne.n	8001e7e <OxidizerStart+0xfe>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 8001e44:	e01b      	b.n	8001e7e <OxidizerStart+0xfe>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, OXIDIZER_START, ctrl->currentState);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	2107      	movs	r1, #7
 8001e50:	480e      	ldr	r0, [pc, #56]	; (8001e8c <OxidizerStart+0x10c>)
 8001e52:	f7ff febd 	bl	8001bd0 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2, Tx_Buffer);
 8001e56:	490d      	ldr	r1, [pc, #52]	; (8001e8c <OxidizerStart+0x10c>)
 8001e58:	480d      	ldr	r0, [pc, #52]	; (8001e90 <OxidizerStart+0x110>)
 8001e5a:	f7fe fffd 	bl	8000e58 <UART_SendMessage>
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 8001e5e:	e00e      	b.n	8001e7e <OxidizerStart+0xfe>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4807      	ldr	r0, [pc, #28]	; (8001e8c <OxidizerStart+0x10c>)
 8001e70:	f7ff ff28 	bl	8001cc4 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8001e74:	4905      	ldr	r1, [pc, #20]	; (8001e8c <OxidizerStart+0x10c>)
 8001e76:	4806      	ldr	r0, [pc, #24]	; (8001e90 <OxidizerStart+0x110>)
 8001e78:	f7fe ffee 	bl	8000e58 <UART_SendMessage>
 8001e7c:	e000      	b.n	8001e80 <OxidizerStart+0x100>
    	if((ctrl->currentState & OXIDIZER_START) == OXIDIZER_START){
 8001e7e:	bf00      	nop
    }
	return success;
 8001e80:	697b      	ldr	r3, [r7, #20]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000360 	.word	0x20000360
 8001e90:	20001650 	.word	0x20001650

08001e94 <Pressurize>:
#include "pressurize.h"
#include "messages.h"
#include "ring_buffer.h"


uint32_t Pressurize(struct StateVars *ctrl){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]

	ctrl->valveConfiguration = StateConfiguration();
 8001ea0:	f000 fe6c 	bl	8002b7c <StateConfiguration>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget = ((uint16_t)pvf01 | (uint16_t)sovf01 | (uint16_t)pvl02 	\
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	228b      	movs	r2, #139	; 0x8b
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
			 |(uint16_t)pvl01);

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 fe26 	bl	8002b08 <VerifyState>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d03e      	beq.n	8001f40 <Pressurize+0xac>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fe1d 	bl	8002b08 <VerifyState>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d035      	beq.n	8001f40 <Pressurize+0xac>
    {
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eda:	f003 0305 	and.w	r3, r3, #5
 8001ede:	2b05      	cmp	r3, #5
 8001ee0:	d121      	bne.n	8001f26 <Pressurize+0x92>
    		// pvf01   pvl01   pvp01   sovf01   pvf02   pvl03   pvlf01   pvl02    pvp02   IG1
    		//|  1  |   1  |   0  |   1  |   0  |   0  |   0  |   1  |   0   |  0

    		StateStatus(ctrl);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fdba 	bl	8002a5c <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d003      	beq.n	8001f00 <Pressurize+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 ff91 	bl	8002e20 <StateInitialize>
 8001efe:	60f8      	str	r0, [r7, #12]
    	    }

    		ProcessCommands(ctrl);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff f993 	bl	800122c <ProcessCommands>

    		//Check the nominal value
			//NominalValueCheck(ctrl, Rx_Buffer);
    		ringBufferRead();
 8001f06:	f000 f957 	bl	80021b8 <ringBufferRead>

    		// Increment state counter
			ctrl->stateCounter++;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1c:	d11f      	bne.n	8001f5e <Pressurize+0xca>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 8001f24:	e01b      	b.n	8001f5e <Pressurize+0xca>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, PRESSURIZE, ctrl->currentState);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	2105      	movs	r1, #5
 8001f30:	480e      	ldr	r0, [pc, #56]	; (8001f6c <Pressurize+0xd8>)
 8001f32:	f7ff fe4d 	bl	8001bd0 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8001f36:	490d      	ldr	r1, [pc, #52]	; (8001f6c <Pressurize+0xd8>)
 8001f38:	480d      	ldr	r0, [pc, #52]	; (8001f70 <Pressurize+0xdc>)
 8001f3a:	f7fe ff8d 	bl	8000e58 <UART_SendMessage>
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 8001f3e:	e00e      	b.n	8001f5e <Pressurize+0xca>
    	}
    }else{
    	    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4807      	ldr	r0, [pc, #28]	; (8001f6c <Pressurize+0xd8>)
 8001f50:	f7ff feb8 	bl	8001cc4 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 8001f54:	4905      	ldr	r1, [pc, #20]	; (8001f6c <Pressurize+0xd8>)
 8001f56:	4806      	ldr	r0, [pc, #24]	; (8001f70 <Pressurize+0xdc>)
 8001f58:	f7fe ff7e 	bl	8000e58 <UART_SendMessage>
 8001f5c:	e000      	b.n	8001f60 <Pressurize+0xcc>
    	if((ctrl->currentState & PRESSURIZE) == PRESSURIZE){
 8001f5e:	bf00      	nop
    }
	return success;
 8001f60:	68fb      	ldr	r3, [r7, #12]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000360 	.word	0x20000360
 8001f70:	20001650 	.word	0x20001650

08001f74 <Purge>:
#include "messages.h"
#include "utilities.h"
#include "ring_buffer.h"


uint32_t Purge(struct StateVars *ctrl){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]

	ctrl->valveConfiguration = StateConfiguration();
 8001f80:	f000 fdfc 	bl	8002b7c <StateConfiguration>
 8001f84:	4602      	mov	r2, r0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)pvp01 | (uint16_t)sovf01 | (uint16_t)pvl02\
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
			  |(uint16_t)pvp02 );


	uint32_t TIMEOUT = 3000; // 3 second time out
 8001f92:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001f96:	613b      	str	r3, [r7, #16]

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 fdb2 	bl	8002b08 <VerifyState>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d056      	beq.n	8002058 <Purge+0xe4>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 fda9 	bl	8002b08 <VerifyState>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d04d      	beq.n	8002058 <Purge+0xe4>
    {
    	if((ctrl->currentState & PURGE) == PURGE){
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc2:	f003 0309 	and.w	r3, r3, #9
 8001fc6:	2b09      	cmp	r3, #9
 8001fc8:	d139      	bne.n	800203e <Purge+0xca>
    		// pvf01   pvl01   pvp01   sovf01   pvf02   pvl03   pvlf01   pvl02  pvp02   IG1
    		//|  0  |   0  |   1  |   0  |   0  |   0  |   0  |   0  |  1  |  0

    		StateStatus(ctrl);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 fd46 	bl	8002a5c <StateStatus>
    		//nominal = NominalValueCheck(ctrl, Rx_Buffer);
    		ringBufferRead();
 8001fd0:	f000 f8f2 	bl	80021b8 <ringBufferRead>


    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d003      	beq.n	8001fec <Purge+0x78>
    	    {
    			success = StateInitialize(ctrl);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 ff1b 	bl	8002e20 <StateInitialize>
 8001fea:	6178      	str	r0, [r7, #20]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	617b      	str	r3, [r7, #20]


			uint32_t now = HAL_GetTick();
 8002000:	f002 f8c4 	bl	800418c <HAL_GetTick>
 8002004:	60f8      	str	r0, [r7, #12]

    		if(now - ctrl->timeStarted > TIMEOUT && success)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	429a      	cmp	r2, r3
 8002012:	d206      	bcs.n	8002022 <Purge+0xae>
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <Purge+0xae>
    		{
        		ctrl->currentState= SAFETY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    		}

    		// Increment state counter
			ctrl->stateCounter++;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002034:	d11f      	bne.n	8002076 <Purge+0x102>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & PURGE) == PURGE){
 800203c:	e01b      	b.n	8002076 <Purge+0x102>
    	}else{
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, PURGE, ctrl->currentState);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002044:	461a      	mov	r2, r3
 8002046:	2109      	movs	r1, #9
 8002048:	480e      	ldr	r0, [pc, #56]	; (8002084 <Purge+0x110>)
 800204a:	f7ff fdc1 	bl	8001bd0 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 800204e:	490d      	ldr	r1, [pc, #52]	; (8002084 <Purge+0x110>)
 8002050:	480d      	ldr	r0, [pc, #52]	; (8002088 <Purge+0x114>)
 8002052:	f7fe ff01 	bl	8000e58 <UART_SendMessage>
    	if((ctrl->currentState & PURGE) == PURGE){
 8002056:	e00e      	b.n	8002076 <Purge+0x102>

    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002064:	461a      	mov	r2, r3
 8002066:	4807      	ldr	r0, [pc, #28]	; (8002084 <Purge+0x110>)
 8002068:	f7ff fe2c 	bl	8001cc4 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 800206c:	4905      	ldr	r1, [pc, #20]	; (8002084 <Purge+0x110>)
 800206e:	4806      	ldr	r0, [pc, #24]	; (8002088 <Purge+0x114>)
 8002070:	f7fe fef2 	bl	8000e58 <UART_SendMessage>
 8002074:	e000      	b.n	8002078 <Purge+0x104>
    	if((ctrl->currentState & PURGE) == PURGE){
 8002076:	bf00      	nop
    }
	return success;
 8002078:	697b      	ldr	r3, [r7, #20]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000360 	.word	0x20000360
 8002088:	20001650 	.word	0x20001650

0800208c <ringBuffer>:
#include "ring_buffer.h" // include the header file
#include "messages.h"

void ringBuffer(char data []){
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
//First store the marionette data in a ring buffer FIFO style
//If is the first time using the buffer Initialize it
	 if (circular==0) {
 8002094:	4b43      	ldr	r3, [pc, #268]	; (80021a4 <ringBuffer+0x118>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d11e      	bne.n	80020da <ringBuffer+0x4e>

		 for (int i=0;i<16;i++){ // i for rows
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	e015      	b.n	80020ce <ringBuffer+0x42>
			 for (int j = 0; j<250; j ++){// j for columns
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	e00c      	b.n	80020c2 <ringBuffer+0x36>

				 circularBuffer[i][j]= 0;
 80020a8:	4a3f      	ldr	r2, [pc, #252]	; (80021a8 <ringBuffer+0x11c>)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	21fa      	movs	r1, #250	; 0xfa
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	441a      	add	r2, r3
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	4413      	add	r3, r2
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
			 for (int j = 0; j<250; j ++){// j for columns
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	3301      	adds	r3, #1
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	2bf9      	cmp	r3, #249	; 0xf9
 80020c6:	ddef      	ble.n	80020a8 <ringBuffer+0x1c>
		 for (int i=0;i<16;i++){ // i for rows
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	3301      	adds	r3, #1
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	2b0f      	cmp	r3, #15
 80020d2:	dde6      	ble.n	80020a2 <ringBuffer+0x16>
			 }
		 }
		 //The 2D array is initialized !
		 circular = 1;
 80020d4:	4b33      	ldr	r3, [pc, #204]	; (80021a4 <ringBuffer+0x118>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
	 }

	 //Circular Buffer FULL
	 if (bufferLength == SIZE_OF_BUFFER){ // Case where the circular buffer is full
 80020da:	4b34      	ldr	r3, [pc, #208]	; (80021ac <ringBuffer+0x120>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b34      	ldr	r3, [pc, #208]	; (80021b0 <ringBuffer+0x124>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d106      	bne.n	80020f4 <ringBuffer+0x68>
		 bufferLength = 0;
 80020e6:	4b31      	ldr	r3, [pc, #196]	; (80021ac <ringBuffer+0x120>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
		 writeIndex = 0;
 80020ec:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <ringBuffer+0x128>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
		 writeIndex++;

		 if (writeIndex == 15){writeIndex = 0;}
	 }

}
 80020f2:	e053      	b.n	800219c <ringBuffer+0x110>
	 else if (bufferLength != SIZE_OF_BUFFER){
 80020f4:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <ringBuffer+0x120>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <ringBuffer+0x124>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d04d      	beq.n	800219c <ringBuffer+0x110>
		 for (int i = 0; i <= strlen(data); i++){
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e032      	b.n	800216c <ringBuffer+0xe0>
			 circularBuffer[writeIndex][i] = data[i];
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	441a      	add	r2, r3
 800210c:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <ringBuffer+0x128>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	7810      	ldrb	r0, [r2, #0]
 8002112:	4a25      	ldr	r2, [pc, #148]	; (80021a8 <ringBuffer+0x11c>)
 8002114:	21fa      	movs	r1, #250	; 0xfa
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	441a      	add	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	4413      	add	r3, r2
 8002120:	4602      	mov	r2, r0
 8002122:	701a      	strb	r2, [r3, #0]
		 if (strlen(data) == i){
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7fe f853 	bl	80001d0 <strlen>
 800212a:	4602      	mov	r2, r0
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	429a      	cmp	r2, r3
 8002130:	d119      	bne.n	8002166 <ringBuffer+0xda>
			 for(int j = i+1; j <= 249; j++ ){
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	3301      	adds	r3, #1
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	e012      	b.n	8002160 <ringBuffer+0xd4>
				 circularBuffer[writeIndex][j] = 0;
 800213a:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <ringBuffer+0x128>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a1a      	ldr	r2, [pc, #104]	; (80021a8 <ringBuffer+0x11c>)
 8002140:	21fa      	movs	r1, #250	; 0xfa
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	441a      	add	r2, r3
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
				 if (j == 249){
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	2bf9      	cmp	r3, #249	; 0xf9
 8002154:	d101      	bne.n	800215a <ringBuffer+0xce>
					 int a = 1;
 8002156:	2301      	movs	r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
			 for(int j = i+1; j <= 249; j++ ){
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	3301      	adds	r3, #1
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2bf9      	cmp	r3, #249	; 0xf9
 8002164:	dde9      	ble.n	800213a <ringBuffer+0xae>
		 for (int i = 0; i <= strlen(data); i++){
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3301      	adds	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7fe f82f 	bl	80001d0 <strlen>
 8002172:	4602      	mov	r2, r0
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	429a      	cmp	r2, r3
 8002178:	d2c5      	bcs.n	8002106 <ringBuffer+0x7a>
		 bufferLength ++;
 800217a:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <ringBuffer+0x120>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	3301      	adds	r3, #1
 8002180:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <ringBuffer+0x120>)
 8002182:	6013      	str	r3, [r2, #0]
		 writeIndex++;
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <ringBuffer+0x128>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <ringBuffer+0x128>)
 800218c:	6013      	str	r3, [r2, #0]
		 if (writeIndex == 15){writeIndex = 0;}
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <ringBuffer+0x128>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b0f      	cmp	r3, #15
 8002194:	d102      	bne.n	800219c <ringBuffer+0x110>
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <ringBuffer+0x128>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
}
 800219c:	bf00      	nop
 800219e:	3720      	adds	r7, #32
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20001374 	.word	0x20001374
 80021a8:	200003d0 	.word	0x200003d0
 80021ac:	20000248 	.word	0x20000248
 80021b0:	2000008c 	.word	0x2000008c
 80021b4:	20001388 	.word	0x20001388

080021b8 <ringBufferRead>:
// One alternative to check the marionette values from withing the each states ( Create a function read and call it )
// Otherwise leave read inside the ring buffer function and handling the marionettes values will be done first!
void ringBufferRead(){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
	int counter = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
	    //check if the circular buffer is empty
	    // Initialize it to zero
	     if(bufferLength == 0 && initOnceFlag == TRUE){
 80021c2:	4b3c      	ldr	r3, [pc, #240]	; (80022b4 <ringBufferRead+0xfc>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d123      	bne.n	8002212 <ringBufferRead+0x5a>
 80021ca:	4b3b      	ldr	r3, [pc, #236]	; (80022b8 <ringBufferRead+0x100>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d11f      	bne.n	8002212 <ringBufferRead+0x5a>

	    	 for (int i=0;i<16;i++){ // rows
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	e015      	b.n	8002204 <ringBufferRead+0x4c>
	    	 			 for (int j = 0; j<250; j ++){// columns
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e00c      	b.n	80021f8 <ringBufferRead+0x40>

	    	 				 circularBuffer[i][j]= 0;
 80021de:	4a37      	ldr	r2, [pc, #220]	; (80022bc <ringBufferRead+0x104>)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	21fa      	movs	r1, #250	; 0xfa
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	441a      	add	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4413      	add	r3, r2
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
	    	 			 for (int j = 0; j<250; j ++){// columns
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	3301      	adds	r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2bf9      	cmp	r3, #249	; 0xf9
 80021fc:	ddef      	ble.n	80021de <ringBufferRead+0x26>
	    	 for (int i=0;i<16;i++){ // rows
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	3301      	adds	r3, #1
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	2b0f      	cmp	r3, #15
 8002208:	dde6      	ble.n	80021d8 <ringBufferRead+0x20>
	    	 			 }

	    	 	 }
	    	 initOnceFlag = FALSE;
 800220a:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <ringBufferRead+0x100>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
			 if (readIndex == 15){readIndex = 0;}

       //Then service data packets
       NominalValueCheck(NULL, marionette_data);
    }
}
 8002210:	e04b      	b.n	80022aa <ringBufferRead+0xf2>
	     else if(bufferLength <= SIZE_OF_BUFFER && bufferLength != 0){ // && circular_buffer_readFlag){
 8002212:	4b28      	ldr	r3, [pc, #160]	; (80022b4 <ringBufferRead+0xfc>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <ringBufferRead+0x108>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d845      	bhi.n	80022aa <ringBufferRead+0xf2>
 800221e:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <ringBufferRead+0xfc>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d041      	beq.n	80022aa <ringBufferRead+0xf2>
			 for(int j = 0; circularBuffer[readIndex][j] != '\0'; j++){
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	e004      	b.n	8002236 <ringBufferRead+0x7e>
				 counter = j;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	617b      	str	r3, [r7, #20]
			 for(int j = 0; circularBuffer[readIndex][j] != '\0'; j++){
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	3301      	adds	r3, #1
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <ringBufferRead+0x10c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a20      	ldr	r2, [pc, #128]	; (80022bc <ringBufferRead+0x104>)
 800223c:	21fa      	movs	r1, #250	; 0xfa
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	441a      	add	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4413      	add	r3, r2
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1ee      	bne.n	800222c <ringBufferRead+0x74>
			 for (int i = 0; i < counter+1; i++){
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	e011      	b.n	8002278 <ringBufferRead+0xc0>
				 marionette_data[i] = circularBuffer[readIndex][i];
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <ringBufferRead+0x10c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a18      	ldr	r2, [pc, #96]	; (80022bc <ringBufferRead+0x104>)
 800225a:	21fa      	movs	r1, #250	; 0xfa
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	441a      	add	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	7819      	ldrb	r1, [r3, #0]
 8002268:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <ringBufferRead+0x110>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	460a      	mov	r2, r1
 8002270:	701a      	strb	r2, [r3, #0]
			 for (int i = 0; i < counter+1; i++){
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3301      	adds	r3, #1
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	dae9      	bge.n	8002254 <ringBufferRead+0x9c>
			 bufferLength --;
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <ringBufferRead+0xfc>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3b01      	subs	r3, #1
 8002286:	4a0b      	ldr	r2, [pc, #44]	; (80022b4 <ringBufferRead+0xfc>)
 8002288:	6013      	str	r3, [r2, #0]
			 readIndex ++;
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <ringBufferRead+0x10c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	3301      	adds	r3, #1
 8002290:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <ringBufferRead+0x10c>)
 8002292:	6013      	str	r3, [r2, #0]
			 if (readIndex == 15){readIndex = 0;}
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <ringBufferRead+0x10c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b0f      	cmp	r3, #15
 800229a:	d102      	bne.n	80022a2 <ringBufferRead+0xea>
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <ringBufferRead+0x10c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
       NominalValueCheck(NULL, marionette_data);
 80022a2:	4909      	ldr	r1, [pc, #36]	; (80022c8 <ringBufferRead+0x110>)
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7ff fc5f 	bl	8001b68 <NominalValueCheck>
}
 80022aa:	bf00      	nop
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000248 	.word	0x20000248
 80022b8:	200002dc 	.word	0x200002dc
 80022bc:	200003d0 	.word	0x200003d0
 80022c0:	2000008c 	.word	0x2000008c
 80022c4:	200016f4 	.word	0x200016f4
 80022c8:	200015d4 	.word	0x200015d4

080022cc <Safety>:
#include "safety.h"
#include "messages.h"
#include "ring_buffer.h"


uint32_t Safety(struct StateVars *ctrl) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

	uint32_t success = FALSE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]

	ctrl->valveConfiguration = StateConfiguration();
 80022d8:	f000 fc50 	bl	8002b7c <StateConfiguration>
 80022dc:	4602      	mov	r2, r0
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = !((uint16_t)pvf01 |(uint16_t)pvl01 |(uint16_t)pvp01 \
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
									|(uint16_t)sovf01 |(uint16_t)pvf02 |(uint16_t)pvl03 \
									|(uint16_t)pvlf01 |(uint16_t)pvl02 |(uint16_t)pvp02 \
									|(uint16_t)IG1);

	if (VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState)) {
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fc0a 	bl	8002b08 <VerifyState>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d034      	beq.n	8002364 <Safety+0x98>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fc01 	bl	8002b08 <VerifyState>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d02b      	beq.n	8002364 <Safety+0x98>
		if ((ctrl->currentState & SAFETY) == SAFETY) {
			// pvf01   pvl01   pvp01   sovf01   pvf02   pvl03   pvlf01   pvl02  pvp02   IG1
			// | 0  |   0  |   0  |   0  |   0  |   0  |   0 |    0  |  0  |  0

			StateStatus(ctrl);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 fba5 	bl	8002a5c <StateStatus>
			// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800231e:	429a      	cmp	r2, r3
 8002320:	d003      	beq.n	800232a <Safety+0x5e>
    	    {
    			success = StateInitialize(ctrl);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fd7c 	bl	8002e20 <StateInitialize>
 8002328:	60f8      	str	r0, [r7, #12]
    	    }

            ProcessCommands(ctrl);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe ff7e 	bl	800122c <ProcessCommands>

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	429a      	cmp	r2, r3
 800233a:	bf0c      	ite	eq
 800233c:	2301      	moveq	r3, #1
 800233e:	2300      	movne	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	60fb      	str	r3, [r7, #12]

			//NominalValueCheck(ctrl, Rx_Buffer);
			ringBufferRead();
 8002344:	f7ff ff38 	bl	80021b8 <ringBufferRead>

			ctrl->stateCounter++;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235a:	d112      	bne.n	8002382 <Safety+0xb6>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 8002362:	e00e      	b.n	8002382 <Safety+0xb6>
			Get_State_Disagree_Error_Msg(Tx_Buffer, SAFETY, ctrl->currentState);
			UART_SendMessage(&huart2,Tx_Buffer);
		}
	} else {
		// Log Invalid State
		Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002370:	461a      	mov	r2, r3
 8002372:	4807      	ldr	r0, [pc, #28]	; (8002390 <Safety+0xc4>)
 8002374:	f7ff fca6 	bl	8001cc4 <Get_Invalid_State_Error_Msg>
		UART_SendMessage(&huart2,Tx_Buffer);
 8002378:	4905      	ldr	r1, [pc, #20]	; (8002390 <Safety+0xc4>)
 800237a:	4806      	ldr	r0, [pc, #24]	; (8002394 <Safety+0xc8>)
 800237c:	f7fe fd6c 	bl	8000e58 <UART_SendMessage>
 8002380:	e000      	b.n	8002384 <Safety+0xb8>
		if ((ctrl->currentState & SAFETY) == SAFETY) {
 8002382:	bf00      	nop
	}
	return success;
 8002384:	68fb      	ldr	r3, [r7, #12]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000360 	.word	0x20000360
 8002394:	20001650 	.word	0x20001650

08002398 <AutomaticShutdown>:


//Shutdown : Purge and go back to SAFETY

uint32_t AutomaticShutdown(struct StateVars *ctrl)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	uint32_t TIMEOUT = 3300; // 3 second time out
 80023a0:	f640 43e4 	movw	r3, #3300	; 0xce4
 80023a4:	613b      	str	r3, [r7, #16]
	uint32_t delay_shut = 300; //.3 seconds so that the valves move
 80023a6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80023aa:	60fb      	str	r3, [r7, #12]
	uint32_t success = FALSE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]

	ctrl->valveConfiguration = StateConfiguration();
 80023b0:	f000 fbe4 	bl	8002b7c <StateConfiguration>
 80023b4:	4602      	mov	r2, r0
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	62da      	str	r2, [r3, #44]	; 0x2c

	if(one_time_flag == TRUE){
 80023ba:	4b50      	ldr	r3, [pc, #320]	; (80024fc <AutomaticShutdown+0x164>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d105      	bne.n	80023ce <AutomaticShutdown+0x36>
		//Turn off all the valves like the safety state firts
		ctrl->valveTarget  = !((uint16_t)pvf01 |(uint16_t)pvl01 |(uint16_t)pvp01 \
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
								|(uint16_t)sovf01 |(uint16_t)pvf02 |(uint16_t)pvl03 \
								|(uint16_t)pvlf01 |(uint16_t)pvl02 |(uint16_t)pvp02 \
								|(uint16_t)IG1);
		one_time_flag = FALSE;
 80023c8:	4b4c      	ldr	r3, [pc, #304]	; (80024fc <AutomaticShutdown+0x164>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
	}

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fb97 	bl	8002b08 <VerifyState>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d074      	beq.n	80024ca <AutomaticShutdown+0x132>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fb8e 	bl	8002b08 <VerifyState>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d06b      	beq.n	80024ca <AutomaticShutdown+0x132>
    {
    	if((ctrl->currentState & SHUTDOWN) == SHUTDOWN){
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023f8:	f003 030a 	and.w	r3, r3, #10
 80023fc:	2b0a      	cmp	r3, #10
 80023fe:	d157      	bne.n	80024b0 <AutomaticShutdown+0x118>

    		 StateStatus(ctrl);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 fb2b 	bl	8002a5c <StateStatus>

    		uint32_t now = HAL_GetTick();
 8002406:	f001 fec1 	bl	800418c <HAL_GetTick>
 800240a:	60b8      	str	r0, [r7, #8]
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002418:	429a      	cmp	r2, r3
 800241a:	d003      	beq.n	8002424 <AutomaticShutdown+0x8c>
    	    {
    			success = StateInitialize(ctrl);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 fcff 	bl	8002e20 <StateInitialize>
 8002422:	6178      	str	r0, [r7, #20]
    	    }
    		success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	429a      	cmp	r2, r3
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	617b      	str	r3, [r7, #20]

    		// Wait between .3 seconds to allow the  valves move
    		if((now - ctrl->timeStarted) > delay_shut && time_1 == TRUE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	429a      	cmp	r2, r3
 8002444:	d214      	bcs.n	8002470 <AutomaticShutdown+0xd8>
 8002446:	4b2e      	ldr	r3, [pc, #184]	; (8002500 <AutomaticShutdown+0x168>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d110      	bne.n	8002470 <AutomaticShutdown+0xd8>
    		    {
    			   /*FUEL PURGE N2  - LOX PURGE N2*/
    			   ctrl->valveTarget  = ((uint16_t)pvp01 | (uint16_t)sovf01 | (uint16_t)pvl02 | (uint16_t)pvp02);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8002454:	631a      	str	r2, [r3, #48]	; 0x30
    			   // Set Valve States
    			   	ValveStateSetter(ctrl->valveTarget);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fc0c 	bl	8002c78 <ValveStateSetter>
    			   	ctrl->valveConfiguration = StateConfiguration();
 8002460:	f000 fb8c 	bl	8002b7c <StateConfiguration>
 8002464:	4602      	mov	r2, r0
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	62da      	str	r2, [r3, #44]	; 0x2c
    			   	time_1 = FALSE;
 800246a:	4b25      	ldr	r3, [pc, #148]	; (8002500 <AutomaticShutdown+0x168>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
    		    }



             // Wait 3 second until transitioning to the safety state
    		 if((now - ctrl->timeStarted) > TIMEOUT && success)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	429a      	cmp	r2, r3
 800247c:	d20a      	bcs.n	8002494 <AutomaticShutdown+0xfc>
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d007      	beq.n	8002494 <AutomaticShutdown+0xfc>
    		   {
    		       ctrl->currentState= SAFETY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                   // need to change command so that we stay in safety
    		       command = safety;
 800248c:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <AutomaticShutdown+0x16c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1d      	ldr	r2, [pc, #116]	; (8002508 <AutomaticShutdown+0x170>)
 8002492:	6013      	str	r3, [r2, #0]
    		   }


    		 // Increment state counter
			ctrl->stateCounter++;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a6:	d11f      	bne.n	80024e8 <AutomaticShutdown+0x150>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & SHUTDOWN) == SHUTDOWN){
 80024ae:	e01b      	b.n	80024e8 <AutomaticShutdown+0x150>
    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, SHUTDOWN, ctrl->currentState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024b6:	461a      	mov	r2, r3
 80024b8:	210a      	movs	r1, #10
 80024ba:	4814      	ldr	r0, [pc, #80]	; (800250c <AutomaticShutdown+0x174>)
 80024bc:	f7ff fb88 	bl	8001bd0 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2, Tx_Buffer);
 80024c0:	4912      	ldr	r1, [pc, #72]	; (800250c <AutomaticShutdown+0x174>)
 80024c2:	4813      	ldr	r0, [pc, #76]	; (8002510 <AutomaticShutdown+0x178>)
 80024c4:	f7fe fcc8 	bl	8000e58 <UART_SendMessage>
    	if((ctrl->currentState & SHUTDOWN) == SHUTDOWN){
 80024c8:	e00e      	b.n	80024e8 <AutomaticShutdown+0x150>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024d6:	461a      	mov	r2, r3
 80024d8:	480c      	ldr	r0, [pc, #48]	; (800250c <AutomaticShutdown+0x174>)
 80024da:	f7ff fbf3 	bl	8001cc4 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 80024de:	490b      	ldr	r1, [pc, #44]	; (800250c <AutomaticShutdown+0x174>)
 80024e0:	480b      	ldr	r0, [pc, #44]	; (8002510 <AutomaticShutdown+0x178>)
 80024e2:	f7fe fcb9 	bl	8000e58 <UART_SendMessage>
 80024e6:	e000      	b.n	80024ea <AutomaticShutdown+0x152>
    	if((ctrl->currentState & SHUTDOWN) == SHUTDOWN){
 80024e8:	bf00      	nop
    }
    circular_buffer_readFlag = TRUE;
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <AutomaticShutdown+0x17c>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]
	return success;
 80024f0:	697b      	ldr	r3, [r7, #20]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	2000164c 	.word	0x2000164c
 8002500:	20000348 	.word	0x20000348
 8002504:	20000090 	.word	0x20000090
 8002508:	20000354 	.word	0x20000354
 800250c:	20000360 	.word	0x20000360
 8002510:	20001650 	.word	0x20001650
 8002514:	20000184 	.word	0x20000184

08002518 <StateMachine>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)

#include "state_machine.h"

void StateMachine(uint32_t control, struct StateVars *ctrl)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
	while(TRUE == control)
 8002522:	e07f      	b.n	8002624 <StateMachine+0x10c>
	{
		if(VerifyState(ctrl->currentState))
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800252a:	4618      	mov	r0, r3
 800252c:	f000 faec 	bl	8002b08 <VerifyState>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d064      	beq.n	8002600 <StateMachine+0xe8>
		{
			switch(ctrl->currentState)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800253c:	2b0b      	cmp	r3, #11
 800253e:	d859      	bhi.n	80025f4 <StateMachine+0xdc>
 8002540:	a201      	add	r2, pc, #4	; (adr r2, 8002548 <StateMachine+0x30>)
 8002542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002546:	bf00      	nop
 8002548:	08002579 	.word	0x08002579
 800254c:	08002583 	.word	0x08002583
 8002550:	0800258d 	.word	0x0800258d
 8002554:	08002599 	.word	0x08002599
 8002558:	080025a5 	.word	0x080025a5
 800255c:	080025af 	.word	0x080025af
 8002560:	080025b9 	.word	0x080025b9
 8002564:	080025c3 	.word	0x080025c3
 8002568:	080025cd 	.word	0x080025cd
 800256c:	080025d7 	.word	0x080025d7
 8002570:	080025e1 	.word	0x080025e1
 8002574:	080025eb 	.word	0x080025eb
			{
		    	case SAFETY:
		    		control = Safety(ctrl);
 8002578:	6838      	ldr	r0, [r7, #0]
 800257a:	f7ff fea7 	bl	80022cc <Safety>
 800257e:	6078      	str	r0, [r7, #4]
		    		break;
 8002580:	e050      	b.n	8002624 <StateMachine+0x10c>
				case VALVE_CHECK:
					control = ValveCheck(ctrl);
 8002582:	6838      	ldr	r0, [r7, #0]
 8002584:	f001 fce4 	bl	8003f50 <ValveCheck>
 8002588:	6078      	str	r0, [r7, #4]
					break;
 800258a:	e04b      	b.n	8002624 <StateMachine+0x10c>
				case LOX_PRE_FILL:
					control = LoxPreFill(ctrl);
 800258c:	6838      	ldr	r0, [r7, #0]
 800258e:	f7fe fb85 	bl	8000c9c <LoxPreFill>
 8002592:	4603      	mov	r3, r0
 8002594:	607b      	str	r3, [r7, #4]
					break;
 8002596:	e045      	b.n	8002624 <StateMachine+0x10c>
				case LOX_FILL:
					control = LoxFill(ctrl);
 8002598:	6838      	ldr	r0, [r7, #0]
 800259a:	f7fe fb05 	bl	8000ba8 <LoxFill>
 800259e:	4603      	mov	r3, r0
 80025a0:	607b      	str	r3, [r7, #4]
					break;
 80025a2:	e03f      	b.n	8002624 <StateMachine+0x10c>
				case LOX_CHILL:
					control = LoxChill(ctrl);
 80025a4:	6838      	ldr	r0, [r7, #0]
 80025a6:	f7fe fa85 	bl	8000ab4 <LoxChill>
 80025aa:	6078      	str	r0, [r7, #4]
				    break;
 80025ac:	e03a      	b.n	8002624 <StateMachine+0x10c>
				case PRESSURIZE:
					control = Pressurize(ctrl);
 80025ae:	6838      	ldr	r0, [r7, #0]
 80025b0:	f7ff fc70 	bl	8001e94 <Pressurize>
 80025b4:	6078      	str	r0, [r7, #4]
					break;
 80025b6:	e035      	b.n	8002624 <StateMachine+0x10c>
				case IGNITION:
					control = Ignition(ctrl);
 80025b8:	6838      	ldr	r0, [r7, #0]
 80025ba:	f7fe f867 	bl	800068c <Ignition>
 80025be:	6078      	str	r0, [r7, #4]
					break;
 80025c0:	e030      	b.n	8002624 <StateMachine+0x10c>
				case OXIDIZER_START:
					control = OxidizerStart(ctrl);
 80025c2:	6838      	ldr	r0, [r7, #0]
 80025c4:	f7ff fbdc 	bl	8001d80 <OxidizerStart>
 80025c8:	6078      	str	r0, [r7, #4]
					break;
 80025ca:	e02b      	b.n	8002624 <StateMachine+0x10c>
				case FIRING:
					control = Firing(ctrl);
 80025cc:	6838      	ldr	r0, [r7, #0]
 80025ce:	f7fd ffd3 	bl	8000578 <Firing>
 80025d2:	6078      	str	r0, [r7, #4]
					break;
 80025d4:	e026      	b.n	8002624 <StateMachine+0x10c>
				case PURGE:
					control = Purge(ctrl);
 80025d6:	6838      	ldr	r0, [r7, #0]
 80025d8:	f7ff fccc 	bl	8001f74 <Purge>
 80025dc:	6078      	str	r0, [r7, #4]
					break;
 80025de:	e021      	b.n	8002624 <StateMachine+0x10c>
				case SHUTDOWN:
					control = AutomaticShutdown(ctrl);
 80025e0:	6838      	ldr	r0, [r7, #0]
 80025e2:	f7ff fed9 	bl	8002398 <AutomaticShutdown>
 80025e6:	6078      	str	r0, [r7, #4]
					break;
 80025e8:	e01c      	b.n	8002624 <StateMachine+0x10c>
				case TURN_OFF:
					control = TurnOff(ctrl);
 80025ea:	6838      	ldr	r0, [r7, #0]
 80025ec:	f000 f9be 	bl	800296c <TurnOff>
 80025f0:	6078      	str	r0, [r7, #4]
					break;
 80025f2:	e017      	b.n	8002624 <StateMachine+0x10c>

				default:
					ctrl->currentState = SHUTDOWN;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	220a      	movs	r2, #10
 80025f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
					break;
 80025fc:	bf00      	nop
 80025fe:	e011      	b.n	8002624 <StateMachine+0x10c>
			}
		}else
		{
			ctrl->currentState = SHUTDOWN;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	220a      	movs	r2, #10
 8002604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	    	// Log Invalid State
	    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002614:	461a      	mov	r2, r3
 8002616:	4808      	ldr	r0, [pc, #32]	; (8002638 <StateMachine+0x120>)
 8002618:	f7ff fb54 	bl	8001cc4 <Get_Invalid_State_Error_Msg>
	    	UART_SendMessage(&huart2,Tx_Buffer);
 800261c:	4906      	ldr	r1, [pc, #24]	; (8002638 <StateMachine+0x120>)
 800261e:	4807      	ldr	r0, [pc, #28]	; (800263c <StateMachine+0x124>)
 8002620:	f7fe fc1a 	bl	8000e58 <UART_SendMessage>
	while(TRUE == control)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b01      	cmp	r3, #1
 8002628:	f43f af7c 	beq.w	8002524 <StateMachine+0xc>
			//ERROR HANDLE
		}
		// WD check
	}
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000360 	.word	0x20000360
 800263c:	20001650 	.word	0x20001650

08002640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_MspInit+0x44>)
 8002648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264a:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <HAL_MspInit+0x44>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6613      	str	r3, [r2, #96]	; 0x60
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <HAL_MspInit+0x44>)
 8002654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_MspInit+0x44>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	4a08      	ldr	r2, [pc, #32]	; (8002684 <HAL_MspInit+0x44>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002668:	6593      	str	r3, [r2, #88]	; 0x58
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_MspInit+0x44>)
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000

08002688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08e      	sub	sp, #56	; 0x38
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a53      	ldr	r2, [pc, #332]	; (80027f4 <HAL_UART_MspInit+0x16c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d131      	bne.n	800270e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026aa:	4b53      	ldr	r3, [pc, #332]	; (80027f8 <HAL_UART_MspInit+0x170>)
 80026ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ae:	4a52      	ldr	r2, [pc, #328]	; (80027f8 <HAL_UART_MspInit+0x170>)
 80026b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b4:	6593      	str	r3, [r2, #88]	; 0x58
 80026b6:	4b50      	ldr	r3, [pc, #320]	; (80027f8 <HAL_UART_MspInit+0x170>)
 80026b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	623b      	str	r3, [r7, #32]
 80026c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	4b4d      	ldr	r3, [pc, #308]	; (80027f8 <HAL_UART_MspInit+0x170>)
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	4a4c      	ldr	r2, [pc, #304]	; (80027f8 <HAL_UART_MspInit+0x170>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ce:	4b4a      	ldr	r3, [pc, #296]	; (80027f8 <HAL_UART_MspInit+0x170>)
 80026d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026da:	230c      	movs	r3, #12
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026de:	2302      	movs	r3, #2
 80026e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e6:	2303      	movs	r3, #3
 80026e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026ea:	2307      	movs	r3, #7
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f2:	4619      	mov	r1, r3
 80026f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f8:	f001 fee4 	bl	80044c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026fc:	2200      	movs	r2, #0
 80026fe:	2100      	movs	r1, #0
 8002700:	2026      	movs	r0, #38	; 0x26
 8002702:	f001 fe64 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002706:	2026      	movs	r0, #38	; 0x26
 8002708:	f001 fe7d 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800270c:	e06d      	b.n	80027ea <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART3)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a3a      	ldr	r2, [pc, #232]	; (80027fc <HAL_UART_MspInit+0x174>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d168      	bne.n	80027ea <HAL_UART_MspInit+0x162>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002718:	4b37      	ldr	r3, [pc, #220]	; (80027f8 <HAL_UART_MspInit+0x170>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	4a36      	ldr	r2, [pc, #216]	; (80027f8 <HAL_UART_MspInit+0x170>)
 800271e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002722:	6593      	str	r3, [r2, #88]	; 0x58
 8002724:	4b34      	ldr	r3, [pc, #208]	; (80027f8 <HAL_UART_MspInit+0x170>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002730:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <HAL_UART_MspInit+0x170>)
 8002732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002734:	4a30      	ldr	r2, [pc, #192]	; (80027f8 <HAL_UART_MspInit+0x170>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800273c:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <HAL_UART_MspInit+0x170>)
 800273e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002748:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <HAL_UART_MspInit+0x170>)
 800274a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274c:	4a2a      	ldr	r2, [pc, #168]	; (80027f8 <HAL_UART_MspInit+0x170>)
 800274e:	f043 0304 	orr.w	r3, r3, #4
 8002752:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002754:	4b28      	ldr	r3, [pc, #160]	; (80027f8 <HAL_UART_MspInit+0x170>)
 8002756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002760:	4b25      	ldr	r3, [pc, #148]	; (80027f8 <HAL_UART_MspInit+0x170>)
 8002762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002764:	4a24      	ldr	r2, [pc, #144]	; (80027f8 <HAL_UART_MspInit+0x170>)
 8002766:	f043 0302 	orr.w	r3, r3, #2
 800276a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800276c:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <HAL_UART_MspInit+0x170>)
 800276e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002778:	2340      	movs	r3, #64	; 0x40
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277c:	2302      	movs	r3, #2
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002784:	2303      	movs	r3, #3
 8002786:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002788:	2307      	movs	r3, #7
 800278a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002790:	4619      	mov	r1, r3
 8002792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002796:	f001 fe95 	bl	80044c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800279a:	2330      	movs	r3, #48	; 0x30
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279e:	2302      	movs	r3, #2
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a6:	2303      	movs	r3, #3
 80027a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027aa:	2307      	movs	r3, #7
 80027ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027b2:	4619      	mov	r1, r3
 80027b4:	4812      	ldr	r0, [pc, #72]	; (8002800 <HAL_UART_MspInit+0x178>)
 80027b6:	f001 fe85 	bl	80044c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80027ba:	2302      	movs	r3, #2
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027be:	2302      	movs	r3, #2
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c6:	2303      	movs	r3, #3
 80027c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027ca:	2307      	movs	r3, #7
 80027cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d2:	4619      	mov	r1, r3
 80027d4:	480b      	ldr	r0, [pc, #44]	; (8002804 <HAL_UART_MspInit+0x17c>)
 80027d6:	f001 fe75 	bl	80044c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	2100      	movs	r1, #0
 80027de:	2027      	movs	r0, #39	; 0x27
 80027e0:	f001 fdf5 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027e4:	2027      	movs	r0, #39	; 0x27
 80027e6:	f001 fe0e 	bl	8004406 <HAL_NVIC_EnableIRQ>
}
 80027ea:	bf00      	nop
 80027ec:	3738      	adds	r7, #56	; 0x38
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40004400 	.word	0x40004400
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40004800 	.word	0x40004800
 8002800:	48000800 	.word	0x48000800
 8002804:	48000400 	.word	0x48000400

08002808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800280c:	e7fe      	b.n	800280c <NMI_Handler+0x4>

0800280e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002812:	e7fe      	b.n	8002812 <HardFault_Handler+0x4>

08002814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002818:	e7fe      	b.n	8002818 <MemManage_Handler+0x4>

0800281a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800281a:	b480      	push	{r7}
 800281c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800281e:	e7fe      	b.n	800281e <BusFault_Handler+0x4>

08002820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002824:	e7fe      	b.n	8002824 <UsageFault_Handler+0x4>

08002826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002826:	b480      	push	{r7}
 8002828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002854:	f001 fc86 	bl	8004164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002858:	bf00      	nop
 800285a:	bd80      	pop	{r7, pc}

0800285c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002860:	4802      	ldr	r0, [pc, #8]	; (800286c <USART2_IRQHandler+0x10>)
 8002862:	f003 fcbd 	bl	80061e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20001650 	.word	0x20001650

08002870 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002874:	4802      	ldr	r0, [pc, #8]	; (8002880 <USART3_IRQHandler+0x10>)
 8002876:	f003 fcb3 	bl	80061e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000250 	.word	0x20000250

08002884 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002888:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800288c:	f001 fff4 	bl	8004878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002890:	bf00      	nop
 8002892:	bd80      	pop	{r7, pc}

08002894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800289c:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <_sbrk+0x5c>)
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <_sbrk+0x60>)
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a8:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <_sbrk+0x64>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <_sbrk+0x64>)
 80028b2:	4a12      	ldr	r2, [pc, #72]	; (80028fc <_sbrk+0x68>)
 80028b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <_sbrk+0x64>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d207      	bcs.n	80028d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c4:	f004 fad6 	bl	8006e74 <__errno>
 80028c8:	4603      	mov	r3, r0
 80028ca:	220c      	movs	r2, #12
 80028cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295
 80028d2:	e009      	b.n	80028e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <_sbrk+0x64>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028da:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <_sbrk+0x64>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	4a05      	ldr	r2, [pc, #20]	; (80028f8 <_sbrk+0x64>)
 80028e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028e6:	68fb      	ldr	r3, [r7, #12]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20018000 	.word	0x20018000
 80028f4:	00000400 	.word	0x00000400
 80028f8:	20000178 	.word	0x20000178
 80028fc:	20001730 	.word	0x20001730

08002900 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002904:	4b17      	ldr	r3, [pc, #92]	; (8002964 <SystemInit+0x64>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	4a16      	ldr	r2, [pc, #88]	; (8002964 <SystemInit+0x64>)
 800290c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002914:	4b14      	ldr	r3, [pc, #80]	; (8002968 <SystemInit+0x68>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a13      	ldr	r2, [pc, #76]	; (8002968 <SystemInit+0x68>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002920:	4b11      	ldr	r3, [pc, #68]	; (8002968 <SystemInit+0x68>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <SystemInit+0x68>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a0f      	ldr	r2, [pc, #60]	; (8002968 <SystemInit+0x68>)
 800292c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002930:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002934:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <SystemInit+0x68>)
 8002938:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800293c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <SystemInit+0x68>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a09      	ldr	r2, [pc, #36]	; (8002968 <SystemInit+0x68>)
 8002944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002948:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800294a:	4b07      	ldr	r3, [pc, #28]	; (8002968 <SystemInit+0x68>)
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <SystemInit+0x64>)
 8002952:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002956:	609a      	str	r2, [r3, #8]
#endif
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000ed00 	.word	0xe000ed00
 8002968:	40021000 	.word	0x40021000

0800296c <TurnOff>:
//  System Risk Factor = 0.33 (Catastrophic, Unlikely)
#include "turnoff.h"
#include "ring_buffer.h"


uint32_t TurnOff(struct StateVars *ctrl){
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8002974:	2300      	movs	r3, #0
 8002976:	60fb      	str	r3, [r7, #12]

	ctrl->valveConfiguration = StateConfiguration();
 8002978:	f000 f900 	bl	8002b7c <StateConfiguration>
 800297c:	4602      	mov	r2, r0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	62da      	str	r2, [r3, #44]	; 0x2c
	ctrl->valveTarget  = ((uint16_t)sovf01  \
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2288      	movs	r2, #136	; 0x88
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
				  |(uint16_t)pvl02);

     //Todo Do we want to set all the valves OFF instead ????

    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f8ba 	bl	8002b08 <VerifyState>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d046      	beq.n	8002a28 <TurnOff+0xbc>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 f8b1 	bl	8002b08 <VerifyState>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d03d      	beq.n	8002a28 <TurnOff+0xbc>
    {
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b2:	f003 030b 	and.w	r3, r3, #11
 80029b6:	2b0b      	cmp	r3, #11
 80029b8:	d129      	bne.n	8002a0e <TurnOff+0xa2>
    		// pvf01   pvl01   pvp01   sovf01   pvf02   pvl03   pvlf01   pvl02   pvp02  IG1
    		//|  0  |   0  |   0  |   1  |   0  |   0  |   0  |   1  |   0  | 0

    		StateStatus(ctrl);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f84e 	bl	8002a5c <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d003      	beq.n	80029d8 <TurnOff+0x6c>
    	    {
    			success = StateInitialize(ctrl);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fa25 	bl	8002e20 <StateInitialize>
 80029d6:	60f8      	str	r0, [r7, #12]
    	    }

			success = (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	429a      	cmp	r2, r3
 80029e2:	bf0c      	ite	eq
 80029e4:	2301      	moveq	r3, #1
 80029e6:	2300      	movne	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	60fb      	str	r3, [r7, #12]

			//shutdown ANY PROCEDURES
			ctrl->isStateMachineRunning = FALSE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	629a      	str	r2, [r3, #40]	; 0x28

    		// Increment state counter
			ctrl->stateCounter++;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a04:	d11f      	bne.n	8002a46 <TurnOff+0xda>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 8002a0c:	e01b      	b.n	8002a46 <TurnOff+0xda>

    	}else{
    		// Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, TURN_OFF, ctrl->currentState);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a14:	461a      	mov	r2, r3
 8002a16:	210b      	movs	r1, #11
 8002a18:	480e      	ldr	r0, [pc, #56]	; (8002a54 <TurnOff+0xe8>)
 8002a1a:	f7ff f8d9 	bl	8001bd0 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8002a1e:	490d      	ldr	r1, [pc, #52]	; (8002a54 <TurnOff+0xe8>)
 8002a20:	480d      	ldr	r0, [pc, #52]	; (8002a58 <TurnOff+0xec>)
 8002a22:	f7fe fa19 	bl	8000e58 <UART_SendMessage>
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 8002a26:	e00e      	b.n	8002a46 <TurnOff+0xda>
    	}
    }else{
    	// Log Invalid State
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a34:	461a      	mov	r2, r3
 8002a36:	4807      	ldr	r0, [pc, #28]	; (8002a54 <TurnOff+0xe8>)
 8002a38:	f7ff f944 	bl	8001cc4 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2,Tx_Buffer);
 8002a3c:	4905      	ldr	r1, [pc, #20]	; (8002a54 <TurnOff+0xe8>)
 8002a3e:	4806      	ldr	r0, [pc, #24]	; (8002a58 <TurnOff+0xec>)
 8002a40:	f7fe fa0a 	bl	8000e58 <UART_SendMessage>
 8002a44:	e000      	b.n	8002a48 <TurnOff+0xdc>
    	if((ctrl->currentState & TURN_OFF) == TURN_OFF){
 8002a46:	bf00      	nop
    }
 return 0; // end the program
 8002a48:	2300      	movs	r3, #0

}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000360 	.word	0x20000360
 8002a58:	20001650 	.word	0x20001650

08002a5c <StateStatus>:
#include "utilities.h"
#include "messages.h"
#include "valve_check.h"

//Function that sends the current state status to the user
void StateStatus(struct StateVars *ctrl){
 8002a5c:	b5b0      	push	{r4, r5, r7, lr}
 8002a5e:	b090      	sub	sp, #64	; 0x40
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

     int state = ctrl->currentState;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a6a:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char* naming[] = { [0] = "State : Safety\n", [1] = "State : Valve Check\n" ,	\
 8002a6c:	4b21      	ldr	r3, [pc, #132]	; (8002af4 <StateStatus+0x98>)
 8002a6e:	f107 040c 	add.w	r4, r7, #12
 8002a72:	461d      	mov	r5, r3
 8002a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002a80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		[2] = "State : Lox Pre Fill\n", [3] = "State : Lox Fill\n", [4] = "State : Lox Chill\n",	\
		[5] = "State : Pressurize\n", [6] = "State : Ignition\n",	[7] = "State : Oxidizer Start\n",\
		[8] = "State : Firing\n", [9] = "State : Purge\n",	[10] = "State : Shutdown\n", [11] = "State : Turn Off\n" };

		if (ctrl->lastState  != ctrl->currentState){
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d019      	beq.n	8002ac8 <StateStatus+0x6c>
			UART_SendMessage(&huart2, naming[state]);
 8002a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4814      	ldr	r0, [pc, #80]	; (8002af8 <StateStatus+0x9c>)
 8002aa6:	f7fe f9d7 	bl	8000e58 <UART_SendMessage>
			UART_SendMessage_VI(&huart3, naming[state]);
 8002aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4810      	ldr	r0, [pc, #64]	; (8002afc <StateStatus+0xa0>)
 8002abc:	f7fe f9ee 	bl	8000e9c <UART_SendMessage_VI>

			// Flag for the transitioning to the same state
			retransition = FALSE;
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <StateStatus+0xa4>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
			UART_SendMessage(&huart2, naming[state]);
			//UART_SendMessage_VI(&huart3, naming[state]);
			status = FALSE;

		}
}// end of function
 8002ac6:	e011      	b.n	8002aec <StateStatus+0x90>
		else if(status)
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <StateStatus+0xa8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00d      	beq.n	8002aec <StateStatus+0x90>
			UART_SendMessage(&huart2, naming[state]);
 8002ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002ad8:	4413      	add	r3, r2
 8002ada:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4805      	ldr	r0, [pc, #20]	; (8002af8 <StateStatus+0x9c>)
 8002ae2:	f7fe f9b9 	bl	8000e58 <UART_SendMessage>
			status = FALSE;
 8002ae6:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <StateStatus+0xa8>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
}// end of function
 8002aec:	bf00      	nop
 8002aee:	3740      	adds	r7, #64	; 0x40
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bdb0      	pop	{r4, r5, r7, pc}
 8002af4:	08007a00 	.word	0x08007a00
 8002af8:	20001650 	.word	0x20001650
 8002afc:	20000250 	.word	0x20000250
 8002b00:	200015d0 	.word	0x200015d0
 8002b04:	20001700 	.word	0x20001700

08002b08 <VerifyState>:
 *  	success <uint32_t>: TRUE | FALSE | 1 | 0
 *
 *  Notes:
 */
uint32_t VerifyState(int state)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

	uint32_t success = FALSE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
    if(state <= TURN_OFF && state >= SAFETY)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b0b      	cmp	r3, #11
 8002b18:	dc25      	bgt.n	8002b66 <VerifyState+0x5e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	db22      	blt.n	8002b66 <VerifyState+0x5e>
    {
    	success = TRUE;
 8002b20:	2301      	movs	r3, #1
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b0b      	cmp	r3, #11
 8002b28:	d81a      	bhi.n	8002b60 <VerifyState+0x58>
 8002b2a:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <VerifyState+0x28>)
 8002b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b30:	08002b6b 	.word	0x08002b6b
 8002b34:	08002b6b 	.word	0x08002b6b
 8002b38:	08002b6b 	.word	0x08002b6b
 8002b3c:	08002b6b 	.word	0x08002b6b
 8002b40:	08002b6b 	.word	0x08002b6b
 8002b44:	08002b6b 	.word	0x08002b6b
 8002b48:	08002b6b 	.word	0x08002b6b
 8002b4c:	08002b6b 	.word	0x08002b6b
 8002b50:	08002b6b 	.word	0x08002b6b
 8002b54:	08002b6b 	.word	0x08002b6b
 8002b58:	08002b6b 	.word	0x08002b6b
 8002b5c:	08002b6b 	.word	0x08002b6b
				break;
			case TURN_OFF:
				break;

			default:
				success = FALSE;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
				break;
 8002b64:	e002      	b.n	8002b6c <VerifyState+0x64>
		}
    }
 8002b66:	bf00      	nop
 8002b68:	e000      	b.n	8002b6c <VerifyState+0x64>
				break;
 8002b6a:	bf00      	nop
	return success;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop

08002b7c <StateConfiguration>:
// 1 << 0 = 0001    0 << 0 = 0000
// 1 << 2 = 0100    0 << 2 = 0000

// EX- if vc = 0001 then 0001 | 0010 , vc = 0011
uint32_t StateConfiguration()
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
	uint32_t vc = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]
	//pvf01 - Fuel Pressure (PA_11)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin) << 0);
 8002b86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8e:	f001 fe43 	bl	8004818 <HAL_GPIO_ReadPin>
 8002b92:	4603      	mov	r3, r0
 8002b94:	461a      	mov	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	607b      	str	r3, [r7, #4]

	//pvl01 - Lox Pressure (PA_12)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin) << 1);
 8002b9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba4:	f001 fe38 	bl	8004818 <HAL_GPIO_ReadPin>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	461a      	mov	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	607b      	str	r3, [r7, #4]

	//pvp01 - Fuel Purge N2 (PC_7)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin) << 2);
 8002bb4:	2180      	movs	r1, #128	; 0x80
 8002bb6:	482e      	ldr	r0, [pc, #184]	; (8002c70 <StateConfiguration+0xf4>)
 8002bb8:	f001 fe2e 	bl	8004818 <HAL_GPIO_ReadPin>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	607b      	str	r3, [r7, #4]

	//sovf01 - Fuel Vent (PC_6)
	vc |= (uint32_t)(HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin) << 3);
 8002bc8:	2140      	movs	r1, #64	; 0x40
 8002bca:	4829      	ldr	r0, [pc, #164]	; (8002c70 <StateConfiguration+0xf4>)
 8002bcc:	f001 fe24 	bl	8004818 <HAL_GPIO_ReadPin>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	607b      	str	r3, [r7, #4]

	//pvf02 - Fuel Main (PA_9)
	vc |= (uint32_t)(HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin) << 4);
 8002bdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be4:	f001 fe18 	bl	8004818 <HAL_GPIO_ReadPin>
 8002be8:	4603      	mov	r3, r0
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	461a      	mov	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	607b      	str	r3, [r7, #4]

	//pvl03 - Lox Main (PA_8)
	vc |= (uint32_t)(HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin) << 5);
 8002bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bfc:	f001 fe0c 	bl	8004818 <HAL_GPIO_ReadPin>
 8002c00:	4603      	mov	r3, r0
 8002c02:	015b      	lsls	r3, r3, #5
 8002c04:	461a      	mov	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	607b      	str	r3, [r7, #4]

	//pvlf01 - Lox Fill (PB_15)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin) << 6);
 8002c0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c10:	4818      	ldr	r0, [pc, #96]	; (8002c74 <StateConfiguration+0xf8>)
 8002c12:	f001 fe01 	bl	8004818 <HAL_GPIO_ReadPin>
 8002c16:	4603      	mov	r3, r0
 8002c18:	019b      	lsls	r3, r3, #6
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	607b      	str	r3, [r7, #4]

	//pvl02 - Lox Vent (PB_10)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin) << 7);
 8002c22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c26:	4813      	ldr	r0, [pc, #76]	; (8002c74 <StateConfiguration+0xf8>)
 8002c28:	f001 fdf6 	bl	8004818 <HAL_GPIO_ReadPin>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	01db      	lsls	r3, r3, #7
 8002c30:	461a      	mov	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	607b      	str	r3, [r7, #4]

	//pvp02 - Lox Purge (PB_13)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin) << 8);
 8002c38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c3c:	480d      	ldr	r0, [pc, #52]	; (8002c74 <StateConfiguration+0xf8>)
 8002c3e:	f001 fdeb 	bl	8004818 <HAL_GPIO_ReadPin>
 8002c42:	4603      	mov	r3, r0
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	461a      	mov	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	607b      	str	r3, [r7, #4]

	//IG1 - Igniter (PA_10)
	vc |= (uint32_t)(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 9);
 8002c4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c56:	f001 fddf 	bl	8004818 <HAL_GPIO_ReadPin>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	025b      	lsls	r3, r3, #9
 8002c5e:	461a      	mov	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	607b      	str	r3, [r7, #4]

	return vc;
 8002c66:	687b      	ldr	r3, [r7, #4]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	48000800 	.word	0x48000800
 8002c74:	48000400 	.word	0x48000400

08002c78 <ValveStateSetter>:
 *
 *  Notes:
 */

uint32_t ValveStateSetter(uint32_t vs)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	uint32_t success = FALSE;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
	//pvf01
	(vs & (uint32_t)pvf01) == (uint32_t)pvf01 \
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f003 0301 	and.w	r3, r3, #1
			? HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_RESET);
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d007      	beq.n	8002c9e <ValveStateSetter+0x26>
			? HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_SET) \
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c98:	f001 fdd6 	bl	8004848 <HAL_GPIO_WritePin>
 8002c9c:	e006      	b.n	8002cac <ValveStateSetter+0x34>
			: HAL_GPIO_WritePin(GPIOA, FUEL_PRESSURE_Pin,GPIO_PIN_RESET);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ca8:	f001 fdce 	bl	8004848 <HAL_GPIO_WritePin>

	//pvl01
	(vs & (uint32_t)pvl01) == (uint32_t)pvl01 \
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f003 0302 	and.w	r3, r3, #2
			? HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_RESET);
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <ValveStateSetter+0x4e>
			? HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_SET) \
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cc0:	f001 fdc2 	bl	8004848 <HAL_GPIO_WritePin>
 8002cc4:	e006      	b.n	8002cd4 <ValveStateSetter+0x5c>
			: HAL_GPIO_WritePin(GPIOA, LOX_PRESSURE_Pin,GPIO_PIN_RESET);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cd0:	f001 fdba 	bl	8004848 <HAL_GPIO_WritePin>

	//pvp01
	(vs & (uint32_t)pvp01) == (uint32_t)pvp01 \
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f003 0304 	and.w	r3, r3, #4
			? HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_RESET);
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <ValveStateSetter+0x72>
			? HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_SET) \
 8002cde:	2201      	movs	r2, #1
 8002ce0:	2180      	movs	r1, #128	; 0x80
 8002ce2:	484d      	ldr	r0, [pc, #308]	; (8002e18 <ValveStateSetter+0x1a0>)
 8002ce4:	f001 fdb0 	bl	8004848 <HAL_GPIO_WritePin>
 8002ce8:	e004      	b.n	8002cf4 <ValveStateSetter+0x7c>
			: HAL_GPIO_WritePin(GPIOC, FUEL_PURGE_N2_Pin,GPIO_PIN_RESET);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2180      	movs	r1, #128	; 0x80
 8002cee:	484a      	ldr	r0, [pc, #296]	; (8002e18 <ValveStateSetter+0x1a0>)
 8002cf0:	f001 fdaa 	bl	8004848 <HAL_GPIO_WritePin>

	//sovf01
	(vs & (uint32_t)sovf01) == (uint32_t)sovf01 \
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
			? HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_RESET);
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d005      	beq.n	8002d0a <ValveStateSetter+0x92>
			? HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_SET) \
 8002cfe:	2201      	movs	r2, #1
 8002d00:	2140      	movs	r1, #64	; 0x40
 8002d02:	4845      	ldr	r0, [pc, #276]	; (8002e18 <ValveStateSetter+0x1a0>)
 8002d04:	f001 fda0 	bl	8004848 <HAL_GPIO_WritePin>
 8002d08:	e004      	b.n	8002d14 <ValveStateSetter+0x9c>
			: HAL_GPIO_WritePin(GPIOC, FUEL_VENT_Pin,GPIO_PIN_RESET);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2140      	movs	r1, #64	; 0x40
 8002d0e:	4842      	ldr	r0, [pc, #264]	; (8002e18 <ValveStateSetter+0x1a0>)
 8002d10:	f001 fd9a 	bl	8004848 <HAL_GPIO_WritePin>

	//pvf02
	(vs & (uint32_t)pvf02) == (uint32_t)pvf02 \
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f003 0310 	and.w	r3, r3, #16
			? HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_RESET);
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d007      	beq.n	8002d2e <ValveStateSetter+0xb6>
			? HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_SET) \
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d28:	f001 fd8e 	bl	8004848 <HAL_GPIO_WritePin>
 8002d2c:	e006      	b.n	8002d3c <ValveStateSetter+0xc4>
			: HAL_GPIO_WritePin(GPIOA, FUEL_MAIN_Pin,GPIO_PIN_RESET);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d38:	f001 fd86 	bl	8004848 <HAL_GPIO_WritePin>

	//pvl03
	(vs & (uint32_t)pvl03) == (uint32_t)pvl03 \
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
			? HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_RESET);
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d007      	beq.n	8002d56 <ValveStateSetter+0xde>
			? HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_SET) \
 8002d46:	2201      	movs	r2, #1
 8002d48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d50:	f001 fd7a 	bl	8004848 <HAL_GPIO_WritePin>
 8002d54:	e006      	b.n	8002d64 <ValveStateSetter+0xec>
			: HAL_GPIO_WritePin(GPIOA, LOX_MAIN_Pin,GPIO_PIN_RESET);
 8002d56:	2200      	movs	r2, #0
 8002d58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d60:	f001 fd72 	bl	8004848 <HAL_GPIO_WritePin>

	//pvlf01
	(vs & (uint32_t)pvlf01) == (uint32_t)pvlf01 \
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
			? HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin ,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin,GPIO_PIN_RESET);
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d006      	beq.n	8002d7c <ValveStateSetter+0x104>
			? HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin ,GPIO_PIN_SET) \
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d74:	4829      	ldr	r0, [pc, #164]	; (8002e1c <ValveStateSetter+0x1a4>)
 8002d76:	f001 fd67 	bl	8004848 <HAL_GPIO_WritePin>
 8002d7a:	e005      	b.n	8002d88 <ValveStateSetter+0x110>
			: HAL_GPIO_WritePin(GPIOB, LOX_FILL_Pin,GPIO_PIN_RESET);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d82:	4826      	ldr	r0, [pc, #152]	; (8002e1c <ValveStateSetter+0x1a4>)
 8002d84:	f001 fd60 	bl	8004848 <HAL_GPIO_WritePin>

	//pvl02
	(vs & (uint32_t)pvl02) == (uint32_t)pvl02 \
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
			? HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_RESET);
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d006      	beq.n	8002da0 <ValveStateSetter+0x128>
			? HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_SET) \
 8002d92:	2201      	movs	r2, #1
 8002d94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d98:	4820      	ldr	r0, [pc, #128]	; (8002e1c <ValveStateSetter+0x1a4>)
 8002d9a:	f001 fd55 	bl	8004848 <HAL_GPIO_WritePin>
 8002d9e:	e005      	b.n	8002dac <ValveStateSetter+0x134>
			: HAL_GPIO_WritePin(GPIOB, LOX_VENT_Pin,GPIO_PIN_RESET);
 8002da0:	2200      	movs	r2, #0
 8002da2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002da6:	481d      	ldr	r0, [pc, #116]	; (8002e1c <ValveStateSetter+0x1a4>)
 8002da8:	f001 fd4e 	bl	8004848 <HAL_GPIO_WritePin>

	//pvp02
	(vs & (uint32_t)pvp02) == (uint32_t)pvp02 \
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
			? HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_RESET);
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d006      	beq.n	8002dc4 <ValveStateSetter+0x14c>
			? HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_SET) \
 8002db6:	2201      	movs	r2, #1
 8002db8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dbc:	4817      	ldr	r0, [pc, #92]	; (8002e1c <ValveStateSetter+0x1a4>)
 8002dbe:	f001 fd43 	bl	8004848 <HAL_GPIO_WritePin>
 8002dc2:	e005      	b.n	8002dd0 <ValveStateSetter+0x158>
			: HAL_GPIO_WritePin(GPIOB, LOX_PURGE_Pin,GPIO_PIN_RESET);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dca:	4814      	ldr	r0, [pc, #80]	; (8002e1c <ValveStateSetter+0x1a4>)
 8002dcc:	f001 fd3c 	bl	8004848 <HAL_GPIO_WritePin>

	//IG1
	(vs & (uint32_t)IG1) == (uint32_t)IG1 \
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
			? HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET) \
			: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <ValveStateSetter+0x172>
			? HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET) \
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002de4:	f001 fd30 	bl	8004848 <HAL_GPIO_WritePin>
 8002de8:	e006      	b.n	8002df8 <ValveStateSetter+0x180>
			: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
 8002dea:	2200      	movs	r2, #0
 8002dec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002df4:	f001 fd28 	bl	8004848 <HAL_GPIO_WritePin>


	success = (vs == StateConfiguration() ? TRUE : FALSE);
 8002df8:	f7ff fec0 	bl	8002b7c <StateConfiguration>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4293      	cmp	r3, r2
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	60fb      	str	r3, [r7, #12]

	return success;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	48000800 	.word	0x48000800
 8002e1c:	48000400 	.word	0x48000400

08002e20 <StateInitialize>:
 *  success <uint32_t>: TRUE | FALSE | 1 | 0
 *
 *  Notes:
 */
uint32_t StateInitialize(struct StateVars *ctrl)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	uint32_t success = TRUE;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
	// Reset state counter, log start
	ctrl->stateCounter = 0;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]
	ctrl->timeStarted = HAL_GetTick();;
 8002e32:	f001 f9ab 	bl	800418c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	601a      	str	r2, [r3, #0]

	// Change State conditions
	ctrl->lastState = ctrl->currentState;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	// Set Valve States
	ValveStateSetter(ctrl->valveTarget);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff13 	bl	8002c78 <ValveStateSetter>
	ctrl->valveConfiguration = StateConfiguration();
 8002e52:	f7ff fe93 	bl	8002b7c <StateConfiguration>
 8002e56:	4602      	mov	r2, r0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c

	///success = SendStatusMessage(ctrl);
	return success;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <ValveCheckCmd>:


//Function to handle individual valves (Part of the Valve check state)
void ValveCheckCmd(struct StateVars *ctrl){
 8002e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e6a:	b091      	sub	sp, #68	; 0x44
 8002e6c:	af08      	add	r7, sp, #32
 8002e6e:	60f8      	str	r0, [r7, #12]

	uint32_t success = TRUE;
 8002e70:	2301      	movs	r3, #1
 8002e72:	61fb      	str	r3, [r7, #28]

    	   if (command == IGON){
 8002e74:	4ba4      	ldr	r3, [pc, #656]	; (8003108 <ValveCheckCmd+0x2a0>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4ba4      	ldr	r3, [pc, #656]	; (800310c <ValveCheckCmd+0x2a4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d13b      	bne.n	8002ef8 <ValveCheckCmd+0x90>
				if (cmd_flag && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8002e80:	4ba3      	ldr	r3, [pc, #652]	; (8003110 <ValveCheckCmd+0x2a8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d01f      	beq.n	8002ec8 <ValveCheckCmd+0x60>
 8002e88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e90:	f001 fcc2 	bl	8004818 <HAL_GPIO_ReadPin>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d116      	bne.n	8002ec8 <ValveCheckCmd+0x60>
					valves_selected |= (uint16_t)IG1;
 8002e9a:	4b9e      	ldr	r3, [pc, #632]	; (8003114 <ValveCheckCmd+0x2ac>)
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	4b9b      	ldr	r3, [pc, #620]	; (8003114 <ValveCheckCmd+0x2ac>)
 8002ea6:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " Igniter is ON...\n");
 8002ea8:	499b      	ldr	r1, [pc, #620]	; (8003118 <ValveCheckCmd+0x2b0>)
 8002eaa:	489c      	ldr	r0, [pc, #624]	; (800311c <ValveCheckCmd+0x2b4>)
 8002eac:	f7fd ffd4 	bl	8000e58 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " Igniter is ON...\n");
 8002eb0:	4999      	ldr	r1, [pc, #612]	; (8003118 <ValveCheckCmd+0x2b0>)
 8002eb2:	489b      	ldr	r0, [pc, #620]	; (8003120 <ValveCheckCmd+0x2b8>)
 8002eb4:	f7fd fff2 	bl	8000e9c <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8002eb8:	4b95      	ldr	r3, [pc, #596]	; (8003110 <ValveCheckCmd+0x2a8>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
					ignit = 1;
 8002ebe:	4b99      	ldr	r3, [pc, #612]	; (8003124 <ValveCheckCmd+0x2bc>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	f000 bdfc 	b.w	8003ac0 <ValveCheckCmd+0xc58>
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 8002ec8:	4b91      	ldr	r3, [pc, #580]	; (8003110 <ValveCheckCmd+0x2a8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 85f7 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 8002ed2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eda:	f001 fc9d 	bl	8004818 <HAL_GPIO_ReadPin>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 85ed 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
				{
					UART_SendMessage(&huart2, " Igniter is already ON...\n");
 8002ee6:	4990      	ldr	r1, [pc, #576]	; (8003128 <ValveCheckCmd+0x2c0>)
 8002ee8:	488c      	ldr	r0, [pc, #560]	; (800311c <ValveCheckCmd+0x2b4>)
 8002eea:	f7fd ffb5 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 8002eee:	4b88      	ldr	r3, [pc, #544]	; (8003110 <ValveCheckCmd+0x2a8>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	f000 bde4 	b.w	8003ac0 <ValveCheckCmd+0xc58>
				}
			}
			else if (command == IGOFF){
 8002ef8:	4b83      	ldr	r3, [pc, #524]	; (8003108 <ValveCheckCmd+0x2a0>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b8b      	ldr	r3, [pc, #556]	; (800312c <ValveCheckCmd+0x2c4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d13a      	bne.n	8002f7a <ValveCheckCmd+0x112>
				if (cmd_flag && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8002f04:	4b82      	ldr	r3, [pc, #520]	; (8003110 <ValveCheckCmd+0x2a8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d01e      	beq.n	8002f4a <ValveCheckCmd+0xe2>
 8002f0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f14:	f001 fc80 	bl	8004818 <HAL_GPIO_ReadPin>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d015      	beq.n	8002f4a <ValveCheckCmd+0xe2>
					valves_selected &= 0xFF;
 8002f1e:	4b7d      	ldr	r3, [pc, #500]	; (8003114 <ValveCheckCmd+0x2ac>)
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	4b7b      	ldr	r3, [pc, #492]	; (8003114 <ValveCheckCmd+0x2ac>)
 8002f28:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " Igniter is OFF...\n");
 8002f2a:	4981      	ldr	r1, [pc, #516]	; (8003130 <ValveCheckCmd+0x2c8>)
 8002f2c:	487b      	ldr	r0, [pc, #492]	; (800311c <ValveCheckCmd+0x2b4>)
 8002f2e:	f7fd ff93 	bl	8000e58 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " Igniter is OFF...\n");
 8002f32:	497f      	ldr	r1, [pc, #508]	; (8003130 <ValveCheckCmd+0x2c8>)
 8002f34:	487a      	ldr	r0, [pc, #488]	; (8003120 <ValveCheckCmd+0x2b8>)
 8002f36:	f7fd ffb1 	bl	8000e9c <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8002f3a:	4b75      	ldr	r3, [pc, #468]	; (8003110 <ValveCheckCmd+0x2a8>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
					ignit = 0;
 8002f40:	4b78      	ldr	r3, [pc, #480]	; (8003124 <ValveCheckCmd+0x2bc>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	f000 bdbb 	b.w	8003ac0 <ValveCheckCmd+0xc58>

				}
				else if (cmd_flag && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8002f4a:	4b71      	ldr	r3, [pc, #452]	; (8003110 <ValveCheckCmd+0x2a8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 85b6 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 8002f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f5c:	f001 fc5c 	bl	8004818 <HAL_GPIO_ReadPin>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f040 85ac 	bne.w	8003ac0 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " Igniter is already OFF...\n");
 8002f68:	4972      	ldr	r1, [pc, #456]	; (8003134 <ValveCheckCmd+0x2cc>)
 8002f6a:	486c      	ldr	r0, [pc, #432]	; (800311c <ValveCheckCmd+0x2b4>)
 8002f6c:	f7fd ff74 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 8002f70:	4b67      	ldr	r3, [pc, #412]	; (8003110 <ValveCheckCmd+0x2a8>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	f000 bda3 	b.w	8003ac0 <ValveCheckCmd+0xc58>
				}

			}
			else if(command == pvf01on){
 8002f7a:	4b63      	ldr	r3, [pc, #396]	; (8003108 <ValveCheckCmd+0x2a0>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4b6e      	ldr	r3, [pc, #440]	; (8003138 <ValveCheckCmd+0x2d0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d13b      	bne.n	8002ffe <ValveCheckCmd+0x196>
				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 8002f86:	4b62      	ldr	r3, [pc, #392]	; (8003110 <ValveCheckCmd+0x2a8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d01f      	beq.n	8002fce <ValveCheckCmd+0x166>
 8002f8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f96:	f001 fc3f 	bl	8004818 <HAL_GPIO_ReadPin>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d116      	bne.n	8002fce <ValveCheckCmd+0x166>
					valves_selected |= (uint16_t)pvf01;
 8002fa0:	4b5c      	ldr	r3, [pc, #368]	; (8003114 <ValveCheckCmd+0x2ac>)
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	4b5a      	ldr	r3, [pc, #360]	; (8003114 <ValveCheckCmd+0x2ac>)
 8002fac:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " pvf01 is ON...\n");
 8002fae:	4963      	ldr	r1, [pc, #396]	; (800313c <ValveCheckCmd+0x2d4>)
 8002fb0:	485a      	ldr	r0, [pc, #360]	; (800311c <ValveCheckCmd+0x2b4>)
 8002fb2:	f7fd ff51 	bl	8000e58 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " pvf01 is ON...\n");
 8002fb6:	4961      	ldr	r1, [pc, #388]	; (800313c <ValveCheckCmd+0x2d4>)
 8002fb8:	4859      	ldr	r0, [pc, #356]	; (8003120 <ValveCheckCmd+0x2b8>)
 8002fba:	f7fd ff6f 	bl	8000e9c <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8002fbe:	4b54      	ldr	r3, [pc, #336]	; (8003110 <ValveCheckCmd+0x2a8>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
					v1 =1;
 8002fc4:	4b5e      	ldr	r3, [pc, #376]	; (8003140 <ValveCheckCmd+0x2d8>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f000 bd79 	b.w	8003ac0 <ValveCheckCmd+0xc58>
				}
				else if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 8002fce:	4b50      	ldr	r3, [pc, #320]	; (8003110 <ValveCheckCmd+0x2a8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 8574 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 8002fd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fe0:	f001 fc1a 	bl	8004818 <HAL_GPIO_ReadPin>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 856a 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " pvf01 is already ON...\n");
 8002fec:	4955      	ldr	r1, [pc, #340]	; (8003144 <ValveCheckCmd+0x2dc>)
 8002fee:	484b      	ldr	r0, [pc, #300]	; (800311c <ValveCheckCmd+0x2b4>)
 8002ff0:	f7fd ff32 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 8002ff4:	4b46      	ldr	r3, [pc, #280]	; (8003110 <ValveCheckCmd+0x2a8>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	f000 bd61 	b.w	8003ac0 <ValveCheckCmd+0xc58>
				}
			}
			else if (command == pvf01off){
 8002ffe:	4b42      	ldr	r3, [pc, #264]	; (8003108 <ValveCheckCmd+0x2a0>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	4b51      	ldr	r3, [pc, #324]	; (8003148 <ValveCheckCmd+0x2e0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d13c      	bne.n	8003084 <ValveCheckCmd+0x21c>
				if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 800300a:	4b41      	ldr	r3, [pc, #260]	; (8003110 <ValveCheckCmd+0x2a8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d020      	beq.n	8003054 <ValveCheckCmd+0x1ec>
 8003012:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800301a:	f001 fbfd 	bl	8004818 <HAL_GPIO_ReadPin>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d017      	beq.n	8003054 <ValveCheckCmd+0x1ec>
					valves_selected &= 0x3FE;
 8003024:	4b3b      	ldr	r3, [pc, #236]	; (8003114 <ValveCheckCmd+0x2ac>)
 8003026:	881a      	ldrh	r2, [r3, #0]
 8003028:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800302c:	4013      	ands	r3, r2
 800302e:	b29a      	uxth	r2, r3
 8003030:	4b38      	ldr	r3, [pc, #224]	; (8003114 <ValveCheckCmd+0x2ac>)
 8003032:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " pvf01 is OFF...\n");
 8003034:	4945      	ldr	r1, [pc, #276]	; (800314c <ValveCheckCmd+0x2e4>)
 8003036:	4839      	ldr	r0, [pc, #228]	; (800311c <ValveCheckCmd+0x2b4>)
 8003038:	f7fd ff0e 	bl	8000e58 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " pvf01 is OFF...\n");
 800303c:	4943      	ldr	r1, [pc, #268]	; (800314c <ValveCheckCmd+0x2e4>)
 800303e:	4838      	ldr	r0, [pc, #224]	; (8003120 <ValveCheckCmd+0x2b8>)
 8003040:	f7fd ff2c 	bl	8000e9c <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8003044:	4b32      	ldr	r3, [pc, #200]	; (8003110 <ValveCheckCmd+0x2a8>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
					v1=0;
 800304a:	4b3d      	ldr	r3, [pc, #244]	; (8003140 <ValveCheckCmd+0x2d8>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	f000 bd36 	b.w	8003ac0 <ValveCheckCmd+0xc58>
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 8003054:	4b2e      	ldr	r3, [pc, #184]	; (8003110 <ValveCheckCmd+0x2a8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8531 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 800305e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003066:	f001 fbd7 	bl	8004818 <HAL_GPIO_ReadPin>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	f040 8527 	bne.w	8003ac0 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " pvf01 is already OFF...\n");
 8003072:	4937      	ldr	r1, [pc, #220]	; (8003150 <ValveCheckCmd+0x2e8>)
 8003074:	4829      	ldr	r0, [pc, #164]	; (800311c <ValveCheckCmd+0x2b4>)
 8003076:	f7fd feef 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 800307a:	4b25      	ldr	r3, [pc, #148]	; (8003110 <ValveCheckCmd+0x2a8>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	f000 bd1e 	b.w	8003ac0 <ValveCheckCmd+0xc58>
				}
			}
			else if(command == pvl01on){
 8003084:	4b20      	ldr	r3, [pc, #128]	; (8003108 <ValveCheckCmd+0x2a0>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b32      	ldr	r3, [pc, #200]	; (8003154 <ValveCheckCmd+0x2ec>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d169      	bne.n	8003164 <ValveCheckCmd+0x2fc>
				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 8003090:	4b1f      	ldr	r3, [pc, #124]	; (8003110 <ValveCheckCmd+0x2a8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01f      	beq.n	80030d8 <ValveCheckCmd+0x270>
 8003098:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800309c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030a0:	f001 fbba 	bl	8004818 <HAL_GPIO_ReadPin>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d116      	bne.n	80030d8 <ValveCheckCmd+0x270>
					valves_selected |= (uint16_t)pvl01;
 80030aa:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <ValveCheckCmd+0x2ac>)
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	f043 0302 	orr.w	r3, r3, #2
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	4b17      	ldr	r3, [pc, #92]	; (8003114 <ValveCheckCmd+0x2ac>)
 80030b6:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " pvl01 is ON...\n");
 80030b8:	4927      	ldr	r1, [pc, #156]	; (8003158 <ValveCheckCmd+0x2f0>)
 80030ba:	4818      	ldr	r0, [pc, #96]	; (800311c <ValveCheckCmd+0x2b4>)
 80030bc:	f7fd fecc 	bl	8000e58 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " pvl01 is ON...\n");
 80030c0:	4925      	ldr	r1, [pc, #148]	; (8003158 <ValveCheckCmd+0x2f0>)
 80030c2:	4817      	ldr	r0, [pc, #92]	; (8003120 <ValveCheckCmd+0x2b8>)
 80030c4:	f7fd feea 	bl	8000e9c <UART_SendMessage_VI>
					cmd_flag = FALSE;
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <ValveCheckCmd+0x2a8>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
					v2=1;
 80030ce:	4b23      	ldr	r3, [pc, #140]	; (800315c <ValveCheckCmd+0x2f4>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	f000 bcf4 	b.w	8003ac0 <ValveCheckCmd+0xc58>

				}
				else if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 80030d8:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <ValveCheckCmd+0x2a8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 84ef 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 80030e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030ea:	f001 fb95 	bl	8004818 <HAL_GPIO_ReadPin>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 84e5 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " pvl01 is already ON...\n");
 80030f6:	491a      	ldr	r1, [pc, #104]	; (8003160 <ValveCheckCmd+0x2f8>)
 80030f8:	4808      	ldr	r0, [pc, #32]	; (800311c <ValveCheckCmd+0x2b4>)
 80030fa:	f7fd fead 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 80030fe:	4b04      	ldr	r3, [pc, #16]	; (8003110 <ValveCheckCmd+0x2a8>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	f000 bcdc 	b.w	8003ac0 <ValveCheckCmd+0xc58>
 8003108:	20000354 	.word	0x20000354
 800310c:	200000a0 	.word	0x200000a0
 8003110:	20001384 	.word	0x20001384
 8003114:	20001714 	.word	0x20001714
 8003118:	08007cb8 	.word	0x08007cb8
 800311c:	20001650 	.word	0x20001650
 8003120:	20000250 	.word	0x20000250
 8003124:	20001370 	.word	0x20001370
 8003128:	08007ccc 	.word	0x08007ccc
 800312c:	200000a4 	.word	0x200000a4
 8003130:	08007ce8 	.word	0x08007ce8
 8003134:	08007cfc 	.word	0x08007cfc
 8003138:	200000a8 	.word	0x200000a8
 800313c:	08007d18 	.word	0x08007d18
 8003140:	200002d8 	.word	0x200002d8
 8003144:	08007d2c 	.word	0x08007d2c
 8003148:	200000ac 	.word	0x200000ac
 800314c:	08007d48 	.word	0x08007d48
 8003150:	08007d5c 	.word	0x08007d5c
 8003154:	200000b0 	.word	0x200000b0
 8003158:	08007d78 	.word	0x08007d78
 800315c:	200014f0 	.word	0x200014f0
 8003160:	08007d8c 	.word	0x08007d8c
				}

			}
			else if (command == pvl01off){
 8003164:	4b9b      	ldr	r3, [pc, #620]	; (80033d4 <ValveCheckCmd+0x56c>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4b9b      	ldr	r3, [pc, #620]	; (80033d8 <ValveCheckCmd+0x570>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d13c      	bne.n	80031ea <ValveCheckCmd+0x382>
				if (cmd_flag && (HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 8003170:	4b9a      	ldr	r3, [pc, #616]	; (80033dc <ValveCheckCmd+0x574>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d020      	beq.n	80031ba <ValveCheckCmd+0x352>
 8003178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800317c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003180:	f001 fb4a 	bl	8004818 <HAL_GPIO_ReadPin>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d017      	beq.n	80031ba <ValveCheckCmd+0x352>
					valves_selected &= 0x1FD;
 800318a:	4b95      	ldr	r3, [pc, #596]	; (80033e0 <ValveCheckCmd+0x578>)
 800318c:	881a      	ldrh	r2, [r3, #0]
 800318e:	f240 13fd 	movw	r3, #509	; 0x1fd
 8003192:	4013      	ands	r3, r2
 8003194:	b29a      	uxth	r2, r3
 8003196:	4b92      	ldr	r3, [pc, #584]	; (80033e0 <ValveCheckCmd+0x578>)
 8003198:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " pvl01 is OFF...\n");
 800319a:	4992      	ldr	r1, [pc, #584]	; (80033e4 <ValveCheckCmd+0x57c>)
 800319c:	4892      	ldr	r0, [pc, #584]	; (80033e8 <ValveCheckCmd+0x580>)
 800319e:	f7fd fe5b 	bl	8000e58 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " pvl01 is OFF...\n");
 80031a2:	4990      	ldr	r1, [pc, #576]	; (80033e4 <ValveCheckCmd+0x57c>)
 80031a4:	4891      	ldr	r0, [pc, #580]	; (80033ec <ValveCheckCmd+0x584>)
 80031a6:	f7fd fe79 	bl	8000e9c <UART_SendMessage_VI>
					cmd_flag = FALSE;
 80031aa:	4b8c      	ldr	r3, [pc, #560]	; (80033dc <ValveCheckCmd+0x574>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
					v2=0;
 80031b0:	4b8f      	ldr	r3, [pc, #572]	; (80033f0 <ValveCheckCmd+0x588>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	f000 bc83 	b.w	8003ac0 <ValveCheckCmd+0xc58>
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 80031ba:	4b88      	ldr	r3, [pc, #544]	; (80033dc <ValveCheckCmd+0x574>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 847e 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 80031c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031cc:	f001 fb24 	bl	8004818 <HAL_GPIO_ReadPin>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f040 8474 	bne.w	8003ac0 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " pvl01 is already OFF...\n");
 80031d8:	4986      	ldr	r1, [pc, #536]	; (80033f4 <ValveCheckCmd+0x58c>)
 80031da:	4883      	ldr	r0, [pc, #524]	; (80033e8 <ValveCheckCmd+0x580>)
 80031dc:	f7fd fe3c 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 80031e0:	4b7e      	ldr	r3, [pc, #504]	; (80033dc <ValveCheckCmd+0x574>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	f000 bc6b 	b.w	8003ac0 <ValveCheckCmd+0xc58>
				}
			}
			else if(command == pvp01on){
 80031ea:	4b7a      	ldr	r3, [pc, #488]	; (80033d4 <ValveCheckCmd+0x56c>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b82      	ldr	r3, [pc, #520]	; (80033f8 <ValveCheckCmd+0x590>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d137      	bne.n	8003266 <ValveCheckCmd+0x3fe>
				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin))){
 80031f6:	4b79      	ldr	r3, [pc, #484]	; (80033dc <ValveCheckCmd+0x574>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d01d      	beq.n	800323a <ValveCheckCmd+0x3d2>
 80031fe:	2180      	movs	r1, #128	; 0x80
 8003200:	487e      	ldr	r0, [pc, #504]	; (80033fc <ValveCheckCmd+0x594>)
 8003202:	f001 fb09 	bl	8004818 <HAL_GPIO_ReadPin>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d116      	bne.n	800323a <ValveCheckCmd+0x3d2>
					valves_selected |= (uint16_t)pvp01;
 800320c:	4b74      	ldr	r3, [pc, #464]	; (80033e0 <ValveCheckCmd+0x578>)
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	b29a      	uxth	r2, r3
 8003216:	4b72      	ldr	r3, [pc, #456]	; (80033e0 <ValveCheckCmd+0x578>)
 8003218:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " pvp01 is ON...\n");
 800321a:	4979      	ldr	r1, [pc, #484]	; (8003400 <ValveCheckCmd+0x598>)
 800321c:	4872      	ldr	r0, [pc, #456]	; (80033e8 <ValveCheckCmd+0x580>)
 800321e:	f7fd fe1b 	bl	8000e58 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " pvp01 is ON...\n");
 8003222:	4977      	ldr	r1, [pc, #476]	; (8003400 <ValveCheckCmd+0x598>)
 8003224:	4871      	ldr	r0, [pc, #452]	; (80033ec <ValveCheckCmd+0x584>)
 8003226:	f7fd fe39 	bl	8000e9c <UART_SendMessage_VI>
					cmd_flag = FALSE;
 800322a:	4b6c      	ldr	r3, [pc, #432]	; (80033dc <ValveCheckCmd+0x574>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
					v3=1;
 8003230:	4b74      	ldr	r3, [pc, #464]	; (8003404 <ValveCheckCmd+0x59c>)
 8003232:	2201      	movs	r2, #1
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	f000 bc43 	b.w	8003ac0 <ValveCheckCmd+0xc58>
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin)){
 800323a:	4b68      	ldr	r3, [pc, #416]	; (80033dc <ValveCheckCmd+0x574>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 843e 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 8003244:	2180      	movs	r1, #128	; 0x80
 8003246:	486d      	ldr	r0, [pc, #436]	; (80033fc <ValveCheckCmd+0x594>)
 8003248:	f001 fae6 	bl	8004818 <HAL_GPIO_ReadPin>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 8436 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " pvp01 is already ON...\n");
 8003254:	496c      	ldr	r1, [pc, #432]	; (8003408 <ValveCheckCmd+0x5a0>)
 8003256:	4864      	ldr	r0, [pc, #400]	; (80033e8 <ValveCheckCmd+0x580>)
 8003258:	f7fd fdfe 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 800325c:	4b5f      	ldr	r3, [pc, #380]	; (80033dc <ValveCheckCmd+0x574>)
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	f000 bc2d 	b.w	8003ac0 <ValveCheckCmd+0xc58>
				}
			}
			else if (command == pvp01off){
 8003266:	4b5b      	ldr	r3, [pc, #364]	; (80033d4 <ValveCheckCmd+0x56c>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	4b68      	ldr	r3, [pc, #416]	; (800340c <ValveCheckCmd+0x5a4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d137      	bne.n	80032e2 <ValveCheckCmd+0x47a>
				if (cmd_flag && HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin)){
 8003272:	4b5a      	ldr	r3, [pc, #360]	; (80033dc <ValveCheckCmd+0x574>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d01e      	beq.n	80032b8 <ValveCheckCmd+0x450>
 800327a:	2180      	movs	r1, #128	; 0x80
 800327c:	485f      	ldr	r0, [pc, #380]	; (80033fc <ValveCheckCmd+0x594>)
 800327e:	f001 facb 	bl	8004818 <HAL_GPIO_ReadPin>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d017      	beq.n	80032b8 <ValveCheckCmd+0x450>
					valves_selected &= 0x3FB;
 8003288:	4b55      	ldr	r3, [pc, #340]	; (80033e0 <ValveCheckCmd+0x578>)
 800328a:	881a      	ldrh	r2, [r3, #0]
 800328c:	f240 33fb 	movw	r3, #1019	; 0x3fb
 8003290:	4013      	ands	r3, r2
 8003292:	b29a      	uxth	r2, r3
 8003294:	4b52      	ldr	r3, [pc, #328]	; (80033e0 <ValveCheckCmd+0x578>)
 8003296:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " pvp01 is OFF...\n");
 8003298:	495d      	ldr	r1, [pc, #372]	; (8003410 <ValveCheckCmd+0x5a8>)
 800329a:	4853      	ldr	r0, [pc, #332]	; (80033e8 <ValveCheckCmd+0x580>)
 800329c:	f7fd fddc 	bl	8000e58 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " pvp01 is OFF...\n");
 80032a0:	495b      	ldr	r1, [pc, #364]	; (8003410 <ValveCheckCmd+0x5a8>)
 80032a2:	4852      	ldr	r0, [pc, #328]	; (80033ec <ValveCheckCmd+0x584>)
 80032a4:	f7fd fdfa 	bl	8000e9c <UART_SendMessage_VI>
					cmd_flag = FALSE;
 80032a8:	4b4c      	ldr	r3, [pc, #304]	; (80033dc <ValveCheckCmd+0x574>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
					v3=0;
 80032ae:	4b55      	ldr	r3, [pc, #340]	; (8003404 <ValveCheckCmd+0x59c>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	f000 bc04 	b.w	8003ac0 <ValveCheckCmd+0xc58>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin))) {
 80032b8:	4b48      	ldr	r3, [pc, #288]	; (80033dc <ValveCheckCmd+0x574>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 83ff 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 80032c2:	2180      	movs	r1, #128	; 0x80
 80032c4:	484d      	ldr	r0, [pc, #308]	; (80033fc <ValveCheckCmd+0x594>)
 80032c6:	f001 faa7 	bl	8004818 <HAL_GPIO_ReadPin>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f040 83f7 	bne.w	8003ac0 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " pvp01 is already OFF...\n");
 80032d2:	4950      	ldr	r1, [pc, #320]	; (8003414 <ValveCheckCmd+0x5ac>)
 80032d4:	4844      	ldr	r0, [pc, #272]	; (80033e8 <ValveCheckCmd+0x580>)
 80032d6:	f7fd fdbf 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 80032da:	4b40      	ldr	r3, [pc, #256]	; (80033dc <ValveCheckCmd+0x574>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	e3ee      	b.n	8003ac0 <ValveCheckCmd+0xc58>
				}
			}
			else if(command == sovf01on){
 80032e2:	4b3c      	ldr	r3, [pc, #240]	; (80033d4 <ValveCheckCmd+0x56c>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4b4c      	ldr	r3, [pc, #304]	; (8003418 <ValveCheckCmd+0x5b0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d135      	bne.n	800335a <ValveCheckCmd+0x4f2>
				if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin))){
 80032ee:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <ValveCheckCmd+0x574>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d01c      	beq.n	8003330 <ValveCheckCmd+0x4c8>
 80032f6:	2140      	movs	r1, #64	; 0x40
 80032f8:	4840      	ldr	r0, [pc, #256]	; (80033fc <ValveCheckCmd+0x594>)
 80032fa:	f001 fa8d 	bl	8004818 <HAL_GPIO_ReadPin>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d115      	bne.n	8003330 <ValveCheckCmd+0x4c8>
					valves_selected |= (uint16_t)sovf01;
 8003304:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <ValveCheckCmd+0x578>)
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	f043 0308 	orr.w	r3, r3, #8
 800330c:	b29a      	uxth	r2, r3
 800330e:	4b34      	ldr	r3, [pc, #208]	; (80033e0 <ValveCheckCmd+0x578>)
 8003310:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " sovf01 is ON...\n");
 8003312:	4942      	ldr	r1, [pc, #264]	; (800341c <ValveCheckCmd+0x5b4>)
 8003314:	4834      	ldr	r0, [pc, #208]	; (80033e8 <ValveCheckCmd+0x580>)
 8003316:	f7fd fd9f 	bl	8000e58 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " sovf01 is ON...\n");
 800331a:	4940      	ldr	r1, [pc, #256]	; (800341c <ValveCheckCmd+0x5b4>)
 800331c:	4833      	ldr	r0, [pc, #204]	; (80033ec <ValveCheckCmd+0x584>)
 800331e:	f7fd fdbd 	bl	8000e9c <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8003322:	4b2e      	ldr	r3, [pc, #184]	; (80033dc <ValveCheckCmd+0x574>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
					v4=1;
 8003328:	4b3d      	ldr	r3, [pc, #244]	; (8003420 <ValveCheckCmd+0x5b8>)
 800332a:	2201      	movs	r2, #1
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	e3c7      	b.n	8003ac0 <ValveCheckCmd+0xc58>

				}
				else if (cmd_flag && HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin)){
 8003330:	4b2a      	ldr	r3, [pc, #168]	; (80033dc <ValveCheckCmd+0x574>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 83c3 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 800333a:	2140      	movs	r1, #64	; 0x40
 800333c:	482f      	ldr	r0, [pc, #188]	; (80033fc <ValveCheckCmd+0x594>)
 800333e:	f001 fa6b 	bl	8004818 <HAL_GPIO_ReadPin>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 83bb 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " sovf01 is already ON...\n");
 800334a:	4936      	ldr	r1, [pc, #216]	; (8003424 <ValveCheckCmd+0x5bc>)
 800334c:	4826      	ldr	r0, [pc, #152]	; (80033e8 <ValveCheckCmd+0x580>)
 800334e:	f7fd fd83 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 8003352:	4b22      	ldr	r3, [pc, #136]	; (80033dc <ValveCheckCmd+0x574>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	e3b2      	b.n	8003ac0 <ValveCheckCmd+0xc58>
				}
			}
			else if (command == sovf01off){
 800335a:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <ValveCheckCmd+0x56c>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	4b32      	ldr	r3, [pc, #200]	; (8003428 <ValveCheckCmd+0x5c0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d166      	bne.n	8003434 <ValveCheckCmd+0x5cc>


				if (cmd_flag && HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin)){
 8003366:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <ValveCheckCmd+0x574>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d01d      	beq.n	80033aa <ValveCheckCmd+0x542>
 800336e:	2140      	movs	r1, #64	; 0x40
 8003370:	4822      	ldr	r0, [pc, #136]	; (80033fc <ValveCheckCmd+0x594>)
 8003372:	f001 fa51 	bl	8004818 <HAL_GPIO_ReadPin>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d016      	beq.n	80033aa <ValveCheckCmd+0x542>
					valves_selected &= 0x3F7;
 800337c:	4b18      	ldr	r3, [pc, #96]	; (80033e0 <ValveCheckCmd+0x578>)
 800337e:	881a      	ldrh	r2, [r3, #0]
 8003380:	f240 33f7 	movw	r3, #1015	; 0x3f7
 8003384:	4013      	ands	r3, r2
 8003386:	b29a      	uxth	r2, r3
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <ValveCheckCmd+0x578>)
 800338a:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " sovf01 is OFF...\n");
 800338c:	4927      	ldr	r1, [pc, #156]	; (800342c <ValveCheckCmd+0x5c4>)
 800338e:	4816      	ldr	r0, [pc, #88]	; (80033e8 <ValveCheckCmd+0x580>)
 8003390:	f7fd fd62 	bl	8000e58 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " sovf01 is OFF...\n");
 8003394:	4925      	ldr	r1, [pc, #148]	; (800342c <ValveCheckCmd+0x5c4>)
 8003396:	4815      	ldr	r0, [pc, #84]	; (80033ec <ValveCheckCmd+0x584>)
 8003398:	f7fd fd80 	bl	8000e9c <UART_SendMessage_VI>
					cmd_flag = FALSE;
 800339c:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <ValveCheckCmd+0x574>)
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
					v4=0;
 80033a2:	4b1f      	ldr	r3, [pc, #124]	; (8003420 <ValveCheckCmd+0x5b8>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	e38a      	b.n	8003ac0 <ValveCheckCmd+0xc58>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOC, FUEL_VENT_Pin))){
 80033aa:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <ValveCheckCmd+0x574>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8386 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 80033b4:	2140      	movs	r1, #64	; 0x40
 80033b6:	4811      	ldr	r0, [pc, #68]	; (80033fc <ValveCheckCmd+0x594>)
 80033b8:	f001 fa2e 	bl	8004818 <HAL_GPIO_ReadPin>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f040 837e 	bne.w	8003ac0 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " sovf01 is already OFF...\n");
 80033c4:	491a      	ldr	r1, [pc, #104]	; (8003430 <ValveCheckCmd+0x5c8>)
 80033c6:	4808      	ldr	r0, [pc, #32]	; (80033e8 <ValveCheckCmd+0x580>)
 80033c8:	f7fd fd46 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <ValveCheckCmd+0x574>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	e375      	b.n	8003ac0 <ValveCheckCmd+0xc58>
 80033d4:	20000354 	.word	0x20000354
 80033d8:	200000b4 	.word	0x200000b4
 80033dc:	20001384 	.word	0x20001384
 80033e0:	20001714 	.word	0x20001714
 80033e4:	08007da8 	.word	0x08007da8
 80033e8:	20001650 	.word	0x20001650
 80033ec:	20000250 	.word	0x20000250
 80033f0:	200014f0 	.word	0x200014f0
 80033f4:	08007dbc 	.word	0x08007dbc
 80033f8:	200000b8 	.word	0x200000b8
 80033fc:	48000800 	.word	0x48000800
 8003400:	08007dd8 	.word	0x08007dd8
 8003404:	200003c8 	.word	0x200003c8
 8003408:	08007dec 	.word	0x08007dec
 800340c:	200000bc 	.word	0x200000bc
 8003410:	08007e08 	.word	0x08007e08
 8003414:	08007e1c 	.word	0x08007e1c
 8003418:	200000c0 	.word	0x200000c0
 800341c:	08007e38 	.word	0x08007e38
 8003420:	20001708 	.word	0x20001708
 8003424:	08007e4c 	.word	0x08007e4c
 8003428:	200000c4 	.word	0x200000c4
 800342c:	08007e68 	.word	0x08007e68
 8003430:	08007e7c 	.word	0x08007e7c
				}
			}
			else if(command == pvf02on){
 8003434:	4b9f      	ldr	r3, [pc, #636]	; (80036b4 <ValveCheckCmd+0x84c>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	4b9f      	ldr	r3, [pc, #636]	; (80036b8 <ValveCheckCmd+0x850>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d139      	bne.n	80034b4 <ValveCheckCmd+0x64c>
				if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin))){
 8003440:	4b9e      	ldr	r3, [pc, #632]	; (80036bc <ValveCheckCmd+0x854>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01e      	beq.n	8003486 <ValveCheckCmd+0x61e>
 8003448:	f44f 7100 	mov.w	r1, #512	; 0x200
 800344c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003450:	f001 f9e2 	bl	8004818 <HAL_GPIO_ReadPin>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d115      	bne.n	8003486 <ValveCheckCmd+0x61e>
					valves_selected |= (uint16_t)pvf02;
 800345a:	4b99      	ldr	r3, [pc, #612]	; (80036c0 <ValveCheckCmd+0x858>)
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	f043 0310 	orr.w	r3, r3, #16
 8003462:	b29a      	uxth	r2, r3
 8003464:	4b96      	ldr	r3, [pc, #600]	; (80036c0 <ValveCheckCmd+0x858>)
 8003466:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " pvf02 is ON...\n");
 8003468:	4996      	ldr	r1, [pc, #600]	; (80036c4 <ValveCheckCmd+0x85c>)
 800346a:	4897      	ldr	r0, [pc, #604]	; (80036c8 <ValveCheckCmd+0x860>)
 800346c:	f7fd fcf4 	bl	8000e58 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " pvf02 is ON...\n");
 8003470:	4994      	ldr	r1, [pc, #592]	; (80036c4 <ValveCheckCmd+0x85c>)
 8003472:	4896      	ldr	r0, [pc, #600]	; (80036cc <ValveCheckCmd+0x864>)
 8003474:	f7fd fd12 	bl	8000e9c <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8003478:	4b90      	ldr	r3, [pc, #576]	; (80036bc <ValveCheckCmd+0x854>)
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
					v5=1;
 800347e:	4b94      	ldr	r3, [pc, #592]	; (80036d0 <ValveCheckCmd+0x868>)
 8003480:	2201      	movs	r2, #1
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	e31c      	b.n	8003ac0 <ValveCheckCmd+0xc58>
				}
				else if(cmd_flag && HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin)){
 8003486:	4b8d      	ldr	r3, [pc, #564]	; (80036bc <ValveCheckCmd+0x854>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 8318 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 8003490:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003498:	f001 f9be 	bl	8004818 <HAL_GPIO_ReadPin>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 830e 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " pvf02 is already ON...\n");
 80034a4:	498b      	ldr	r1, [pc, #556]	; (80036d4 <ValveCheckCmd+0x86c>)
 80034a6:	4888      	ldr	r0, [pc, #544]	; (80036c8 <ValveCheckCmd+0x860>)
 80034a8:	f7fd fcd6 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 80034ac:	4b83      	ldr	r3, [pc, #524]	; (80036bc <ValveCheckCmd+0x854>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	e305      	b.n	8003ac0 <ValveCheckCmd+0xc58>
				}
			}
			else if (command == pvf02off){
 80034b4:	4b7f      	ldr	r3, [pc, #508]	; (80036b4 <ValveCheckCmd+0x84c>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b87      	ldr	r3, [pc, #540]	; (80036d8 <ValveCheckCmd+0x870>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d13a      	bne.n	8003536 <ValveCheckCmd+0x6ce>


				if (cmd_flag && HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin)){
 80034c0:	4b7e      	ldr	r3, [pc, #504]	; (80036bc <ValveCheckCmd+0x854>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01f      	beq.n	8003508 <ValveCheckCmd+0x6a0>
 80034c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034d0:	f001 f9a2 	bl	8004818 <HAL_GPIO_ReadPin>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d016      	beq.n	8003508 <ValveCheckCmd+0x6a0>
					valves_selected &= 0x3EF;
 80034da:	4b79      	ldr	r3, [pc, #484]	; (80036c0 <ValveCheckCmd+0x858>)
 80034dc:	881a      	ldrh	r2, [r3, #0]
 80034de:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80034e2:	4013      	ands	r3, r2
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	4b76      	ldr	r3, [pc, #472]	; (80036c0 <ValveCheckCmd+0x858>)
 80034e8:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " pvf02 is OFF...\n");
 80034ea:	497c      	ldr	r1, [pc, #496]	; (80036dc <ValveCheckCmd+0x874>)
 80034ec:	4876      	ldr	r0, [pc, #472]	; (80036c8 <ValveCheckCmd+0x860>)
 80034ee:	f7fd fcb3 	bl	8000e58 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " pvf02 is OFF...\n");
 80034f2:	497a      	ldr	r1, [pc, #488]	; (80036dc <ValveCheckCmd+0x874>)
 80034f4:	4875      	ldr	r0, [pc, #468]	; (80036cc <ValveCheckCmd+0x864>)
 80034f6:	f7fd fcd1 	bl	8000e9c <UART_SendMessage_VI>
					cmd_flag = FALSE;
 80034fa:	4b70      	ldr	r3, [pc, #448]	; (80036bc <ValveCheckCmd+0x854>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
					v5=0;
 8003500:	4b73      	ldr	r3, [pc, #460]	; (80036d0 <ValveCheckCmd+0x868>)
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e2db      	b.n	8003ac0 <ValveCheckCmd+0xc58>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, FUEL_MAIN_Pin))) {
 8003508:	4b6c      	ldr	r3, [pc, #432]	; (80036bc <ValveCheckCmd+0x854>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 82d7 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 8003512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800351a:	f001 f97d 	bl	8004818 <HAL_GPIO_ReadPin>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	f040 82cd 	bne.w	8003ac0 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " pvf02 is already OFF...\n");
 8003526:	496e      	ldr	r1, [pc, #440]	; (80036e0 <ValveCheckCmd+0x878>)
 8003528:	4867      	ldr	r0, [pc, #412]	; (80036c8 <ValveCheckCmd+0x860>)
 800352a:	f7fd fc95 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 800352e:	4b63      	ldr	r3, [pc, #396]	; (80036bc <ValveCheckCmd+0x854>)
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e2c4      	b.n	8003ac0 <ValveCheckCmd+0xc58>
				}
			}
			else if(command == pvl03on){
 8003536:	4b5f      	ldr	r3, [pc, #380]	; (80036b4 <ValveCheckCmd+0x84c>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4b6a      	ldr	r3, [pc, #424]	; (80036e4 <ValveCheckCmd+0x87c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d139      	bne.n	80035b6 <ValveCheckCmd+0x74e>
				if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin))){
 8003542:	4b5e      	ldr	r3, [pc, #376]	; (80036bc <ValveCheckCmd+0x854>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01e      	beq.n	8003588 <ValveCheckCmd+0x720>
 800354a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800354e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003552:	f001 f961 	bl	8004818 <HAL_GPIO_ReadPin>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d115      	bne.n	8003588 <ValveCheckCmd+0x720>
				valves_selected |= (uint16_t)pvl03;
 800355c:	4b58      	ldr	r3, [pc, #352]	; (80036c0 <ValveCheckCmd+0x858>)
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	f043 0320 	orr.w	r3, r3, #32
 8003564:	b29a      	uxth	r2, r3
 8003566:	4b56      	ldr	r3, [pc, #344]	; (80036c0 <ValveCheckCmd+0x858>)
 8003568:	801a      	strh	r2, [r3, #0]
				UART_SendMessage(&huart2, " pvl03 is ON...\n");
 800356a:	495f      	ldr	r1, [pc, #380]	; (80036e8 <ValveCheckCmd+0x880>)
 800356c:	4856      	ldr	r0, [pc, #344]	; (80036c8 <ValveCheckCmd+0x860>)
 800356e:	f7fd fc73 	bl	8000e58 <UART_SendMessage>
				UART_SendMessage_VI(&huart3, " pvl03 is ON...\n");
 8003572:	495d      	ldr	r1, [pc, #372]	; (80036e8 <ValveCheckCmd+0x880>)
 8003574:	4855      	ldr	r0, [pc, #340]	; (80036cc <ValveCheckCmd+0x864>)
 8003576:	f7fd fc91 	bl	8000e9c <UART_SendMessage_VI>
				cmd_flag = FALSE;
 800357a:	4b50      	ldr	r3, [pc, #320]	; (80036bc <ValveCheckCmd+0x854>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
				v6=1;
 8003580:	4b5a      	ldr	r3, [pc, #360]	; (80036ec <ValveCheckCmd+0x884>)
 8003582:	2201      	movs	r2, #1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e29b      	b.n	8003ac0 <ValveCheckCmd+0xc58>

				}
				else if (cmd_flag && HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin)){
 8003588:	4b4c      	ldr	r3, [pc, #304]	; (80036bc <ValveCheckCmd+0x854>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 8297 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 8003592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800359a:	f001 f93d 	bl	8004818 <HAL_GPIO_ReadPin>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 828d 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " pvl03 is already ON...\n");
 80035a6:	4952      	ldr	r1, [pc, #328]	; (80036f0 <ValveCheckCmd+0x888>)
 80035a8:	4847      	ldr	r0, [pc, #284]	; (80036c8 <ValveCheckCmd+0x860>)
 80035aa:	f7fd fc55 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 80035ae:	4b43      	ldr	r3, [pc, #268]	; (80036bc <ValveCheckCmd+0x854>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	e284      	b.n	8003ac0 <ValveCheckCmd+0xc58>
				}
			}
			else if (command == pvl03off){
 80035b6:	4b3f      	ldr	r3, [pc, #252]	; (80036b4 <ValveCheckCmd+0x84c>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4b4e      	ldr	r3, [pc, #312]	; (80036f4 <ValveCheckCmd+0x88c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d13a      	bne.n	8003638 <ValveCheckCmd+0x7d0>

				if (cmd_flag && HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin)){
 80035c2:	4b3e      	ldr	r3, [pc, #248]	; (80036bc <ValveCheckCmd+0x854>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d01f      	beq.n	800360a <ValveCheckCmd+0x7a2>
 80035ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035d2:	f001 f921 	bl	8004818 <HAL_GPIO_ReadPin>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d016      	beq.n	800360a <ValveCheckCmd+0x7a2>
					valves_selected &= 0x3DF;
 80035dc:	4b38      	ldr	r3, [pc, #224]	; (80036c0 <ValveCheckCmd+0x858>)
 80035de:	881a      	ldrh	r2, [r3, #0]
 80035e0:	f240 33df 	movw	r3, #991	; 0x3df
 80035e4:	4013      	ands	r3, r2
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	4b35      	ldr	r3, [pc, #212]	; (80036c0 <ValveCheckCmd+0x858>)
 80035ea:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " pvl03 is OFF...\n");
 80035ec:	4942      	ldr	r1, [pc, #264]	; (80036f8 <ValveCheckCmd+0x890>)
 80035ee:	4836      	ldr	r0, [pc, #216]	; (80036c8 <ValveCheckCmd+0x860>)
 80035f0:	f7fd fc32 	bl	8000e58 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " pvl03 is OFF...\n");
 80035f4:	4940      	ldr	r1, [pc, #256]	; (80036f8 <ValveCheckCmd+0x890>)
 80035f6:	4835      	ldr	r0, [pc, #212]	; (80036cc <ValveCheckCmd+0x864>)
 80035f8:	f7fd fc50 	bl	8000e9c <UART_SendMessage_VI>
					cmd_flag = FALSE;
 80035fc:	4b2f      	ldr	r3, [pc, #188]	; (80036bc <ValveCheckCmd+0x854>)
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
					v6=0;
 8003602:	4b3a      	ldr	r3, [pc, #232]	; (80036ec <ValveCheckCmd+0x884>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	e25a      	b.n	8003ac0 <ValveCheckCmd+0xc58>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin (GPIOA, LOX_MAIN_Pin))){
 800360a:	4b2c      	ldr	r3, [pc, #176]	; (80036bc <ValveCheckCmd+0x854>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8256 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 8003614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800361c:	f001 f8fc 	bl	8004818 <HAL_GPIO_ReadPin>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	f040 824c 	bne.w	8003ac0 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " pvl03 is already OFF...\n");
 8003628:	4934      	ldr	r1, [pc, #208]	; (80036fc <ValveCheckCmd+0x894>)
 800362a:	4827      	ldr	r0, [pc, #156]	; (80036c8 <ValveCheckCmd+0x860>)
 800362c:	f7fd fc14 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 8003630:	4b22      	ldr	r3, [pc, #136]	; (80036bc <ValveCheckCmd+0x854>)
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	e243      	b.n	8003ac0 <ValveCheckCmd+0xc58>
				}
			}
			else if(command == pvlf01on){
 8003638:	4b1e      	ldr	r3, [pc, #120]	; (80036b4 <ValveCheckCmd+0x84c>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4b30      	ldr	r3, [pc, #192]	; (8003700 <ValveCheckCmd+0x898>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d167      	bne.n	8003714 <ValveCheckCmd+0x8ac>


				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin))){
 8003644:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <ValveCheckCmd+0x854>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01d      	beq.n	8003688 <ValveCheckCmd+0x820>
 800364c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003650:	482c      	ldr	r0, [pc, #176]	; (8003704 <ValveCheckCmd+0x89c>)
 8003652:	f001 f8e1 	bl	8004818 <HAL_GPIO_ReadPin>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d115      	bne.n	8003688 <ValveCheckCmd+0x820>
					valves_selected |= (uint16_t)pvlf01;
 800365c:	4b18      	ldr	r3, [pc, #96]	; (80036c0 <ValveCheckCmd+0x858>)
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003664:	b29a      	uxth	r2, r3
 8003666:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <ValveCheckCmd+0x858>)
 8003668:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " pvlf01 is ON...\n");
 800366a:	4927      	ldr	r1, [pc, #156]	; (8003708 <ValveCheckCmd+0x8a0>)
 800366c:	4816      	ldr	r0, [pc, #88]	; (80036c8 <ValveCheckCmd+0x860>)
 800366e:	f7fd fbf3 	bl	8000e58 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " pvlf01 is ON...\n");
 8003672:	4925      	ldr	r1, [pc, #148]	; (8003708 <ValveCheckCmd+0x8a0>)
 8003674:	4815      	ldr	r0, [pc, #84]	; (80036cc <ValveCheckCmd+0x864>)
 8003676:	f7fd fc11 	bl	8000e9c <UART_SendMessage_VI>
					cmd_flag = FALSE;
 800367a:	4b10      	ldr	r3, [pc, #64]	; (80036bc <ValveCheckCmd+0x854>)
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
					v7=1;
 8003680:	4b22      	ldr	r3, [pc, #136]	; (800370c <ValveCheckCmd+0x8a4>)
 8003682:	2201      	movs	r2, #1
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	e21b      	b.n	8003ac0 <ValveCheckCmd+0xc58>
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin)){
 8003688:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <ValveCheckCmd+0x854>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8217 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 8003692:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003696:	481b      	ldr	r0, [pc, #108]	; (8003704 <ValveCheckCmd+0x89c>)
 8003698:	f001 f8be 	bl	8004818 <HAL_GPIO_ReadPin>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 820e 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " pvlf01 is already ON...\n");
 80036a4:	491a      	ldr	r1, [pc, #104]	; (8003710 <ValveCheckCmd+0x8a8>)
 80036a6:	4808      	ldr	r0, [pc, #32]	; (80036c8 <ValveCheckCmd+0x860>)
 80036a8:	f7fd fbd6 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <ValveCheckCmd+0x854>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	e205      	b.n	8003ac0 <ValveCheckCmd+0xc58>
 80036b4:	20000354 	.word	0x20000354
 80036b8:	200000c8 	.word	0x200000c8
 80036bc:	20001384 	.word	0x20001384
 80036c0:	20001714 	.word	0x20001714
 80036c4:	08007e98 	.word	0x08007e98
 80036c8:	20001650 	.word	0x20001650
 80036cc:	20000250 	.word	0x20000250
 80036d0:	200015c4 	.word	0x200015c4
 80036d4:	08007eac 	.word	0x08007eac
 80036d8:	200000cc 	.word	0x200000cc
 80036dc:	08007ec8 	.word	0x08007ec8
 80036e0:	08007edc 	.word	0x08007edc
 80036e4:	200000d0 	.word	0x200000d0
 80036e8:	08007ef8 	.word	0x08007ef8
 80036ec:	200002d0 	.word	0x200002d0
 80036f0:	08007f0c 	.word	0x08007f0c
 80036f4:	200000d4 	.word	0x200000d4
 80036f8:	08007f28 	.word	0x08007f28
 80036fc:	08007f3c 	.word	0x08007f3c
 8003700:	200000d8 	.word	0x200000d8
 8003704:	48000400 	.word	0x48000400
 8003708:	08007f58 	.word	0x08007f58
 800370c:	2000035c 	.word	0x2000035c
 8003710:	08007f6c 	.word	0x08007f6c
				}
			}
			else if (command == pvlf01off){
 8003714:	4b9c      	ldr	r3, [pc, #624]	; (8003988 <ValveCheckCmd+0xb20>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	4b9c      	ldr	r3, [pc, #624]	; (800398c <ValveCheckCmd+0xb24>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d138      	bne.n	8003792 <ValveCheckCmd+0x92a>


				if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin)){
 8003720:	4b9b      	ldr	r3, [pc, #620]	; (8003990 <ValveCheckCmd+0xb28>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d01e      	beq.n	8003766 <ValveCheckCmd+0x8fe>
 8003728:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800372c:	4899      	ldr	r0, [pc, #612]	; (8003994 <ValveCheckCmd+0xb2c>)
 800372e:	f001 f873 	bl	8004818 <HAL_GPIO_ReadPin>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d016      	beq.n	8003766 <ValveCheckCmd+0x8fe>

					valves_selected &= 0x3BF;
 8003738:	4b97      	ldr	r3, [pc, #604]	; (8003998 <ValveCheckCmd+0xb30>)
 800373a:	881a      	ldrh	r2, [r3, #0]
 800373c:	f240 33bf 	movw	r3, #959	; 0x3bf
 8003740:	4013      	ands	r3, r2
 8003742:	b29a      	uxth	r2, r3
 8003744:	4b94      	ldr	r3, [pc, #592]	; (8003998 <ValveCheckCmd+0xb30>)
 8003746:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " pvlf01 is OFF...\n");
 8003748:	4994      	ldr	r1, [pc, #592]	; (800399c <ValveCheckCmd+0xb34>)
 800374a:	4895      	ldr	r0, [pc, #596]	; (80039a0 <ValveCheckCmd+0xb38>)
 800374c:	f7fd fb84 	bl	8000e58 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " pvlf01 is OFF...\n");
 8003750:	4992      	ldr	r1, [pc, #584]	; (800399c <ValveCheckCmd+0xb34>)
 8003752:	4894      	ldr	r0, [pc, #592]	; (80039a4 <ValveCheckCmd+0xb3c>)
 8003754:	f7fd fba2 	bl	8000e9c <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8003758:	4b8d      	ldr	r3, [pc, #564]	; (8003990 <ValveCheckCmd+0xb28>)
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
					v7=0;
 800375e:	4b92      	ldr	r3, [pc, #584]	; (80039a8 <ValveCheckCmd+0xb40>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	e1ac      	b.n	8003ac0 <ValveCheckCmd+0xc58>

				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin))) {
 8003766:	4b8a      	ldr	r3, [pc, #552]	; (8003990 <ValveCheckCmd+0xb28>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 81a8 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 8003770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003774:	4887      	ldr	r0, [pc, #540]	; (8003994 <ValveCheckCmd+0xb2c>)
 8003776:	f001 f84f 	bl	8004818 <HAL_GPIO_ReadPin>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	f040 819f 	bne.w	8003ac0 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " pvlf01 is already OFF...\n");
 8003782:	498a      	ldr	r1, [pc, #552]	; (80039ac <ValveCheckCmd+0xb44>)
 8003784:	4886      	ldr	r0, [pc, #536]	; (80039a0 <ValveCheckCmd+0xb38>)
 8003786:	f7fd fb67 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 800378a:	4b81      	ldr	r3, [pc, #516]	; (8003990 <ValveCheckCmd+0xb28>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	e196      	b.n	8003ac0 <ValveCheckCmd+0xc58>
				}
			}
			else if(command == pvl02on){
 8003792:	4b7d      	ldr	r3, [pc, #500]	; (8003988 <ValveCheckCmd+0xb20>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4b86      	ldr	r3, [pc, #536]	; (80039b0 <ValveCheckCmd+0xb48>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d137      	bne.n	800380e <ValveCheckCmd+0x9a6>


				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin))){
 800379e:	4b7c      	ldr	r3, [pc, #496]	; (8003990 <ValveCheckCmd+0xb28>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d01d      	beq.n	80037e2 <ValveCheckCmd+0x97a>
 80037a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037aa:	487a      	ldr	r0, [pc, #488]	; (8003994 <ValveCheckCmd+0xb2c>)
 80037ac:	f001 f834 	bl	8004818 <HAL_GPIO_ReadPin>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d115      	bne.n	80037e2 <ValveCheckCmd+0x97a>
					valves_selected |= (uint16_t)pvl02;
 80037b6:	4b78      	ldr	r3, [pc, #480]	; (8003998 <ValveCheckCmd+0xb30>)
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037be:	b29a      	uxth	r2, r3
 80037c0:	4b75      	ldr	r3, [pc, #468]	; (8003998 <ValveCheckCmd+0xb30>)
 80037c2:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " pvl02 is ON...\n");
 80037c4:	497b      	ldr	r1, [pc, #492]	; (80039b4 <ValveCheckCmd+0xb4c>)
 80037c6:	4876      	ldr	r0, [pc, #472]	; (80039a0 <ValveCheckCmd+0xb38>)
 80037c8:	f7fd fb46 	bl	8000e58 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " pvl02 is ON...\n");
 80037cc:	4979      	ldr	r1, [pc, #484]	; (80039b4 <ValveCheckCmd+0xb4c>)
 80037ce:	4875      	ldr	r0, [pc, #468]	; (80039a4 <ValveCheckCmd+0xb3c>)
 80037d0:	f7fd fb64 	bl	8000e9c <UART_SendMessage_VI>
					cmd_flag = FALSE;
 80037d4:	4b6e      	ldr	r3, [pc, #440]	; (8003990 <ValveCheckCmd+0xb28>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
					v8=1;
 80037da:	4b77      	ldr	r3, [pc, #476]	; (80039b8 <ValveCheckCmd+0xb50>)
 80037dc:	2201      	movs	r2, #1
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e16e      	b.n	8003ac0 <ValveCheckCmd+0xc58>
				}
				else if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin)){
 80037e2:	4b6b      	ldr	r3, [pc, #428]	; (8003990 <ValveCheckCmd+0xb28>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 816a 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 80037ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037f0:	4868      	ldr	r0, [pc, #416]	; (8003994 <ValveCheckCmd+0xb2c>)
 80037f2:	f001 f811 	bl	8004818 <HAL_GPIO_ReadPin>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8161 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " pvl02 is already ON...\n");
 80037fe:	496f      	ldr	r1, [pc, #444]	; (80039bc <ValveCheckCmd+0xb54>)
 8003800:	4867      	ldr	r0, [pc, #412]	; (80039a0 <ValveCheckCmd+0xb38>)
 8003802:	f7fd fb29 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 8003806:	4b62      	ldr	r3, [pc, #392]	; (8003990 <ValveCheckCmd+0xb28>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e158      	b.n	8003ac0 <ValveCheckCmd+0xc58>
				}
			}
			else if (command == pvl02off){
 800380e:	4b5e      	ldr	r3, [pc, #376]	; (8003988 <ValveCheckCmd+0xb20>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	4b6b      	ldr	r3, [pc, #428]	; (80039c0 <ValveCheckCmd+0xb58>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d138      	bne.n	800388c <ValveCheckCmd+0xa24>

				if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin)){
 800381a:	4b5d      	ldr	r3, [pc, #372]	; (8003990 <ValveCheckCmd+0xb28>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d01e      	beq.n	8003860 <ValveCheckCmd+0x9f8>
 8003822:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003826:	485b      	ldr	r0, [pc, #364]	; (8003994 <ValveCheckCmd+0xb2c>)
 8003828:	f000 fff6 	bl	8004818 <HAL_GPIO_ReadPin>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d016      	beq.n	8003860 <ValveCheckCmd+0x9f8>
					valves_selected &= 0X37F;
 8003832:	4b59      	ldr	r3, [pc, #356]	; (8003998 <ValveCheckCmd+0xb30>)
 8003834:	881a      	ldrh	r2, [r3, #0]
 8003836:	f240 337f 	movw	r3, #895	; 0x37f
 800383a:	4013      	ands	r3, r2
 800383c:	b29a      	uxth	r2, r3
 800383e:	4b56      	ldr	r3, [pc, #344]	; (8003998 <ValveCheckCmd+0xb30>)
 8003840:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " pvl02 is OFF...\n");
 8003842:	4960      	ldr	r1, [pc, #384]	; (80039c4 <ValveCheckCmd+0xb5c>)
 8003844:	4856      	ldr	r0, [pc, #344]	; (80039a0 <ValveCheckCmd+0xb38>)
 8003846:	f7fd fb07 	bl	8000e58 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " pvl02 is OFF...\n");
 800384a:	495e      	ldr	r1, [pc, #376]	; (80039c4 <ValveCheckCmd+0xb5c>)
 800384c:	4855      	ldr	r0, [pc, #340]	; (80039a4 <ValveCheckCmd+0xb3c>)
 800384e:	f7fd fb25 	bl	8000e9c <UART_SendMessage_VI>
					cmd_flag = FALSE;
 8003852:	4b4f      	ldr	r3, [pc, #316]	; (8003990 <ValveCheckCmd+0xb28>)
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
					v8=0;
 8003858:	4b57      	ldr	r3, [pc, #348]	; (80039b8 <ValveCheckCmd+0xb50>)
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e12f      	b.n	8003ac0 <ValveCheckCmd+0xc58>
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin))){
 8003860:	4b4b      	ldr	r3, [pc, #300]	; (8003990 <ValveCheckCmd+0xb28>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 812b 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 800386a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800386e:	4849      	ldr	r0, [pc, #292]	; (8003994 <ValveCheckCmd+0xb2c>)
 8003870:	f000 ffd2 	bl	8004818 <HAL_GPIO_ReadPin>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	f040 8122 	bne.w	8003ac0 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " pvl02 is already OFF...\n");
 800387c:	4952      	ldr	r1, [pc, #328]	; (80039c8 <ValveCheckCmd+0xb60>)
 800387e:	4848      	ldr	r0, [pc, #288]	; (80039a0 <ValveCheckCmd+0xb38>)
 8003880:	f7fd faea 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 8003884:	4b42      	ldr	r3, [pc, #264]	; (8003990 <ValveCheckCmd+0xb28>)
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	e119      	b.n	8003ac0 <ValveCheckCmd+0xc58>
				}
			}
			else if(command == pvp02on){
 800388c:	4b3e      	ldr	r3, [pc, #248]	; (8003988 <ValveCheckCmd+0xb20>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4b4e      	ldr	r3, [pc, #312]	; (80039cc <ValveCheckCmd+0xb64>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d137      	bne.n	8003908 <ValveCheckCmd+0xaa0>


				if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin))){
 8003898:	4b3d      	ldr	r3, [pc, #244]	; (8003990 <ValveCheckCmd+0xb28>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01d      	beq.n	80038dc <ValveCheckCmd+0xa74>
 80038a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038a4:	483b      	ldr	r0, [pc, #236]	; (8003994 <ValveCheckCmd+0xb2c>)
 80038a6:	f000 ffb7 	bl	8004818 <HAL_GPIO_ReadPin>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d115      	bne.n	80038dc <ValveCheckCmd+0xa74>
					valves_selected |= (uint16_t)pvp02;
 80038b0:	4b39      	ldr	r3, [pc, #228]	; (8003998 <ValveCheckCmd+0xb30>)
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	4b37      	ldr	r3, [pc, #220]	; (8003998 <ValveCheckCmd+0xb30>)
 80038bc:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " pvp02 is ON...\n");
 80038be:	4944      	ldr	r1, [pc, #272]	; (80039d0 <ValveCheckCmd+0xb68>)
 80038c0:	4837      	ldr	r0, [pc, #220]	; (80039a0 <ValveCheckCmd+0xb38>)
 80038c2:	f7fd fac9 	bl	8000e58 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " pvp02 is ON...\n");
 80038c6:	4942      	ldr	r1, [pc, #264]	; (80039d0 <ValveCheckCmd+0xb68>)
 80038c8:	4836      	ldr	r0, [pc, #216]	; (80039a4 <ValveCheckCmd+0xb3c>)
 80038ca:	f7fd fae7 	bl	8000e9c <UART_SendMessage_VI>
					cmd_flag = FALSE;
 80038ce:	4b30      	ldr	r3, [pc, #192]	; (8003990 <ValveCheckCmd+0xb28>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
					v9=1;
 80038d4:	4b3f      	ldr	r3, [pc, #252]	; (80039d4 <ValveCheckCmd+0xb6c>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	e0f1      	b.n	8003ac0 <ValveCheckCmd+0xc58>
				}
				else if(cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin)){
 80038dc:	4b2c      	ldr	r3, [pc, #176]	; (8003990 <ValveCheckCmd+0xb28>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80ed 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 80038e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038ea:	482a      	ldr	r0, [pc, #168]	; (8003994 <ValveCheckCmd+0xb2c>)
 80038ec:	f000 ff94 	bl	8004818 <HAL_GPIO_ReadPin>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 80e4 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " pvp02 is already ON...\n");
 80038f8:	4937      	ldr	r1, [pc, #220]	; (80039d8 <ValveCheckCmd+0xb70>)
 80038fa:	4829      	ldr	r0, [pc, #164]	; (80039a0 <ValveCheckCmd+0xb38>)
 80038fc:	f7fd faac 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 8003900:	4b23      	ldr	r3, [pc, #140]	; (8003990 <ValveCheckCmd+0xb28>)
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	e0db      	b.n	8003ac0 <ValveCheckCmd+0xc58>

				}
			}
			else if (command == pvp02off){
 8003908:	4b1f      	ldr	r3, [pc, #124]	; (8003988 <ValveCheckCmd+0xb20>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	4b33      	ldr	r3, [pc, #204]	; (80039dc <ValveCheckCmd+0xb74>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d169      	bne.n	80039e8 <ValveCheckCmd+0xb80>


				if (cmd_flag && HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin)){
 8003914:	4b1e      	ldr	r3, [pc, #120]	; (8003990 <ValveCheckCmd+0xb28>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01e      	beq.n	800395a <ValveCheckCmd+0xaf2>
 800391c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003920:	481c      	ldr	r0, [pc, #112]	; (8003994 <ValveCheckCmd+0xb2c>)
 8003922:	f000 ff79 	bl	8004818 <HAL_GPIO_ReadPin>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d016      	beq.n	800395a <ValveCheckCmd+0xaf2>
					valves_selected &= 0X2FF;
 800392c:	4b1a      	ldr	r3, [pc, #104]	; (8003998 <ValveCheckCmd+0xb30>)
 800392e:	881a      	ldrh	r2, [r3, #0]
 8003930:	f240 23ff 	movw	r3, #767	; 0x2ff
 8003934:	4013      	ands	r3, r2
 8003936:	b29a      	uxth	r2, r3
 8003938:	4b17      	ldr	r3, [pc, #92]	; (8003998 <ValveCheckCmd+0xb30>)
 800393a:	801a      	strh	r2, [r3, #0]
					UART_SendMessage(&huart2, " pvp02 is OFF...\n");
 800393c:	4928      	ldr	r1, [pc, #160]	; (80039e0 <ValveCheckCmd+0xb78>)
 800393e:	4818      	ldr	r0, [pc, #96]	; (80039a0 <ValveCheckCmd+0xb38>)
 8003940:	f7fd fa8a 	bl	8000e58 <UART_SendMessage>
					UART_SendMessage_VI(&huart3, " pvp02 is OFF...\n");
 8003944:	4926      	ldr	r1, [pc, #152]	; (80039e0 <ValveCheckCmd+0xb78>)
 8003946:	4817      	ldr	r0, [pc, #92]	; (80039a4 <ValveCheckCmd+0xb3c>)
 8003948:	f7fd faa8 	bl	8000e9c <UART_SendMessage_VI>
					cmd_flag = FALSE;
 800394c:	4b10      	ldr	r3, [pc, #64]	; (8003990 <ValveCheckCmd+0xb28>)
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
					v9=0;
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <ValveCheckCmd+0xb6c>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	e0b2      	b.n	8003ac0 <ValveCheckCmd+0xc58>
				}
				else if (cmd_flag && !(HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin))){
 800395a:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <ValveCheckCmd+0xb28>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80ae 	beq.w	8003ac0 <ValveCheckCmd+0xc58>
 8003964:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003968:	480a      	ldr	r0, [pc, #40]	; (8003994 <ValveCheckCmd+0xb2c>)
 800396a:	f000 ff55 	bl	8004818 <HAL_GPIO_ReadPin>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	f040 80a5 	bne.w	8003ac0 <ValveCheckCmd+0xc58>
					UART_SendMessage(&huart2, " pvp02 is already OFF...\n");
 8003976:	491b      	ldr	r1, [pc, #108]	; (80039e4 <ValveCheckCmd+0xb7c>)
 8003978:	4809      	ldr	r0, [pc, #36]	; (80039a0 <ValveCheckCmd+0xb38>)
 800397a:	f7fd fa6d 	bl	8000e58 <UART_SendMessage>
					cmd_flag = FALSE;
 800397e:	4b04      	ldr	r3, [pc, #16]	; (8003990 <ValveCheckCmd+0xb28>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	e09c      	b.n	8003ac0 <ValveCheckCmd+0xc58>
 8003986:	bf00      	nop
 8003988:	20000354 	.word	0x20000354
 800398c:	200000dc 	.word	0x200000dc
 8003990:	20001384 	.word	0x20001384
 8003994:	48000400 	.word	0x48000400
 8003998:	20001714 	.word	0x20001714
 800399c:	08007f88 	.word	0x08007f88
 80039a0:	20001650 	.word	0x20001650
 80039a4:	20000250 	.word	0x20000250
 80039a8:	2000035c 	.word	0x2000035c
 80039ac:	08007f9c 	.word	0x08007f9c
 80039b0:	200000e0 	.word	0x200000e0
 80039b4:	08007fb8 	.word	0x08007fb8
 80039b8:	20001704 	.word	0x20001704
 80039bc:	08007fcc 	.word	0x08007fcc
 80039c0:	200000e4 	.word	0x200000e4
 80039c4:	08007fe8 	.word	0x08007fe8
 80039c8:	08007ffc 	.word	0x08007ffc
 80039cc:	200000e8 	.word	0x200000e8
 80039d0:	08008018 	.word	0x08008018
 80039d4:	20000358 	.word	0x20000358
 80039d8:	0800802c 	.word	0x0800802c
 80039dc:	200000ec 	.word	0x200000ec
 80039e0:	08008048 	.word	0x08008048
 80039e4:	0800805c 	.word	0x0800805c
				}
			}
			else if (command == valve_status && cmd_flag){
 80039e8:	4b41      	ldr	r3, [pc, #260]	; (8003af0 <ValveCheckCmd+0xc88>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4b41      	ldr	r3, [pc, #260]	; (8003af4 <ValveCheckCmd+0xc8c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d13c      	bne.n	8003a6e <ValveCheckCmd+0xc06>
 80039f4:	4b40      	ldr	r3, [pc, #256]	; (8003af8 <ValveCheckCmd+0xc90>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d038      	beq.n	8003a6e <ValveCheckCmd+0xc06>

				 int len = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
				  sprintf(buffer,"\n*** Valves and Igniters Status ***\r\n\n pvf01: %d\r\n"
 8003a00:	4b3e      	ldr	r3, [pc, #248]	; (8003afc <ValveCheckCmd+0xc94>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	4b3e      	ldr	r3, [pc, #248]	; (8003b00 <ValveCheckCmd+0xc98>)
 8003a08:	6819      	ldr	r1, [r3, #0]
 8003a0a:	6079      	str	r1, [r7, #4]
 8003a0c:	4b3d      	ldr	r3, [pc, #244]	; (8003b04 <ValveCheckCmd+0xc9c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a3d      	ldr	r2, [pc, #244]	; (8003b08 <ValveCheckCmd+0xca0>)
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	493d      	ldr	r1, [pc, #244]	; (8003b0c <ValveCheckCmd+0xca4>)
 8003a16:	6809      	ldr	r1, [r1, #0]
 8003a18:	483d      	ldr	r0, [pc, #244]	; (8003b10 <ValveCheckCmd+0xca8>)
 8003a1a:	6800      	ldr	r0, [r0, #0]
 8003a1c:	6038      	str	r0, [r7, #0]
 8003a1e:	4c3d      	ldr	r4, [pc, #244]	; (8003b14 <ValveCheckCmd+0xcac>)
 8003a20:	6824      	ldr	r4, [r4, #0]
 8003a22:	4d3d      	ldr	r5, [pc, #244]	; (8003b18 <ValveCheckCmd+0xcb0>)
 8003a24:	682d      	ldr	r5, [r5, #0]
 8003a26:	4e3d      	ldr	r6, [pc, #244]	; (8003b1c <ValveCheckCmd+0xcb4>)
 8003a28:	6836      	ldr	r6, [r6, #0]
 8003a2a:	483d      	ldr	r0, [pc, #244]	; (8003b20 <ValveCheckCmd+0xcb8>)
 8003a2c:	6800      	ldr	r0, [r0, #0]
 8003a2e:	9007      	str	r0, [sp, #28]
 8003a30:	9606      	str	r6, [sp, #24]
 8003a32:	9505      	str	r5, [sp, #20]
 8003a34:	9404      	str	r4, [sp, #16]
 8003a36:	6838      	ldr	r0, [r7, #0]
 8003a38:	9003      	str	r0, [sp, #12]
 8003a3a:	9102      	str	r1, [sp, #8]
 8003a3c:	9201      	str	r2, [sp, #4]
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	4937      	ldr	r1, [pc, #220]	; (8003b24 <ValveCheckCmd+0xcbc>)
 8003a46:	4838      	ldr	r0, [pc, #224]	; (8003b28 <ValveCheckCmd+0xcc0>)
 8003a48:	f003 fa46 	bl	8006ed8 <siprintf>
						                   " pvl01: %d\r\n pvp01: %d\r\n sovf01: %d\r\n pvf02: %d\r\n pvl03: %d\r\n"
						                   " pvlf01: %d\r\n pvl02: %d\r\n pvp02: %d\r\n IG:   %d\r\n",v1, v2, v3,\
										   v4,v5,v6,v7,v8,v9,ignit);
				  len =strlen(buffer);
 8003a4c:	4836      	ldr	r0, [pc, #216]	; (8003b28 <ValveCheckCmd+0xcc0>)
 8003a4e:	f7fc fbbf 	bl	80001d0 <strlen>
 8003a52:	4603      	mov	r3, r0
 8003a54:	617b      	str	r3, [r7, #20]
				  HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a5e:	4932      	ldr	r1, [pc, #200]	; (8003b28 <ValveCheckCmd+0xcc0>)
 8003a60:	4832      	ldr	r0, [pc, #200]	; (8003b2c <ValveCheckCmd+0xcc4>)
 8003a62:	f002 fa87 	bl	8005f74 <HAL_UART_Transmit>
				  cmd_flag = FALSE;
 8003a66:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <ValveCheckCmd+0xc90>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
			else if (command == valve_status && cmd_flag){
 8003a6c:	e028      	b.n	8003ac0 <ValveCheckCmd+0xc58>
			}
            /*********************************************/
            // Auto cycling valves
			else if (command == cycle_valves && cmd_flag ){
 8003a6e:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <ValveCheckCmd+0xc88>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4b2f      	ldr	r3, [pc, #188]	; (8003b30 <ValveCheckCmd+0xcc8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d122      	bne.n	8003ac0 <ValveCheckCmd+0xc58>
 8003a7a:	4b1f      	ldr	r3, [pc, #124]	; (8003af8 <ValveCheckCmd+0xc90>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01e      	beq.n	8003ac0 <ValveCheckCmd+0xc58>
				    UART_SendMessage(&huart2, "\r ...Auto cycling valves...\n");
 8003a82:	492c      	ldr	r1, [pc, #176]	; (8003b34 <ValveCheckCmd+0xccc>)
 8003a84:	4829      	ldr	r0, [pc, #164]	; (8003b2c <ValveCheckCmd+0xcc4>)
 8003a86:	f7fd f9e7 	bl	8000e58 <UART_SendMessage>
			    	cmd_flag = FALSE;
 8003a8a:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <ValveCheckCmd+0xc90>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

                 //Set all the valves off before starting
			    	valves_selected = 0;
 8003a90:	4b29      	ldr	r3, [pc, #164]	; (8003b38 <ValveCheckCmd+0xcd0>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	801a      	strh	r2, [r3, #0]
			    	ctrl->valveTarget  = valves_selected;
 8003a96:	4b28      	ldr	r3, [pc, #160]	; (8003b38 <ValveCheckCmd+0xcd0>)
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30

			    	for(int i =  0 ; i <=9 ; i ++){
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	e009      	b.n	8003aba <ValveCheckCmd+0xc52>
			    			success &= CycleValves(ctrl);
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f848 	bl	8003b3c <CycleValves>
 8003aac:	4602      	mov	r2, r0
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61fb      	str	r3, [r7, #28]
			    	for(int i =  0 ; i <=9 ; i ++){
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	61bb      	str	r3, [r7, #24]
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b09      	cmp	r3, #9
 8003abe:	ddf2      	ble.n	8003aa6 <ValveCheckCmd+0xc3e>
			    		cmd_flag = FALSE;
			   } // end of else if for cycle_valves*/
            /*************************************************************/

    	   // Set valves
			ctrl->valveTarget = valves_selected;
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <ValveCheckCmd+0xcd0>)
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	631a      	str	r2, [r3, #48]	; 0x30
			success &= ValveStateSetter(ctrl->valveTarget);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff f8d2 	bl	8002c78 <ValveStateSetter>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61fb      	str	r3, [r7, #28]
			ctrl->valveConfiguration = StateConfiguration();
 8003adc:	f7ff f84e 	bl	8002b7c <StateConfiguration>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003ae6:	bf00      	nop
 8003ae8:	3724      	adds	r7, #36	; 0x24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000354 	.word	0x20000354
 8003af4:	20000098 	.word	0x20000098
 8003af8:	20001384 	.word	0x20001384
 8003afc:	200002d8 	.word	0x200002d8
 8003b00:	200014f0 	.word	0x200014f0
 8003b04:	200003c8 	.word	0x200003c8
 8003b08:	20001708 	.word	0x20001708
 8003b0c:	200015c4 	.word	0x200015c4
 8003b10:	200002d0 	.word	0x200002d0
 8003b14:	2000035c 	.word	0x2000035c
 8003b18:	20001704 	.word	0x20001704
 8003b1c:	20000358 	.word	0x20000358
 8003b20:	20001370 	.word	0x20001370
 8003b24:	08008078 	.word	0x08008078
 8003b28:	200013f0 	.word	0x200013f0
 8003b2c:	20001650 	.word	0x20001650
 8003b30:	2000009c 	.word	0x2000009c
 8003b34:	08008118 	.word	0x08008118
 8003b38:	20001714 	.word	0x20001714

08003b3c <CycleValves>:

uint32_t CycleValves(struct StateVars *ctrl)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
	uint32_t success = TRUE;
 8003b44:	2301      	movs	r3, #1
 8003b46:	60fb      	str	r3, [r7, #12]
	HAL_Delay(1500);
 8003b48:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003b4c:	f000 fb2a 	bl	80041a4 <HAL_Delay>
    if (ctrl->valveTarget == 0){
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d103      	bne.n	8003b60 <CycleValves+0x24>
    	ctrl->valveTarget = 0x1;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b5e:	e011      	b.n	8003b84 <CycleValves+0x48>
    }
	else if (ctrl->valveTarget < 256){
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	2bff      	cmp	r3, #255	; 0xff
 8003b66:	d805      	bhi.n	8003b74 <CycleValves+0x38>

		ctrl->valveTarget *= 2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	005a      	lsls	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	631a      	str	r2, [r3, #48]	; 0x30
 8003b72:	e007      	b.n	8003b84 <CycleValves+0x48>


	}
	else if (ctrl->valveTarget == 256){
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7c:	d102      	bne.n	8003b84 <CycleValves+0x48>
		ctrl->valveTarget = 0 ;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
	}



	success &= ValveStateSetter(ctrl->valveTarget);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff f875 	bl	8002c78 <ValveStateSetter>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4013      	ands	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
	ctrl->valveConfiguration = StateConfiguration();
 8003b96:	f7fe fff1 	bl	8002b7c <StateConfiguration>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	62da      	str	r2, [r3, #44]	; 0x2c

	if (ctrl -> valveTarget == 1 && HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin)){
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d10d      	bne.n	8003bc4 <CycleValves+0x88>
 8003ba8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bb0:	f000 fe32 	bl	8004818 <HAL_GPIO_ReadPin>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d004      	beq.n	8003bc4 <CycleValves+0x88>
		UART_SendMessage(&huart2, " pvf01 ON...\n");
 8003bba:	49af      	ldr	r1, [pc, #700]	; (8003e78 <CycleValves+0x33c>)
 8003bbc:	48af      	ldr	r0, [pc, #700]	; (8003e7c <CycleValves+0x340>)
 8003bbe:	f7fd f94b 	bl	8000e58 <UART_SendMessage>
 8003bc2:	e099      	b.n	8003cf8 <CycleValves+0x1bc>
	}
	else if( ctrl-> valveTarget == 2 && HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin)){
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d10d      	bne.n	8003be8 <CycleValves+0xac>
 8003bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bd4:	f000 fe20 	bl	8004818 <HAL_GPIO_ReadPin>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d004      	beq.n	8003be8 <CycleValves+0xac>
		UART_SendMessage(&huart2, " pvf01 OFF...pvl01 ON\n");
 8003bde:	49a8      	ldr	r1, [pc, #672]	; (8003e80 <CycleValves+0x344>)
 8003be0:	48a6      	ldr	r0, [pc, #664]	; (8003e7c <CycleValves+0x340>)
 8003be2:	f7fd f939 	bl	8000e58 <UART_SendMessage>
 8003be6:	e087      	b.n	8003cf8 <CycleValves+0x1bc>
	}
	else if(ctrl-> valveTarget == 4 && HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin)){
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d10b      	bne.n	8003c08 <CycleValves+0xcc>
 8003bf0:	2180      	movs	r1, #128	; 0x80
 8003bf2:	48a4      	ldr	r0, [pc, #656]	; (8003e84 <CycleValves+0x348>)
 8003bf4:	f000 fe10 	bl	8004818 <HAL_GPIO_ReadPin>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d004      	beq.n	8003c08 <CycleValves+0xcc>
		UART_SendMessage(&huart2, " pvl01 OFF...pvp01 ON\n");
 8003bfe:	49a2      	ldr	r1, [pc, #648]	; (8003e88 <CycleValves+0x34c>)
 8003c00:	489e      	ldr	r0, [pc, #632]	; (8003e7c <CycleValves+0x340>)
 8003c02:	f7fd f929 	bl	8000e58 <UART_SendMessage>
 8003c06:	e077      	b.n	8003cf8 <CycleValves+0x1bc>
	}
	else if(ctrl-> valveTarget == 8 && HAL_GPIO_ReadPin(GPIOC, FUEL_VENT_Pin)){
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d10b      	bne.n	8003c28 <CycleValves+0xec>
 8003c10:	2140      	movs	r1, #64	; 0x40
 8003c12:	489c      	ldr	r0, [pc, #624]	; (8003e84 <CycleValves+0x348>)
 8003c14:	f000 fe00 	bl	8004818 <HAL_GPIO_ReadPin>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d004      	beq.n	8003c28 <CycleValves+0xec>
		UART_SendMessage(&huart2, " pvp01 OFF...sovf01 ON\n");
 8003c1e:	499b      	ldr	r1, [pc, #620]	; (8003e8c <CycleValves+0x350>)
 8003c20:	4896      	ldr	r0, [pc, #600]	; (8003e7c <CycleValves+0x340>)
 8003c22:	f7fd f919 	bl	8000e58 <UART_SendMessage>
 8003c26:	e067      	b.n	8003cf8 <CycleValves+0x1bc>
	}
	else if(ctrl-> valveTarget == 16 && HAL_GPIO_ReadPin(GPIOA, FUEL_MAIN_Pin)){
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d10d      	bne.n	8003c4c <CycleValves+0x110>
 8003c30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c38:	f000 fdee 	bl	8004818 <HAL_GPIO_ReadPin>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d004      	beq.n	8003c4c <CycleValves+0x110>
		UART_SendMessage(&huart2, " sovf01 OFF...pvf02 ON\n");
 8003c42:	4993      	ldr	r1, [pc, #588]	; (8003e90 <CycleValves+0x354>)
 8003c44:	488d      	ldr	r0, [pc, #564]	; (8003e7c <CycleValves+0x340>)
 8003c46:	f7fd f907 	bl	8000e58 <UART_SendMessage>
 8003c4a:	e055      	b.n	8003cf8 <CycleValves+0x1bc>
	}
	else if(ctrl-> valveTarget == 32 && HAL_GPIO_ReadPin(GPIOA, LOX_MAIN_Pin)){
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d10d      	bne.n	8003c70 <CycleValves+0x134>
 8003c54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c5c:	f000 fddc 	bl	8004818 <HAL_GPIO_ReadPin>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d004      	beq.n	8003c70 <CycleValves+0x134>
			UART_SendMessage(&huart2, " pvf02 OFF...pvl03 ON\n");
 8003c66:	498b      	ldr	r1, [pc, #556]	; (8003e94 <CycleValves+0x358>)
 8003c68:	4884      	ldr	r0, [pc, #528]	; (8003e7c <CycleValves+0x340>)
 8003c6a:	f7fd f8f5 	bl	8000e58 <UART_SendMessage>
 8003c6e:	e043      	b.n	8003cf8 <CycleValves+0x1bc>
	}
	else if(ctrl-> valveTarget == 64 && HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin)){
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d10c      	bne.n	8003c92 <CycleValves+0x156>
 8003c78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c7c:	4886      	ldr	r0, [pc, #536]	; (8003e98 <CycleValves+0x35c>)
 8003c7e:	f000 fdcb 	bl	8004818 <HAL_GPIO_ReadPin>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d004      	beq.n	8003c92 <CycleValves+0x156>
				UART_SendMessage(&huart2, " pvl03 OFF...pvlf01 ON\n");
 8003c88:	4984      	ldr	r1, [pc, #528]	; (8003e9c <CycleValves+0x360>)
 8003c8a:	487c      	ldr	r0, [pc, #496]	; (8003e7c <CycleValves+0x340>)
 8003c8c:	f7fd f8e4 	bl	8000e58 <UART_SendMessage>
 8003c90:	e032      	b.n	8003cf8 <CycleValves+0x1bc>
	}
	else if(ctrl-> valveTarget == 128 && HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin)){
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	2b80      	cmp	r3, #128	; 0x80
 8003c98:	d10c      	bne.n	8003cb4 <CycleValves+0x178>
 8003c9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c9e:	487e      	ldr	r0, [pc, #504]	; (8003e98 <CycleValves+0x35c>)
 8003ca0:	f000 fdba 	bl	8004818 <HAL_GPIO_ReadPin>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d004      	beq.n	8003cb4 <CycleValves+0x178>
					UART_SendMessage(&huart2, " pvlf01 OFF...pvl02 ON\n");
 8003caa:	497d      	ldr	r1, [pc, #500]	; (8003ea0 <CycleValves+0x364>)
 8003cac:	4873      	ldr	r0, [pc, #460]	; (8003e7c <CycleValves+0x340>)
 8003cae:	f7fd f8d3 	bl	8000e58 <UART_SendMessage>
 8003cb2:	e021      	b.n	8003cf8 <CycleValves+0x1bc>
		}
	else if(ctrl-> valveTarget == 256 && HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin)){
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cbc:	d10c      	bne.n	8003cd8 <CycleValves+0x19c>
 8003cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cc2:	4875      	ldr	r0, [pc, #468]	; (8003e98 <CycleValves+0x35c>)
 8003cc4:	f000 fda8 	bl	8004818 <HAL_GPIO_ReadPin>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d004      	beq.n	8003cd8 <CycleValves+0x19c>
						UART_SendMessage(&huart2, " pvl02 OFF...pvp02 ON\n");
 8003cce:	4975      	ldr	r1, [pc, #468]	; (8003ea4 <CycleValves+0x368>)
 8003cd0:	486a      	ldr	r0, [pc, #424]	; (8003e7c <CycleValves+0x340>)
 8003cd2:	f7fd f8c1 	bl	8000e58 <UART_SendMessage>
 8003cd6:	e00f      	b.n	8003cf8 <CycleValves+0x1bc>
			}
	else if (ctrl-> valveTarget == 0 && !( HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin)) ){
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10b      	bne.n	8003cf8 <CycleValves+0x1bc>
 8003ce0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ce4:	486c      	ldr	r0, [pc, #432]	; (8003e98 <CycleValves+0x35c>)
 8003ce6:	f000 fd97 	bl	8004818 <HAL_GPIO_ReadPin>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d103      	bne.n	8003cf8 <CycleValves+0x1bc>
		UART_SendMessage(&huart2, " pvp02 OFF...\n");
 8003cf0:	496d      	ldr	r1, [pc, #436]	; (8003ea8 <CycleValves+0x36c>)
 8003cf2:	4862      	ldr	r0, [pc, #392]	; (8003e7c <CycleValves+0x340>)
 8003cf4:	f7fd f8b0 	bl	8000e58 <UART_SendMessage>

	//Todo ADD  a handler for commands that can be tryin to access while the automatic sequence is on
    // Auto cycling GPIO check for messaging to VI and printing on screen
    //pvf01
	//HAL_Delay(2);//allow time to read
	if(HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin)){
 8003cf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d00:	f000 fd8a 	bl	8004818 <HAL_GPIO_ReadPin>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d004      	beq.n	8003d14 <CycleValves+0x1d8>
		// UART_SendMessage(&huart2, " pvf01 ON...");
		 UART_SendMessage_VI(&huart3, " pvf01 ON...\n");
 8003d0a:	495b      	ldr	r1, [pc, #364]	; (8003e78 <CycleValves+0x33c>)
 8003d0c:	4867      	ldr	r0, [pc, #412]	; (8003eac <CycleValves+0x370>)
 8003d0e:	f7fd f8c5 	bl	8000e9c <UART_SendMessage_VI>
 8003d12:	e00c      	b.n	8003d2e <CycleValves+0x1f2>
	}
	else if ( !(HAL_GPIO_ReadPin(GPIOA, FUEL_PRESSURE_Pin))){
 8003d14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d1c:	f000 fd7c 	bl	8004818 <HAL_GPIO_ReadPin>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d103      	bne.n	8003d2e <CycleValves+0x1f2>
		 //UART_SendMessage(&huart2, " pvf01 OFF...");
		 UART_SendMessage_VI(&huart3, " pvf01 OFF...\n");
 8003d26:	4962      	ldr	r1, [pc, #392]	; (8003eb0 <CycleValves+0x374>)
 8003d28:	4860      	ldr	r0, [pc, #384]	; (8003eac <CycleValves+0x370>)
 8003d2a:	f7fd f8b7 	bl	8000e9c <UART_SendMessage_VI>

	}
	//pvl01

	if (HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin)){
 8003d2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d36:	f000 fd6f 	bl	8004818 <HAL_GPIO_ReadPin>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d004      	beq.n	8003d4a <CycleValves+0x20e>
		 //UART_SendMessage(&huart2, " pvl01 ON...");
		 UART_SendMessage_VI(&huart3, " pvl01 ON...\n");
 8003d40:	495c      	ldr	r1, [pc, #368]	; (8003eb4 <CycleValves+0x378>)
 8003d42:	485a      	ldr	r0, [pc, #360]	; (8003eac <CycleValves+0x370>)
 8003d44:	f7fd f8aa 	bl	8000e9c <UART_SendMessage_VI>
 8003d48:	e00c      	b.n	8003d64 <CycleValves+0x228>
	}
	else if (!( HAL_GPIO_ReadPin(GPIOA, LOX_PRESSURE_Pin))){
 8003d4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d52:	f000 fd61 	bl	8004818 <HAL_GPIO_ReadPin>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d103      	bne.n	8003d64 <CycleValves+0x228>
		 //UART_SendMessage(&huart2, " pvl01 OFF...");
		 UART_SendMessage_VI(&huart3, " pvl01 OFF...\n");
 8003d5c:	4956      	ldr	r1, [pc, #344]	; (8003eb8 <CycleValves+0x37c>)
 8003d5e:	4853      	ldr	r0, [pc, #332]	; (8003eac <CycleValves+0x370>)
 8003d60:	f7fd f89c 	bl	8000e9c <UART_SendMessage_VI>
	}
    //pvp01

	if (HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin)){
 8003d64:	2180      	movs	r1, #128	; 0x80
 8003d66:	4847      	ldr	r0, [pc, #284]	; (8003e84 <CycleValves+0x348>)
 8003d68:	f000 fd56 	bl	8004818 <HAL_GPIO_ReadPin>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d004      	beq.n	8003d7c <CycleValves+0x240>
		 //UART_SendMessage(&huart2, " pvp01 ON...");
		 UART_SendMessage_VI(&huart3, " pvp01 ON...\n");
 8003d72:	4952      	ldr	r1, [pc, #328]	; (8003ebc <CycleValves+0x380>)
 8003d74:	484d      	ldr	r0, [pc, #308]	; (8003eac <CycleValves+0x370>)
 8003d76:	f7fd f891 	bl	8000e9c <UART_SendMessage_VI>
 8003d7a:	e00a      	b.n	8003d92 <CycleValves+0x256>
	}
	else if (!( HAL_GPIO_ReadPin(GPIOC, FUEL_PURGE_N2_Pin))){
 8003d7c:	2180      	movs	r1, #128	; 0x80
 8003d7e:	4841      	ldr	r0, [pc, #260]	; (8003e84 <CycleValves+0x348>)
 8003d80:	f000 fd4a 	bl	8004818 <HAL_GPIO_ReadPin>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d103      	bne.n	8003d92 <CycleValves+0x256>
		 //UART_SendMessage(&huart2, " pvp01 OFF...");
		 UART_SendMessage_VI(&huart3, " pvp01 OFF...\n");
 8003d8a:	494d      	ldr	r1, [pc, #308]	; (8003ec0 <CycleValves+0x384>)
 8003d8c:	4847      	ldr	r0, [pc, #284]	; (8003eac <CycleValves+0x370>)
 8003d8e:	f7fd f885 	bl	8000e9c <UART_SendMessage_VI>
	}

    //sovf01
	if (HAL_GPIO_ReadPin(GPIOC, FUEL_VENT_Pin)){
 8003d92:	2140      	movs	r1, #64	; 0x40
 8003d94:	483b      	ldr	r0, [pc, #236]	; (8003e84 <CycleValves+0x348>)
 8003d96:	f000 fd3f 	bl	8004818 <HAL_GPIO_ReadPin>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d004      	beq.n	8003daa <CycleValves+0x26e>
		// UART_SendMessage(&huart2, " sovf01 ON...");
		 UART_SendMessage_VI(&huart3, " sovf01 ON...\n");
 8003da0:	4948      	ldr	r1, [pc, #288]	; (8003ec4 <CycleValves+0x388>)
 8003da2:	4842      	ldr	r0, [pc, #264]	; (8003eac <CycleValves+0x370>)
 8003da4:	f7fd f87a 	bl	8000e9c <UART_SendMessage_VI>
 8003da8:	e00a      	b.n	8003dc0 <CycleValves+0x284>
	}
	else if(!( HAL_GPIO_ReadPin(GPIOC, FUEL_VENT_Pin))){
 8003daa:	2140      	movs	r1, #64	; 0x40
 8003dac:	4835      	ldr	r0, [pc, #212]	; (8003e84 <CycleValves+0x348>)
 8003dae:	f000 fd33 	bl	8004818 <HAL_GPIO_ReadPin>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d103      	bne.n	8003dc0 <CycleValves+0x284>
		 //UART_SendMessage(&huart2, " sovf01 OFF...");
		 UART_SendMessage_VI(&huart3, " sovf01 OFF...\n");
 8003db8:	4943      	ldr	r1, [pc, #268]	; (8003ec8 <CycleValves+0x38c>)
 8003dba:	483c      	ldr	r0, [pc, #240]	; (8003eac <CycleValves+0x370>)
 8003dbc:	f7fd f86e 	bl	8000e9c <UART_SendMessage_VI>
	}

    //pvf02

	if (HAL_GPIO_ReadPin(GPIOA, FUEL_MAIN_Pin)){
 8003dc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dc8:	f000 fd26 	bl	8004818 <HAL_GPIO_ReadPin>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d004      	beq.n	8003ddc <CycleValves+0x2a0>
		// UART_SendMessage(&huart2, " pvf02 ON...");
		 UART_SendMessage_VI(&huart3, " pvf02 ON...\n");
 8003dd2:	493e      	ldr	r1, [pc, #248]	; (8003ecc <CycleValves+0x390>)
 8003dd4:	4835      	ldr	r0, [pc, #212]	; (8003eac <CycleValves+0x370>)
 8003dd6:	f7fd f861 	bl	8000e9c <UART_SendMessage_VI>
 8003dda:	e00c      	b.n	8003df6 <CycleValves+0x2ba>
	}
	else if(!( HAL_GPIO_ReadPin(GPIOA, FUEL_MAIN_Pin))){
 8003ddc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003de4:	f000 fd18 	bl	8004818 <HAL_GPIO_ReadPin>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d103      	bne.n	8003df6 <CycleValves+0x2ba>
		// UART_SendMessage(&huart2, " pvf02 OFF...");
		 UART_SendMessage_VI(&huart3, " pvf02 OFF...\n");
 8003dee:	4938      	ldr	r1, [pc, #224]	; (8003ed0 <CycleValves+0x394>)
 8003df0:	482e      	ldr	r0, [pc, #184]	; (8003eac <CycleValves+0x370>)
 8003df2:	f7fd f853 	bl	8000e9c <UART_SendMessage_VI>
	}

    //pvl03
	if (HAL_GPIO_ReadPin(GPIOA, LOX_MAIN_Pin)){
 8003df6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dfe:	f000 fd0b 	bl	8004818 <HAL_GPIO_ReadPin>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d004      	beq.n	8003e12 <CycleValves+0x2d6>
		// UART_SendMessage(&huart2, " pvl03 ON...");
		 UART_SendMessage_VI(&huart3, " pvl03 ON...\n");
 8003e08:	4932      	ldr	r1, [pc, #200]	; (8003ed4 <CycleValves+0x398>)
 8003e0a:	4828      	ldr	r0, [pc, #160]	; (8003eac <CycleValves+0x370>)
 8003e0c:	f7fd f846 	bl	8000e9c <UART_SendMessage_VI>
 8003e10:	e00c      	b.n	8003e2c <CycleValves+0x2f0>
	}
	else if (!( HAL_GPIO_ReadPin(GPIOA, LOX_MAIN_Pin))){
 8003e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e1a:	f000 fcfd 	bl	8004818 <HAL_GPIO_ReadPin>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d103      	bne.n	8003e2c <CycleValves+0x2f0>
		// UART_SendMessage(&huart2, " pvl03 OFF...");
		 UART_SendMessage_VI(&huart3, " pvl03 OFF...\n");
 8003e24:	492c      	ldr	r1, [pc, #176]	; (8003ed8 <CycleValves+0x39c>)
 8003e26:	4821      	ldr	r0, [pc, #132]	; (8003eac <CycleValves+0x370>)
 8003e28:	f7fd f838 	bl	8000e9c <UART_SendMessage_VI>
	}


    //pvlf01
	if (HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin)){
 8003e2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e30:	4819      	ldr	r0, [pc, #100]	; (8003e98 <CycleValves+0x35c>)
 8003e32:	f000 fcf1 	bl	8004818 <HAL_GPIO_ReadPin>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d004      	beq.n	8003e46 <CycleValves+0x30a>
		// UART_SendMessage(&huart2, " pvlf01 ON...");
		 UART_SendMessage_VI(&huart3, " pvlf01 ON...\n");
 8003e3c:	4927      	ldr	r1, [pc, #156]	; (8003edc <CycleValves+0x3a0>)
 8003e3e:	481b      	ldr	r0, [pc, #108]	; (8003eac <CycleValves+0x370>)
 8003e40:	f7fd f82c 	bl	8000e9c <UART_SendMessage_VI>
 8003e44:	e00b      	b.n	8003e5e <CycleValves+0x322>
	}
	else if(!( HAL_GPIO_ReadPin(GPIOB, LOX_FILL_Pin))){
 8003e46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e4a:	4813      	ldr	r0, [pc, #76]	; (8003e98 <CycleValves+0x35c>)
 8003e4c:	f000 fce4 	bl	8004818 <HAL_GPIO_ReadPin>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d103      	bne.n	8003e5e <CycleValves+0x322>
		// UART_SendMessage(&huart2, " pvlf01 OFF...");
		 UART_SendMessage_VI(&huart3, " pvlf01 OFF...\n");
 8003e56:	4922      	ldr	r1, [pc, #136]	; (8003ee0 <CycleValves+0x3a4>)
 8003e58:	4814      	ldr	r0, [pc, #80]	; (8003eac <CycleValves+0x370>)
 8003e5a:	f7fd f81f 	bl	8000e9c <UART_SendMessage_VI>
	}

    //pvl02
	if (HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin)){
 8003e5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e62:	480d      	ldr	r0, [pc, #52]	; (8003e98 <CycleValves+0x35c>)
 8003e64:	f000 fcd8 	bl	8004818 <HAL_GPIO_ReadPin>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d03c      	beq.n	8003ee8 <CycleValves+0x3ac>
		// UART_SendMessage(&huart2, " pvl02 ON...");
		 UART_SendMessage_VI(&huart3, " pvl02 ON...\n");
 8003e6e:	491d      	ldr	r1, [pc, #116]	; (8003ee4 <CycleValves+0x3a8>)
 8003e70:	480e      	ldr	r0, [pc, #56]	; (8003eac <CycleValves+0x370>)
 8003e72:	f7fd f813 	bl	8000e9c <UART_SendMessage_VI>
 8003e76:	e043      	b.n	8003f00 <CycleValves+0x3c4>
 8003e78:	08008138 	.word	0x08008138
 8003e7c:	20001650 	.word	0x20001650
 8003e80:	08008148 	.word	0x08008148
 8003e84:	48000800 	.word	0x48000800
 8003e88:	08008160 	.word	0x08008160
 8003e8c:	08008178 	.word	0x08008178
 8003e90:	08008190 	.word	0x08008190
 8003e94:	080081a8 	.word	0x080081a8
 8003e98:	48000400 	.word	0x48000400
 8003e9c:	080081c0 	.word	0x080081c0
 8003ea0:	080081d8 	.word	0x080081d8
 8003ea4:	080081f0 	.word	0x080081f0
 8003ea8:	08008208 	.word	0x08008208
 8003eac:	20000250 	.word	0x20000250
 8003eb0:	08008218 	.word	0x08008218
 8003eb4:	08008228 	.word	0x08008228
 8003eb8:	08008238 	.word	0x08008238
 8003ebc:	08008248 	.word	0x08008248
 8003ec0:	08008258 	.word	0x08008258
 8003ec4:	08008268 	.word	0x08008268
 8003ec8:	08008278 	.word	0x08008278
 8003ecc:	08008288 	.word	0x08008288
 8003ed0:	08008298 	.word	0x08008298
 8003ed4:	080082a8 	.word	0x080082a8
 8003ed8:	080082b8 	.word	0x080082b8
 8003edc:	080082c8 	.word	0x080082c8
 8003ee0:	080082d8 	.word	0x080082d8
 8003ee4:	080082e8 	.word	0x080082e8
	}
	else if(!( HAL_GPIO_ReadPin(GPIOB, LOX_VENT_Pin))){
 8003ee8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003eec:	4813      	ldr	r0, [pc, #76]	; (8003f3c <CycleValves+0x400>)
 8003eee:	f000 fc93 	bl	8004818 <HAL_GPIO_ReadPin>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d103      	bne.n	8003f00 <CycleValves+0x3c4>
		// UART_SendMessage(&huart2, " pvl02 OFF...");
		 UART_SendMessage_VI(&huart3, " pvl02 OFF...\n");
 8003ef8:	4911      	ldr	r1, [pc, #68]	; (8003f40 <CycleValves+0x404>)
 8003efa:	4812      	ldr	r0, [pc, #72]	; (8003f44 <CycleValves+0x408>)
 8003efc:	f7fc ffce 	bl	8000e9c <UART_SendMessage_VI>
	}
	//pvp02
	if (HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin)){
 8003f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f04:	480d      	ldr	r0, [pc, #52]	; (8003f3c <CycleValves+0x400>)
 8003f06:	f000 fc87 	bl	8004818 <HAL_GPIO_ReadPin>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <CycleValves+0x3de>
		// UART_SendMessage(&huart2, " pvp02 ON... \n");
		 UART_SendMessage_VI(&huart3, " pvp02 ON...\n");
 8003f10:	490d      	ldr	r1, [pc, #52]	; (8003f48 <CycleValves+0x40c>)
 8003f12:	480c      	ldr	r0, [pc, #48]	; (8003f44 <CycleValves+0x408>)
 8003f14:	f7fc ffc2 	bl	8000e9c <UART_SendMessage_VI>
 8003f18:	e00b      	b.n	8003f32 <CycleValves+0x3f6>

	}
	else if(!( HAL_GPIO_ReadPin(GPIOB, LOX_PURGE_Pin))){
 8003f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f1e:	4807      	ldr	r0, [pc, #28]	; (8003f3c <CycleValves+0x400>)
 8003f20:	f000 fc7a 	bl	8004818 <HAL_GPIO_ReadPin>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d103      	bne.n	8003f32 <CycleValves+0x3f6>
		 //UART_SendMessage(&huart2, " pvp02 OFF...\n");
		 UART_SendMessage_VI(&huart3, " pvp02 OFF...\n");
 8003f2a:	4908      	ldr	r1, [pc, #32]	; (8003f4c <CycleValves+0x410>)
 8003f2c:	4805      	ldr	r0, [pc, #20]	; (8003f44 <CycleValves+0x408>)
 8003f2e:	f7fc ffb5 	bl	8000e9c <UART_SendMessage_VI>
	}



	return success;
 8003f32:	68fb      	ldr	r3, [r7, #12]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	48000400 	.word	0x48000400
 8003f40:	080082f8 	.word	0x080082f8
 8003f44:	20000250 	.word	0x20000250
 8003f48:	08008308 	.word	0x08008308
 8003f4c:	08008208 	.word	0x08008208

08003f50 <ValveCheck>:
#include "messages.h"
#include "ring_buffer.h"


uint32_t ValveCheck(struct StateVars *ctrl)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	uint32_t success = TRUE;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	60fb      	str	r3, [r7, #12]
	// Configure the Valves depending in the State.
	ctrl->valveConfiguration = StateConfiguration();
 8003f5c:	f7fe fe0e 	bl	8002b7c <StateConfiguration>
 8003f60:	4602      	mov	r2, r0
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	62da      	str	r2, [r3, #44]	; 0x2c


    if(VerifyState(ctrl->currentState) && VerifyState(ctrl->lastState))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fe fdcb 	bl	8002b08 <VerifyState>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d053      	beq.n	8004020 <ValveCheck+0xd0>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe fdc2 	bl	8002b08 <VerifyState>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d04a      	beq.n	8004020 <ValveCheck+0xd0>
    {
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d036      	beq.n	8004006 <ValveCheck+0xb6>
    		// pvf01   pvl01   pvp01   sovf01   pvf02   pvl03   pvlf01   pvl02   pvp02  IG1
    		//|  01 |  01  |  01  |   01  |  01  |  01 |  01  |  01  |  01 |  01 |

    		StateStatus(ctrl);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7fe fd5f 	bl	8002a5c <StateStatus>
    		// If this is the first time, initialize state
    		if(ctrl->currentState != ctrl->lastState)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d009      	beq.n	8003fc2 <ValveCheck+0x72>
    	    {
    			//Start by setting all the valves OFF
    			ctrl->valveTarget  = !((uint16_t)pvf01 \
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
    					|(uint16_t)pvl03 \
    					|(uint16_t)pvlf01 \
    					|(uint16_t)pvl02 \
    					|(uint16_t)pvp02 \
						|(uint16_t)IG1);
    		    valves_selected = 0;
 8003fb4:	4b25      	ldr	r3, [pc, #148]	; (800404c <ValveCheck+0xfc>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	801a      	strh	r2, [r3, #0]
    			success = StateInitialize(ctrl);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fe ff30 	bl	8002e20 <StateInitialize>
 8003fc0:	60f8      	str	r0, [r7, #12]
    	    }
    		// Process a Marionette Data Packet
    		ringBufferRead();
 8003fc2:	f7fe f8f9 	bl	80021b8 <ringBufferRead>

    		// Check for command changes
    		ProcessCommands(ctrl);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fd f930 	bl	800122c <ProcessCommands>

    		// Function to handle individual valves.
    		ValveCheckCmd(ctrl);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7fe ff4b 	bl	8002e68 <ValveCheckCmd>

    		//If the Valve configuration is the same as the ValveTarget set success as 1 for TRUE or 0 FALSE
    		success &= (ctrl->valveConfiguration == ctrl->valveTarget ? TRUE : FALSE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d101      	bne.n	8003fe2 <ValveCheck+0x92>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <ValveCheck+0x94>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

    		// Increment state counter // Testing Purposes
			ctrl->stateCounter++;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
			if(ctrl->stateCounter >= 4294967295) ctrl->stateCounter = 0;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffc:	d11f      	bne.n	800403e <ValveCheck+0xee>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	609a      	str	r2, [r3, #8]
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 8004004:	e01b      	b.n	800403e <ValveCheck+0xee>
    	}else{
    		// If current State dosn't match the expected current State
    		//Log Expected State != Passed State
    		Get_State_Disagree_Error_Msg(Tx_Buffer, VALVE_CHECK, ctrl->currentState);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800400c:	461a      	mov	r2, r3
 800400e:	2101      	movs	r1, #1
 8004010:	480f      	ldr	r0, [pc, #60]	; (8004050 <ValveCheck+0x100>)
 8004012:	f7fd fddd 	bl	8001bd0 <Get_State_Disagree_Error_Msg>
    		UART_SendMessage(&huart2,Tx_Buffer);
 8004016:	490e      	ldr	r1, [pc, #56]	; (8004050 <ValveCheck+0x100>)
 8004018:	480e      	ldr	r0, [pc, #56]	; (8004054 <ValveCheck+0x104>)
 800401a:	f7fc ff1d 	bl	8000e58 <UART_SendMessage>
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 800401e:	e00e      	b.n	800403e <ValveCheck+0xee>
    	}
    }else{

    	// If current State and Last State dosnt match the expected states.
    	// Log Invalid State and let the user know.
    	Get_Invalid_State_Error_Msg(Tx_Buffer, ctrl->currentState, ctrl->lastState);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800402c:	461a      	mov	r2, r3
 800402e:	4808      	ldr	r0, [pc, #32]	; (8004050 <ValveCheck+0x100>)
 8004030:	f7fd fe48 	bl	8001cc4 <Get_Invalid_State_Error_Msg>
    	UART_SendMessage(&huart2, Tx_Buffer);
 8004034:	4906      	ldr	r1, [pc, #24]	; (8004050 <ValveCheck+0x100>)
 8004036:	4807      	ldr	r0, [pc, #28]	; (8004054 <ValveCheck+0x104>)
 8004038:	f7fc ff0e 	bl	8000e58 <UART_SendMessage>
 800403c:	e000      	b.n	8004040 <ValveCheck+0xf0>
    	if((ctrl->currentState & VALVE_CHECK) == VALVE_CHECK){
 800403e:	bf00      	nop
    }
	return success;
 8004040:	68fb      	ldr	r3, [r7, #12]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20001714 	.word	0x20001714
 8004050:	20000360 	.word	0x20000360
 8004054:	20001650 	.word	0x20001650

08004058 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004090 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800405c:	f7fe fc50 	bl	8002900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004060:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004062:	e003      	b.n	800406c <LoopCopyDataInit>

08004064 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004064:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004066:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004068:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800406a:	3104      	adds	r1, #4

0800406c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800406c:	480a      	ldr	r0, [pc, #40]	; (8004098 <LoopForever+0xa>)
	ldr	r3, =_edata
 800406e:	4b0b      	ldr	r3, [pc, #44]	; (800409c <LoopForever+0xe>)
	adds	r2, r0, r1
 8004070:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004072:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004074:	d3f6      	bcc.n	8004064 <CopyDataInit>
	ldr	r2, =_sbss
 8004076:	4a0a      	ldr	r2, [pc, #40]	; (80040a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004078:	e002      	b.n	8004080 <LoopFillZerobss>

0800407a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800407a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800407c:	f842 3b04 	str.w	r3, [r2], #4

08004080 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004080:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <LoopForever+0x16>)
	cmp	r2, r3
 8004082:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004084:	d3f9      	bcc.n	800407a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004086:	f002 fefb 	bl	8006e80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800408a:	f7fc fe81 	bl	8000d90 <main>

0800408e <LoopForever>:

LoopForever:
    b LoopForever
 800408e:	e7fe      	b.n	800408e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004090:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004094:	080083a4 	.word	0x080083a4
	ldr	r0, =_sdata
 8004098:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800409c:	2000015c 	.word	0x2000015c
	ldr	r2, =_sbss
 80040a0:	2000015c 	.word	0x2000015c
	ldr	r3, = _ebss
 80040a4:	2000172c 	.word	0x2000172c

080040a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040a8:	e7fe      	b.n	80040a8 <ADC1_2_IRQHandler>
	...

080040ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040b6:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <HAL_Init+0x3c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a0b      	ldr	r2, [pc, #44]	; (80040e8 <HAL_Init+0x3c>)
 80040bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040c2:	2003      	movs	r0, #3
 80040c4:	f000 f978 	bl	80043b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040c8:	2000      	movs	r0, #0
 80040ca:	f000 f80f 	bl	80040ec <HAL_InitTick>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	71fb      	strb	r3, [r7, #7]
 80040d8:	e001      	b.n	80040de <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80040da:	f7fe fab1 	bl	8002640 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80040de:	79fb      	ldrb	r3, [r7, #7]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40022000 	.word	0x40022000

080040ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80040f8:	4b17      	ldr	r3, [pc, #92]	; (8004158 <HAL_InitTick+0x6c>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d023      	beq.n	8004148 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004100:	4b16      	ldr	r3, [pc, #88]	; (800415c <HAL_InitTick+0x70>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	4b14      	ldr	r3, [pc, #80]	; (8004158 <HAL_InitTick+0x6c>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	4619      	mov	r1, r3
 800410a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800410e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004112:	fbb2 f3f3 	udiv	r3, r2, r3
 8004116:	4618      	mov	r0, r3
 8004118:	f000 f987 	bl	800442a <HAL_SYSTICK_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10f      	bne.n	8004142 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b0f      	cmp	r3, #15
 8004126:	d809      	bhi.n	800413c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004128:	2200      	movs	r2, #0
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	f04f 30ff 	mov.w	r0, #4294967295
 8004130:	f000 f94d 	bl	80043ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004134:	4a0a      	ldr	r2, [pc, #40]	; (8004160 <HAL_InitTick+0x74>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e007      	b.n	800414c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
 8004140:	e004      	b.n	800414c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
 8004146:	e001      	b.n	800414c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800414c:	7bfb      	ldrb	r3, [r7, #15]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	200000f4 	.word	0x200000f4
 800415c:	20000094 	.word	0x20000094
 8004160:	200000f0 	.word	0x200000f0

08004164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_IncTick+0x20>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	4b06      	ldr	r3, [pc, #24]	; (8004188 <HAL_IncTick+0x24>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4413      	add	r3, r2
 8004174:	4a04      	ldr	r2, [pc, #16]	; (8004188 <HAL_IncTick+0x24>)
 8004176:	6013      	str	r3, [r2, #0]
}
 8004178:	bf00      	nop
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	200000f4 	.word	0x200000f4
 8004188:	20001718 	.word	0x20001718

0800418c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return uwTick;
 8004190:	4b03      	ldr	r3, [pc, #12]	; (80041a0 <HAL_GetTick+0x14>)
 8004192:	681b      	ldr	r3, [r3, #0]
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20001718 	.word	0x20001718

080041a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041ac:	f7ff ffee 	bl	800418c <HAL_GetTick>
 80041b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d005      	beq.n	80041ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80041be:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <HAL_Delay+0x44>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041ca:	bf00      	nop
 80041cc:	f7ff ffde 	bl	800418c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d8f7      	bhi.n	80041cc <HAL_Delay+0x28>
  {
  }
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	200000f4 	.word	0x200000f4

080041ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <__NVIC_SetPriorityGrouping+0x44>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004208:	4013      	ands	r3, r2
 800420a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800421c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800421e:	4a04      	ldr	r2, [pc, #16]	; (8004230 <__NVIC_SetPriorityGrouping+0x44>)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	60d3      	str	r3, [r2, #12]
}
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	e000ed00 	.word	0xe000ed00

08004234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004238:	4b04      	ldr	r3, [pc, #16]	; (800424c <__NVIC_GetPriorityGrouping+0x18>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	0a1b      	lsrs	r3, r3, #8
 800423e:	f003 0307 	and.w	r3, r3, #7
}
 8004242:	4618      	mov	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	e000ed00 	.word	0xe000ed00

08004250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800425a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425e:	2b00      	cmp	r3, #0
 8004260:	db0b      	blt.n	800427a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	f003 021f 	and.w	r2, r3, #31
 8004268:	4907      	ldr	r1, [pc, #28]	; (8004288 <__NVIC_EnableIRQ+0x38>)
 800426a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	2001      	movs	r0, #1
 8004272:	fa00 f202 	lsl.w	r2, r0, r2
 8004276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	e000e100 	.word	0xe000e100

0800428c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	6039      	str	r1, [r7, #0]
 8004296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429c:	2b00      	cmp	r3, #0
 800429e:	db0a      	blt.n	80042b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	490c      	ldr	r1, [pc, #48]	; (80042d8 <__NVIC_SetPriority+0x4c>)
 80042a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042aa:	0112      	lsls	r2, r2, #4
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	440b      	add	r3, r1
 80042b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042b4:	e00a      	b.n	80042cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	4908      	ldr	r1, [pc, #32]	; (80042dc <__NVIC_SetPriority+0x50>)
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	3b04      	subs	r3, #4
 80042c4:	0112      	lsls	r2, r2, #4
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	440b      	add	r3, r1
 80042ca:	761a      	strb	r2, [r3, #24]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	e000e100 	.word	0xe000e100
 80042dc:	e000ed00 	.word	0xe000ed00

080042e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b089      	sub	sp, #36	; 0x24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f1c3 0307 	rsb	r3, r3, #7
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	bf28      	it	cs
 80042fe:	2304      	movcs	r3, #4
 8004300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	3304      	adds	r3, #4
 8004306:	2b06      	cmp	r3, #6
 8004308:	d902      	bls.n	8004310 <NVIC_EncodePriority+0x30>
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	3b03      	subs	r3, #3
 800430e:	e000      	b.n	8004312 <NVIC_EncodePriority+0x32>
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004314:	f04f 32ff 	mov.w	r2, #4294967295
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43da      	mvns	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	401a      	ands	r2, r3
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004328:	f04f 31ff 	mov.w	r1, #4294967295
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	fa01 f303 	lsl.w	r3, r1, r3
 8004332:	43d9      	mvns	r1, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004338:	4313      	orrs	r3, r2
         );
}
 800433a:	4618      	mov	r0, r3
 800433c:	3724      	adds	r7, #36	; 0x24
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800434c:	f3bf 8f4f 	dsb	sy
}
 8004350:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004352:	4b06      	ldr	r3, [pc, #24]	; (800436c <__NVIC_SystemReset+0x24>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800435a:	4904      	ldr	r1, [pc, #16]	; (800436c <__NVIC_SystemReset+0x24>)
 800435c:	4b04      	ldr	r3, [pc, #16]	; (8004370 <__NVIC_SystemReset+0x28>)
 800435e:	4313      	orrs	r3, r2
 8004360:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004362:	f3bf 8f4f 	dsb	sy
}
 8004366:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004368:	bf00      	nop
 800436a:	e7fd      	b.n	8004368 <__NVIC_SystemReset+0x20>
 800436c:	e000ed00 	.word	0xe000ed00
 8004370:	05fa0004 	.word	0x05fa0004

08004374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3b01      	subs	r3, #1
 8004380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004384:	d301      	bcc.n	800438a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004386:	2301      	movs	r3, #1
 8004388:	e00f      	b.n	80043aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800438a:	4a0a      	ldr	r2, [pc, #40]	; (80043b4 <SysTick_Config+0x40>)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3b01      	subs	r3, #1
 8004390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004392:	210f      	movs	r1, #15
 8004394:	f04f 30ff 	mov.w	r0, #4294967295
 8004398:	f7ff ff78 	bl	800428c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <SysTick_Config+0x40>)
 800439e:	2200      	movs	r2, #0
 80043a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043a2:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <SysTick_Config+0x40>)
 80043a4:	2207      	movs	r2, #7
 80043a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	e000e010 	.word	0xe000e010

080043b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff ff13 	bl	80041ec <__NVIC_SetPriorityGrouping>
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b086      	sub	sp, #24
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	4603      	mov	r3, r0
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	607a      	str	r2, [r7, #4]
 80043da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043e0:	f7ff ff28 	bl	8004234 <__NVIC_GetPriorityGrouping>
 80043e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	6978      	ldr	r0, [r7, #20]
 80043ec:	f7ff ff78 	bl	80042e0 <NVIC_EncodePriority>
 80043f0:	4602      	mov	r2, r0
 80043f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f6:	4611      	mov	r1, r2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff ff47 	bl	800428c <__NVIC_SetPriority>
}
 80043fe:	bf00      	nop
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	4603      	mov	r3, r0
 800440e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff ff1b 	bl	8004250 <__NVIC_EnableIRQ>
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004426:	f7ff ff8f 	bl	8004348 <__NVIC_SystemReset>

0800442a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7ff ff9e 	bl	8004374 <SysTick_Config>
 8004438:	4603      	mov	r3, r0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d005      	beq.n	8004466 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2204      	movs	r2, #4
 800445e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	73fb      	strb	r3, [r7, #15]
 8004464:	e029      	b.n	80044ba <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 020e 	bic.w	r2, r2, #14
 8004474:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0201 	bic.w	r2, r2, #1
 8004484:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448a:	f003 021c 	and.w	r2, r3, #28
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	2101      	movs	r1, #1
 8004494:	fa01 f202 	lsl.w	r2, r1, r2
 8004498:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	4798      	blx	r3
    }
  }
  return status;
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044d2:	e17f      	b.n	80047d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	2101      	movs	r1, #1
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	fa01 f303 	lsl.w	r3, r1, r3
 80044e0:	4013      	ands	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8171 	beq.w	80047ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d00b      	beq.n	800450c <HAL_GPIO_Init+0x48>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d007      	beq.n	800450c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004500:	2b11      	cmp	r3, #17
 8004502:	d003      	beq.n	800450c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b12      	cmp	r3, #18
 800450a:	d130      	bne.n	800456e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	2203      	movs	r2, #3
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4013      	ands	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004542:	2201      	movs	r2, #1
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	43db      	mvns	r3, r3
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4013      	ands	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	091b      	lsrs	r3, r3, #4
 8004558:	f003 0201 	and.w	r2, r3, #1
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	2b03      	cmp	r3, #3
 8004578:	d118      	bne.n	80045ac <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004580:	2201      	movs	r2, #1
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	43db      	mvns	r3, r3
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4013      	ands	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	08db      	lsrs	r3, r3, #3
 8004596:	f003 0201 	and.w	r2, r3, #1
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	2203      	movs	r2, #3
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4013      	ands	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d003      	beq.n	80045ec <HAL_GPIO_Init+0x128>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b12      	cmp	r3, #18
 80045ea:	d123      	bne.n	8004634 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	08da      	lsrs	r2, r3, #3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3208      	adds	r2, #8
 80045f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	220f      	movs	r2, #15
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4013      	ands	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	08da      	lsrs	r2, r3, #3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3208      	adds	r2, #8
 800462e:	6939      	ldr	r1, [r7, #16]
 8004630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	2203      	movs	r2, #3
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	43db      	mvns	r3, r3
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4013      	ands	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 0203 	and.w	r2, r3, #3
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80ac 	beq.w	80047ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004676:	4b5f      	ldr	r3, [pc, #380]	; (80047f4 <HAL_GPIO_Init+0x330>)
 8004678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467a:	4a5e      	ldr	r2, [pc, #376]	; (80047f4 <HAL_GPIO_Init+0x330>)
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	6613      	str	r3, [r2, #96]	; 0x60
 8004682:	4b5c      	ldr	r3, [pc, #368]	; (80047f4 <HAL_GPIO_Init+0x330>)
 8004684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	60bb      	str	r3, [r7, #8]
 800468c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800468e:	4a5a      	ldr	r2, [pc, #360]	; (80047f8 <HAL_GPIO_Init+0x334>)
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	089b      	lsrs	r3, r3, #2
 8004694:	3302      	adds	r3, #2
 8004696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800469a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	220f      	movs	r2, #15
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43db      	mvns	r3, r3
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4013      	ands	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046b8:	d025      	beq.n	8004706 <HAL_GPIO_Init+0x242>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a4f      	ldr	r2, [pc, #316]	; (80047fc <HAL_GPIO_Init+0x338>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d01f      	beq.n	8004702 <HAL_GPIO_Init+0x23e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a4e      	ldr	r2, [pc, #312]	; (8004800 <HAL_GPIO_Init+0x33c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d019      	beq.n	80046fe <HAL_GPIO_Init+0x23a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a4d      	ldr	r2, [pc, #308]	; (8004804 <HAL_GPIO_Init+0x340>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <HAL_GPIO_Init+0x236>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a4c      	ldr	r2, [pc, #304]	; (8004808 <HAL_GPIO_Init+0x344>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00d      	beq.n	80046f6 <HAL_GPIO_Init+0x232>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a4b      	ldr	r2, [pc, #300]	; (800480c <HAL_GPIO_Init+0x348>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d007      	beq.n	80046f2 <HAL_GPIO_Init+0x22e>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a4a      	ldr	r2, [pc, #296]	; (8004810 <HAL_GPIO_Init+0x34c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d101      	bne.n	80046ee <HAL_GPIO_Init+0x22a>
 80046ea:	2306      	movs	r3, #6
 80046ec:	e00c      	b.n	8004708 <HAL_GPIO_Init+0x244>
 80046ee:	2307      	movs	r3, #7
 80046f0:	e00a      	b.n	8004708 <HAL_GPIO_Init+0x244>
 80046f2:	2305      	movs	r3, #5
 80046f4:	e008      	b.n	8004708 <HAL_GPIO_Init+0x244>
 80046f6:	2304      	movs	r3, #4
 80046f8:	e006      	b.n	8004708 <HAL_GPIO_Init+0x244>
 80046fa:	2303      	movs	r3, #3
 80046fc:	e004      	b.n	8004708 <HAL_GPIO_Init+0x244>
 80046fe:	2302      	movs	r3, #2
 8004700:	e002      	b.n	8004708 <HAL_GPIO_Init+0x244>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <HAL_GPIO_Init+0x244>
 8004706:	2300      	movs	r3, #0
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	f002 0203 	and.w	r2, r2, #3
 800470e:	0092      	lsls	r2, r2, #2
 8004710:	4093      	lsls	r3, r2
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004718:	4937      	ldr	r1, [pc, #220]	; (80047f8 <HAL_GPIO_Init+0x334>)
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	089b      	lsrs	r3, r3, #2
 800471e:	3302      	adds	r3, #2
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004726:	4b3b      	ldr	r3, [pc, #236]	; (8004814 <HAL_GPIO_Init+0x350>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	43db      	mvns	r3, r3
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4013      	ands	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800474a:	4a32      	ldr	r2, [pc, #200]	; (8004814 <HAL_GPIO_Init+0x350>)
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004750:	4b30      	ldr	r3, [pc, #192]	; (8004814 <HAL_GPIO_Init+0x350>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	43db      	mvns	r3, r3
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004774:	4a27      	ldr	r2, [pc, #156]	; (8004814 <HAL_GPIO_Init+0x350>)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800477a:	4b26      	ldr	r3, [pc, #152]	; (8004814 <HAL_GPIO_Init+0x350>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	43db      	mvns	r3, r3
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4013      	ands	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800479e:	4a1d      	ldr	r2, [pc, #116]	; (8004814 <HAL_GPIO_Init+0x350>)
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047a4:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <HAL_GPIO_Init+0x350>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4013      	ands	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047c8:	4a12      	ldr	r2, [pc, #72]	; (8004814 <HAL_GPIO_Init+0x350>)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	3301      	adds	r3, #1
 80047d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	fa22 f303 	lsr.w	r3, r2, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f47f ae78 	bne.w	80044d4 <HAL_GPIO_Init+0x10>
  }
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40021000 	.word	0x40021000
 80047f8:	40010000 	.word	0x40010000
 80047fc:	48000400 	.word	0x48000400
 8004800:	48000800 	.word	0x48000800
 8004804:	48000c00 	.word	0x48000c00
 8004808:	48001000 	.word	0x48001000
 800480c:	48001400 	.word	0x48001400
 8004810:	48001800 	.word	0x48001800
 8004814:	40010400 	.word	0x40010400

08004818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	887b      	ldrh	r3, [r7, #2]
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004830:	2301      	movs	r3, #1
 8004832:	73fb      	strb	r3, [r7, #15]
 8004834:	e001      	b.n	800483a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004836:	2300      	movs	r3, #0
 8004838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800483a:	7bfb      	ldrb	r3, [r7, #15]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	807b      	strh	r3, [r7, #2]
 8004854:	4613      	mov	r3, r2
 8004856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004858:	787b      	ldrb	r3, [r7, #1]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800485e:	887a      	ldrh	r2, [r7, #2]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004864:	e002      	b.n	800486c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004866:	887a      	ldrh	r2, [r7, #2]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004882:	4b08      	ldr	r3, [pc, #32]	; (80048a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004884:	695a      	ldr	r2, [r3, #20]
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	4013      	ands	r3, r2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d006      	beq.n	800489c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800488e:	4a05      	ldr	r2, [pc, #20]	; (80048a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004890:	88fb      	ldrh	r3, [r7, #6]
 8004892:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004894:	88fb      	ldrh	r3, [r7, #6]
 8004896:	4618      	mov	r0, r3
 8004898:	f000 f806 	bl	80048a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800489c:	bf00      	nop
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40010400 	.word	0x40010400

080048a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80048c4:	4b04      	ldr	r3, [pc, #16]	; (80048d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40007000 	.word	0x40007000

080048dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ea:	d130      	bne.n	800494e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80048ec:	4b23      	ldr	r3, [pc, #140]	; (800497c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f8:	d038      	beq.n	800496c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048fa:	4b20      	ldr	r3, [pc, #128]	; (800497c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004902:	4a1e      	ldr	r2, [pc, #120]	; (800497c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004904:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004908:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800490a:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2232      	movs	r2, #50	; 0x32
 8004910:	fb02 f303 	mul.w	r3, r2, r3
 8004914:	4a1b      	ldr	r2, [pc, #108]	; (8004984 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004916:	fba2 2303 	umull	r2, r3, r2, r3
 800491a:	0c9b      	lsrs	r3, r3, #18
 800491c:	3301      	adds	r3, #1
 800491e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004920:	e002      	b.n	8004928 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3b01      	subs	r3, #1
 8004926:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004928:	4b14      	ldr	r3, [pc, #80]	; (800497c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004934:	d102      	bne.n	800493c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1f2      	bne.n	8004922 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800493c:	4b0f      	ldr	r3, [pc, #60]	; (800497c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004948:	d110      	bne.n	800496c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e00f      	b.n	800496e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800494e:	4b0b      	ldr	r3, [pc, #44]	; (800497c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800495a:	d007      	beq.n	800496c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800495c:	4b07      	ldr	r3, [pc, #28]	; (800497c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004964:	4a05      	ldr	r2, [pc, #20]	; (800497c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800496a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40007000 	.word	0x40007000
 8004980:	20000094 	.word	0x20000094
 8004984:	431bde83 	.word	0x431bde83

08004988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e3d4      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800499a:	4ba1      	ldr	r3, [pc, #644]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 030c 	and.w	r3, r3, #12
 80049a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049a4:	4b9e      	ldr	r3, [pc, #632]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0303 	and.w	r3, r3, #3
 80049ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 80e4 	beq.w	8004b84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <HAL_RCC_OscConfig+0x4a>
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	2b0c      	cmp	r3, #12
 80049c6:	f040 808b 	bne.w	8004ae0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	f040 8087 	bne.w	8004ae0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049d2:	4b93      	ldr	r3, [pc, #588]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <HAL_RCC_OscConfig+0x62>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e3ac      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1a      	ldr	r2, [r3, #32]
 80049ee:	4b8c      	ldr	r3, [pc, #560]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d004      	beq.n	8004a04 <HAL_RCC_OscConfig+0x7c>
 80049fa:	4b89      	ldr	r3, [pc, #548]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a02:	e005      	b.n	8004a10 <HAL_RCC_OscConfig+0x88>
 8004a04:	4b86      	ldr	r3, [pc, #536]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a0a:	091b      	lsrs	r3, r3, #4
 8004a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d223      	bcs.n	8004a5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fd41 	bl	80054a0 <RCC_SetFlashLatencyFromMSIRange>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e38d      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a28:	4b7d      	ldr	r3, [pc, #500]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a7c      	ldr	r2, [pc, #496]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004a2e:	f043 0308 	orr.w	r3, r3, #8
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	4b7a      	ldr	r3, [pc, #488]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	4977      	ldr	r1, [pc, #476]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a46:	4b76      	ldr	r3, [pc, #472]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	021b      	lsls	r3, r3, #8
 8004a54:	4972      	ldr	r1, [pc, #456]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	604b      	str	r3, [r1, #4]
 8004a5a:	e025      	b.n	8004aa8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a5c:	4b70      	ldr	r3, [pc, #448]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a6f      	ldr	r2, [pc, #444]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004a62:	f043 0308 	orr.w	r3, r3, #8
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	4b6d      	ldr	r3, [pc, #436]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	496a      	ldr	r1, [pc, #424]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a7a:	4b69      	ldr	r3, [pc, #420]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	021b      	lsls	r3, r3, #8
 8004a88:	4965      	ldr	r1, [pc, #404]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d109      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 fd01 	bl	80054a0 <RCC_SetFlashLatencyFromMSIRange>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e34d      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004aa8:	f000 fc36 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 8004aac:	4602      	mov	r2, r0
 8004aae:	4b5c      	ldr	r3, [pc, #368]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	495a      	ldr	r1, [pc, #360]	; (8004c24 <HAL_RCC_OscConfig+0x29c>)
 8004aba:	5ccb      	ldrb	r3, [r1, r3]
 8004abc:	f003 031f 	and.w	r3, r3, #31
 8004ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac4:	4a58      	ldr	r2, [pc, #352]	; (8004c28 <HAL_RCC_OscConfig+0x2a0>)
 8004ac6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ac8:	4b58      	ldr	r3, [pc, #352]	; (8004c2c <HAL_RCC_OscConfig+0x2a4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff fb0d 	bl	80040ec <HAL_InitTick>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d052      	beq.n	8004b82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
 8004ade:	e331      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d032      	beq.n	8004b4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ae8:	4b4d      	ldr	r3, [pc, #308]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a4c      	ldr	r2, [pc, #304]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004aee:	f043 0301 	orr.w	r3, r3, #1
 8004af2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004af4:	f7ff fb4a 	bl	800418c <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004afc:	f7ff fb46 	bl	800418c <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e31a      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b0e:	4b44      	ldr	r3, [pc, #272]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0f0      	beq.n	8004afc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b1a:	4b41      	ldr	r3, [pc, #260]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a40      	ldr	r2, [pc, #256]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004b20:	f043 0308 	orr.w	r3, r3, #8
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	4b3e      	ldr	r3, [pc, #248]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	493b      	ldr	r1, [pc, #236]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b38:	4b39      	ldr	r3, [pc, #228]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	021b      	lsls	r3, r3, #8
 8004b46:	4936      	ldr	r1, [pc, #216]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	604b      	str	r3, [r1, #4]
 8004b4c:	e01a      	b.n	8004b84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b4e:	4b34      	ldr	r3, [pc, #208]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a33      	ldr	r2, [pc, #204]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004b54:	f023 0301 	bic.w	r3, r3, #1
 8004b58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b5a:	f7ff fb17 	bl	800418c <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b62:	f7ff fb13 	bl	800418c <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e2e7      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b74:	4b2a      	ldr	r3, [pc, #168]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1f0      	bne.n	8004b62 <HAL_RCC_OscConfig+0x1da>
 8004b80:	e000      	b.n	8004b84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d074      	beq.n	8004c7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d005      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x21a>
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b0c      	cmp	r3, #12
 8004b9a:	d10e      	bne.n	8004bba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d10b      	bne.n	8004bba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba2:	4b1f      	ldr	r3, [pc, #124]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d064      	beq.n	8004c78 <HAL_RCC_OscConfig+0x2f0>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d160      	bne.n	8004c78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e2c4      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc2:	d106      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x24a>
 8004bc4:	4b16      	ldr	r3, [pc, #88]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a15      	ldr	r2, [pc, #84]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	e01d      	b.n	8004c0e <HAL_RCC_OscConfig+0x286>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bda:	d10c      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x26e>
 8004bdc:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a0f      	ldr	r2, [pc, #60]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004be2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	4b0d      	ldr	r3, [pc, #52]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a0c      	ldr	r2, [pc, #48]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	e00b      	b.n	8004c0e <HAL_RCC_OscConfig+0x286>
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a09      	ldr	r2, [pc, #36]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a06      	ldr	r2, [pc, #24]	; (8004c20 <HAL_RCC_OscConfig+0x298>)
 8004c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d01c      	beq.n	8004c50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c16:	f7ff fab9 	bl	800418c <HAL_GetTick>
 8004c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c1c:	e011      	b.n	8004c42 <HAL_RCC_OscConfig+0x2ba>
 8004c1e:	bf00      	nop
 8004c20:	40021000 	.word	0x40021000
 8004c24:	08008318 	.word	0x08008318
 8004c28:	20000094 	.word	0x20000094
 8004c2c:	200000f0 	.word	0x200000f0
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c30:	f7ff faac 	bl	800418c <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b64      	cmp	r3, #100	; 0x64
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e280      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c42:	4baf      	ldr	r3, [pc, #700]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f0      	beq.n	8004c30 <HAL_RCC_OscConfig+0x2a8>
 8004c4e:	e014      	b.n	8004c7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c50:	f7ff fa9c 	bl	800418c <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c58:	f7ff fa98 	bl	800418c <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b64      	cmp	r3, #100	; 0x64
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e26c      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c6a:	4ba5      	ldr	r3, [pc, #660]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0x2d0>
 8004c76:	e000      	b.n	8004c7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d060      	beq.n	8004d48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d005      	beq.n	8004c98 <HAL_RCC_OscConfig+0x310>
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b0c      	cmp	r3, #12
 8004c90:	d119      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d116      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c98:	4b99      	ldr	r3, [pc, #612]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x328>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e249      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb0:	4b93      	ldr	r3, [pc, #588]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	061b      	lsls	r3, r3, #24
 8004cbe:	4990      	ldr	r1, [pc, #576]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cc4:	e040      	b.n	8004d48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d023      	beq.n	8004d16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cce:	4b8c      	ldr	r3, [pc, #560]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a8b      	ldr	r2, [pc, #556]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cda:	f7ff fa57 	bl	800418c <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce2:	f7ff fa53 	bl	800418c <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e227      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cf4:	4b82      	ldr	r3, [pc, #520]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f0      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d00:	4b7f      	ldr	r3, [pc, #508]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	061b      	lsls	r3, r3, #24
 8004d0e:	497c      	ldr	r1, [pc, #496]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	604b      	str	r3, [r1, #4]
 8004d14:	e018      	b.n	8004d48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d16:	4b7a      	ldr	r3, [pc, #488]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a79      	ldr	r2, [pc, #484]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d22:	f7ff fa33 	bl	800418c <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d2a:	f7ff fa2f 	bl	800418c <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e203      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d3c:	4b70      	ldr	r3, [pc, #448]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1f0      	bne.n	8004d2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d03c      	beq.n	8004dce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01c      	beq.n	8004d96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d5c:	4b68      	ldr	r3, [pc, #416]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d62:	4a67      	ldr	r2, [pc, #412]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6c:	f7ff fa0e 	bl	800418c <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d74:	f7ff fa0a 	bl	800418c <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e1de      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d86:	4b5e      	ldr	r3, [pc, #376]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0ef      	beq.n	8004d74 <HAL_RCC_OscConfig+0x3ec>
 8004d94:	e01b      	b.n	8004dce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d96:	4b5a      	ldr	r3, [pc, #360]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d9c:	4a58      	ldr	r2, [pc, #352]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004d9e:	f023 0301 	bic.w	r3, r3, #1
 8004da2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da6:	f7ff f9f1 	bl	800418c <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dae:	f7ff f9ed 	bl	800418c <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e1c1      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dc0:	4b4f      	ldr	r3, [pc, #316]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1ef      	bne.n	8004dae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 80a6 	beq.w	8004f28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004de0:	4b47      	ldr	r3, [pc, #284]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10d      	bne.n	8004e08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dec:	4b44      	ldr	r3, [pc, #272]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df0:	4a43      	ldr	r2, [pc, #268]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df6:	6593      	str	r3, [r2, #88]	; 0x58
 8004df8:	4b41      	ldr	r3, [pc, #260]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e04:	2301      	movs	r3, #1
 8004e06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e08:	4b3e      	ldr	r3, [pc, #248]	; (8004f04 <HAL_RCC_OscConfig+0x57c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d118      	bne.n	8004e46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e14:	4b3b      	ldr	r3, [pc, #236]	; (8004f04 <HAL_RCC_OscConfig+0x57c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a3a      	ldr	r2, [pc, #232]	; (8004f04 <HAL_RCC_OscConfig+0x57c>)
 8004e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e20:	f7ff f9b4 	bl	800418c <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e28:	f7ff f9b0 	bl	800418c <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e184      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e3a:	4b32      	ldr	r3, [pc, #200]	; (8004f04 <HAL_RCC_OscConfig+0x57c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d108      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4d8>
 8004e4e:	4b2c      	ldr	r3, [pc, #176]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e54:	4a2a      	ldr	r2, [pc, #168]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004e56:	f043 0301 	orr.w	r3, r3, #1
 8004e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e5e:	e024      	b.n	8004eaa <HAL_RCC_OscConfig+0x522>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	2b05      	cmp	r3, #5
 8004e66:	d110      	bne.n	8004e8a <HAL_RCC_OscConfig+0x502>
 8004e68:	4b25      	ldr	r3, [pc, #148]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6e:	4a24      	ldr	r2, [pc, #144]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004e70:	f043 0304 	orr.w	r3, r3, #4
 8004e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e78:	4b21      	ldr	r3, [pc, #132]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7e:	4a20      	ldr	r2, [pc, #128]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e88:	e00f      	b.n	8004eaa <HAL_RCC_OscConfig+0x522>
 8004e8a:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e90:	4a1b      	ldr	r2, [pc, #108]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004e92:	f023 0301 	bic.w	r3, r3, #1
 8004e96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e9a:	4b19      	ldr	r3, [pc, #100]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea0:	4a17      	ldr	r2, [pc, #92]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004ea2:	f023 0304 	bic.w	r3, r3, #4
 8004ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d016      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb2:	f7ff f96b 	bl	800418c <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eb8:	e00a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7ff f967 	bl	800418c <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e139      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <HAL_RCC_OscConfig+0x578>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0ed      	beq.n	8004eba <HAL_RCC_OscConfig+0x532>
 8004ede:	e01a      	b.n	8004f16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee0:	f7ff f954 	bl	800418c <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ee6:	e00f      	b.n	8004f08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee8:	f7ff f950 	bl	800418c <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d906      	bls.n	8004f08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e122      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
 8004efe:	bf00      	nop
 8004f00:	40021000 	.word	0x40021000
 8004f04:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f08:	4b90      	ldr	r3, [pc, #576]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e8      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f16:	7ffb      	ldrb	r3, [r7, #31]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d105      	bne.n	8004f28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f1c:	4b8b      	ldr	r3, [pc, #556]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 8004f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f20:	4a8a      	ldr	r2, [pc, #552]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 8004f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f26:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 8108 	beq.w	8005142 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	f040 80d0 	bne.w	80050dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f3c:	4b83      	ldr	r3, [pc, #524]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f003 0203 	and.w	r2, r3, #3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d130      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d127      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d11f      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f7c:	2a07      	cmp	r2, #7
 8004f7e:	bf14      	ite	ne
 8004f80:	2201      	movne	r2, #1
 8004f82:	2200      	moveq	r2, #0
 8004f84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d113      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f94:	085b      	lsrs	r3, r3, #1
 8004f96:	3b01      	subs	r3, #1
 8004f98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d109      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	085b      	lsrs	r3, r3, #1
 8004faa:	3b01      	subs	r3, #1
 8004fac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d06e      	beq.n	8005090 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	2b0c      	cmp	r3, #12
 8004fb6:	d069      	beq.n	800508c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004fb8:	4b64      	ldr	r3, [pc, #400]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d105      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004fc4:	4b61      	ldr	r3, [pc, #388]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e0b7      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004fd4:	4b5d      	ldr	r3, [pc, #372]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a5c      	ldr	r2, [pc, #368]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 8004fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fde:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fe0:	f7ff f8d4 	bl	800418c <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe8:	f7ff f8d0 	bl	800418c <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e0a4      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ffa:	4b54      	ldr	r3, [pc, #336]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005006:	4b51      	ldr	r3, [pc, #324]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	4b51      	ldr	r3, [pc, #324]	; (8005150 <HAL_RCC_OscConfig+0x7c8>)
 800500c:	4013      	ands	r3, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005016:	3a01      	subs	r2, #1
 8005018:	0112      	lsls	r2, r2, #4
 800501a:	4311      	orrs	r1, r2
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005020:	0212      	lsls	r2, r2, #8
 8005022:	4311      	orrs	r1, r2
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005028:	0852      	lsrs	r2, r2, #1
 800502a:	3a01      	subs	r2, #1
 800502c:	0552      	lsls	r2, r2, #21
 800502e:	4311      	orrs	r1, r2
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005034:	0852      	lsrs	r2, r2, #1
 8005036:	3a01      	subs	r2, #1
 8005038:	0652      	lsls	r2, r2, #25
 800503a:	4311      	orrs	r1, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005040:	0912      	lsrs	r2, r2, #4
 8005042:	0452      	lsls	r2, r2, #17
 8005044:	430a      	orrs	r2, r1
 8005046:	4941      	ldr	r1, [pc, #260]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 8005048:	4313      	orrs	r3, r2
 800504a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800504c:	4b3f      	ldr	r3, [pc, #252]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a3e      	ldr	r2, [pc, #248]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 8005052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005056:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005058:	4b3c      	ldr	r3, [pc, #240]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	4a3b      	ldr	r2, [pc, #236]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 800505e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005062:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005064:	f7ff f892 	bl	800418c <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800506c:	f7ff f88e 	bl	800418c <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e062      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800507e:	4b33      	ldr	r3, [pc, #204]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800508a:	e05a      	b.n	8005142 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e059      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005090:	4b2e      	ldr	r3, [pc, #184]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d152      	bne.n	8005142 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800509c:	4b2b      	ldr	r3, [pc, #172]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a2a      	ldr	r2, [pc, #168]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 80050a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050a8:	4b28      	ldr	r3, [pc, #160]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	4a27      	ldr	r2, [pc, #156]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 80050ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050b4:	f7ff f86a 	bl	800418c <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050bc:	f7ff f866 	bl	800418c <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e03a      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ce:	4b1f      	ldr	r3, [pc, #124]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0f0      	beq.n	80050bc <HAL_RCC_OscConfig+0x734>
 80050da:	e032      	b.n	8005142 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	2b0c      	cmp	r3, #12
 80050e0:	d02d      	beq.n	800513e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050e2:	4b1a      	ldr	r3, [pc, #104]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a19      	ldr	r2, [pc, #100]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 80050e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80050ee:	4b17      	ldr	r3, [pc, #92]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d105      	bne.n	8005106 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80050fa:	4b14      	ldr	r3, [pc, #80]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	4a13      	ldr	r2, [pc, #76]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 8005100:	f023 0303 	bic.w	r3, r3, #3
 8005104:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005106:	4b11      	ldr	r3, [pc, #68]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	4a10      	ldr	r2, [pc, #64]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 800510c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005114:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005116:	f7ff f839 	bl	800418c <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800511c:	e008      	b.n	8005130 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511e:	f7ff f835 	bl	800418c <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e009      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005130:	4b06      	ldr	r3, [pc, #24]	; (800514c <HAL_RCC_OscConfig+0x7c4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1f0      	bne.n	800511e <HAL_RCC_OscConfig+0x796>
 800513c:	e001      	b.n	8005142 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e000      	b.n	8005144 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3720      	adds	r7, #32
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40021000 	.word	0x40021000
 8005150:	f99d808c 	.word	0xf99d808c

08005154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0c8      	b.n	80052fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005168:	4b66      	ldr	r3, [pc, #408]	; (8005304 <HAL_RCC_ClockConfig+0x1b0>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d910      	bls.n	8005198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005176:	4b63      	ldr	r3, [pc, #396]	; (8005304 <HAL_RCC_ClockConfig+0x1b0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f023 0207 	bic.w	r2, r3, #7
 800517e:	4961      	ldr	r1, [pc, #388]	; (8005304 <HAL_RCC_ClockConfig+0x1b0>)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	4313      	orrs	r3, r2
 8005184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005186:	4b5f      	ldr	r3, [pc, #380]	; (8005304 <HAL_RCC_ClockConfig+0x1b0>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e0b0      	b.n	80052fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d04c      	beq.n	800523e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d107      	bne.n	80051bc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ac:	4b56      	ldr	r3, [pc, #344]	; (8005308 <HAL_RCC_ClockConfig+0x1b4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d121      	bne.n	80051fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e09e      	b.n	80052fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d107      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051c4:	4b50      	ldr	r3, [pc, #320]	; (8005308 <HAL_RCC_ClockConfig+0x1b4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d115      	bne.n	80051fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e092      	b.n	80052fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d107      	bne.n	80051ec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051dc:	4b4a      	ldr	r3, [pc, #296]	; (8005308 <HAL_RCC_ClockConfig+0x1b4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d109      	bne.n	80051fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e086      	b.n	80052fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051ec:	4b46      	ldr	r3, [pc, #280]	; (8005308 <HAL_RCC_ClockConfig+0x1b4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e07e      	b.n	80052fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051fc:	4b42      	ldr	r3, [pc, #264]	; (8005308 <HAL_RCC_ClockConfig+0x1b4>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f023 0203 	bic.w	r2, r3, #3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	493f      	ldr	r1, [pc, #252]	; (8005308 <HAL_RCC_ClockConfig+0x1b4>)
 800520a:	4313      	orrs	r3, r2
 800520c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800520e:	f7fe ffbd 	bl	800418c <HAL_GetTick>
 8005212:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005214:	e00a      	b.n	800522c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005216:	f7fe ffb9 	bl	800418c <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	f241 3288 	movw	r2, #5000	; 0x1388
 8005224:	4293      	cmp	r3, r2
 8005226:	d901      	bls.n	800522c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e066      	b.n	80052fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800522c:	4b36      	ldr	r3, [pc, #216]	; (8005308 <HAL_RCC_ClockConfig+0x1b4>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 020c 	and.w	r2, r3, #12
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	429a      	cmp	r2, r3
 800523c:	d1eb      	bne.n	8005216 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d008      	beq.n	800525c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800524a:	4b2f      	ldr	r3, [pc, #188]	; (8005308 <HAL_RCC_ClockConfig+0x1b4>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	492c      	ldr	r1, [pc, #176]	; (8005308 <HAL_RCC_ClockConfig+0x1b4>)
 8005258:	4313      	orrs	r3, r2
 800525a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800525c:	4b29      	ldr	r3, [pc, #164]	; (8005304 <HAL_RCC_ClockConfig+0x1b0>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d210      	bcs.n	800528c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800526a:	4b26      	ldr	r3, [pc, #152]	; (8005304 <HAL_RCC_ClockConfig+0x1b0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f023 0207 	bic.w	r2, r3, #7
 8005272:	4924      	ldr	r1, [pc, #144]	; (8005304 <HAL_RCC_ClockConfig+0x1b0>)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	4313      	orrs	r3, r2
 8005278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800527a:	4b22      	ldr	r3, [pc, #136]	; (8005304 <HAL_RCC_ClockConfig+0x1b0>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d001      	beq.n	800528c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e036      	b.n	80052fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	d008      	beq.n	80052aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005298:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <HAL_RCC_ClockConfig+0x1b4>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4918      	ldr	r1, [pc, #96]	; (8005308 <HAL_RCC_ClockConfig+0x1b4>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d009      	beq.n	80052ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052b6:	4b14      	ldr	r3, [pc, #80]	; (8005308 <HAL_RCC_ClockConfig+0x1b4>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	4910      	ldr	r1, [pc, #64]	; (8005308 <HAL_RCC_ClockConfig+0x1b4>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052ca:	f000 f825 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 80052ce:	4602      	mov	r2, r0
 80052d0:	4b0d      	ldr	r3, [pc, #52]	; (8005308 <HAL_RCC_ClockConfig+0x1b4>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	490c      	ldr	r1, [pc, #48]	; (800530c <HAL_RCC_ClockConfig+0x1b8>)
 80052dc:	5ccb      	ldrb	r3, [r1, r3]
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	fa22 f303 	lsr.w	r3, r2, r3
 80052e6:	4a0a      	ldr	r2, [pc, #40]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052ea:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <HAL_RCC_ClockConfig+0x1c0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fe fefc 	bl	80040ec <HAL_InitTick>
 80052f4:	4603      	mov	r3, r0
 80052f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80052f8:	7afb      	ldrb	r3, [r7, #11]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	40022000 	.word	0x40022000
 8005308:	40021000 	.word	0x40021000
 800530c:	08008318 	.word	0x08008318
 8005310:	20000094 	.word	0x20000094
 8005314:	200000f0 	.word	0x200000f0

08005318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005318:	b480      	push	{r7}
 800531a:	b089      	sub	sp, #36	; 0x24
 800531c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
 8005322:	2300      	movs	r3, #0
 8005324:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005326:	4b3e      	ldr	r3, [pc, #248]	; (8005420 <HAL_RCC_GetSysClockFreq+0x108>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 030c 	and.w	r3, r3, #12
 800532e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005330:	4b3b      	ldr	r3, [pc, #236]	; (8005420 <HAL_RCC_GetSysClockFreq+0x108>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0303 	and.w	r3, r3, #3
 8005338:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <HAL_RCC_GetSysClockFreq+0x34>
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2b0c      	cmp	r3, #12
 8005344:	d121      	bne.n	800538a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d11e      	bne.n	800538a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800534c:	4b34      	ldr	r3, [pc, #208]	; (8005420 <HAL_RCC_GetSysClockFreq+0x108>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0308 	and.w	r3, r3, #8
 8005354:	2b00      	cmp	r3, #0
 8005356:	d107      	bne.n	8005368 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005358:	4b31      	ldr	r3, [pc, #196]	; (8005420 <HAL_RCC_GetSysClockFreq+0x108>)
 800535a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800535e:	0a1b      	lsrs	r3, r3, #8
 8005360:	f003 030f 	and.w	r3, r3, #15
 8005364:	61fb      	str	r3, [r7, #28]
 8005366:	e005      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005368:	4b2d      	ldr	r3, [pc, #180]	; (8005420 <HAL_RCC_GetSysClockFreq+0x108>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	091b      	lsrs	r3, r3, #4
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005374:	4a2b      	ldr	r2, [pc, #172]	; (8005424 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10d      	bne.n	80053a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005388:	e00a      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b04      	cmp	r3, #4
 800538e:	d102      	bne.n	8005396 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005390:	4b25      	ldr	r3, [pc, #148]	; (8005428 <HAL_RCC_GetSysClockFreq+0x110>)
 8005392:	61bb      	str	r3, [r7, #24]
 8005394:	e004      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b08      	cmp	r3, #8
 800539a:	d101      	bne.n	80053a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800539c:	4b23      	ldr	r3, [pc, #140]	; (800542c <HAL_RCC_GetSysClockFreq+0x114>)
 800539e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2b0c      	cmp	r3, #12
 80053a4:	d134      	bne.n	8005410 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053a6:	4b1e      	ldr	r3, [pc, #120]	; (8005420 <HAL_RCC_GetSysClockFreq+0x108>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d003      	beq.n	80053be <HAL_RCC_GetSysClockFreq+0xa6>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d003      	beq.n	80053c4 <HAL_RCC_GetSysClockFreq+0xac>
 80053bc:	e005      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053be:	4b1a      	ldr	r3, [pc, #104]	; (8005428 <HAL_RCC_GetSysClockFreq+0x110>)
 80053c0:	617b      	str	r3, [r7, #20]
      break;
 80053c2:	e005      	b.n	80053d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053c4:	4b19      	ldr	r3, [pc, #100]	; (800542c <HAL_RCC_GetSysClockFreq+0x114>)
 80053c6:	617b      	str	r3, [r7, #20]
      break;
 80053c8:	e002      	b.n	80053d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	617b      	str	r3, [r7, #20]
      break;
 80053ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053d0:	4b13      	ldr	r3, [pc, #76]	; (8005420 <HAL_RCC_GetSysClockFreq+0x108>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	091b      	lsrs	r3, r3, #4
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	3301      	adds	r3, #1
 80053dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053de:	4b10      	ldr	r3, [pc, #64]	; (8005420 <HAL_RCC_GetSysClockFreq+0x108>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	0a1b      	lsrs	r3, r3, #8
 80053e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	fb02 f203 	mul.w	r2, r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053f6:	4b0a      	ldr	r3, [pc, #40]	; (8005420 <HAL_RCC_GetSysClockFreq+0x108>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	0e5b      	lsrs	r3, r3, #25
 80053fc:	f003 0303 	and.w	r3, r3, #3
 8005400:	3301      	adds	r3, #1
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	fbb2 f3f3 	udiv	r3, r2, r3
 800540e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005410:	69bb      	ldr	r3, [r7, #24]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3724      	adds	r7, #36	; 0x24
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40021000 	.word	0x40021000
 8005424:	08008330 	.word	0x08008330
 8005428:	00f42400 	.word	0x00f42400
 800542c:	007a1200 	.word	0x007a1200

08005430 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005434:	4b03      	ldr	r3, [pc, #12]	; (8005444 <HAL_RCC_GetHCLKFreq+0x14>)
 8005436:	681b      	ldr	r3, [r3, #0]
}
 8005438:	4618      	mov	r0, r3
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	20000094 	.word	0x20000094

08005448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800544c:	f7ff fff0 	bl	8005430 <HAL_RCC_GetHCLKFreq>
 8005450:	4602      	mov	r2, r0
 8005452:	4b06      	ldr	r3, [pc, #24]	; (800546c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	0a1b      	lsrs	r3, r3, #8
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	4904      	ldr	r1, [pc, #16]	; (8005470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800545e:	5ccb      	ldrb	r3, [r1, r3]
 8005460:	f003 031f 	and.w	r3, r3, #31
 8005464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005468:	4618      	mov	r0, r3
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40021000 	.word	0x40021000
 8005470:	08008328 	.word	0x08008328

08005474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005478:	f7ff ffda 	bl	8005430 <HAL_RCC_GetHCLKFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b06      	ldr	r3, [pc, #24]	; (8005498 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	0adb      	lsrs	r3, r3, #11
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	4904      	ldr	r1, [pc, #16]	; (800549c <HAL_RCC_GetPCLK2Freq+0x28>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005494:	4618      	mov	r0, r3
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40021000 	.word	0x40021000
 800549c:	08008328 	.word	0x08008328

080054a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054ac:	4b2a      	ldr	r3, [pc, #168]	; (8005558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054b8:	f7ff fa02 	bl	80048c0 <HAL_PWREx_GetVoltageRange>
 80054bc:	6178      	str	r0, [r7, #20]
 80054be:	e014      	b.n	80054ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054c0:	4b25      	ldr	r3, [pc, #148]	; (8005558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c4:	4a24      	ldr	r2, [pc, #144]	; (8005558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ca:	6593      	str	r3, [r2, #88]	; 0x58
 80054cc:	4b22      	ldr	r3, [pc, #136]	; (8005558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054d8:	f7ff f9f2 	bl	80048c0 <HAL_PWREx_GetVoltageRange>
 80054dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054de:	4b1e      	ldr	r3, [pc, #120]	; (8005558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e2:	4a1d      	ldr	r2, [pc, #116]	; (8005558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f0:	d10b      	bne.n	800550a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b80      	cmp	r3, #128	; 0x80
 80054f6:	d919      	bls.n	800552c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2ba0      	cmp	r3, #160	; 0xa0
 80054fc:	d902      	bls.n	8005504 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054fe:	2302      	movs	r3, #2
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	e013      	b.n	800552c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005504:	2301      	movs	r3, #1
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	e010      	b.n	800552c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b80      	cmp	r3, #128	; 0x80
 800550e:	d902      	bls.n	8005516 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005510:	2303      	movs	r3, #3
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	e00a      	b.n	800552c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b80      	cmp	r3, #128	; 0x80
 800551a:	d102      	bne.n	8005522 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800551c:	2302      	movs	r3, #2
 800551e:	613b      	str	r3, [r7, #16]
 8005520:	e004      	b.n	800552c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b70      	cmp	r3, #112	; 0x70
 8005526:	d101      	bne.n	800552c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005528:	2301      	movs	r3, #1
 800552a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800552c:	4b0b      	ldr	r3, [pc, #44]	; (800555c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f023 0207 	bic.w	r2, r3, #7
 8005534:	4909      	ldr	r1, [pc, #36]	; (800555c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800553c:	4b07      	ldr	r3, [pc, #28]	; (800555c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	429a      	cmp	r2, r3
 8005548:	d001      	beq.n	800554e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40021000 	.word	0x40021000
 800555c:	40022000 	.word	0x40022000

08005560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005568:	2300      	movs	r3, #0
 800556a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800556c:	2300      	movs	r3, #0
 800556e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005578:	2b00      	cmp	r3, #0
 800557a:	d041      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005580:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005584:	d02a      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005586:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800558a:	d824      	bhi.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800558c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005590:	d008      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005592:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005596:	d81e      	bhi.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00a      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800559c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055a0:	d010      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055a2:	e018      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055a4:	4b86      	ldr	r3, [pc, #536]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4a85      	ldr	r2, [pc, #532]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055b0:	e015      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3304      	adds	r3, #4
 80055b6:	2100      	movs	r1, #0
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 fabb 	bl	8005b34 <RCCEx_PLLSAI1_Config>
 80055be:	4603      	mov	r3, r0
 80055c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055c2:	e00c      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3320      	adds	r3, #32
 80055c8:	2100      	movs	r1, #0
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fba6 	bl	8005d1c <RCCEx_PLLSAI2_Config>
 80055d0:	4603      	mov	r3, r0
 80055d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055d4:	e003      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	74fb      	strb	r3, [r7, #19]
      break;
 80055da:	e000      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80055dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055de:	7cfb      	ldrb	r3, [r7, #19]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10b      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055e4:	4b76      	ldr	r3, [pc, #472]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055f2:	4973      	ldr	r1, [pc, #460]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80055fa:	e001      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fc:	7cfb      	ldrb	r3, [r7, #19]
 80055fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d041      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005610:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005614:	d02a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005616:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800561a:	d824      	bhi.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800561c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005620:	d008      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005622:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005626:	d81e      	bhi.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800562c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005630:	d010      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005632:	e018      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005634:	4b62      	ldr	r3, [pc, #392]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	4a61      	ldr	r2, [pc, #388]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800563a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800563e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005640:	e015      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3304      	adds	r3, #4
 8005646:	2100      	movs	r1, #0
 8005648:	4618      	mov	r0, r3
 800564a:	f000 fa73 	bl	8005b34 <RCCEx_PLLSAI1_Config>
 800564e:	4603      	mov	r3, r0
 8005650:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005652:	e00c      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3320      	adds	r3, #32
 8005658:	2100      	movs	r1, #0
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fb5e 	bl	8005d1c <RCCEx_PLLSAI2_Config>
 8005660:	4603      	mov	r3, r0
 8005662:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005664:	e003      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	74fb      	strb	r3, [r7, #19]
      break;
 800566a:	e000      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800566c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800566e:	7cfb      	ldrb	r3, [r7, #19]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10b      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005674:	4b52      	ldr	r3, [pc, #328]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005682:	494f      	ldr	r1, [pc, #316]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800568a:	e001      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568c:	7cfb      	ldrb	r3, [r7, #19]
 800568e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 80a0 	beq.w	80057de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800569e:	2300      	movs	r3, #0
 80056a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056a2:	4b47      	ldr	r3, [pc, #284]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80056b2:	2300      	movs	r3, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00d      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b8:	4b41      	ldr	r3, [pc, #260]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056bc:	4a40      	ldr	r2, [pc, #256]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c2:	6593      	str	r3, [r2, #88]	; 0x58
 80056c4:	4b3e      	ldr	r3, [pc, #248]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056cc:	60bb      	str	r3, [r7, #8]
 80056ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056d0:	2301      	movs	r3, #1
 80056d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056d4:	4b3b      	ldr	r3, [pc, #236]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a3a      	ldr	r2, [pc, #232]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056e0:	f7fe fd54 	bl	800418c <HAL_GetTick>
 80056e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056e6:	e009      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e8:	f7fe fd50 	bl	800418c <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d902      	bls.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	74fb      	strb	r3, [r7, #19]
        break;
 80056fa:	e005      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056fc:	4b31      	ldr	r3, [pc, #196]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0ef      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005708:	7cfb      	ldrb	r3, [r7, #19]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d15c      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800570e:	4b2c      	ldr	r3, [pc, #176]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005718:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01f      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	429a      	cmp	r2, r3
 800572a:	d019      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800572c:	4b24      	ldr	r3, [pc, #144]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800572e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005736:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005738:	4b21      	ldr	r3, [pc, #132]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800573a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573e:	4a20      	ldr	r2, [pc, #128]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005748:	4b1d      	ldr	r3, [pc, #116]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800574a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574e:	4a1c      	ldr	r2, [pc, #112]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005758:	4a19      	ldr	r2, [pc, #100]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d016      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576a:	f7fe fd0f 	bl	800418c <HAL_GetTick>
 800576e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005770:	e00b      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005772:	f7fe fd0b 	bl	800418c <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005780:	4293      	cmp	r3, r2
 8005782:	d902      	bls.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	74fb      	strb	r3, [r7, #19]
            break;
 8005788:	e006      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800578a:	4b0d      	ldr	r3, [pc, #52]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800578c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0ec      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005798:	7cfb      	ldrb	r3, [r7, #19]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10c      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800579e:	4b08      	ldr	r3, [pc, #32]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ae:	4904      	ldr	r1, [pc, #16]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80057b6:	e009      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057b8:	7cfb      	ldrb	r3, [r7, #19]
 80057ba:	74bb      	strb	r3, [r7, #18]
 80057bc:	e006      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80057be:	bf00      	nop
 80057c0:	40021000 	.word	0x40021000
 80057c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c8:	7cfb      	ldrb	r3, [r7, #19]
 80057ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057cc:	7c7b      	ldrb	r3, [r7, #17]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d105      	bne.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057d2:	4b9e      	ldr	r3, [pc, #632]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d6:	4a9d      	ldr	r2, [pc, #628]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057ea:	4b98      	ldr	r3, [pc, #608]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f0:	f023 0203 	bic.w	r2, r3, #3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	4994      	ldr	r1, [pc, #592]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800580c:	4b8f      	ldr	r3, [pc, #572]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005812:	f023 020c 	bic.w	r2, r3, #12
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581a:	498c      	ldr	r1, [pc, #560]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0304 	and.w	r3, r3, #4
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800582e:	4b87      	ldr	r3, [pc, #540]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005834:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	4983      	ldr	r1, [pc, #524]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0308 	and.w	r3, r3, #8
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005850:	4b7e      	ldr	r3, [pc, #504]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005856:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585e:	497b      	ldr	r1, [pc, #492]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0310 	and.w	r3, r3, #16
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005872:	4b76      	ldr	r3, [pc, #472]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005880:	4972      	ldr	r1, [pc, #456]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0320 	and.w	r3, r3, #32
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00a      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005894:	4b6d      	ldr	r3, [pc, #436]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a2:	496a      	ldr	r1, [pc, #424]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058b6:	4b65      	ldr	r3, [pc, #404]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c4:	4961      	ldr	r1, [pc, #388]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058d8:	4b5c      	ldr	r3, [pc, #368]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e6:	4959      	ldr	r1, [pc, #356]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058fa:	4b54      	ldr	r3, [pc, #336]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005900:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005908:	4950      	ldr	r1, [pc, #320]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00a      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800591c:	4b4b      	ldr	r3, [pc, #300]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800591e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005922:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592a:	4948      	ldr	r1, [pc, #288]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800593e:	4b43      	ldr	r3, [pc, #268]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594c:	493f      	ldr	r1, [pc, #252]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d028      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005960:	4b3a      	ldr	r3, [pc, #232]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005966:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800596e:	4937      	ldr	r1, [pc, #220]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800597a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800597e:	d106      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005980:	4b32      	ldr	r3, [pc, #200]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	4a31      	ldr	r2, [pc, #196]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800598a:	60d3      	str	r3, [r2, #12]
 800598c:	e011      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005992:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005996:	d10c      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3304      	adds	r3, #4
 800599c:	2101      	movs	r1, #1
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 f8c8 	bl	8005b34 <RCCEx_PLLSAI1_Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80059a8:	7cfb      	ldrb	r3, [r7, #19]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80059ae:	7cfb      	ldrb	r3, [r7, #19]
 80059b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d028      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059be:	4b23      	ldr	r3, [pc, #140]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059cc:	491f      	ldr	r1, [pc, #124]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059dc:	d106      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059de:	4b1b      	ldr	r3, [pc, #108]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	4a1a      	ldr	r2, [pc, #104]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059e8:	60d3      	str	r3, [r2, #12]
 80059ea:	e011      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059f4:	d10c      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3304      	adds	r3, #4
 80059fa:	2101      	movs	r1, #1
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 f899 	bl	8005b34 <RCCEx_PLLSAI1_Config>
 8005a02:	4603      	mov	r3, r0
 8005a04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a06:	7cfb      	ldrb	r3, [r7, #19]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005a0c:	7cfb      	ldrb	r3, [r7, #19]
 8005a0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d02b      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a2a:	4908      	ldr	r1, [pc, #32]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a3a:	d109      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a3c:	4b03      	ldr	r3, [pc, #12]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	4a02      	ldr	r2, [pc, #8]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a46:	60d3      	str	r3, [r2, #12]
 8005a48:	e014      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005a4a:	bf00      	nop
 8005a4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a58:	d10c      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	2101      	movs	r1, #1
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 f867 	bl	8005b34 <RCCEx_PLLSAI1_Config>
 8005a66:	4603      	mov	r3, r0
 8005a68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a6a:	7cfb      	ldrb	r3, [r7, #19]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005a70:	7cfb      	ldrb	r3, [r7, #19]
 8005a72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d02f      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a80:	4b2b      	ldr	r3, [pc, #172]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a8e:	4928      	ldr	r1, [pc, #160]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a9e:	d10d      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	2102      	movs	r1, #2
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 f844 	bl	8005b34 <RCCEx_PLLSAI1_Config>
 8005aac:	4603      	mov	r3, r0
 8005aae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ab0:	7cfb      	ldrb	r3, [r7, #19]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d014      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005ab6:	7cfb      	ldrb	r3, [r7, #19]
 8005ab8:	74bb      	strb	r3, [r7, #18]
 8005aba:	e011      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ac4:	d10c      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3320      	adds	r3, #32
 8005aca:	2102      	movs	r1, #2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 f925 	bl	8005d1c <RCCEx_PLLSAI2_Config>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ad6:	7cfb      	ldrb	r3, [r7, #19]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005adc:	7cfb      	ldrb	r3, [r7, #19]
 8005ade:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00a      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005aec:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005afa:	490d      	ldr	r1, [pc, #52]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00b      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b0e:	4b08      	ldr	r3, [pc, #32]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b1e:	4904      	ldr	r1, [pc, #16]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b26:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40021000 	.word	0x40021000

08005b34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b42:	4b75      	ldr	r3, [pc, #468]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d018      	beq.n	8005b80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005b4e:	4b72      	ldr	r3, [pc, #456]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f003 0203 	and.w	r2, r3, #3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d10d      	bne.n	8005b7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
       ||
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005b66:	4b6c      	ldr	r3, [pc, #432]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	091b      	lsrs	r3, r3, #4
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
       ||
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d047      	beq.n	8005c0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	73fb      	strb	r3, [r7, #15]
 8005b7e:	e044      	b.n	8005c0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d018      	beq.n	8005bba <RCCEx_PLLSAI1_Config+0x86>
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d825      	bhi.n	8005bd8 <RCCEx_PLLSAI1_Config+0xa4>
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d002      	beq.n	8005b96 <RCCEx_PLLSAI1_Config+0x62>
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d009      	beq.n	8005ba8 <RCCEx_PLLSAI1_Config+0x74>
 8005b94:	e020      	b.n	8005bd8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b96:	4b60      	ldr	r3, [pc, #384]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d11d      	bne.n	8005bde <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ba6:	e01a      	b.n	8005bde <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ba8:	4b5b      	ldr	r3, [pc, #364]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d116      	bne.n	8005be2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bb8:	e013      	b.n	8005be2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005bba:	4b57      	ldr	r3, [pc, #348]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10f      	bne.n	8005be6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005bc6:	4b54      	ldr	r3, [pc, #336]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d109      	bne.n	8005be6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005bd6:	e006      	b.n	8005be6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	73fb      	strb	r3, [r7, #15]
      break;
 8005bdc:	e004      	b.n	8005be8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bde:	bf00      	nop
 8005be0:	e002      	b.n	8005be8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005be2:	bf00      	nop
 8005be4:	e000      	b.n	8005be8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005be6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10d      	bne.n	8005c0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005bee:	4b4a      	ldr	r3, [pc, #296]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6819      	ldr	r1, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	430b      	orrs	r3, r1
 8005c04:	4944      	ldr	r1, [pc, #272]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d17d      	bne.n	8005d0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c10:	4b41      	ldr	r3, [pc, #260]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a40      	ldr	r2, [pc, #256]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c1c:	f7fe fab6 	bl	800418c <HAL_GetTick>
 8005c20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c22:	e009      	b.n	8005c38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c24:	f7fe fab2 	bl	800418c <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d902      	bls.n	8005c38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	73fb      	strb	r3, [r7, #15]
        break;
 8005c36:	e005      	b.n	8005c44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c38:	4b37      	ldr	r3, [pc, #220]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1ef      	bne.n	8005c24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d160      	bne.n	8005d0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d111      	bne.n	8005c74 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c50:	4b31      	ldr	r3, [pc, #196]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6892      	ldr	r2, [r2, #8]
 8005c60:	0211      	lsls	r1, r2, #8
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	68d2      	ldr	r2, [r2, #12]
 8005c66:	0912      	lsrs	r2, r2, #4
 8005c68:	0452      	lsls	r2, r2, #17
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	492a      	ldr	r1, [pc, #168]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	610b      	str	r3, [r1, #16]
 8005c72:	e027      	b.n	8005cc4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d112      	bne.n	8005ca0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c7a:	4b27      	ldr	r3, [pc, #156]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005c82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6892      	ldr	r2, [r2, #8]
 8005c8a:	0211      	lsls	r1, r2, #8
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6912      	ldr	r2, [r2, #16]
 8005c90:	0852      	lsrs	r2, r2, #1
 8005c92:	3a01      	subs	r2, #1
 8005c94:	0552      	lsls	r2, r2, #21
 8005c96:	430a      	orrs	r2, r1
 8005c98:	491f      	ldr	r1, [pc, #124]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	610b      	str	r3, [r1, #16]
 8005c9e:	e011      	b.n	8005cc4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ca0:	4b1d      	ldr	r3, [pc, #116]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ca8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6892      	ldr	r2, [r2, #8]
 8005cb0:	0211      	lsls	r1, r2, #8
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6952      	ldr	r2, [r2, #20]
 8005cb6:	0852      	lsrs	r2, r2, #1
 8005cb8:	3a01      	subs	r2, #1
 8005cba:	0652      	lsls	r2, r2, #25
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	4916      	ldr	r1, [pc, #88]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005cc4:	4b14      	ldr	r3, [pc, #80]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a13      	ldr	r2, [pc, #76]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cd0:	f7fe fa5c 	bl	800418c <HAL_GetTick>
 8005cd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cd6:	e009      	b.n	8005cec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cd8:	f7fe fa58 	bl	800418c <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d902      	bls.n	8005cec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	73fb      	strb	r3, [r7, #15]
          break;
 8005cea:	e005      	b.n	8005cf8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cec:	4b0a      	ldr	r3, [pc, #40]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0ef      	beq.n	8005cd8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005cfe:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d00:	691a      	ldr	r2, [r3, #16]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	4904      	ldr	r1, [pc, #16]	; (8005d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	40021000 	.word	0x40021000

08005d1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d2a:	4b6a      	ldr	r3, [pc, #424]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d018      	beq.n	8005d68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d36:	4b67      	ldr	r3, [pc, #412]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f003 0203 	and.w	r2, r3, #3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d10d      	bne.n	8005d62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
       ||
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d009      	beq.n	8005d62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005d4e:	4b61      	ldr	r3, [pc, #388]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	091b      	lsrs	r3, r3, #4
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
       ||
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d047      	beq.n	8005df2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	73fb      	strb	r3, [r7, #15]
 8005d66:	e044      	b.n	8005df2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d018      	beq.n	8005da2 <RCCEx_PLLSAI2_Config+0x86>
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d825      	bhi.n	8005dc0 <RCCEx_PLLSAI2_Config+0xa4>
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d002      	beq.n	8005d7e <RCCEx_PLLSAI2_Config+0x62>
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d009      	beq.n	8005d90 <RCCEx_PLLSAI2_Config+0x74>
 8005d7c:	e020      	b.n	8005dc0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d7e:	4b55      	ldr	r3, [pc, #340]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d11d      	bne.n	8005dc6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d8e:	e01a      	b.n	8005dc6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d90:	4b50      	ldr	r3, [pc, #320]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d116      	bne.n	8005dca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005da0:	e013      	b.n	8005dca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005da2:	4b4c      	ldr	r3, [pc, #304]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10f      	bne.n	8005dce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005dae:	4b49      	ldr	r3, [pc, #292]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d109      	bne.n	8005dce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dbe:	e006      	b.n	8005dce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc4:	e004      	b.n	8005dd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005dc6:	bf00      	nop
 8005dc8:	e002      	b.n	8005dd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005dca:	bf00      	nop
 8005dcc:	e000      	b.n	8005dd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005dce:	bf00      	nop
    }

    if(status == HAL_OK)
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10d      	bne.n	8005df2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005dd6:	4b3f      	ldr	r3, [pc, #252]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6819      	ldr	r1, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	430b      	orrs	r3, r1
 8005dec:	4939      	ldr	r1, [pc, #228]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d167      	bne.n	8005ec8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005df8:	4b36      	ldr	r3, [pc, #216]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a35      	ldr	r2, [pc, #212]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e04:	f7fe f9c2 	bl	800418c <HAL_GetTick>
 8005e08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e0a:	e009      	b.n	8005e20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e0c:	f7fe f9be 	bl	800418c <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d902      	bls.n	8005e20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	73fb      	strb	r3, [r7, #15]
        break;
 8005e1e:	e005      	b.n	8005e2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e20:	4b2c      	ldr	r3, [pc, #176]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1ef      	bne.n	8005e0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d14a      	bne.n	8005ec8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d111      	bne.n	8005e5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e38:	4b26      	ldr	r3, [pc, #152]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6892      	ldr	r2, [r2, #8]
 8005e48:	0211      	lsls	r1, r2, #8
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	68d2      	ldr	r2, [r2, #12]
 8005e4e:	0912      	lsrs	r2, r2, #4
 8005e50:	0452      	lsls	r2, r2, #17
 8005e52:	430a      	orrs	r2, r1
 8005e54:	491f      	ldr	r1, [pc, #124]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	614b      	str	r3, [r1, #20]
 8005e5a:	e011      	b.n	8005e80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e5c:	4b1d      	ldr	r3, [pc, #116]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005e64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6892      	ldr	r2, [r2, #8]
 8005e6c:	0211      	lsls	r1, r2, #8
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6912      	ldr	r2, [r2, #16]
 8005e72:	0852      	lsrs	r2, r2, #1
 8005e74:	3a01      	subs	r2, #1
 8005e76:	0652      	lsls	r2, r2, #25
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	4916      	ldr	r1, [pc, #88]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005e80:	4b14      	ldr	r3, [pc, #80]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a13      	ldr	r2, [pc, #76]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e8c:	f7fe f97e 	bl	800418c <HAL_GetTick>
 8005e90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e92:	e009      	b.n	8005ea8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e94:	f7fe f97a 	bl	800418c <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d902      	bls.n	8005ea8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	73fb      	strb	r3, [r7, #15]
          break;
 8005ea6:	e005      	b.n	8005eb4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0ef      	beq.n	8005e94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d106      	bne.n	8005ec8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005eba:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ebc:	695a      	ldr	r2, [r3, #20]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	4904      	ldr	r1, [pc, #16]	; (8005ed4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40021000 	.word	0x40021000

08005ed8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e040      	b.n	8005f6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7fc fbc4 	bl	8002688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2224      	movs	r2, #36	; 0x24
 8005f04:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 0201 	bic.w	r2, r2, #1
 8005f14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fabc 	bl	8006494 <UART_SetConfig>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e022      	b.n	8005f6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fd3a 	bl	80069a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689a      	ldr	r2, [r3, #8]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0201 	orr.w	r2, r2, #1
 8005f62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fdc1 	bl	8006aec <UART_CheckIdleState>
 8005f6a:	4603      	mov	r3, r0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08a      	sub	sp, #40	; 0x28
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	603b      	str	r3, [r7, #0]
 8005f80:	4613      	mov	r3, r2
 8005f82:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	f040 8081 	bne.w	8006090 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <HAL_UART_Transmit+0x26>
 8005f94:	88fb      	ldrh	r3, [r7, #6]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e079      	b.n	8006092 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d101      	bne.n	8005fac <HAL_UART_Transmit+0x38>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e072      	b.n	8006092 <HAL_UART_Transmit+0x11e>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2221      	movs	r2, #33	; 0x21
 8005fbe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005fc0:	f7fe f8e4 	bl	800418c <HAL_GetTick>
 8005fc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	88fa      	ldrh	r2, [r7, #6]
 8005fca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	88fa      	ldrh	r2, [r7, #6]
 8005fd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fde:	d108      	bne.n	8005ff2 <HAL_UART_Transmit+0x7e>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d104      	bne.n	8005ff2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	61bb      	str	r3, [r7, #24]
 8005ff0:	e003      	b.n	8005ffa <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006002:	e02d      	b.n	8006060 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	2200      	movs	r2, #0
 800600c:	2180      	movs	r1, #128	; 0x80
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 fdb1 	bl	8006b76 <UART_WaitOnFlagUntilTimeout>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e039      	b.n	8006092 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10b      	bne.n	800603c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	881a      	ldrh	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006030:	b292      	uxth	r2, r2
 8006032:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	3302      	adds	r3, #2
 8006038:	61bb      	str	r3, [r7, #24]
 800603a:	e008      	b.n	800604e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	781a      	ldrb	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	b292      	uxth	r2, r2
 8006046:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	3301      	adds	r3, #1
 800604c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006066:	b29b      	uxth	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1cb      	bne.n	8006004 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2200      	movs	r2, #0
 8006074:	2140      	movs	r1, #64	; 0x40
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 fd7d 	bl	8006b76 <UART_WaitOnFlagUntilTimeout>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e005      	b.n	8006092 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2220      	movs	r2, #32
 800608a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	e000      	b.n	8006092 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006090:	2302      	movs	r3, #2
  }
}
 8006092:	4618      	mov	r0, r3
 8006094:	3720      	adds	r7, #32
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	4613      	mov	r3, r2
 80060a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	f040 808a 	bne.w	80061c8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <HAL_UART_Receive_IT+0x24>
 80060ba:	88fb      	ldrh	r3, [r7, #6]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e082      	b.n	80061ca <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d101      	bne.n	80060d2 <HAL_UART_Receive_IT+0x36>
 80060ce:	2302      	movs	r3, #2
 80060d0:	e07b      	b.n	80061ca <HAL_UART_Receive_IT+0x12e>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	88fa      	ldrh	r2, [r7, #6]
 80060e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	88fa      	ldrh	r2, [r7, #6]
 80060ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fe:	d10e      	bne.n	800611e <HAL_UART_Receive_IT+0x82>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d105      	bne.n	8006114 <HAL_UART_Receive_IT+0x78>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800610e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006112:	e02d      	b.n	8006170 <HAL_UART_Receive_IT+0xd4>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	22ff      	movs	r2, #255	; 0xff
 8006118:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800611c:	e028      	b.n	8006170 <HAL_UART_Receive_IT+0xd4>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10d      	bne.n	8006142 <HAL_UART_Receive_IT+0xa6>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d104      	bne.n	8006138 <HAL_UART_Receive_IT+0x9c>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	22ff      	movs	r2, #255	; 0xff
 8006132:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006136:	e01b      	b.n	8006170 <HAL_UART_Receive_IT+0xd4>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	227f      	movs	r2, #127	; 0x7f
 800613c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006140:	e016      	b.n	8006170 <HAL_UART_Receive_IT+0xd4>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800614a:	d10d      	bne.n	8006168 <HAL_UART_Receive_IT+0xcc>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d104      	bne.n	800615e <HAL_UART_Receive_IT+0xc2>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	227f      	movs	r2, #127	; 0x7f
 8006158:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800615c:	e008      	b.n	8006170 <HAL_UART_Receive_IT+0xd4>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	223f      	movs	r2, #63	; 0x3f
 8006162:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006166:	e003      	b.n	8006170 <HAL_UART_Receive_IT+0xd4>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2222      	movs	r2, #34	; 0x22
 800617a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0201 	orr.w	r2, r2, #1
 800618a:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006194:	d107      	bne.n	80061a6 <HAL_UART_Receive_IT+0x10a>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d103      	bne.n	80061a6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4a0d      	ldr	r2, [pc, #52]	; (80061d8 <HAL_UART_Receive_IT+0x13c>)
 80061a2:	661a      	str	r2, [r3, #96]	; 0x60
 80061a4:	e002      	b.n	80061ac <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4a0c      	ldr	r2, [pc, #48]	; (80061dc <HAL_UART_Receive_IT+0x140>)
 80061aa:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80061c2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80061c4:	2300      	movs	r3, #0
 80061c6:	e000      	b.n	80061ca <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80061c8:	2302      	movs	r3, #2
  }
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	08006db5 	.word	0x08006db5
 80061dc:	08006d0b 	.word	0x08006d0b

080061e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	f640 030f 	movw	r3, #2063	; 0x80f
 8006206:	4013      	ands	r3, r2
 8006208:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d113      	bne.n	8006238 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f003 0320 	and.w	r3, r3, #32
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00e      	beq.n	8006238 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b00      	cmp	r3, #0
 8006222:	d009      	beq.n	8006238 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 8113 	beq.w	8006454 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	4798      	blx	r3
      }
      return;
 8006236:	e10d      	b.n	8006454 <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 80d6 	beq.w	80063ec <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d105      	bne.n	8006256 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	4b85      	ldr	r3, [pc, #532]	; (8006464 <HAL_UART_IRQHandler+0x284>)
 800624e:	4013      	ands	r3, r2
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 80cb 	beq.w	80063ec <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00e      	beq.n	800627e <HAL_UART_IRQHandler+0x9e>
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006266:	2b00      	cmp	r3, #0
 8006268:	d009      	beq.n	800627e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2201      	movs	r2, #1
 8006270:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006276:	f043 0201 	orr.w	r2, r3, #1
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00e      	beq.n	80062a6 <HAL_UART_IRQHandler+0xc6>
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	d009      	beq.n	80062a6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2202      	movs	r2, #2
 8006298:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800629e:	f043 0204 	orr.w	r2, r3, #4
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00e      	beq.n	80062ce <HAL_UART_IRQHandler+0xee>
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d009      	beq.n	80062ce <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2204      	movs	r2, #4
 80062c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062c6:	f043 0202 	orr.w	r2, r3, #2
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	f003 0308 	and.w	r3, r3, #8
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d013      	beq.n	8006300 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	f003 0320 	and.w	r3, r3, #32
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d104      	bne.n	80062ec <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d009      	beq.n	8006300 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2208      	movs	r2, #8
 80062f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062f8:	f043 0208 	orr.w	r2, r3, #8
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00f      	beq.n	800632a <HAL_UART_IRQHandler+0x14a>
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00a      	beq.n	800632a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800631c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006322:	f043 0220 	orr.w	r2, r3, #32
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 8092 	beq.w	8006458 <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00c      	beq.n	8006358 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	f003 0320 	and.w	r3, r3, #32
 8006344:	2b00      	cmp	r3, #0
 8006346:	d007      	beq.n	8006358 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800635c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006368:	2b40      	cmp	r3, #64	; 0x40
 800636a:	d004      	beq.n	8006376 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006372:	2b00      	cmp	r3, #0
 8006374:	d031      	beq.n	80063da <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fc78 	bl	8006c6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006386:	2b40      	cmp	r3, #64	; 0x40
 8006388:	d123      	bne.n	80063d2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006398:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d013      	beq.n	80063ca <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a6:	4a30      	ldr	r2, [pc, #192]	; (8006468 <HAL_UART_IRQHandler+0x288>)
 80063a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fe f847 	bl	8004442 <HAL_DMA_Abort_IT>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d016      	beq.n	80063e8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80063c4:	4610      	mov	r0, r2
 80063c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c8:	e00e      	b.n	80063e8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f858 	bl	8006480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d0:	e00a      	b.n	80063e8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f854 	bl	8006480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d8:	e006      	b.n	80063e8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f850 	bl	8006480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80063e6:	e037      	b.n	8006458 <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e8:	bf00      	nop
    return;
 80063ea:	e035      	b.n	8006458 <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from shutdown mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00d      	beq.n	8006412 <HAL_UART_IRQHandler+0x232>
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d008      	beq.n	8006412 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006408:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fd27 	bl	8006e5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006410:	e025      	b.n	800645e <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00d      	beq.n	8006438 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006422:	2b00      	cmp	r3, #0
 8006424:	d008      	beq.n	8006438 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800642a:	2b00      	cmp	r3, #0
 800642c:	d016      	beq.n	800645c <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	4798      	blx	r3
    }
    return;
 8006436:	e011      	b.n	800645c <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00d      	beq.n	800645e <HAL_UART_IRQHandler+0x27e>
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	d008      	beq.n	800645e <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fc43 	bl	8006cd8 <UART_EndTransmit_IT>
    return;
 8006452:	e004      	b.n	800645e <HAL_UART_IRQHandler+0x27e>
      return;
 8006454:	bf00      	nop
 8006456:	e002      	b.n	800645e <HAL_UART_IRQHandler+0x27e>
    return;
 8006458:	bf00      	nop
 800645a:	e000      	b.n	800645e <HAL_UART_IRQHandler+0x27e>
    return;
 800645c:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800645e:	3720      	adds	r7, #32
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	04000120 	.word	0x04000120
 8006468:	08006cad 	.word	0x08006cad

0800646c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006494:	b5b0      	push	{r4, r5, r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689a      	ldr	r2, [r3, #8]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	431a      	orrs	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	431a      	orrs	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	4bad      	ldr	r3, [pc, #692]	; (8006774 <UART_SetConfig+0x2e0>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6812      	ldr	r2, [r2, #0]
 80064c6:	69f9      	ldr	r1, [r7, #28]
 80064c8:	430b      	orrs	r3, r1
 80064ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART shutdown Bits: Set shutdown[13:12] bits according
  * to huart->Init.shutdownBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4aa2      	ldr	r2, [pc, #648]	; (8006778 <UART_SetConfig+0x2e4>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d004      	beq.n	80064fc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	69fa      	ldr	r2, [r7, #28]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69fa      	ldr	r2, [r7, #28]
 800650c:	430a      	orrs	r2, r1
 800650e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a99      	ldr	r2, [pc, #612]	; (800677c <UART_SetConfig+0x2e8>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d121      	bne.n	800655e <UART_SetConfig+0xca>
 800651a:	4b99      	ldr	r3, [pc, #612]	; (8006780 <UART_SetConfig+0x2ec>)
 800651c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006520:	f003 0303 	and.w	r3, r3, #3
 8006524:	2b03      	cmp	r3, #3
 8006526:	d817      	bhi.n	8006558 <UART_SetConfig+0xc4>
 8006528:	a201      	add	r2, pc, #4	; (adr r2, 8006530 <UART_SetConfig+0x9c>)
 800652a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652e:	bf00      	nop
 8006530:	08006541 	.word	0x08006541
 8006534:	0800654d 	.word	0x0800654d
 8006538:	08006547 	.word	0x08006547
 800653c:	08006553 	.word	0x08006553
 8006540:	2301      	movs	r3, #1
 8006542:	76fb      	strb	r3, [r7, #27]
 8006544:	e0e7      	b.n	8006716 <UART_SetConfig+0x282>
 8006546:	2302      	movs	r3, #2
 8006548:	76fb      	strb	r3, [r7, #27]
 800654a:	e0e4      	b.n	8006716 <UART_SetConfig+0x282>
 800654c:	2304      	movs	r3, #4
 800654e:	76fb      	strb	r3, [r7, #27]
 8006550:	e0e1      	b.n	8006716 <UART_SetConfig+0x282>
 8006552:	2308      	movs	r3, #8
 8006554:	76fb      	strb	r3, [r7, #27]
 8006556:	e0de      	b.n	8006716 <UART_SetConfig+0x282>
 8006558:	2310      	movs	r3, #16
 800655a:	76fb      	strb	r3, [r7, #27]
 800655c:	e0db      	b.n	8006716 <UART_SetConfig+0x282>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a88      	ldr	r2, [pc, #544]	; (8006784 <UART_SetConfig+0x2f0>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d132      	bne.n	80065ce <UART_SetConfig+0x13a>
 8006568:	4b85      	ldr	r3, [pc, #532]	; (8006780 <UART_SetConfig+0x2ec>)
 800656a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656e:	f003 030c 	and.w	r3, r3, #12
 8006572:	2b0c      	cmp	r3, #12
 8006574:	d828      	bhi.n	80065c8 <UART_SetConfig+0x134>
 8006576:	a201      	add	r2, pc, #4	; (adr r2, 800657c <UART_SetConfig+0xe8>)
 8006578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657c:	080065b1 	.word	0x080065b1
 8006580:	080065c9 	.word	0x080065c9
 8006584:	080065c9 	.word	0x080065c9
 8006588:	080065c9 	.word	0x080065c9
 800658c:	080065bd 	.word	0x080065bd
 8006590:	080065c9 	.word	0x080065c9
 8006594:	080065c9 	.word	0x080065c9
 8006598:	080065c9 	.word	0x080065c9
 800659c:	080065b7 	.word	0x080065b7
 80065a0:	080065c9 	.word	0x080065c9
 80065a4:	080065c9 	.word	0x080065c9
 80065a8:	080065c9 	.word	0x080065c9
 80065ac:	080065c3 	.word	0x080065c3
 80065b0:	2300      	movs	r3, #0
 80065b2:	76fb      	strb	r3, [r7, #27]
 80065b4:	e0af      	b.n	8006716 <UART_SetConfig+0x282>
 80065b6:	2302      	movs	r3, #2
 80065b8:	76fb      	strb	r3, [r7, #27]
 80065ba:	e0ac      	b.n	8006716 <UART_SetConfig+0x282>
 80065bc:	2304      	movs	r3, #4
 80065be:	76fb      	strb	r3, [r7, #27]
 80065c0:	e0a9      	b.n	8006716 <UART_SetConfig+0x282>
 80065c2:	2308      	movs	r3, #8
 80065c4:	76fb      	strb	r3, [r7, #27]
 80065c6:	e0a6      	b.n	8006716 <UART_SetConfig+0x282>
 80065c8:	2310      	movs	r3, #16
 80065ca:	76fb      	strb	r3, [r7, #27]
 80065cc:	e0a3      	b.n	8006716 <UART_SetConfig+0x282>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a6d      	ldr	r2, [pc, #436]	; (8006788 <UART_SetConfig+0x2f4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d120      	bne.n	800661a <UART_SetConfig+0x186>
 80065d8:	4b69      	ldr	r3, [pc, #420]	; (8006780 <UART_SetConfig+0x2ec>)
 80065da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065e2:	2b30      	cmp	r3, #48	; 0x30
 80065e4:	d013      	beq.n	800660e <UART_SetConfig+0x17a>
 80065e6:	2b30      	cmp	r3, #48	; 0x30
 80065e8:	d814      	bhi.n	8006614 <UART_SetConfig+0x180>
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	d009      	beq.n	8006602 <UART_SetConfig+0x16e>
 80065ee:	2b20      	cmp	r3, #32
 80065f0:	d810      	bhi.n	8006614 <UART_SetConfig+0x180>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <UART_SetConfig+0x168>
 80065f6:	2b10      	cmp	r3, #16
 80065f8:	d006      	beq.n	8006608 <UART_SetConfig+0x174>
 80065fa:	e00b      	b.n	8006614 <UART_SetConfig+0x180>
 80065fc:	2300      	movs	r3, #0
 80065fe:	76fb      	strb	r3, [r7, #27]
 8006600:	e089      	b.n	8006716 <UART_SetConfig+0x282>
 8006602:	2302      	movs	r3, #2
 8006604:	76fb      	strb	r3, [r7, #27]
 8006606:	e086      	b.n	8006716 <UART_SetConfig+0x282>
 8006608:	2304      	movs	r3, #4
 800660a:	76fb      	strb	r3, [r7, #27]
 800660c:	e083      	b.n	8006716 <UART_SetConfig+0x282>
 800660e:	2308      	movs	r3, #8
 8006610:	76fb      	strb	r3, [r7, #27]
 8006612:	e080      	b.n	8006716 <UART_SetConfig+0x282>
 8006614:	2310      	movs	r3, #16
 8006616:	76fb      	strb	r3, [r7, #27]
 8006618:	e07d      	b.n	8006716 <UART_SetConfig+0x282>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a5b      	ldr	r2, [pc, #364]	; (800678c <UART_SetConfig+0x2f8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d120      	bne.n	8006666 <UART_SetConfig+0x1d2>
 8006624:	4b56      	ldr	r3, [pc, #344]	; (8006780 <UART_SetConfig+0x2ec>)
 8006626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800662e:	2bc0      	cmp	r3, #192	; 0xc0
 8006630:	d013      	beq.n	800665a <UART_SetConfig+0x1c6>
 8006632:	2bc0      	cmp	r3, #192	; 0xc0
 8006634:	d814      	bhi.n	8006660 <UART_SetConfig+0x1cc>
 8006636:	2b80      	cmp	r3, #128	; 0x80
 8006638:	d009      	beq.n	800664e <UART_SetConfig+0x1ba>
 800663a:	2b80      	cmp	r3, #128	; 0x80
 800663c:	d810      	bhi.n	8006660 <UART_SetConfig+0x1cc>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <UART_SetConfig+0x1b4>
 8006642:	2b40      	cmp	r3, #64	; 0x40
 8006644:	d006      	beq.n	8006654 <UART_SetConfig+0x1c0>
 8006646:	e00b      	b.n	8006660 <UART_SetConfig+0x1cc>
 8006648:	2300      	movs	r3, #0
 800664a:	76fb      	strb	r3, [r7, #27]
 800664c:	e063      	b.n	8006716 <UART_SetConfig+0x282>
 800664e:	2302      	movs	r3, #2
 8006650:	76fb      	strb	r3, [r7, #27]
 8006652:	e060      	b.n	8006716 <UART_SetConfig+0x282>
 8006654:	2304      	movs	r3, #4
 8006656:	76fb      	strb	r3, [r7, #27]
 8006658:	e05d      	b.n	8006716 <UART_SetConfig+0x282>
 800665a:	2308      	movs	r3, #8
 800665c:	76fb      	strb	r3, [r7, #27]
 800665e:	e05a      	b.n	8006716 <UART_SetConfig+0x282>
 8006660:	2310      	movs	r3, #16
 8006662:	76fb      	strb	r3, [r7, #27]
 8006664:	e057      	b.n	8006716 <UART_SetConfig+0x282>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a49      	ldr	r2, [pc, #292]	; (8006790 <UART_SetConfig+0x2fc>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d125      	bne.n	80066bc <UART_SetConfig+0x228>
 8006670:	4b43      	ldr	r3, [pc, #268]	; (8006780 <UART_SetConfig+0x2ec>)
 8006672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800667a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800667e:	d017      	beq.n	80066b0 <UART_SetConfig+0x21c>
 8006680:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006684:	d817      	bhi.n	80066b6 <UART_SetConfig+0x222>
 8006686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800668a:	d00b      	beq.n	80066a4 <UART_SetConfig+0x210>
 800668c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006690:	d811      	bhi.n	80066b6 <UART_SetConfig+0x222>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <UART_SetConfig+0x20a>
 8006696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800669a:	d006      	beq.n	80066aa <UART_SetConfig+0x216>
 800669c:	e00b      	b.n	80066b6 <UART_SetConfig+0x222>
 800669e:	2300      	movs	r3, #0
 80066a0:	76fb      	strb	r3, [r7, #27]
 80066a2:	e038      	b.n	8006716 <UART_SetConfig+0x282>
 80066a4:	2302      	movs	r3, #2
 80066a6:	76fb      	strb	r3, [r7, #27]
 80066a8:	e035      	b.n	8006716 <UART_SetConfig+0x282>
 80066aa:	2304      	movs	r3, #4
 80066ac:	76fb      	strb	r3, [r7, #27]
 80066ae:	e032      	b.n	8006716 <UART_SetConfig+0x282>
 80066b0:	2308      	movs	r3, #8
 80066b2:	76fb      	strb	r3, [r7, #27]
 80066b4:	e02f      	b.n	8006716 <UART_SetConfig+0x282>
 80066b6:	2310      	movs	r3, #16
 80066b8:	76fb      	strb	r3, [r7, #27]
 80066ba:	e02c      	b.n	8006716 <UART_SetConfig+0x282>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a2d      	ldr	r2, [pc, #180]	; (8006778 <UART_SetConfig+0x2e4>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d125      	bne.n	8006712 <UART_SetConfig+0x27e>
 80066c6:	4b2e      	ldr	r3, [pc, #184]	; (8006780 <UART_SetConfig+0x2ec>)
 80066c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066d4:	d017      	beq.n	8006706 <UART_SetConfig+0x272>
 80066d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066da:	d817      	bhi.n	800670c <UART_SetConfig+0x278>
 80066dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e0:	d00b      	beq.n	80066fa <UART_SetConfig+0x266>
 80066e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e6:	d811      	bhi.n	800670c <UART_SetConfig+0x278>
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <UART_SetConfig+0x260>
 80066ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f0:	d006      	beq.n	8006700 <UART_SetConfig+0x26c>
 80066f2:	e00b      	b.n	800670c <UART_SetConfig+0x278>
 80066f4:	2300      	movs	r3, #0
 80066f6:	76fb      	strb	r3, [r7, #27]
 80066f8:	e00d      	b.n	8006716 <UART_SetConfig+0x282>
 80066fa:	2302      	movs	r3, #2
 80066fc:	76fb      	strb	r3, [r7, #27]
 80066fe:	e00a      	b.n	8006716 <UART_SetConfig+0x282>
 8006700:	2304      	movs	r3, #4
 8006702:	76fb      	strb	r3, [r7, #27]
 8006704:	e007      	b.n	8006716 <UART_SetConfig+0x282>
 8006706:	2308      	movs	r3, #8
 8006708:	76fb      	strb	r3, [r7, #27]
 800670a:	e004      	b.n	8006716 <UART_SetConfig+0x282>
 800670c:	2310      	movs	r3, #16
 800670e:	76fb      	strb	r3, [r7, #27]
 8006710:	e001      	b.n	8006716 <UART_SetConfig+0x282>
 8006712:	2310      	movs	r3, #16
 8006714:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a17      	ldr	r2, [pc, #92]	; (8006778 <UART_SetConfig+0x2e4>)
 800671c:	4293      	cmp	r3, r2
 800671e:	f040 8087 	bne.w	8006830 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006722:	7efb      	ldrb	r3, [r7, #27]
 8006724:	2b08      	cmp	r3, #8
 8006726:	d837      	bhi.n	8006798 <UART_SetConfig+0x304>
 8006728:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <UART_SetConfig+0x29c>)
 800672a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672e:	bf00      	nop
 8006730:	08006755 	.word	0x08006755
 8006734:	08006799 	.word	0x08006799
 8006738:	0800675d 	.word	0x0800675d
 800673c:	08006799 	.word	0x08006799
 8006740:	08006763 	.word	0x08006763
 8006744:	08006799 	.word	0x08006799
 8006748:	08006799 	.word	0x08006799
 800674c:	08006799 	.word	0x08006799
 8006750:	0800676b 	.word	0x0800676b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006754:	f7fe fe78 	bl	8005448 <HAL_RCC_GetPCLK1Freq>
 8006758:	6178      	str	r0, [r7, #20]
        break;
 800675a:	e022      	b.n	80067a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800675c:	4b0d      	ldr	r3, [pc, #52]	; (8006794 <UART_SetConfig+0x300>)
 800675e:	617b      	str	r3, [r7, #20]
        break;
 8006760:	e01f      	b.n	80067a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006762:	f7fe fdd9 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 8006766:	6178      	str	r0, [r7, #20]
        break;
 8006768:	e01b      	b.n	80067a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800676a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800676e:	617b      	str	r3, [r7, #20]
        break;
 8006770:	e017      	b.n	80067a2 <UART_SetConfig+0x30e>
 8006772:	bf00      	nop
 8006774:	efff69f3 	.word	0xefff69f3
 8006778:	40008000 	.word	0x40008000
 800677c:	40013800 	.word	0x40013800
 8006780:	40021000 	.word	0x40021000
 8006784:	40004400 	.word	0x40004400
 8006788:	40004800 	.word	0x40004800
 800678c:	40004c00 	.word	0x40004c00
 8006790:	40005000 	.word	0x40005000
 8006794:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006798:	2300      	movs	r3, #0
 800679a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	76bb      	strb	r3, [r7, #26]
        break;
 80067a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 80f1 	beq.w	800698c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	4613      	mov	r3, r2
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	4413      	add	r3, r2
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d305      	bcc.n	80067c6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d902      	bls.n	80067cc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	76bb      	strb	r3, [r7, #26]
 80067ca:	e0df      	b.n	800698c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f04f 0100 	mov.w	r1, #0
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	020b      	lsls	r3, r1, #8
 80067de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80067e2:	0202      	lsls	r2, r0, #8
 80067e4:	6879      	ldr	r1, [r7, #4]
 80067e6:	6849      	ldr	r1, [r1, #4]
 80067e8:	0849      	lsrs	r1, r1, #1
 80067ea:	4608      	mov	r0, r1
 80067ec:	f04f 0100 	mov.w	r1, #0
 80067f0:	1814      	adds	r4, r2, r0
 80067f2:	eb43 0501 	adc.w	r5, r3, r1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	461a      	mov	r2, r3
 80067fc:	f04f 0300 	mov.w	r3, #0
 8006800:	4620      	mov	r0, r4
 8006802:	4629      	mov	r1, r5
 8006804:	f7f9 fd3c 	bl	8000280 <__aeabi_uldivmod>
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	4613      	mov	r3, r2
 800680e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006816:	d308      	bcc.n	800682a <UART_SetConfig+0x396>
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800681e:	d204      	bcs.n	800682a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	60da      	str	r2, [r3, #12]
 8006828:	e0b0      	b.n	800698c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	76bb      	strb	r3, [r7, #26]
 800682e:	e0ad      	b.n	800698c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006838:	d15c      	bne.n	80068f4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800683a:	7efb      	ldrb	r3, [r7, #27]
 800683c:	2b08      	cmp	r3, #8
 800683e:	d828      	bhi.n	8006892 <UART_SetConfig+0x3fe>
 8006840:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <UART_SetConfig+0x3b4>)
 8006842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006846:	bf00      	nop
 8006848:	0800686d 	.word	0x0800686d
 800684c:	08006875 	.word	0x08006875
 8006850:	0800687d 	.word	0x0800687d
 8006854:	08006893 	.word	0x08006893
 8006858:	08006883 	.word	0x08006883
 800685c:	08006893 	.word	0x08006893
 8006860:	08006893 	.word	0x08006893
 8006864:	08006893 	.word	0x08006893
 8006868:	0800688b 	.word	0x0800688b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800686c:	f7fe fdec 	bl	8005448 <HAL_RCC_GetPCLK1Freq>
 8006870:	6178      	str	r0, [r7, #20]
        break;
 8006872:	e013      	b.n	800689c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006874:	f7fe fdfe 	bl	8005474 <HAL_RCC_GetPCLK2Freq>
 8006878:	6178      	str	r0, [r7, #20]
        break;
 800687a:	e00f      	b.n	800689c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800687c:	4b49      	ldr	r3, [pc, #292]	; (80069a4 <UART_SetConfig+0x510>)
 800687e:	617b      	str	r3, [r7, #20]
        break;
 8006880:	e00c      	b.n	800689c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006882:	f7fe fd49 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 8006886:	6178      	str	r0, [r7, #20]
        break;
 8006888:	e008      	b.n	800689c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800688a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800688e:	617b      	str	r3, [r7, #20]
        break;
 8006890:	e004      	b.n	800689c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	76bb      	strb	r3, [r7, #26]
        break;
 800689a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d074      	beq.n	800698c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	005a      	lsls	r2, r3, #1
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	085b      	lsrs	r3, r3, #1
 80068ac:	441a      	add	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	2b0f      	cmp	r3, #15
 80068be:	d916      	bls.n	80068ee <UART_SetConfig+0x45a>
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c6:	d212      	bcs.n	80068ee <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f023 030f 	bic.w	r3, r3, #15
 80068d0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	085b      	lsrs	r3, r3, #1
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	b29a      	uxth	r2, r3
 80068de:	89fb      	ldrh	r3, [r7, #14]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	89fa      	ldrh	r2, [r7, #14]
 80068ea:	60da      	str	r2, [r3, #12]
 80068ec:	e04e      	b.n	800698c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	76bb      	strb	r3, [r7, #26]
 80068f2:	e04b      	b.n	800698c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068f4:	7efb      	ldrb	r3, [r7, #27]
 80068f6:	2b08      	cmp	r3, #8
 80068f8:	d827      	bhi.n	800694a <UART_SetConfig+0x4b6>
 80068fa:	a201      	add	r2, pc, #4	; (adr r2, 8006900 <UART_SetConfig+0x46c>)
 80068fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006900:	08006925 	.word	0x08006925
 8006904:	0800692d 	.word	0x0800692d
 8006908:	08006935 	.word	0x08006935
 800690c:	0800694b 	.word	0x0800694b
 8006910:	0800693b 	.word	0x0800693b
 8006914:	0800694b 	.word	0x0800694b
 8006918:	0800694b 	.word	0x0800694b
 800691c:	0800694b 	.word	0x0800694b
 8006920:	08006943 	.word	0x08006943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006924:	f7fe fd90 	bl	8005448 <HAL_RCC_GetPCLK1Freq>
 8006928:	6178      	str	r0, [r7, #20]
        break;
 800692a:	e013      	b.n	8006954 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800692c:	f7fe fda2 	bl	8005474 <HAL_RCC_GetPCLK2Freq>
 8006930:	6178      	str	r0, [r7, #20]
        break;
 8006932:	e00f      	b.n	8006954 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006934:	4b1b      	ldr	r3, [pc, #108]	; (80069a4 <UART_SetConfig+0x510>)
 8006936:	617b      	str	r3, [r7, #20]
        break;
 8006938:	e00c      	b.n	8006954 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800693a:	f7fe fced 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 800693e:	6178      	str	r0, [r7, #20]
        break;
 8006940:	e008      	b.n	8006954 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006946:	617b      	str	r3, [r7, #20]
        break;
 8006948:	e004      	b.n	8006954 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	76bb      	strb	r3, [r7, #26]
        break;
 8006952:	bf00      	nop
    }

    if (pclk != 0U)
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d018      	beq.n	800698c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	085a      	lsrs	r2, r3, #1
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	441a      	add	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	fbb2 f3f3 	udiv	r3, r2, r3
 800696c:	b29b      	uxth	r3, r3
 800696e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	2b0f      	cmp	r3, #15
 8006974:	d908      	bls.n	8006988 <UART_SetConfig+0x4f4>
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800697c:	d204      	bcs.n	8006988 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	60da      	str	r2, [r3, #12]
 8006986:	e001      	b.n	800698c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006998:	7ebb      	ldrb	r3, [r7, #26]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3720      	adds	r7, #32
 800699e:	46bd      	mov	sp, r7
 80069a0:	bdb0      	pop	{r4, r5, r7, pc}
 80069a2:	bf00      	nop
 80069a4:	00f42400 	.word	0x00f42400

080069a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00a      	beq.n	80069d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00a      	beq.n	80069f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00a      	beq.n	8006a16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	f003 0308 	and.w	r3, r3, #8
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	f003 0310 	and.w	r3, r3, #16
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00a      	beq.n	8006a5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	f003 0320 	and.w	r3, r3, #32
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01a      	beq.n	8006abe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aa6:	d10a      	bne.n	8006abe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	605a      	str	r2, [r3, #4]
  }
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af02      	add	r7, sp, #8
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006afa:	f7fd fb47 	bl	800418c <HAL_GetTick>
 8006afe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0308 	and.w	r3, r3, #8
 8006b0a:	2b08      	cmp	r3, #8
 8006b0c:	d10e      	bne.n	8006b2c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f82a 	bl	8006b76 <UART_WaitOnFlagUntilTimeout>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e020      	b.n	8006b6e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d10e      	bne.n	8006b58 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f814 	bl	8006b76 <UART_WaitOnFlagUntilTimeout>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e00a      	b.n	8006b6e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2220      	movs	r2, #32
 8006b62:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	60f8      	str	r0, [r7, #12]
 8006b7e:	60b9      	str	r1, [r7, #8]
 8006b80:	603b      	str	r3, [r7, #0]
 8006b82:	4613      	mov	r3, r2
 8006b84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b86:	e05d      	b.n	8006c44 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8e:	d059      	beq.n	8006c44 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b90:	f7fd fafc 	bl	800418c <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d302      	bcc.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d11b      	bne.n	8006bde <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006bb4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0201 	bic.w	r2, r2, #1
 8006bc4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e042      	b.n	8006c64 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d02b      	beq.n	8006c44 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bfa:	d123      	bne.n	8006c44 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c14:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0201 	bic.w	r2, r2, #1
 8006c24:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2220      	movs	r2, #32
 8006c36:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e00f      	b.n	8006c64 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	69da      	ldr	r2, [r3, #28]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	bf0c      	ite	eq
 8006c54:	2301      	moveq	r3, #1
 8006c56:	2300      	movne	r3, #0
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	79fb      	ldrb	r3, [r7, #7]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d092      	beq.n	8006b88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c82:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689a      	ldr	r2, [r3, #8]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0201 	bic.w	r2, r2, #1
 8006c92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2220      	movs	r2, #32
 8006c98:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f7ff fbd8 	bl	8006480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cd0:	bf00      	nop
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cee:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff fbb5 	bl	800646c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d02:	bf00      	nop
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b084      	sub	sp, #16
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d18:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d1e:	2b22      	cmp	r3, #34	; 0x22
 8006d20:	d13a      	bne.n	8006d98 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d28:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d2a:	89bb      	ldrh	r3, [r7, #12]
 8006d2c:	b2d9      	uxtb	r1, r3
 8006d2e:	89fb      	ldrh	r3, [r7, #14]
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d36:	400a      	ands	r2, r1
 8006d38:	b2d2      	uxtb	r2, r2
 8006d3a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d123      	bne.n	8006dac <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d72:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689a      	ldr	r2, [r3, #8]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 0201 	bic.w	r2, r2, #1
 8006d82:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2220      	movs	r2, #32
 8006d88:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7fa f8a5 	bl	8000ee0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d96:	e009      	b.n	8006dac <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	8b1b      	ldrh	r3, [r3, #24]
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f042 0208 	orr.w	r2, r2, #8
 8006da8:	b292      	uxth	r2, r2
 8006daa:	831a      	strh	r2, [r3, #24]
}
 8006dac:	bf00      	nop
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dc2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dc8:	2b22      	cmp	r3, #34	; 0x22
 8006dca:	d13a      	bne.n	8006e42 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006dd2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006dda:	89ba      	ldrh	r2, [r7, #12]
 8006ddc:	89fb      	ldrh	r3, [r7, #14]
 8006dde:	4013      	ands	r3, r2
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dea:	1c9a      	adds	r2, r3, #2
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d123      	bne.n	8006e56 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e1c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0201 	bic.w	r2, r2, #1
 8006e2c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2220      	movs	r2, #32
 8006e32:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7fa f850 	bl	8000ee0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e40:	e009      	b.n	8006e56 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	8b1b      	ldrh	r3, [r3, #24]
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0208 	orr.w	r2, r2, #8
 8006e52:	b292      	uxth	r2, r2
 8006e54:	831a      	strh	r2, [r3, #24]
}
 8006e56:	bf00      	nop
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from shutdown mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e66:	bf00      	nop
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
	...

08006e74 <__errno>:
 8006e74:	4b01      	ldr	r3, [pc, #4]	; (8006e7c <__errno+0x8>)
 8006e76:	6818      	ldr	r0, [r3, #0]
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	200000f8 	.word	0x200000f8

08006e80 <__libc_init_array>:
 8006e80:	b570      	push	{r4, r5, r6, lr}
 8006e82:	4d0d      	ldr	r5, [pc, #52]	; (8006eb8 <__libc_init_array+0x38>)
 8006e84:	4c0d      	ldr	r4, [pc, #52]	; (8006ebc <__libc_init_array+0x3c>)
 8006e86:	1b64      	subs	r4, r4, r5
 8006e88:	10a4      	asrs	r4, r4, #2
 8006e8a:	2600      	movs	r6, #0
 8006e8c:	42a6      	cmp	r6, r4
 8006e8e:	d109      	bne.n	8006ea4 <__libc_init_array+0x24>
 8006e90:	4d0b      	ldr	r5, [pc, #44]	; (8006ec0 <__libc_init_array+0x40>)
 8006e92:	4c0c      	ldr	r4, [pc, #48]	; (8006ec4 <__libc_init_array+0x44>)
 8006e94:	f000 fc64 	bl	8007760 <_init>
 8006e98:	1b64      	subs	r4, r4, r5
 8006e9a:	10a4      	asrs	r4, r4, #2
 8006e9c:	2600      	movs	r6, #0
 8006e9e:	42a6      	cmp	r6, r4
 8006ea0:	d105      	bne.n	8006eae <__libc_init_array+0x2e>
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea8:	4798      	blx	r3
 8006eaa:	3601      	adds	r6, #1
 8006eac:	e7ee      	b.n	8006e8c <__libc_init_array+0xc>
 8006eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb2:	4798      	blx	r3
 8006eb4:	3601      	adds	r6, #1
 8006eb6:	e7f2      	b.n	8006e9e <__libc_init_array+0x1e>
 8006eb8:	0800839c 	.word	0x0800839c
 8006ebc:	0800839c 	.word	0x0800839c
 8006ec0:	0800839c 	.word	0x0800839c
 8006ec4:	080083a0 	.word	0x080083a0

08006ec8 <memset>:
 8006ec8:	4402      	add	r2, r0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d100      	bne.n	8006ed2 <memset+0xa>
 8006ed0:	4770      	bx	lr
 8006ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ed6:	e7f9      	b.n	8006ecc <memset+0x4>

08006ed8 <siprintf>:
 8006ed8:	b40e      	push	{r1, r2, r3}
 8006eda:	b500      	push	{lr}
 8006edc:	b09c      	sub	sp, #112	; 0x70
 8006ede:	ab1d      	add	r3, sp, #116	; 0x74
 8006ee0:	9002      	str	r0, [sp, #8]
 8006ee2:	9006      	str	r0, [sp, #24]
 8006ee4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ee8:	4809      	ldr	r0, [pc, #36]	; (8006f10 <siprintf+0x38>)
 8006eea:	9107      	str	r1, [sp, #28]
 8006eec:	9104      	str	r1, [sp, #16]
 8006eee:	4909      	ldr	r1, [pc, #36]	; (8006f14 <siprintf+0x3c>)
 8006ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ef4:	9105      	str	r1, [sp, #20]
 8006ef6:	6800      	ldr	r0, [r0, #0]
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	a902      	add	r1, sp, #8
 8006efc:	f000 f87e 	bl	8006ffc <_svfiprintf_r>
 8006f00:	9b02      	ldr	r3, [sp, #8]
 8006f02:	2200      	movs	r2, #0
 8006f04:	701a      	strb	r2, [r3, #0]
 8006f06:	b01c      	add	sp, #112	; 0x70
 8006f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f0c:	b003      	add	sp, #12
 8006f0e:	4770      	bx	lr
 8006f10:	200000f8 	.word	0x200000f8
 8006f14:	ffff0208 	.word	0xffff0208

08006f18 <strcat>:
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	7814      	ldrb	r4, [r2, #0]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	3201      	adds	r2, #1
 8006f22:	2c00      	cmp	r4, #0
 8006f24:	d1fa      	bne.n	8006f1c <strcat+0x4>
 8006f26:	3b01      	subs	r3, #1
 8006f28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f2c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f30:	2a00      	cmp	r2, #0
 8006f32:	d1f9      	bne.n	8006f28 <strcat+0x10>
 8006f34:	bd10      	pop	{r4, pc}

08006f36 <strcpy>:
 8006f36:	4603      	mov	r3, r0
 8006f38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f3c:	f803 2b01 	strb.w	r2, [r3], #1
 8006f40:	2a00      	cmp	r2, #0
 8006f42:	d1f9      	bne.n	8006f38 <strcpy+0x2>
 8006f44:	4770      	bx	lr

08006f46 <__ssputs_r>:
 8006f46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f4a:	688e      	ldr	r6, [r1, #8]
 8006f4c:	429e      	cmp	r6, r3
 8006f4e:	4682      	mov	sl, r0
 8006f50:	460c      	mov	r4, r1
 8006f52:	4690      	mov	r8, r2
 8006f54:	461f      	mov	r7, r3
 8006f56:	d838      	bhi.n	8006fca <__ssputs_r+0x84>
 8006f58:	898a      	ldrh	r2, [r1, #12]
 8006f5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f5e:	d032      	beq.n	8006fc6 <__ssputs_r+0x80>
 8006f60:	6825      	ldr	r5, [r4, #0]
 8006f62:	6909      	ldr	r1, [r1, #16]
 8006f64:	eba5 0901 	sub.w	r9, r5, r1
 8006f68:	6965      	ldr	r5, [r4, #20]
 8006f6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f72:	3301      	adds	r3, #1
 8006f74:	444b      	add	r3, r9
 8006f76:	106d      	asrs	r5, r5, #1
 8006f78:	429d      	cmp	r5, r3
 8006f7a:	bf38      	it	cc
 8006f7c:	461d      	movcc	r5, r3
 8006f7e:	0553      	lsls	r3, r2, #21
 8006f80:	d531      	bpl.n	8006fe6 <__ssputs_r+0xa0>
 8006f82:	4629      	mov	r1, r5
 8006f84:	f000 fb46 	bl	8007614 <_malloc_r>
 8006f88:	4606      	mov	r6, r0
 8006f8a:	b950      	cbnz	r0, 8006fa2 <__ssputs_r+0x5c>
 8006f8c:	230c      	movs	r3, #12
 8006f8e:	f8ca 3000 	str.w	r3, [sl]
 8006f92:	89a3      	ldrh	r3, [r4, #12]
 8006f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f98:	81a3      	strh	r3, [r4, #12]
 8006f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa2:	6921      	ldr	r1, [r4, #16]
 8006fa4:	464a      	mov	r2, r9
 8006fa6:	f000 fabd 	bl	8007524 <memcpy>
 8006faa:	89a3      	ldrh	r3, [r4, #12]
 8006fac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb4:	81a3      	strh	r3, [r4, #12]
 8006fb6:	6126      	str	r6, [r4, #16]
 8006fb8:	6165      	str	r5, [r4, #20]
 8006fba:	444e      	add	r6, r9
 8006fbc:	eba5 0509 	sub.w	r5, r5, r9
 8006fc0:	6026      	str	r6, [r4, #0]
 8006fc2:	60a5      	str	r5, [r4, #8]
 8006fc4:	463e      	mov	r6, r7
 8006fc6:	42be      	cmp	r6, r7
 8006fc8:	d900      	bls.n	8006fcc <__ssputs_r+0x86>
 8006fca:	463e      	mov	r6, r7
 8006fcc:	4632      	mov	r2, r6
 8006fce:	6820      	ldr	r0, [r4, #0]
 8006fd0:	4641      	mov	r1, r8
 8006fd2:	f000 fab5 	bl	8007540 <memmove>
 8006fd6:	68a3      	ldr	r3, [r4, #8]
 8006fd8:	6822      	ldr	r2, [r4, #0]
 8006fda:	1b9b      	subs	r3, r3, r6
 8006fdc:	4432      	add	r2, r6
 8006fde:	60a3      	str	r3, [r4, #8]
 8006fe0:	6022      	str	r2, [r4, #0]
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	e7db      	b.n	8006f9e <__ssputs_r+0x58>
 8006fe6:	462a      	mov	r2, r5
 8006fe8:	f000 fb6e 	bl	80076c8 <_realloc_r>
 8006fec:	4606      	mov	r6, r0
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d1e1      	bne.n	8006fb6 <__ssputs_r+0x70>
 8006ff2:	6921      	ldr	r1, [r4, #16]
 8006ff4:	4650      	mov	r0, sl
 8006ff6:	f000 fabd 	bl	8007574 <_free_r>
 8006ffa:	e7c7      	b.n	8006f8c <__ssputs_r+0x46>

08006ffc <_svfiprintf_r>:
 8006ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007000:	4698      	mov	r8, r3
 8007002:	898b      	ldrh	r3, [r1, #12]
 8007004:	061b      	lsls	r3, r3, #24
 8007006:	b09d      	sub	sp, #116	; 0x74
 8007008:	4607      	mov	r7, r0
 800700a:	460d      	mov	r5, r1
 800700c:	4614      	mov	r4, r2
 800700e:	d50e      	bpl.n	800702e <_svfiprintf_r+0x32>
 8007010:	690b      	ldr	r3, [r1, #16]
 8007012:	b963      	cbnz	r3, 800702e <_svfiprintf_r+0x32>
 8007014:	2140      	movs	r1, #64	; 0x40
 8007016:	f000 fafd 	bl	8007614 <_malloc_r>
 800701a:	6028      	str	r0, [r5, #0]
 800701c:	6128      	str	r0, [r5, #16]
 800701e:	b920      	cbnz	r0, 800702a <_svfiprintf_r+0x2e>
 8007020:	230c      	movs	r3, #12
 8007022:	603b      	str	r3, [r7, #0]
 8007024:	f04f 30ff 	mov.w	r0, #4294967295
 8007028:	e0d1      	b.n	80071ce <_svfiprintf_r+0x1d2>
 800702a:	2340      	movs	r3, #64	; 0x40
 800702c:	616b      	str	r3, [r5, #20]
 800702e:	2300      	movs	r3, #0
 8007030:	9309      	str	r3, [sp, #36]	; 0x24
 8007032:	2320      	movs	r3, #32
 8007034:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007038:	f8cd 800c 	str.w	r8, [sp, #12]
 800703c:	2330      	movs	r3, #48	; 0x30
 800703e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80071e8 <_svfiprintf_r+0x1ec>
 8007042:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007046:	f04f 0901 	mov.w	r9, #1
 800704a:	4623      	mov	r3, r4
 800704c:	469a      	mov	sl, r3
 800704e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007052:	b10a      	cbz	r2, 8007058 <_svfiprintf_r+0x5c>
 8007054:	2a25      	cmp	r2, #37	; 0x25
 8007056:	d1f9      	bne.n	800704c <_svfiprintf_r+0x50>
 8007058:	ebba 0b04 	subs.w	fp, sl, r4
 800705c:	d00b      	beq.n	8007076 <_svfiprintf_r+0x7a>
 800705e:	465b      	mov	r3, fp
 8007060:	4622      	mov	r2, r4
 8007062:	4629      	mov	r1, r5
 8007064:	4638      	mov	r0, r7
 8007066:	f7ff ff6e 	bl	8006f46 <__ssputs_r>
 800706a:	3001      	adds	r0, #1
 800706c:	f000 80aa 	beq.w	80071c4 <_svfiprintf_r+0x1c8>
 8007070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007072:	445a      	add	r2, fp
 8007074:	9209      	str	r2, [sp, #36]	; 0x24
 8007076:	f89a 3000 	ldrb.w	r3, [sl]
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 80a2 	beq.w	80071c4 <_svfiprintf_r+0x1c8>
 8007080:	2300      	movs	r3, #0
 8007082:	f04f 32ff 	mov.w	r2, #4294967295
 8007086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800708a:	f10a 0a01 	add.w	sl, sl, #1
 800708e:	9304      	str	r3, [sp, #16]
 8007090:	9307      	str	r3, [sp, #28]
 8007092:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007096:	931a      	str	r3, [sp, #104]	; 0x68
 8007098:	4654      	mov	r4, sl
 800709a:	2205      	movs	r2, #5
 800709c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a0:	4851      	ldr	r0, [pc, #324]	; (80071e8 <_svfiprintf_r+0x1ec>)
 80070a2:	f7f9 f89d 	bl	80001e0 <memchr>
 80070a6:	9a04      	ldr	r2, [sp, #16]
 80070a8:	b9d8      	cbnz	r0, 80070e2 <_svfiprintf_r+0xe6>
 80070aa:	06d0      	lsls	r0, r2, #27
 80070ac:	bf44      	itt	mi
 80070ae:	2320      	movmi	r3, #32
 80070b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070b4:	0711      	lsls	r1, r2, #28
 80070b6:	bf44      	itt	mi
 80070b8:	232b      	movmi	r3, #43	; 0x2b
 80070ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070be:	f89a 3000 	ldrb.w	r3, [sl]
 80070c2:	2b2a      	cmp	r3, #42	; 0x2a
 80070c4:	d015      	beq.n	80070f2 <_svfiprintf_r+0xf6>
 80070c6:	9a07      	ldr	r2, [sp, #28]
 80070c8:	4654      	mov	r4, sl
 80070ca:	2000      	movs	r0, #0
 80070cc:	f04f 0c0a 	mov.w	ip, #10
 80070d0:	4621      	mov	r1, r4
 80070d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070d6:	3b30      	subs	r3, #48	; 0x30
 80070d8:	2b09      	cmp	r3, #9
 80070da:	d94e      	bls.n	800717a <_svfiprintf_r+0x17e>
 80070dc:	b1b0      	cbz	r0, 800710c <_svfiprintf_r+0x110>
 80070de:	9207      	str	r2, [sp, #28]
 80070e0:	e014      	b.n	800710c <_svfiprintf_r+0x110>
 80070e2:	eba0 0308 	sub.w	r3, r0, r8
 80070e6:	fa09 f303 	lsl.w	r3, r9, r3
 80070ea:	4313      	orrs	r3, r2
 80070ec:	9304      	str	r3, [sp, #16]
 80070ee:	46a2      	mov	sl, r4
 80070f0:	e7d2      	b.n	8007098 <_svfiprintf_r+0x9c>
 80070f2:	9b03      	ldr	r3, [sp, #12]
 80070f4:	1d19      	adds	r1, r3, #4
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	9103      	str	r1, [sp, #12]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	bfbb      	ittet	lt
 80070fe:	425b      	neglt	r3, r3
 8007100:	f042 0202 	orrlt.w	r2, r2, #2
 8007104:	9307      	strge	r3, [sp, #28]
 8007106:	9307      	strlt	r3, [sp, #28]
 8007108:	bfb8      	it	lt
 800710a:	9204      	strlt	r2, [sp, #16]
 800710c:	7823      	ldrb	r3, [r4, #0]
 800710e:	2b2e      	cmp	r3, #46	; 0x2e
 8007110:	d10c      	bne.n	800712c <_svfiprintf_r+0x130>
 8007112:	7863      	ldrb	r3, [r4, #1]
 8007114:	2b2a      	cmp	r3, #42	; 0x2a
 8007116:	d135      	bne.n	8007184 <_svfiprintf_r+0x188>
 8007118:	9b03      	ldr	r3, [sp, #12]
 800711a:	1d1a      	adds	r2, r3, #4
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	9203      	str	r2, [sp, #12]
 8007120:	2b00      	cmp	r3, #0
 8007122:	bfb8      	it	lt
 8007124:	f04f 33ff 	movlt.w	r3, #4294967295
 8007128:	3402      	adds	r4, #2
 800712a:	9305      	str	r3, [sp, #20]
 800712c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80071f8 <_svfiprintf_r+0x1fc>
 8007130:	7821      	ldrb	r1, [r4, #0]
 8007132:	2203      	movs	r2, #3
 8007134:	4650      	mov	r0, sl
 8007136:	f7f9 f853 	bl	80001e0 <memchr>
 800713a:	b140      	cbz	r0, 800714e <_svfiprintf_r+0x152>
 800713c:	2340      	movs	r3, #64	; 0x40
 800713e:	eba0 000a 	sub.w	r0, r0, sl
 8007142:	fa03 f000 	lsl.w	r0, r3, r0
 8007146:	9b04      	ldr	r3, [sp, #16]
 8007148:	4303      	orrs	r3, r0
 800714a:	3401      	adds	r4, #1
 800714c:	9304      	str	r3, [sp, #16]
 800714e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007152:	4826      	ldr	r0, [pc, #152]	; (80071ec <_svfiprintf_r+0x1f0>)
 8007154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007158:	2206      	movs	r2, #6
 800715a:	f7f9 f841 	bl	80001e0 <memchr>
 800715e:	2800      	cmp	r0, #0
 8007160:	d038      	beq.n	80071d4 <_svfiprintf_r+0x1d8>
 8007162:	4b23      	ldr	r3, [pc, #140]	; (80071f0 <_svfiprintf_r+0x1f4>)
 8007164:	bb1b      	cbnz	r3, 80071ae <_svfiprintf_r+0x1b2>
 8007166:	9b03      	ldr	r3, [sp, #12]
 8007168:	3307      	adds	r3, #7
 800716a:	f023 0307 	bic.w	r3, r3, #7
 800716e:	3308      	adds	r3, #8
 8007170:	9303      	str	r3, [sp, #12]
 8007172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007174:	4433      	add	r3, r6
 8007176:	9309      	str	r3, [sp, #36]	; 0x24
 8007178:	e767      	b.n	800704a <_svfiprintf_r+0x4e>
 800717a:	fb0c 3202 	mla	r2, ip, r2, r3
 800717e:	460c      	mov	r4, r1
 8007180:	2001      	movs	r0, #1
 8007182:	e7a5      	b.n	80070d0 <_svfiprintf_r+0xd4>
 8007184:	2300      	movs	r3, #0
 8007186:	3401      	adds	r4, #1
 8007188:	9305      	str	r3, [sp, #20]
 800718a:	4619      	mov	r1, r3
 800718c:	f04f 0c0a 	mov.w	ip, #10
 8007190:	4620      	mov	r0, r4
 8007192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007196:	3a30      	subs	r2, #48	; 0x30
 8007198:	2a09      	cmp	r2, #9
 800719a:	d903      	bls.n	80071a4 <_svfiprintf_r+0x1a8>
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0c5      	beq.n	800712c <_svfiprintf_r+0x130>
 80071a0:	9105      	str	r1, [sp, #20]
 80071a2:	e7c3      	b.n	800712c <_svfiprintf_r+0x130>
 80071a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80071a8:	4604      	mov	r4, r0
 80071aa:	2301      	movs	r3, #1
 80071ac:	e7f0      	b.n	8007190 <_svfiprintf_r+0x194>
 80071ae:	ab03      	add	r3, sp, #12
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	462a      	mov	r2, r5
 80071b4:	4b0f      	ldr	r3, [pc, #60]	; (80071f4 <_svfiprintf_r+0x1f8>)
 80071b6:	a904      	add	r1, sp, #16
 80071b8:	4638      	mov	r0, r7
 80071ba:	f3af 8000 	nop.w
 80071be:	1c42      	adds	r2, r0, #1
 80071c0:	4606      	mov	r6, r0
 80071c2:	d1d6      	bne.n	8007172 <_svfiprintf_r+0x176>
 80071c4:	89ab      	ldrh	r3, [r5, #12]
 80071c6:	065b      	lsls	r3, r3, #25
 80071c8:	f53f af2c 	bmi.w	8007024 <_svfiprintf_r+0x28>
 80071cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071ce:	b01d      	add	sp, #116	; 0x74
 80071d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d4:	ab03      	add	r3, sp, #12
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	462a      	mov	r2, r5
 80071da:	4b06      	ldr	r3, [pc, #24]	; (80071f4 <_svfiprintf_r+0x1f8>)
 80071dc:	a904      	add	r1, sp, #16
 80071de:	4638      	mov	r0, r7
 80071e0:	f000 f87a 	bl	80072d8 <_printf_i>
 80071e4:	e7eb      	b.n	80071be <_svfiprintf_r+0x1c2>
 80071e6:	bf00      	nop
 80071e8:	08008360 	.word	0x08008360
 80071ec:	0800836a 	.word	0x0800836a
 80071f0:	00000000 	.word	0x00000000
 80071f4:	08006f47 	.word	0x08006f47
 80071f8:	08008366 	.word	0x08008366

080071fc <_printf_common>:
 80071fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007200:	4616      	mov	r6, r2
 8007202:	4699      	mov	r9, r3
 8007204:	688a      	ldr	r2, [r1, #8]
 8007206:	690b      	ldr	r3, [r1, #16]
 8007208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800720c:	4293      	cmp	r3, r2
 800720e:	bfb8      	it	lt
 8007210:	4613      	movlt	r3, r2
 8007212:	6033      	str	r3, [r6, #0]
 8007214:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007218:	4607      	mov	r7, r0
 800721a:	460c      	mov	r4, r1
 800721c:	b10a      	cbz	r2, 8007222 <_printf_common+0x26>
 800721e:	3301      	adds	r3, #1
 8007220:	6033      	str	r3, [r6, #0]
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	0699      	lsls	r1, r3, #26
 8007226:	bf42      	ittt	mi
 8007228:	6833      	ldrmi	r3, [r6, #0]
 800722a:	3302      	addmi	r3, #2
 800722c:	6033      	strmi	r3, [r6, #0]
 800722e:	6825      	ldr	r5, [r4, #0]
 8007230:	f015 0506 	ands.w	r5, r5, #6
 8007234:	d106      	bne.n	8007244 <_printf_common+0x48>
 8007236:	f104 0a19 	add.w	sl, r4, #25
 800723a:	68e3      	ldr	r3, [r4, #12]
 800723c:	6832      	ldr	r2, [r6, #0]
 800723e:	1a9b      	subs	r3, r3, r2
 8007240:	42ab      	cmp	r3, r5
 8007242:	dc26      	bgt.n	8007292 <_printf_common+0x96>
 8007244:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007248:	1e13      	subs	r3, r2, #0
 800724a:	6822      	ldr	r2, [r4, #0]
 800724c:	bf18      	it	ne
 800724e:	2301      	movne	r3, #1
 8007250:	0692      	lsls	r2, r2, #26
 8007252:	d42b      	bmi.n	80072ac <_printf_common+0xb0>
 8007254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007258:	4649      	mov	r1, r9
 800725a:	4638      	mov	r0, r7
 800725c:	47c0      	blx	r8
 800725e:	3001      	adds	r0, #1
 8007260:	d01e      	beq.n	80072a0 <_printf_common+0xa4>
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	68e5      	ldr	r5, [r4, #12]
 8007266:	6832      	ldr	r2, [r6, #0]
 8007268:	f003 0306 	and.w	r3, r3, #6
 800726c:	2b04      	cmp	r3, #4
 800726e:	bf08      	it	eq
 8007270:	1aad      	subeq	r5, r5, r2
 8007272:	68a3      	ldr	r3, [r4, #8]
 8007274:	6922      	ldr	r2, [r4, #16]
 8007276:	bf0c      	ite	eq
 8007278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800727c:	2500      	movne	r5, #0
 800727e:	4293      	cmp	r3, r2
 8007280:	bfc4      	itt	gt
 8007282:	1a9b      	subgt	r3, r3, r2
 8007284:	18ed      	addgt	r5, r5, r3
 8007286:	2600      	movs	r6, #0
 8007288:	341a      	adds	r4, #26
 800728a:	42b5      	cmp	r5, r6
 800728c:	d11a      	bne.n	80072c4 <_printf_common+0xc8>
 800728e:	2000      	movs	r0, #0
 8007290:	e008      	b.n	80072a4 <_printf_common+0xa8>
 8007292:	2301      	movs	r3, #1
 8007294:	4652      	mov	r2, sl
 8007296:	4649      	mov	r1, r9
 8007298:	4638      	mov	r0, r7
 800729a:	47c0      	blx	r8
 800729c:	3001      	adds	r0, #1
 800729e:	d103      	bne.n	80072a8 <_printf_common+0xac>
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295
 80072a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a8:	3501      	adds	r5, #1
 80072aa:	e7c6      	b.n	800723a <_printf_common+0x3e>
 80072ac:	18e1      	adds	r1, r4, r3
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	2030      	movs	r0, #48	; 0x30
 80072b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072b6:	4422      	add	r2, r4
 80072b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072c0:	3302      	adds	r3, #2
 80072c2:	e7c7      	b.n	8007254 <_printf_common+0x58>
 80072c4:	2301      	movs	r3, #1
 80072c6:	4622      	mov	r2, r4
 80072c8:	4649      	mov	r1, r9
 80072ca:	4638      	mov	r0, r7
 80072cc:	47c0      	blx	r8
 80072ce:	3001      	adds	r0, #1
 80072d0:	d0e6      	beq.n	80072a0 <_printf_common+0xa4>
 80072d2:	3601      	adds	r6, #1
 80072d4:	e7d9      	b.n	800728a <_printf_common+0x8e>
	...

080072d8 <_printf_i>:
 80072d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072dc:	460c      	mov	r4, r1
 80072de:	4691      	mov	r9, r2
 80072e0:	7e27      	ldrb	r7, [r4, #24]
 80072e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80072e4:	2f78      	cmp	r7, #120	; 0x78
 80072e6:	4680      	mov	r8, r0
 80072e8:	469a      	mov	sl, r3
 80072ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072ee:	d807      	bhi.n	8007300 <_printf_i+0x28>
 80072f0:	2f62      	cmp	r7, #98	; 0x62
 80072f2:	d80a      	bhi.n	800730a <_printf_i+0x32>
 80072f4:	2f00      	cmp	r7, #0
 80072f6:	f000 80d8 	beq.w	80074aa <_printf_i+0x1d2>
 80072fa:	2f58      	cmp	r7, #88	; 0x58
 80072fc:	f000 80a3 	beq.w	8007446 <_printf_i+0x16e>
 8007300:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007304:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007308:	e03a      	b.n	8007380 <_printf_i+0xa8>
 800730a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800730e:	2b15      	cmp	r3, #21
 8007310:	d8f6      	bhi.n	8007300 <_printf_i+0x28>
 8007312:	a001      	add	r0, pc, #4	; (adr r0, 8007318 <_printf_i+0x40>)
 8007314:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007318:	08007371 	.word	0x08007371
 800731c:	08007385 	.word	0x08007385
 8007320:	08007301 	.word	0x08007301
 8007324:	08007301 	.word	0x08007301
 8007328:	08007301 	.word	0x08007301
 800732c:	08007301 	.word	0x08007301
 8007330:	08007385 	.word	0x08007385
 8007334:	08007301 	.word	0x08007301
 8007338:	08007301 	.word	0x08007301
 800733c:	08007301 	.word	0x08007301
 8007340:	08007301 	.word	0x08007301
 8007344:	08007491 	.word	0x08007491
 8007348:	080073b5 	.word	0x080073b5
 800734c:	08007473 	.word	0x08007473
 8007350:	08007301 	.word	0x08007301
 8007354:	08007301 	.word	0x08007301
 8007358:	080074b3 	.word	0x080074b3
 800735c:	08007301 	.word	0x08007301
 8007360:	080073b5 	.word	0x080073b5
 8007364:	08007301 	.word	0x08007301
 8007368:	08007301 	.word	0x08007301
 800736c:	0800747b 	.word	0x0800747b
 8007370:	680b      	ldr	r3, [r1, #0]
 8007372:	1d1a      	adds	r2, r3, #4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	600a      	str	r2, [r1, #0]
 8007378:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800737c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007380:	2301      	movs	r3, #1
 8007382:	e0a3      	b.n	80074cc <_printf_i+0x1f4>
 8007384:	6825      	ldr	r5, [r4, #0]
 8007386:	6808      	ldr	r0, [r1, #0]
 8007388:	062e      	lsls	r6, r5, #24
 800738a:	f100 0304 	add.w	r3, r0, #4
 800738e:	d50a      	bpl.n	80073a6 <_printf_i+0xce>
 8007390:	6805      	ldr	r5, [r0, #0]
 8007392:	600b      	str	r3, [r1, #0]
 8007394:	2d00      	cmp	r5, #0
 8007396:	da03      	bge.n	80073a0 <_printf_i+0xc8>
 8007398:	232d      	movs	r3, #45	; 0x2d
 800739a:	426d      	negs	r5, r5
 800739c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073a0:	485e      	ldr	r0, [pc, #376]	; (800751c <_printf_i+0x244>)
 80073a2:	230a      	movs	r3, #10
 80073a4:	e019      	b.n	80073da <_printf_i+0x102>
 80073a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80073aa:	6805      	ldr	r5, [r0, #0]
 80073ac:	600b      	str	r3, [r1, #0]
 80073ae:	bf18      	it	ne
 80073b0:	b22d      	sxthne	r5, r5
 80073b2:	e7ef      	b.n	8007394 <_printf_i+0xbc>
 80073b4:	680b      	ldr	r3, [r1, #0]
 80073b6:	6825      	ldr	r5, [r4, #0]
 80073b8:	1d18      	adds	r0, r3, #4
 80073ba:	6008      	str	r0, [r1, #0]
 80073bc:	0628      	lsls	r0, r5, #24
 80073be:	d501      	bpl.n	80073c4 <_printf_i+0xec>
 80073c0:	681d      	ldr	r5, [r3, #0]
 80073c2:	e002      	b.n	80073ca <_printf_i+0xf2>
 80073c4:	0669      	lsls	r1, r5, #25
 80073c6:	d5fb      	bpl.n	80073c0 <_printf_i+0xe8>
 80073c8:	881d      	ldrh	r5, [r3, #0]
 80073ca:	4854      	ldr	r0, [pc, #336]	; (800751c <_printf_i+0x244>)
 80073cc:	2f6f      	cmp	r7, #111	; 0x6f
 80073ce:	bf0c      	ite	eq
 80073d0:	2308      	moveq	r3, #8
 80073d2:	230a      	movne	r3, #10
 80073d4:	2100      	movs	r1, #0
 80073d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073da:	6866      	ldr	r6, [r4, #4]
 80073dc:	60a6      	str	r6, [r4, #8]
 80073de:	2e00      	cmp	r6, #0
 80073e0:	bfa2      	ittt	ge
 80073e2:	6821      	ldrge	r1, [r4, #0]
 80073e4:	f021 0104 	bicge.w	r1, r1, #4
 80073e8:	6021      	strge	r1, [r4, #0]
 80073ea:	b90d      	cbnz	r5, 80073f0 <_printf_i+0x118>
 80073ec:	2e00      	cmp	r6, #0
 80073ee:	d04d      	beq.n	800748c <_printf_i+0x1b4>
 80073f0:	4616      	mov	r6, r2
 80073f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80073f6:	fb03 5711 	mls	r7, r3, r1, r5
 80073fa:	5dc7      	ldrb	r7, [r0, r7]
 80073fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007400:	462f      	mov	r7, r5
 8007402:	42bb      	cmp	r3, r7
 8007404:	460d      	mov	r5, r1
 8007406:	d9f4      	bls.n	80073f2 <_printf_i+0x11a>
 8007408:	2b08      	cmp	r3, #8
 800740a:	d10b      	bne.n	8007424 <_printf_i+0x14c>
 800740c:	6823      	ldr	r3, [r4, #0]
 800740e:	07df      	lsls	r7, r3, #31
 8007410:	d508      	bpl.n	8007424 <_printf_i+0x14c>
 8007412:	6923      	ldr	r3, [r4, #16]
 8007414:	6861      	ldr	r1, [r4, #4]
 8007416:	4299      	cmp	r1, r3
 8007418:	bfde      	ittt	le
 800741a:	2330      	movle	r3, #48	; 0x30
 800741c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007420:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007424:	1b92      	subs	r2, r2, r6
 8007426:	6122      	str	r2, [r4, #16]
 8007428:	f8cd a000 	str.w	sl, [sp]
 800742c:	464b      	mov	r3, r9
 800742e:	aa03      	add	r2, sp, #12
 8007430:	4621      	mov	r1, r4
 8007432:	4640      	mov	r0, r8
 8007434:	f7ff fee2 	bl	80071fc <_printf_common>
 8007438:	3001      	adds	r0, #1
 800743a:	d14c      	bne.n	80074d6 <_printf_i+0x1fe>
 800743c:	f04f 30ff 	mov.w	r0, #4294967295
 8007440:	b004      	add	sp, #16
 8007442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007446:	4835      	ldr	r0, [pc, #212]	; (800751c <_printf_i+0x244>)
 8007448:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	680e      	ldr	r6, [r1, #0]
 8007450:	061f      	lsls	r7, r3, #24
 8007452:	f856 5b04 	ldr.w	r5, [r6], #4
 8007456:	600e      	str	r6, [r1, #0]
 8007458:	d514      	bpl.n	8007484 <_printf_i+0x1ac>
 800745a:	07d9      	lsls	r1, r3, #31
 800745c:	bf44      	itt	mi
 800745e:	f043 0320 	orrmi.w	r3, r3, #32
 8007462:	6023      	strmi	r3, [r4, #0]
 8007464:	b91d      	cbnz	r5, 800746e <_printf_i+0x196>
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	f023 0320 	bic.w	r3, r3, #32
 800746c:	6023      	str	r3, [r4, #0]
 800746e:	2310      	movs	r3, #16
 8007470:	e7b0      	b.n	80073d4 <_printf_i+0xfc>
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	f043 0320 	orr.w	r3, r3, #32
 8007478:	6023      	str	r3, [r4, #0]
 800747a:	2378      	movs	r3, #120	; 0x78
 800747c:	4828      	ldr	r0, [pc, #160]	; (8007520 <_printf_i+0x248>)
 800747e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007482:	e7e3      	b.n	800744c <_printf_i+0x174>
 8007484:	065e      	lsls	r6, r3, #25
 8007486:	bf48      	it	mi
 8007488:	b2ad      	uxthmi	r5, r5
 800748a:	e7e6      	b.n	800745a <_printf_i+0x182>
 800748c:	4616      	mov	r6, r2
 800748e:	e7bb      	b.n	8007408 <_printf_i+0x130>
 8007490:	680b      	ldr	r3, [r1, #0]
 8007492:	6826      	ldr	r6, [r4, #0]
 8007494:	6960      	ldr	r0, [r4, #20]
 8007496:	1d1d      	adds	r5, r3, #4
 8007498:	600d      	str	r5, [r1, #0]
 800749a:	0635      	lsls	r5, r6, #24
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	d501      	bpl.n	80074a4 <_printf_i+0x1cc>
 80074a0:	6018      	str	r0, [r3, #0]
 80074a2:	e002      	b.n	80074aa <_printf_i+0x1d2>
 80074a4:	0671      	lsls	r1, r6, #25
 80074a6:	d5fb      	bpl.n	80074a0 <_printf_i+0x1c8>
 80074a8:	8018      	strh	r0, [r3, #0]
 80074aa:	2300      	movs	r3, #0
 80074ac:	6123      	str	r3, [r4, #16]
 80074ae:	4616      	mov	r6, r2
 80074b0:	e7ba      	b.n	8007428 <_printf_i+0x150>
 80074b2:	680b      	ldr	r3, [r1, #0]
 80074b4:	1d1a      	adds	r2, r3, #4
 80074b6:	600a      	str	r2, [r1, #0]
 80074b8:	681e      	ldr	r6, [r3, #0]
 80074ba:	6862      	ldr	r2, [r4, #4]
 80074bc:	2100      	movs	r1, #0
 80074be:	4630      	mov	r0, r6
 80074c0:	f7f8 fe8e 	bl	80001e0 <memchr>
 80074c4:	b108      	cbz	r0, 80074ca <_printf_i+0x1f2>
 80074c6:	1b80      	subs	r0, r0, r6
 80074c8:	6060      	str	r0, [r4, #4]
 80074ca:	6863      	ldr	r3, [r4, #4]
 80074cc:	6123      	str	r3, [r4, #16]
 80074ce:	2300      	movs	r3, #0
 80074d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074d4:	e7a8      	b.n	8007428 <_printf_i+0x150>
 80074d6:	6923      	ldr	r3, [r4, #16]
 80074d8:	4632      	mov	r2, r6
 80074da:	4649      	mov	r1, r9
 80074dc:	4640      	mov	r0, r8
 80074de:	47d0      	blx	sl
 80074e0:	3001      	adds	r0, #1
 80074e2:	d0ab      	beq.n	800743c <_printf_i+0x164>
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	079b      	lsls	r3, r3, #30
 80074e8:	d413      	bmi.n	8007512 <_printf_i+0x23a>
 80074ea:	68e0      	ldr	r0, [r4, #12]
 80074ec:	9b03      	ldr	r3, [sp, #12]
 80074ee:	4298      	cmp	r0, r3
 80074f0:	bfb8      	it	lt
 80074f2:	4618      	movlt	r0, r3
 80074f4:	e7a4      	b.n	8007440 <_printf_i+0x168>
 80074f6:	2301      	movs	r3, #1
 80074f8:	4632      	mov	r2, r6
 80074fa:	4649      	mov	r1, r9
 80074fc:	4640      	mov	r0, r8
 80074fe:	47d0      	blx	sl
 8007500:	3001      	adds	r0, #1
 8007502:	d09b      	beq.n	800743c <_printf_i+0x164>
 8007504:	3501      	adds	r5, #1
 8007506:	68e3      	ldr	r3, [r4, #12]
 8007508:	9903      	ldr	r1, [sp, #12]
 800750a:	1a5b      	subs	r3, r3, r1
 800750c:	42ab      	cmp	r3, r5
 800750e:	dcf2      	bgt.n	80074f6 <_printf_i+0x21e>
 8007510:	e7eb      	b.n	80074ea <_printf_i+0x212>
 8007512:	2500      	movs	r5, #0
 8007514:	f104 0619 	add.w	r6, r4, #25
 8007518:	e7f5      	b.n	8007506 <_printf_i+0x22e>
 800751a:	bf00      	nop
 800751c:	08008371 	.word	0x08008371
 8007520:	08008382 	.word	0x08008382

08007524 <memcpy>:
 8007524:	440a      	add	r2, r1
 8007526:	4291      	cmp	r1, r2
 8007528:	f100 33ff 	add.w	r3, r0, #4294967295
 800752c:	d100      	bne.n	8007530 <memcpy+0xc>
 800752e:	4770      	bx	lr
 8007530:	b510      	push	{r4, lr}
 8007532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007536:	f803 4f01 	strb.w	r4, [r3, #1]!
 800753a:	4291      	cmp	r1, r2
 800753c:	d1f9      	bne.n	8007532 <memcpy+0xe>
 800753e:	bd10      	pop	{r4, pc}

08007540 <memmove>:
 8007540:	4288      	cmp	r0, r1
 8007542:	b510      	push	{r4, lr}
 8007544:	eb01 0402 	add.w	r4, r1, r2
 8007548:	d902      	bls.n	8007550 <memmove+0x10>
 800754a:	4284      	cmp	r4, r0
 800754c:	4623      	mov	r3, r4
 800754e:	d807      	bhi.n	8007560 <memmove+0x20>
 8007550:	1e43      	subs	r3, r0, #1
 8007552:	42a1      	cmp	r1, r4
 8007554:	d008      	beq.n	8007568 <memmove+0x28>
 8007556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800755a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800755e:	e7f8      	b.n	8007552 <memmove+0x12>
 8007560:	4402      	add	r2, r0
 8007562:	4601      	mov	r1, r0
 8007564:	428a      	cmp	r2, r1
 8007566:	d100      	bne.n	800756a <memmove+0x2a>
 8007568:	bd10      	pop	{r4, pc}
 800756a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800756e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007572:	e7f7      	b.n	8007564 <memmove+0x24>

08007574 <_free_r>:
 8007574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007576:	2900      	cmp	r1, #0
 8007578:	d048      	beq.n	800760c <_free_r+0x98>
 800757a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800757e:	9001      	str	r0, [sp, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	f1a1 0404 	sub.w	r4, r1, #4
 8007586:	bfb8      	it	lt
 8007588:	18e4      	addlt	r4, r4, r3
 800758a:	f000 f8d3 	bl	8007734 <__malloc_lock>
 800758e:	4a20      	ldr	r2, [pc, #128]	; (8007610 <_free_r+0x9c>)
 8007590:	9801      	ldr	r0, [sp, #4]
 8007592:	6813      	ldr	r3, [r2, #0]
 8007594:	4615      	mov	r5, r2
 8007596:	b933      	cbnz	r3, 80075a6 <_free_r+0x32>
 8007598:	6063      	str	r3, [r4, #4]
 800759a:	6014      	str	r4, [r2, #0]
 800759c:	b003      	add	sp, #12
 800759e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075a2:	f000 b8cd 	b.w	8007740 <__malloc_unlock>
 80075a6:	42a3      	cmp	r3, r4
 80075a8:	d90b      	bls.n	80075c2 <_free_r+0x4e>
 80075aa:	6821      	ldr	r1, [r4, #0]
 80075ac:	1862      	adds	r2, r4, r1
 80075ae:	4293      	cmp	r3, r2
 80075b0:	bf04      	itt	eq
 80075b2:	681a      	ldreq	r2, [r3, #0]
 80075b4:	685b      	ldreq	r3, [r3, #4]
 80075b6:	6063      	str	r3, [r4, #4]
 80075b8:	bf04      	itt	eq
 80075ba:	1852      	addeq	r2, r2, r1
 80075bc:	6022      	streq	r2, [r4, #0]
 80075be:	602c      	str	r4, [r5, #0]
 80075c0:	e7ec      	b.n	800759c <_free_r+0x28>
 80075c2:	461a      	mov	r2, r3
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	b10b      	cbz	r3, 80075cc <_free_r+0x58>
 80075c8:	42a3      	cmp	r3, r4
 80075ca:	d9fa      	bls.n	80075c2 <_free_r+0x4e>
 80075cc:	6811      	ldr	r1, [r2, #0]
 80075ce:	1855      	adds	r5, r2, r1
 80075d0:	42a5      	cmp	r5, r4
 80075d2:	d10b      	bne.n	80075ec <_free_r+0x78>
 80075d4:	6824      	ldr	r4, [r4, #0]
 80075d6:	4421      	add	r1, r4
 80075d8:	1854      	adds	r4, r2, r1
 80075da:	42a3      	cmp	r3, r4
 80075dc:	6011      	str	r1, [r2, #0]
 80075de:	d1dd      	bne.n	800759c <_free_r+0x28>
 80075e0:	681c      	ldr	r4, [r3, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	6053      	str	r3, [r2, #4]
 80075e6:	4421      	add	r1, r4
 80075e8:	6011      	str	r1, [r2, #0]
 80075ea:	e7d7      	b.n	800759c <_free_r+0x28>
 80075ec:	d902      	bls.n	80075f4 <_free_r+0x80>
 80075ee:	230c      	movs	r3, #12
 80075f0:	6003      	str	r3, [r0, #0]
 80075f2:	e7d3      	b.n	800759c <_free_r+0x28>
 80075f4:	6825      	ldr	r5, [r4, #0]
 80075f6:	1961      	adds	r1, r4, r5
 80075f8:	428b      	cmp	r3, r1
 80075fa:	bf04      	itt	eq
 80075fc:	6819      	ldreq	r1, [r3, #0]
 80075fe:	685b      	ldreq	r3, [r3, #4]
 8007600:	6063      	str	r3, [r4, #4]
 8007602:	bf04      	itt	eq
 8007604:	1949      	addeq	r1, r1, r5
 8007606:	6021      	streq	r1, [r4, #0]
 8007608:	6054      	str	r4, [r2, #4]
 800760a:	e7c7      	b.n	800759c <_free_r+0x28>
 800760c:	b003      	add	sp, #12
 800760e:	bd30      	pop	{r4, r5, pc}
 8007610:	2000017c 	.word	0x2000017c

08007614 <_malloc_r>:
 8007614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007616:	1ccd      	adds	r5, r1, #3
 8007618:	f025 0503 	bic.w	r5, r5, #3
 800761c:	3508      	adds	r5, #8
 800761e:	2d0c      	cmp	r5, #12
 8007620:	bf38      	it	cc
 8007622:	250c      	movcc	r5, #12
 8007624:	2d00      	cmp	r5, #0
 8007626:	4606      	mov	r6, r0
 8007628:	db01      	blt.n	800762e <_malloc_r+0x1a>
 800762a:	42a9      	cmp	r1, r5
 800762c:	d903      	bls.n	8007636 <_malloc_r+0x22>
 800762e:	230c      	movs	r3, #12
 8007630:	6033      	str	r3, [r6, #0]
 8007632:	2000      	movs	r0, #0
 8007634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007636:	f000 f87d 	bl	8007734 <__malloc_lock>
 800763a:	4921      	ldr	r1, [pc, #132]	; (80076c0 <_malloc_r+0xac>)
 800763c:	680a      	ldr	r2, [r1, #0]
 800763e:	4614      	mov	r4, r2
 8007640:	b99c      	cbnz	r4, 800766a <_malloc_r+0x56>
 8007642:	4f20      	ldr	r7, [pc, #128]	; (80076c4 <_malloc_r+0xb0>)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	b923      	cbnz	r3, 8007652 <_malloc_r+0x3e>
 8007648:	4621      	mov	r1, r4
 800764a:	4630      	mov	r0, r6
 800764c:	f000 f862 	bl	8007714 <_sbrk_r>
 8007650:	6038      	str	r0, [r7, #0]
 8007652:	4629      	mov	r1, r5
 8007654:	4630      	mov	r0, r6
 8007656:	f000 f85d 	bl	8007714 <_sbrk_r>
 800765a:	1c43      	adds	r3, r0, #1
 800765c:	d123      	bne.n	80076a6 <_malloc_r+0x92>
 800765e:	230c      	movs	r3, #12
 8007660:	6033      	str	r3, [r6, #0]
 8007662:	4630      	mov	r0, r6
 8007664:	f000 f86c 	bl	8007740 <__malloc_unlock>
 8007668:	e7e3      	b.n	8007632 <_malloc_r+0x1e>
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	1b5b      	subs	r3, r3, r5
 800766e:	d417      	bmi.n	80076a0 <_malloc_r+0x8c>
 8007670:	2b0b      	cmp	r3, #11
 8007672:	d903      	bls.n	800767c <_malloc_r+0x68>
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	441c      	add	r4, r3
 8007678:	6025      	str	r5, [r4, #0]
 800767a:	e004      	b.n	8007686 <_malloc_r+0x72>
 800767c:	6863      	ldr	r3, [r4, #4]
 800767e:	42a2      	cmp	r2, r4
 8007680:	bf0c      	ite	eq
 8007682:	600b      	streq	r3, [r1, #0]
 8007684:	6053      	strne	r3, [r2, #4]
 8007686:	4630      	mov	r0, r6
 8007688:	f000 f85a 	bl	8007740 <__malloc_unlock>
 800768c:	f104 000b 	add.w	r0, r4, #11
 8007690:	1d23      	adds	r3, r4, #4
 8007692:	f020 0007 	bic.w	r0, r0, #7
 8007696:	1ac2      	subs	r2, r0, r3
 8007698:	d0cc      	beq.n	8007634 <_malloc_r+0x20>
 800769a:	1a1b      	subs	r3, r3, r0
 800769c:	50a3      	str	r3, [r4, r2]
 800769e:	e7c9      	b.n	8007634 <_malloc_r+0x20>
 80076a0:	4622      	mov	r2, r4
 80076a2:	6864      	ldr	r4, [r4, #4]
 80076a4:	e7cc      	b.n	8007640 <_malloc_r+0x2c>
 80076a6:	1cc4      	adds	r4, r0, #3
 80076a8:	f024 0403 	bic.w	r4, r4, #3
 80076ac:	42a0      	cmp	r0, r4
 80076ae:	d0e3      	beq.n	8007678 <_malloc_r+0x64>
 80076b0:	1a21      	subs	r1, r4, r0
 80076b2:	4630      	mov	r0, r6
 80076b4:	f000 f82e 	bl	8007714 <_sbrk_r>
 80076b8:	3001      	adds	r0, #1
 80076ba:	d1dd      	bne.n	8007678 <_malloc_r+0x64>
 80076bc:	e7cf      	b.n	800765e <_malloc_r+0x4a>
 80076be:	bf00      	nop
 80076c0:	2000017c 	.word	0x2000017c
 80076c4:	20000180 	.word	0x20000180

080076c8 <_realloc_r>:
 80076c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ca:	4607      	mov	r7, r0
 80076cc:	4614      	mov	r4, r2
 80076ce:	460e      	mov	r6, r1
 80076d0:	b921      	cbnz	r1, 80076dc <_realloc_r+0x14>
 80076d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076d6:	4611      	mov	r1, r2
 80076d8:	f7ff bf9c 	b.w	8007614 <_malloc_r>
 80076dc:	b922      	cbnz	r2, 80076e8 <_realloc_r+0x20>
 80076de:	f7ff ff49 	bl	8007574 <_free_r>
 80076e2:	4625      	mov	r5, r4
 80076e4:	4628      	mov	r0, r5
 80076e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e8:	f000 f830 	bl	800774c <_malloc_usable_size_r>
 80076ec:	42a0      	cmp	r0, r4
 80076ee:	d20f      	bcs.n	8007710 <_realloc_r+0x48>
 80076f0:	4621      	mov	r1, r4
 80076f2:	4638      	mov	r0, r7
 80076f4:	f7ff ff8e 	bl	8007614 <_malloc_r>
 80076f8:	4605      	mov	r5, r0
 80076fa:	2800      	cmp	r0, #0
 80076fc:	d0f2      	beq.n	80076e4 <_realloc_r+0x1c>
 80076fe:	4631      	mov	r1, r6
 8007700:	4622      	mov	r2, r4
 8007702:	f7ff ff0f 	bl	8007524 <memcpy>
 8007706:	4631      	mov	r1, r6
 8007708:	4638      	mov	r0, r7
 800770a:	f7ff ff33 	bl	8007574 <_free_r>
 800770e:	e7e9      	b.n	80076e4 <_realloc_r+0x1c>
 8007710:	4635      	mov	r5, r6
 8007712:	e7e7      	b.n	80076e4 <_realloc_r+0x1c>

08007714 <_sbrk_r>:
 8007714:	b538      	push	{r3, r4, r5, lr}
 8007716:	4d06      	ldr	r5, [pc, #24]	; (8007730 <_sbrk_r+0x1c>)
 8007718:	2300      	movs	r3, #0
 800771a:	4604      	mov	r4, r0
 800771c:	4608      	mov	r0, r1
 800771e:	602b      	str	r3, [r5, #0]
 8007720:	f7fb f8b8 	bl	8002894 <_sbrk>
 8007724:	1c43      	adds	r3, r0, #1
 8007726:	d102      	bne.n	800772e <_sbrk_r+0x1a>
 8007728:	682b      	ldr	r3, [r5, #0]
 800772a:	b103      	cbz	r3, 800772e <_sbrk_r+0x1a>
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	bd38      	pop	{r3, r4, r5, pc}
 8007730:	2000171c 	.word	0x2000171c

08007734 <__malloc_lock>:
 8007734:	4801      	ldr	r0, [pc, #4]	; (800773c <__malloc_lock+0x8>)
 8007736:	f000 b811 	b.w	800775c <__retarget_lock_acquire_recursive>
 800773a:	bf00      	nop
 800773c:	20001724 	.word	0x20001724

08007740 <__malloc_unlock>:
 8007740:	4801      	ldr	r0, [pc, #4]	; (8007748 <__malloc_unlock+0x8>)
 8007742:	f000 b80c 	b.w	800775e <__retarget_lock_release_recursive>
 8007746:	bf00      	nop
 8007748:	20001724 	.word	0x20001724

0800774c <_malloc_usable_size_r>:
 800774c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007750:	1f18      	subs	r0, r3, #4
 8007752:	2b00      	cmp	r3, #0
 8007754:	bfbc      	itt	lt
 8007756:	580b      	ldrlt	r3, [r1, r0]
 8007758:	18c0      	addlt	r0, r0, r3
 800775a:	4770      	bx	lr

0800775c <__retarget_lock_acquire_recursive>:
 800775c:	4770      	bx	lr

0800775e <__retarget_lock_release_recursive>:
 800775e:	4770      	bx	lr

08007760 <_init>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	bf00      	nop
 8007764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007766:	bc08      	pop	{r3}
 8007768:	469e      	mov	lr, r3
 800776a:	4770      	bx	lr

0800776c <_fini>:
 800776c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776e:	bf00      	nop
 8007770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007772:	bc08      	pop	{r3}
 8007774:	469e      	mov	lr, r3
 8007776:	4770      	bx	lr
